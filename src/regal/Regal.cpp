/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir src/regal
*/

/*
  Copyright (c) 2011 NVIDIA Corporation
  Copyright (c) 2011-2012 Cass Everitt
  Copyright (c) 2012 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012 Nigel Stewart
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include <map>
using namespace std;

#include "RegalLog.h"
#include "RegalToken.h"

#include "RegalPrivate.h"
#include "RegalIff.h"

void RegalMakeCurrent( RegalSystemContext ctx )
{
  ::REGAL_NAMESPACE_INTERNAL::RegalPrivateMakeCurrent( ctx );
}

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace Logging;
using Token::toString;

#if REGAL_SYS_WGL
extern "C" { DWORD __stdcall GetCurrentThreadId(void); }
#endif

DispatchTableGlobal dispatchTableGlobal;

#if REGAL_SYS_WGL

    __declspec( thread ) void * regalCurrentContext = NULL;

    inline RegalThread RegalPrivateThreadSelf()
    {
        return GetCurrentThreadId();
    }
    inline bool RegalPrivateThreadsEqual( RegalThread t0, RegalThread t1 )
    {
        return t0 == t1;
    }
#else
    pthread_key_t regalPrivateCurrentContextKey = 0;

    struct RegalPrivateTlsInit {
        RegalPrivateTlsInit()
        {
            pthread_key_create( &regalPrivateCurrentContextKey, NULL );
        }
    };
    RegalPrivateTlsInit regalPrivateTlsInit;

    inline RegalThread RegalPrivateThreadSelf()
    {
        return pthread_self();
    }

    inline bool RegalPrivateThreadsEqual( RegalThread t0, RegalThread t1 )
    {
        return pthread_equal( t0, t1 ) != 0;
    }
#endif

map<RegalSystemContext, RegalContext *> sc2rc;
map<RegalThread, RegalContext *> th2rc;

void RegalPrivateMakeCurrent(RegalSystemContext sysCtx)
{
//  Trace("RegalPrivateMakeCurrent ",sysCtx);
    RegalThread thr = RegalPrivateThreadSelf();
    if (sysCtx) {
        RegalContext * ctx = sc2rc.count( sysCtx ) > 0 ? sc2rc[ sysCtx ] : NULL;
        if (!ctx) {
            ctx = new RegalContext();
#if REGAL_SYS_WGL
            regalCurrentContext = ctx;
#else
            if (regalPrivateCurrentContextKey == 0) {
                pthread_key_create( & regalPrivateCurrentContextKey, NULL );
            }
            pthread_setspecific( regalPrivateCurrentContextKey, ctx );
#endif
            ctx->Init();
            sc2rc[ sysCtx ] = ctx;
            ctx->sysCtx = sysCtx;
        }

    if( th2rc.count( thr ) != 0 ) {
      RegalContext * & c = th2rc[ thr ];
      if( c ) {
        RegalAssert( c->thr == thr );
        c->thr = 0;
        c = NULL;
      }
    }
    RegalAssert( th2rc.count( thr ) == 0 || th2rc[ thr ] == NULL );
    RegalAssert( ctx->thr == 0 );
    th2rc[ thr ] = ctx;
    ctx->thr = thr;
#if REGAL_SYS_WGL
        regalCurrentContext = ctx;
#else
        pthread_setspecific( regalPrivateCurrentContextKey, ctx );
#endif
  } else {
    if( th2rc.count( thr ) ) {
      RegalContext * & ctx = th2rc[ thr ];
      if( ctx != NULL ) {
        RegalAssert( ctx->thr == thr );
        ctx->thr = 0;
        ctx = NULL;
        RegalAssert( th2rc[ thr ] == NULL );
      }
    }
#if REGAL_SYS_WGL
    regalCurrentContext = NULL;
#else
    pthread_setspecific( regalPrivateCurrentContextKey, NULL );
#endif
  }
}

#ifdef __cplusplus
extern "C" {
#endif

/* GL_VERSION_1_0 */

REGAL_DECL void REGAL_CALL glNewList(GLuint list, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNewList(", list, ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNewList);
  RegalAssert(rCtx->dsp.CurrTable()->glNewList != glNewList);
  rCtx->dsp.CurrTable()->glNewList(list, mode);
}

REGAL_DECL void REGAL_CALL glEndList(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndList()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndList);
  RegalAssert(rCtx->dsp.CurrTable()->glEndList != glEndList);
  rCtx->dsp.CurrTable()->glEndList();
}

REGAL_DECL void REGAL_CALL glCallList(GLuint list)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCallList(", list, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCallList);
  RegalAssert(rCtx->dsp.CurrTable()->glCallList != glCallList);
  rCtx->dsp.CurrTable()->glCallList(list);
}

REGAL_DECL void REGAL_CALL glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCallLists(", n, ", ", toString(type), ", ", lists, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCallLists);
  RegalAssert(rCtx->dsp.CurrTable()->glCallLists != glCallLists);
  rCtx->dsp.CurrTable()->glCallLists(n, type, lists);
}

REGAL_DECL void REGAL_CALL glDeleteLists(GLuint list, GLsizei range)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteLists(", list, ", ", range, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteLists);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteLists != glDeleteLists);
  rCtx->dsp.CurrTable()->glDeleteLists(list, range);
}

REGAL_DECL GLuint REGAL_CALL glGenLists(GLsizei range)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenLists(", range, ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenLists);
  RegalAssert(rCtx->dsp.CurrTable()->glGenLists != glGenLists);
  return rCtx->dsp.CurrTable()->glGenLists(range);
}

REGAL_DECL void REGAL_CALL glListBase(GLuint base)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glListBase(", base, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glListBase);
  RegalAssert(rCtx->dsp.CurrTable()->glListBase != glListBase);
  rCtx->dsp.CurrTable()->glListBase(base);
}

REGAL_DECL void REGAL_CALL glBegin(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBegin(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBegin);
  RegalAssert(rCtx->dsp.CurrTable()->glBegin != glBegin);
  rCtx->dsp.CurrTable()->glBegin(mode);
}

REGAL_DECL void REGAL_CALL glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBitmap(", width, ", ", height, ", ", xorig, ", ", yorig, ", ", xmove, ", ", ymove, ", ", bitmap, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBitmap);
  RegalAssert(rCtx->dsp.CurrTable()->glBitmap != glBitmap);
  rCtx->dsp.CurrTable()->glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}

REGAL_DECL void REGAL_CALL glColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3b(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3b);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3b != glColor3b);
  rCtx->dsp.CurrTable()->glColor3b(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3bv(const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3bv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3bv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3bv != glColor3bv);
  rCtx->dsp.CurrTable()->glColor3bv(v);
}

REGAL_DECL void REGAL_CALL glColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3d(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3d);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3d != glColor3d);
  rCtx->dsp.CurrTable()->glColor3d(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3dv != glColor3dv);
  rCtx->dsp.CurrTable()->glColor3dv(v);
}

REGAL_DECL void REGAL_CALL glColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3f(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3f);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3f != glColor3f);
  rCtx->dsp.CurrTable()->glColor3f(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3fv != glColor3fv);
  rCtx->dsp.CurrTable()->glColor3fv(v);
}

REGAL_DECL void REGAL_CALL glColor3i(GLint red, GLint green, GLint blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3i(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3i);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3i != glColor3i);
  rCtx->dsp.CurrTable()->glColor3i(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3iv != glColor3iv);
  rCtx->dsp.CurrTable()->glColor3iv(v);
}

REGAL_DECL void REGAL_CALL glColor3s(GLshort red, GLshort green, GLshort blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3s(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3s);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3s != glColor3s);
  rCtx->dsp.CurrTable()->glColor3s(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3sv != glColor3sv);
  rCtx->dsp.CurrTable()->glColor3sv(v);
}

REGAL_DECL void REGAL_CALL glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3ub(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3ub);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3ub != glColor3ub);
  rCtx->dsp.CurrTable()->glColor3ub(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3ubv(const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3ubv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3ubv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3ubv != glColor3ubv);
  rCtx->dsp.CurrTable()->glColor3ubv(v);
}

REGAL_DECL void REGAL_CALL glColor3ui(GLuint red, GLuint green, GLuint blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3ui(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3ui != glColor3ui);
  rCtx->dsp.CurrTable()->glColor3ui(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3uiv(const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3uiv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3uiv != glColor3uiv);
  rCtx->dsp.CurrTable()->glColor3uiv(v);
}

REGAL_DECL void REGAL_CALL glColor3us(GLushort red, GLushort green, GLushort blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3us(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3us);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3us != glColor3us);
  rCtx->dsp.CurrTable()->glColor3us(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3usv(const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3usv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3usv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3usv != glColor3usv);
  rCtx->dsp.CurrTable()->glColor3usv(v);
}

REGAL_DECL void REGAL_CALL glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4b(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4b);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4b != glColor4b);
  rCtx->dsp.CurrTable()->glColor4b(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4bv(const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4bv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4bv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4bv != glColor4bv);
  rCtx->dsp.CurrTable()->glColor4bv(v);
}

REGAL_DECL void REGAL_CALL glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4d(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4d);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4d != glColor4d);
  rCtx->dsp.CurrTable()->glColor4d(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4dv != glColor4dv);
  rCtx->dsp.CurrTable()->glColor4dv(v);
}

REGAL_DECL void REGAL_CALL glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4f(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4f);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4f != glColor4f);
  rCtx->dsp.CurrTable()->glColor4f(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4fv != glColor4fv);
  rCtx->dsp.CurrTable()->glColor4fv(v);
}

REGAL_DECL void REGAL_CALL glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4i(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4i);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4i != glColor4i);
  rCtx->dsp.CurrTable()->glColor4i(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4iv != glColor4iv);
  rCtx->dsp.CurrTable()->glColor4iv(v);
}

REGAL_DECL void REGAL_CALL glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4s(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4s);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4s != glColor4s);
  rCtx->dsp.CurrTable()->glColor4s(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4sv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4sv != glColor4sv);
  rCtx->dsp.CurrTable()->glColor4sv(v);
}

REGAL_DECL void REGAL_CALL glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4ub(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ub);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ub != glColor4ub);
  rCtx->dsp.CurrTable()->glColor4ub(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4ubv(const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4ubv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubv != glColor4ubv);
  rCtx->dsp.CurrTable()->glColor4ubv(v);
}

REGAL_DECL void REGAL_CALL glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4ui(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ui != glColor4ui);
  rCtx->dsp.CurrTable()->glColor4ui(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4uiv(const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4uiv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4uiv != glColor4uiv);
  rCtx->dsp.CurrTable()->glColor4uiv(v);
}

REGAL_DECL void REGAL_CALL glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4us(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4us);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4us != glColor4us);
  rCtx->dsp.CurrTable()->glColor4us(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4usv(const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4usv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4usv);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4usv != glColor4usv);
  rCtx->dsp.CurrTable()->glColor4usv(v);
}

REGAL_DECL void REGAL_CALL glEdgeFlag(GLboolean flag)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEdgeFlag(", flag, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlag);
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlag != glEdgeFlag);
  rCtx->dsp.CurrTable()->glEdgeFlag(flag);
}

REGAL_DECL void REGAL_CALL glEdgeFlagv(const GLboolean *flag)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEdgeFlagv(", flag, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagv);
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagv != glEdgeFlagv);
  rCtx->dsp.CurrTable()->glEdgeFlagv(flag);
}

REGAL_DECL void REGAL_CALL glEnd(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnd()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnd);
  RegalAssert(rCtx->dsp.CurrTable()->glEnd != glEnd);
  rCtx->dsp.CurrTable()->glEnd();
}

REGAL_DECL void REGAL_CALL glIndexd(GLdouble c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexd(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexd);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexd != glIndexd);
  rCtx->dsp.CurrTable()->glIndexd(c);
}

REGAL_DECL void REGAL_CALL glIndexdv(const GLdouble *c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexdv(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexdv);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexdv != glIndexdv);
  rCtx->dsp.CurrTable()->glIndexdv(c);
}

REGAL_DECL void REGAL_CALL glIndexf(GLfloat c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexf(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexf);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexf != glIndexf);
  rCtx->dsp.CurrTable()->glIndexf(c);
}

REGAL_DECL void REGAL_CALL glIndexfv(const GLfloat *c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexfv(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexfv);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexfv != glIndexfv);
  rCtx->dsp.CurrTable()->glIndexfv(c);
}

REGAL_DECL void REGAL_CALL glIndexi(GLint c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexi(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexi);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexi != glIndexi);
  rCtx->dsp.CurrTable()->glIndexi(c);
}

REGAL_DECL void REGAL_CALL glIndexiv(const GLint *c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexiv(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexiv);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexiv != glIndexiv);
  rCtx->dsp.CurrTable()->glIndexiv(c);
}

REGAL_DECL void REGAL_CALL glIndexs(GLshort c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexs(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexs);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexs != glIndexs);
  rCtx->dsp.CurrTable()->glIndexs(c);
}

REGAL_DECL void REGAL_CALL glIndexsv(const GLshort *c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexsv(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexsv);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexsv != glIndexsv);
  rCtx->dsp.CurrTable()->glIndexsv(c);
}

REGAL_DECL void REGAL_CALL glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3b(", nx, ", ", ny, ", ", nz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3b);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3b != glNormal3b);
  rCtx->dsp.CurrTable()->glNormal3b(nx, ny, nz);
}

REGAL_DECL void REGAL_CALL glNormal3bv(const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3bv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3bv);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3bv != glNormal3bv);
  rCtx->dsp.CurrTable()->glNormal3bv(v);
}

REGAL_DECL void REGAL_CALL glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3d(", nx, ", ", ny, ", ", nz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3d);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3d != glNormal3d);
  rCtx->dsp.CurrTable()->glNormal3d(nx, ny, nz);
}

REGAL_DECL void REGAL_CALL glNormal3dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3dv != glNormal3dv);
  rCtx->dsp.CurrTable()->glNormal3dv(v);
}

REGAL_DECL void REGAL_CALL glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3f(", nx, ", ", ny, ", ", nz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3f);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3f != glNormal3f);
  rCtx->dsp.CurrTable()->glNormal3f(nx, ny, nz);
}

REGAL_DECL void REGAL_CALL glNormal3fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3fv != glNormal3fv);
  rCtx->dsp.CurrTable()->glNormal3fv(v);
}

REGAL_DECL void REGAL_CALL glNormal3i(GLint nx, GLint ny, GLint nz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3i(", nx, ", ", ny, ", ", nz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3i);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3i != glNormal3i);
  rCtx->dsp.CurrTable()->glNormal3i(nx, ny, nz);
}

REGAL_DECL void REGAL_CALL glNormal3iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3iv != glNormal3iv);
  rCtx->dsp.CurrTable()->glNormal3iv(v);
}

REGAL_DECL void REGAL_CALL glNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3s(", nx, ", ", ny, ", ", nz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3s);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3s != glNormal3s);
  rCtx->dsp.CurrTable()->glNormal3s(nx, ny, nz);
}

REGAL_DECL void REGAL_CALL glNormal3sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3sv != glNormal3sv);
  rCtx->dsp.CurrTable()->glNormal3sv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos2d(GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos2d(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2d);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2d != glRasterPos2d);
  rCtx->dsp.CurrTable()->glRasterPos2d(x, y);
}

REGAL_DECL void REGAL_CALL glRasterPos2dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos2dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2dv != glRasterPos2dv);
  rCtx->dsp.CurrTable()->glRasterPos2dv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos2f(GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos2f(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2f);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2f != glRasterPos2f);
  rCtx->dsp.CurrTable()->glRasterPos2f(x, y);
}

REGAL_DECL void REGAL_CALL glRasterPos2fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos2fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2fv != glRasterPos2fv);
  rCtx->dsp.CurrTable()->glRasterPos2fv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos2i(GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos2i(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2i);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2i != glRasterPos2i);
  rCtx->dsp.CurrTable()->glRasterPos2i(x, y);
}

REGAL_DECL void REGAL_CALL glRasterPos2iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos2iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2iv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2iv != glRasterPos2iv);
  rCtx->dsp.CurrTable()->glRasterPos2iv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos2s(GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos2s(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2s);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2s != glRasterPos2s);
  rCtx->dsp.CurrTable()->glRasterPos2s(x, y);
}

REGAL_DECL void REGAL_CALL glRasterPos2sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos2sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2sv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos2sv != glRasterPos2sv);
  rCtx->dsp.CurrTable()->glRasterPos2sv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos3d(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3d);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3d != glRasterPos3d);
  rCtx->dsp.CurrTable()->glRasterPos3d(x, y, z);
}

REGAL_DECL void REGAL_CALL glRasterPos3dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos3dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3dv != glRasterPos3dv);
  rCtx->dsp.CurrTable()->glRasterPos3dv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos3f(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3f);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3f != glRasterPos3f);
  rCtx->dsp.CurrTable()->glRasterPos3f(x, y, z);
}

REGAL_DECL void REGAL_CALL glRasterPos3fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos3fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3fv != glRasterPos3fv);
  rCtx->dsp.CurrTable()->glRasterPos3fv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos3i(GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos3i(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3i);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3i != glRasterPos3i);
  rCtx->dsp.CurrTable()->glRasterPos3i(x, y, z);
}

REGAL_DECL void REGAL_CALL glRasterPos3iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos3iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3iv != glRasterPos3iv);
  rCtx->dsp.CurrTable()->glRasterPos3iv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos3s(GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos3s(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3s);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3s != glRasterPos3s);
  rCtx->dsp.CurrTable()->glRasterPos3s(x, y, z);
}

REGAL_DECL void REGAL_CALL glRasterPos3sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos3sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos3sv != glRasterPos3sv);
  rCtx->dsp.CurrTable()->glRasterPos3sv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos4d(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4d);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4d != glRasterPos4d);
  rCtx->dsp.CurrTable()->glRasterPos4d(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glRasterPos4dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos4dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4dv != glRasterPos4dv);
  rCtx->dsp.CurrTable()->glRasterPos4dv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos4f(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4f);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4f != glRasterPos4f);
  rCtx->dsp.CurrTable()->glRasterPos4f(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glRasterPos4fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos4fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4fv != glRasterPos4fv);
  rCtx->dsp.CurrTable()->glRasterPos4fv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos4i(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4i);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4i != glRasterPos4i);
  rCtx->dsp.CurrTable()->glRasterPos4i(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glRasterPos4iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos4iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4iv != glRasterPos4iv);
  rCtx->dsp.CurrTable()->glRasterPos4iv(v);
}

REGAL_DECL void REGAL_CALL glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos4s(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4s);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4s != glRasterPos4s);
  rCtx->dsp.CurrTable()->glRasterPos4s(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glRasterPos4sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRasterPos4sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4sv);
  RegalAssert(rCtx->dsp.CurrTable()->glRasterPos4sv != glRasterPos4sv);
  rCtx->dsp.CurrTable()->glRasterPos4sv(v);
}

REGAL_DECL void REGAL_CALL glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRectd(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRectd);
  RegalAssert(rCtx->dsp.CurrTable()->glRectd != glRectd);
  rCtx->dsp.CurrTable()->glRectd(x1, y1, x2, y2);
}

REGAL_DECL void REGAL_CALL glRectdv(const GLdouble *v1, const GLdouble *v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRectdv(", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRectdv);
  RegalAssert(rCtx->dsp.CurrTable()->glRectdv != glRectdv);
  rCtx->dsp.CurrTable()->glRectdv(v1, v2);
}

REGAL_DECL void REGAL_CALL glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRectf(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRectf);
  RegalAssert(rCtx->dsp.CurrTable()->glRectf != glRectf);
  rCtx->dsp.CurrTable()->glRectf(x1, y1, x2, y2);
}

REGAL_DECL void REGAL_CALL glRectfv(const GLfloat *v1, const GLfloat *v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRectfv(", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRectfv);
  RegalAssert(rCtx->dsp.CurrTable()->glRectfv != glRectfv);
  rCtx->dsp.CurrTable()->glRectfv(v1, v2);
}

REGAL_DECL void REGAL_CALL glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRecti(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRecti);
  RegalAssert(rCtx->dsp.CurrTable()->glRecti != glRecti);
  rCtx->dsp.CurrTable()->glRecti(x1, y1, x2, y2);
}

REGAL_DECL void REGAL_CALL glRectiv(const GLint *v1, const GLint *v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRectiv(", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRectiv);
  RegalAssert(rCtx->dsp.CurrTable()->glRectiv != glRectiv);
  rCtx->dsp.CurrTable()->glRectiv(v1, v2);
}

REGAL_DECL void REGAL_CALL glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRects(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRects);
  RegalAssert(rCtx->dsp.CurrTable()->glRects != glRects);
  rCtx->dsp.CurrTable()->glRects(x1, y1, x2, y2);
}

REGAL_DECL void REGAL_CALL glRectsv(const GLshort *v1, const GLshort *v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRectsv(", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRectsv);
  RegalAssert(rCtx->dsp.CurrTable()->glRectsv != glRectsv);
  rCtx->dsp.CurrTable()->glRectsv(v1, v2);
}

REGAL_DECL void REGAL_CALL glTexCoord1d(GLdouble s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1d(", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1d);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1d != glTexCoord1d);
  rCtx->dsp.CurrTable()->glTexCoord1d(s);
}

REGAL_DECL void REGAL_CALL glTexCoord1dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1dv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1dv != glTexCoord1dv);
  rCtx->dsp.CurrTable()->glTexCoord1dv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord1f(GLfloat s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1f(", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1f);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1f != glTexCoord1f);
  rCtx->dsp.CurrTable()->glTexCoord1f(s);
}

REGAL_DECL void REGAL_CALL glTexCoord1fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1fv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1fv != glTexCoord1fv);
  rCtx->dsp.CurrTable()->glTexCoord1fv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord1i(GLint s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1i(", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1i);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1i != glTexCoord1i);
  rCtx->dsp.CurrTable()->glTexCoord1i(s);
}

REGAL_DECL void REGAL_CALL glTexCoord1iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1iv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1iv != glTexCoord1iv);
  rCtx->dsp.CurrTable()->glTexCoord1iv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord1s(GLshort s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1s(", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1s);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1s != glTexCoord1s);
  rCtx->dsp.CurrTable()->glTexCoord1s(s);
}

REGAL_DECL void REGAL_CALL glTexCoord1sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1sv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1sv != glTexCoord1sv);
  rCtx->dsp.CurrTable()->glTexCoord1sv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord2d(GLdouble s, GLdouble t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2d(", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2d);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2d != glTexCoord2d);
  rCtx->dsp.CurrTable()->glTexCoord2d(s, t);
}

REGAL_DECL void REGAL_CALL glTexCoord2dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2dv != glTexCoord2dv);
  rCtx->dsp.CurrTable()->glTexCoord2dv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord2f(GLfloat s, GLfloat t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2f(", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2f);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2f != glTexCoord2f);
  rCtx->dsp.CurrTable()->glTexCoord2f(s, t);
}

REGAL_DECL void REGAL_CALL glTexCoord2fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fv != glTexCoord2fv);
  rCtx->dsp.CurrTable()->glTexCoord2fv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord2i(GLint s, GLint t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2i(", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2i);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2i != glTexCoord2i);
  rCtx->dsp.CurrTable()->glTexCoord2i(s, t);
}

REGAL_DECL void REGAL_CALL glTexCoord2iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2iv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2iv != glTexCoord2iv);
  rCtx->dsp.CurrTable()->glTexCoord2iv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord2s(GLshort s, GLshort t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2s(", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2s);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2s != glTexCoord2s);
  rCtx->dsp.CurrTable()->glTexCoord2s(s, t);
}

REGAL_DECL void REGAL_CALL glTexCoord2sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2sv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2sv != glTexCoord2sv);
  rCtx->dsp.CurrTable()->glTexCoord2sv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3d(", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3d);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3d != glTexCoord3d);
  rCtx->dsp.CurrTable()->glTexCoord3d(s, t, r);
}

REGAL_DECL void REGAL_CALL glTexCoord3dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3dv != glTexCoord3dv);
  rCtx->dsp.CurrTable()->glTexCoord3dv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3f(", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3f);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3f != glTexCoord3f);
  rCtx->dsp.CurrTable()->glTexCoord3f(s, t, r);
}

REGAL_DECL void REGAL_CALL glTexCoord3fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3fv != glTexCoord3fv);
  rCtx->dsp.CurrTable()->glTexCoord3fv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord3i(GLint s, GLint t, GLint r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3i(", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3i);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3i != glTexCoord3i);
  rCtx->dsp.CurrTable()->glTexCoord3i(s, t, r);
}

REGAL_DECL void REGAL_CALL glTexCoord3iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3iv != glTexCoord3iv);
  rCtx->dsp.CurrTable()->glTexCoord3iv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord3s(GLshort s, GLshort t, GLshort r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3s(", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3s);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3s != glTexCoord3s);
  rCtx->dsp.CurrTable()->glTexCoord3s(s, t, r);
}

REGAL_DECL void REGAL_CALL glTexCoord3sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3sv != glTexCoord3sv);
  rCtx->dsp.CurrTable()->glTexCoord3sv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4d(", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4d);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4d != glTexCoord4d);
  rCtx->dsp.CurrTable()->glTexCoord4d(s, t, r, q);
}

REGAL_DECL void REGAL_CALL glTexCoord4dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4dv != glTexCoord4dv);
  rCtx->dsp.CurrTable()->glTexCoord4dv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4f(", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4f);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4f != glTexCoord4f);
  rCtx->dsp.CurrTable()->glTexCoord4f(s, t, r, q);
}

REGAL_DECL void REGAL_CALL glTexCoord4fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fv != glTexCoord4fv);
  rCtx->dsp.CurrTable()->glTexCoord4fv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4i(", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4i);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4i != glTexCoord4i);
  rCtx->dsp.CurrTable()->glTexCoord4i(s, t, r, q);
}

REGAL_DECL void REGAL_CALL glTexCoord4iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4iv != glTexCoord4iv);
  rCtx->dsp.CurrTable()->glTexCoord4iv(v);
}

REGAL_DECL void REGAL_CALL glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4s(", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4s);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4s != glTexCoord4s);
  rCtx->dsp.CurrTable()->glTexCoord4s(s, t, r, q);
}

REGAL_DECL void REGAL_CALL glTexCoord4sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4sv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4sv != glTexCoord4sv);
  rCtx->dsp.CurrTable()->glTexCoord4sv(v);
}

REGAL_DECL void REGAL_CALL glVertex2d(GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2d(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2d != glVertex2d);
  rCtx->dsp.CurrTable()->glVertex2d(x, y);
}

REGAL_DECL void REGAL_CALL glVertex2dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2dv != glVertex2dv);
  rCtx->dsp.CurrTable()->glVertex2dv(v);
}

REGAL_DECL void REGAL_CALL glVertex2f(GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2f(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2f);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2f != glVertex2f);
  rCtx->dsp.CurrTable()->glVertex2f(x, y);
}

REGAL_DECL void REGAL_CALL glVertex2fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2fv != glVertex2fv);
  rCtx->dsp.CurrTable()->glVertex2fv(v);
}

REGAL_DECL void REGAL_CALL glVertex2i(GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2i(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2i);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2i != glVertex2i);
  rCtx->dsp.CurrTable()->glVertex2i(x, y);
}

REGAL_DECL void REGAL_CALL glVertex2iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2iv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2iv != glVertex2iv);
  rCtx->dsp.CurrTable()->glVertex2iv(v);
}

REGAL_DECL void REGAL_CALL glVertex2s(GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2s(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2s);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2s != glVertex2s);
  rCtx->dsp.CurrTable()->glVertex2s(x, y);
}

REGAL_DECL void REGAL_CALL glVertex2sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2sv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2sv != glVertex2sv);
  rCtx->dsp.CurrTable()->glVertex2sv(v);
}

REGAL_DECL void REGAL_CALL glVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3d(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3d != glVertex3d);
  rCtx->dsp.CurrTable()->glVertex3d(x, y, z);
}

REGAL_DECL void REGAL_CALL glVertex3dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3dv != glVertex3dv);
  rCtx->dsp.CurrTable()->glVertex3dv(v);
}

REGAL_DECL void REGAL_CALL glVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3f(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3f);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3f != glVertex3f);
  rCtx->dsp.CurrTable()->glVertex3f(x, y, z);
}

REGAL_DECL void REGAL_CALL glVertex3fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3fv != glVertex3fv);
  rCtx->dsp.CurrTable()->glVertex3fv(v);
}

REGAL_DECL void REGAL_CALL glVertex3i(GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3i(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3i);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3i != glVertex3i);
  rCtx->dsp.CurrTable()->glVertex3i(x, y, z);
}

REGAL_DECL void REGAL_CALL glVertex3iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3iv != glVertex3iv);
  rCtx->dsp.CurrTable()->glVertex3iv(v);
}

REGAL_DECL void REGAL_CALL glVertex3s(GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3s(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3s);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3s != glVertex3s);
  rCtx->dsp.CurrTable()->glVertex3s(x, y, z);
}

REGAL_DECL void REGAL_CALL glVertex3sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3sv != glVertex3sv);
  rCtx->dsp.CurrTable()->glVertex3sv(v);
}

REGAL_DECL void REGAL_CALL glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4d(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4d != glVertex4d);
  rCtx->dsp.CurrTable()->glVertex4d(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertex4dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4dv != glVertex4dv);
  rCtx->dsp.CurrTable()->glVertex4dv(v);
}

REGAL_DECL void REGAL_CALL glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4f(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4f);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4f != glVertex4f);
  rCtx->dsp.CurrTable()->glVertex4f(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertex4fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4fv != glVertex4fv);
  rCtx->dsp.CurrTable()->glVertex4fv(v);
}

REGAL_DECL void REGAL_CALL glVertex4i(GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4i(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4i);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4i != glVertex4i);
  rCtx->dsp.CurrTable()->glVertex4i(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertex4iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4iv != glVertex4iv);
  rCtx->dsp.CurrTable()->glVertex4iv(v);
}

REGAL_DECL void REGAL_CALL glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4s(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4s);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4s != glVertex4s);
  rCtx->dsp.CurrTable()->glVertex4s(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertex4sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4sv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4sv != glVertex4sv);
  rCtx->dsp.CurrTable()->glVertex4sv(v);
}

REGAL_DECL void REGAL_CALL glClipPlane(GLenum plane, const GLdouble *equation)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClipPlane(", toString(plane), ", ", equation, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClipPlane);
  RegalAssert(rCtx->dsp.CurrTable()->glClipPlane != glClipPlane);
  rCtx->dsp.CurrTable()->glClipPlane(plane, equation);
}

REGAL_DECL void REGAL_CALL glColorMaterial(GLenum face, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorMaterial(", toString(face), ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorMaterial);
  RegalAssert(rCtx->dsp.CurrTable()->glColorMaterial != glColorMaterial);
  rCtx->dsp.CurrTable()->glColorMaterial(face, mode);
}

REGAL_DECL void REGAL_CALL glCullFace(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCullFace(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCullFace);
  RegalAssert(rCtx->dsp.CurrTable()->glCullFace != glCullFace);
  rCtx->dsp.CurrTable()->glCullFace(mode);
}

REGAL_DECL void REGAL_CALL glFogf(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogf(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogf);
  RegalAssert(rCtx->dsp.CurrTable()->glFogf != glFogf);
  rCtx->dsp.CurrTable()->glFogf(pname, param);
}

REGAL_DECL void REGAL_CALL glFogfv(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogfv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogfv);
  RegalAssert(rCtx->dsp.CurrTable()->glFogfv != glFogfv);
  rCtx->dsp.CurrTable()->glFogfv(pname, params);
}

REGAL_DECL void REGAL_CALL glFogi(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogi(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogi);
  RegalAssert(rCtx->dsp.CurrTable()->glFogi != glFogi);
  rCtx->dsp.CurrTable()->glFogi(pname, param);
}

REGAL_DECL void REGAL_CALL glFogiv(GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogiv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogiv);
  RegalAssert(rCtx->dsp.CurrTable()->glFogiv != glFogiv);
  rCtx->dsp.CurrTable()->glFogiv(pname, params);
}

REGAL_DECL void REGAL_CALL glFrontFace(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFrontFace(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFrontFace);
  RegalAssert(rCtx->dsp.CurrTable()->glFrontFace != glFrontFace);
  rCtx->dsp.CurrTable()->glFrontFace(mode);
}

REGAL_DECL void REGAL_CALL glHint(GLenum target, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glHint(", toString(target), ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glHint);
  RegalAssert(rCtx->dsp.CurrTable()->glHint != glHint);
  rCtx->dsp.CurrTable()->glHint(target, mode);
}

REGAL_DECL void REGAL_CALL glLightf(GLenum light, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightf(", toString(light), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightf);
  RegalAssert(rCtx->dsp.CurrTable()->glLightf != glLightf);
  rCtx->dsp.CurrTable()->glLightf(light, pname, param);
}

REGAL_DECL void REGAL_CALL glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightfv(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightfv);
  RegalAssert(rCtx->dsp.CurrTable()->glLightfv != glLightfv);
  rCtx->dsp.CurrTable()->glLightfv(light, pname, params);
}

REGAL_DECL void REGAL_CALL glLighti(GLenum light, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLighti(", toString(light), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLighti);
  RegalAssert(rCtx->dsp.CurrTable()->glLighti != glLighti);
  rCtx->dsp.CurrTable()->glLighti(light, pname, param);
}

REGAL_DECL void REGAL_CALL glLightiv(GLenum light, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightiv(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightiv);
  RegalAssert(rCtx->dsp.CurrTable()->glLightiv != glLightiv);
  rCtx->dsp.CurrTable()->glLightiv(light, pname, params);
}

REGAL_DECL void REGAL_CALL glLightModelf(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightModelf(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightModelf);
  RegalAssert(rCtx->dsp.CurrTable()->glLightModelf != glLightModelf);
  rCtx->dsp.CurrTable()->glLightModelf(pname, param);
}

REGAL_DECL void REGAL_CALL glLightModelfv(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightModelfv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightModelfv);
  RegalAssert(rCtx->dsp.CurrTable()->glLightModelfv != glLightModelfv);
  rCtx->dsp.CurrTable()->glLightModelfv(pname, params);
}

REGAL_DECL void REGAL_CALL glLightModeli(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightModeli(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightModeli);
  RegalAssert(rCtx->dsp.CurrTable()->glLightModeli != glLightModeli);
  rCtx->dsp.CurrTable()->glLightModeli(pname, param);
}

REGAL_DECL void REGAL_CALL glLightModeliv(GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightModeliv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightModeliv);
  RegalAssert(rCtx->dsp.CurrTable()->glLightModeliv != glLightModeliv);
  rCtx->dsp.CurrTable()->glLightModeliv(pname, params);
}

REGAL_DECL void REGAL_CALL glLineStipple(GLint factor, GLushort pattern)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLineStipple(", factor, ", ", pattern, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLineStipple);
  RegalAssert(rCtx->dsp.CurrTable()->glLineStipple != glLineStipple);
  rCtx->dsp.CurrTable()->glLineStipple(factor, pattern);
}

REGAL_DECL void REGAL_CALL glLineWidth(GLfloat width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLineWidth(", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLineWidth);
  RegalAssert(rCtx->dsp.CurrTable()->glLineWidth != glLineWidth);
  rCtx->dsp.CurrTable()->glLineWidth(width);
}

REGAL_DECL void REGAL_CALL glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMaterialf(", toString(face), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMaterialf);
  RegalAssert(rCtx->dsp.CurrTable()->glMaterialf != glMaterialf);
  rCtx->dsp.CurrTable()->glMaterialf(face, pname, param);
}

REGAL_DECL void REGAL_CALL glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMaterialfv(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMaterialfv);
  RegalAssert(rCtx->dsp.CurrTable()->glMaterialfv != glMaterialfv);
  rCtx->dsp.CurrTable()->glMaterialfv(face, pname, params);
}

REGAL_DECL void REGAL_CALL glMateriali(GLenum face, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMateriali(", toString(face), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMateriali);
  RegalAssert(rCtx->dsp.CurrTable()->glMateriali != glMateriali);
  rCtx->dsp.CurrTable()->glMateriali(face, pname, param);
}

REGAL_DECL void REGAL_CALL glMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMaterialiv(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMaterialiv);
  RegalAssert(rCtx->dsp.CurrTable()->glMaterialiv != glMaterialiv);
  rCtx->dsp.CurrTable()->glMaterialiv(face, pname, params);
}

REGAL_DECL void REGAL_CALL glPointSize(GLfloat size)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointSize(", size, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointSize);
  RegalAssert(rCtx->dsp.CurrTable()->glPointSize != glPointSize);
  rCtx->dsp.CurrTable()->glPointSize(size);
}

REGAL_DECL void REGAL_CALL glPolygonMode(GLenum face, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPolygonMode(", toString(face), ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPolygonMode);
  RegalAssert(rCtx->dsp.CurrTable()->glPolygonMode != glPolygonMode);
  rCtx->dsp.CurrTable()->glPolygonMode(face, mode);
}

REGAL_DECL void REGAL_CALL glPolygonStipple(const GLubyte *mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPolygonStipple(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPolygonStipple);
  RegalAssert(rCtx->dsp.CurrTable()->glPolygonStipple != glPolygonStipple);
  rCtx->dsp.CurrTable()->glPolygonStipple(mask);
}

REGAL_DECL void REGAL_CALL glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glScissor(", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glScissor);
  RegalAssert(rCtx->dsp.CurrTable()->glScissor != glScissor);
  rCtx->dsp.CurrTable()->glScissor(x, y, width, height);
}

REGAL_DECL void REGAL_CALL glShadeModel(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glShadeModel(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glShadeModel);
  RegalAssert(rCtx->dsp.CurrTable()->glShadeModel != glShadeModel);
  rCtx->dsp.CurrTable()->glShadeModel(mode);
}

REGAL_DECL void REGAL_CALL glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexParameterf(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterf);
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterf != glTexParameterf);
  rCtx->dsp.CurrTable()->glTexParameterf(target, pname, param);
}

REGAL_DECL void REGAL_CALL glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexParameterfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterfv != glTexParameterfv);
  rCtx->dsp.CurrTable()->glTexParameterfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glTexParameteri(GLenum target, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexParameteri(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameteri);
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameteri != glTexParameteri);
  rCtx->dsp.CurrTable()->glTexParameteri(target, pname, param);
}

REGAL_DECL void REGAL_CALL glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameteriv != glTexParameteriv);
  rCtx->dsp.CurrTable()->glTexParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage1D(", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage1D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage1D != glTexImage1D);
  rCtx->dsp.CurrTable()->glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage2D(", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage2D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage2D != glTexImage2D);
  rCtx->dsp.CurrTable()->glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexEnvf(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexEnvf);
  RegalAssert(rCtx->dsp.CurrTable()->glTexEnvf != glTexEnvf);
  rCtx->dsp.CurrTable()->glTexEnvf(target, pname, param);
}

REGAL_DECL void REGAL_CALL glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexEnvfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexEnvfv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexEnvfv != glTexEnvfv);
  rCtx->dsp.CurrTable()->glTexEnvfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glTexEnvi(GLenum target, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexEnvi(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexEnvi);
  RegalAssert(rCtx->dsp.CurrTable()->glTexEnvi != glTexEnvi);
  rCtx->dsp.CurrTable()->glTexEnvi(target, pname, param);
}

REGAL_DECL void REGAL_CALL glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexEnviv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexEnviv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexEnviv != glTexEnviv);
  rCtx->dsp.CurrTable()->glTexEnviv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glTexGend(GLenum coord, GLenum pname, GLdouble param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexGend(", toString(coord), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexGend);
  RegalAssert(rCtx->dsp.CurrTable()->glTexGend != glTexGend);
  rCtx->dsp.CurrTable()->glTexGend(coord, pname, param);
}

REGAL_DECL void REGAL_CALL glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexGendv(", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexGendv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexGendv != glTexGendv);
  rCtx->dsp.CurrTable()->glTexGendv(coord, pname, params);
}

REGAL_DECL void REGAL_CALL glTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexGenf(", toString(coord), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexGenf);
  RegalAssert(rCtx->dsp.CurrTable()->glTexGenf != glTexGenf);
  rCtx->dsp.CurrTable()->glTexGenf(coord, pname, param);
}

REGAL_DECL void REGAL_CALL glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexGenfv(", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexGenfv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexGenfv != glTexGenfv);
  rCtx->dsp.CurrTable()->glTexGenfv(coord, pname, params);
}

REGAL_DECL void REGAL_CALL glTexGeni(GLenum coord, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexGeni(", toString(coord), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexGeni);
  RegalAssert(rCtx->dsp.CurrTable()->glTexGeni != glTexGeni);
  rCtx->dsp.CurrTable()->glTexGeni(coord, pname, param);
}

REGAL_DECL void REGAL_CALL glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexGeniv(", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexGeniv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexGeniv != glTexGeniv);
  rCtx->dsp.CurrTable()->glTexGeniv(coord, pname, params);
}

REGAL_DECL void REGAL_CALL glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFeedbackBuffer(", size, ", ", toString(type), ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFeedbackBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glFeedbackBuffer != glFeedbackBuffer);
  rCtx->dsp.CurrTable()->glFeedbackBuffer(size, type, buffer);
}

REGAL_DECL void REGAL_CALL glSelectBuffer(GLsizei size, GLuint *buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSelectBuffer(", size, ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSelectBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glSelectBuffer != glSelectBuffer);
  rCtx->dsp.CurrTable()->glSelectBuffer(size, buffer);
}

REGAL_DECL GLint REGAL_CALL glRenderMode(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRenderMode(", toString(mode), ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRenderMode);
  RegalAssert(rCtx->dsp.CurrTable()->glRenderMode != glRenderMode);
  return rCtx->dsp.CurrTable()->glRenderMode(mode);
}

REGAL_DECL void REGAL_CALL glInitNames(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glInitNames()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glInitNames);
  RegalAssert(rCtx->dsp.CurrTable()->glInitNames != glInitNames);
  rCtx->dsp.CurrTable()->glInitNames();
}

REGAL_DECL void REGAL_CALL glLoadName(GLuint name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadName(", name, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadName);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadName != glLoadName);
  rCtx->dsp.CurrTable()->glLoadName(name);
}

REGAL_DECL void REGAL_CALL glPassThrough(GLfloat token)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPassThrough(", token, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPassThrough);
  RegalAssert(rCtx->dsp.CurrTable()->glPassThrough != glPassThrough);
  rCtx->dsp.CurrTable()->glPassThrough(token);
}

REGAL_DECL void REGAL_CALL glPopName(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPopName()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPopName);
  RegalAssert(rCtx->dsp.CurrTable()->glPopName != glPopName);
  rCtx->dsp.CurrTable()->glPopName();
}

REGAL_DECL void REGAL_CALL glPushName(GLuint name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPushName(", name, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPushName);
  RegalAssert(rCtx->dsp.CurrTable()->glPushName != glPushName);
  rCtx->dsp.CurrTable()->glPushName(name);
}

REGAL_DECL void REGAL_CALL glDrawBuffer(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawBuffer(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBuffer != glDrawBuffer);
  rCtx->dsp.CurrTable()->glDrawBuffer(mode);
}

REGAL_DECL void REGAL_CALL glClear(GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClear(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClear);
  RegalAssert(rCtx->dsp.CurrTable()->glClear != glClear);
  rCtx->dsp.CurrTable()->glClear(mask);
}

REGAL_DECL void REGAL_CALL glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearAccum(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearAccum);
  RegalAssert(rCtx->dsp.CurrTable()->glClearAccum != glClearAccum);
  rCtx->dsp.CurrTable()->glClearAccum(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearColor(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearColor);
  RegalAssert(rCtx->dsp.CurrTable()->glClearColor != glClearColor);
  rCtx->dsp.CurrTable()->glClearColor(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glClearDepth(GLclampd depth)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearDepth(", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearDepth);
  RegalAssert(rCtx->dsp.CurrTable()->glClearDepth != glClearDepth);
  rCtx->dsp.CurrTable()->glClearDepth(depth);
}

REGAL_DECL void REGAL_CALL glClearIndex(GLfloat c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearIndex(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearIndex);
  RegalAssert(rCtx->dsp.CurrTable()->glClearIndex != glClearIndex);
  rCtx->dsp.CurrTable()->glClearIndex(c);
}

REGAL_DECL void REGAL_CALL glClearStencil(GLint s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearStencil(", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearStencil);
  RegalAssert(rCtx->dsp.CurrTable()->glClearStencil != glClearStencil);
  rCtx->dsp.CurrTable()->glClearStencil(s);
}

REGAL_DECL void REGAL_CALL glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorMask(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorMask);
  RegalAssert(rCtx->dsp.CurrTable()->glColorMask != glColorMask);
  rCtx->dsp.CurrTable()->glColorMask(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glDepthMask(GLboolean flag)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthMask(", flag, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthMask);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthMask != glDepthMask);
  rCtx->dsp.CurrTable()->glDepthMask(flag);
}

REGAL_DECL void REGAL_CALL glIndexMask(GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexMask(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexMask);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexMask != glIndexMask);
  rCtx->dsp.CurrTable()->glIndexMask(mask);
}

REGAL_DECL void REGAL_CALL glStencilMask(GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilMask(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilMask);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilMask != glStencilMask);
  rCtx->dsp.CurrTable()->glStencilMask(mask);
}

REGAL_DECL void REGAL_CALL glAccum(GLenum op, GLfloat value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAccum(", toString(op), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAccum);
  RegalAssert(rCtx->dsp.CurrTable()->glAccum != glAccum);
  rCtx->dsp.CurrTable()->glAccum(op, value);
}

REGAL_DECL void REGAL_CALL glDisable(GLenum cap)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisable(", toString(cap), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisable);
  RegalAssert(rCtx->dsp.CurrTable()->glDisable != glDisable);
  rCtx->dsp.CurrTable()->glDisable(cap);
}

REGAL_DECL void REGAL_CALL glEnable(GLenum cap)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnable(", toString(cap), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnable);
  RegalAssert(rCtx->dsp.CurrTable()->glEnable != glEnable);
  rCtx->dsp.CurrTable()->glEnable(cap);
}

REGAL_DECL void REGAL_CALL glFinish(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFinish()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFinish);
  RegalAssert(rCtx->dsp.CurrTable()->glFinish != glFinish);
  rCtx->dsp.CurrTable()->glFinish();
}

REGAL_DECL void REGAL_CALL glFlush(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFlush()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFlush);
  RegalAssert(rCtx->dsp.CurrTable()->glFlush != glFlush);
  rCtx->dsp.CurrTable()->glFlush();
}

REGAL_DECL void REGAL_CALL glPopAttrib(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPopAttrib()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPopAttrib);
  RegalAssert(rCtx->dsp.CurrTable()->glPopAttrib != glPopAttrib);
  rCtx->dsp.CurrTable()->glPopAttrib();
}

REGAL_DECL void REGAL_CALL glPushAttrib(GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPushAttrib(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPushAttrib);
  RegalAssert(rCtx->dsp.CurrTable()->glPushAttrib != glPushAttrib);
  rCtx->dsp.CurrTable()->glPushAttrib(mask);
}

REGAL_DECL void REGAL_CALL glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMap1d(", toString(target), ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMap1d);
  RegalAssert(rCtx->dsp.CurrTable()->glMap1d != glMap1d);
  rCtx->dsp.CurrTable()->glMap1d(target, u1, u2, stride, order, points);
}

REGAL_DECL void REGAL_CALL glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMap1f(", toString(target), ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMap1f);
  RegalAssert(rCtx->dsp.CurrTable()->glMap1f != glMap1f);
  rCtx->dsp.CurrTable()->glMap1f(target, u1, u2, stride, order, points);
}

REGAL_DECL void REGAL_CALL glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMap2d(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMap2d);
  RegalAssert(rCtx->dsp.CurrTable()->glMap2d != glMap2d);
  rCtx->dsp.CurrTable()->glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

REGAL_DECL void REGAL_CALL glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMap2f(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMap2f);
  RegalAssert(rCtx->dsp.CurrTable()->glMap2f != glMap2f);
  rCtx->dsp.CurrTable()->glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

REGAL_DECL void REGAL_CALL glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapGrid1d(", un, ", ", u1, ", ", u2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapGrid1d);
  RegalAssert(rCtx->dsp.CurrTable()->glMapGrid1d != glMapGrid1d);
  rCtx->dsp.CurrTable()->glMapGrid1d(un, u1, u2);
}

REGAL_DECL void REGAL_CALL glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapGrid1f(", un, ", ", u1, ", ", u2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapGrid1f);
  RegalAssert(rCtx->dsp.CurrTable()->glMapGrid1f != glMapGrid1f);
  rCtx->dsp.CurrTable()->glMapGrid1f(un, u1, u2);
}

REGAL_DECL void REGAL_CALL glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapGrid2d(", un, ", ", u1, ", ", u2, ", ", vn, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapGrid2d);
  RegalAssert(rCtx->dsp.CurrTable()->glMapGrid2d != glMapGrid2d);
  rCtx->dsp.CurrTable()->glMapGrid2d(un, u1, u2, vn, v1, v2);
}

REGAL_DECL void REGAL_CALL glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapGrid2f(", un, ", ", u1, ", ", u2, ", ", vn, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapGrid2f);
  RegalAssert(rCtx->dsp.CurrTable()->glMapGrid2f != glMapGrid2f);
  rCtx->dsp.CurrTable()->glMapGrid2f(un, u1, u2, vn, v1, v2);
}

REGAL_DECL void REGAL_CALL glEvalCoord1d(GLdouble u)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalCoord1d(", u, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord1d);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord1d != glEvalCoord1d);
  rCtx->dsp.CurrTable()->glEvalCoord1d(u);
}

REGAL_DECL void REGAL_CALL glEvalCoord1dv(const GLdouble *u)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalCoord1dv(", u, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord1dv);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord1dv != glEvalCoord1dv);
  rCtx->dsp.CurrTable()->glEvalCoord1dv(u);
}

REGAL_DECL void REGAL_CALL glEvalCoord1f(GLfloat u)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalCoord1f(", u, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord1f);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord1f != glEvalCoord1f);
  rCtx->dsp.CurrTable()->glEvalCoord1f(u);
}

REGAL_DECL void REGAL_CALL glEvalCoord1fv(const GLfloat *u)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalCoord1fv(", u, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord1fv);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord1fv != glEvalCoord1fv);
  rCtx->dsp.CurrTable()->glEvalCoord1fv(u);
}

REGAL_DECL void REGAL_CALL glEvalCoord2d(GLdouble u, GLdouble v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalCoord2d(", u, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord2d);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord2d != glEvalCoord2d);
  rCtx->dsp.CurrTable()->glEvalCoord2d(u, v);
}

REGAL_DECL void REGAL_CALL glEvalCoord2dv(const GLdouble *u)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalCoord2dv(", u, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord2dv != glEvalCoord2dv);
  rCtx->dsp.CurrTable()->glEvalCoord2dv(u);
}

REGAL_DECL void REGAL_CALL glEvalCoord2f(GLfloat u, GLfloat v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalCoord2f(", u, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord2f);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord2f != glEvalCoord2f);
  rCtx->dsp.CurrTable()->glEvalCoord2f(u, v);
}

REGAL_DECL void REGAL_CALL glEvalCoord2fv(const GLfloat *u)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalCoord2fv(", u, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalCoord2fv != glEvalCoord2fv);
  rCtx->dsp.CurrTable()->glEvalCoord2fv(u);
}

REGAL_DECL void REGAL_CALL glEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalMesh1(", toString(mode), ", ", i1, ", ", i2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalMesh1);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalMesh1 != glEvalMesh1);
  rCtx->dsp.CurrTable()->glEvalMesh1(mode, i1, i2);
}

REGAL_DECL void REGAL_CALL glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalMesh2(", toString(mode), ", ", i1, ", ", i2, ", ", j1, ", ", j2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalMesh2);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalMesh2 != glEvalMesh2);
  rCtx->dsp.CurrTable()->glEvalMesh2(mode, i1, i2, j1, j2);
}

REGAL_DECL void REGAL_CALL glEvalPoint1(GLint i)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalPoint1(", i, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalPoint1);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalPoint1 != glEvalPoint1);
  rCtx->dsp.CurrTable()->glEvalPoint1(i);
}

REGAL_DECL void REGAL_CALL glEvalPoint2(GLint i, GLint j)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalPoint2(", i, ", ", j, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalPoint2);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalPoint2 != glEvalPoint2);
  rCtx->dsp.CurrTable()->glEvalPoint2(i, j);
}

REGAL_DECL void REGAL_CALL glAlphaFunc(GLenum func, GLclampf ref)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAlphaFunc(", toString(func), ", ", ref, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAlphaFunc);
  RegalAssert(rCtx->dsp.CurrTable()->glAlphaFunc != glAlphaFunc);
  rCtx->dsp.CurrTable()->glAlphaFunc(func, ref);
}

REGAL_DECL void REGAL_CALL glBlendFunc(GLenum sfactor, GLenum dfactor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFunc(", toString(sfactor), ", ", toString(dfactor), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFunc);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFunc != glBlendFunc);
  rCtx->dsp.CurrTable()->glBlendFunc(sfactor, dfactor);
}

REGAL_DECL void REGAL_CALL glDepthFunc(GLenum func)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthFunc(", toString(func), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthFunc);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthFunc != glDepthFunc);
  rCtx->dsp.CurrTable()->glDepthFunc(func);
}

REGAL_DECL void REGAL_CALL glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilFunc(", toString(func), ", ", ref, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFunc);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFunc != glStencilFunc);
  rCtx->dsp.CurrTable()->glStencilFunc(func, ref, mask);
}

REGAL_DECL void REGAL_CALL glLogicOp(GLenum opcode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLogicOp(", toString(opcode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLogicOp);
  RegalAssert(rCtx->dsp.CurrTable()->glLogicOp != glLogicOp);
  rCtx->dsp.CurrTable()->glLogicOp(opcode);
}

REGAL_DECL void REGAL_CALL glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilOp(", toString(fail), ", ", toString(zfail), ", ", toString(zpass), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilOp);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilOp != glStencilOp);
  rCtx->dsp.CurrTable()->glStencilOp(fail, zfail, zpass);
}

REGAL_DECL void REGAL_CALL glPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelZoom(", xfactor, ", ", yfactor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelZoom);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelZoom != glPixelZoom);
  rCtx->dsp.CurrTable()->glPixelZoom(xfactor, yfactor);
}

REGAL_DECL void REGAL_CALL glPixelTransferf(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTransferf(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransferf);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransferf != glPixelTransferf);
  rCtx->dsp.CurrTable()->glPixelTransferf(pname, param);
}

REGAL_DECL void REGAL_CALL glPixelTransferi(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTransferi(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransferi);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransferi != glPixelTransferi);
  rCtx->dsp.CurrTable()->glPixelTransferi(pname, param);
}

REGAL_DECL void REGAL_CALL glPixelStoref(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelStoref(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelStoref);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelStoref != glPixelStoref);
  rCtx->dsp.CurrTable()->glPixelStoref(pname, param);
}

REGAL_DECL void REGAL_CALL glPixelStorei(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelStorei(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelStorei);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelStorei != glPixelStorei);
  rCtx->dsp.CurrTable()->glPixelStorei(pname, param);
}

REGAL_DECL void REGAL_CALL glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelMapfv(", toString(map), ", ", mapsize, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelMapfv);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelMapfv != glPixelMapfv);
  rCtx->dsp.CurrTable()->glPixelMapfv(map, mapsize, values);
}

REGAL_DECL void REGAL_CALL glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelMapuiv(", toString(map), ", ", mapsize, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelMapuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelMapuiv != glPixelMapuiv);
  rCtx->dsp.CurrTable()->glPixelMapuiv(map, mapsize, values);
}

REGAL_DECL void REGAL_CALL glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelMapusv(", toString(map), ", ", mapsize, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelMapusv);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelMapusv != glPixelMapusv);
  rCtx->dsp.CurrTable()->glPixelMapusv(map, mapsize, values);
}

REGAL_DECL void REGAL_CALL glReadBuffer(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReadBuffer(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReadBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glReadBuffer != glReadBuffer);
  rCtx->dsp.CurrTable()->glReadBuffer(mode);
}

REGAL_DECL void REGAL_CALL glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyPixels(", x, ", ", y, ", ", width, ", ", height, ", ", toString(type), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyPixels);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyPixels != glCopyPixels);
  rCtx->dsp.CurrTable()->glCopyPixels(x, y, width, height, type);
}

REGAL_DECL void REGAL_CALL glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReadPixels(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReadPixels);
  RegalAssert(rCtx->dsp.CurrTable()->glReadPixels != glReadPixels);
  rCtx->dsp.CurrTable()->glReadPixels(x, y, width, height, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawPixels(", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawPixels);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawPixels != glDrawPixels);
  rCtx->dsp.CurrTable()->glDrawPixels(width, height, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glGetBooleanv(GLenum pname, GLboolean *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBooleanv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBooleanv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBooleanv != glGetBooleanv);
  rCtx->dsp.CurrTable()->glGetBooleanv(pname, params);
}

REGAL_DECL void REGAL_CALL glGetDoublev(GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetDoublev(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetDoublev);
  RegalAssert(rCtx->dsp.CurrTable()->glGetDoublev != glGetDoublev);
  rCtx->dsp.CurrTable()->glGetDoublev(pname, params);
}

REGAL_DECL void REGAL_CALL glGetFloatv(GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFloatv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFloatv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFloatv != glGetFloatv);
  rCtx->dsp.CurrTable()->glGetFloatv(pname, params);
}

REGAL_DECL void REGAL_CALL glGetIntegerv(GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetIntegerv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegerv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegerv != glGetIntegerv);
  rCtx->dsp.CurrTable()->glGetIntegerv(pname, params);
}

REGAL_DECL void REGAL_CALL glGetClipPlane(GLenum plane, GLdouble *equation)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetClipPlane(", toString(plane), ", ", equation, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetClipPlane);
  RegalAssert(rCtx->dsp.CurrTable()->glGetClipPlane != glGetClipPlane);
  rCtx->dsp.CurrTable()->glGetClipPlane(plane, equation);
}

REGAL_DECL GLenum REGAL_CALL glGetError(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetError()");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetError);
  RegalAssert(rCtx->dsp.CurrTable()->glGetError != glGetError);
  return rCtx->dsp.CurrTable()->glGetError();
}

REGAL_DECL void REGAL_CALL glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetLightfv(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetLightfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetLightfv != glGetLightfv);
  rCtx->dsp.CurrTable()->glGetLightfv(light, pname, params);
}

REGAL_DECL void REGAL_CALL glGetLightiv(GLenum light, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetLightiv(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetLightiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetLightiv != glGetLightiv);
  rCtx->dsp.CurrTable()->glGetLightiv(light, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMapdv(GLenum target, GLenum query, GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMapdv(", toString(target), ", ", toString(query), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapdv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapdv != glGetMapdv);
  rCtx->dsp.CurrTable()->glGetMapdv(target, query, v);
}

REGAL_DECL void REGAL_CALL glGetMapfv(GLenum target, GLenum query, GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMapfv(", toString(target), ", ", toString(query), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapfv != glGetMapfv);
  rCtx->dsp.CurrTable()->glGetMapfv(target, query, v);
}

REGAL_DECL void REGAL_CALL glGetMapiv(GLenum target, GLenum query, GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMapiv(", toString(target), ", ", toString(query), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapiv != glGetMapiv);
  rCtx->dsp.CurrTable()->glGetMapiv(target, query, v);
}

REGAL_DECL void REGAL_CALL glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMaterialfv(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMaterialfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMaterialfv != glGetMaterialfv);
  rCtx->dsp.CurrTable()->glGetMaterialfv(face, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMaterialiv(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMaterialiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMaterialiv != glGetMaterialiv);
  rCtx->dsp.CurrTable()->glGetMaterialiv(face, pname, params);
}

REGAL_DECL void REGAL_CALL glGetPixelMapfv(GLenum map, GLfloat *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPixelMapfv(", toString(map), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelMapfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelMapfv != glGetPixelMapfv);
  rCtx->dsp.CurrTable()->glGetPixelMapfv(map, values);
}

REGAL_DECL void REGAL_CALL glGetPixelMapuiv(GLenum map, GLuint *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPixelMapuiv(", toString(map), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelMapuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelMapuiv != glGetPixelMapuiv);
  rCtx->dsp.CurrTable()->glGetPixelMapuiv(map, values);
}

REGAL_DECL void REGAL_CALL glGetPixelMapusv(GLenum map, GLushort *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPixelMapusv(", toString(map), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelMapusv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelMapusv != glGetPixelMapusv);
  rCtx->dsp.CurrTable()->glGetPixelMapusv(map, values);
}

REGAL_DECL void REGAL_CALL glGetPolygonStipple(GLubyte *mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPolygonStipple(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPolygonStipple);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPolygonStipple != glGetPolygonStipple);
  rCtx->dsp.CurrTable()->glGetPolygonStipple(mask);
}

REGAL_DECL const GLubyte *REGAL_CALL glGetString(GLenum name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetString(", toString(name), ")");
  if (!rCtx) return NULL;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetString);
  RegalAssert(rCtx->dsp.CurrTable()->glGetString != glGetString);
  if (name == GL_VERSION) {
      char* ev = RegalGetEnv("REGAL_GL_VERSION");
      if (ev) {
          return reinterpret_cast<const GLubyte *>(ev);
      }
  }

  if (name == GL_EXTENSIONS) {
      char* ev = RegalGetEnv("REGAL_GL_EXTENSIONS");
      if (ev) {
          return reinterpret_cast<const GLubyte *>(ev);
      }
  }
  return rCtx->dsp.CurrTable()->glGetString(name);
}

REGAL_DECL void REGAL_CALL glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexEnvfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexEnvfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexEnvfv != glGetTexEnvfv);
  rCtx->dsp.CurrTable()->glGetTexEnvfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexEnviv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexEnviv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexEnviv != glGetTexEnviv);
  rCtx->dsp.CurrTable()->glGetTexEnviv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexGendv(", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexGendv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexGendv != glGetTexGendv);
  rCtx->dsp.CurrTable()->glGetTexGendv(coord, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexGenfv(", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexGenfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexGenfv != glGetTexGenfv);
  rCtx->dsp.CurrTable()->glGetTexGenfv(coord, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexGeniv(", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexGeniv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexGeniv != glGetTexGeniv);
  rCtx->dsp.CurrTable()->glGetTexGeniv(coord, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexImage(", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexImage);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexImage != glGetTexImage);
  rCtx->dsp.CurrTable()->glGetTexImage(target, level, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexParameterfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterfv != glGetTexParameterfv);
  rCtx->dsp.CurrTable()->glGetTexParameterfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameteriv != glGetTexParameteriv);
  rCtx->dsp.CurrTable()->glGetTexParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexLevelParameterfv(", toString(target), ", ", level, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexLevelParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexLevelParameterfv != glGetTexLevelParameterfv);
  rCtx->dsp.CurrTable()->glGetTexLevelParameterfv(target, level, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexLevelParameteriv(", toString(target), ", ", level, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexLevelParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexLevelParameteriv != glGetTexLevelParameteriv);
  rCtx->dsp.CurrTable()->glGetTexLevelParameteriv(target, level, pname, params);
}

REGAL_DECL GLboolean REGAL_CALL glIsEnabled(GLenum cap)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsEnabled(", toString(cap), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsEnabled);
  RegalAssert(rCtx->dsp.CurrTable()->glIsEnabled != glIsEnabled);
  return rCtx->dsp.CurrTable()->glIsEnabled(cap);
}

REGAL_DECL GLboolean REGAL_CALL glIsList(GLuint list)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsList(", list, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsList);
  RegalAssert(rCtx->dsp.CurrTable()->glIsList != glIsList);
  return rCtx->dsp.CurrTable()->glIsList(list);
}

REGAL_DECL void REGAL_CALL glDepthRange(GLclampd zNear, GLclampd zFar)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthRange(", zNear, ", ", zFar, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRange);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRange != glDepthRange);
  rCtx->dsp.CurrTable()->glDepthRange(zNear, zFar);
}

REGAL_DECL void REGAL_CALL glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFrustum(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFrustum);
  RegalAssert(rCtx->dsp.CurrTable()->glFrustum != glFrustum);
  rCtx->dsp.CurrTable()->glFrustum(left, right, bottom, top, zNear, zFar);
}

REGAL_DECL void REGAL_CALL glLoadIdentity(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadIdentity()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadIdentity);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadIdentity != glLoadIdentity);
  rCtx->dsp.CurrTable()->glLoadIdentity();
}

REGAL_DECL void REGAL_CALL glLoadMatrixd(const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadMatrixd(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadMatrixd);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadMatrixd != glLoadMatrixd);
  rCtx->dsp.CurrTable()->glLoadMatrixd(m);
}

REGAL_DECL void REGAL_CALL glLoadMatrixf(const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadMatrixf(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadMatrixf);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadMatrixf != glLoadMatrixf);
  rCtx->dsp.CurrTable()->glLoadMatrixf(m);
}

REGAL_DECL void REGAL_CALL glMatrixMode(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixMode(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMode);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMode != glMatrixMode);
  rCtx->dsp.CurrTable()->glMatrixMode(mode);
}

REGAL_DECL void REGAL_CALL glMultMatrixd(const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultMatrixd(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultMatrixd);
  RegalAssert(rCtx->dsp.CurrTable()->glMultMatrixd != glMultMatrixd);
  rCtx->dsp.CurrTable()->glMultMatrixd(m);
}

REGAL_DECL void REGAL_CALL glMultMatrixf(const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultMatrixf(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultMatrixf);
  RegalAssert(rCtx->dsp.CurrTable()->glMultMatrixf != glMultMatrixf);
  rCtx->dsp.CurrTable()->glMultMatrixf(m);
}

REGAL_DECL void REGAL_CALL glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glOrtho(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glOrtho);
  RegalAssert(rCtx->dsp.CurrTable()->glOrtho != glOrtho);
  rCtx->dsp.CurrTable()->glOrtho(left, right, bottom, top, zNear, zFar);
}

REGAL_DECL void REGAL_CALL glPopMatrix(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPopMatrix()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPopMatrix);
  RegalAssert(rCtx->dsp.CurrTable()->glPopMatrix != glPopMatrix);
  rCtx->dsp.CurrTable()->glPopMatrix();
}

REGAL_DECL void REGAL_CALL glPushMatrix(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPushMatrix()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPushMatrix);
  RegalAssert(rCtx->dsp.CurrTable()->glPushMatrix != glPushMatrix);
  rCtx->dsp.CurrTable()->glPushMatrix();
}

REGAL_DECL void REGAL_CALL glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRotated(", angle, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRotated);
  RegalAssert(rCtx->dsp.CurrTable()->glRotated != glRotated);
  rCtx->dsp.CurrTable()->glRotated(angle, x, y, z);
}

REGAL_DECL void REGAL_CALL glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRotatef(", angle, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRotatef);
  RegalAssert(rCtx->dsp.CurrTable()->glRotatef != glRotatef);
  rCtx->dsp.CurrTable()->glRotatef(angle, x, y, z);
}

REGAL_DECL void REGAL_CALL glScaled(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glScaled(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glScaled);
  RegalAssert(rCtx->dsp.CurrTable()->glScaled != glScaled);
  rCtx->dsp.CurrTable()->glScaled(x, y, z);
}

REGAL_DECL void REGAL_CALL glScalef(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glScalef(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glScalef);
  RegalAssert(rCtx->dsp.CurrTable()->glScalef != glScalef);
  rCtx->dsp.CurrTable()->glScalef(x, y, z);
}

REGAL_DECL void REGAL_CALL glTranslated(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTranslated(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTranslated);
  RegalAssert(rCtx->dsp.CurrTable()->glTranslated != glTranslated);
  rCtx->dsp.CurrTable()->glTranslated(x, y, z);
}

REGAL_DECL void REGAL_CALL glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTranslatef(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTranslatef);
  RegalAssert(rCtx->dsp.CurrTable()->glTranslatef != glTranslatef);
  rCtx->dsp.CurrTable()->glTranslatef(x, y, z);
}

REGAL_DECL void REGAL_CALL glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glViewport(", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glViewport);
  RegalAssert(rCtx->dsp.CurrTable()->glViewport != glViewport);
  rCtx->dsp.CurrTable()->glViewport(x, y, width, height);
}

/* GL_VERSION_1_1 */

REGAL_DECL void REGAL_CALL glArrayElement(GLint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glArrayElement(", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glArrayElement);
  RegalAssert(rCtx->dsp.CurrTable()->glArrayElement != glArrayElement);
  rCtx->dsp.CurrTable()->glArrayElement(index);
}

REGAL_DECL void REGAL_CALL glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawArrays(", toString(mode), ", ", first, ", ", count, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArrays);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArrays != glDrawArrays);
  rCtx->dsp.CurrTable()->glDrawArrays(mode, first, count);
}

REGAL_DECL void REGAL_CALL glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElements(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElements);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElements != glDrawElements);
  rCtx->dsp.CurrTable()->glDrawElements(mode, count, type, indices);
}

REGAL_DECL void REGAL_CALL glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glInterleavedArrays(", toString(format), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glInterleavedArrays);
  RegalAssert(rCtx->dsp.CurrTable()->glInterleavedArrays != glInterleavedArrays);
  rCtx->dsp.CurrTable()->glInterleavedArrays(format, stride, pointer);
}

REGAL_DECL void REGAL_CALL glDisableClientState(GLenum cap)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisableClientState(", toString(cap), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisableClientState);
  RegalAssert(rCtx->dsp.CurrTable()->glDisableClientState != glDisableClientState);
  rCtx->dsp.CurrTable()->glDisableClientState(cap);
}

REGAL_DECL void REGAL_CALL glEnableClientState(GLenum cap)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnableClientState(", toString(cap), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnableClientState);
  RegalAssert(rCtx->dsp.CurrTable()->glEnableClientState != glEnableClientState);
  rCtx->dsp.CurrTable()->glEnableClientState(cap);
}

REGAL_DECL void REGAL_CALL glGetPointerv(GLenum pname, GLvoid **params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPointerv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPointerv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPointerv != glGetPointerv);
  rCtx->dsp.CurrTable()->glGetPointerv(pname, params);
}

REGAL_DECL void REGAL_CALL glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorPointer(", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glColorPointer != glColorPointer);
  rCtx->dsp.CurrTable()->glColorPointer(size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEdgeFlagPointer(", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagPointer != glEdgeFlagPointer);
  rCtx->dsp.CurrTable()->glEdgeFlagPointer(stride, pointer);
}

REGAL_DECL void REGAL_CALL glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexPointer(", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexPointer != glIndexPointer);
  rCtx->dsp.CurrTable()->glIndexPointer(type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalPointer(", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalPointer != glNormalPointer);
  rCtx->dsp.CurrTable()->glNormalPointer(type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordPointer(", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordPointer != glTexCoordPointer);
  rCtx->dsp.CurrTable()->glTexCoordPointer(size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexPointer(", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexPointer != glVertexPointer);
  rCtx->dsp.CurrTable()->glVertexPointer(size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glPolygonOffset(GLfloat factor, GLfloat units)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPolygonOffset(", factor, ", ", units, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPolygonOffset);
  RegalAssert(rCtx->dsp.CurrTable()->glPolygonOffset != glPolygonOffset);
  rCtx->dsp.CurrTable()->glPolygonOffset(factor, units);
}

REGAL_DECL void REGAL_CALL glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexImage1D(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexImage1D);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexImage1D != glCopyTexImage1D);
  rCtx->dsp.CurrTable()->glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}

REGAL_DECL void REGAL_CALL glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexImage2D(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexImage2D);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexImage2D != glCopyTexImage2D);
  rCtx->dsp.CurrTable()->glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

REGAL_DECL void REGAL_CALL glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexSubImage1D(", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage1D);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage1D != glCopyTexSubImage1D);
  rCtx->dsp.CurrTable()->glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}

REGAL_DECL void REGAL_CALL glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexSubImage2D(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage2D);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage2D != glCopyTexSubImage2D);
  rCtx->dsp.CurrTable()->glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexSubImage1D(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage1D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage1D != glTexSubImage1D);
  rCtx->dsp.CurrTable()->glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexSubImage2D(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage2D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage2D != glTexSubImage2D);
  rCtx->dsp.CurrTable()->glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

REGAL_DECL GLboolean REGAL_CALL glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAreTexturesResident(", n, ", ", textures, ", ", residences, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAreTexturesResident);
  RegalAssert(rCtx->dsp.CurrTable()->glAreTexturesResident != glAreTexturesResident);
  return rCtx->dsp.CurrTable()->glAreTexturesResident(n, textures, residences);
}

REGAL_DECL void REGAL_CALL glBindTexture(GLenum target, GLuint texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindTexture(", toString(target), ", ", texture, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindTexture);
  RegalAssert(rCtx->dsp.CurrTable()->glBindTexture != glBindTexture);
  rCtx->dsp.CurrTable()->glBindTexture(target, texture);
}

REGAL_DECL void REGAL_CALL glDeleteTextures(GLsizei n, const GLuint *textures)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteTextures(", n, ", ", textures, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteTextures);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteTextures != glDeleteTextures);
  rCtx->dsp.CurrTable()->glDeleteTextures(n, textures);
}

REGAL_DECL void REGAL_CALL glGenTextures(GLsizei n, GLuint *textures)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenTextures(", n, ", ", textures, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenTextures);
  RegalAssert(rCtx->dsp.CurrTable()->glGenTextures != glGenTextures);
  rCtx->dsp.CurrTable()->glGenTextures(n, textures);
}

REGAL_DECL GLboolean REGAL_CALL glIsTexture(GLuint texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsTexture(", texture, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsTexture);
  RegalAssert(rCtx->dsp.CurrTable()->glIsTexture != glIsTexture);
  return rCtx->dsp.CurrTable()->glIsTexture(texture);
}

REGAL_DECL void REGAL_CALL glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPrioritizeTextures(", n, ", ", textures, ", ", priorities, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPrioritizeTextures);
  RegalAssert(rCtx->dsp.CurrTable()->glPrioritizeTextures != glPrioritizeTextures);
  rCtx->dsp.CurrTable()->glPrioritizeTextures(n, textures, priorities);
}

REGAL_DECL void REGAL_CALL glIndexub(GLubyte c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexub(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexub);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexub != glIndexub);
  rCtx->dsp.CurrTable()->glIndexub(c);
}

REGAL_DECL void REGAL_CALL glIndexubv(const GLubyte *c)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexubv(", c, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexubv);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexubv != glIndexubv);
  rCtx->dsp.CurrTable()->glIndexubv(c);
}

REGAL_DECL void REGAL_CALL glPopClientAttrib(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPopClientAttrib()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPopClientAttrib);
  RegalAssert(rCtx->dsp.CurrTable()->glPopClientAttrib != glPopClientAttrib);
  rCtx->dsp.CurrTable()->glPopClientAttrib();
}

REGAL_DECL void REGAL_CALL glPushClientAttrib(GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPushClientAttrib(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPushClientAttrib);
  RegalAssert(rCtx->dsp.CurrTable()->glPushClientAttrib != glPushClientAttrib);
  rCtx->dsp.CurrTable()->glPushClientAttrib(mask);
}

/* GL_VERSION_1_2 */

REGAL_DECL void REGAL_CALL glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendColor(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendColor);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendColor != glBlendColor);
  rCtx->dsp.CurrTable()->glBlendColor(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glBlendEquation(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquation(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquation);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquation != glBlendEquation);
  rCtx->dsp.CurrTable()->glBlendEquation(mode);
}

REGAL_DECL void REGAL_CALL glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawRangeElements(", toString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", indices, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElements);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElements != glDrawRangeElements);
  rCtx->dsp.CurrTable()->glDrawRangeElements(mode, start, end, count, type, indices);
}

REGAL_DECL void REGAL_CALL glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage3D(", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage3D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage3D != glTexImage3D);
  rCtx->dsp.CurrTable()->glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexSubImage3D(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage3D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage3D != glTexSubImage3D);
  rCtx->dsp.CurrTable()->glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexSubImage3D(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage3D);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage3D != glCopyTexSubImage3D);
  rCtx->dsp.CurrTable()->glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

/* GL_ARB_imaging */

REGAL_DECL void REGAL_CALL glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorTable(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", table, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorTable);
  RegalAssert(rCtx->dsp.CurrTable()->glColorTable != glColorTable);
  rCtx->dsp.CurrTable()->glColorTable(target, internalformat, width, format, type, table);
}

REGAL_DECL void REGAL_CALL glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorTableParameterfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableParameterfv != glColorTableParameterfv);
  rCtx->dsp.CurrTable()->glColorTableParameterfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorTableParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableParameteriv != glColorTableParameteriv);
  rCtx->dsp.CurrTable()->glColorTableParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyColorTable(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyColorTable);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyColorTable != glCopyColorTable);
  rCtx->dsp.CurrTable()->glCopyColorTable(target, internalformat, x, y, width);
}

REGAL_DECL void REGAL_CALL glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTable(", toString(target), ", ", toString(format), ", ", toString(type), ", ", table, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTable);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTable != glGetColorTable);
  rCtx->dsp.CurrTable()->glGetColorTable(target, format, type, table);
}

REGAL_DECL void REGAL_CALL glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTableParameterfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterfv != glGetColorTableParameterfv);
  rCtx->dsp.CurrTable()->glGetColorTableParameterfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTableParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameteriv != glGetColorTableParameteriv);
  rCtx->dsp.CurrTable()->glGetColorTableParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorSubTable(", toString(target), ", ", start, ", ", count, ", ", toString(format), ", ", toString(type), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorSubTable);
  RegalAssert(rCtx->dsp.CurrTable()->glColorSubTable != glColorSubTable);
  rCtx->dsp.CurrTable()->glColorSubTable(target, start, count, format, type, data);
}

REGAL_DECL void REGAL_CALL glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyColorSubTable(", toString(target), ", ", start, ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyColorSubTable);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyColorSubTable != glCopyColorSubTable);
  rCtx->dsp.CurrTable()->glCopyColorSubTable(target, start, x, y, width);
}

REGAL_DECL void REGAL_CALL glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionFilter1D(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", image, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionFilter1D);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionFilter1D != glConvolutionFilter1D);
  rCtx->dsp.CurrTable()->glConvolutionFilter1D(target, internalformat, width, format, type, image);
}

REGAL_DECL void REGAL_CALL glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionFilter2D(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", image, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionFilter2D);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionFilter2D != glConvolutionFilter2D);
  rCtx->dsp.CurrTable()->glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
}

REGAL_DECL void REGAL_CALL glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionParameterf(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterf);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterf != glConvolutionParameterf);
  rCtx->dsp.CurrTable()->glConvolutionParameterf(target, pname, params);
}

REGAL_DECL void REGAL_CALL glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionParameterfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterfv != glConvolutionParameterfv);
  rCtx->dsp.CurrTable()->glConvolutionParameterfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionParameteri(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameteri);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameteri != glConvolutionParameteri);
  rCtx->dsp.CurrTable()->glConvolutionParameteri(target, pname, params);
}

REGAL_DECL void REGAL_CALL glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameteriv != glConvolutionParameteriv);
  rCtx->dsp.CurrTable()->glConvolutionParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyConvolutionFilter1D(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyConvolutionFilter1D);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyConvolutionFilter1D != glCopyConvolutionFilter1D);
  rCtx->dsp.CurrTable()->glCopyConvolutionFilter1D(target, internalformat, x, y, width);
}

REGAL_DECL void REGAL_CALL glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyConvolutionFilter2D(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyConvolutionFilter2D);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyConvolutionFilter2D != glCopyConvolutionFilter2D);
  rCtx->dsp.CurrTable()->glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetConvolutionFilter(", toString(target), ", ", toString(format), ", ", toString(type), ", ", image, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionFilter);
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionFilter != glGetConvolutionFilter);
  rCtx->dsp.CurrTable()->glGetConvolutionFilter(target, format, type, image);
}

REGAL_DECL void REGAL_CALL glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetConvolutionParameterfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionParameterfv != glGetConvolutionParameterfv);
  rCtx->dsp.CurrTable()->glGetConvolutionParameterfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetConvolutionParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionParameteriv != glGetConvolutionParameteriv);
  rCtx->dsp.CurrTable()->glGetConvolutionParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSeparableFilter(", toString(target), ", ", toString(format), ", ", toString(type), ", ", row, ", ", column, ", ", span, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSeparableFilter);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSeparableFilter != glGetSeparableFilter);
  rCtx->dsp.CurrTable()->glGetSeparableFilter(target, format, type, row, column, span);
}

REGAL_DECL void REGAL_CALL glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSeparableFilter2D(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", row, ", ", column, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSeparableFilter2D);
  RegalAssert(rCtx->dsp.CurrTable()->glSeparableFilter2D != glSeparableFilter2D);
  rCtx->dsp.CurrTable()->glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
}

REGAL_DECL void REGAL_CALL glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetHistogram(", toString(target), ", ", reset, ", ", toString(format), ", ", toString(type), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogram);
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogram != glGetHistogram);
  rCtx->dsp.CurrTable()->glGetHistogram(target, reset, format, type, values);
}

REGAL_DECL void REGAL_CALL glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetHistogramParameterfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramParameterfv != glGetHistogramParameterfv);
  rCtx->dsp.CurrTable()->glGetHistogramParameterfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetHistogramParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramParameteriv != glGetHistogramParameteriv);
  rCtx->dsp.CurrTable()->glGetHistogramParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMinmax(", toString(target), ", ", reset, ", ", toString(format), ", ", toString(types), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmax);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmax != glGetMinmax);
  rCtx->dsp.CurrTable()->glGetMinmax(target, reset, format, types, values);
}

REGAL_DECL void REGAL_CALL glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMinmaxParameterfv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxParameterfv != glGetMinmaxParameterfv);
  rCtx->dsp.CurrTable()->glGetMinmaxParameterfv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMinmaxParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxParameteriv != glGetMinmaxParameteriv);
  rCtx->dsp.CurrTable()->glGetMinmaxParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glHistogram(", toString(target), ", ", width, ", ", toString(internalformat), ", ", sink, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glHistogram);
  RegalAssert(rCtx->dsp.CurrTable()->glHistogram != glHistogram);
  rCtx->dsp.CurrTable()->glHistogram(target, width, internalformat, sink);
}

REGAL_DECL void REGAL_CALL glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMinmax(", toString(target), ", ", toString(internalformat), ", ", sink, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMinmax);
  RegalAssert(rCtx->dsp.CurrTable()->glMinmax != glMinmax);
  rCtx->dsp.CurrTable()->glMinmax(target, internalformat, sink);
}

REGAL_DECL void REGAL_CALL glResetHistogram(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glResetHistogram(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glResetHistogram);
  RegalAssert(rCtx->dsp.CurrTable()->glResetHistogram != glResetHistogram);
  rCtx->dsp.CurrTable()->glResetHistogram(target);
}

REGAL_DECL void REGAL_CALL glResetMinmax(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glResetMinmax(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glResetMinmax);
  RegalAssert(rCtx->dsp.CurrTable()->glResetMinmax != glResetMinmax);
  rCtx->dsp.CurrTable()->glResetMinmax(target);
}

/* GL_VERSION_1_3 */

REGAL_DECL void REGAL_CALL glActiveTexture(GLenum texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glActiveTexture(", toString(texture), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glActiveTexture);
  RegalAssert(rCtx->dsp.CurrTable()->glActiveTexture != glActiveTexture);
  rCtx->dsp.CurrTable()->glActiveTexture(texture);
}

REGAL_DECL void REGAL_CALL glSampleCoverage(GLclampf value, GLboolean invert)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSampleCoverage(", value, ", ", invert, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSampleCoverage);
  RegalAssert(rCtx->dsp.CurrTable()->glSampleCoverage != glSampleCoverage);
  rCtx->dsp.CurrTable()->glSampleCoverage(value, invert);
}

REGAL_DECL void REGAL_CALL glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexImage3D(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage3D);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage3D != glCompressedTexImage3D);
  rCtx->dsp.CurrTable()->glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexImage2D(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage2D);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage2D != glCompressedTexImage2D);
  rCtx->dsp.CurrTable()->glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexImage1D(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage1D);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage1D != glCompressedTexImage1D);
  rCtx->dsp.CurrTable()->glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexSubImage3D(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage3D);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage3D != glCompressedTexSubImage3D);
  rCtx->dsp.CurrTable()->glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexSubImage2D(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage2D);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage2D != glCompressedTexSubImage2D);
  rCtx->dsp.CurrTable()->glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexSubImage1D(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage1D);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage1D != glCompressedTexSubImage1D);
  rCtx->dsp.CurrTable()->glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCompressedTexImage(", toString(target), ", ", lod, ", ", img, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCompressedTexImage);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCompressedTexImage != glGetCompressedTexImage);
  rCtx->dsp.CurrTable()->glGetCompressedTexImage(target, lod, img);
}

REGAL_DECL void REGAL_CALL glClientActiveTexture(GLenum texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClientActiveTexture(", toString(texture), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClientActiveTexture);
  RegalAssert(rCtx->dsp.CurrTable()->glClientActiveTexture != glClientActiveTexture);
  rCtx->dsp.CurrTable()->glClientActiveTexture(texture);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1d(GLenum target, GLdouble s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1d(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1d);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1d != glMultiTexCoord1d);
  rCtx->dsp.CurrTable()->glMultiTexCoord1d(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1dv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1dv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1dv != glMultiTexCoord1dv);
  rCtx->dsp.CurrTable()->glMultiTexCoord1dv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1f(GLenum target, GLfloat s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1f(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1f);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1f != glMultiTexCoord1f);
  rCtx->dsp.CurrTable()->glMultiTexCoord1f(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1fv(GLenum target, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1fv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1fv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1fv != glMultiTexCoord1fv);
  rCtx->dsp.CurrTable()->glMultiTexCoord1fv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1i(GLenum target, GLint s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1i(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1i);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1i != glMultiTexCoord1i);
  rCtx->dsp.CurrTable()->glMultiTexCoord1i(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1iv(GLenum target, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1iv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1iv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1iv != glMultiTexCoord1iv);
  rCtx->dsp.CurrTable()->glMultiTexCoord1iv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1s(GLenum target, GLshort s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1s(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1s);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1s != glMultiTexCoord1s);
  rCtx->dsp.CurrTable()->glMultiTexCoord1s(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1sv(GLenum target, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1sv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1sv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1sv != glMultiTexCoord1sv);
  rCtx->dsp.CurrTable()->glMultiTexCoord1sv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2d(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2d);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2d != glMultiTexCoord2d);
  rCtx->dsp.CurrTable()->glMultiTexCoord2d(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2dv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2dv != glMultiTexCoord2dv);
  rCtx->dsp.CurrTable()->glMultiTexCoord2dv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2f(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2f);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2f != glMultiTexCoord2f);
  rCtx->dsp.CurrTable()->glMultiTexCoord2f(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2fv(GLenum target, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2fv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2fv != glMultiTexCoord2fv);
  rCtx->dsp.CurrTable()->glMultiTexCoord2fv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2i(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2i);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2i != glMultiTexCoord2i);
  rCtx->dsp.CurrTable()->glMultiTexCoord2i(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2iv(GLenum target, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2iv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2iv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2iv != glMultiTexCoord2iv);
  rCtx->dsp.CurrTable()->glMultiTexCoord2iv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2s(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2s);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2s != glMultiTexCoord2s);
  rCtx->dsp.CurrTable()->glMultiTexCoord2s(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2sv(GLenum target, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2sv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2sv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2sv != glMultiTexCoord2sv);
  rCtx->dsp.CurrTable()->glMultiTexCoord2sv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3d(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3d);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3d != glMultiTexCoord3d);
  rCtx->dsp.CurrTable()->glMultiTexCoord3d(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3dv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3dv != glMultiTexCoord3dv);
  rCtx->dsp.CurrTable()->glMultiTexCoord3dv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3f(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3f);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3f != glMultiTexCoord3f);
  rCtx->dsp.CurrTable()->glMultiTexCoord3f(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3fv(GLenum target, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3fv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3fv != glMultiTexCoord3fv);
  rCtx->dsp.CurrTable()->glMultiTexCoord3fv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3i(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3i);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3i != glMultiTexCoord3i);
  rCtx->dsp.CurrTable()->glMultiTexCoord3i(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3iv(GLenum target, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3iv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3iv != glMultiTexCoord3iv);
  rCtx->dsp.CurrTable()->glMultiTexCoord3iv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3s(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3s);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3s != glMultiTexCoord3s);
  rCtx->dsp.CurrTable()->glMultiTexCoord3s(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3sv(GLenum target, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3sv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3sv != glMultiTexCoord3sv);
  rCtx->dsp.CurrTable()->glMultiTexCoord3sv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4d(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4d);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4d != glMultiTexCoord4d);
  rCtx->dsp.CurrTable()->glMultiTexCoord4d(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4dv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4dv != glMultiTexCoord4dv);
  rCtx->dsp.CurrTable()->glMultiTexCoord4dv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4f(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4f);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4f != glMultiTexCoord4f);
  rCtx->dsp.CurrTable()->glMultiTexCoord4f(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4fv(GLenum target, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4fv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4fv != glMultiTexCoord4fv);
  rCtx->dsp.CurrTable()->glMultiTexCoord4fv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4i(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4i);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4i != glMultiTexCoord4i);
  rCtx->dsp.CurrTable()->glMultiTexCoord4i(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4iv(GLenum target, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4iv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4iv != glMultiTexCoord4iv);
  rCtx->dsp.CurrTable()->glMultiTexCoord4iv(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4s(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4s);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4s != glMultiTexCoord4s);
  rCtx->dsp.CurrTable()->glMultiTexCoord4s(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4sv(GLenum target, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4sv(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4sv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4sv != glMultiTexCoord4sv);
  rCtx->dsp.CurrTable()->glMultiTexCoord4sv(target, v);
}

REGAL_DECL void REGAL_CALL glLoadTransposeMatrixf(const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadTransposeMatrixf(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadTransposeMatrixf);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadTransposeMatrixf != glLoadTransposeMatrixf);
  rCtx->dsp.CurrTable()->glLoadTransposeMatrixf(m);
}

REGAL_DECL void REGAL_CALL glLoadTransposeMatrixd(const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadTransposeMatrixd(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadTransposeMatrixd);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadTransposeMatrixd != glLoadTransposeMatrixd);
  rCtx->dsp.CurrTable()->glLoadTransposeMatrixd(m);
}

REGAL_DECL void REGAL_CALL glMultTransposeMatrixf(const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultTransposeMatrixf(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultTransposeMatrixf);
  RegalAssert(rCtx->dsp.CurrTable()->glMultTransposeMatrixf != glMultTransposeMatrixf);
  rCtx->dsp.CurrTable()->glMultTransposeMatrixf(m);
}

REGAL_DECL void REGAL_CALL glMultTransposeMatrixd(const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultTransposeMatrixd(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultTransposeMatrixd);
  RegalAssert(rCtx->dsp.CurrTable()->glMultTransposeMatrixd != glMultTransposeMatrixd);
  rCtx->dsp.CurrTable()->glMultTransposeMatrixd(m);
}

/* GL_VERSION_1_4 */

REGAL_DECL void REGAL_CALL glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFuncSeparate(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparate);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparate != glBlendFuncSeparate);
  rCtx->dsp.CurrTable()->glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

REGAL_DECL void REGAL_CALL glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawArrays(", toString(mode), ", ", first, ", ", count, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawArrays);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawArrays != glMultiDrawArrays);
  rCtx->dsp.CurrTable()->glMultiDrawArrays(mode, first, count, primcount);
}

REGAL_DECL void REGAL_CALL glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawElements(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElements);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElements != glMultiDrawElements);
  rCtx->dsp.CurrTable()->glMultiDrawElements(mode, count, type, indices, primcount);
}

REGAL_DECL void REGAL_CALL glPointParameterf(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterf(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterf);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterf != glPointParameterf);
  rCtx->dsp.CurrTable()->glPointParameterf(pname, param);
}

REGAL_DECL void REGAL_CALL glPointParameterfv(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterfv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfv != glPointParameterfv);
  rCtx->dsp.CurrTable()->glPointParameterfv(pname, params);
}

REGAL_DECL void REGAL_CALL glPointParameteri(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameteri(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameteri);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameteri != glPointParameteri);
  rCtx->dsp.CurrTable()->glPointParameteri(pname, param);
}

REGAL_DECL void REGAL_CALL glPointParameteriv(GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameteriv(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameteriv != glPointParameteriv);
  rCtx->dsp.CurrTable()->glPointParameteriv(pname, params);
}

REGAL_DECL void REGAL_CALL glFogCoordf(GLfloat coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordf(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordf);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordf != glFogCoordf);
  rCtx->dsp.CurrTable()->glFogCoordf(coord);
}

REGAL_DECL void REGAL_CALL glFogCoordfv(const GLfloat *coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordfv(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordfv);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordfv != glFogCoordfv);
  rCtx->dsp.CurrTable()->glFogCoordfv(coord);
}

REGAL_DECL void REGAL_CALL glFogCoordd(GLdouble coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordd(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordd);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordd != glFogCoordd);
  rCtx->dsp.CurrTable()->glFogCoordd(coord);
}

REGAL_DECL void REGAL_CALL glFogCoorddv(const GLdouble *coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoorddv(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoorddv);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoorddv != glFogCoorddv);
  rCtx->dsp.CurrTable()->glFogCoorddv(coord);
}

REGAL_DECL void REGAL_CALL glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordPointer(", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordPointer != glFogCoordPointer);
  rCtx->dsp.CurrTable()->glFogCoordPointer(type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3b(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3b);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3b != glSecondaryColor3b);
  rCtx->dsp.CurrTable()->glSecondaryColor3b(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3bv(const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3bv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3bv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3bv != glSecondaryColor3bv);
  rCtx->dsp.CurrTable()->glSecondaryColor3bv(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3d(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3d);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3d != glSecondaryColor3d);
  rCtx->dsp.CurrTable()->glSecondaryColor3d(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3dv(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3dv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3dv != glSecondaryColor3dv);
  rCtx->dsp.CurrTable()->glSecondaryColor3dv(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3f(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3f);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3f != glSecondaryColor3f);
  rCtx->dsp.CurrTable()->glSecondaryColor3f(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3fv(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3fv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3fv != glSecondaryColor3fv);
  rCtx->dsp.CurrTable()->glSecondaryColor3fv(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3i(GLint red, GLint green, GLint blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3i(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3i);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3i != glSecondaryColor3i);
  rCtx->dsp.CurrTable()->glSecondaryColor3i(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3iv(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3iv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3iv != glSecondaryColor3iv);
  rCtx->dsp.CurrTable()->glSecondaryColor3iv(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3s(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3s);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3s != glSecondaryColor3s);
  rCtx->dsp.CurrTable()->glSecondaryColor3s(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3sv(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3sv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3sv != glSecondaryColor3sv);
  rCtx->dsp.CurrTable()->glSecondaryColor3sv(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3ub(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ub);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ub != glSecondaryColor3ub);
  rCtx->dsp.CurrTable()->glSecondaryColor3ub(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3ubv(const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3ubv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ubv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ubv != glSecondaryColor3ubv);
  rCtx->dsp.CurrTable()->glSecondaryColor3ubv(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3ui(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ui != glSecondaryColor3ui);
  rCtx->dsp.CurrTable()->glSecondaryColor3ui(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3uiv(const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3uiv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3uiv != glSecondaryColor3uiv);
  rCtx->dsp.CurrTable()->glSecondaryColor3uiv(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3us(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3us);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3us != glSecondaryColor3us);
  rCtx->dsp.CurrTable()->glSecondaryColor3us(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3usv(const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3usv(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3usv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3usv != glSecondaryColor3usv);
  rCtx->dsp.CurrTable()->glSecondaryColor3usv(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColorPointer(", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorPointer != glSecondaryColorPointer);
  rCtx->dsp.CurrTable()->glSecondaryColorPointer(size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glWindowPos2d(GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2d(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2d);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2d != glWindowPos2d);
  rCtx->dsp.CurrTable()->glWindowPos2d(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2dv(const GLdouble *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2dv(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dv != glWindowPos2dv);
  rCtx->dsp.CurrTable()->glWindowPos2dv(p);
}

REGAL_DECL void REGAL_CALL glWindowPos2f(GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2f(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2f);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2f != glWindowPos2f);
  rCtx->dsp.CurrTable()->glWindowPos2f(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2fv(const GLfloat *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2fv(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fv != glWindowPos2fv);
  rCtx->dsp.CurrTable()->glWindowPos2fv(p);
}

REGAL_DECL void REGAL_CALL glWindowPos2i(GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2i(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2i);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2i != glWindowPos2i);
  rCtx->dsp.CurrTable()->glWindowPos2i(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2iv(const GLint *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2iv(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2iv);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2iv != glWindowPos2iv);
  rCtx->dsp.CurrTable()->glWindowPos2iv(p);
}

REGAL_DECL void REGAL_CALL glWindowPos2s(GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2s(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2s);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2s != glWindowPos2s);
  rCtx->dsp.CurrTable()->glWindowPos2s(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2sv(const GLshort *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2sv(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2sv);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2sv != glWindowPos2sv);
  rCtx->dsp.CurrTable()->glWindowPos2sv(p);
}

REGAL_DECL void REGAL_CALL glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3d(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3d);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3d != glWindowPos3d);
  rCtx->dsp.CurrTable()->glWindowPos3d(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3dv(const GLdouble *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3dv(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dv != glWindowPos3dv);
  rCtx->dsp.CurrTable()->glWindowPos3dv(p);
}

REGAL_DECL void REGAL_CALL glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3f(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3f);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3f != glWindowPos3f);
  rCtx->dsp.CurrTable()->glWindowPos3f(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3fv(const GLfloat *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3fv(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fv != glWindowPos3fv);
  rCtx->dsp.CurrTable()->glWindowPos3fv(p);
}

REGAL_DECL void REGAL_CALL glWindowPos3i(GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3i(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3i);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3i != glWindowPos3i);
  rCtx->dsp.CurrTable()->glWindowPos3i(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3iv(const GLint *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3iv(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3iv != glWindowPos3iv);
  rCtx->dsp.CurrTable()->glWindowPos3iv(p);
}

REGAL_DECL void REGAL_CALL glWindowPos3s(GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3s(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3s);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3s != glWindowPos3s);
  rCtx->dsp.CurrTable()->glWindowPos3s(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3sv(const GLshort *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3sv(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3sv != glWindowPos3sv);
  rCtx->dsp.CurrTable()->glWindowPos3sv(p);
}

/* GL_VERSION_1_5 */

REGAL_DECL void REGAL_CALL glGenQueries(GLsizei n, GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenQueries(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenQueries);
  RegalAssert(rCtx->dsp.CurrTable()->glGenQueries != glGenQueries);
  rCtx->dsp.CurrTable()->glGenQueries(n, ids);
}

REGAL_DECL void REGAL_CALL glDeleteQueries(GLsizei n, const GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteQueries(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteQueries);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteQueries != glDeleteQueries);
  rCtx->dsp.CurrTable()->glDeleteQueries(n, ids);
}

REGAL_DECL GLboolean REGAL_CALL glIsQuery(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsQuery(", id, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsQuery);
  RegalAssert(rCtx->dsp.CurrTable()->glIsQuery != glIsQuery);
  return rCtx->dsp.CurrTable()->glIsQuery(id);
}

REGAL_DECL void REGAL_CALL glBeginQuery(GLenum target, GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginQuery(", toString(target), ", ", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginQuery);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginQuery != glBeginQuery);
  rCtx->dsp.CurrTable()->glBeginQuery(target, id);
}

REGAL_DECL void REGAL_CALL glEndQuery(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndQuery(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndQuery);
  RegalAssert(rCtx->dsp.CurrTable()->glEndQuery != glEndQuery);
  rCtx->dsp.CurrTable()->glEndQuery(target);
}

REGAL_DECL void REGAL_CALL glGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryiv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryiv != glGetQueryiv);
  rCtx->dsp.CurrTable()->glGetQueryiv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryObjectiv(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectiv != glGetQueryObjectiv);
  rCtx->dsp.CurrTable()->glGetQueryObjectiv(id, pname, params);
}

REGAL_DECL void REGAL_CALL glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryObjectuiv(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectuiv != glGetQueryObjectuiv);
  rCtx->dsp.CurrTable()->glGetQueryObjectuiv(id, pname, params);
}

REGAL_DECL void REGAL_CALL glBindBuffer(GLenum target, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBuffer(", toString(target), ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBuffer != glBindBuffer);
  rCtx->dsp.CurrTable()->glBindBuffer(target, buffer);
}

REGAL_DECL void REGAL_CALL glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteBuffers(", n, ", ", buffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteBuffers);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteBuffers != glDeleteBuffers);
  rCtx->dsp.CurrTable()->glDeleteBuffers(n, buffers);
}

REGAL_DECL void REGAL_CALL glGenBuffers(GLsizei n, GLuint *buffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenBuffers(", n, ", ", buffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenBuffers);
  RegalAssert(rCtx->dsp.CurrTable()->glGenBuffers != glGenBuffers);
  rCtx->dsp.CurrTable()->glGenBuffers(n, buffers);
}

REGAL_DECL GLboolean REGAL_CALL glIsBuffer(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsBuffer(", buffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glIsBuffer != glIsBuffer);
  return rCtx->dsp.CurrTable()->glIsBuffer(buffer);
}

REGAL_DECL void REGAL_CALL glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBufferData(", toString(target), ", ", size, ", ", data, ", ", toString(usage), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBufferData);
  RegalAssert(rCtx->dsp.CurrTable()->glBufferData != glBufferData);
  rCtx->dsp.CurrTable()->glBufferData(target, size, data, usage);
}

REGAL_DECL void REGAL_CALL glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBufferSubData(", toString(target), ", ", offset, ", ", size, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBufferSubData);
  RegalAssert(rCtx->dsp.CurrTable()->glBufferSubData != glBufferSubData);
  rCtx->dsp.CurrTable()->glBufferSubData(target, offset, size, data);
}

REGAL_DECL void REGAL_CALL glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBufferSubData(", toString(target), ", ", offset, ", ", size, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferSubData);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferSubData != glGetBufferSubData);
  rCtx->dsp.CurrTable()->glGetBufferSubData(target, offset, size, data);
}

REGAL_DECL GLvoid *REGAL_CALL glMapBuffer(GLenum target, GLenum access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapBuffer(", toString(target), ", ", toString(access), ")");
  if (!rCtx) return NULL;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glMapBuffer != glMapBuffer);
  return rCtx->dsp.CurrTable()->glMapBuffer(target, access);
}

REGAL_DECL GLboolean REGAL_CALL glUnmapBuffer(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUnmapBuffer(", toString(target), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUnmapBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glUnmapBuffer != glUnmapBuffer);
  return rCtx->dsp.CurrTable()->glUnmapBuffer(target);
}

REGAL_DECL void REGAL_CALL glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBufferParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferParameteriv != glGetBufferParameteriv);
  rCtx->dsp.CurrTable()->glGetBufferParameteriv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBufferPointerv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferPointerv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferPointerv != glGetBufferPointerv);
  rCtx->dsp.CurrTable()->glGetBufferPointerv(target, pname, params);
}

/* GL_VERSION_2_0 */

REGAL_DECL void REGAL_CALL glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationSeparate(", toString(modeRGB), ", ", toString(modeAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparate);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparate != glBlendEquationSeparate);
  rCtx->dsp.CurrTable()->glBlendEquationSeparate(modeRGB, modeAlpha);
}

REGAL_DECL void REGAL_CALL glDrawBuffers(GLsizei n, const GLenum *bufs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawBuffers(", n, ", ", bufs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBuffers);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBuffers != glDrawBuffers);
  rCtx->dsp.CurrTable()->glDrawBuffers(n, bufs);
}

REGAL_DECL void REGAL_CALL glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilOpSeparate(", toString(face), ", ", toString(fail), ", ", toString(zfail), ", ", toString(zpass), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilOpSeparate);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilOpSeparate != glStencilOpSeparate);
  rCtx->dsp.CurrTable()->glStencilOpSeparate(face, fail, zfail, zpass);
}

REGAL_DECL void REGAL_CALL glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilFuncSeparate(", toString(face), ", ", toString(func), ", ", ref, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFuncSeparate);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFuncSeparate != glStencilFuncSeparate);
  rCtx->dsp.CurrTable()->glStencilFuncSeparate(face, func, ref, mask);
}

REGAL_DECL void REGAL_CALL glStencilMaskSeparate(GLenum face, GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilMaskSeparate(", toString(face), ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilMaskSeparate);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilMaskSeparate != glStencilMaskSeparate);
  rCtx->dsp.CurrTable()->glStencilMaskSeparate(face, mask);
}

REGAL_DECL void REGAL_CALL glAttachShader(GLuint program, GLuint shader)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAttachShader(", program, ", ", shader, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAttachShader);
  RegalAssert(rCtx->dsp.CurrTable()->glAttachShader != glAttachShader);
  rCtx->dsp.CurrTable()->glAttachShader(program, shader);
}

REGAL_DECL void REGAL_CALL glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindAttribLocation(", program, ", ", index, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindAttribLocation);
  RegalAssert(rCtx->dsp.CurrTable()->glBindAttribLocation != glBindAttribLocation);
  rCtx->dsp.CurrTable()->glBindAttribLocation(program, index, name);
}

REGAL_DECL void REGAL_CALL glCompileShader(GLuint shader)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompileShader(", shader, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompileShader);
  RegalAssert(rCtx->dsp.CurrTable()->glCompileShader != glCompileShader);
  rCtx->dsp.CurrTable()->glCompileShader(shader);
}

REGAL_DECL GLuint REGAL_CALL glCreateProgram(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCreateProgram()");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCreateProgram);
  RegalAssert(rCtx->dsp.CurrTable()->glCreateProgram != glCreateProgram);
  return rCtx->dsp.CurrTable()->glCreateProgram();
}

REGAL_DECL GLuint REGAL_CALL glCreateShader(GLenum type)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCreateShader(", toString(type), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCreateShader);
  RegalAssert(rCtx->dsp.CurrTable()->glCreateShader != glCreateShader);
  return rCtx->dsp.CurrTable()->glCreateShader(type);
}

REGAL_DECL void REGAL_CALL glDeleteProgram(GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteProgram(", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteProgram);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteProgram != glDeleteProgram);
  rCtx->dsp.CurrTable()->glDeleteProgram(program);
}

REGAL_DECL void REGAL_CALL glDeleteShader(GLuint shader)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteShader(", shader, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteShader);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteShader != glDeleteShader);
  rCtx->dsp.CurrTable()->glDeleteShader(shader);
}

REGAL_DECL void REGAL_CALL glDetachShader(GLuint program, GLuint shader)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDetachShader(", program, ", ", shader, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDetachShader);
  RegalAssert(rCtx->dsp.CurrTable()->glDetachShader != glDetachShader);
  rCtx->dsp.CurrTable()->glDetachShader(program, shader);
}

REGAL_DECL void REGAL_CALL glDisableVertexAttribArray(GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisableVertexAttribArray(", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisableVertexAttribArray);
  RegalAssert(rCtx->dsp.CurrTable()->glDisableVertexAttribArray != glDisableVertexAttribArray);
  rCtx->dsp.CurrTable()->glDisableVertexAttribArray(index);
}

REGAL_DECL void REGAL_CALL glEnableVertexAttribArray(GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnableVertexAttribArray(", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnableVertexAttribArray);
  RegalAssert(rCtx->dsp.CurrTable()->glEnableVertexAttribArray != glEnableVertexAttribArray);
  rCtx->dsp.CurrTable()->glEnableVertexAttribArray(index);
}

REGAL_DECL void REGAL_CALL glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveAttrib(", program, ", ", index, ", ", bufSize, ", ", length, ", ", size, ", ", type, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveAttrib);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveAttrib != glGetActiveAttrib);
  rCtx->dsp.CurrTable()->glGetActiveAttrib(program, index, bufSize, length, size, type, name);
}

REGAL_DECL void REGAL_CALL glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveUniform(", program, ", ", index, ", ", bufSize, ", ", length, ", ", size, ", ", type, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniform);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniform != glGetActiveUniform);
  rCtx->dsp.CurrTable()->glGetActiveUniform(program, index, bufSize, length, size, type, name);
}

REGAL_DECL void REGAL_CALL glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetAttachedShaders(", program, ", ", maxCount, ", ", count, ", ", shaders, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetAttachedShaders);
  RegalAssert(rCtx->dsp.CurrTable()->glGetAttachedShaders != glGetAttachedShaders);
  rCtx->dsp.CurrTable()->glGetAttachedShaders(program, maxCount, count, shaders);
}

REGAL_DECL GLint REGAL_CALL glGetAttribLocation(GLuint program, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetAttribLocation(", program, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetAttribLocation);
  RegalAssert(rCtx->dsp.CurrTable()->glGetAttribLocation != glGetAttribLocation);
  return rCtx->dsp.CurrTable()->glGetAttribLocation(program, name);
}

REGAL_DECL void REGAL_CALL glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramiv(", program, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramiv != glGetProgramiv);
  rCtx->dsp.CurrTable()->glGetProgramiv(program, pname, params);
}

REGAL_DECL void REGAL_CALL glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramInfoLog(", program, ", ", bufSize, ", ", length, ", ", boost::print::quote(infoLog,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramInfoLog);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramInfoLog != glGetProgramInfoLog);
  rCtx->dsp.CurrTable()->glGetProgramInfoLog(program, bufSize, length, infoLog);
}

REGAL_DECL void REGAL_CALL glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetShaderiv(", shader, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderiv != glGetShaderiv);
  rCtx->dsp.CurrTable()->glGetShaderiv(shader, pname, params);
}

REGAL_DECL void REGAL_CALL glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetShaderInfoLog(", shader, ", ", bufSize, ", ", length, ", ", boost::print::quote(infoLog,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderInfoLog);
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderInfoLog != glGetShaderInfoLog);
  rCtx->dsp.CurrTable()->glGetShaderInfoLog(shader, bufSize, length, infoLog);
}

REGAL_DECL void REGAL_CALL glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetShaderSource(", shader, ", ", bufSize, ", ", length, ", ", boost::print::quote(source,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderSource);
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderSource != glGetShaderSource);
  rCtx->dsp.CurrTable()->glGetShaderSource(shader, bufSize, length, source);
}

REGAL_DECL GLint REGAL_CALL glGetUniformLocation(GLuint program, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformLocation(", program, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformLocation);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformLocation != glGetUniformLocation);
  return rCtx->dsp.CurrTable()->glGetUniformLocation(program, name);
}

REGAL_DECL void REGAL_CALL glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformfv(", program, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformfv != glGetUniformfv);
  rCtx->dsp.CurrTable()->glGetUniformfv(program, location, params);
}

REGAL_DECL void REGAL_CALL glGetUniformiv(GLuint program, GLint location, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformiv(", program, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformiv != glGetUniformiv);
  rCtx->dsp.CurrTable()->glGetUniformiv(program, location, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribdv(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribdv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribdv != glGetVertexAttribdv);
  rCtx->dsp.CurrTable()->glGetVertexAttribdv(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribfv(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribfv != glGetVertexAttribfv);
  rCtx->dsp.CurrTable()->glGetVertexAttribfv(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribiv(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribiv != glGetVertexAttribiv);
  rCtx->dsp.CurrTable()->glGetVertexAttribiv(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribPointerv(", index, ", ", toString(pname), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribPointerv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribPointerv != glGetVertexAttribPointerv);
  rCtx->dsp.CurrTable()->glGetVertexAttribPointerv(index, pname, pointer);
}

REGAL_DECL GLboolean REGAL_CALL glIsProgram(GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsProgram(", program, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsProgram);
  RegalAssert(rCtx->dsp.CurrTable()->glIsProgram != glIsProgram);
  return rCtx->dsp.CurrTable()->glIsProgram(program);
}

REGAL_DECL GLboolean REGAL_CALL glIsShader(GLuint shader)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsShader(", shader, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsShader);
  RegalAssert(rCtx->dsp.CurrTable()->glIsShader != glIsShader);
  return rCtx->dsp.CurrTable()->glIsShader(shader);
}

REGAL_DECL void REGAL_CALL glLinkProgram(GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLinkProgram(", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLinkProgram);
  RegalAssert(rCtx->dsp.CurrTable()->glLinkProgram != glLinkProgram);
  rCtx->dsp.CurrTable()->glLinkProgram(program);
}

REGAL_DECL void REGAL_CALL glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glShaderSource(", shader, ", ", count, ", ", string, ", ", length, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glShaderSource);
  RegalAssert(rCtx->dsp.CurrTable()->glShaderSource != glShaderSource);
  rCtx->dsp.CurrTable()->glShaderSource(shader, count, string, length);
}

REGAL_DECL void REGAL_CALL glUseProgram(GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUseProgram(", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUseProgram);
  RegalAssert(rCtx->dsp.CurrTable()->glUseProgram != glUseProgram);
  rCtx->dsp.CurrTable()->glUseProgram(program);
}

REGAL_DECL void REGAL_CALL glUniform1f(GLint location, GLfloat v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1f(", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1f);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1f != glUniform1f);
  rCtx->dsp.CurrTable()->glUniform1f(location, v0);
}

REGAL_DECL void REGAL_CALL glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2f(", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2f);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2f != glUniform2f);
  rCtx->dsp.CurrTable()->glUniform2f(location, v0, v1);
}

REGAL_DECL void REGAL_CALL glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3f(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3f);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3f != glUniform3f);
  rCtx->dsp.CurrTable()->glUniform3f(location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4f(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4f);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4f != glUniform4f);
  rCtx->dsp.CurrTable()->glUniform4f(location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glUniform1i(GLint location, GLint v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1i(", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1i);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1i != glUniform1i);
  rCtx->dsp.CurrTable()->glUniform1i(location, v0);
}

REGAL_DECL void REGAL_CALL glUniform2i(GLint location, GLint v0, GLint v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2i(", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2i);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2i != glUniform2i);
  rCtx->dsp.CurrTable()->glUniform2i(location, v0, v1);
}

REGAL_DECL void REGAL_CALL glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3i(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3i);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3i != glUniform3i);
  rCtx->dsp.CurrTable()->glUniform3i(location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4i(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4i);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4i != glUniform4i);
  rCtx->dsp.CurrTable()->glUniform4i(location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1fv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1fv != glUniform1fv);
  rCtx->dsp.CurrTable()->glUniform1fv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2fv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2fv != glUniform2fv);
  rCtx->dsp.CurrTable()->glUniform2fv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3fv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3fv != glUniform3fv);
  rCtx->dsp.CurrTable()->glUniform3fv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4fv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4fv != glUniform4fv);
  rCtx->dsp.CurrTable()->glUniform4fv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1iv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1iv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1iv != glUniform1iv);
  rCtx->dsp.CurrTable()->glUniform1iv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2iv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2iv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2iv != glUniform2iv);
  rCtx->dsp.CurrTable()->glUniform2iv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3iv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3iv != glUniform3iv);
  rCtx->dsp.CurrTable()->glUniform3iv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4iv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4iv != glUniform4iv);
  rCtx->dsp.CurrTable()->glUniform4iv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix2fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2fv != glUniformMatrix2fv);
  rCtx->dsp.CurrTable()->glUniformMatrix2fv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix3fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3fv != glUniformMatrix3fv);
  rCtx->dsp.CurrTable()->glUniformMatrix3fv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix4fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4fv != glUniformMatrix4fv);
  rCtx->dsp.CurrTable()->glUniformMatrix4fv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glValidateProgram(GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glValidateProgram(", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glValidateProgram);
  RegalAssert(rCtx->dsp.CurrTable()->glValidateProgram != glValidateProgram);
  rCtx->dsp.CurrTable()->glValidateProgram(program);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1d(GLuint index, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1d(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1d != glVertexAttrib1d);
  rCtx->dsp.CurrTable()->glVertexAttrib1d(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1dv(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1dv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dv != glVertexAttrib1dv);
  rCtx->dsp.CurrTable()->glVertexAttrib1dv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1f(GLuint index, GLfloat x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1f(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1f);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1f != glVertexAttrib1f);
  rCtx->dsp.CurrTable()->glVertexAttrib1f(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1fv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fv != glVertexAttrib1fv);
  rCtx->dsp.CurrTable()->glVertexAttrib1fv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1s(GLuint index, GLshort x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1s(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1s);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1s != glVertexAttrib1s);
  rCtx->dsp.CurrTable()->glVertexAttrib1s(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1sv(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1sv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1sv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1sv != glVertexAttrib1sv);
  rCtx->dsp.CurrTable()->glVertexAttrib1sv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2d(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2d != glVertexAttrib2d);
  rCtx->dsp.CurrTable()->glVertexAttrib2d(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2dv(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2dv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dv != glVertexAttrib2dv);
  rCtx->dsp.CurrTable()->glVertexAttrib2dv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2f(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2f);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2f != glVertexAttrib2f);
  rCtx->dsp.CurrTable()->glVertexAttrib2f(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2fv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fv != glVertexAttrib2fv);
  rCtx->dsp.CurrTable()->glVertexAttrib2fv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2s(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2s);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2s != glVertexAttrib2s);
  rCtx->dsp.CurrTable()->glVertexAttrib2s(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2sv(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2sv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2sv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2sv != glVertexAttrib2sv);
  rCtx->dsp.CurrTable()->glVertexAttrib2sv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3d(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3d != glVertexAttrib3d);
  rCtx->dsp.CurrTable()->glVertexAttrib3d(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3dv(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3dv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dv != glVertexAttrib3dv);
  rCtx->dsp.CurrTable()->glVertexAttrib3dv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3f(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3f);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3f != glVertexAttrib3f);
  rCtx->dsp.CurrTable()->glVertexAttrib3f(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3fv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fv != glVertexAttrib3fv);
  rCtx->dsp.CurrTable()->glVertexAttrib3fv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3s(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3s);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3s != glVertexAttrib3s);
  rCtx->dsp.CurrTable()->glVertexAttrib3s(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3sv(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3sv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3sv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3sv != glVertexAttrib3sv);
  rCtx->dsp.CurrTable()->glVertexAttrib3sv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4Nbv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nbv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nbv != glVertexAttrib4Nbv);
  rCtx->dsp.CurrTable()->glVertexAttrib4Nbv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4Niv(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4Niv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Niv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Niv != glVertexAttrib4Niv);
  rCtx->dsp.CurrTable()->glVertexAttrib4Niv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4Nsv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nsv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nsv != glVertexAttrib4Nsv);
  rCtx->dsp.CurrTable()->glVertexAttrib4Nsv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4Nub(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nub);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nub != glVertexAttrib4Nub);
  rCtx->dsp.CurrTable()->glVertexAttrib4Nub(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4Nubv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nubv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nubv != glVertexAttrib4Nubv);
  rCtx->dsp.CurrTable()->glVertexAttrib4Nubv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4Nuiv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nuiv != glVertexAttrib4Nuiv);
  rCtx->dsp.CurrTable()->glVertexAttrib4Nuiv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4Nusv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nusv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4Nusv != glVertexAttrib4Nusv);
  rCtx->dsp.CurrTable()->glVertexAttrib4Nusv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4bv(GLuint index, const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4bv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4bv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4bv != glVertexAttrib4bv);
  rCtx->dsp.CurrTable()->glVertexAttrib4bv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4d(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4d != glVertexAttrib4d);
  rCtx->dsp.CurrTable()->glVertexAttrib4d(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4dv(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4dv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dv != glVertexAttrib4dv);
  rCtx->dsp.CurrTable()->glVertexAttrib4dv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4f(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4f);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4f != glVertexAttrib4f);
  rCtx->dsp.CurrTable()->glVertexAttrib4f(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4fv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fv != glVertexAttrib4fv);
  rCtx->dsp.CurrTable()->glVertexAttrib4fv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4iv(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4iv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4iv != glVertexAttrib4iv);
  rCtx->dsp.CurrTable()->glVertexAttrib4iv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4s(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4s);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4s != glVertexAttrib4s);
  rCtx->dsp.CurrTable()->glVertexAttrib4s(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4sv(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4sv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4sv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4sv != glVertexAttrib4sv);
  rCtx->dsp.CurrTable()->glVertexAttrib4sv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4ubv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ubv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ubv != glVertexAttrib4ubv);
  rCtx->dsp.CurrTable()->glVertexAttrib4ubv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4uiv(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4uiv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4uiv != glVertexAttrib4uiv);
  rCtx->dsp.CurrTable()->glVertexAttrib4uiv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4usv(GLuint index, const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4usv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4usv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4usv != glVertexAttrib4usv);
  rCtx->dsp.CurrTable()->glVertexAttrib4usv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribPointer(", index, ", ", size, ", ", toString(type), ", ", normalized, ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribPointer != glVertexAttribPointer);
  rCtx->dsp.CurrTable()->glVertexAttribPointer(index, size, type, normalized, stride, pointer);
}

/* GL_VERSION_2_1 */

REGAL_DECL void REGAL_CALL glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix2x3fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2x3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2x3fv != glUniformMatrix2x3fv);
  rCtx->dsp.CurrTable()->glUniformMatrix2x3fv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix3x2fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3x2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3x2fv != glUniformMatrix3x2fv);
  rCtx->dsp.CurrTable()->glUniformMatrix3x2fv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix2x4fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2x4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2x4fv != glUniformMatrix2x4fv);
  rCtx->dsp.CurrTable()->glUniformMatrix2x4fv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix4x2fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4x2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4x2fv != glUniformMatrix4x2fv);
  rCtx->dsp.CurrTable()->glUniformMatrix4x2fv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix3x4fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3x4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3x4fv != glUniformMatrix3x4fv);
  rCtx->dsp.CurrTable()->glUniformMatrix3x4fv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix4x3fv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4x3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4x3fv != glUniformMatrix4x3fv);
  rCtx->dsp.CurrTable()->glUniformMatrix4x3fv(location, count, transpose, value);
}

/* GL_VERSION_3_0 */

REGAL_DECL void REGAL_CALL glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorMaski(", index, ", ", r, ", ", g, ", ", b, ", ", a, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorMaski);
  RegalAssert(rCtx->dsp.CurrTable()->glColorMaski != glColorMaski);
  rCtx->dsp.CurrTable()->glColorMaski(index, r, g, b, a);
}

REGAL_DECL void REGAL_CALL glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBooleani_v(", toString(target), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBooleani_v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBooleani_v != glGetBooleani_v);
  rCtx->dsp.CurrTable()->glGetBooleani_v(target, index, data);
}

/* GL_ARB_uniform_buffer_object */

REGAL_DECL void REGAL_CALL glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetIntegeri_v(", toString(target), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegeri_v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegeri_v != glGetIntegeri_v);
  rCtx->dsp.CurrTable()->glGetIntegeri_v(target, index, data);
}

/* GL_VERSION_3_0 */

REGAL_DECL void REGAL_CALL glEnablei(GLenum cap, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnablei(", toString(cap), ", ", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnablei);
  RegalAssert(rCtx->dsp.CurrTable()->glEnablei != glEnablei);
  rCtx->dsp.CurrTable()->glEnablei(cap, index);
}

REGAL_DECL void REGAL_CALL glDisablei(GLenum cap, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisablei(", toString(cap), ", ", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisablei);
  RegalAssert(rCtx->dsp.CurrTable()->glDisablei != glDisablei);
  rCtx->dsp.CurrTable()->glDisablei(cap, index);
}

REGAL_DECL GLboolean REGAL_CALL glIsEnabledi(GLenum target, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsEnabledi(", toString(target), ", ", index, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsEnabledi);
  RegalAssert(rCtx->dsp.CurrTable()->glIsEnabledi != glIsEnabledi);
  return rCtx->dsp.CurrTable()->glIsEnabledi(target, index);
}

REGAL_DECL void REGAL_CALL glBeginTransformFeedback(GLenum primitiveMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginTransformFeedback(", toString(primitiveMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginTransformFeedback);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginTransformFeedback != glBeginTransformFeedback);
  rCtx->dsp.CurrTable()->glBeginTransformFeedback(primitiveMode);
}

REGAL_DECL void REGAL_CALL glEndTransformFeedback(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndTransformFeedback()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndTransformFeedback);
  RegalAssert(rCtx->dsp.CurrTable()->glEndTransformFeedback != glEndTransformFeedback);
  rCtx->dsp.CurrTable()->glEndTransformFeedback();
}

/* GL_ARB_uniform_buffer_object */

REGAL_DECL void REGAL_CALL glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferRange(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferRange);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferRange != glBindBufferRange);
  rCtx->dsp.CurrTable()->glBindBufferRange(target, index, buffer, offset, size);
}

REGAL_DECL void REGAL_CALL glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferBase(", toString(target), ", ", index, ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferBase);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferBase != glBindBufferBase);
  rCtx->dsp.CurrTable()->glBindBufferBase(target, index, buffer);
}

/* GL_VERSION_3_0 */

REGAL_DECL void REGAL_CALL glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTransformFeedbackVaryings(", program, ", ", count, ", ", varyings, ", ", toString(bufferMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTransformFeedbackVaryings);
  RegalAssert(rCtx->dsp.CurrTable()->glTransformFeedbackVaryings != glTransformFeedbackVaryings);
  rCtx->dsp.CurrTable()->glTransformFeedbackVaryings(program, count, varyings, bufferMode);
}

REGAL_DECL void REGAL_CALL glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTransformFeedbackVarying(", program, ", ", index, ", ", bufSize, ", ", length, ", ", size, ", ", type, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTransformFeedbackVarying);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTransformFeedbackVarying != glGetTransformFeedbackVarying);
  rCtx->dsp.CurrTable()->glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}

REGAL_DECL void REGAL_CALL glClampColor(GLenum target, GLenum clamp)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClampColor(", toString(target), ", ", toString(clamp), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClampColor);
  RegalAssert(rCtx->dsp.CurrTable()->glClampColor != glClampColor);
  rCtx->dsp.CurrTable()->glClampColor(target, clamp);
}

REGAL_DECL void REGAL_CALL glBeginConditionalRender(GLuint id, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginConditionalRender(", id, ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginConditionalRender);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginConditionalRender != glBeginConditionalRender);
  rCtx->dsp.CurrTable()->glBeginConditionalRender(id, mode);
}

REGAL_DECL void REGAL_CALL glEndConditionalRender(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndConditionalRender()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndConditionalRender);
  RegalAssert(rCtx->dsp.CurrTable()->glEndConditionalRender != glEndConditionalRender);
  rCtx->dsp.CurrTable()->glEndConditionalRender();
}

REGAL_DECL void REGAL_CALL glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribIPointer(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribIPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribIPointer != glVertexAttribIPointer);
  rCtx->dsp.CurrTable()->glVertexAttribIPointer(index, size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribIiv(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribIiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribIiv != glGetVertexAttribIiv);
  rCtx->dsp.CurrTable()->glGetVertexAttribIiv(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribIuiv(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribIuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribIuiv != glGetVertexAttribIuiv);
  rCtx->dsp.CurrTable()->glGetVertexAttribIuiv(index, pname, params);
}

REGAL_DECL void REGAL_CALL glVertexAttribI1i(GLuint index, GLint x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI1i(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1i);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1i != glVertexAttribI1i);
  rCtx->dsp.CurrTable()->glVertexAttribI1i(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttribI2i(GLuint index, GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI2i(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2i);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2i != glVertexAttribI2i);
  rCtx->dsp.CurrTable()->glVertexAttribI2i(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI3i(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3i);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3i != glVertexAttribI3i);
  rCtx->dsp.CurrTable()->glVertexAttribI3i(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4i(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4i);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4i != glVertexAttribI4i);
  rCtx->dsp.CurrTable()->glVertexAttribI4i(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttribI1ui(GLuint index, GLuint x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI1ui(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1ui != glVertexAttribI1ui);
  rCtx->dsp.CurrTable()->glVertexAttribI1ui(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI2ui(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2ui != glVertexAttribI2ui);
  rCtx->dsp.CurrTable()->glVertexAttribI2ui(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI3ui(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3ui != glVertexAttribI3ui);
  rCtx->dsp.CurrTable()->glVertexAttribI3ui(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4ui(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4ui != glVertexAttribI4ui);
  rCtx->dsp.CurrTable()->glVertexAttribI4ui(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttribI1iv(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI1iv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1iv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1iv != glVertexAttribI1iv);
  rCtx->dsp.CurrTable()->glVertexAttribI1iv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI2iv(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI2iv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2iv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2iv != glVertexAttribI2iv);
  rCtx->dsp.CurrTable()->glVertexAttribI2iv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI3iv(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI3iv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3iv != glVertexAttribI3iv);
  rCtx->dsp.CurrTable()->glVertexAttribI3iv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4iv(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4iv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4iv != glVertexAttribI4iv);
  rCtx->dsp.CurrTable()->glVertexAttribI4iv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI1uiv(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI1uiv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1uiv != glVertexAttribI1uiv);
  rCtx->dsp.CurrTable()->glVertexAttribI1uiv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI2uiv(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI2uiv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2uiv != glVertexAttribI2uiv);
  rCtx->dsp.CurrTable()->glVertexAttribI2uiv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI3uiv(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI3uiv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3uiv != glVertexAttribI3uiv);
  rCtx->dsp.CurrTable()->glVertexAttribI3uiv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4uiv(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4uiv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4uiv != glVertexAttribI4uiv);
  rCtx->dsp.CurrTable()->glVertexAttribI4uiv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4bv(GLuint index, const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4bv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4bv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4bv != glVertexAttribI4bv);
  rCtx->dsp.CurrTable()->glVertexAttribI4bv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4sv(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4sv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4sv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4sv != glVertexAttribI4sv);
  rCtx->dsp.CurrTable()->glVertexAttribI4sv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4ubv(GLuint index, const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4ubv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4ubv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4ubv != glVertexAttribI4ubv);
  rCtx->dsp.CurrTable()->glVertexAttribI4ubv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4usv(GLuint index, const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4usv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4usv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4usv != glVertexAttribI4usv);
  rCtx->dsp.CurrTable()->glVertexAttribI4usv(index, v);
}

REGAL_DECL void REGAL_CALL glGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformuiv(", program, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformuiv != glGetUniformuiv);
  rCtx->dsp.CurrTable()->glGetUniformuiv(program, location, params);
}

REGAL_DECL void REGAL_CALL glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindFragDataLocation(", program, ", ", color, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindFragDataLocation);
  RegalAssert(rCtx->dsp.CurrTable()->glBindFragDataLocation != glBindFragDataLocation);
  rCtx->dsp.CurrTable()->glBindFragDataLocation(program, color, name);
}

REGAL_DECL GLint REGAL_CALL glGetFragDataLocation(GLuint program, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragDataLocation(", program, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragDataLocation);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragDataLocation != glGetFragDataLocation);
  return rCtx->dsp.CurrTable()->glGetFragDataLocation(program, name);
}

REGAL_DECL void REGAL_CALL glUniform1ui(GLint location, GLuint v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1ui(", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1ui);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1ui != glUniform1ui);
  rCtx->dsp.CurrTable()->glUniform1ui(location, v0);
}

REGAL_DECL void REGAL_CALL glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2ui(", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2ui);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2ui != glUniform2ui);
  rCtx->dsp.CurrTable()->glUniform2ui(location, v0, v1);
}

REGAL_DECL void REGAL_CALL glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3ui(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3ui != glUniform3ui);
  rCtx->dsp.CurrTable()->glUniform3ui(location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4ui(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4ui != glUniform4ui);
  rCtx->dsp.CurrTable()->glUniform4ui(location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1uiv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1uiv != glUniform1uiv);
  rCtx->dsp.CurrTable()->glUniform1uiv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2uiv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2uiv != glUniform2uiv);
  rCtx->dsp.CurrTable()->glUniform2uiv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3uiv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3uiv != glUniform3uiv);
  rCtx->dsp.CurrTable()->glUniform3uiv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4uiv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4uiv != glUniform4uiv);
  rCtx->dsp.CurrTable()->glUniform4uiv(location, count, value);
}

REGAL_DECL void REGAL_CALL glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexParameterIiv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterIiv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterIiv != glTexParameterIiv);
  rCtx->dsp.CurrTable()->glTexParameterIiv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexParameterIuiv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterIuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterIuiv != glTexParameterIuiv);
  rCtx->dsp.CurrTable()->glTexParameterIuiv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexParameterIiv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterIiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterIiv != glGetTexParameterIiv);
  rCtx->dsp.CurrTable()->glGetTexParameterIiv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexParameterIuiv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterIuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterIuiv != glGetTexParameterIuiv);
  rCtx->dsp.CurrTable()->glGetTexParameterIuiv(target, pname, params);
}

REGAL_DECL void REGAL_CALL glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearBufferiv(", toString(buffer), ", ", drawbuffer, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearBufferiv);
  RegalAssert(rCtx->dsp.CurrTable()->glClearBufferiv != glClearBufferiv);
  rCtx->dsp.CurrTable()->glClearBufferiv(buffer, drawbuffer, value);
}

REGAL_DECL void REGAL_CALL glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearBufferuiv(", toString(buffer), ", ", drawbuffer, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearBufferuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glClearBufferuiv != glClearBufferuiv);
  rCtx->dsp.CurrTable()->glClearBufferuiv(buffer, drawbuffer, value);
}

REGAL_DECL void REGAL_CALL glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearBufferfv(", toString(buffer), ", ", drawbuffer, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearBufferfv);
  RegalAssert(rCtx->dsp.CurrTable()->glClearBufferfv != glClearBufferfv);
  rCtx->dsp.CurrTable()->glClearBufferfv(buffer, drawbuffer, value);
}

REGAL_DECL void REGAL_CALL glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearBufferfi(", toString(buffer), ", ", drawbuffer, ", ", depth, ", ", stencil, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearBufferfi);
  RegalAssert(rCtx->dsp.CurrTable()->glClearBufferfi != glClearBufferfi);
  rCtx->dsp.CurrTable()->glClearBufferfi(buffer, drawbuffer, depth, stencil);
}

REGAL_DECL const GLubyte *REGAL_CALL glGetStringi(GLenum name, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetStringi(", toString(name), ", ", index, ")");
  if (!rCtx) return NULL;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetStringi);
  RegalAssert(rCtx->dsp.CurrTable()->glGetStringi != glGetStringi);
  return rCtx->dsp.CurrTable()->glGetStringi(name, index);
}

/* GL_VERSION_3_1 */

REGAL_DECL void REGAL_CALL glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawArraysInstanced(", toString(mode), ", ", start, ", ", count, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysInstanced);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysInstanced != glDrawArraysInstanced);
  rCtx->dsp.CurrTable()->glDrawArraysInstanced(mode, start, count, primcount);
}

REGAL_DECL void REGAL_CALL glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementsInstanced(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstanced);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstanced != glDrawElementsInstanced);
  rCtx->dsp.CurrTable()->glDrawElementsInstanced(mode, count, type, indices, primcount);
}

REGAL_DECL void REGAL_CALL glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexBuffer(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexBuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glTexBuffer != glTexBuffer);
  rCtx->dsp.CurrTable()->glTexBuffer(target, internalformat, buffer);
}

REGAL_DECL void REGAL_CALL glPrimitiveRestartIndex(GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPrimitiveRestartIndex(", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPrimitiveRestartIndex);
  RegalAssert(rCtx->dsp.CurrTable()->glPrimitiveRestartIndex != glPrimitiveRestartIndex);
  rCtx->dsp.CurrTable()->glPrimitiveRestartIndex(index);
}

/* GL_VERSION_3_2 */

REGAL_DECL void REGAL_CALL glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetInteger64i_v(", toString(target), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetInteger64i_v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetInteger64i_v != glGetInteger64i_v);
  rCtx->dsp.CurrTable()->glGetInteger64i_v(target, index, data);
}

REGAL_DECL void REGAL_CALL glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBufferParameteri64v(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferParameteri64v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferParameteri64v != glGetBufferParameteri64v);
  rCtx->dsp.CurrTable()->glGetBufferParameteri64v(target, pname, params);
}

REGAL_DECL void REGAL_CALL glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTexture(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture != glFramebufferTexture);
  rCtx->dsp.CurrTable()->glFramebufferTexture(target, attachment, texture, level);
}

REGAL_DECL void REGAL_CALL glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTextureFace(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureFace);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureFace != glFramebufferTextureFace);
  rCtx->dsp.CurrTable()->glFramebufferTextureFace(target, attachment, texture, level, face);
}

/* GL_ARB_sampler_objects */

REGAL_DECL void REGAL_CALL glGenSamplers(GLsizei count, GLuint *samplers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenSamplers(", count, ", ", samplers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenSamplers);
  RegalAssert(rCtx->dsp.CurrTable()->glGenSamplers != glGenSamplers);
  rCtx->dsp.CurrTable()->glGenSamplers(count, samplers);
}

REGAL_DECL void REGAL_CALL glDeleteSamplers(GLsizei count, const GLuint *samplers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteSamplers(", count, ", ", samplers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteSamplers);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteSamplers != glDeleteSamplers);
  rCtx->dsp.CurrTable()->glDeleteSamplers(count, samplers);
}

REGAL_DECL GLboolean REGAL_CALL glIsSampler(GLuint sampler)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsSampler(", sampler, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsSampler);
  RegalAssert(rCtx->dsp.CurrTable()->glIsSampler != glIsSampler);
  return rCtx->dsp.CurrTable()->glIsSampler(sampler);
}

REGAL_DECL void REGAL_CALL glBindSampler(GLuint unit, GLuint sampler)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindSampler(", unit, ", ", sampler, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindSampler);
  RegalAssert(rCtx->dsp.CurrTable()->glBindSampler != glBindSampler);
  rCtx->dsp.CurrTable()->glBindSampler(unit, sampler);
}

REGAL_DECL void REGAL_CALL glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSamplerParameteri(", sampler, ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameteri);
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameteri != glSamplerParameteri);
  rCtx->dsp.CurrTable()->glSamplerParameteri(sampler, pname, param);
}

REGAL_DECL void REGAL_CALL glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSamplerParameterf(", sampler, ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameterf);
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameterf != glSamplerParameterf);
  rCtx->dsp.CurrTable()->glSamplerParameterf(sampler, pname, param);
}

REGAL_DECL void REGAL_CALL glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSamplerParameteriv(", sampler, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameteriv != glSamplerParameteriv);
  rCtx->dsp.CurrTable()->glSamplerParameteriv(sampler, pname, params);
}

REGAL_DECL void REGAL_CALL glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSamplerParameterfv(", sampler, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameterfv != glSamplerParameterfv);
  rCtx->dsp.CurrTable()->glSamplerParameterfv(sampler, pname, params);
}

REGAL_DECL void REGAL_CALL glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSamplerParameterIiv(", sampler, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameterIiv);
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameterIiv != glSamplerParameterIiv);
  rCtx->dsp.CurrTable()->glSamplerParameterIiv(sampler, pname, params);
}

REGAL_DECL void REGAL_CALL glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSamplerParameterIuiv(", sampler, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameterIuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glSamplerParameterIuiv != glSamplerParameterIuiv);
  rCtx->dsp.CurrTable()->glSamplerParameterIuiv(sampler, pname, params);
}

REGAL_DECL void REGAL_CALL glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSamplerParameteriv(", sampler, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSamplerParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSamplerParameteriv != glGetSamplerParameteriv);
  rCtx->dsp.CurrTable()->glGetSamplerParameteriv(sampler, pname, params);
}

REGAL_DECL void REGAL_CALL glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSamplerParameterfv(", sampler, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSamplerParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSamplerParameterfv != glGetSamplerParameterfv);
  rCtx->dsp.CurrTable()->glGetSamplerParameterfv(sampler, pname, params);
}

REGAL_DECL void REGAL_CALL glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSamplerParameterIiv(", sampler, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSamplerParameterIiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSamplerParameterIiv != glGetSamplerParameterIiv);
  rCtx->dsp.CurrTable()->glGetSamplerParameterIiv(sampler, pname, params);
}

REGAL_DECL void REGAL_CALL glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSamplerParameterIuiv(", sampler, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSamplerParameterIuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSamplerParameterIuiv != glGetSamplerParameterIuiv);
  rCtx->dsp.CurrTable()->glGetSamplerParameterIuiv(sampler, pname, params);
}

/* GL_ARB_blend_func_extended */

REGAL_DECL void REGAL_CALL glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindFragDataLocationIndexed(", program, ", ", colorNumber, ", ", index, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindFragDataLocationIndexed);
  RegalAssert(rCtx->dsp.CurrTable()->glBindFragDataLocationIndexed != glBindFragDataLocationIndexed);
  rCtx->dsp.CurrTable()->glBindFragDataLocationIndexed(program, colorNumber, index, name);
}

REGAL_DECL GLint REGAL_CALL glGetFragDataIndex(GLuint program, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragDataIndex(", program, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragDataIndex);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragDataIndex != glGetFragDataIndex);
  return rCtx->dsp.CurrTable()->glGetFragDataIndex(program, name);
}

/* GL_ARB_timer_query */

REGAL_DECL void REGAL_CALL glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryObjecti64v(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjecti64v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjecti64v != glGetQueryObjecti64v);
  rCtx->dsp.CurrTable()->glGetQueryObjecti64v(id, pname, params);
}

REGAL_DECL void REGAL_CALL glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryObjectui64v(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectui64v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectui64v != glGetQueryObjectui64v);
  rCtx->dsp.CurrTable()->glGetQueryObjectui64v(id, pname, params);
}

REGAL_DECL void REGAL_CALL glQueryCounter(GLuint id, GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glQueryCounter(", id, ", ", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glQueryCounter);
  RegalAssert(rCtx->dsp.CurrTable()->glQueryCounter != glQueryCounter);
  rCtx->dsp.CurrTable()->glQueryCounter(id, target);
}

/* GL_VERSION_3_3 */

REGAL_DECL void REGAL_CALL glVertexAttribDivisor(GLuint index, GLuint divisor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribDivisor(", index, ", ", divisor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribDivisor);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribDivisor != glVertexAttribDivisor);
  rCtx->dsp.CurrTable()->glVertexAttribDivisor(index, divisor);
}

/* GL_ARB_vertex_type_2_10_10_10_rev */

REGAL_DECL void REGAL_CALL glVertexP2ui(GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexP2ui(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP2ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP2ui != glVertexP2ui);
  rCtx->dsp.CurrTable()->glVertexP2ui(type, coords);
}

REGAL_DECL void REGAL_CALL glVertexP2uiv(GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexP2uiv(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP2uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP2uiv != glVertexP2uiv);
  rCtx->dsp.CurrTable()->glVertexP2uiv(type, coords);
}

REGAL_DECL void REGAL_CALL glVertexP3ui(GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexP3ui(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP3ui != glVertexP3ui);
  rCtx->dsp.CurrTable()->glVertexP3ui(type, coords);
}

REGAL_DECL void REGAL_CALL glVertexP3uiv(GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexP3uiv(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP3uiv != glVertexP3uiv);
  rCtx->dsp.CurrTable()->glVertexP3uiv(type, coords);
}

REGAL_DECL void REGAL_CALL glVertexP4ui(GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexP4ui(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP4ui != glVertexP4ui);
  rCtx->dsp.CurrTable()->glVertexP4ui(type, coords);
}

REGAL_DECL void REGAL_CALL glVertexP4uiv(GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexP4uiv(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexP4uiv != glVertexP4uiv);
  rCtx->dsp.CurrTable()->glVertexP4uiv(type, coords);
}

REGAL_DECL void REGAL_CALL glTexCoordP1ui(GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordP1ui(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP1ui);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP1ui != glTexCoordP1ui);
  rCtx->dsp.CurrTable()->glTexCoordP1ui(type, coords);
}

REGAL_DECL void REGAL_CALL glTexCoordP1uiv(GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordP1uiv(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP1uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP1uiv != glTexCoordP1uiv);
  rCtx->dsp.CurrTable()->glTexCoordP1uiv(type, coords);
}

REGAL_DECL void REGAL_CALL glTexCoordP2ui(GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordP2ui(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP2ui);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP2ui != glTexCoordP2ui);
  rCtx->dsp.CurrTable()->glTexCoordP2ui(type, coords);
}

REGAL_DECL void REGAL_CALL glTexCoordP2uiv(GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordP2uiv(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP2uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP2uiv != glTexCoordP2uiv);
  rCtx->dsp.CurrTable()->glTexCoordP2uiv(type, coords);
}

REGAL_DECL void REGAL_CALL glTexCoordP3ui(GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordP3ui(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP3ui != glTexCoordP3ui);
  rCtx->dsp.CurrTable()->glTexCoordP3ui(type, coords);
}

REGAL_DECL void REGAL_CALL glTexCoordP3uiv(GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordP3uiv(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP3uiv != glTexCoordP3uiv);
  rCtx->dsp.CurrTable()->glTexCoordP3uiv(type, coords);
}

REGAL_DECL void REGAL_CALL glTexCoordP4ui(GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordP4ui(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP4ui != glTexCoordP4ui);
  rCtx->dsp.CurrTable()->glTexCoordP4ui(type, coords);
}

REGAL_DECL void REGAL_CALL glTexCoordP4uiv(GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordP4uiv(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordP4uiv != glTexCoordP4uiv);
  rCtx->dsp.CurrTable()->glTexCoordP4uiv(type, coords);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordP1ui(", toString(texture), ", ", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP1ui);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP1ui != glMultiTexCoordP1ui);
  rCtx->dsp.CurrTable()->glMultiTexCoordP1ui(texture, type, coords);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordP1uiv(", toString(texture), ", ", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP1uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP1uiv != glMultiTexCoordP1uiv);
  rCtx->dsp.CurrTable()->glMultiTexCoordP1uiv(texture, type, coords);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordP2ui(", toString(texture), ", ", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP2ui);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP2ui != glMultiTexCoordP2ui);
  rCtx->dsp.CurrTable()->glMultiTexCoordP2ui(texture, type, coords);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordP2uiv(", toString(texture), ", ", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP2uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP2uiv != glMultiTexCoordP2uiv);
  rCtx->dsp.CurrTable()->glMultiTexCoordP2uiv(texture, type, coords);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordP3ui(", toString(texture), ", ", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP3ui != glMultiTexCoordP3ui);
  rCtx->dsp.CurrTable()->glMultiTexCoordP3ui(texture, type, coords);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordP3uiv(", toString(texture), ", ", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP3uiv != glMultiTexCoordP3uiv);
  rCtx->dsp.CurrTable()->glMultiTexCoordP3uiv(texture, type, coords);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordP4ui(", toString(texture), ", ", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP4ui != glMultiTexCoordP4ui);
  rCtx->dsp.CurrTable()->glMultiTexCoordP4ui(texture, type, coords);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordP4uiv(", toString(texture), ", ", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordP4uiv != glMultiTexCoordP4uiv);
  rCtx->dsp.CurrTable()->glMultiTexCoordP4uiv(texture, type, coords);
}

REGAL_DECL void REGAL_CALL glNormalP3ui(GLenum type, GLuint coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalP3ui(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalP3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalP3ui != glNormalP3ui);
  rCtx->dsp.CurrTable()->glNormalP3ui(type, coords);
}

REGAL_DECL void REGAL_CALL glNormalP3uiv(GLenum type, const GLuint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalP3uiv(", toString(type), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalP3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalP3uiv != glNormalP3uiv);
  rCtx->dsp.CurrTable()->glNormalP3uiv(type, coords);
}

REGAL_DECL void REGAL_CALL glColorP3ui(GLenum type, GLuint color)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorP3ui(", toString(type), ", ", color, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorP3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glColorP3ui != glColorP3ui);
  rCtx->dsp.CurrTable()->glColorP3ui(type, color);
}

REGAL_DECL void REGAL_CALL glColorP3uiv(GLenum type, const GLuint *color)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorP3uiv(", toString(type), ", ", color, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorP3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glColorP3uiv != glColorP3uiv);
  rCtx->dsp.CurrTable()->glColorP3uiv(type, color);
}

REGAL_DECL void REGAL_CALL glColorP4ui(GLenum type, GLuint color)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorP4ui(", toString(type), ", ", color, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorP4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glColorP4ui != glColorP4ui);
  rCtx->dsp.CurrTable()->glColorP4ui(type, color);
}

REGAL_DECL void REGAL_CALL glColorP4uiv(GLenum type, const GLuint *color)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorP4uiv(", toString(type), ", ", color, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorP4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glColorP4uiv != glColorP4uiv);
  rCtx->dsp.CurrTable()->glColorP4uiv(type, color);
}

REGAL_DECL void REGAL_CALL glSecondaryColorP3ui(GLenum type, GLuint color)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColorP3ui(", toString(type), ", ", color, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorP3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorP3ui != glSecondaryColorP3ui);
  rCtx->dsp.CurrTable()->glSecondaryColorP3ui(type, color);
}

REGAL_DECL void REGAL_CALL glSecondaryColorP3uiv(GLenum type, const GLuint *color)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColorP3uiv(", toString(type), ", ", color, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorP3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorP3uiv != glSecondaryColorP3uiv);
  rCtx->dsp.CurrTable()->glSecondaryColorP3uiv(type, color);
}

REGAL_DECL void REGAL_CALL glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribP1ui(", index, ", ", toString(type), ", ", normalized, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP1ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP1ui != glVertexAttribP1ui);
  rCtx->dsp.CurrTable()->glVertexAttribP1ui(index, type, normalized, value);
}

REGAL_DECL void REGAL_CALL glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribP1uiv(", index, ", ", toString(type), ", ", normalized, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP1uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP1uiv != glVertexAttribP1uiv);
  rCtx->dsp.CurrTable()->glVertexAttribP1uiv(index, type, normalized, value);
}

REGAL_DECL void REGAL_CALL glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribP2ui(", index, ", ", toString(type), ", ", normalized, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP2ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP2ui != glVertexAttribP2ui);
  rCtx->dsp.CurrTable()->glVertexAttribP2ui(index, type, normalized, value);
}

REGAL_DECL void REGAL_CALL glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribP2uiv(", index, ", ", toString(type), ", ", normalized, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP2uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP2uiv != glVertexAttribP2uiv);
  rCtx->dsp.CurrTable()->glVertexAttribP2uiv(index, type, normalized, value);
}

REGAL_DECL void REGAL_CALL glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribP3ui(", index, ", ", toString(type), ", ", normalized, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP3ui != glVertexAttribP3ui);
  rCtx->dsp.CurrTable()->glVertexAttribP3ui(index, type, normalized, value);
}

REGAL_DECL void REGAL_CALL glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribP3uiv(", index, ", ", toString(type), ", ", normalized, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP3uiv != glVertexAttribP3uiv);
  rCtx->dsp.CurrTable()->glVertexAttribP3uiv(index, type, normalized, value);
}

REGAL_DECL void REGAL_CALL glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribP4ui(", index, ", ", toString(type), ", ", normalized, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP4ui != glVertexAttribP4ui);
  rCtx->dsp.CurrTable()->glVertexAttribP4ui(index, type, normalized, value);
}

REGAL_DECL void REGAL_CALL glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribP4uiv(", index, ", ", toString(type), ", ", normalized, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribP4uiv != glVertexAttribP4uiv);
  rCtx->dsp.CurrTable()->glVertexAttribP4uiv(index, type, normalized, value);
}

/* GL_VERSION_4_0 */

REGAL_DECL void REGAL_CALL glBlendEquationi(GLuint buf, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationi(", buf, ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationi);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationi != glBlendEquationi);
  rCtx->dsp.CurrTable()->glBlendEquationi(buf, mode);
}

REGAL_DECL void REGAL_CALL glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationSeparatei(", buf, ", ", toString(modeRGB), ", ", toString(modeAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparatei);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparatei != glBlendEquationSeparatei);
  rCtx->dsp.CurrTable()->glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
}

REGAL_DECL void REGAL_CALL glBlendFunci(GLuint buf, GLenum src, GLenum dst)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFunci(", buf, ", ", toString(src), ", ", toString(dst), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFunci);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFunci != glBlendFunci);
  rCtx->dsp.CurrTable()->glBlendFunci(buf, src, dst);
}

REGAL_DECL void REGAL_CALL glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFuncSeparatei(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparatei);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparatei != glBlendFuncSeparatei);
  rCtx->dsp.CurrTable()->glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

/* GL_ARB_draw_indirect */

REGAL_DECL void REGAL_CALL glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawArraysIndirect(", toString(mode), ", ", indirect, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysIndirect);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysIndirect != glDrawArraysIndirect);
  rCtx->dsp.CurrTable()->glDrawArraysIndirect(mode, indirect);
}

REGAL_DECL void REGAL_CALL glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementsIndirect(", toString(mode), ", ", toString(type), ", ", indirect, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsIndirect);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsIndirect != glDrawElementsIndirect);
  rCtx->dsp.CurrTable()->glDrawElementsIndirect(mode, type, indirect);
}

/* GL_ARB_gpu_shader_fp64 */

REGAL_DECL void REGAL_CALL glUniform1d(GLint location, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1d(", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1d);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1d != glUniform1d);
  rCtx->dsp.CurrTable()->glUniform1d(location, x);
}

REGAL_DECL void REGAL_CALL glUniform2d(GLint location, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2d(", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2d);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2d != glUniform2d);
  rCtx->dsp.CurrTable()->glUniform2d(location, x, y);
}

REGAL_DECL void REGAL_CALL glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3d(", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3d);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3d != glUniform3d);
  rCtx->dsp.CurrTable()->glUniform3d(location, x, y, z);
}

REGAL_DECL void REGAL_CALL glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4d(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4d);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4d != glUniform4d);
  rCtx->dsp.CurrTable()->glUniform4d(location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1dv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1dv != glUniform1dv);
  rCtx->dsp.CurrTable()->glUniform1dv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2dv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2dv != glUniform2dv);
  rCtx->dsp.CurrTable()->glUniform2dv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3dv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3dv != glUniform3dv);
  rCtx->dsp.CurrTable()->glUniform3dv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4dv(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4dv != glUniform4dv);
  rCtx->dsp.CurrTable()->glUniform4dv(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix2dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2dv != glUniformMatrix2dv);
  rCtx->dsp.CurrTable()->glUniformMatrix2dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix3dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3dv != glUniformMatrix3dv);
  rCtx->dsp.CurrTable()->glUniformMatrix3dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix4dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4dv != glUniformMatrix4dv);
  rCtx->dsp.CurrTable()->glUniformMatrix4dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix2x3dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2x3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2x3dv != glUniformMatrix2x3dv);
  rCtx->dsp.CurrTable()->glUniformMatrix2x3dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix2x4dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2x4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2x4dv != glUniformMatrix2x4dv);
  rCtx->dsp.CurrTable()->glUniformMatrix2x4dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix3x2dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3x2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3x2dv != glUniformMatrix3x2dv);
  rCtx->dsp.CurrTable()->glUniformMatrix3x2dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix3x4dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3x4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3x4dv != glUniformMatrix3x4dv);
  rCtx->dsp.CurrTable()->glUniformMatrix3x4dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix4x2dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4x2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4x2dv != glUniformMatrix4x2dv);
  rCtx->dsp.CurrTable()->glUniformMatrix4x2dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix4x3dv(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4x3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4x3dv != glUniformMatrix4x3dv);
  rCtx->dsp.CurrTable()->glUniformMatrix4x3dv(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glGetUniformdv(GLuint program, GLint location, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformdv(", program, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformdv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformdv != glGetUniformdv);
  rCtx->dsp.CurrTable()->glGetUniformdv(program, location, params);
}

/* GL_ARB_sample_shading */

REGAL_DECL void REGAL_CALL glMinSampleShading(GLclampf value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMinSampleShading(", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMinSampleShading);
  RegalAssert(rCtx->dsp.CurrTable()->glMinSampleShading != glMinSampleShading);
  rCtx->dsp.CurrTable()->glMinSampleShading(value);
}

/* GL_ARB_tessellation_shader */

REGAL_DECL void REGAL_CALL glPatchParameteri(GLenum pname, GLint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPatchParameteri(", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPatchParameteri);
  RegalAssert(rCtx->dsp.CurrTable()->glPatchParameteri != glPatchParameteri);
  rCtx->dsp.CurrTable()->glPatchParameteri(pname, value);
}

REGAL_DECL void REGAL_CALL glPatchParameterfv(GLenum pname, const GLfloat *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPatchParameterfv(", toString(pname), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPatchParameterfv);
  RegalAssert(rCtx->dsp.CurrTable()->glPatchParameterfv != glPatchParameterfv);
  rCtx->dsp.CurrTable()->glPatchParameterfv(pname, values);
}

/* GL_ARB_transform_feedback2 */

REGAL_DECL void REGAL_CALL glGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenTransformFeedbacks(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenTransformFeedbacks);
  RegalAssert(rCtx->dsp.CurrTable()->glGenTransformFeedbacks != glGenTransformFeedbacks);
  rCtx->dsp.CurrTable()->glGenTransformFeedbacks(n, ids);
}

REGAL_DECL void REGAL_CALL glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteTransformFeedbacks(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteTransformFeedbacks);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteTransformFeedbacks != glDeleteTransformFeedbacks);
  rCtx->dsp.CurrTable()->glDeleteTransformFeedbacks(n, ids);
}

REGAL_DECL void REGAL_CALL glBindTransformFeedback(GLenum target, GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindTransformFeedback(", toString(target), ", ", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindTransformFeedback);
  RegalAssert(rCtx->dsp.CurrTable()->glBindTransformFeedback != glBindTransformFeedback);
  rCtx->dsp.CurrTable()->glBindTransformFeedback(target, id);
}

REGAL_DECL GLboolean REGAL_CALL glIsTransformFeedback(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsTransformFeedback(", id, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsTransformFeedback);
  RegalAssert(rCtx->dsp.CurrTable()->glIsTransformFeedback != glIsTransformFeedback);
  return rCtx->dsp.CurrTable()->glIsTransformFeedback(id);
}

REGAL_DECL void REGAL_CALL glPauseTransformFeedback(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPauseTransformFeedback()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPauseTransformFeedback);
  RegalAssert(rCtx->dsp.CurrTable()->glPauseTransformFeedback != glPauseTransformFeedback);
  rCtx->dsp.CurrTable()->glPauseTransformFeedback();
}

REGAL_DECL void REGAL_CALL glResumeTransformFeedback(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glResumeTransformFeedback()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glResumeTransformFeedback);
  RegalAssert(rCtx->dsp.CurrTable()->glResumeTransformFeedback != glResumeTransformFeedback);
  rCtx->dsp.CurrTable()->glResumeTransformFeedback();
}

REGAL_DECL void REGAL_CALL glDrawTransformFeedback(GLenum mode, GLuint name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawTransformFeedback(", toString(mode), ", ", name, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedback);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedback != glDrawTransformFeedback);
  rCtx->dsp.CurrTable()->glDrawTransformFeedback(mode, name);
}

/* GL_ARB_transform_feedback3 */

REGAL_DECL void REGAL_CALL glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawTransformFeedbackStream(", toString(mode), ", ", id, ", ", stream, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedbackStream);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedbackStream != glDrawTransformFeedbackStream);
  rCtx->dsp.CurrTable()->glDrawTransformFeedbackStream(mode, id, stream);
}

REGAL_DECL void REGAL_CALL glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginQueryIndexed(", toString(target), ", ", index, ", ", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginQueryIndexed);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginQueryIndexed != glBeginQueryIndexed);
  rCtx->dsp.CurrTable()->glBeginQueryIndexed(target, index, id);
}

REGAL_DECL void REGAL_CALL glEndQueryIndexed(GLenum target, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndQueryIndexed(", toString(target), ", ", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndQueryIndexed);
  RegalAssert(rCtx->dsp.CurrTable()->glEndQueryIndexed != glEndQueryIndexed);
  rCtx->dsp.CurrTable()->glEndQueryIndexed(target, index);
}

REGAL_DECL void REGAL_CALL glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryIndexediv(", toString(target), ", ", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryIndexediv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryIndexediv != glGetQueryIndexediv);
  rCtx->dsp.CurrTable()->glGetQueryIndexediv(target, index, pname, params);
}

/* GL_ARB_shader_subroutine */

REGAL_DECL GLint REGAL_CALL glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSubroutineUniformLocation(", program, ", ", toString(shaderType), ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSubroutineUniformLocation);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSubroutineUniformLocation != glGetSubroutineUniformLocation);
  return rCtx->dsp.CurrTable()->glGetSubroutineUniformLocation(program, shaderType, name);
}

REGAL_DECL GLuint REGAL_CALL glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSubroutineIndex(", program, ", ", toString(shaderType), ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSubroutineIndex);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSubroutineIndex != glGetSubroutineIndex);
  return rCtx->dsp.CurrTable()->glGetSubroutineIndex(program, shaderType, name);
}

REGAL_DECL void REGAL_CALL glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveSubroutineUniformiv(", program, ", ", toString(shaderType), ", ", index, ", ", toString(pname), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveSubroutineUniformiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveSubroutineUniformiv != glGetActiveSubroutineUniformiv);
  rCtx->dsp.CurrTable()->glGetActiveSubroutineUniformiv(program, shaderType, index, pname, values);
}

REGAL_DECL void REGAL_CALL glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveSubroutineUniformName(", program, ", ", toString(shaderType), ", ", index, ", ", bufSize, ", ", length, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveSubroutineUniformName);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveSubroutineUniformName != glGetActiveSubroutineUniformName);
  rCtx->dsp.CurrTable()->glGetActiveSubroutineUniformName(program, shaderType, index, bufSize, length, name);
}

REGAL_DECL void REGAL_CALL glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveSubroutineName(", program, ", ", toString(shaderType), ", ", index, ", ", bufSize, ", ", length, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveSubroutineName);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveSubroutineName != glGetActiveSubroutineName);
  rCtx->dsp.CurrTable()->glGetActiveSubroutineName(program, shaderType, index, bufSize, length, name);
}

REGAL_DECL void REGAL_CALL glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformSubroutinesuiv(", toString(shaderType), ", ", count, ", ", indices, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformSubroutinesuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformSubroutinesuiv != glUniformSubroutinesuiv);
  rCtx->dsp.CurrTable()->glUniformSubroutinesuiv(shaderType, count, indices);
}

REGAL_DECL void REGAL_CALL glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformSubroutineuiv(", toString(shaderType), ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformSubroutineuiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformSubroutineuiv != glGetUniformSubroutineuiv);
  rCtx->dsp.CurrTable()->glGetUniformSubroutineuiv(shaderType, location, params);
}

REGAL_DECL void REGAL_CALL glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramStageiv(", program, ", ", toString(shaderType), ", ", toString(pname), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramStageiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramStageiv != glGetProgramStageiv);
  rCtx->dsp.CurrTable()->glGetProgramStageiv(program, shaderType, pname, values);
}

/* GL_ARB_vertex_attrib_64bit */

REGAL_DECL void REGAL_CALL glVertexAttribL1d(GLuint index, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL1d(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1d != glVertexAttribL1d);
  rCtx->dsp.CurrTable()->glVertexAttribL1d(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL2d(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2d != glVertexAttribL2d);
  rCtx->dsp.CurrTable()->glVertexAttribL2d(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL3d(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3d != glVertexAttribL3d);
  rCtx->dsp.CurrTable()->glVertexAttribL3d(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL4d(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4d);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4d != glVertexAttribL4d);
  rCtx->dsp.CurrTable()->glVertexAttribL4d(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttribL1dv(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL1dv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1dv != glVertexAttribL1dv);
  rCtx->dsp.CurrTable()->glVertexAttribL1dv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL2dv(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL2dv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2dv != glVertexAttribL2dv);
  rCtx->dsp.CurrTable()->glVertexAttribL2dv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL3dv(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL3dv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3dv != glVertexAttribL3dv);
  rCtx->dsp.CurrTable()->glVertexAttribL3dv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL4dv(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL4dv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4dv != glVertexAttribL4dv);
  rCtx->dsp.CurrTable()->glVertexAttribL4dv(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribLPointer(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribLPointer);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribLPointer != glVertexAttribLPointer);
  rCtx->dsp.CurrTable()->glVertexAttribLPointer(index, size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribLdv(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribLdv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribLdv != glGetVertexAttribLdv);
  rCtx->dsp.CurrTable()->glGetVertexAttribLdv(index, pname, params);
}

/* GL_ARB_ES2_compatibility */

REGAL_DECL void REGAL_CALL glReleaseShaderCompiler(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReleaseShaderCompiler()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReleaseShaderCompiler);
  RegalAssert(rCtx->dsp.CurrTable()->glReleaseShaderCompiler != glReleaseShaderCompiler);
  rCtx->dsp.CurrTable()->glReleaseShaderCompiler();
}

REGAL_DECL void REGAL_CALL glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glShaderBinary(", count, ", ", shaders, ", ", toString(binaryformat), ", ", binary, ", ", length, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glShaderBinary);
  RegalAssert(rCtx->dsp.CurrTable()->glShaderBinary != glShaderBinary);
  rCtx->dsp.CurrTable()->glShaderBinary(count, shaders, binaryformat, binary, length);
}

REGAL_DECL void REGAL_CALL glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetShaderPrecisionFormat(", toString(shadertype), ", ", toString(precisiontype), ", ", range, ", ", precision, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderPrecisionFormat);
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderPrecisionFormat != glGetShaderPrecisionFormat);
  rCtx->dsp.CurrTable()->glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}

REGAL_DECL void REGAL_CALL glDepthRangef(GLclampf n, GLclampf f)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthRangef(", n, ", ", f, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRangef);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRangef != glDepthRangef);
  rCtx->dsp.CurrTable()->glDepthRangef(n, f);
}

REGAL_DECL void REGAL_CALL glClearDepthf(GLclampf d)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearDepthf(", d, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearDepthf);
  RegalAssert(rCtx->dsp.CurrTable()->glClearDepthf != glClearDepthf);
  rCtx->dsp.CurrTable()->glClearDepthf(d);
}

/* GL_ARB_get_program_binary */

REGAL_DECL void REGAL_CALL glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramBinary(", program, ", ", bufSize, ", ", length, ", ", binaryFormat, ", ", binary, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramBinary);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramBinary != glGetProgramBinary);
  rCtx->dsp.CurrTable()->glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
}

REGAL_DECL void REGAL_CALL glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramBinary(", program, ", ", toString(binaryFormat), ", ", binary, ", ", length, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramBinary);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramBinary != glProgramBinary);
  rCtx->dsp.CurrTable()->glProgramBinary(program, binaryFormat, binary, length);
}

REGAL_DECL void REGAL_CALL glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameteri(", program, ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameteri);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameteri != glProgramParameteri);
  rCtx->dsp.CurrTable()->glProgramParameteri(program, pname, value);
}

/* GL_ARB_viewport_array */

REGAL_DECL void REGAL_CALL glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glViewportArrayv(", first, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glViewportArrayv);
  RegalAssert(rCtx->dsp.CurrTable()->glViewportArrayv != glViewportArrayv);
  rCtx->dsp.CurrTable()->glViewportArrayv(first, count, v);
}

REGAL_DECL void REGAL_CALL glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glViewportIndexedf(", index, ", ", x, ", ", y, ", ", w, ", ", h, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glViewportIndexedf);
  RegalAssert(rCtx->dsp.CurrTable()->glViewportIndexedf != glViewportIndexedf);
  rCtx->dsp.CurrTable()->glViewportIndexedf(index, x, y, w, h);
}

REGAL_DECL void REGAL_CALL glViewportIndexedfv(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glViewportIndexedfv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glViewportIndexedfv);
  RegalAssert(rCtx->dsp.CurrTable()->glViewportIndexedfv != glViewportIndexedfv);
  rCtx->dsp.CurrTable()->glViewportIndexedfv(index, v);
}

REGAL_DECL void REGAL_CALL glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glScissorArrayv(", first, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glScissorArrayv);
  RegalAssert(rCtx->dsp.CurrTable()->glScissorArrayv != glScissorArrayv);
  rCtx->dsp.CurrTable()->glScissorArrayv(first, count, v);
}

REGAL_DECL void REGAL_CALL glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glScissorIndexed(", index, ", ", left, ", ", bottom, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glScissorIndexed);
  RegalAssert(rCtx->dsp.CurrTable()->glScissorIndexed != glScissorIndexed);
  rCtx->dsp.CurrTable()->glScissorIndexed(index, left, bottom, width, height);
}

REGAL_DECL void REGAL_CALL glScissorIndexedv(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glScissorIndexedv(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glScissorIndexedv);
  RegalAssert(rCtx->dsp.CurrTable()->glScissorIndexedv != glScissorIndexedv);
  rCtx->dsp.CurrTable()->glScissorIndexedv(index, v);
}

REGAL_DECL void REGAL_CALL glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthRangeArrayv(", first, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRangeArrayv);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRangeArrayv != glDepthRangeArrayv);
  rCtx->dsp.CurrTable()->glDepthRangeArrayv(first, count, v);
}

REGAL_DECL void REGAL_CALL glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthRangeIndexed(", index, ", ", n, ", ", f, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRangeIndexed);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRangeIndexed != glDepthRangeIndexed);
  rCtx->dsp.CurrTable()->glDepthRangeIndexed(index, n, f);
}

REGAL_DECL void REGAL_CALL glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFloati_v(", toString(target), ", ", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFloati_v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFloati_v != glGetFloati_v);
  rCtx->dsp.CurrTable()->glGetFloati_v(target, index, v);
}

REGAL_DECL void REGAL_CALL glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetDoublei_v(", toString(target), ", ", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetDoublei_v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetDoublei_v != glGetDoublei_v);
  rCtx->dsp.CurrTable()->glGetDoublei_v(target, index, v);
}

/* GL_ARB_separate_shader_objects */

REGAL_DECL void REGAL_CALL glActiveShaderProgram(GLuint pipeline, GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glActiveShaderProgram(", pipeline, ", ", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glActiveShaderProgram);
  RegalAssert(rCtx->dsp.CurrTable()->glActiveShaderProgram != glActiveShaderProgram);
  rCtx->dsp.CurrTable()->glActiveShaderProgram(pipeline, program);
}

REGAL_DECL void REGAL_CALL glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUseProgramStages(", pipeline, ", ", stages, ", ", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUseProgramStages);
  RegalAssert(rCtx->dsp.CurrTable()->glUseProgramStages != glUseProgramStages);
  rCtx->dsp.CurrTable()->glUseProgramStages(pipeline, stages, program);
}

REGAL_DECL GLuint REGAL_CALL glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar **strings)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCreateShaderProgramv(", toString(type), ", ", count, ", ", strings, ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCreateShaderProgramv);
  RegalAssert(rCtx->dsp.CurrTable()->glCreateShaderProgramv != glCreateShaderProgramv);
  return rCtx->dsp.CurrTable()->glCreateShaderProgramv(type, count, strings);
}

REGAL_DECL void REGAL_CALL glBindProgramPipeline(GLuint pipeline)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindProgramPipeline(", pipeline, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindProgramPipeline);
  RegalAssert(rCtx->dsp.CurrTable()->glBindProgramPipeline != glBindProgramPipeline);
  rCtx->dsp.CurrTable()->glBindProgramPipeline(pipeline);
}

REGAL_DECL void REGAL_CALL glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteProgramPipelines(", n, ", ", pipelines, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteProgramPipelines);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteProgramPipelines != glDeleteProgramPipelines);
  rCtx->dsp.CurrTable()->glDeleteProgramPipelines(n, pipelines);
}

REGAL_DECL void REGAL_CALL glGenProgramPipelines(GLsizei n, GLuint *pipelines)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenProgramPipelines(", n, ", ", pipelines, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenProgramPipelines);
  RegalAssert(rCtx->dsp.CurrTable()->glGenProgramPipelines != glGenProgramPipelines);
  rCtx->dsp.CurrTable()->glGenProgramPipelines(n, pipelines);
}

REGAL_DECL GLboolean REGAL_CALL glIsProgramPipeline(GLuint pipeline)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsProgramPipeline(", pipeline, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsProgramPipeline);
  RegalAssert(rCtx->dsp.CurrTable()->glIsProgramPipeline != glIsProgramPipeline);
  return rCtx->dsp.CurrTable()->glIsProgramPipeline(pipeline);
}

REGAL_DECL void REGAL_CALL glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramPipelineiv(", pipeline, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramPipelineiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramPipelineiv != glGetProgramPipelineiv);
  rCtx->dsp.CurrTable()->glGetProgramPipelineiv(pipeline, pname, params);
}

REGAL_DECL void REGAL_CALL glValidateProgramPipeline(GLuint pipeline)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glValidateProgramPipeline(", pipeline, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glValidateProgramPipeline);
  RegalAssert(rCtx->dsp.CurrTable()->glValidateProgramPipeline != glValidateProgramPipeline);
  rCtx->dsp.CurrTable()->glValidateProgramPipeline(pipeline);
}

REGAL_DECL void REGAL_CALL glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramPipelineInfoLog(", pipeline, ", ", bufSize, ", ", length, ", ", boost::print::quote(infoLog,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramPipelineInfoLog);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramPipelineInfoLog != glGetProgramPipelineInfoLog);
  rCtx->dsp.CurrTable()->glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}

REGAL_DECL void REGAL_CALL glProgramUniform1f(GLuint program, GLint location, GLfloat x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1f(", program, ", ", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1f);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1f != glProgramUniform1f);
  rCtx->dsp.CurrTable()->glProgramUniform1f(program, location, x);
}

REGAL_DECL void REGAL_CALL glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2f(", program, ", ", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2f);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2f != glProgramUniform2f);
  rCtx->dsp.CurrTable()->glProgramUniform2f(program, location, x, y);
}

REGAL_DECL void REGAL_CALL glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3f(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3f);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3f != glProgramUniform3f);
  rCtx->dsp.CurrTable()->glProgramUniform3f(program, location, x, y, z);
}

REGAL_DECL void REGAL_CALL glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4f(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4f);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4f != glProgramUniform4f);
  rCtx->dsp.CurrTable()->glProgramUniform4f(program, location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramUniform1i(GLuint program, GLint location, GLint x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1i(", program, ", ", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1i);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1i != glProgramUniform1i);
  rCtx->dsp.CurrTable()->glProgramUniform1i(program, location, x);
}

REGAL_DECL void REGAL_CALL glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2i(", program, ", ", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2i);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2i != glProgramUniform2i);
  rCtx->dsp.CurrTable()->glProgramUniform2i(program, location, x, y);
}

REGAL_DECL void REGAL_CALL glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3i(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3i);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3i != glProgramUniform3i);
  rCtx->dsp.CurrTable()->glProgramUniform3i(program, location, x, y, z);
}

REGAL_DECL void REGAL_CALL glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4i(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4i);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4i != glProgramUniform4i);
  rCtx->dsp.CurrTable()->glProgramUniform4i(program, location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1fv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1fv != glProgramUniform1fv);
  rCtx->dsp.CurrTable()->glProgramUniform1fv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2fv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2fv != glProgramUniform2fv);
  rCtx->dsp.CurrTable()->glProgramUniform2fv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3fv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3fv != glProgramUniform3fv);
  rCtx->dsp.CurrTable()->glProgramUniform3fv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4fv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4fv != glProgramUniform4fv);
  rCtx->dsp.CurrTable()->glProgramUniform4fv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1iv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1iv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1iv != glProgramUniform1iv);
  rCtx->dsp.CurrTable()->glProgramUniform1iv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2iv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2iv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2iv != glProgramUniform2iv);
  rCtx->dsp.CurrTable()->glProgramUniform2iv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3iv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3iv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3iv != glProgramUniform3iv);
  rCtx->dsp.CurrTable()->glProgramUniform3iv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4iv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4iv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4iv != glProgramUniform4iv);
  rCtx->dsp.CurrTable()->glProgramUniform4iv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2fv != glProgramUniformMatrix2fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3fv != glProgramUniformMatrix3fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4fv != glProgramUniformMatrix4fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2x3fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3fv != glProgramUniformMatrix2x3fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3x2fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2fv != glProgramUniformMatrix3x2fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2x4fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4fv != glProgramUniformMatrix2x4fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4x2fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2fv != glProgramUniformMatrix4x2fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3x4fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4fv != glProgramUniformMatrix3x4fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4x3fv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3fv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3fv != glProgramUniformMatrix4x3fv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1ui(", program, ", ", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1ui);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1ui != glProgramUniform1ui);
  rCtx->dsp.CurrTable()->glProgramUniform1ui(program, location, v0);
}

REGAL_DECL void REGAL_CALL glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2ui(", program, ", ", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2ui);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2ui != glProgramUniform2ui);
  rCtx->dsp.CurrTable()->glProgramUniform2ui(program, location, x, y);
}

REGAL_DECL void REGAL_CALL glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3ui(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3ui);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3ui != glProgramUniform3ui);
  rCtx->dsp.CurrTable()->glProgramUniform3ui(program, location, x, y, z);
}

REGAL_DECL void REGAL_CALL glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4ui(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4ui);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4ui != glProgramUniform4ui);
  rCtx->dsp.CurrTable()->glProgramUniform4ui(program, location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1uiv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1uiv != glProgramUniform1uiv);
  rCtx->dsp.CurrTable()->glProgramUniform1uiv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2uiv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2uiv != glProgramUniform2uiv);
  rCtx->dsp.CurrTable()->glProgramUniform2uiv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3uiv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3uiv != glProgramUniform3uiv);
  rCtx->dsp.CurrTable()->glProgramUniform3uiv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4uiv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4uiv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4uiv != glProgramUniform4uiv);
  rCtx->dsp.CurrTable()->glProgramUniform4uiv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform1d(GLuint program, GLint location, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1d(", program, ", ", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1d);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1d != glProgramUniform1d);
  rCtx->dsp.CurrTable()->glProgramUniform1d(program, location, x);
}

REGAL_DECL void REGAL_CALL glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2d(", program, ", ", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2d);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2d != glProgramUniform2d);
  rCtx->dsp.CurrTable()->glProgramUniform2d(program, location, x, y);
}

REGAL_DECL void REGAL_CALL glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3d(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3d);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3d != glProgramUniform3d);
  rCtx->dsp.CurrTable()->glProgramUniform3d(program, location, x, y, z);
}

REGAL_DECL void REGAL_CALL glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4d(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4d);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4d != glProgramUniform4d);
  rCtx->dsp.CurrTable()->glProgramUniform4d(program, location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1dv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1dv != glProgramUniform1dv);
  rCtx->dsp.CurrTable()->glProgramUniform1dv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2dv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2dv != glProgramUniform2dv);
  rCtx->dsp.CurrTable()->glProgramUniform2dv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3dv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3dv != glProgramUniform3dv);
  rCtx->dsp.CurrTable()->glProgramUniform3dv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4dv(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4dv != glProgramUniform4dv);
  rCtx->dsp.CurrTable()->glProgramUniform4dv(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2dv != glProgramUniformMatrix2dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2dv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3dv != glProgramUniformMatrix3dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3dv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4dv != glProgramUniformMatrix4dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4dv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2x3dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3dv != glProgramUniformMatrix2x3dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2x4dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4dv != glProgramUniformMatrix2x4dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3x2dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2dv != glProgramUniformMatrix3x2dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3x4dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4dv != glProgramUniformMatrix3x4dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4x2dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2dv != glProgramUniformMatrix4x2dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4x3dv(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3dv);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3dv != glProgramUniformMatrix4x3dv);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}

/* GL_ARB_multitexture */

REGAL_DECL void REGAL_CALL glActiveTextureARB(GLenum texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glActiveTextureARB(", toString(texture), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glActiveTextureARB);
  RegalAssert(rCtx->dsp.CurrTable()->glActiveTextureARB != glActiveTextureARB);
  rCtx->dsp.CurrTable()->glActiveTextureARB(texture);
}

REGAL_DECL void REGAL_CALL glClientActiveTextureARB(GLenum texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClientActiveTextureARB(", toString(texture), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClientActiveTextureARB);
  RegalAssert(rCtx->dsp.CurrTable()->glClientActiveTextureARB != glClientActiveTextureARB);
  rCtx->dsp.CurrTable()->glClientActiveTextureARB(texture);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1dARB(GLenum target, GLdouble s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1dARB(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1dARB != glMultiTexCoord1dARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord1dARB(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1dvARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1dvARB != glMultiTexCoord1dvARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord1dvARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1fARB(GLenum target, GLfloat s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1fARB(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1fARB != glMultiTexCoord1fARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord1fARB(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1fvARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1fvARB != glMultiTexCoord1fvARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord1fvARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1iARB(GLenum target, GLint s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1iARB(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1iARB != glMultiTexCoord1iARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord1iARB(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1ivARB(GLenum target, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1ivARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1ivARB != glMultiTexCoord1ivARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord1ivARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1sARB(GLenum target, GLshort s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1sARB(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1sARB != glMultiTexCoord1sARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord1sARB(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1svARB(GLenum target, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1svARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1svARB != glMultiTexCoord1svARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord1svARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2dARB(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2dARB != glMultiTexCoord2dARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord2dARB(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2dvARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2dvARB != glMultiTexCoord2dvARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord2dvARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2fARB(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2fARB != glMultiTexCoord2fARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord2fARB(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2fvARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2fvARB != glMultiTexCoord2fvARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord2fvARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2iARB(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2iARB != glMultiTexCoord2iARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord2iARB(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2ivARB(GLenum target, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2ivARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2ivARB != glMultiTexCoord2ivARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord2ivARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2sARB(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2sARB != glMultiTexCoord2sARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord2sARB(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2svARB(GLenum target, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2svARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2svARB != glMultiTexCoord2svARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord2svARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3dARB(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3dARB != glMultiTexCoord3dARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord3dARB(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3dvARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3dvARB != glMultiTexCoord3dvARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord3dvARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3fARB(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3fARB != glMultiTexCoord3fARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord3fARB(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3fvARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3fvARB != glMultiTexCoord3fvARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord3fvARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3iARB(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3iARB != glMultiTexCoord3iARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord3iARB(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3ivARB(GLenum target, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3ivARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3ivARB != glMultiTexCoord3ivARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord3ivARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3sARB(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3sARB != glMultiTexCoord3sARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord3sARB(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3svARB(GLenum target, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3svARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3svARB != glMultiTexCoord3svARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord3svARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4dARB(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4dARB != glMultiTexCoord4dARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord4dARB(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4dvARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4dvARB != glMultiTexCoord4dvARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord4dvARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4fARB(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4fARB != glMultiTexCoord4fARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord4fARB(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4fvARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4fvARB != glMultiTexCoord4fvARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord4fvARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4iARB(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4iARB != glMultiTexCoord4iARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord4iARB(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4ivARB(GLenum target, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4ivARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4ivARB != glMultiTexCoord4ivARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord4ivARB(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4sARB(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4sARB != glMultiTexCoord4sARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord4sARB(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4svARB(GLenum target, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4svARB(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4svARB != glMultiTexCoord4svARB);
  rCtx->dsp.CurrTable()->glMultiTexCoord4svARB(target, v);
}

/* GL_ARB_transpose_matrix */

REGAL_DECL void REGAL_CALL glLoadTransposeMatrixfARB(const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadTransposeMatrixfARB(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadTransposeMatrixfARB);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadTransposeMatrixfARB != glLoadTransposeMatrixfARB);
  rCtx->dsp.CurrTable()->glLoadTransposeMatrixfARB(m);
}

REGAL_DECL void REGAL_CALL glLoadTransposeMatrixdARB(const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadTransposeMatrixdARB(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadTransposeMatrixdARB);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadTransposeMatrixdARB != glLoadTransposeMatrixdARB);
  rCtx->dsp.CurrTable()->glLoadTransposeMatrixdARB(m);
}

REGAL_DECL void REGAL_CALL glMultTransposeMatrixfARB(const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultTransposeMatrixfARB(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultTransposeMatrixfARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultTransposeMatrixfARB != glMultTransposeMatrixfARB);
  rCtx->dsp.CurrTable()->glMultTransposeMatrixfARB(m);
}

REGAL_DECL void REGAL_CALL glMultTransposeMatrixdARB(const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultTransposeMatrixdARB(", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultTransposeMatrixdARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMultTransposeMatrixdARB != glMultTransposeMatrixdARB);
  rCtx->dsp.CurrTable()->glMultTransposeMatrixdARB(m);
}

/* GL_ARB_multisample */

REGAL_DECL void REGAL_CALL glSampleCoverageARB(GLclampf value, GLboolean invert)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSampleCoverageARB(", value, ", ", invert, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSampleCoverageARB);
  RegalAssert(rCtx->dsp.CurrTable()->glSampleCoverageARB != glSampleCoverageARB);
  rCtx->dsp.CurrTable()->glSampleCoverageARB(value, invert);
}

/* GL_ARB_texture_compression */

REGAL_DECL void REGAL_CALL glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexImage3DARB(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage3DARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage3DARB != glCompressedTexImage3DARB);
  rCtx->dsp.CurrTable()->glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexImage2DARB(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage2DARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage2DARB != glCompressedTexImage2DARB);
  rCtx->dsp.CurrTable()->glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexImage1DARB(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage1DARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexImage1DARB != glCompressedTexImage1DARB);
  rCtx->dsp.CurrTable()->glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexSubImage3DARB(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage3DARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage3DARB != glCompressedTexSubImage3DARB);
  rCtx->dsp.CurrTable()->glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexSubImage2DARB(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage2DARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage2DARB != glCompressedTexSubImage2DARB);
  rCtx->dsp.CurrTable()->glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTexSubImage1DARB(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage1DARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTexSubImage1DARB != glCompressedTexSubImage1DARB);
  rCtx->dsp.CurrTable()->glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCompressedTexImageARB(", toString(target), ", ", lod, ", ", img, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCompressedTexImageARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCompressedTexImageARB != glGetCompressedTexImageARB);
  rCtx->dsp.CurrTable()->glGetCompressedTexImageARB(target, lod, img);
}

/* GL_ARB_point_parameters */

REGAL_DECL void REGAL_CALL glPointParameterfARB(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterfARB(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfARB);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfARB != glPointParameterfARB);
  rCtx->dsp.CurrTable()->glPointParameterfARB(pname, param);
}

REGAL_DECL void REGAL_CALL glPointParameterfvARB(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterfvARB(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfvARB != glPointParameterfvARB);
  rCtx->dsp.CurrTable()->glPointParameterfvARB(pname, params);
}

/* GL_ARB_vertex_blend */

REGAL_DECL void REGAL_CALL glWeightbvARB(GLint size, GLbyte *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightbvARB(", size, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightbvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightbvARB != glWeightbvARB);
  rCtx->dsp.CurrTable()->glWeightbvARB(size, weights);
}

REGAL_DECL void REGAL_CALL glWeightsvARB(GLint size, GLshort *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightsvARB(", size, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightsvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightsvARB != glWeightsvARB);
  rCtx->dsp.CurrTable()->glWeightsvARB(size, weights);
}

REGAL_DECL void REGAL_CALL glWeightivARB(GLint size, GLint *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightivARB(", size, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightivARB != glWeightivARB);
  rCtx->dsp.CurrTable()->glWeightivARB(size, weights);
}

REGAL_DECL void REGAL_CALL glWeightfvARB(GLint size, GLfloat *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightfvARB(", size, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightfvARB != glWeightfvARB);
  rCtx->dsp.CurrTable()->glWeightfvARB(size, weights);
}

REGAL_DECL void REGAL_CALL glWeightdvARB(GLint size, GLdouble *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightdvARB(", size, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightdvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightdvARB != glWeightdvARB);
  rCtx->dsp.CurrTable()->glWeightdvARB(size, weights);
}

REGAL_DECL void REGAL_CALL glWeightubvARB(GLint size, GLubyte *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightubvARB(", size, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightubvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightubvARB != glWeightubvARB);
  rCtx->dsp.CurrTable()->glWeightubvARB(size, weights);
}

REGAL_DECL void REGAL_CALL glWeightusvARB(GLint size, GLushort *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightusvARB(", size, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightusvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightusvARB != glWeightusvARB);
  rCtx->dsp.CurrTable()->glWeightusvARB(size, weights);
}

REGAL_DECL void REGAL_CALL glWeightuivARB(GLint size, GLuint *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightuivARB(", size, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightuivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightuivARB != glWeightuivARB);
  rCtx->dsp.CurrTable()->glWeightuivARB(size, weights);
}

REGAL_DECL void REGAL_CALL glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightPointerARB(", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightPointerARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightPointerARB != glWeightPointerARB);
  rCtx->dsp.CurrTable()->glWeightPointerARB(size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glVertexBlendARB(GLint count)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexBlendARB(", count, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexBlendARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexBlendARB != glVertexBlendARB);
  rCtx->dsp.CurrTable()->glVertexBlendARB(count);
}

/* GL_ARB_matrix_palette */

REGAL_DECL void REGAL_CALL glCurrentPaletteMatrixARB(GLint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCurrentPaletteMatrixARB(", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCurrentPaletteMatrixARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCurrentPaletteMatrixARB != glCurrentPaletteMatrixARB);
  rCtx->dsp.CurrTable()->glCurrentPaletteMatrixARB(index);
}

REGAL_DECL void REGAL_CALL glMatrixIndexubvARB(GLint size, GLubyte *indices)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixIndexubvARB(", size, ", ", indices, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixIndexubvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixIndexubvARB != glMatrixIndexubvARB);
  rCtx->dsp.CurrTable()->glMatrixIndexubvARB(size, indices);
}

REGAL_DECL void REGAL_CALL glMatrixIndexusvARB(GLint size, GLushort *indices)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixIndexusvARB(", size, ", ", indices, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixIndexusvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixIndexusvARB != glMatrixIndexusvARB);
  rCtx->dsp.CurrTable()->glMatrixIndexusvARB(size, indices);
}

REGAL_DECL void REGAL_CALL glMatrixIndexuivARB(GLint size, GLuint *indices)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixIndexuivARB(", size, ", ", indices, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixIndexuivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixIndexuivARB != glMatrixIndexuivARB);
  rCtx->dsp.CurrTable()->glMatrixIndexuivARB(size, indices);
}

REGAL_DECL void REGAL_CALL glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixIndexPointerARB(", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixIndexPointerARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixIndexPointerARB != glMatrixIndexPointerARB);
  rCtx->dsp.CurrTable()->glMatrixIndexPointerARB(size, type, stride, pointer);
}

/* GL_ARB_window_pos */

REGAL_DECL void REGAL_CALL glWindowPos2dARB(GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2dARB(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dARB != glWindowPos2dARB);
  rCtx->dsp.CurrTable()->glWindowPos2dARB(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2dvARB(const GLdouble *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2dvARB(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dvARB != glWindowPos2dvARB);
  rCtx->dsp.CurrTable()->glWindowPos2dvARB(p);
}

REGAL_DECL void REGAL_CALL glWindowPos2fARB(GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2fARB(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fARB != glWindowPos2fARB);
  rCtx->dsp.CurrTable()->glWindowPos2fARB(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2fvARB(const GLfloat *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2fvARB(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fvARB != glWindowPos2fvARB);
  rCtx->dsp.CurrTable()->glWindowPos2fvARB(p);
}

REGAL_DECL void REGAL_CALL glWindowPos2iARB(GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2iARB(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2iARB != glWindowPos2iARB);
  rCtx->dsp.CurrTable()->glWindowPos2iARB(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2ivARB(const GLint *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2ivARB(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2ivARB != glWindowPos2ivARB);
  rCtx->dsp.CurrTable()->glWindowPos2ivARB(p);
}

REGAL_DECL void REGAL_CALL glWindowPos2sARB(GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2sARB(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2sARB != glWindowPos2sARB);
  rCtx->dsp.CurrTable()->glWindowPos2sARB(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2svARB(const GLshort *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2svARB(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2svARB != glWindowPos2svARB);
  rCtx->dsp.CurrTable()->glWindowPos2svARB(p);
}

REGAL_DECL void REGAL_CALL glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3dARB(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dARB != glWindowPos3dARB);
  rCtx->dsp.CurrTable()->glWindowPos3dARB(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3dvARB(const GLdouble *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3dvARB(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dvARB != glWindowPos3dvARB);
  rCtx->dsp.CurrTable()->glWindowPos3dvARB(p);
}

REGAL_DECL void REGAL_CALL glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3fARB(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fARB != glWindowPos3fARB);
  rCtx->dsp.CurrTable()->glWindowPos3fARB(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3fvARB(const GLfloat *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3fvARB(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fvARB != glWindowPos3fvARB);
  rCtx->dsp.CurrTable()->glWindowPos3fvARB(p);
}

REGAL_DECL void REGAL_CALL glWindowPos3iARB(GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3iARB(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3iARB != glWindowPos3iARB);
  rCtx->dsp.CurrTable()->glWindowPos3iARB(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3ivARB(const GLint *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3ivARB(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3ivARB != glWindowPos3ivARB);
  rCtx->dsp.CurrTable()->glWindowPos3ivARB(p);
}

REGAL_DECL void REGAL_CALL glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3sARB(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3sARB != glWindowPos3sARB);
  rCtx->dsp.CurrTable()->glWindowPos3sARB(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3svARB(const GLshort *p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3svARB(", p, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3svARB != glWindowPos3svARB);
  rCtx->dsp.CurrTable()->glWindowPos3svARB(p);
}

/* GL_ARB_vertex_program */

REGAL_DECL void REGAL_CALL glVertexAttrib1dARB(GLuint index, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1dARB(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dARB != glVertexAttrib1dARB);
  rCtx->dsp.CurrTable()->glVertexAttrib1dARB(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1dvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dvARB != glVertexAttrib1dvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib1dvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1fARB(GLuint index, GLfloat x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1fARB(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fARB != glVertexAttrib1fARB);
  rCtx->dsp.CurrTable()->glVertexAttrib1fARB(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1fvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fvARB != glVertexAttrib1fvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib1fvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1sARB(GLuint index, GLshort x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1sARB(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1sARB != glVertexAttrib1sARB);
  rCtx->dsp.CurrTable()->glVertexAttrib1sARB(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1svARB(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1svARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1svARB != glVertexAttrib1svARB);
  rCtx->dsp.CurrTable()->glVertexAttrib1svARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2dARB(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dARB != glVertexAttrib2dARB);
  rCtx->dsp.CurrTable()->glVertexAttrib2dARB(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2dvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dvARB != glVertexAttrib2dvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib2dvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2fARB(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fARB != glVertexAttrib2fARB);
  rCtx->dsp.CurrTable()->glVertexAttrib2fARB(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2fvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fvARB != glVertexAttrib2fvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib2fvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2sARB(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2sARB != glVertexAttrib2sARB);
  rCtx->dsp.CurrTable()->glVertexAttrib2sARB(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2svARB(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2svARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2svARB != glVertexAttrib2svARB);
  rCtx->dsp.CurrTable()->glVertexAttrib2svARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3dARB(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dARB != glVertexAttrib3dARB);
  rCtx->dsp.CurrTable()->glVertexAttrib3dARB(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3dvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dvARB != glVertexAttrib3dvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib3dvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3fARB(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fARB != glVertexAttrib3fARB);
  rCtx->dsp.CurrTable()->glVertexAttrib3fARB(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3fvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fvARB != glVertexAttrib3fvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib3fvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3sARB(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3sARB != glVertexAttrib3sARB);
  rCtx->dsp.CurrTable()->glVertexAttrib3sARB(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3svARB(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3svARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3svARB != glVertexAttrib3svARB);
  rCtx->dsp.CurrTable()->glVertexAttrib3svARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4NbvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NbvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NbvARB != glVertexAttrib4NbvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4NbvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4NivARB(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4NivARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NivARB != glVertexAttrib4NivARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4NivARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4NsvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NsvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NsvARB != glVertexAttrib4NsvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4NsvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4NubARB(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NubARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NubARB != glVertexAttrib4NubARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4NubARB(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4NubvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NubvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NubvARB != glVertexAttrib4NubvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4NubvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4NuivARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NuivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NuivARB != glVertexAttrib4NuivARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4NuivARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4NusvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NusvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4NusvARB != glVertexAttrib4NusvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4NusvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4bvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4bvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4bvARB != glVertexAttrib4bvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4bvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4dARB(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dARB != glVertexAttrib4dARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4dARB(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4dvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dvARB != glVertexAttrib4dvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4dvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4fARB(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fARB != glVertexAttrib4fARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4fARB(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4fvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fvARB != glVertexAttrib4fvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4fvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4ivARB(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4ivARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ivARB != glVertexAttrib4ivARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4ivARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4sARB(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4sARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4sARB != glVertexAttrib4sARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4sARB(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4svARB(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4svARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4svARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4svARB != glVertexAttrib4svARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4svARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4ubvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ubvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ubvARB != glVertexAttrib4ubvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4ubvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4uivARB(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4uivARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4uivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4uivARB != glVertexAttrib4uivARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4uivARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4usvARB(GLuint index, const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4usvARB(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4usvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4usvARB != glVertexAttrib4usvARB);
  rCtx->dsp.CurrTable()->glVertexAttrib4usvARB(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribPointerARB(", index, ", ", size, ", ", toString(type), ", ", normalized, ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribPointerARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribPointerARB != glVertexAttribPointerARB);
  rCtx->dsp.CurrTable()->glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
}

REGAL_DECL void REGAL_CALL glEnableVertexAttribArrayARB(GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnableVertexAttribArrayARB(", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnableVertexAttribArrayARB);
  RegalAssert(rCtx->dsp.CurrTable()->glEnableVertexAttribArrayARB != glEnableVertexAttribArrayARB);
  rCtx->dsp.CurrTable()->glEnableVertexAttribArrayARB(index);
}

REGAL_DECL void REGAL_CALL glDisableVertexAttribArrayARB(GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisableVertexAttribArrayARB(", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisableVertexAttribArrayARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDisableVertexAttribArrayARB != glDisableVertexAttribArrayARB);
  rCtx->dsp.CurrTable()->glDisableVertexAttribArrayARB(index);
}

REGAL_DECL void REGAL_CALL glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramStringARB(", toString(target), ", ", toString(format), ", ", len, ", ", string, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramStringARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramStringARB != glProgramStringARB);
  rCtx->dsp.CurrTable()->glProgramStringARB(target, format, len, string);
}

REGAL_DECL void REGAL_CALL glBindProgramARB(GLenum target, GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindProgramARB(", toString(target), ", ", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindProgramARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBindProgramARB != glBindProgramARB);
  rCtx->dsp.CurrTable()->glBindProgramARB(target, program);
}

REGAL_DECL void REGAL_CALL glDeleteProgramsARB(GLsizei n, const GLuint *programs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteProgramsARB(", n, ", ", programs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteProgramsARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteProgramsARB != glDeleteProgramsARB);
  rCtx->dsp.CurrTable()->glDeleteProgramsARB(n, programs);
}

REGAL_DECL void REGAL_CALL glGenProgramsARB(GLsizei n, GLuint *programs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenProgramsARB(", n, ", ", programs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenProgramsARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGenProgramsARB != glGenProgramsARB);
  rCtx->dsp.CurrTable()->glGenProgramsARB(n, programs);
}

REGAL_DECL void REGAL_CALL glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameter4dARB(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameter4dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameter4dARB != glProgramEnvParameter4dARB);
  rCtx->dsp.CurrTable()->glProgramEnvParameter4dARB(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameter4dvARB(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameter4dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameter4dvARB != glProgramEnvParameter4dvARB);
  rCtx->dsp.CurrTable()->glProgramEnvParameter4dvARB(target, index, params);
}

REGAL_DECL void REGAL_CALL glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameter4fARB(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameter4fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameter4fARB != glProgramEnvParameter4fARB);
  rCtx->dsp.CurrTable()->glProgramEnvParameter4fARB(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameter4fvARB(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameter4fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameter4fvARB != glProgramEnvParameter4fvARB);
  rCtx->dsp.CurrTable()->glProgramEnvParameter4fvARB(target, index, params);
}

REGAL_DECL void REGAL_CALL glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameter4dARB(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameter4dARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameter4dARB != glProgramLocalParameter4dARB);
  rCtx->dsp.CurrTable()->glProgramLocalParameter4dARB(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameter4dvARB(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameter4dvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameter4dvARB != glProgramLocalParameter4dvARB);
  rCtx->dsp.CurrTable()->glProgramLocalParameter4dvARB(target, index, params);
}

REGAL_DECL void REGAL_CALL glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameter4fARB(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameter4fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameter4fARB != glProgramLocalParameter4fARB);
  rCtx->dsp.CurrTable()->glProgramLocalParameter4fARB(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameter4fvARB(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameter4fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameter4fvARB != glProgramLocalParameter4fvARB);
  rCtx->dsp.CurrTable()->glProgramLocalParameter4fvARB(target, index, params);
}

REGAL_DECL void REGAL_CALL glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramEnvParameterdvARB(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramEnvParameterdvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramEnvParameterdvARB != glGetProgramEnvParameterdvARB);
  rCtx->dsp.CurrTable()->glGetProgramEnvParameterdvARB(target, index, params);
}

REGAL_DECL void REGAL_CALL glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramEnvParameterfvARB(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramEnvParameterfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramEnvParameterfvARB != glGetProgramEnvParameterfvARB);
  rCtx->dsp.CurrTable()->glGetProgramEnvParameterfvARB(target, index, params);
}

REGAL_DECL void REGAL_CALL glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramLocalParameterdvARB(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramLocalParameterdvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramLocalParameterdvARB != glGetProgramLocalParameterdvARB);
  rCtx->dsp.CurrTable()->glGetProgramLocalParameterdvARB(target, index, params);
}

REGAL_DECL void REGAL_CALL glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramLocalParameterfvARB(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramLocalParameterfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramLocalParameterfvARB != glGetProgramLocalParameterfvARB);
  rCtx->dsp.CurrTable()->glGetProgramLocalParameterfvARB(target, index, params);
}

REGAL_DECL void REGAL_CALL glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramivARB(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramivARB != glGetProgramivARB);
  rCtx->dsp.CurrTable()->glGetProgramivARB(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramStringARB(", toString(target), ", ", toString(pname), ", ", string, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramStringARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramStringARB != glGetProgramStringARB);
  rCtx->dsp.CurrTable()->glGetProgramStringARB(target, pname, string);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribdvARB(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribdvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribdvARB != glGetVertexAttribdvARB);
  rCtx->dsp.CurrTable()->glGetVertexAttribdvARB(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribfvARB(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribfvARB != glGetVertexAttribfvARB);
  rCtx->dsp.CurrTable()->glGetVertexAttribfvARB(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribivARB(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribivARB != glGetVertexAttribivARB);
  rCtx->dsp.CurrTable()->glGetVertexAttribivARB(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribPointervARB(", index, ", ", toString(pname), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribPointervARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribPointervARB != glGetVertexAttribPointervARB);
  rCtx->dsp.CurrTable()->glGetVertexAttribPointervARB(index, pname, pointer);
}

REGAL_DECL GLboolean REGAL_CALL glIsProgramARB(GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsProgramARB(", program, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsProgramARB);
  RegalAssert(rCtx->dsp.CurrTable()->glIsProgramARB != glIsProgramARB);
  return rCtx->dsp.CurrTable()->glIsProgramARB(program);
}

/* GL_ARB_vertex_buffer_object */

REGAL_DECL void REGAL_CALL glBindBufferARB(GLenum target, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferARB(", toString(target), ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferARB != glBindBufferARB);
  rCtx->dsp.CurrTable()->glBindBufferARB(target, buffer);
}

REGAL_DECL void REGAL_CALL glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteBuffersARB(", n, ", ", buffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteBuffersARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteBuffersARB != glDeleteBuffersARB);
  rCtx->dsp.CurrTable()->glDeleteBuffersARB(n, buffers);
}

REGAL_DECL void REGAL_CALL glGenBuffersARB(GLsizei n, GLuint *buffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenBuffersARB(", n, ", ", buffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenBuffersARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGenBuffersARB != glGenBuffersARB);
  rCtx->dsp.CurrTable()->glGenBuffersARB(n, buffers);
}

REGAL_DECL GLboolean REGAL_CALL glIsBufferARB(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsBufferARB(", buffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsBufferARB);
  RegalAssert(rCtx->dsp.CurrTable()->glIsBufferARB != glIsBufferARB);
  return rCtx->dsp.CurrTable()->glIsBufferARB(buffer);
}

REGAL_DECL void REGAL_CALL glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBufferDataARB(", toString(target), ", ", size, ", ", data, ", ", toString(usage), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBufferDataARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBufferDataARB != glBufferDataARB);
  rCtx->dsp.CurrTable()->glBufferDataARB(target, size, data, usage);
}

REGAL_DECL void REGAL_CALL glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBufferSubDataARB(", toString(target), ", ", offset, ", ", size, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBufferSubDataARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBufferSubDataARB != glBufferSubDataARB);
  rCtx->dsp.CurrTable()->glBufferSubDataARB(target, offset, size, data);
}

REGAL_DECL void REGAL_CALL glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBufferSubDataARB(", toString(target), ", ", offset, ", ", size, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferSubDataARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferSubDataARB != glGetBufferSubDataARB);
  rCtx->dsp.CurrTable()->glGetBufferSubDataARB(target, offset, size, data);
}

REGAL_DECL GLvoid *REGAL_CALL glMapBufferARB(GLenum target, GLenum access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapBufferARB(", toString(target), ", ", toString(access), ")");
  if (!rCtx) return NULL;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapBufferARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMapBufferARB != glMapBufferARB);
  return rCtx->dsp.CurrTable()->glMapBufferARB(target, access);
}

REGAL_DECL GLboolean REGAL_CALL glUnmapBufferARB(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUnmapBufferARB(", toString(target), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUnmapBufferARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUnmapBufferARB != glUnmapBufferARB);
  return rCtx->dsp.CurrTable()->glUnmapBufferARB(target);
}

REGAL_DECL void REGAL_CALL glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBufferParameterivARB(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferParameterivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferParameterivARB != glGetBufferParameterivARB);
  rCtx->dsp.CurrTable()->glGetBufferParameterivARB(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBufferPointervARB(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferPointervARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferPointervARB != glGetBufferPointervARB);
  rCtx->dsp.CurrTable()->glGetBufferPointervARB(target, pname, params);
}

/* GL_ARB_occlusion_query */

REGAL_DECL void REGAL_CALL glGenQueriesARB(GLsizei n, GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenQueriesARB(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenQueriesARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGenQueriesARB != glGenQueriesARB);
  rCtx->dsp.CurrTable()->glGenQueriesARB(n, ids);
}

REGAL_DECL void REGAL_CALL glDeleteQueriesARB(GLsizei n, const GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteQueriesARB(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteQueriesARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteQueriesARB != glDeleteQueriesARB);
  rCtx->dsp.CurrTable()->glDeleteQueriesARB(n, ids);
}

REGAL_DECL GLboolean REGAL_CALL glIsQueryARB(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsQueryARB(", id, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsQueryARB);
  RegalAssert(rCtx->dsp.CurrTable()->glIsQueryARB != glIsQueryARB);
  return rCtx->dsp.CurrTable()->glIsQueryARB(id);
}

REGAL_DECL void REGAL_CALL glBeginQueryARB(GLenum target, GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginQueryARB(", toString(target), ", ", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginQueryARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginQueryARB != glBeginQueryARB);
  rCtx->dsp.CurrTable()->glBeginQueryARB(target, id);
}

REGAL_DECL void REGAL_CALL glEndQueryARB(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndQueryARB(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndQueryARB);
  RegalAssert(rCtx->dsp.CurrTable()->glEndQueryARB != glEndQueryARB);
  rCtx->dsp.CurrTable()->glEndQueryARB(target);
}

REGAL_DECL void REGAL_CALL glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryivARB(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryivARB != glGetQueryivARB);
  rCtx->dsp.CurrTable()->glGetQueryivARB(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryObjectivARB(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectivARB != glGetQueryObjectivARB);
  rCtx->dsp.CurrTable()->glGetQueryObjectivARB(id, pname, params);
}

REGAL_DECL void REGAL_CALL glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryObjectuivARB(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectuivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectuivARB != glGetQueryObjectuivARB);
  rCtx->dsp.CurrTable()->glGetQueryObjectuivARB(id, pname, params);
}

/* GL_ARB_shader_objects */

REGAL_DECL void REGAL_CALL glDeleteObjectARB(GLhandleARB obj)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteObjectARB(", obj, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteObjectARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteObjectARB != glDeleteObjectARB);
  rCtx->dsp.CurrTable()->glDeleteObjectARB(obj);
}

REGAL_DECL GLhandleARB REGAL_CALL glGetHandleARB(GLenum pname)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetHandleARB(", toString(pname), ")");
  if (!rCtx) return (GLhandleARB )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetHandleARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetHandleARB != glGetHandleARB);
  return rCtx->dsp.CurrTable()->glGetHandleARB(pname);
}

REGAL_DECL void REGAL_CALL glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDetachObjectARB(", containerObj, ", ", attachedObj, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDetachObjectARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDetachObjectARB != glDetachObjectARB);
  rCtx->dsp.CurrTable()->glDetachObjectARB(containerObj, attachedObj);
}

REGAL_DECL GLhandleARB REGAL_CALL glCreateShaderObjectARB(GLenum shaderType)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCreateShaderObjectARB(", toString(shaderType), ")");
  if (!rCtx) return (GLhandleARB )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCreateShaderObjectARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCreateShaderObjectARB != glCreateShaderObjectARB);
  return rCtx->dsp.CurrTable()->glCreateShaderObjectARB(shaderType);
}

REGAL_DECL void REGAL_CALL glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glShaderSourceARB(", shaderObj, ", ", count, ", ", string, ", ", length, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glShaderSourceARB);
  RegalAssert(rCtx->dsp.CurrTable()->glShaderSourceARB != glShaderSourceARB);
  rCtx->dsp.CurrTable()->glShaderSourceARB(shaderObj, count, string, length);
}

REGAL_DECL void REGAL_CALL glCompileShaderARB(GLhandleARB shaderObj)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompileShaderARB(", shaderObj, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompileShaderARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCompileShaderARB != glCompileShaderARB);
  rCtx->dsp.CurrTable()->glCompileShaderARB(shaderObj);
}

REGAL_DECL GLhandleARB REGAL_CALL glCreateProgramObjectARB(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCreateProgramObjectARB()");
  if (!rCtx) return (GLhandleARB )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCreateProgramObjectARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCreateProgramObjectARB != glCreateProgramObjectARB);
  return rCtx->dsp.CurrTable()->glCreateProgramObjectARB();
}

REGAL_DECL void REGAL_CALL glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAttachObjectARB(", containerObj, ", ", obj, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAttachObjectARB);
  RegalAssert(rCtx->dsp.CurrTable()->glAttachObjectARB != glAttachObjectARB);
  rCtx->dsp.CurrTable()->glAttachObjectARB(containerObj, obj);
}

REGAL_DECL void REGAL_CALL glLinkProgramARB(GLhandleARB programObj)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLinkProgramARB(", programObj, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLinkProgramARB);
  RegalAssert(rCtx->dsp.CurrTable()->glLinkProgramARB != glLinkProgramARB);
  rCtx->dsp.CurrTable()->glLinkProgramARB(programObj);
}

REGAL_DECL void REGAL_CALL glUseProgramObjectARB(GLhandleARB programObj)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUseProgramObjectARB(", programObj, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUseProgramObjectARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUseProgramObjectARB != glUseProgramObjectARB);
  rCtx->dsp.CurrTable()->glUseProgramObjectARB(programObj);
}

REGAL_DECL void REGAL_CALL glValidateProgramARB(GLhandleARB programObj)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glValidateProgramARB(", programObj, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glValidateProgramARB);
  RegalAssert(rCtx->dsp.CurrTable()->glValidateProgramARB != glValidateProgramARB);
  rCtx->dsp.CurrTable()->glValidateProgramARB(programObj);
}

REGAL_DECL void REGAL_CALL glUniform1fARB(GLint location, GLfloat v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1fARB(", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1fARB != glUniform1fARB);
  rCtx->dsp.CurrTable()->glUniform1fARB(location, v0);
}

REGAL_DECL void REGAL_CALL glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2fARB(", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2fARB != glUniform2fARB);
  rCtx->dsp.CurrTable()->glUniform2fARB(location, v0, v1);
}

REGAL_DECL void REGAL_CALL glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3fARB(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3fARB != glUniform3fARB);
  rCtx->dsp.CurrTable()->glUniform3fARB(location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4fARB(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4fARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4fARB != glUniform4fARB);
  rCtx->dsp.CurrTable()->glUniform4fARB(location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glUniform1iARB(GLint location, GLint v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1iARB(", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1iARB != glUniform1iARB);
  rCtx->dsp.CurrTable()->glUniform1iARB(location, v0);
}

REGAL_DECL void REGAL_CALL glUniform2iARB(GLint location, GLint v0, GLint v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2iARB(", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2iARB != glUniform2iARB);
  rCtx->dsp.CurrTable()->glUniform2iARB(location, v0, v1);
}

REGAL_DECL void REGAL_CALL glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3iARB(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3iARB != glUniform3iARB);
  rCtx->dsp.CurrTable()->glUniform3iARB(location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4iARB(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4iARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4iARB != glUniform4iARB);
  rCtx->dsp.CurrTable()->glUniform4iARB(location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1fvARB(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1fvARB != glUniform1fvARB);
  rCtx->dsp.CurrTable()->glUniform1fvARB(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2fvARB(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2fvARB != glUniform2fvARB);
  rCtx->dsp.CurrTable()->glUniform2fvARB(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3fvARB(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3fvARB != glUniform3fvARB);
  rCtx->dsp.CurrTable()->glUniform3fvARB(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4fvARB(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4fvARB != glUniform4fvARB);
  rCtx->dsp.CurrTable()->glUniform4fvARB(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1ivARB(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1ivARB != glUniform1ivARB);
  rCtx->dsp.CurrTable()->glUniform1ivARB(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2ivARB(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2ivARB != glUniform2ivARB);
  rCtx->dsp.CurrTable()->glUniform2ivARB(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3ivARB(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3ivARB != glUniform3ivARB);
  rCtx->dsp.CurrTable()->glUniform3ivARB(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4ivARB(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4ivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4ivARB != glUniform4ivARB);
  rCtx->dsp.CurrTable()->glUniform4ivARB(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix2fvARB(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix2fvARB != glUniformMatrix2fvARB);
  rCtx->dsp.CurrTable()->glUniformMatrix2fvARB(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix3fvARB(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix3fvARB != glUniformMatrix3fvARB);
  rCtx->dsp.CurrTable()->glUniformMatrix3fvARB(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformMatrix4fvARB(", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4fvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformMatrix4fvARB != glUniformMatrix4fvARB);
  rCtx->dsp.CurrTable()->glUniformMatrix4fvARB(location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetObjectParameterfvARB(", obj, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectParameterfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectParameterfvARB != glGetObjectParameterfvARB);
  rCtx->dsp.CurrTable()->glGetObjectParameterfvARB(obj, pname, params);
}

REGAL_DECL void REGAL_CALL glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetObjectParameterivARB(", obj, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectParameterivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectParameterivARB != glGetObjectParameterivARB);
  rCtx->dsp.CurrTable()->glGetObjectParameterivARB(obj, pname, params);
}

REGAL_DECL void REGAL_CALL glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetInfoLogARB(", obj, ", ", maxLength, ", ", length, ", ", infoLog, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetInfoLogARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetInfoLogARB != glGetInfoLogARB);
  rCtx->dsp.CurrTable()->glGetInfoLogARB(obj, maxLength, length, infoLog);
}

REGAL_DECL void REGAL_CALL glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetAttachedObjectsARB(", containerObj, ", ", maxCount, ", ", count, ", ", obj, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetAttachedObjectsARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetAttachedObjectsARB != glGetAttachedObjectsARB);
  rCtx->dsp.CurrTable()->glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
}

REGAL_DECL GLint REGAL_CALL glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformLocationARB(", programObj, ", ", name, ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformLocationARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformLocationARB != glGetUniformLocationARB);
  return rCtx->dsp.CurrTable()->glGetUniformLocationARB(programObj, name);
}

REGAL_DECL void REGAL_CALL glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveUniformARB(", programObj, ", ", index, ", ", maxLength, ", ", length, ", ", size, ", ", type, ", ", name, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformARB != glGetActiveUniformARB);
  rCtx->dsp.CurrTable()->glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
}

REGAL_DECL void REGAL_CALL glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformfvARB(", programObj, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformfvARB != glGetUniformfvARB);
  rCtx->dsp.CurrTable()->glGetUniformfvARB(programObj, location, params);
}

REGAL_DECL void REGAL_CALL glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformivARB(", programObj, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformivARB != glGetUniformivARB);
  rCtx->dsp.CurrTable()->glGetUniformivARB(programObj, location, params);
}

REGAL_DECL void REGAL_CALL glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetShaderSourceARB(", obj, ", ", maxLength, ", ", length, ", ", source, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderSourceARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetShaderSourceARB != glGetShaderSourceARB);
  rCtx->dsp.CurrTable()->glGetShaderSourceARB(obj, maxLength, length, source);
}

/* GL_ARB_vertex_shader */

REGAL_DECL void REGAL_CALL glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindAttribLocationARB(", programObj, ", ", index, ", ", name, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindAttribLocationARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBindAttribLocationARB != glBindAttribLocationARB);
  rCtx->dsp.CurrTable()->glBindAttribLocationARB(programObj, index, name);
}

REGAL_DECL void REGAL_CALL glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveAttribARB(", programObj, ", ", index, ", ", maxLength, ", ", length, ", ", size, ", ", type, ", ", name, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveAttribARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveAttribARB != glGetActiveAttribARB);
  rCtx->dsp.CurrTable()->glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
}

REGAL_DECL GLint REGAL_CALL glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetAttribLocationARB(", programObj, ", ", name, ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetAttribLocationARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetAttribLocationARB != glGetAttribLocationARB);
  return rCtx->dsp.CurrTable()->glGetAttribLocationARB(programObj, name);
}

/* GL_ARB_draw_buffers */

REGAL_DECL void REGAL_CALL glDrawBuffersARB(GLsizei n, const GLenum *bufs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawBuffersARB(", n, ", ", bufs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBuffersARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBuffersARB != glDrawBuffersARB);
  rCtx->dsp.CurrTable()->glDrawBuffersARB(n, bufs);
}

/* GL_ARB_color_buffer_float */

REGAL_DECL void REGAL_CALL glClampColorARB(GLenum target, GLenum clamp)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClampColorARB(", toString(target), ", ", toString(clamp), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClampColorARB);
  RegalAssert(rCtx->dsp.CurrTable()->glClampColorARB != glClampColorARB);
  rCtx->dsp.CurrTable()->glClampColorARB(target, clamp);
}

/* GL_ARB_draw_instanced */

REGAL_DECL void REGAL_CALL glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawArraysInstancedARB(", toString(mode), ", ", start, ", ", count, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysInstancedARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysInstancedARB != glDrawArraysInstancedARB);
  rCtx->dsp.CurrTable()->glDrawArraysInstancedARB(mode, start, count, primcount);
}

REGAL_DECL void REGAL_CALL glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementsInstancedARB(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedARB != glDrawElementsInstancedARB);
  rCtx->dsp.CurrTable()->glDrawElementsInstancedARB(mode, count, type, indices, primcount);
}

/* GL_ARB_framebuffer_object */

REGAL_DECL GLboolean REGAL_CALL glIsRenderbuffer(GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsRenderbuffer(", renderbuffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsRenderbuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glIsRenderbuffer != glIsRenderbuffer);
  return rCtx->dsp.CurrTable()->glIsRenderbuffer(renderbuffer);
}

REGAL_DECL void REGAL_CALL glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindRenderbuffer(", toString(target), ", ", renderbuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindRenderbuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glBindRenderbuffer != glBindRenderbuffer);
  rCtx->dsp.CurrTable()->glBindRenderbuffer(target, renderbuffer);
}

REGAL_DECL void REGAL_CALL glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteRenderbuffers(", n, ", ", renderbuffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteRenderbuffers);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteRenderbuffers != glDeleteRenderbuffers);
  rCtx->dsp.CurrTable()->glDeleteRenderbuffers(n, renderbuffers);
}

REGAL_DECL void REGAL_CALL glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenRenderbuffers(", n, ", ", renderbuffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenRenderbuffers);
  RegalAssert(rCtx->dsp.CurrTable()->glGenRenderbuffers != glGenRenderbuffers);
  rCtx->dsp.CurrTable()->glGenRenderbuffers(n, renderbuffers);
}

REGAL_DECL void REGAL_CALL glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRenderbufferStorage(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorage);
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorage != glRenderbufferStorage);
  rCtx->dsp.CurrTable()->glRenderbufferStorage(target, internalformat, width, height);
}

REGAL_DECL void REGAL_CALL glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetRenderbufferParameteriv(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetRenderbufferParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetRenderbufferParameteriv != glGetRenderbufferParameteriv);
  rCtx->dsp.CurrTable()->glGetRenderbufferParameteriv(target, pname, params);
}

REGAL_DECL GLboolean REGAL_CALL glIsFramebuffer(GLuint framebuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsFramebuffer(", framebuffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsFramebuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glIsFramebuffer != glIsFramebuffer);
  return rCtx->dsp.CurrTable()->glIsFramebuffer(framebuffer);
}

REGAL_DECL void REGAL_CALL glBindFramebuffer(GLenum target, GLuint framebuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindFramebuffer(", toString(target), ", ", framebuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindFramebuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glBindFramebuffer != glBindFramebuffer);
  rCtx->dsp.CurrTable()->glBindFramebuffer(target, framebuffer);
}

REGAL_DECL void REGAL_CALL glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteFramebuffers(", n, ", ", framebuffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFramebuffers);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFramebuffers != glDeleteFramebuffers);
  rCtx->dsp.CurrTable()->glDeleteFramebuffers(n, framebuffers);
}

REGAL_DECL void REGAL_CALL glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenFramebuffers(", n, ", ", framebuffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenFramebuffers);
  RegalAssert(rCtx->dsp.CurrTable()->glGenFramebuffers != glGenFramebuffers);
  rCtx->dsp.CurrTable()->glGenFramebuffers(n, framebuffers);
}

REGAL_DECL GLenum REGAL_CALL glCheckFramebufferStatus(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCheckFramebufferStatus(", toString(target), ")");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCheckFramebufferStatus);
  RegalAssert(rCtx->dsp.CurrTable()->glCheckFramebufferStatus != glCheckFramebufferStatus);
  return rCtx->dsp.CurrTable()->glCheckFramebufferStatus(target);
}

REGAL_DECL void REGAL_CALL glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTexture1D(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture1D);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture1D != glFramebufferTexture1D);
  rCtx->dsp.CurrTable()->glFramebufferTexture1D(target, attachment, textarget, texture, level);
}

REGAL_DECL void REGAL_CALL glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTexture2D(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture2D);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture2D != glFramebufferTexture2D);
  rCtx->dsp.CurrTable()->glFramebufferTexture2D(target, attachment, textarget, texture, level);
}

REGAL_DECL void REGAL_CALL glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTexture3D(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", layer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture3D);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture3D != glFramebufferTexture3D);
  rCtx->dsp.CurrTable()->glFramebufferTexture3D(target, attachment, textarget, texture, level, layer);
}

REGAL_DECL void REGAL_CALL glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferRenderbuffer(", toString(target), ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferRenderbuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferRenderbuffer != glFramebufferRenderbuffer);
  rCtx->dsp.CurrTable()->glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}

REGAL_DECL void REGAL_CALL glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFramebufferAttachmentParameteriv(", toString(target), ", ", toString(attachment), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFramebufferAttachmentParameteriv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFramebufferAttachmentParameteriv != glGetFramebufferAttachmentParameteriv);
  rCtx->dsp.CurrTable()->glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}

REGAL_DECL void REGAL_CALL glGenerateMipmap(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenerateMipmap(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenerateMipmap);
  RegalAssert(rCtx->dsp.CurrTable()->glGenerateMipmap != glGenerateMipmap);
  rCtx->dsp.CurrTable()->glGenerateMipmap(target);
}

REGAL_DECL void REGAL_CALL glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlitFramebuffer(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlitFramebuffer);
  RegalAssert(rCtx->dsp.CurrTable()->glBlitFramebuffer != glBlitFramebuffer);
  rCtx->dsp.CurrTable()->glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

REGAL_DECL void REGAL_CALL glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRenderbufferStorageMultisample(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorageMultisample);
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorageMultisample != glRenderbufferStorageMultisample);
  rCtx->dsp.CurrTable()->glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}

REGAL_DECL void REGAL_CALL glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTextureLayer(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureLayer);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureLayer != glFramebufferTextureLayer);
  rCtx->dsp.CurrTable()->glFramebufferTextureLayer(target, attachment, texture, level, layer);
}

/* GL_ARB_geometry_shader4 */

REGAL_DECL void REGAL_CALL glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameteriARB(", program, ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameteriARB);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameteriARB != glProgramParameteriARB);
  rCtx->dsp.CurrTable()->glProgramParameteriARB(program, pname, value);
}

REGAL_DECL void REGAL_CALL glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTextureARB(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureARB);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureARB != glFramebufferTextureARB);
  rCtx->dsp.CurrTable()->glFramebufferTextureARB(target, attachment, texture, level);
}

REGAL_DECL void REGAL_CALL glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTextureLayerARB(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureLayerARB);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureLayerARB != glFramebufferTextureLayerARB);
  rCtx->dsp.CurrTable()->glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
}

REGAL_DECL void REGAL_CALL glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTextureFaceARB(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureFaceARB);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureFaceARB != glFramebufferTextureFaceARB);
  rCtx->dsp.CurrTable()->glFramebufferTextureFaceARB(target, attachment, texture, level, face);
}

/* GL_ARB_instanced_arrays */

REGAL_DECL void REGAL_CALL glVertexAttribDivisorARB(GLuint index, GLuint divisor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribDivisorARB(", index, ", ", divisor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribDivisorARB);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribDivisorARB != glVertexAttribDivisorARB);
  rCtx->dsp.CurrTable()->glVertexAttribDivisorARB(index, divisor);
}

/* GL_ARB_map_buffer_range */

REGAL_DECL GLvoid *REGAL_CALL glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapBufferRange(", toString(target), ", ", offset, ", ", length, ", ", access, ")");
  if (!rCtx) return NULL;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapBufferRange);
  RegalAssert(rCtx->dsp.CurrTable()->glMapBufferRange != glMapBufferRange);
  return rCtx->dsp.CurrTable()->glMapBufferRange(target, offset, length, access);
}

REGAL_DECL void REGAL_CALL glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFlushMappedBufferRange(", toString(target), ", ", offset, ", ", length, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFlushMappedBufferRange);
  RegalAssert(rCtx->dsp.CurrTable()->glFlushMappedBufferRange != glFlushMappedBufferRange);
  rCtx->dsp.CurrTable()->glFlushMappedBufferRange(target, offset, length);
}

/* GL_ARB_texture_buffer_object */

REGAL_DECL void REGAL_CALL glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexBufferARB(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexBufferARB);
  RegalAssert(rCtx->dsp.CurrTable()->glTexBufferARB != glTexBufferARB);
  rCtx->dsp.CurrTable()->glTexBufferARB(target, internalformat, buffer);
}

/* GL_ARB_vertex_array_object */

REGAL_DECL void REGAL_CALL glBindVertexArray(GLuint array)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindVertexArray(", array, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindVertexArray);
  RegalAssert(rCtx->dsp.CurrTable()->glBindVertexArray != glBindVertexArray);
  rCtx->dsp.CurrTable()->glBindVertexArray(array);
}

REGAL_DECL void REGAL_CALL glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteVertexArrays(", n, ", ", arrays, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteVertexArrays);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteVertexArrays != glDeleteVertexArrays);
  rCtx->dsp.CurrTable()->glDeleteVertexArrays(n, arrays);
}

REGAL_DECL void REGAL_CALL glGenVertexArrays(GLsizei n, GLuint *arrays)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenVertexArrays(", n, ", ", arrays, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenVertexArrays);
  RegalAssert(rCtx->dsp.CurrTable()->glGenVertexArrays != glGenVertexArrays);
  rCtx->dsp.CurrTable()->glGenVertexArrays(n, arrays);
}

REGAL_DECL GLboolean REGAL_CALL glIsVertexArray(GLuint array)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsVertexArray(", array, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsVertexArray);
  RegalAssert(rCtx->dsp.CurrTable()->glIsVertexArray != glIsVertexArray);
  return rCtx->dsp.CurrTable()->glIsVertexArray(array);
}

/* GL_ARB_uniform_buffer_object */

REGAL_DECL void REGAL_CALL glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformIndices(", program, ", ", uniformCount, ", ", uniformNames, ", ", uniformIndices, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformIndices);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformIndices != glGetUniformIndices);
  rCtx->dsp.CurrTable()->glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}

REGAL_DECL void REGAL_CALL glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveUniformsiv(", program, ", ", uniformCount, ", ", uniformIndices, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformsiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformsiv != glGetActiveUniformsiv);
  rCtx->dsp.CurrTable()->glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}

REGAL_DECL void REGAL_CALL glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveUniformName(", program, ", ", uniformIndex, ", ", bufSize, ", ", length, ", ", boost::print::quote(uniformName,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformName);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformName != glGetActiveUniformName);
  rCtx->dsp.CurrTable()->glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}

REGAL_DECL GLuint REGAL_CALL glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformBlockIndex(", program, ", ", boost::print::quote(uniformBlockName,'"'), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformBlockIndex);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformBlockIndex != glGetUniformBlockIndex);
  return rCtx->dsp.CurrTable()->glGetUniformBlockIndex(program, uniformBlockName);
}

REGAL_DECL void REGAL_CALL glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveUniformBlockiv(", program, ", ", uniformBlockIndex, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformBlockiv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformBlockiv != glGetActiveUniformBlockiv);
  rCtx->dsp.CurrTable()->glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}

REGAL_DECL void REGAL_CALL glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveUniformBlockName(", program, ", ", uniformBlockIndex, ", ", bufSize, ", ", length, ", ", boost::print::quote(uniformBlockName,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformBlockName);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveUniformBlockName != glGetActiveUniformBlockName);
  rCtx->dsp.CurrTable()->glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

REGAL_DECL void REGAL_CALL glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformBlockBinding(", program, ", ", uniformBlockIndex, ", ", uniformBlockBinding, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformBlockBinding);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformBlockBinding != glUniformBlockBinding);
  rCtx->dsp.CurrTable()->glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}

/* GL_ARB_copy_buffer */

REGAL_DECL void REGAL_CALL glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyBufferSubData(", toString(readtarget), ", ", toString(writetarget), ", ", readoffset, ", ", writeoffset, ", ", size, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyBufferSubData);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyBufferSubData != glCopyBufferSubData);
  rCtx->dsp.CurrTable()->glCopyBufferSubData(readtarget, writetarget, readoffset, writeoffset, size);
}

/* GL_ARB_draw_elements_base_vertex */

REGAL_DECL void REGAL_CALL glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementsBaseVertex(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", basevertex, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsBaseVertex);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsBaseVertex != glDrawElementsBaseVertex);
  rCtx->dsp.CurrTable()->glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
}

REGAL_DECL void REGAL_CALL glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawRangeElementsBaseVertex(", toString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", indices, ", ", basevertex, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElementsBaseVertex);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElementsBaseVertex != glDrawRangeElementsBaseVertex);
  rCtx->dsp.CurrTable()->glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}

REGAL_DECL void REGAL_CALL glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementsInstancedBaseVertex(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ", ", basevertex, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseVertex);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseVertex != glDrawElementsInstancedBaseVertex);
  rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex);
}

REGAL_DECL void REGAL_CALL glMultiDrawElementsBaseVertex(GLenum mode, GLsizei *count, GLenum type, GLvoid **indices, GLsizei primcount, GLint *basevertex)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawElementsBaseVertex(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ", ", basevertex, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElementsBaseVertex);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElementsBaseVertex != glMultiDrawElementsBaseVertex);
  rCtx->dsp.CurrTable()->glMultiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);
}

/* GL_ARB_provoking_vertex */

REGAL_DECL void REGAL_CALL glProvokingVertex(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProvokingVertex(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProvokingVertex);
  RegalAssert(rCtx->dsp.CurrTable()->glProvokingVertex != glProvokingVertex);
  rCtx->dsp.CurrTable()->glProvokingVertex(mode);
}

/* GL_ARB_sync */

REGAL_DECL GLsync REGAL_CALL glFenceSync(GLenum condition, GLbitfield flags)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFenceSync(", toString(condition), ", ", flags, ")");
  if (!rCtx) return (GLsync )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFenceSync);
  RegalAssert(rCtx->dsp.CurrTable()->glFenceSync != glFenceSync);
  return rCtx->dsp.CurrTable()->glFenceSync(condition, flags);
}

REGAL_DECL GLboolean REGAL_CALL glIsSync(GLsync sync)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsSync(", sync, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsSync);
  RegalAssert(rCtx->dsp.CurrTable()->glIsSync != glIsSync);
  return rCtx->dsp.CurrTable()->glIsSync(sync);
}

REGAL_DECL void REGAL_CALL glDeleteSync(GLsync sync)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteSync(", sync, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteSync);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteSync != glDeleteSync);
  rCtx->dsp.CurrTable()->glDeleteSync(sync);
}

REGAL_DECL GLenum REGAL_CALL glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClientWaitSync(", sync, ", ", flags, ", ", timeout, ")");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClientWaitSync);
  RegalAssert(rCtx->dsp.CurrTable()->glClientWaitSync != glClientWaitSync);
  return rCtx->dsp.CurrTable()->glClientWaitSync(sync, flags, timeout);
}

REGAL_DECL void REGAL_CALL glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWaitSync(", sync, ", ", flags, ", ", timeout, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWaitSync);
  RegalAssert(rCtx->dsp.CurrTable()->glWaitSync != glWaitSync);
  rCtx->dsp.CurrTable()->glWaitSync(sync, flags, timeout);
}

REGAL_DECL void REGAL_CALL glGetInteger64v(GLenum pname, GLint64 *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetInteger64v(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetInteger64v);
  RegalAssert(rCtx->dsp.CurrTable()->glGetInteger64v != glGetInteger64v);
  rCtx->dsp.CurrTable()->glGetInteger64v(pname, params);
}

REGAL_DECL void REGAL_CALL glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSynciv(", sync, ", ", toString(pname), ", ", bufSize, ", ", length, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSynciv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSynciv != glGetSynciv);
  rCtx->dsp.CurrTable()->glGetSynciv(sync, pname, bufSize, length, values);
}

/* GL_ARB_texture_multisample */

REGAL_DECL void REGAL_CALL glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage2DMultisample(", toString(target), ", ", samples, ", ", internalformat, ", ", width, ", ", height, ", ", fixedsamplelocations, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage2DMultisample);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage2DMultisample != glTexImage2DMultisample);
  rCtx->dsp.CurrTable()->glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

REGAL_DECL void REGAL_CALL glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage3DMultisample(", toString(target), ", ", samples, ", ", internalformat, ", ", width, ", ", height, ", ", depth, ", ", fixedsamplelocations, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage3DMultisample);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage3DMultisample != glTexImage3DMultisample);
  rCtx->dsp.CurrTable()->glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

REGAL_DECL void REGAL_CALL glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultisamplefv(", toString(pname), ", ", index, ", ", val, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultisamplefv);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultisamplefv != glGetMultisamplefv);
  rCtx->dsp.CurrTable()->glGetMultisamplefv(pname, index, val);
}

REGAL_DECL void REGAL_CALL glSampleMaski(GLuint index, GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSampleMaski(", index, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMaski);
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMaski != glSampleMaski);
  rCtx->dsp.CurrTable()->glSampleMaski(index, mask);
}

/* GL_ARB_draw_buffers_blend */

REGAL_DECL void REGAL_CALL glBlendEquationiARB(GLuint buf, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationiARB(", buf, ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationiARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationiARB != glBlendEquationiARB);
  rCtx->dsp.CurrTable()->glBlendEquationiARB(buf, mode);
}

REGAL_DECL void REGAL_CALL glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationSeparateiARB(", buf, ", ", toString(modeRGB), ", ", toString(modeAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparateiARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparateiARB != glBlendEquationSeparateiARB);
  rCtx->dsp.CurrTable()->glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
}

REGAL_DECL void REGAL_CALL glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFunciARB(", buf, ", ", toString(src), ", ", toString(dst), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFunciARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFunciARB != glBlendFunciARB);
  rCtx->dsp.CurrTable()->glBlendFunciARB(buf, src, dst);
}

REGAL_DECL void REGAL_CALL glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFuncSeparateiARB(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparateiARB);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparateiARB != glBlendFuncSeparateiARB);
  rCtx->dsp.CurrTable()->glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

/* GL_ARB_sample_shading */

REGAL_DECL void REGAL_CALL glMinSampleShadingARB(GLclampf value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMinSampleShadingARB(", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMinSampleShadingARB);
  RegalAssert(rCtx->dsp.CurrTable()->glMinSampleShadingARB != glMinSampleShadingARB);
  rCtx->dsp.CurrTable()->glMinSampleShadingARB(value);
}

/* GL_ARB_shading_language_include */

REGAL_DECL void REGAL_CALL glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedStringARB(", toString(type), ", ", namelen, ", ", boost::print::quote(name,'"'), ", ", stringlen, ", ", boost::print::quote(string,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedStringARB);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedStringARB != glNamedStringARB);
  rCtx->dsp.CurrTable()->glNamedStringARB(type, namelen, name, stringlen, string);
}

REGAL_DECL void REGAL_CALL glDeleteNamedStringARB(GLint namelen, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteNamedStringARB(", namelen, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteNamedStringARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteNamedStringARB != glDeleteNamedStringARB);
  rCtx->dsp.CurrTable()->glDeleteNamedStringARB(namelen, name);
}

REGAL_DECL void REGAL_CALL glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompileShaderIncludeARB(", shader, ", ", count, ", ", path, ", ", length, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompileShaderIncludeARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCompileShaderIncludeARB != glCompileShaderIncludeARB);
  rCtx->dsp.CurrTable()->glCompileShaderIncludeARB(shader, count, path, length);
}

REGAL_DECL GLboolean REGAL_CALL glIsNamedStringARB(GLint namelen, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsNamedStringARB(", namelen, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsNamedStringARB);
  RegalAssert(rCtx->dsp.CurrTable()->glIsNamedStringARB != glIsNamedStringARB);
  return rCtx->dsp.CurrTable()->glIsNamedStringARB(namelen, name);
}

REGAL_DECL void REGAL_CALL glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedStringARB(", namelen, ", ", boost::print::quote(name,'"'), ", ", bufSize, ", ", stringlen, ", ", boost::print::quote(string,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedStringARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedStringARB != glGetNamedStringARB);
  rCtx->dsp.CurrTable()->glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
}

REGAL_DECL void REGAL_CALL glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedStringivARB(", namelen, ", ", boost::print::quote(name,'"'), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedStringivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedStringivARB != glGetNamedStringivARB);
  rCtx->dsp.CurrTable()->glGetNamedStringivARB(namelen, name, pname, params);
}

/* GL_ARB_debug_output */

REGAL_DECL void REGAL_CALL glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDebugMessageControlARB(", toString(source), ", ", toString(type), ", ", toString(severity), ", ", count, ", ", ids, ", ", enabled, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageControlARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageControlARB != glDebugMessageControlARB);
  rCtx->dsp.CurrTable()->glDebugMessageControlARB(source, type, severity, count, ids, enabled);
}

REGAL_DECL void REGAL_CALL glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDebugMessageInsertARB(", toString(source), ", ", toString(type), ", ", id, ", ", toString(severity), ", ", length, ", ", boost::print::quote(buf,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageInsertARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageInsertARB != glDebugMessageInsertARB);
  rCtx->dsp.CurrTable()->glDebugMessageInsertARB(source, type, id, severity, length, buf);
}

REGAL_DECL void REGAL_CALL glDebugMessageCallbackARB(GLDEBUGPROCARB callback, GLvoid *userParam)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDebugMessageCallbackARB(", userParam, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageCallbackARB);
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageCallbackARB != glDebugMessageCallbackARB);
  rCtx->dsp.CurrTable()->glDebugMessageCallbackARB(callback, userParam);
}

REGAL_DECL GLuint REGAL_CALL glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetDebugMessageLogARB(", count, ", ", bufsize, ", ", sources, ", ", types, ", ", ids, ", ", severities, ", ", lengths, ", ", boost::print::quote(messageLog,'"'), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetDebugMessageLogARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetDebugMessageLogARB != glGetDebugMessageLogARB);
  return rCtx->dsp.CurrTable()->glGetDebugMessageLogARB(count, bufsize, sources, types, ids, severities, lengths, messageLog);
}

/* GL_ARB_robustness */

REGAL_DECL GLenum REGAL_CALL glGetGraphicsResetStatusARB(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetGraphicsResetStatusARB()");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetGraphicsResetStatusARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetGraphicsResetStatusARB != glGetGraphicsResetStatusARB);
  return rCtx->dsp.CurrTable()->glGetGraphicsResetStatusARB();
}

REGAL_DECL void REGAL_CALL glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnMapdvARB(", toString(target), ", ", toString(query), ", ", bufSize, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnMapdvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnMapdvARB != glGetnMapdvARB);
  rCtx->dsp.CurrTable()->glGetnMapdvARB(target, query, bufSize, v);
}

REGAL_DECL void REGAL_CALL glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnMapfvARB(", toString(target), ", ", toString(query), ", ", bufSize, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnMapfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnMapfvARB != glGetnMapfvARB);
  rCtx->dsp.CurrTable()->glGetnMapfvARB(target, query, bufSize, v);
}

REGAL_DECL void REGAL_CALL glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnMapivARB(", toString(target), ", ", toString(query), ", ", bufSize, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnMapivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnMapivARB != glGetnMapivARB);
  rCtx->dsp.CurrTable()->glGetnMapivARB(target, query, bufSize, v);
}

REGAL_DECL void REGAL_CALL glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnPixelMapfvARB(", toString(map), ", ", bufSize, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnPixelMapfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnPixelMapfvARB != glGetnPixelMapfvARB);
  rCtx->dsp.CurrTable()->glGetnPixelMapfvARB(map, bufSize, values);
}

REGAL_DECL void REGAL_CALL glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnPixelMapuivARB(", toString(map), ", ", bufSize, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnPixelMapuivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnPixelMapuivARB != glGetnPixelMapuivARB);
  rCtx->dsp.CurrTable()->glGetnPixelMapuivARB(map, bufSize, values);
}

REGAL_DECL void REGAL_CALL glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnPixelMapusvARB(", toString(map), ", ", bufSize, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnPixelMapusvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnPixelMapusvARB != glGetnPixelMapusvARB);
  rCtx->dsp.CurrTable()->glGetnPixelMapusvARB(map, bufSize, values);
}

REGAL_DECL void REGAL_CALL glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnPolygonStippleARB(", bufSize, ", ", pattern, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnPolygonStippleARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnPolygonStippleARB != glGetnPolygonStippleARB);
  rCtx->dsp.CurrTable()->glGetnPolygonStippleARB(bufSize, pattern);
}

REGAL_DECL void REGAL_CALL glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnTexImageARB(", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", img, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnTexImageARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnTexImageARB != glGetnTexImageARB);
  rCtx->dsp.CurrTable()->glGetnTexImageARB(target, level, format, type, bufSize, img);
}

REGAL_DECL void REGAL_CALL glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReadnPixelsARB(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReadnPixelsARB);
  RegalAssert(rCtx->dsp.CurrTable()->glReadnPixelsARB != glReadnPixelsARB);
  rCtx->dsp.CurrTable()->glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
}

REGAL_DECL void REGAL_CALL glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnColorTableARB(", toString(target), ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", table, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnColorTableARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnColorTableARB != glGetnColorTableARB);
  rCtx->dsp.CurrTable()->glGetnColorTableARB(target, format, type, bufSize, table);
}

REGAL_DECL void REGAL_CALL glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnConvolutionFilterARB(", toString(target), ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", image, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnConvolutionFilterARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnConvolutionFilterARB != glGetnConvolutionFilterARB);
  rCtx->dsp.CurrTable()->glGetnConvolutionFilterARB(target, format, type, bufSize, image);
}

REGAL_DECL void REGAL_CALL glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnSeparableFilterARB(", toString(target), ", ", toString(format), ", ", toString(type), ", ", rowBufSize, ", ", row, ", ", columnBufSize, ", ", column, ", ", span, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnSeparableFilterARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnSeparableFilterARB != glGetnSeparableFilterARB);
  rCtx->dsp.CurrTable()->glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
}

REGAL_DECL void REGAL_CALL glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnHistogramARB(", toString(target), ", ", reset, ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnHistogramARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnHistogramARB != glGetnHistogramARB);
  rCtx->dsp.CurrTable()->glGetnHistogramARB(target, reset, format, type, bufSize, values);
}

REGAL_DECL void REGAL_CALL glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnMinmaxARB(", toString(target), ", ", reset, ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnMinmaxARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnMinmaxARB != glGetnMinmaxARB);
  rCtx->dsp.CurrTable()->glGetnMinmaxARB(target, reset, format, type, bufSize, values);
}

REGAL_DECL void REGAL_CALL glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnCompressedTexImageARB(", toString(target), ", ", lod, ", ", bufSize, ", ", img, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnCompressedTexImageARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnCompressedTexImageARB != glGetnCompressedTexImageARB);
  rCtx->dsp.CurrTable()->glGetnCompressedTexImageARB(target, lod, bufSize, img);
}

REGAL_DECL void REGAL_CALL glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnUniformfvARB(", program, ", ", location, ", ", bufSize, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnUniformfvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnUniformfvARB != glGetnUniformfvARB);
  rCtx->dsp.CurrTable()->glGetnUniformfvARB(program, location, bufSize, params);
}

REGAL_DECL void REGAL_CALL glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnUniformivARB(", program, ", ", location, ", ", bufSize, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnUniformivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnUniformivARB != glGetnUniformivARB);
  rCtx->dsp.CurrTable()->glGetnUniformivARB(program, location, bufSize, params);
}

REGAL_DECL void REGAL_CALL glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnUniformuivARB(", program, ", ", location, ", ", bufSize, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnUniformuivARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnUniformuivARB != glGetnUniformuivARB);
  rCtx->dsp.CurrTable()->glGetnUniformuivARB(program, location, bufSize, params);
}

REGAL_DECL void REGAL_CALL glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetnUniformdvARB(", program, ", ", location, ", ", bufSize, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetnUniformdvARB);
  RegalAssert(rCtx->dsp.CurrTable()->glGetnUniformdvARB != glGetnUniformdvARB);
  rCtx->dsp.CurrTable()->glGetnUniformdvARB(program, location, bufSize, params);
}

/* GL_EXT_blend_color */

REGAL_DECL void REGAL_CALL glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendColorEXT(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendColorEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendColorEXT != glBlendColorEXT);
  rCtx->dsp.CurrTable()->glBlendColorEXT(red, green, blue, alpha);
}

/* GL_EXT_polygon_offset */

REGAL_DECL void REGAL_CALL glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPolygonOffsetEXT(", factor, ", ", bias, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPolygonOffsetEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPolygonOffsetEXT != glPolygonOffsetEXT);
  rCtx->dsp.CurrTable()->glPolygonOffsetEXT(factor, bias);
}

/* GL_EXT_texture3D */

REGAL_DECL void REGAL_CALL glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage3DEXT(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage3DEXT != glTexImage3DEXT);
  rCtx->dsp.CurrTable()->glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

/* GL_SGIS_texture_filter4 */

REGAL_DECL void REGAL_CALL glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexFilterFuncSGIS(", toString(target), ", ", toString(filter), ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexFilterFuncSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexFilterFuncSGIS != glGetTexFilterFuncSGIS);
  rCtx->dsp.CurrTable()->glGetTexFilterFuncSGIS(target, filter, weights);
}

REGAL_DECL void REGAL_CALL glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexFilterFuncSGIS(", toString(target), ", ", toString(filter), ", ", n, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexFilterFuncSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glTexFilterFuncSGIS != glTexFilterFuncSGIS);
  rCtx->dsp.CurrTable()->glTexFilterFuncSGIS(target, filter, n, weights);
}

/* GL_EXT_subtexture */

REGAL_DECL void REGAL_CALL glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexSubImage1DEXT(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage1DEXT != glTexSubImage1DEXT);
  rCtx->dsp.CurrTable()->glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexSubImage2DEXT(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage2DEXT != glTexSubImage2DEXT);
  rCtx->dsp.CurrTable()->glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexSubImage3DEXT(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage3DEXT != glTexSubImage3DEXT);
  rCtx->dsp.CurrTable()->glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

/* GL_EXT_copy_texture */

REGAL_DECL void REGAL_CALL glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexImage1DEXT(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexImage1DEXT != glCopyTexImage1DEXT);
  rCtx->dsp.CurrTable()->glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
}

REGAL_DECL void REGAL_CALL glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexImage2DEXT(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexImage2DEXT != glCopyTexImage2DEXT);
  rCtx->dsp.CurrTable()->glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
}

REGAL_DECL void REGAL_CALL glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexSubImage1DEXT(", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage1DEXT != glCopyTexSubImage1DEXT);
  rCtx->dsp.CurrTable()->glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
}

REGAL_DECL void REGAL_CALL glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexSubImage2DEXT(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage2DEXT != glCopyTexSubImage2DEXT);
  rCtx->dsp.CurrTable()->glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTexSubImage3DEXT(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTexSubImage3DEXT != glCopyTexSubImage3DEXT);
  rCtx->dsp.CurrTable()->glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

/* GL_EXT_histogram */

REGAL_DECL void REGAL_CALL glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetHistogramEXT(", toString(target), ", ", reset, ", ", toString(format), ", ", toString(type), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramEXT != glGetHistogramEXT);
  rCtx->dsp.CurrTable()->glGetHistogramEXT(target, reset, format, type, values);
}

REGAL_DECL void REGAL_CALL glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetHistogramParameterfvEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramParameterfvEXT != glGetHistogramParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetHistogramParameterfvEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetHistogramParameterivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetHistogramParameterivEXT != glGetHistogramParameterivEXT);
  rCtx->dsp.CurrTable()->glGetHistogramParameterivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMinmaxEXT(", toString(target), ", ", reset, ", ", toString(format), ", ", toString(type), ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxEXT != glGetMinmaxEXT);
  rCtx->dsp.CurrTable()->glGetMinmaxEXT(target, reset, format, type, values);
}

REGAL_DECL void REGAL_CALL glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMinmaxParameterfvEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxParameterfvEXT != glGetMinmaxParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetMinmaxParameterfvEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMinmaxParameterivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMinmaxParameterivEXT != glGetMinmaxParameterivEXT);
  rCtx->dsp.CurrTable()->glGetMinmaxParameterivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glHistogramEXT(", toString(target), ", ", width, ", ", toString(internalformat), ", ", sink, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glHistogramEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glHistogramEXT != glHistogramEXT);
  rCtx->dsp.CurrTable()->glHistogramEXT(target, width, internalformat, sink);
}

REGAL_DECL void REGAL_CALL glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMinmaxEXT(", toString(target), ", ", toString(internalformat), ", ", sink, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMinmaxEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMinmaxEXT != glMinmaxEXT);
  rCtx->dsp.CurrTable()->glMinmaxEXT(target, internalformat, sink);
}

REGAL_DECL void REGAL_CALL glResetHistogramEXT(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glResetHistogramEXT(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glResetHistogramEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glResetHistogramEXT != glResetHistogramEXT);
  rCtx->dsp.CurrTable()->glResetHistogramEXT(target);
}

REGAL_DECL void REGAL_CALL glResetMinmaxEXT(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glResetMinmaxEXT(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glResetMinmaxEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glResetMinmaxEXT != glResetMinmaxEXT);
  rCtx->dsp.CurrTable()->glResetMinmaxEXT(target);
}

/* GL_EXT_convolution */

REGAL_DECL void REGAL_CALL glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionFilter1DEXT(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", image, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionFilter1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionFilter1DEXT != glConvolutionFilter1DEXT);
  rCtx->dsp.CurrTable()->glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
}

REGAL_DECL void REGAL_CALL glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionFilter2DEXT(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", image, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionFilter2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionFilter2DEXT != glConvolutionFilter2DEXT);
  rCtx->dsp.CurrTable()->glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
}

REGAL_DECL void REGAL_CALL glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionParameterfEXT(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterfEXT != glConvolutionParameterfEXT);
  rCtx->dsp.CurrTable()->glConvolutionParameterfEXT(target, pname, param);
}

REGAL_DECL void REGAL_CALL glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionParameterfvEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterfvEXT != glConvolutionParameterfvEXT);
  rCtx->dsp.CurrTable()->glConvolutionParameterfvEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionParameteriEXT(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameteriEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameteriEXT != glConvolutionParameteriEXT);
  rCtx->dsp.CurrTable()->glConvolutionParameteriEXT(target, pname, param);
}

REGAL_DECL void REGAL_CALL glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glConvolutionParameterivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glConvolutionParameterivEXT != glConvolutionParameterivEXT);
  rCtx->dsp.CurrTable()->glConvolutionParameterivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyConvolutionFilter1DEXT(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyConvolutionFilter1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyConvolutionFilter1DEXT != glCopyConvolutionFilter1DEXT);
  rCtx->dsp.CurrTable()->glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
}

REGAL_DECL void REGAL_CALL glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyConvolutionFilter2DEXT(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyConvolutionFilter2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyConvolutionFilter2DEXT != glCopyConvolutionFilter2DEXT);
  rCtx->dsp.CurrTable()->glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetConvolutionFilterEXT(", toString(target), ", ", toString(format), ", ", toString(type), ", ", image, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionFilterEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionFilterEXT != glGetConvolutionFilterEXT);
  rCtx->dsp.CurrTable()->glGetConvolutionFilterEXT(target, format, type, image);
}

REGAL_DECL void REGAL_CALL glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetConvolutionParameterfvEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionParameterfvEXT != glGetConvolutionParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetConvolutionParameterfvEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetConvolutionParameterivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetConvolutionParameterivEXT != glGetConvolutionParameterivEXT);
  rCtx->dsp.CurrTable()->glGetConvolutionParameterivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSeparableFilterEXT(", toString(target), ", ", toString(format), ", ", toString(type), ", ", row, ", ", column, ", ", span, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSeparableFilterEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSeparableFilterEXT != glGetSeparableFilterEXT);
  rCtx->dsp.CurrTable()->glGetSeparableFilterEXT(target, format, type, row, column, span);
}

REGAL_DECL void REGAL_CALL glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSeparableFilter2DEXT(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", row, ", ", column, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSeparableFilter2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSeparableFilter2DEXT != glSeparableFilter2DEXT);
  rCtx->dsp.CurrTable()->glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
}

/* GL_SGI_color_table */

REGAL_DECL void REGAL_CALL glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorTableSGI(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", table, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableSGI);
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableSGI != glColorTableSGI);
  rCtx->dsp.CurrTable()->glColorTableSGI(target, internalformat, width, format, type, table);
}

REGAL_DECL void REGAL_CALL glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorTableParameterfvSGI(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableParameterfvSGI);
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableParameterfvSGI != glColorTableParameterfvSGI);
  rCtx->dsp.CurrTable()->glColorTableParameterfvSGI(target, pname, params);
}

REGAL_DECL void REGAL_CALL glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorTableParameterivSGI(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableParameterivSGI);
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableParameterivSGI != glColorTableParameterivSGI);
  rCtx->dsp.CurrTable()->glColorTableParameterivSGI(target, pname, params);
}

REGAL_DECL void REGAL_CALL glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyColorTableSGI(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyColorTableSGI);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyColorTableSGI != glCopyColorTableSGI);
  rCtx->dsp.CurrTable()->glCopyColorTableSGI(target, internalformat, x, y, width);
}

REGAL_DECL void REGAL_CALL glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTableSGI(", toString(target), ", ", toString(format), ", ", toString(type), ", ", table, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableSGI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableSGI != glGetColorTableSGI);
  rCtx->dsp.CurrTable()->glGetColorTableSGI(target, format, type, table);
}

REGAL_DECL void REGAL_CALL glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTableParameterfvSGI(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterfvSGI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterfvSGI != glGetColorTableParameterfvSGI);
  rCtx->dsp.CurrTable()->glGetColorTableParameterfvSGI(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTableParameterivSGI(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterivSGI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterivSGI != glGetColorTableParameterivSGI);
  rCtx->dsp.CurrTable()->glGetColorTableParameterivSGI(target, pname, params);
}

/* GL_SGIX_pixel_texture */

REGAL_DECL void REGAL_CALL glPixelTexGenSGIX(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTexGenSGIX(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenSGIX != glPixelTexGenSGIX);
  rCtx->dsp.CurrTable()->glPixelTexGenSGIX(mode);
}

/* GL_SGIS_pixel_texture */

REGAL_DECL void REGAL_CALL glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTexGenParameteriSGIS(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenParameteriSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenParameteriSGIS != glPixelTexGenParameteriSGIS);
  rCtx->dsp.CurrTable()->glPixelTexGenParameteriSGIS(pname, param);
}

REGAL_DECL void REGAL_CALL glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTexGenParameterivSGIS(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenParameterivSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenParameterivSGIS != glPixelTexGenParameterivSGIS);
  rCtx->dsp.CurrTable()->glPixelTexGenParameterivSGIS(pname, params);
}

REGAL_DECL void REGAL_CALL glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTexGenParameterfSGIS(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenParameterfSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenParameterfSGIS != glPixelTexGenParameterfSGIS);
  rCtx->dsp.CurrTable()->glPixelTexGenParameterfSGIS(pname, param);
}

REGAL_DECL void REGAL_CALL glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTexGenParameterfvSGIS(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenParameterfvSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTexGenParameterfvSGIS != glPixelTexGenParameterfvSGIS);
  rCtx->dsp.CurrTable()->glPixelTexGenParameterfvSGIS(pname, params);
}

REGAL_DECL void REGAL_CALL glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPixelTexGenParameterivSGIS(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelTexGenParameterivSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelTexGenParameterivSGIS != glGetPixelTexGenParameterivSGIS);
  rCtx->dsp.CurrTable()->glGetPixelTexGenParameterivSGIS(pname, params);
}

REGAL_DECL void REGAL_CALL glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPixelTexGenParameterfvSGIS(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelTexGenParameterfvSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPixelTexGenParameterfvSGIS != glGetPixelTexGenParameterfvSGIS);
  rCtx->dsp.CurrTable()->glGetPixelTexGenParameterfvSGIS(pname, params);
}

/* GL_SGIS_texture4D */

REGAL_DECL void REGAL_CALL glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage4DSGIS(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", size4d, ", ", border, ", ", toString(format), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage4DSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage4DSGIS != glTexImage4DSGIS);
  rCtx->dsp.CurrTable()->glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexSubImage4DSGIS(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", woffset, ", ", width, ", ", height, ", ", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage4DSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glTexSubImage4DSGIS != glTexSubImage4DSGIS);
  rCtx->dsp.CurrTable()->glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
}

/* GL_EXT_texture_object */

REGAL_DECL GLboolean REGAL_CALL glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAreTexturesResidentEXT(", n, ", ", textures, ", ", residences, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAreTexturesResidentEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glAreTexturesResidentEXT != glAreTexturesResidentEXT);
  return rCtx->dsp.CurrTable()->glAreTexturesResidentEXT(n, textures, residences);
}

REGAL_DECL void REGAL_CALL glBindTextureEXT(GLenum target, GLuint texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindTextureEXT(", toString(target), ", ", texture, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindTextureEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindTextureEXT != glBindTextureEXT);
  rCtx->dsp.CurrTable()->glBindTextureEXT(target, texture);
}

REGAL_DECL void REGAL_CALL glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteTexturesEXT(", n, ", ", textures, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteTexturesEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteTexturesEXT != glDeleteTexturesEXT);
  rCtx->dsp.CurrTable()->glDeleteTexturesEXT(n, textures);
}

REGAL_DECL void REGAL_CALL glGenTexturesEXT(GLsizei n, GLuint *textures)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenTexturesEXT(", n, ", ", textures, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenTexturesEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGenTexturesEXT != glGenTexturesEXT);
  rCtx->dsp.CurrTable()->glGenTexturesEXT(n, textures);
}

REGAL_DECL GLboolean REGAL_CALL glIsTextureEXT(GLuint texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsTextureEXT(", texture, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsTextureEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glIsTextureEXT != glIsTextureEXT);
  return rCtx->dsp.CurrTable()->glIsTextureEXT(texture);
}

REGAL_DECL void REGAL_CALL glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPrioritizeTexturesEXT(", n, ", ", textures, ", ", priorities, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPrioritizeTexturesEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPrioritizeTexturesEXT != glPrioritizeTexturesEXT);
  rCtx->dsp.CurrTable()->glPrioritizeTexturesEXT(n, textures, priorities);
}

/* GL_SGIS_detail_texture */

REGAL_DECL void REGAL_CALL glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDetailTexFuncSGIS(", toString(target), ", ", n, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDetailTexFuncSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glDetailTexFuncSGIS != glDetailTexFuncSGIS);
  rCtx->dsp.CurrTable()->glDetailTexFuncSGIS(target, n, points);
}

REGAL_DECL void REGAL_CALL glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetDetailTexFuncSGIS(", toString(target), ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetDetailTexFuncSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glGetDetailTexFuncSGIS != glGetDetailTexFuncSGIS);
  rCtx->dsp.CurrTable()->glGetDetailTexFuncSGIS(target, points);
}

/* GL_SGIS_sharpen_texture */

REGAL_DECL void REGAL_CALL glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSharpenTexFuncSGIS(", toString(target), ", ", n, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSharpenTexFuncSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glSharpenTexFuncSGIS != glSharpenTexFuncSGIS);
  rCtx->dsp.CurrTable()->glSharpenTexFuncSGIS(target, n, points);
}

REGAL_DECL void REGAL_CALL glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetSharpenTexFuncSGIS(", toString(target), ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetSharpenTexFuncSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glGetSharpenTexFuncSGIS != glGetSharpenTexFuncSGIS);
  rCtx->dsp.CurrTable()->glGetSharpenTexFuncSGIS(target, points);
}

/* GL_SGIS_multisample */

REGAL_DECL void REGAL_CALL glSampleMaskSGIS(GLclampf value, GLboolean invert)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSampleMaskSGIS(", value, ", ", invert, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMaskSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMaskSGIS != glSampleMaskSGIS);
  rCtx->dsp.CurrTable()->glSampleMaskSGIS(value, invert);
}

REGAL_DECL void REGAL_CALL glSamplePatternSGIS(GLenum pattern)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSamplePatternSGIS(", toString(pattern), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSamplePatternSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glSamplePatternSGIS != glSamplePatternSGIS);
  rCtx->dsp.CurrTable()->glSamplePatternSGIS(pattern);
}

/* GL_EXT_vertex_array */

REGAL_DECL void REGAL_CALL glArrayElementEXT(GLint i)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glArrayElementEXT(", i, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glArrayElementEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glArrayElementEXT != glArrayElementEXT);
  rCtx->dsp.CurrTable()->glArrayElementEXT(i);
}

REGAL_DECL void REGAL_CALL glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorPointerEXT(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glColorPointerEXT != glColorPointerEXT);
  rCtx->dsp.CurrTable()->glColorPointerEXT(size, type, stride, count, pointer);
}

REGAL_DECL void REGAL_CALL glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawArraysEXT(", toString(mode), ", ", first, ", ", count, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysEXT != glDrawArraysEXT);
  rCtx->dsp.CurrTable()->glDrawArraysEXT(mode, first, count);
}

REGAL_DECL void REGAL_CALL glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEdgeFlagPointerEXT(", stride, ", ", count, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagPointerEXT != glEdgeFlagPointerEXT);
  rCtx->dsp.CurrTable()->glEdgeFlagPointerEXT(stride, count, pointer);
}

REGAL_DECL void REGAL_CALL glGetPointervEXT(GLenum pname, GLvoid **params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPointervEXT(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPointervEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPointervEXT != glGetPointervEXT);
  rCtx->dsp.CurrTable()->glGetPointervEXT(pname, params);
}

REGAL_DECL void REGAL_CALL glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexPointerEXT(", toString(type), ", ", stride, ", ", count, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexPointerEXT != glIndexPointerEXT);
  rCtx->dsp.CurrTable()->glIndexPointerEXT(type, stride, count, pointer);
}

REGAL_DECL void REGAL_CALL glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalPointerEXT(", toString(type), ", ", stride, ", ", count, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalPointerEXT != glNormalPointerEXT);
  rCtx->dsp.CurrTable()->glNormalPointerEXT(type, stride, count, pointer);
}

REGAL_DECL void REGAL_CALL glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordPointerEXT(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordPointerEXT != glTexCoordPointerEXT);
  rCtx->dsp.CurrTable()->glTexCoordPointerEXT(size, type, stride, count, pointer);
}

REGAL_DECL void REGAL_CALL glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexPointerEXT(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexPointerEXT != glVertexPointerEXT);
  rCtx->dsp.CurrTable()->glVertexPointerEXT(size, type, stride, count, pointer);
}

/* GL_EXT_blend_minmax */

REGAL_DECL void REGAL_CALL glBlendEquationEXT(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationEXT(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationEXT != glBlendEquationEXT);
  rCtx->dsp.CurrTable()->glBlendEquationEXT(mode);
}

/* GL_SGIX_sprite */

REGAL_DECL void REGAL_CALL glSpriteParameterfSGIX(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSpriteParameterfSGIX(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSpriteParameterfSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glSpriteParameterfSGIX != glSpriteParameterfSGIX);
  rCtx->dsp.CurrTable()->glSpriteParameterfSGIX(pname, param);
}

REGAL_DECL void REGAL_CALL glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSpriteParameterfvSGIX(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSpriteParameterfvSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glSpriteParameterfvSGIX != glSpriteParameterfvSGIX);
  rCtx->dsp.CurrTable()->glSpriteParameterfvSGIX(pname, params);
}

REGAL_DECL void REGAL_CALL glSpriteParameteriSGIX(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSpriteParameteriSGIX(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSpriteParameteriSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glSpriteParameteriSGIX != glSpriteParameteriSGIX);
  rCtx->dsp.CurrTable()->glSpriteParameteriSGIX(pname, param);
}

REGAL_DECL void REGAL_CALL glSpriteParameterivSGIX(GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSpriteParameterivSGIX(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSpriteParameterivSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glSpriteParameterivSGIX != glSpriteParameterivSGIX);
  rCtx->dsp.CurrTable()->glSpriteParameterivSGIX(pname, params);
}

/* GL_EXT_point_parameters */

REGAL_DECL void REGAL_CALL glPointParameterfEXT(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterfEXT(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfEXT != glPointParameterfEXT);
  rCtx->dsp.CurrTable()->glPointParameterfEXT(pname, param);
}

REGAL_DECL void REGAL_CALL glPointParameterfvEXT(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterfvEXT(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfvEXT != glPointParameterfvEXT);
  rCtx->dsp.CurrTable()->glPointParameterfvEXT(pname, params);
}

/* GL_SGIS_point_parameters */

REGAL_DECL void REGAL_CALL glPointParameterfSGIS(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterfSGIS(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfSGIS != glPointParameterfSGIS);
  rCtx->dsp.CurrTable()->glPointParameterfSGIS(pname, param);
}

REGAL_DECL void REGAL_CALL glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterfvSGIS(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfvSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterfvSGIS != glPointParameterfvSGIS);
  rCtx->dsp.CurrTable()->glPointParameterfvSGIS(pname, params);
}

/* GL_SGIX_instruments */

REGAL_DECL GLint REGAL_CALL glGetInstrumentsSGIX(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetInstrumentsSGIX()");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetInstrumentsSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glGetInstrumentsSGIX != glGetInstrumentsSGIX);
  return rCtx->dsp.CurrTable()->glGetInstrumentsSGIX();
}

REGAL_DECL void REGAL_CALL glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glInstrumentsBufferSGIX(", size, ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glInstrumentsBufferSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glInstrumentsBufferSGIX != glInstrumentsBufferSGIX);
  rCtx->dsp.CurrTable()->glInstrumentsBufferSGIX(size, buffer);
}

REGAL_DECL GLint REGAL_CALL glPollInstrumentsSGIX(GLint *marker_p)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPollInstrumentsSGIX(", marker_p, ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPollInstrumentsSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glPollInstrumentsSGIX != glPollInstrumentsSGIX);
  return rCtx->dsp.CurrTable()->glPollInstrumentsSGIX(marker_p);
}

REGAL_DECL void REGAL_CALL glReadInstrumentsSGIX(GLint marker)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReadInstrumentsSGIX(", marker, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReadInstrumentsSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glReadInstrumentsSGIX != glReadInstrumentsSGIX);
  rCtx->dsp.CurrTable()->glReadInstrumentsSGIX(marker);
}

REGAL_DECL void REGAL_CALL glStartInstrumentsSGIX(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStartInstrumentsSGIX()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStartInstrumentsSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glStartInstrumentsSGIX != glStartInstrumentsSGIX);
  rCtx->dsp.CurrTable()->glStartInstrumentsSGIX();
}

REGAL_DECL void REGAL_CALL glStopInstrumentsSGIX(GLint marker)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStopInstrumentsSGIX(", marker, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStopInstrumentsSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glStopInstrumentsSGIX != glStopInstrumentsSGIX);
  rCtx->dsp.CurrTable()->glStopInstrumentsSGIX(marker);
}

/* GL_SGIX_framezoom */

REGAL_DECL void REGAL_CALL glFrameZoomSGIX(GLint factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFrameZoomSGIX(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFrameZoomSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFrameZoomSGIX != glFrameZoomSGIX);
  rCtx->dsp.CurrTable()->glFrameZoomSGIX(factor);
}

/* GL_SGIX_tag_sample_buffer */

REGAL_DECL void REGAL_CALL glTagSampleBufferSGIX(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTagSampleBufferSGIX()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTagSampleBufferSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glTagSampleBufferSGIX != glTagSampleBufferSGIX);
  rCtx->dsp.CurrTable()->glTagSampleBufferSGIX();
}

/* GL_SGIX_polynomial_ffd */

REGAL_DECL void REGAL_CALL glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeformationMap3dSGIX(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeformationMap3dSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glDeformationMap3dSGIX != glDeformationMap3dSGIX);
  rCtx->dsp.CurrTable()->glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

REGAL_DECL void REGAL_CALL glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeformationMap3fSGIX(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeformationMap3fSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glDeformationMap3fSGIX != glDeformationMap3fSGIX);
  rCtx->dsp.CurrTable()->glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

REGAL_DECL void REGAL_CALL glDeformSGIX(GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeformSGIX(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeformSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glDeformSGIX != glDeformSGIX);
  rCtx->dsp.CurrTable()->glDeformSGIX(mask);
}

REGAL_DECL void REGAL_CALL glLoadIdentityDeformationMapSGIX(GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadIdentityDeformationMapSGIX(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadIdentityDeformationMapSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadIdentityDeformationMapSGIX != glLoadIdentityDeformationMapSGIX);
  rCtx->dsp.CurrTable()->glLoadIdentityDeformationMapSGIX(mask);
}

/* GL_SGIX_reference_plane */

REGAL_DECL void REGAL_CALL glReferencePlaneSGIX(const GLdouble *equation)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReferencePlaneSGIX(", equation, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReferencePlaneSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glReferencePlaneSGIX != glReferencePlaneSGIX);
  rCtx->dsp.CurrTable()->glReferencePlaneSGIX(equation);
}

/* GL_SGIX_flush_raster */

REGAL_DECL void REGAL_CALL glFlushRasterSGIX(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFlushRasterSGIX()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFlushRasterSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFlushRasterSGIX != glFlushRasterSGIX);
  rCtx->dsp.CurrTable()->glFlushRasterSGIX();
}

/* GL_SGIS_fog_function */

REGAL_DECL void REGAL_CALL glFogFuncSGIS(GLsizei n, const GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogFuncSGIS(", n, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogFuncSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glFogFuncSGIS != glFogFuncSGIS);
  rCtx->dsp.CurrTable()->glFogFuncSGIS(n, points);
}

REGAL_DECL void REGAL_CALL glGetFogFuncSGIS(GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFogFuncSGIS(", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFogFuncSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFogFuncSGIS != glGetFogFuncSGIS);
  rCtx->dsp.CurrTable()->glGetFogFuncSGIS(points);
}

/* GL_HP_image_transform */

REGAL_DECL void REGAL_CALL glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glImageTransformParameteriHP(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glImageTransformParameteriHP);
  RegalAssert(rCtx->dsp.CurrTable()->glImageTransformParameteriHP != glImageTransformParameteriHP);
  rCtx->dsp.CurrTable()->glImageTransformParameteriHP(target, pname, param);
}

REGAL_DECL void REGAL_CALL glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glImageTransformParameterfHP(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glImageTransformParameterfHP);
  RegalAssert(rCtx->dsp.CurrTable()->glImageTransformParameterfHP != glImageTransformParameterfHP);
  rCtx->dsp.CurrTable()->glImageTransformParameterfHP(target, pname, param);
}

REGAL_DECL void REGAL_CALL glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glImageTransformParameterivHP(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glImageTransformParameterivHP);
  RegalAssert(rCtx->dsp.CurrTable()->glImageTransformParameterivHP != glImageTransformParameterivHP);
  rCtx->dsp.CurrTable()->glImageTransformParameterivHP(target, pname, params);
}

REGAL_DECL void REGAL_CALL glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glImageTransformParameterfvHP(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glImageTransformParameterfvHP);
  RegalAssert(rCtx->dsp.CurrTable()->glImageTransformParameterfvHP != glImageTransformParameterfvHP);
  rCtx->dsp.CurrTable()->glImageTransformParameterfvHP(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetImageTransformParameterivHP(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetImageTransformParameterivHP);
  RegalAssert(rCtx->dsp.CurrTable()->glGetImageTransformParameterivHP != glGetImageTransformParameterivHP);
  rCtx->dsp.CurrTable()->glGetImageTransformParameterivHP(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetImageTransformParameterfvHP(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetImageTransformParameterfvHP);
  RegalAssert(rCtx->dsp.CurrTable()->glGetImageTransformParameterfvHP != glGetImageTransformParameterfvHP);
  rCtx->dsp.CurrTable()->glGetImageTransformParameterfvHP(target, pname, params);
}

/* GL_EXT_color_subtable */

REGAL_DECL void REGAL_CALL glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorSubTableEXT(", toString(target), ", ", start, ", ", count, ", ", toString(format), ", ", toString(type), ", ", table, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorSubTableEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glColorSubTableEXT != glColorSubTableEXT);
  rCtx->dsp.CurrTable()->glColorSubTableEXT(target, start, count, format, type, table);
}

REGAL_DECL void REGAL_CALL glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyColorSubTableEXT(", toString(target), ", ", start, ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyColorSubTableEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyColorSubTableEXT != glCopyColorSubTableEXT);
  rCtx->dsp.CurrTable()->glCopyColorSubTableEXT(target, start, x, y, width);
}

/* GL_PGI_misc_hints */

REGAL_DECL void REGAL_CALL glHintPGI(GLenum target, GLint mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glHintPGI(", toString(target), ", ", mode, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glHintPGI);
  RegalAssert(rCtx->dsp.CurrTable()->glHintPGI != glHintPGI);
  rCtx->dsp.CurrTable()->glHintPGI(target, mode);
}

/* GL_EXT_paletted_texture */

REGAL_DECL void REGAL_CALL glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorTableEXT(", toString(target), ", ", toString(internalFormat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", table, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glColorTableEXT != glColorTableEXT);
  rCtx->dsp.CurrTable()->glColorTableEXT(target, internalFormat, width, format, type, table);
}

REGAL_DECL void REGAL_CALL glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTableEXT(", toString(target), ", ", toString(format), ", ", toString(type), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableEXT != glGetColorTableEXT);
  rCtx->dsp.CurrTable()->glGetColorTableEXT(target, format, type, data);
}

REGAL_DECL void REGAL_CALL glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTableParameterivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterivEXT != glGetColorTableParameterivEXT);
  rCtx->dsp.CurrTable()->glGetColorTableParameterivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetColorTableParameterfvEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetColorTableParameterfvEXT != glGetColorTableParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetColorTableParameterfvEXT(target, pname, params);
}

/* GL_SGIX_list_priority */

REGAL_DECL void REGAL_CALL glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetListParameterfvSGIX(", list, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetListParameterfvSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glGetListParameterfvSGIX != glGetListParameterfvSGIX);
  rCtx->dsp.CurrTable()->glGetListParameterfvSGIX(list, pname, params);
}

REGAL_DECL void REGAL_CALL glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetListParameterivSGIX(", list, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetListParameterivSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glGetListParameterivSGIX != glGetListParameterivSGIX);
  rCtx->dsp.CurrTable()->glGetListParameterivSGIX(list, pname, params);
}

REGAL_DECL void REGAL_CALL glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glListParameterfSGIX(", list, ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glListParameterfSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glListParameterfSGIX != glListParameterfSGIX);
  rCtx->dsp.CurrTable()->glListParameterfSGIX(list, pname, param);
}

REGAL_DECL void REGAL_CALL glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glListParameterfvSGIX(", list, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glListParameterfvSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glListParameterfvSGIX != glListParameterfvSGIX);
  rCtx->dsp.CurrTable()->glListParameterfvSGIX(list, pname, params);
}

REGAL_DECL void REGAL_CALL glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glListParameteriSGIX(", list, ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glListParameteriSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glListParameteriSGIX != glListParameteriSGIX);
  rCtx->dsp.CurrTable()->glListParameteriSGIX(list, pname, param);
}

REGAL_DECL void REGAL_CALL glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glListParameterivSGIX(", list, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glListParameterivSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glListParameterivSGIX != glListParameterivSGIX);
  rCtx->dsp.CurrTable()->glListParameterivSGIX(list, pname, params);
}

/* GL_EXT_index_material */

REGAL_DECL void REGAL_CALL glIndexMaterialEXT(GLenum face, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexMaterialEXT(", toString(face), ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexMaterialEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexMaterialEXT != glIndexMaterialEXT);
  rCtx->dsp.CurrTable()->glIndexMaterialEXT(face, mode);
}

/* GL_EXT_index_func */

REGAL_DECL void REGAL_CALL glIndexFuncEXT(GLenum func, GLfloat ref)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexFuncEXT(", toString(func), ", ", ref, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexFuncEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexFuncEXT != glIndexFuncEXT);
  rCtx->dsp.CurrTable()->glIndexFuncEXT(func, ref);
}

/* GL_EXT_compiled_vertex_array */

REGAL_DECL void REGAL_CALL glLockArraysEXT(GLint first, GLsizei count)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLockArraysEXT(", first, ", ", count, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLockArraysEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glLockArraysEXT != glLockArraysEXT);
  rCtx->dsp.CurrTable()->glLockArraysEXT(first, count);
}

REGAL_DECL void REGAL_CALL glUnlockArraysEXT(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUnlockArraysEXT()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUnlockArraysEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUnlockArraysEXT != glUnlockArraysEXT);
  rCtx->dsp.CurrTable()->glUnlockArraysEXT();
}

/* GL_EXT_cull_vertex */

REGAL_DECL void REGAL_CALL glCullParameterdvEXT(GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCullParameterdvEXT(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCullParameterdvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCullParameterdvEXT != glCullParameterdvEXT);
  rCtx->dsp.CurrTable()->glCullParameterdvEXT(pname, params);
}

REGAL_DECL void REGAL_CALL glCullParameterfvEXT(GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCullParameterfvEXT(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCullParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCullParameterfvEXT != glCullParameterfvEXT);
  rCtx->dsp.CurrTable()->glCullParameterfvEXT(pname, params);
}

/* GL_SGIX_fragment_lighting */

REGAL_DECL void REGAL_CALL glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentColorMaterialSGIX(", toString(face), ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentColorMaterialSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentColorMaterialSGIX != glFragmentColorMaterialSGIX);
  rCtx->dsp.CurrTable()->glFragmentColorMaterialSGIX(face, mode);
}

REGAL_DECL void REGAL_CALL glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightfSGIX(", toString(light), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightfSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightfSGIX != glFragmentLightfSGIX);
  rCtx->dsp.CurrTable()->glFragmentLightfSGIX(light, pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightfvSGIX(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightfvSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightfvSGIX != glFragmentLightfvSGIX);
  rCtx->dsp.CurrTable()->glFragmentLightfvSGIX(light, pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightiSGIX(", toString(light), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightiSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightiSGIX != glFragmentLightiSGIX);
  rCtx->dsp.CurrTable()->glFragmentLightiSGIX(light, pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightivSGIX(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightivSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightivSGIX != glFragmentLightivSGIX);
  rCtx->dsp.CurrTable()->glFragmentLightivSGIX(light, pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightModelfSGIX(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelfSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelfSGIX != glFragmentLightModelfSGIX);
  rCtx->dsp.CurrTable()->glFragmentLightModelfSGIX(pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightModelfvSGIX(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelfvSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelfvSGIX != glFragmentLightModelfvSGIX);
  rCtx->dsp.CurrTable()->glFragmentLightModelfvSGIX(pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentLightModeliSGIX(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightModeliSGIX(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModeliSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModeliSGIX != glFragmentLightModeliSGIX);
  rCtx->dsp.CurrTable()->glFragmentLightModeliSGIX(pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightModelivSGIX(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelivSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelivSGIX != glFragmentLightModelivSGIX);
  rCtx->dsp.CurrTable()->glFragmentLightModelivSGIX(pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentMaterialfSGIX(", toString(face), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialfSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialfSGIX != glFragmentMaterialfSGIX);
  rCtx->dsp.CurrTable()->glFragmentMaterialfSGIX(face, pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentMaterialfvSGIX(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialfvSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialfvSGIX != glFragmentMaterialfvSGIX);
  rCtx->dsp.CurrTable()->glFragmentMaterialfvSGIX(face, pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentMaterialiSGIX(", toString(face), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialiSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialiSGIX != glFragmentMaterialiSGIX);
  rCtx->dsp.CurrTable()->glFragmentMaterialiSGIX(face, pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentMaterialivSGIX(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialivSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialivSGIX != glFragmentMaterialivSGIX);
  rCtx->dsp.CurrTable()->glFragmentMaterialivSGIX(face, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragmentLightfvSGIX(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentLightfvSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentLightfvSGIX != glGetFragmentLightfvSGIX);
  rCtx->dsp.CurrTable()->glGetFragmentLightfvSGIX(light, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragmentLightivSGIX(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentLightivSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentLightivSGIX != glGetFragmentLightivSGIX);
  rCtx->dsp.CurrTable()->glGetFragmentLightivSGIX(light, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragmentMaterialfvSGIX(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentMaterialfvSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentMaterialfvSGIX != glGetFragmentMaterialfvSGIX);
  rCtx->dsp.CurrTable()->glGetFragmentMaterialfvSGIX(face, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragmentMaterialivSGIX(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentMaterialivSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentMaterialivSGIX != glGetFragmentMaterialivSGIX);
  rCtx->dsp.CurrTable()->glGetFragmentMaterialivSGIX(face, pname, params);
}

REGAL_DECL void REGAL_CALL glLightEnviSGIX(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightEnviSGIX(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightEnviSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glLightEnviSGIX != glLightEnviSGIX);
  rCtx->dsp.CurrTable()->glLightEnviSGIX(pname, param);
}

/* GL_EXT_draw_range_elements */

REGAL_DECL void REGAL_CALL glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawRangeElementsEXT(", toString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", indices, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElementsEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElementsEXT != glDrawRangeElementsEXT);
  rCtx->dsp.CurrTable()->glDrawRangeElementsEXT(mode, start, end, count, type, indices);
}

/* GL_EXT_light_texture */

REGAL_DECL void REGAL_CALL glApplyTextureEXT(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glApplyTextureEXT(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glApplyTextureEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glApplyTextureEXT != glApplyTextureEXT);
  rCtx->dsp.CurrTable()->glApplyTextureEXT(mode);
}

REGAL_DECL void REGAL_CALL glTextureLightEXT(GLenum pname)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureLightEXT(", toString(pname), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureLightEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureLightEXT != glTextureLightEXT);
  rCtx->dsp.CurrTable()->glTextureLightEXT(pname);
}

REGAL_DECL void REGAL_CALL glTextureMaterialEXT(GLenum face, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureMaterialEXT(", toString(face), ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureMaterialEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureMaterialEXT != glTextureMaterialEXT);
  rCtx->dsp.CurrTable()->glTextureMaterialEXT(face, mode);
}

/* GL_EXT_scene_marker */

REGAL_DECL void REGAL_CALL glBeginSceneEXT(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginSceneEXT()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginSceneEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginSceneEXT != glBeginSceneEXT);
  rCtx->dsp.CurrTable()->glBeginSceneEXT();
}

REGAL_DECL void REGAL_CALL glEndSceneEXT(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndSceneEXT()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndSceneEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glEndSceneEXT != glEndSceneEXT);
  rCtx->dsp.CurrTable()->glEndSceneEXT();
}

/* GL_SGIX_async */

REGAL_DECL void REGAL_CALL glAsyncMarkerSGIX(GLuint marker)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAsyncMarkerSGIX(", marker, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAsyncMarkerSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glAsyncMarkerSGIX != glAsyncMarkerSGIX);
  rCtx->dsp.CurrTable()->glAsyncMarkerSGIX(marker);
}

REGAL_DECL GLint REGAL_CALL glFinishAsyncSGIX(GLuint *markerp)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFinishAsyncSGIX(", markerp, ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFinishAsyncSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glFinishAsyncSGIX != glFinishAsyncSGIX);
  return rCtx->dsp.CurrTable()->glFinishAsyncSGIX(markerp);
}

REGAL_DECL GLint REGAL_CALL glPollAsyncSGIX(GLuint *markerp)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPollAsyncSGIX(", markerp, ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPollAsyncSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glPollAsyncSGIX != glPollAsyncSGIX);
  return rCtx->dsp.CurrTable()->glPollAsyncSGIX(markerp);
}

REGAL_DECL GLuint REGAL_CALL glGenAsyncMarkersSGIX(GLsizei range)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenAsyncMarkersSGIX(", range, ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenAsyncMarkersSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glGenAsyncMarkersSGIX != glGenAsyncMarkersSGIX);
  return rCtx->dsp.CurrTable()->glGenAsyncMarkersSGIX(range);
}

REGAL_DECL void REGAL_CALL glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteAsyncMarkersSGIX(", marker, ", ", range, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteAsyncMarkersSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteAsyncMarkersSGIX != glDeleteAsyncMarkersSGIX);
  rCtx->dsp.CurrTable()->glDeleteAsyncMarkersSGIX(marker, range);
}

REGAL_DECL GLboolean REGAL_CALL glIsAsyncMarkerSGIX(GLuint marker)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsAsyncMarkerSGIX(", marker, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsAsyncMarkerSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glIsAsyncMarkerSGIX != glIsAsyncMarkerSGIX);
  return rCtx->dsp.CurrTable()->glIsAsyncMarkerSGIX(marker);
}

/* GL_INTEL_parallel_arrays */

REGAL_DECL void REGAL_CALL glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexPointervINTEL(", size, ", ", toString(type), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexPointervINTEL);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexPointervINTEL != glVertexPointervINTEL);
  rCtx->dsp.CurrTable()->glVertexPointervINTEL(size, type, pointer);
}

REGAL_DECL void REGAL_CALL glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalPointervINTEL(", toString(type), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalPointervINTEL);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalPointervINTEL != glNormalPointervINTEL);
  rCtx->dsp.CurrTable()->glNormalPointervINTEL(type, pointer);
}

REGAL_DECL void REGAL_CALL glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorPointervINTEL(", size, ", ", toString(type), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorPointervINTEL);
  RegalAssert(rCtx->dsp.CurrTable()->glColorPointervINTEL != glColorPointervINTEL);
  rCtx->dsp.CurrTable()->glColorPointervINTEL(size, type, pointer);
}

REGAL_DECL void REGAL_CALL glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordPointervINTEL(", size, ", ", toString(type), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordPointervINTEL);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordPointervINTEL != glTexCoordPointervINTEL);
  rCtx->dsp.CurrTable()->glTexCoordPointervINTEL(size, type, pointer);
}

/* GL_EXT_pixel_transform */

REGAL_DECL void REGAL_CALL glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTransformParameteriEXT(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransformParameteriEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransformParameteriEXT != glPixelTransformParameteriEXT);
  rCtx->dsp.CurrTable()->glPixelTransformParameteriEXT(target, pname, param);
}

REGAL_DECL void REGAL_CALL glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTransformParameterfEXT(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransformParameterfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransformParameterfEXT != glPixelTransformParameterfEXT);
  rCtx->dsp.CurrTable()->glPixelTransformParameterfEXT(target, pname, param);
}

REGAL_DECL void REGAL_CALL glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTransformParameterivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransformParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransformParameterivEXT != glPixelTransformParameterivEXT);
  rCtx->dsp.CurrTable()->glPixelTransformParameterivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelTransformParameterfvEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransformParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelTransformParameterfvEXT != glPixelTransformParameterfvEXT);
  rCtx->dsp.CurrTable()->glPixelTransformParameterfvEXT(target, pname, params);
}

/* GL_EXT_secondary_color */

REGAL_DECL void REGAL_CALL glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3bEXT(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3bEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3bEXT != glSecondaryColor3bEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3bEXT(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3bvEXT(const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3bvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3bvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3bvEXT != glSecondaryColor3bvEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3bvEXT(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3dEXT(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3dEXT != glSecondaryColor3dEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3dEXT(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3dvEXT(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3dvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3dvEXT != glSecondaryColor3dvEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3dvEXT(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3fEXT(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3fEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3fEXT != glSecondaryColor3fEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3fEXT(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3fvEXT(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3fvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3fvEXT != glSecondaryColor3fvEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3fvEXT(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3iEXT(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3iEXT != glSecondaryColor3iEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3iEXT(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3ivEXT(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3ivEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ivEXT != glSecondaryColor3ivEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3ivEXT(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3sEXT(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3sEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3sEXT != glSecondaryColor3sEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3sEXT(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3svEXT(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3svEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3svEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3svEXT != glSecondaryColor3svEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3svEXT(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3ubEXT(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ubEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ubEXT != glSecondaryColor3ubEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3ubEXT(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3ubvEXT(const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3ubvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ubvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3ubvEXT != glSecondaryColor3ubvEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3ubvEXT(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3uiEXT(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3uiEXT != glSecondaryColor3uiEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3uiEXT(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3uivEXT(const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3uivEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3uivEXT != glSecondaryColor3uivEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3uivEXT(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3usEXT(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3usEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3usEXT != glSecondaryColor3usEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3usEXT(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3usvEXT(const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3usvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3usvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3usvEXT != glSecondaryColor3usvEXT);
  rCtx->dsp.CurrTable()->glSecondaryColor3usvEXT(v);
}

REGAL_DECL void REGAL_CALL glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColorPointerEXT(", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorPointerEXT != glSecondaryColorPointerEXT);
  rCtx->dsp.CurrTable()->glSecondaryColorPointerEXT(size, type, stride, pointer);
}

/* GL_EXT_texture_perturb_normal */

REGAL_DECL void REGAL_CALL glTextureNormalEXT(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureNormalEXT(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureNormalEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureNormalEXT != glTextureNormalEXT);
  rCtx->dsp.CurrTable()->glTextureNormalEXT(mode);
}

/* GL_EXT_multi_draw_arrays */

REGAL_DECL void REGAL_CALL glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawArraysEXT(", toString(mode), ", ", first, ", ", count, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawArraysEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawArraysEXT != glMultiDrawArraysEXT);
  rCtx->dsp.CurrTable()->glMultiDrawArraysEXT(mode, first, count, primcount);
}

REGAL_DECL void REGAL_CALL glMultiDrawElementsEXT(GLenum mode, GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawElementsEXT(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElementsEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElementsEXT != glMultiDrawElementsEXT);
  rCtx->dsp.CurrTable()->glMultiDrawElementsEXT(mode, count, type, indices, primcount);
}

/* GL_EXT_fog_coord */

REGAL_DECL void REGAL_CALL glFogCoordfEXT(GLfloat coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordfEXT(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordfEXT != glFogCoordfEXT);
  rCtx->dsp.CurrTable()->glFogCoordfEXT(coord);
}

REGAL_DECL void REGAL_CALL glFogCoordfvEXT(const GLfloat *coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordfvEXT(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordfvEXT != glFogCoordfvEXT);
  rCtx->dsp.CurrTable()->glFogCoordfvEXT(coord);
}

REGAL_DECL void REGAL_CALL glFogCoorddEXT(GLdouble coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoorddEXT(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoorddEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoorddEXT != glFogCoorddEXT);
  rCtx->dsp.CurrTable()->glFogCoorddEXT(coord);
}

REGAL_DECL void REGAL_CALL glFogCoorddvEXT(const GLdouble *coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoorddvEXT(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoorddvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoorddvEXT != glFogCoorddvEXT);
  rCtx->dsp.CurrTable()->glFogCoorddvEXT(coord);
}

REGAL_DECL void REGAL_CALL glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordPointerEXT(", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordPointerEXT != glFogCoordPointerEXT);
  rCtx->dsp.CurrTable()->glFogCoordPointerEXT(type, stride, pointer);
}

/* GL_EXT_coordinate_frame */

REGAL_DECL void REGAL_CALL glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3bEXT(", tx, ", ", ty, ", ", tz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3bEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3bEXT != glTangent3bEXT);
  rCtx->dsp.CurrTable()->glTangent3bEXT(tx, ty, tz);
}

REGAL_DECL void REGAL_CALL glTangent3bvEXT(const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3bvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3bvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3bvEXT != glTangent3bvEXT);
  rCtx->dsp.CurrTable()->glTangent3bvEXT(v);
}

REGAL_DECL void REGAL_CALL glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3dEXT(", tx, ", ", ty, ", ", tz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3dEXT != glTangent3dEXT);
  rCtx->dsp.CurrTable()->glTangent3dEXT(tx, ty, tz);
}

REGAL_DECL void REGAL_CALL glTangent3dvEXT(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3dvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3dvEXT != glTangent3dvEXT);
  rCtx->dsp.CurrTable()->glTangent3dvEXT(v);
}

REGAL_DECL void REGAL_CALL glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3fEXT(", tx, ", ", ty, ", ", tz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3fEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3fEXT != glTangent3fEXT);
  rCtx->dsp.CurrTable()->glTangent3fEXT(tx, ty, tz);
}

REGAL_DECL void REGAL_CALL glTangent3fvEXT(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3fvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3fvEXT != glTangent3fvEXT);
  rCtx->dsp.CurrTable()->glTangent3fvEXT(v);
}

REGAL_DECL void REGAL_CALL glTangent3iEXT(GLint tx, GLint ty, GLint tz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3iEXT(", tx, ", ", ty, ", ", tz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3iEXT != glTangent3iEXT);
  rCtx->dsp.CurrTable()->glTangent3iEXT(tx, ty, tz);
}

REGAL_DECL void REGAL_CALL glTangent3ivEXT(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3ivEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3ivEXT != glTangent3ivEXT);
  rCtx->dsp.CurrTable()->glTangent3ivEXT(v);
}

REGAL_DECL void REGAL_CALL glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3sEXT(", tx, ", ", ty, ", ", tz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3sEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3sEXT != glTangent3sEXT);
  rCtx->dsp.CurrTable()->glTangent3sEXT(tx, ty, tz);
}

REGAL_DECL void REGAL_CALL glTangent3svEXT(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangent3svEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3svEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangent3svEXT != glTangent3svEXT);
  rCtx->dsp.CurrTable()->glTangent3svEXT(v);
}

REGAL_DECL void REGAL_CALL glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3bEXT(", bx, ", ", by, ", ", bz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3bEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3bEXT != glBinormal3bEXT);
  rCtx->dsp.CurrTable()->glBinormal3bEXT(bx, by, bz);
}

REGAL_DECL void REGAL_CALL glBinormal3bvEXT(const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3bvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3bvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3bvEXT != glBinormal3bvEXT);
  rCtx->dsp.CurrTable()->glBinormal3bvEXT(v);
}

REGAL_DECL void REGAL_CALL glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3dEXT(", bx, ", ", by, ", ", bz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3dEXT != glBinormal3dEXT);
  rCtx->dsp.CurrTable()->glBinormal3dEXT(bx, by, bz);
}

REGAL_DECL void REGAL_CALL glBinormal3dvEXT(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3dvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3dvEXT != glBinormal3dvEXT);
  rCtx->dsp.CurrTable()->glBinormal3dvEXT(v);
}

REGAL_DECL void REGAL_CALL glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3fEXT(", bx, ", ", by, ", ", bz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3fEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3fEXT != glBinormal3fEXT);
  rCtx->dsp.CurrTable()->glBinormal3fEXT(bx, by, bz);
}

REGAL_DECL void REGAL_CALL glBinormal3fvEXT(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3fvEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3fvEXT != glBinormal3fvEXT);
  rCtx->dsp.CurrTable()->glBinormal3fvEXT(v);
}

REGAL_DECL void REGAL_CALL glBinormal3iEXT(GLint bx, GLint by, GLint bz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3iEXT(", bx, ", ", by, ", ", bz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3iEXT != glBinormal3iEXT);
  rCtx->dsp.CurrTable()->glBinormal3iEXT(bx, by, bz);
}

REGAL_DECL void REGAL_CALL glBinormal3ivEXT(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3ivEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3ivEXT != glBinormal3ivEXT);
  rCtx->dsp.CurrTable()->glBinormal3ivEXT(v);
}

REGAL_DECL void REGAL_CALL glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3sEXT(", bx, ", ", by, ", ", bz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3sEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3sEXT != glBinormal3sEXT);
  rCtx->dsp.CurrTable()->glBinormal3sEXT(bx, by, bz);
}

REGAL_DECL void REGAL_CALL glBinormal3svEXT(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormal3svEXT(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3svEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormal3svEXT != glBinormal3svEXT);
  rCtx->dsp.CurrTable()->glBinormal3svEXT(v);
}

REGAL_DECL void REGAL_CALL glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTangentPointerEXT(", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTangentPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTangentPointerEXT != glTangentPointerEXT);
  rCtx->dsp.CurrTable()->glTangentPointerEXT(type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBinormalPointerEXT(", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBinormalPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBinormalPointerEXT != glBinormalPointerEXT);
  rCtx->dsp.CurrTable()->glBinormalPointerEXT(type, stride, pointer);
}

/* GL_SUNX_constant_data */

REGAL_DECL void REGAL_CALL glFinishTextureSUNX(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFinishTextureSUNX()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFinishTextureSUNX);
  RegalAssert(rCtx->dsp.CurrTable()->glFinishTextureSUNX != glFinishTextureSUNX);
  rCtx->dsp.CurrTable()->glFinishTextureSUNX();
}

/* GL_SUN_global_alpha */

REGAL_DECL void REGAL_CALL glGlobalAlphaFactorbSUN(GLbyte factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGlobalAlphaFactorbSUN(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorbSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorbSUN != glGlobalAlphaFactorbSUN);
  rCtx->dsp.CurrTable()->glGlobalAlphaFactorbSUN(factor);
}

REGAL_DECL void REGAL_CALL glGlobalAlphaFactorsSUN(GLshort factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGlobalAlphaFactorsSUN(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorsSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorsSUN != glGlobalAlphaFactorsSUN);
  rCtx->dsp.CurrTable()->glGlobalAlphaFactorsSUN(factor);
}

REGAL_DECL void REGAL_CALL glGlobalAlphaFactoriSUN(GLint factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGlobalAlphaFactoriSUN(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactoriSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactoriSUN != glGlobalAlphaFactoriSUN);
  rCtx->dsp.CurrTable()->glGlobalAlphaFactoriSUN(factor);
}

REGAL_DECL void REGAL_CALL glGlobalAlphaFactorfSUN(GLfloat factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGlobalAlphaFactorfSUN(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorfSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorfSUN != glGlobalAlphaFactorfSUN);
  rCtx->dsp.CurrTable()->glGlobalAlphaFactorfSUN(factor);
}

REGAL_DECL void REGAL_CALL glGlobalAlphaFactordSUN(GLdouble factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGlobalAlphaFactordSUN(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactordSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactordSUN != glGlobalAlphaFactordSUN);
  rCtx->dsp.CurrTable()->glGlobalAlphaFactordSUN(factor);
}

REGAL_DECL void REGAL_CALL glGlobalAlphaFactorubSUN(GLubyte factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGlobalAlphaFactorubSUN(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorubSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorubSUN != glGlobalAlphaFactorubSUN);
  rCtx->dsp.CurrTable()->glGlobalAlphaFactorubSUN(factor);
}

REGAL_DECL void REGAL_CALL glGlobalAlphaFactorusSUN(GLushort factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGlobalAlphaFactorusSUN(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorusSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactorusSUN != glGlobalAlphaFactorusSUN);
  rCtx->dsp.CurrTable()->glGlobalAlphaFactorusSUN(factor);
}

REGAL_DECL void REGAL_CALL glGlobalAlphaFactoruiSUN(GLuint factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGlobalAlphaFactoruiSUN(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactoruiSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glGlobalAlphaFactoruiSUN != glGlobalAlphaFactoruiSUN);
  rCtx->dsp.CurrTable()->glGlobalAlphaFactoruiSUN(factor);
}

/* GL_SUN_triangle_list */

REGAL_DECL void REGAL_CALL glReplacementCodeuiSUN(GLuint code)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiSUN(", code, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiSUN != glReplacementCodeuiSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiSUN(code);
}

REGAL_DECL void REGAL_CALL glReplacementCodeusSUN(GLushort code)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeusSUN(", code, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeusSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeusSUN != glReplacementCodeusSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeusSUN(code);
}

REGAL_DECL void REGAL_CALL glReplacementCodeubSUN(GLubyte code)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeubSUN(", code, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeubSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeubSUN != glReplacementCodeubSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeubSUN(code);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuivSUN(const GLuint *code)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuivSUN(", code, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuivSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuivSUN != glReplacementCodeuivSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuivSUN(code);
}

REGAL_DECL void REGAL_CALL glReplacementCodeusvSUN(const GLushort *code)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeusvSUN(", code, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeusvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeusvSUN != glReplacementCodeusvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeusvSUN(code);
}

REGAL_DECL void REGAL_CALL glReplacementCodeubvSUN(const GLubyte *code)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeubvSUN(", code, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeubvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeubvSUN != glReplacementCodeubvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeubvSUN(code);
}

REGAL_DECL void REGAL_CALL glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodePointerSUN(", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodePointerSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodePointerSUN != glReplacementCodePointerSUN);
  rCtx->dsp.CurrTable()->glReplacementCodePointerSUN(type, stride, pointer);
}

/* GL_SUN_vertex */

REGAL_DECL void REGAL_CALL glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4ubVertex2fSUN(", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubVertex2fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubVertex2fSUN != glColor4ubVertex2fSUN);
  rCtx->dsp.CurrTable()->glColor4ubVertex2fSUN(r, g, b, a, x, y);
}

REGAL_DECL void REGAL_CALL glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4ubVertex2fvSUN(", c, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubVertex2fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubVertex2fvSUN != glColor4ubVertex2fvSUN);
  rCtx->dsp.CurrTable()->glColor4ubVertex2fvSUN(c, v);
}

REGAL_DECL void REGAL_CALL glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4ubVertex3fSUN(", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubVertex3fSUN != glColor4ubVertex3fSUN);
  rCtx->dsp.CurrTable()->glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
}

REGAL_DECL void REGAL_CALL glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4ubVertex3fvSUN(", c, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4ubVertex3fvSUN != glColor4ubVertex3fvSUN);
  rCtx->dsp.CurrTable()->glColor4ubVertex3fvSUN(c, v);
}

REGAL_DECL void REGAL_CALL glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3fVertex3fSUN(", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3fVertex3fSUN != glColor3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glColor3fVertex3fSUN(r, g, b, x, y, z);
}

REGAL_DECL void REGAL_CALL glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3fVertex3fvSUN(", c, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3fVertex3fvSUN != glColor3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glColor3fVertex3fvSUN(c, v);
}

REGAL_DECL void REGAL_CALL glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3fVertex3fSUN(", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3fVertex3fSUN != glNormal3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
}

REGAL_DECL void REGAL_CALL glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3fVertex3fvSUN(", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3fVertex3fvSUN != glNormal3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glNormal3fVertex3fvSUN(n, v);
}

REGAL_DECL void REGAL_CALL glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4fNormal3fVertex3fSUN(", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4fNormal3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4fNormal3fVertex3fSUN != glColor4fNormal3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
}

REGAL_DECL void REGAL_CALL glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4fNormal3fVertex3fvSUN(", c, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4fNormal3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4fNormal3fVertex3fvSUN != glColor4fNormal3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glColor4fNormal3fVertex3fvSUN(c, n, v);
}

REGAL_DECL void REGAL_CALL glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fVertex3fSUN(", s, ", ", t, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fVertex3fSUN != glTexCoord2fVertex3fSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fVertex3fSUN(s, t, x, y, z);
}

REGAL_DECL void REGAL_CALL glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fVertex3fvSUN(", tc, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fVertex3fvSUN != glTexCoord2fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fVertex3fvSUN(tc, v);
}

REGAL_DECL void REGAL_CALL glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4fVertex4fSUN(", s, ", ", t, ", ", p, ", ", q, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fVertex4fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fVertex4fSUN != glTexCoord4fVertex4fSUN);
  rCtx->dsp.CurrTable()->glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4fVertex4fvSUN(", tc, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fVertex4fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fVertex4fvSUN != glTexCoord4fVertex4fvSUN);
  rCtx->dsp.CurrTable()->glTexCoord4fVertex4fvSUN(tc, v);
}

REGAL_DECL void REGAL_CALL glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fColor4ubVertex3fSUN(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor4ubVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor4ubVertex3fSUN != glTexCoord2fColor4ubVertex3fSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
}

REGAL_DECL void REGAL_CALL glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fColor4ubVertex3fvSUN(", tc, ", ", c, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor4ubVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor4ubVertex3fvSUN != glTexCoord2fColor4ubVertex3fvSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
}

REGAL_DECL void REGAL_CALL glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fColor3fVertex3fSUN(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor3fVertex3fSUN != glTexCoord2fColor3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
}

REGAL_DECL void REGAL_CALL glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fColor3fVertex3fvSUN(", tc, ", ", c, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor3fVertex3fvSUN != glTexCoord2fColor3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
}

REGAL_DECL void REGAL_CALL glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fNormal3fVertex3fSUN(", s, ", ", t, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fNormal3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fNormal3fVertex3fSUN != glTexCoord2fNormal3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
}

REGAL_DECL void REGAL_CALL glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fNormal3fVertex3fvSUN(", tc, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fNormal3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fNormal3fVertex3fvSUN != glTexCoord2fNormal3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
}

REGAL_DECL void REGAL_CALL glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fColor4fNormal3fVertex3fSUN(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor4fNormal3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor4fNormal3fVertex3fSUN != glTexCoord2fColor4fNormal3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

REGAL_DECL void REGAL_CALL glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2fColor4fNormal3fVertex3fvSUN(", tc, ", ", c, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor4fNormal3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2fColor4fNormal3fVertex3fvSUN != glTexCoord2fColor4fNormal3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
}

REGAL_DECL void REGAL_CALL glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4fColor4fNormal3fVertex4fSUN(", s, ", ", t, ", ", p, ", ", q, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fColor4fNormal3fVertex4fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fColor4fNormal3fVertex4fSUN != glTexCoord4fColor4fNormal3fVertex4fSUN);
  rCtx->dsp.CurrTable()->glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4fColor4fNormal3fVertex4fvSUN(", tc, ", ", c, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fColor4fNormal3fVertex4fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4fColor4fNormal3fVertex4fvSUN != glTexCoord4fColor4fNormal3fVertex4fvSUN);
  rCtx->dsp.CurrTable()->glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiVertex3fSUN(", rc, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiVertex3fSUN != glReplacementCodeuiVertex3fSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiVertex3fSUN(rc, x, y, z);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiVertex3fvSUN(", rc, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiVertex3fvSUN != glReplacementCodeuiVertex3fvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiVertex3fvSUN(rc, v);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiColor4ubVertex3fSUN(", rc, ", ", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor4ubVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor4ubVertex3fSUN != glReplacementCodeuiColor4ubVertex3fSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiColor4ubVertex3fvSUN(", rc, ", ", c, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor4ubVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor4ubVertex3fvSUN != glReplacementCodeuiColor4ubVertex3fvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiColor3fVertex3fSUN(", rc, ", ", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor3fVertex3fSUN != glReplacementCodeuiColor3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiColor3fVertex3fvSUN(", rc, ", ", c, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor3fVertex3fvSUN != glReplacementCodeuiColor3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiNormal3fVertex3fSUN(", rc, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiNormal3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiNormal3fVertex3fSUN != glReplacementCodeuiNormal3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiNormal3fVertex3fvSUN(", rc, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiNormal3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiNormal3fVertex3fvSUN != glReplacementCodeuiNormal3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiColor4fNormal3fVertex3fSUN(", rc, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor4fNormal3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor4fNormal3fVertex3fSUN != glReplacementCodeuiColor4fNormal3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiColor4fNormal3fVertex3fvSUN(", rc, ", ", c, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor4fNormal3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiColor4fNormal3fVertex3fvSUN != glReplacementCodeuiColor4fNormal3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiTexCoord2fVertex3fSUN(", rc, ", ", s, ", ", t, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fVertex3fSUN != glReplacementCodeuiTexCoord2fVertex3fSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiTexCoord2fVertex3fvSUN(", rc, ", ", tc, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fVertex3fvSUN != glReplacementCodeuiTexCoord2fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(", rc, ", ", s, ", ", t, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN != glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(", rc, ", ", tc, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN != glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(", rc, ", ", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN != glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

REGAL_DECL void REGAL_CALL glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(", rc, ", ", tc, ", ", c, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN != glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
  rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
}

/* GL_EXT_blend_func_separate */

REGAL_DECL void REGAL_CALL glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFuncSeparateEXT(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparateEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparateEXT != glBlendFuncSeparateEXT);
  rCtx->dsp.CurrTable()->glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

/* GL_INGR_blend_func_separate */

REGAL_DECL void REGAL_CALL glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFuncSeparateINGR(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparateINGR);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparateINGR != glBlendFuncSeparateINGR);
  rCtx->dsp.CurrTable()->glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

/* GL_EXT_vertex_weighting */

REGAL_DECL void REGAL_CALL glVertexWeightfEXT(GLfloat weight)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexWeightfEXT(", weight, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeightfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeightfEXT != glVertexWeightfEXT);
  rCtx->dsp.CurrTable()->glVertexWeightfEXT(weight);
}

REGAL_DECL void REGAL_CALL glVertexWeightfvEXT(const GLfloat *weight)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexWeightfvEXT(", weight, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeightfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeightfvEXT != glVertexWeightfvEXT);
  rCtx->dsp.CurrTable()->glVertexWeightfvEXT(weight);
}

REGAL_DECL void REGAL_CALL glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexWeightPointerEXT(", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeightPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeightPointerEXT != glVertexWeightPointerEXT);
  rCtx->dsp.CurrTable()->glVertexWeightPointerEXT(size, type, stride, pointer);
}

/* GL_NV_vertex_array_range */

REGAL_DECL void REGAL_CALL glFlushVertexArrayRangeNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFlushVertexArrayRangeNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFlushVertexArrayRangeNV);
  RegalAssert(rCtx->dsp.CurrTable()->glFlushVertexArrayRangeNV != glFlushVertexArrayRangeNV);
  rCtx->dsp.CurrTable()->glFlushVertexArrayRangeNV();
}

REGAL_DECL void REGAL_CALL glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexArrayRangeNV(", size, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexArrayRangeNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexArrayRangeNV != glVertexArrayRangeNV);
  rCtx->dsp.CurrTable()->glVertexArrayRangeNV(size, pointer);
}

/* GL_NV_register_combiners */

REGAL_DECL void REGAL_CALL glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCombinerParameterfvNV(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerParameterfvNV != glCombinerParameterfvNV);
  rCtx->dsp.CurrTable()->glCombinerParameterfvNV(pname, params);
}

REGAL_DECL void REGAL_CALL glCombinerParameterfNV(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCombinerParameterfNV(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerParameterfNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerParameterfNV != glCombinerParameterfNV);
  rCtx->dsp.CurrTable()->glCombinerParameterfNV(pname, param);
}

REGAL_DECL void REGAL_CALL glCombinerParameterivNV(GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCombinerParameterivNV(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerParameterivNV != glCombinerParameterivNV);
  rCtx->dsp.CurrTable()->glCombinerParameterivNV(pname, params);
}

REGAL_DECL void REGAL_CALL glCombinerParameteriNV(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCombinerParameteriNV(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerParameteriNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerParameteriNV != glCombinerParameteriNV);
  rCtx->dsp.CurrTable()->glCombinerParameteriNV(pname, param);
}

REGAL_DECL void REGAL_CALL glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCombinerInputNV(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(input), ", ", toString(mapping), ", ", toString(componentUsage), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerInputNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerInputNV != glCombinerInputNV);
  rCtx->dsp.CurrTable()->glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
}

REGAL_DECL void REGAL_CALL glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCombinerOutputNV(", toString(stage), ", ", toString(portion), ", ", toString(abOutput), ", ", toString(cdOutput), ", ", toString(sumOutput), ", ", toString(scale), ", ", toString(bias), ", ", abDotProduct, ", ", cdDotProduct, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerOutputNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerOutputNV != glCombinerOutputNV);
  rCtx->dsp.CurrTable()->glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

REGAL_DECL void REGAL_CALL glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFinalCombinerInputNV(", toString(variable), ", ", toString(input), ", ", toString(mapping), ", ", toString(componentUsage), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFinalCombinerInputNV);
  RegalAssert(rCtx->dsp.CurrTable()->glFinalCombinerInputNV != glFinalCombinerInputNV);
  rCtx->dsp.CurrTable()->glFinalCombinerInputNV(variable, input, mapping, componentUsage);
}

REGAL_DECL void REGAL_CALL glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCombinerInputParameterfvNV(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerInputParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerInputParameterfvNV != glGetCombinerInputParameterfvNV);
  rCtx->dsp.CurrTable()->glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
}

REGAL_DECL void REGAL_CALL glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCombinerInputParameterivNV(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerInputParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerInputParameterivNV != glGetCombinerInputParameterivNV);
  rCtx->dsp.CurrTable()->glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
}

REGAL_DECL void REGAL_CALL glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCombinerOutputParameterfvNV(", toString(stage), ", ", toString(portion), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerOutputParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerOutputParameterfvNV != glGetCombinerOutputParameterfvNV);
  rCtx->dsp.CurrTable()->glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
}

REGAL_DECL void REGAL_CALL glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCombinerOutputParameterivNV(", toString(stage), ", ", toString(portion), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerOutputParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerOutputParameterivNV != glGetCombinerOutputParameterivNV);
  rCtx->dsp.CurrTable()->glGetCombinerOutputParameterivNV(stage, portion, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFinalCombinerInputParameterfvNV(", toString(variable), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFinalCombinerInputParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFinalCombinerInputParameterfvNV != glGetFinalCombinerInputParameterfvNV);
  rCtx->dsp.CurrTable()->glGetFinalCombinerInputParameterfvNV(variable, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFinalCombinerInputParameterivNV(", toString(variable), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFinalCombinerInputParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFinalCombinerInputParameterivNV != glGetFinalCombinerInputParameterivNV);
  rCtx->dsp.CurrTable()->glGetFinalCombinerInputParameterivNV(variable, pname, params);
}

/* GL_MESA_resize_buffers */

REGAL_DECL void REGAL_CALL glResizeBuffersMESA(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glResizeBuffersMESA()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glResizeBuffersMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glResizeBuffersMESA != glResizeBuffersMESA);
  rCtx->dsp.CurrTable()->glResizeBuffersMESA();
}

/* GL_MESA_window_pos */

REGAL_DECL void REGAL_CALL glWindowPos2dMESA(GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2dMESA(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dMESA != glWindowPos2dMESA);
  rCtx->dsp.CurrTable()->glWindowPos2dMESA(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2dvMESA(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2dvMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dvMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2dvMESA != glWindowPos2dvMESA);
  rCtx->dsp.CurrTable()->glWindowPos2dvMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos2fMESA(GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2fMESA(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fMESA != glWindowPos2fMESA);
  rCtx->dsp.CurrTable()->glWindowPos2fMESA(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2fvMESA(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2fvMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fvMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2fvMESA != glWindowPos2fvMESA);
  rCtx->dsp.CurrTable()->glWindowPos2fvMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos2iMESA(GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2iMESA(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2iMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2iMESA != glWindowPos2iMESA);
  rCtx->dsp.CurrTable()->glWindowPos2iMESA(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2ivMESA(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2ivMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2ivMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2ivMESA != glWindowPos2ivMESA);
  rCtx->dsp.CurrTable()->glWindowPos2ivMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos2sMESA(GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2sMESA(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2sMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2sMESA != glWindowPos2sMESA);
  rCtx->dsp.CurrTable()->glWindowPos2sMESA(x, y);
}

REGAL_DECL void REGAL_CALL glWindowPos2svMESA(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos2svMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2svMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos2svMESA != glWindowPos2svMESA);
  rCtx->dsp.CurrTable()->glWindowPos2svMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3dMESA(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dMESA != glWindowPos3dMESA);
  rCtx->dsp.CurrTable()->glWindowPos3dMESA(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3dvMESA(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3dvMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dvMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3dvMESA != glWindowPos3dvMESA);
  rCtx->dsp.CurrTable()->glWindowPos3dvMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3fMESA(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fMESA != glWindowPos3fMESA);
  rCtx->dsp.CurrTable()->glWindowPos3fMESA(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3fvMESA(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3fvMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fvMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3fvMESA != glWindowPos3fvMESA);
  rCtx->dsp.CurrTable()->glWindowPos3fvMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos3iMESA(GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3iMESA(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3iMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3iMESA != glWindowPos3iMESA);
  rCtx->dsp.CurrTable()->glWindowPos3iMESA(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3ivMESA(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3ivMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3ivMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3ivMESA != glWindowPos3ivMESA);
  rCtx->dsp.CurrTable()->glWindowPos3ivMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3sMESA(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3sMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3sMESA != glWindowPos3sMESA);
  rCtx->dsp.CurrTable()->glWindowPos3sMESA(x, y, z);
}

REGAL_DECL void REGAL_CALL glWindowPos3svMESA(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos3svMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3svMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos3svMESA != glWindowPos3svMESA);
  rCtx->dsp.CurrTable()->glWindowPos3svMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos4dMESA(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4dMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4dMESA != glWindowPos4dMESA);
  rCtx->dsp.CurrTable()->glWindowPos4dMESA(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glWindowPos4dvMESA(const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos4dvMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4dvMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4dvMESA != glWindowPos4dvMESA);
  rCtx->dsp.CurrTable()->glWindowPos4dvMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos4fMESA(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4fMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4fMESA != glWindowPos4fMESA);
  rCtx->dsp.CurrTable()->glWindowPos4fMESA(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glWindowPos4fvMESA(const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos4fvMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4fvMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4fvMESA != glWindowPos4fvMESA);
  rCtx->dsp.CurrTable()->glWindowPos4fvMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos4iMESA(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4iMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4iMESA != glWindowPos4iMESA);
  rCtx->dsp.CurrTable()->glWindowPos4iMESA(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glWindowPos4ivMESA(const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos4ivMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4ivMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4ivMESA != glWindowPos4ivMESA);
  rCtx->dsp.CurrTable()->glWindowPos4ivMESA(v);
}

REGAL_DECL void REGAL_CALL glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos4sMESA(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4sMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4sMESA != glWindowPos4sMESA);
  rCtx->dsp.CurrTable()->glWindowPos4sMESA(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glWindowPos4svMESA(const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWindowPos4svMESA(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4svMESA);
  RegalAssert(rCtx->dsp.CurrTable()->glWindowPos4svMESA != glWindowPos4svMESA);
  rCtx->dsp.CurrTable()->glWindowPos4svMESA(v);
}

/* GL_IBM_multimode_draw_arrays */

REGAL_DECL void REGAL_CALL glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiModeDrawArraysIBM(", mode, ", ", first, ", ", count, ", ", primcount, ", ", modestride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiModeDrawArraysIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiModeDrawArraysIBM != glMultiModeDrawArraysIBM);
  rCtx->dsp.CurrTable()->glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
}

REGAL_DECL void REGAL_CALL glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiModeDrawElementsIBM(", mode, ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ", ", modestride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiModeDrawElementsIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiModeDrawElementsIBM != glMultiModeDrawElementsIBM);
  rCtx->dsp.CurrTable()->glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
}

/* GL_IBM_vertex_array_lists */

REGAL_DECL void REGAL_CALL glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorPointerListIBM(", size, ", ", toString(type), ", ", stride, ", ", pointer, ", ", ptrstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorPointerListIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glColorPointerListIBM != glColorPointerListIBM);
  rCtx->dsp.CurrTable()->glColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

REGAL_DECL void REGAL_CALL glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColorPointerListIBM(", size, ", ", toString(type), ", ", stride, ", ", pointer, ", ", ptrstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorPointerListIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorPointerListIBM != glSecondaryColorPointerListIBM);
  rCtx->dsp.CurrTable()->glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

REGAL_DECL void REGAL_CALL glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEdgeFlagPointerListIBM(", stride, ", ", pointer, ", ", ptrstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagPointerListIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagPointerListIBM != glEdgeFlagPointerListIBM);
  rCtx->dsp.CurrTable()->glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
}

REGAL_DECL void REGAL_CALL glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordPointerListIBM(", toString(type), ", ", stride, ", ", pointer, ", ", ptrstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordPointerListIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordPointerListIBM != glFogCoordPointerListIBM);
  rCtx->dsp.CurrTable()->glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
}

REGAL_DECL void REGAL_CALL glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexPointerListIBM(", toString(type), ", ", stride, ", ", pointer, ", ", ptrstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexPointerListIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexPointerListIBM != glIndexPointerListIBM);
  rCtx->dsp.CurrTable()->glIndexPointerListIBM(type, stride, pointer, ptrstride);
}

REGAL_DECL void REGAL_CALL glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalPointerListIBM(", toString(type), ", ", stride, ", ", pointer, ", ", ptrstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalPointerListIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalPointerListIBM != glNormalPointerListIBM);
  rCtx->dsp.CurrTable()->glNormalPointerListIBM(type, stride, pointer, ptrstride);
}

REGAL_DECL void REGAL_CALL glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordPointerListIBM(", size, ", ", toString(type), ", ", stride, ", ", pointer, ", ", ptrstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordPointerListIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordPointerListIBM != glTexCoordPointerListIBM);
  rCtx->dsp.CurrTable()->glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
}

REGAL_DECL void REGAL_CALL glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexPointerListIBM(", size, ", ", toString(type), ", ", stride, ", ", pointer, ", ", ptrstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexPointerListIBM);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexPointerListIBM != glVertexPointerListIBM);
  rCtx->dsp.CurrTable()->glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
}

/* GL_3DFX_tbuffer */

REGAL_DECL void REGAL_CALL glTbufferMask3DFX(GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTbufferMask3DFX(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTbufferMask3DFX);
  RegalAssert(rCtx->dsp.CurrTable()->glTbufferMask3DFX != glTbufferMask3DFX);
  rCtx->dsp.CurrTable()->glTbufferMask3DFX(mask);
}

/* GL_EXT_multisample */

REGAL_DECL void REGAL_CALL glSampleMaskEXT(GLclampf value, GLboolean invert)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSampleMaskEXT(", value, ", ", invert, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMaskEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMaskEXT != glSampleMaskEXT);
  rCtx->dsp.CurrTable()->glSampleMaskEXT(value, invert);
}

REGAL_DECL void REGAL_CALL glSamplePatternEXT(GLenum pattern)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSamplePatternEXT(", toString(pattern), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSamplePatternEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSamplePatternEXT != glSamplePatternEXT);
  rCtx->dsp.CurrTable()->glSamplePatternEXT(pattern);
}

/* GL_SGIS_texture_color_mask */

REGAL_DECL void REGAL_CALL glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureColorMaskSGIS(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureColorMaskSGIS);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureColorMaskSGIS != glTextureColorMaskSGIS);
  rCtx->dsp.CurrTable()->glTextureColorMaskSGIS(red, green, blue, alpha);
}

/* GL_SGIX_igloo_interface */

REGAL_DECL void REGAL_CALL glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIglooInterfaceSGIX(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIglooInterfaceSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glIglooInterfaceSGIX != glIglooInterfaceSGIX);
  rCtx->dsp.CurrTable()->glIglooInterfaceSGIX(pname, params);
}

/* GL_NV_fence */

REGAL_DECL void REGAL_CALL glDeleteFencesNV(GLsizei n, const GLuint *fences)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteFencesNV(", n, ", ", fences, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFencesNV);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFencesNV != glDeleteFencesNV);
  rCtx->dsp.CurrTable()->glDeleteFencesNV(n, fences);
}

REGAL_DECL void REGAL_CALL glGenFencesNV(GLsizei n, GLuint *fences)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenFencesNV(", n, ", ", fences, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenFencesNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGenFencesNV != glGenFencesNV);
  rCtx->dsp.CurrTable()->glGenFencesNV(n, fences);
}

REGAL_DECL GLboolean REGAL_CALL glIsFenceNV(GLuint fence)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsFenceNV(", fence, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsFenceNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsFenceNV != glIsFenceNV);
  return rCtx->dsp.CurrTable()->glIsFenceNV(fence);
}

REGAL_DECL GLboolean REGAL_CALL glTestFenceNV(GLuint fence)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTestFenceNV(", fence, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTestFenceNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTestFenceNV != glTestFenceNV);
  return rCtx->dsp.CurrTable()->glTestFenceNV(fence);
}

REGAL_DECL void REGAL_CALL glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFenceivNV(", fence, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFenceivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFenceivNV != glGetFenceivNV);
  rCtx->dsp.CurrTable()->glGetFenceivNV(fence, pname, params);
}

REGAL_DECL void REGAL_CALL glFinishFenceNV(GLuint fence)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFinishFenceNV(", fence, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFinishFenceNV);
  RegalAssert(rCtx->dsp.CurrTable()->glFinishFenceNV != glFinishFenceNV);
  rCtx->dsp.CurrTable()->glFinishFenceNV(fence);
}

REGAL_DECL void REGAL_CALL glSetFenceNV(GLuint fence, GLenum condition)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSetFenceNV(", fence, ", ", toString(condition), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSetFenceNV);
  RegalAssert(rCtx->dsp.CurrTable()->glSetFenceNV != glSetFenceNV);
  rCtx->dsp.CurrTable()->glSetFenceNV(fence, condition);
}

/* GL_NV_evaluators */

REGAL_DECL void REGAL_CALL glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapControlPointsNV(", toString(target), ", ", index, ", ", toString(type), ", ", ustride, ", ", vstride, ", ", uorder, ", ", vorder, ", ", packed, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapControlPointsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMapControlPointsNV != glMapControlPointsNV);
  rCtx->dsp.CurrTable()->glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
}

REGAL_DECL void REGAL_CALL glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapParameterivNV(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMapParameterivNV != glMapParameterivNV);
  rCtx->dsp.CurrTable()->glMapParameterivNV(target, pname, params);
}

REGAL_DECL void REGAL_CALL glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapParameterfvNV(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMapParameterfvNV != glMapParameterfvNV);
  rCtx->dsp.CurrTable()->glMapParameterfvNV(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMapControlPointsNV(", toString(target), ", ", index, ", ", toString(type), ", ", ustride, ", ", vstride, ", ", packed, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapControlPointsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapControlPointsNV != glGetMapControlPointsNV);
  rCtx->dsp.CurrTable()->glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
}

REGAL_DECL void REGAL_CALL glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMapParameterivNV(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapParameterivNV != glGetMapParameterivNV);
  rCtx->dsp.CurrTable()->glGetMapParameterivNV(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMapParameterfvNV(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapParameterfvNV != glGetMapParameterfvNV);
  rCtx->dsp.CurrTable()->glGetMapParameterfvNV(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMapAttribParameterivNV(", toString(target), ", ", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapAttribParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapAttribParameterivNV != glGetMapAttribParameterivNV);
  rCtx->dsp.CurrTable()->glGetMapAttribParameterivNV(target, index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMapAttribParameterfvNV(", toString(target), ", ", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapAttribParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMapAttribParameterfvNV != glGetMapAttribParameterfvNV);
  rCtx->dsp.CurrTable()->glGetMapAttribParameterfvNV(target, index, pname, params);
}

REGAL_DECL void REGAL_CALL glEvalMapsNV(GLenum target, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEvalMapsNV(", toString(target), ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEvalMapsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glEvalMapsNV != glEvalMapsNV);
  rCtx->dsp.CurrTable()->glEvalMapsNV(target, mode);
}

/* GL_NV_register_combiners2 */

REGAL_DECL void REGAL_CALL glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCombinerStageParameterfvNV(", toString(stage), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerStageParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCombinerStageParameterfvNV != glCombinerStageParameterfvNV);
  rCtx->dsp.CurrTable()->glCombinerStageParameterfvNV(stage, pname, params);
}

REGAL_DECL void REGAL_CALL glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCombinerStageParameterfvNV(", toString(stage), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerStageParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCombinerStageParameterfvNV != glGetCombinerStageParameterfvNV);
  rCtx->dsp.CurrTable()->glGetCombinerStageParameterfvNV(stage, pname, params);
}

/* GL_NV_vertex_program */

REGAL_DECL GLboolean REGAL_CALL glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAreProgramsResidentNV(", n, ", ", programs, ", ", residences, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAreProgramsResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glAreProgramsResidentNV != glAreProgramsResidentNV);
  return rCtx->dsp.CurrTable()->glAreProgramsResidentNV(n, programs, residences);
}

REGAL_DECL void REGAL_CALL glBindProgramNV(GLenum target, GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindProgramNV(", toString(target), ", ", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindProgramNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBindProgramNV != glBindProgramNV);
  rCtx->dsp.CurrTable()->glBindProgramNV(target, id);
}

REGAL_DECL void REGAL_CALL glDeleteProgramsNV(GLsizei n, const GLuint *programs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteProgramsNV(", n, ", ", programs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteProgramsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteProgramsNV != glDeleteProgramsNV);
  rCtx->dsp.CurrTable()->glDeleteProgramsNV(n, programs);
}

REGAL_DECL void REGAL_CALL glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glExecuteProgramNV(", toString(target), ", ", id, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glExecuteProgramNV);
  RegalAssert(rCtx->dsp.CurrTable()->glExecuteProgramNV != glExecuteProgramNV);
  rCtx->dsp.CurrTable()->glExecuteProgramNV(target, id, params);
}

REGAL_DECL void REGAL_CALL glGenProgramsNV(GLsizei n, GLuint *programs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenProgramsNV(", n, ", ", programs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenProgramsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGenProgramsNV != glGenProgramsNV);
  rCtx->dsp.CurrTable()->glGenProgramsNV(n, programs);
}

REGAL_DECL void REGAL_CALL glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramParameterdvNV(", toString(target), ", ", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramParameterdvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramParameterdvNV != glGetProgramParameterdvNV);
  rCtx->dsp.CurrTable()->glGetProgramParameterdvNV(target, index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramParameterfvNV(", toString(target), ", ", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramParameterfvNV != glGetProgramParameterfvNV);
  rCtx->dsp.CurrTable()->glGetProgramParameterfvNV(target, index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramivNV(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramivNV != glGetProgramivNV);
  rCtx->dsp.CurrTable()->glGetProgramivNV(id, pname, params);
}

REGAL_DECL void REGAL_CALL glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramStringNV(", id, ", ", toString(pname), ", ", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramStringNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramStringNV != glGetProgramStringNV);
  rCtx->dsp.CurrTable()->glGetProgramStringNV(id, pname, program);
}

REGAL_DECL void REGAL_CALL glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTrackMatrixivNV(", toString(target), ", ", address, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTrackMatrixivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTrackMatrixivNV != glGetTrackMatrixivNV);
  rCtx->dsp.CurrTable()->glGetTrackMatrixivNV(target, address, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribdvNV(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribdvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribdvNV != glGetVertexAttribdvNV);
  rCtx->dsp.CurrTable()->glGetVertexAttribdvNV(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribfvNV(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribfvNV != glGetVertexAttribfvNV);
  rCtx->dsp.CurrTable()->glGetVertexAttribfvNV(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribivNV(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribivNV != glGetVertexAttribivNV);
  rCtx->dsp.CurrTable()->glGetVertexAttribivNV(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribPointervNV(", index, ", ", toString(pname), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribPointervNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribPointervNV != glGetVertexAttribPointervNV);
  rCtx->dsp.CurrTable()->glGetVertexAttribPointervNV(index, pname, pointer);
}

REGAL_DECL GLboolean REGAL_CALL glIsProgramNV(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsProgramNV(", id, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsProgramNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsProgramNV != glIsProgramNV);
  return rCtx->dsp.CurrTable()->glIsProgramNV(id);
}

REGAL_DECL void REGAL_CALL glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLoadProgramNV(", toString(target), ", ", id, ", ", len, ", ", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLoadProgramNV);
  RegalAssert(rCtx->dsp.CurrTable()->glLoadProgramNV != glLoadProgramNV);
  rCtx->dsp.CurrTable()->glLoadProgramNV(target, id, len, program);
}

REGAL_DECL void REGAL_CALL glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameter4dNV(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameter4dNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameter4dNV != glProgramParameter4dNV);
  rCtx->dsp.CurrTable()->glProgramParameter4dNV(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameter4dvNV(", toString(target), ", ", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameter4dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameter4dvNV != glProgramParameter4dvNV);
  rCtx->dsp.CurrTable()->glProgramParameter4dvNV(target, index, v);
}

REGAL_DECL void REGAL_CALL glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameter4fNV(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameter4fNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameter4fNV != glProgramParameter4fNV);
  rCtx->dsp.CurrTable()->glProgramParameter4fNV(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameter4fvNV(", toString(target), ", ", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameter4fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameter4fvNV != glProgramParameter4fvNV);
  rCtx->dsp.CurrTable()->glProgramParameter4fvNV(target, index, v);
}

REGAL_DECL void REGAL_CALL glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameters4dvNV(", toString(target), ", ", index, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameters4dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameters4dvNV != glProgramParameters4dvNV);
  rCtx->dsp.CurrTable()->glProgramParameters4dvNV(target, index, count, v);
}

REGAL_DECL void REGAL_CALL glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameters4fvNV(", toString(target), ", ", index, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameters4fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameters4fvNV != glProgramParameters4fvNV);
  rCtx->dsp.CurrTable()->glProgramParameters4fvNV(target, index, count, v);
}

REGAL_DECL void REGAL_CALL glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRequestResidentProgramsNV(", n, ", ", programs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRequestResidentProgramsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glRequestResidentProgramsNV != glRequestResidentProgramsNV);
  rCtx->dsp.CurrTable()->glRequestResidentProgramsNV(n, programs);
}

REGAL_DECL void REGAL_CALL glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTrackMatrixNV(", toString(target), ", ", address, ", ", toString(matrix), ", ", toString(transform), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTrackMatrixNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTrackMatrixNV != glTrackMatrixNV);
  rCtx->dsp.CurrTable()->glTrackMatrixNV(target, address, matrix, transform);
}

REGAL_DECL void REGAL_CALL glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribPointerNV(", index, ", ", fsize, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribPointerNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribPointerNV != glVertexAttribPointerNV);
  rCtx->dsp.CurrTable()->glVertexAttribPointerNV(index, fsize, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1dNV(GLuint index, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1dNV(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dNV != glVertexAttrib1dNV);
  rCtx->dsp.CurrTable()->glVertexAttrib1dNV(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1dvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1dvNV != glVertexAttrib1dvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib1dvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1fNV(GLuint index, GLfloat x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1fNV(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fNV != glVertexAttrib1fNV);
  rCtx->dsp.CurrTable()->glVertexAttrib1fNV(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1fvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1fvNV != glVertexAttrib1fvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib1fvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1sNV(GLuint index, GLshort x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1sNV(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1sNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1sNV != glVertexAttrib1sNV);
  rCtx->dsp.CurrTable()->glVertexAttrib1sNV(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1svNV(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1svNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1svNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1svNV != glVertexAttrib1svNV);
  rCtx->dsp.CurrTable()->glVertexAttrib1svNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2dNV(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dNV != glVertexAttrib2dNV);
  rCtx->dsp.CurrTable()->glVertexAttrib2dNV(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2dvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2dvNV != glVertexAttrib2dvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib2dvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2fNV(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fNV != glVertexAttrib2fNV);
  rCtx->dsp.CurrTable()->glVertexAttrib2fNV(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2fvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2fvNV != glVertexAttrib2fvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib2fvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2sNV(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2sNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2sNV != glVertexAttrib2sNV);
  rCtx->dsp.CurrTable()->glVertexAttrib2sNV(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2svNV(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2svNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2svNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2svNV != glVertexAttrib2svNV);
  rCtx->dsp.CurrTable()->glVertexAttrib2svNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3dNV(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dNV != glVertexAttrib3dNV);
  rCtx->dsp.CurrTable()->glVertexAttrib3dNV(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3dvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3dvNV != glVertexAttrib3dvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib3dvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3fNV(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fNV != glVertexAttrib3fNV);
  rCtx->dsp.CurrTable()->glVertexAttrib3fNV(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3fvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3fvNV != glVertexAttrib3fvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib3fvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3sNV(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3sNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3sNV != glVertexAttrib3sNV);
  rCtx->dsp.CurrTable()->glVertexAttrib3sNV(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3svNV(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3svNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3svNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3svNV != glVertexAttrib3svNV);
  rCtx->dsp.CurrTable()->glVertexAttrib3svNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4dNV(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dNV != glVertexAttrib4dNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4dNV(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4dvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4dvNV != glVertexAttrib4dvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4dvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4fNV(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fNV != glVertexAttrib4fNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4fNV(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4fvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4fvNV != glVertexAttrib4fvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4fvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4sNV(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4sNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4sNV != glVertexAttrib4sNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4sNV(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4svNV(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4svNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4svNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4svNV != glVertexAttrib4svNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4svNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4ubNV(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ubNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ubNV != glVertexAttrib4ubNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4ubNV(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4ubvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ubvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4ubvNV != glVertexAttrib4ubvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4ubvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs1dvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs1dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs1dvNV != glVertexAttribs1dvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs1dvNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs1fvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs1fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs1fvNV != glVertexAttribs1fvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs1fvNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs1svNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs1svNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs1svNV != glVertexAttribs1svNV);
  rCtx->dsp.CurrTable()->glVertexAttribs1svNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs2dvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs2dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs2dvNV != glVertexAttribs2dvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs2dvNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs2fvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs2fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs2fvNV != glVertexAttribs2fvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs2fvNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs2svNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs2svNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs2svNV != glVertexAttribs2svNV);
  rCtx->dsp.CurrTable()->glVertexAttribs2svNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs3dvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs3dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs3dvNV != glVertexAttribs3dvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs3dvNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs3fvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs3fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs3fvNV != glVertexAttribs3fvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs3fvNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs3svNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs3svNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs3svNV != glVertexAttribs3svNV);
  rCtx->dsp.CurrTable()->glVertexAttribs3svNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs4dvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4dvNV != glVertexAttribs4dvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs4dvNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs4fvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4fvNV != glVertexAttribs4fvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs4fvNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs4svNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4svNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4svNV != glVertexAttribs4svNV);
  rCtx->dsp.CurrTable()->glVertexAttribs4svNV(index, n, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs4ubvNV(", index, ", ", n, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4ubvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4ubvNV != glVertexAttribs4ubvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs4ubvNV(index, n, v);
}

/* GL_ATI_envmap_bumpmap */

REGAL_DECL void REGAL_CALL glTexBumpParameterivATI(GLenum pname, GLint *param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexBumpParameterivATI(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexBumpParameterivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glTexBumpParameterivATI != glTexBumpParameterivATI);
  rCtx->dsp.CurrTable()->glTexBumpParameterivATI(pname, param);
}

REGAL_DECL void REGAL_CALL glTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexBumpParameterfvATI(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexBumpParameterfvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glTexBumpParameterfvATI != glTexBumpParameterfvATI);
  rCtx->dsp.CurrTable()->glTexBumpParameterfvATI(pname, param);
}

REGAL_DECL void REGAL_CALL glGetTexBumpParameterivATI(GLenum pname, GLint *param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexBumpParameterivATI(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexBumpParameterivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexBumpParameterivATI != glGetTexBumpParameterivATI);
  rCtx->dsp.CurrTable()->glGetTexBumpParameterivATI(pname, param);
}

REGAL_DECL void REGAL_CALL glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexBumpParameterfvATI(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexBumpParameterfvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexBumpParameterfvATI != glGetTexBumpParameterfvATI);
  rCtx->dsp.CurrTable()->glGetTexBumpParameterfvATI(pname, param);
}

/* GL_ATI_fragment_shader */

REGAL_DECL GLuint REGAL_CALL glGenFragmentShadersATI(GLuint range)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenFragmentShadersATI(", range, ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenFragmentShadersATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGenFragmentShadersATI != glGenFragmentShadersATI);
  return rCtx->dsp.CurrTable()->glGenFragmentShadersATI(range);
}

REGAL_DECL void REGAL_CALL glBindFragmentShaderATI(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindFragmentShaderATI(", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindFragmentShaderATI);
  RegalAssert(rCtx->dsp.CurrTable()->glBindFragmentShaderATI != glBindFragmentShaderATI);
  rCtx->dsp.CurrTable()->glBindFragmentShaderATI(id);
}

REGAL_DECL void REGAL_CALL glDeleteFragmentShaderATI(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteFragmentShaderATI(", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFragmentShaderATI);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFragmentShaderATI != glDeleteFragmentShaderATI);
  rCtx->dsp.CurrTable()->glDeleteFragmentShaderATI(id);
}

REGAL_DECL void REGAL_CALL glBeginFragmentShaderATI(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginFragmentShaderATI()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginFragmentShaderATI);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginFragmentShaderATI != glBeginFragmentShaderATI);
  rCtx->dsp.CurrTable()->glBeginFragmentShaderATI();
}

REGAL_DECL void REGAL_CALL glEndFragmentShaderATI(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndFragmentShaderATI()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndFragmentShaderATI);
  RegalAssert(rCtx->dsp.CurrTable()->glEndFragmentShaderATI != glEndFragmentShaderATI);
  rCtx->dsp.CurrTable()->glEndFragmentShaderATI();
}

REGAL_DECL void REGAL_CALL glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPassTexCoordATI(", dst, ", ", coord, ", ", toString(swizzle), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPassTexCoordATI);
  RegalAssert(rCtx->dsp.CurrTable()->glPassTexCoordATI != glPassTexCoordATI);
  rCtx->dsp.CurrTable()->glPassTexCoordATI(dst, coord, swizzle);
}

REGAL_DECL void REGAL_CALL glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSampleMapATI(", dst, ", ", interp, ", ", toString(swizzle), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMapATI);
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMapATI != glSampleMapATI);
  rCtx->dsp.CurrTable()->glSampleMapATI(dst, interp, swizzle);
}

REGAL_DECL void REGAL_CALL glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorFragmentOp1ATI(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorFragmentOp1ATI);
  RegalAssert(rCtx->dsp.CurrTable()->glColorFragmentOp1ATI != glColorFragmentOp1ATI);
  rCtx->dsp.CurrTable()->glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

REGAL_DECL void REGAL_CALL glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorFragmentOp2ATI(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorFragmentOp2ATI);
  RegalAssert(rCtx->dsp.CurrTable()->glColorFragmentOp2ATI != glColorFragmentOp2ATI);
  rCtx->dsp.CurrTable()->glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

REGAL_DECL void REGAL_CALL glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorFragmentOp3ATI(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorFragmentOp3ATI);
  RegalAssert(rCtx->dsp.CurrTable()->glColorFragmentOp3ATI != glColorFragmentOp3ATI);
  rCtx->dsp.CurrTable()->glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

REGAL_DECL void REGAL_CALL glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAlphaFragmentOp1ATI(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAlphaFragmentOp1ATI);
  RegalAssert(rCtx->dsp.CurrTable()->glAlphaFragmentOp1ATI != glAlphaFragmentOp1ATI);
  rCtx->dsp.CurrTable()->glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

REGAL_DECL void REGAL_CALL glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAlphaFragmentOp2ATI(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ", ", arg2Mod, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAlphaFragmentOp2ATI);
  RegalAssert(rCtx->dsp.CurrTable()->glAlphaFragmentOp2ATI != glAlphaFragmentOp2ATI);
  rCtx->dsp.CurrTable()->glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

REGAL_DECL void REGAL_CALL glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAlphaFragmentOp3ATI(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ", ", arg2Mod, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAlphaFragmentOp3ATI);
  RegalAssert(rCtx->dsp.CurrTable()->glAlphaFragmentOp3ATI != glAlphaFragmentOp3ATI);
  rCtx->dsp.CurrTable()->glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

REGAL_DECL void REGAL_CALL glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSetFragmentShaderConstantATI(", dst, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSetFragmentShaderConstantATI);
  RegalAssert(rCtx->dsp.CurrTable()->glSetFragmentShaderConstantATI != glSetFragmentShaderConstantATI);
  rCtx->dsp.CurrTable()->glSetFragmentShaderConstantATI(dst, value);
}

/* GL_ATI_pn_triangles */

REGAL_DECL void REGAL_CALL glPNTrianglesiATI(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPNTrianglesiATI(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPNTrianglesiATI);
  RegalAssert(rCtx->dsp.CurrTable()->glPNTrianglesiATI != glPNTrianglesiATI);
  rCtx->dsp.CurrTable()->glPNTrianglesiATI(pname, param);
}

REGAL_DECL void REGAL_CALL glPNTrianglesfATI(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPNTrianglesfATI(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPNTrianglesfATI);
  RegalAssert(rCtx->dsp.CurrTable()->glPNTrianglesfATI != glPNTrianglesfATI);
  rCtx->dsp.CurrTable()->glPNTrianglesfATI(pname, param);
}

/* GL_ATI_vertex_array_object */

REGAL_DECL GLuint REGAL_CALL glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNewObjectBufferATI(", size, ", ", pointer, ", ", toString(usage), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNewObjectBufferATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNewObjectBufferATI != glNewObjectBufferATI);
  return rCtx->dsp.CurrTable()->glNewObjectBufferATI(size, pointer, usage);
}

REGAL_DECL GLboolean REGAL_CALL glIsObjectBufferATI(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsObjectBufferATI(", buffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsObjectBufferATI);
  RegalAssert(rCtx->dsp.CurrTable()->glIsObjectBufferATI != glIsObjectBufferATI);
  return rCtx->dsp.CurrTable()->glIsObjectBufferATI(buffer);
}

REGAL_DECL void REGAL_CALL glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUpdateObjectBufferATI(", buffer, ", ", offset, ", ", size, ", ", pointer, ", ", toString(preserve), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUpdateObjectBufferATI);
  RegalAssert(rCtx->dsp.CurrTable()->glUpdateObjectBufferATI != glUpdateObjectBufferATI);
  rCtx->dsp.CurrTable()->glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
}

REGAL_DECL void REGAL_CALL glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetObjectBufferfvATI(", buffer, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectBufferfvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectBufferfvATI != glGetObjectBufferfvATI);
  rCtx->dsp.CurrTable()->glGetObjectBufferfvATI(buffer, pname, params);
}

REGAL_DECL void REGAL_CALL glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetObjectBufferivATI(", buffer, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectBufferivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectBufferivATI != glGetObjectBufferivATI);
  rCtx->dsp.CurrTable()->glGetObjectBufferivATI(buffer, pname, params);
}

REGAL_DECL void REGAL_CALL glFreeObjectBufferATI(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFreeObjectBufferATI(", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFreeObjectBufferATI);
  RegalAssert(rCtx->dsp.CurrTable()->glFreeObjectBufferATI != glFreeObjectBufferATI);
  rCtx->dsp.CurrTable()->glFreeObjectBufferATI(buffer);
}

REGAL_DECL void REGAL_CALL glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glArrayObjectATI(", toString(array), ", ", size, ", ", toString(type), ", ", stride, ", ", buffer, ", ", offset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glArrayObjectATI);
  RegalAssert(rCtx->dsp.CurrTable()->glArrayObjectATI != glArrayObjectATI);
  rCtx->dsp.CurrTable()->glArrayObjectATI(array, size, type, stride, buffer, offset);
}

REGAL_DECL void REGAL_CALL glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetArrayObjectfvATI(", toString(array), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetArrayObjectfvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetArrayObjectfvATI != glGetArrayObjectfvATI);
  rCtx->dsp.CurrTable()->glGetArrayObjectfvATI(array, pname, params);
}

REGAL_DECL void REGAL_CALL glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetArrayObjectivATI(", toString(array), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetArrayObjectivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetArrayObjectivATI != glGetArrayObjectivATI);
  rCtx->dsp.CurrTable()->glGetArrayObjectivATI(array, pname, params);
}

REGAL_DECL void REGAL_CALL glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantArrayObjectATI(", id, ", ", toString(type), ", ", stride, ", ", buffer, ", ", offset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantArrayObjectATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantArrayObjectATI != glVariantArrayObjectATI);
  rCtx->dsp.CurrTable()->glVariantArrayObjectATI(id, type, stride, buffer, offset);
}

REGAL_DECL void REGAL_CALL glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVariantArrayObjectfvATI(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantArrayObjectfvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantArrayObjectfvATI != glGetVariantArrayObjectfvATI);
  rCtx->dsp.CurrTable()->glGetVariantArrayObjectfvATI(id, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVariantArrayObjectivATI(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantArrayObjectivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantArrayObjectivATI != glGetVariantArrayObjectivATI);
  rCtx->dsp.CurrTable()->glGetVariantArrayObjectivATI(id, pname, params);
}

/* GL_EXT_vertex_shader */

REGAL_DECL void REGAL_CALL glBeginVertexShaderEXT(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginVertexShaderEXT()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginVertexShaderEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginVertexShaderEXT != glBeginVertexShaderEXT);
  rCtx->dsp.CurrTable()->glBeginVertexShaderEXT();
}

REGAL_DECL void REGAL_CALL glEndVertexShaderEXT(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndVertexShaderEXT()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndVertexShaderEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glEndVertexShaderEXT != glEndVertexShaderEXT);
  rCtx->dsp.CurrTable()->glEndVertexShaderEXT();
}

REGAL_DECL void REGAL_CALL glBindVertexShaderEXT(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindVertexShaderEXT(", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindVertexShaderEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindVertexShaderEXT != glBindVertexShaderEXT);
  rCtx->dsp.CurrTable()->glBindVertexShaderEXT(id);
}

REGAL_DECL GLuint REGAL_CALL glGenVertexShadersEXT(GLuint range)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenVertexShadersEXT(", range, ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenVertexShadersEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGenVertexShadersEXT != glGenVertexShadersEXT);
  return rCtx->dsp.CurrTable()->glGenVertexShadersEXT(range);
}

REGAL_DECL void REGAL_CALL glDeleteVertexShaderEXT(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteVertexShaderEXT(", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteVertexShaderEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteVertexShaderEXT != glDeleteVertexShaderEXT);
  rCtx->dsp.CurrTable()->glDeleteVertexShaderEXT(id);
}

REGAL_DECL void REGAL_CALL glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glShaderOp1EXT(", toString(op), ", ", res, ", ", arg1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glShaderOp1EXT);
  RegalAssert(rCtx->dsp.CurrTable()->glShaderOp1EXT != glShaderOp1EXT);
  rCtx->dsp.CurrTable()->glShaderOp1EXT(op, res, arg1);
}

REGAL_DECL void REGAL_CALL glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glShaderOp2EXT(", toString(op), ", ", res, ", ", arg1, ", ", arg2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glShaderOp2EXT);
  RegalAssert(rCtx->dsp.CurrTable()->glShaderOp2EXT != glShaderOp2EXT);
  rCtx->dsp.CurrTable()->glShaderOp2EXT(op, res, arg1, arg2);
}

REGAL_DECL void REGAL_CALL glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glShaderOp3EXT(", toString(op), ", ", res, ", ", arg1, ", ", arg2, ", ", arg3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glShaderOp3EXT);
  RegalAssert(rCtx->dsp.CurrTable()->glShaderOp3EXT != glShaderOp3EXT);
  rCtx->dsp.CurrTable()->glShaderOp3EXT(op, res, arg1, arg2, arg3);
}

REGAL_DECL void REGAL_CALL glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSwizzleEXT(", res, ", ", in, ", ", toString(outX), ", ", toString(outY), ", ", toString(outZ), ", ", toString(outW), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSwizzleEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSwizzleEXT != glSwizzleEXT);
  rCtx->dsp.CurrTable()->glSwizzleEXT(res, in, outX, outY, outZ, outW);
}

REGAL_DECL void REGAL_CALL glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWriteMaskEXT(", res, ", ", in, ", ", toString(outX), ", ", toString(outY), ", ", toString(outZ), ", ", toString(outW), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWriteMaskEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glWriteMaskEXT != glWriteMaskEXT);
  rCtx->dsp.CurrTable()->glWriteMaskEXT(res, in, outX, outY, outZ, outW);
}

REGAL_DECL void REGAL_CALL glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glInsertComponentEXT(", res, ", ", src, ", ", num, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glInsertComponentEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glInsertComponentEXT != glInsertComponentEXT);
  rCtx->dsp.CurrTable()->glInsertComponentEXT(res, src, num);
}

REGAL_DECL void REGAL_CALL glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glExtractComponentEXT(", res, ", ", src, ", ", num, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glExtractComponentEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glExtractComponentEXT != glExtractComponentEXT);
  rCtx->dsp.CurrTable()->glExtractComponentEXT(res, src, num);
}

REGAL_DECL GLuint REGAL_CALL glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenSymbolsEXT(", toString(datatype), ", ", toString(storagetype), ", ", toString(range), ", ", components, ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenSymbolsEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGenSymbolsEXT != glGenSymbolsEXT);
  return rCtx->dsp.CurrTable()->glGenSymbolsEXT(datatype, storagetype, range, components);
}

REGAL_DECL void REGAL_CALL glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSetInvariantEXT(", id, ", ", toString(type), ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSetInvariantEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSetInvariantEXT != glSetInvariantEXT);
  rCtx->dsp.CurrTable()->glSetInvariantEXT(id, type, addr);
}

REGAL_DECL void REGAL_CALL glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSetLocalConstantEXT(", id, ", ", toString(type), ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSetLocalConstantEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glSetLocalConstantEXT != glSetLocalConstantEXT);
  rCtx->dsp.CurrTable()->glSetLocalConstantEXT(id, type, addr);
}

REGAL_DECL void REGAL_CALL glVariantbvEXT(GLuint id, const GLbyte *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantbvEXT(", id, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantbvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantbvEXT != glVariantbvEXT);
  rCtx->dsp.CurrTable()->glVariantbvEXT(id, addr);
}

REGAL_DECL void REGAL_CALL glVariantsvEXT(GLuint id, const GLshort *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantsvEXT(", id, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantsvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantsvEXT != glVariantsvEXT);
  rCtx->dsp.CurrTable()->glVariantsvEXT(id, addr);
}

REGAL_DECL void REGAL_CALL glVariantivEXT(GLuint id, const GLint *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantivEXT(", id, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantivEXT != glVariantivEXT);
  rCtx->dsp.CurrTable()->glVariantivEXT(id, addr);
}

REGAL_DECL void REGAL_CALL glVariantfvEXT(GLuint id, const GLfloat *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantfvEXT(", id, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantfvEXT != glVariantfvEXT);
  rCtx->dsp.CurrTable()->glVariantfvEXT(id, addr);
}

REGAL_DECL void REGAL_CALL glVariantdvEXT(GLuint id, const GLdouble *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantdvEXT(", id, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantdvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantdvEXT != glVariantdvEXT);
  rCtx->dsp.CurrTable()->glVariantdvEXT(id, addr);
}

REGAL_DECL void REGAL_CALL glVariantubvEXT(GLuint id, const GLubyte *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantubvEXT(", id, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantubvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantubvEXT != glVariantubvEXT);
  rCtx->dsp.CurrTable()->glVariantubvEXT(id, addr);
}

REGAL_DECL void REGAL_CALL glVariantusvEXT(GLuint id, const GLushort *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantusvEXT(", id, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantusvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantusvEXT != glVariantusvEXT);
  rCtx->dsp.CurrTable()->glVariantusvEXT(id, addr);
}

REGAL_DECL void REGAL_CALL glVariantuivEXT(GLuint id, const GLuint *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantuivEXT(", id, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantuivEXT != glVariantuivEXT);
  rCtx->dsp.CurrTable()->glVariantuivEXT(id, addr);
}

REGAL_DECL void REGAL_CALL glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVariantPointerEXT(", id, ", ", toString(type), ", ", stride, ", ", addr, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVariantPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVariantPointerEXT != glVariantPointerEXT);
  rCtx->dsp.CurrTable()->glVariantPointerEXT(id, type, stride, addr);
}

REGAL_DECL void REGAL_CALL glEnableVariantClientStateEXT(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnableVariantClientStateEXT(", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnableVariantClientStateEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glEnableVariantClientStateEXT != glEnableVariantClientStateEXT);
  rCtx->dsp.CurrTable()->glEnableVariantClientStateEXT(id);
}

REGAL_DECL void REGAL_CALL glDisableVariantClientStateEXT(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisableVariantClientStateEXT(", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisableVariantClientStateEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDisableVariantClientStateEXT != glDisableVariantClientStateEXT);
  rCtx->dsp.CurrTable()->glDisableVariantClientStateEXT(id);
}

REGAL_DECL GLuint REGAL_CALL glBindLightParameterEXT(GLenum light, GLenum value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindLightParameterEXT(", toString(light), ", ", toString(value), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindLightParameterEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindLightParameterEXT != glBindLightParameterEXT);
  return rCtx->dsp.CurrTable()->glBindLightParameterEXT(light, value);
}

REGAL_DECL GLuint REGAL_CALL glBindMaterialParameterEXT(GLenum face, GLenum value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindMaterialParameterEXT(", toString(face), ", ", toString(value), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindMaterialParameterEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindMaterialParameterEXT != glBindMaterialParameterEXT);
  return rCtx->dsp.CurrTable()->glBindMaterialParameterEXT(face, value);
}

REGAL_DECL GLuint REGAL_CALL glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindTexGenParameterEXT(", toString(unit), ", ", toString(coord), ", ", toString(value), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindTexGenParameterEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindTexGenParameterEXT != glBindTexGenParameterEXT);
  return rCtx->dsp.CurrTable()->glBindTexGenParameterEXT(unit, coord, value);
}

REGAL_DECL GLuint REGAL_CALL glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindTextureUnitParameterEXT(", toString(unit), ", ", toString(value), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindTextureUnitParameterEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindTextureUnitParameterEXT != glBindTextureUnitParameterEXT);
  return rCtx->dsp.CurrTable()->glBindTextureUnitParameterEXT(unit, value);
}

REGAL_DECL GLuint REGAL_CALL glBindParameterEXT(GLenum value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindParameterEXT(", toString(value), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindParameterEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindParameterEXT != glBindParameterEXT);
  return rCtx->dsp.CurrTable()->glBindParameterEXT(value);
}

REGAL_DECL GLboolean REGAL_CALL glIsVariantEnabledEXT(GLuint id, GLenum cap)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsVariantEnabledEXT(", id, ", ", toString(cap), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsVariantEnabledEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glIsVariantEnabledEXT != glIsVariantEnabledEXT);
  return rCtx->dsp.CurrTable()->glIsVariantEnabledEXT(id, cap);
}

REGAL_DECL void REGAL_CALL glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVariantBooleanvEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantBooleanvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantBooleanvEXT != glGetVariantBooleanvEXT);
  rCtx->dsp.CurrTable()->glGetVariantBooleanvEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVariantIntegervEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantIntegervEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantIntegervEXT != glGetVariantIntegervEXT);
  rCtx->dsp.CurrTable()->glGetVariantIntegervEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVariantFloatvEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantFloatvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantFloatvEXT != glGetVariantFloatvEXT);
  rCtx->dsp.CurrTable()->glGetVariantFloatvEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVariantPointervEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantPointervEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVariantPointervEXT != glGetVariantPointervEXT);
  rCtx->dsp.CurrTable()->glGetVariantPointervEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetInvariantBooleanvEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetInvariantBooleanvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetInvariantBooleanvEXT != glGetInvariantBooleanvEXT);
  rCtx->dsp.CurrTable()->glGetInvariantBooleanvEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetInvariantIntegervEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetInvariantIntegervEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetInvariantIntegervEXT != glGetInvariantIntegervEXT);
  rCtx->dsp.CurrTable()->glGetInvariantIntegervEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetInvariantFloatvEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetInvariantFloatvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetInvariantFloatvEXT != glGetInvariantFloatvEXT);
  rCtx->dsp.CurrTable()->glGetInvariantFloatvEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetLocalConstantBooleanvEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetLocalConstantBooleanvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetLocalConstantBooleanvEXT != glGetLocalConstantBooleanvEXT);
  rCtx->dsp.CurrTable()->glGetLocalConstantBooleanvEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetLocalConstantIntegervEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetLocalConstantIntegervEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetLocalConstantIntegervEXT != glGetLocalConstantIntegervEXT);
  rCtx->dsp.CurrTable()->glGetLocalConstantIntegervEXT(id, value, data);
}

REGAL_DECL void REGAL_CALL glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetLocalConstantFloatvEXT(", id, ", ", toString(value), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetLocalConstantFloatvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetLocalConstantFloatvEXT != glGetLocalConstantFloatvEXT);
  rCtx->dsp.CurrTable()->glGetLocalConstantFloatvEXT(id, value, data);
}

/* GL_ATI_vertex_streams */

REGAL_DECL void REGAL_CALL glVertexStream1sATI(GLenum stream, GLshort x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream1sATI(", toString(stream), ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1sATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1sATI != glVertexStream1sATI);
  rCtx->dsp.CurrTable()->glVertexStream1sATI(stream, x);
}

REGAL_DECL void REGAL_CALL glVertexStream1svATI(GLenum stream, const GLshort *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream1svATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1svATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1svATI != glVertexStream1svATI);
  rCtx->dsp.CurrTable()->glVertexStream1svATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream1iATI(GLenum stream, GLint x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream1iATI(", toString(stream), ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1iATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1iATI != glVertexStream1iATI);
  rCtx->dsp.CurrTable()->glVertexStream1iATI(stream, x);
}

REGAL_DECL void REGAL_CALL glVertexStream1ivATI(GLenum stream, const GLint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream1ivATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1ivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1ivATI != glVertexStream1ivATI);
  rCtx->dsp.CurrTable()->glVertexStream1ivATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream1fATI(GLenum stream, GLfloat x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream1fATI(", toString(stream), ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1fATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1fATI != glVertexStream1fATI);
  rCtx->dsp.CurrTable()->glVertexStream1fATI(stream, x);
}

REGAL_DECL void REGAL_CALL glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream1fvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1fvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1fvATI != glVertexStream1fvATI);
  rCtx->dsp.CurrTable()->glVertexStream1fvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream1dATI(GLenum stream, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream1dATI(", toString(stream), ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1dATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1dATI != glVertexStream1dATI);
  rCtx->dsp.CurrTable()->glVertexStream1dATI(stream, x);
}

REGAL_DECL void REGAL_CALL glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream1dvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1dvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream1dvATI != glVertexStream1dvATI);
  rCtx->dsp.CurrTable()->glVertexStream1dvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream2sATI(", toString(stream), ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2sATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2sATI != glVertexStream2sATI);
  rCtx->dsp.CurrTable()->glVertexStream2sATI(stream, x, y);
}

REGAL_DECL void REGAL_CALL glVertexStream2svATI(GLenum stream, const GLshort *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream2svATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2svATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2svATI != glVertexStream2svATI);
  rCtx->dsp.CurrTable()->glVertexStream2svATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream2iATI(GLenum stream, GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream2iATI(", toString(stream), ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2iATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2iATI != glVertexStream2iATI);
  rCtx->dsp.CurrTable()->glVertexStream2iATI(stream, x, y);
}

REGAL_DECL void REGAL_CALL glVertexStream2ivATI(GLenum stream, const GLint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream2ivATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2ivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2ivATI != glVertexStream2ivATI);
  rCtx->dsp.CurrTable()->glVertexStream2ivATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream2fATI(", toString(stream), ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2fATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2fATI != glVertexStream2fATI);
  rCtx->dsp.CurrTable()->glVertexStream2fATI(stream, x, y);
}

REGAL_DECL void REGAL_CALL glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream2fvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2fvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2fvATI != glVertexStream2fvATI);
  rCtx->dsp.CurrTable()->glVertexStream2fvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream2dATI(", toString(stream), ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2dATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2dATI != glVertexStream2dATI);
  rCtx->dsp.CurrTable()->glVertexStream2dATI(stream, x, y);
}

REGAL_DECL void REGAL_CALL glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream2dvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2dvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream2dvATI != glVertexStream2dvATI);
  rCtx->dsp.CurrTable()->glVertexStream2dvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream3sATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3sATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3sATI != glVertexStream3sATI);
  rCtx->dsp.CurrTable()->glVertexStream3sATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexStream3svATI(GLenum stream, const GLshort *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream3svATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3svATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3svATI != glVertexStream3svATI);
  rCtx->dsp.CurrTable()->glVertexStream3svATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream3iATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3iATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3iATI != glVertexStream3iATI);
  rCtx->dsp.CurrTable()->glVertexStream3iATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexStream3ivATI(GLenum stream, const GLint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream3ivATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3ivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3ivATI != glVertexStream3ivATI);
  rCtx->dsp.CurrTable()->glVertexStream3ivATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream3fATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3fATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3fATI != glVertexStream3fATI);
  rCtx->dsp.CurrTable()->glVertexStream3fATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream3fvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3fvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3fvATI != glVertexStream3fvATI);
  rCtx->dsp.CurrTable()->glVertexStream3fvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream3dATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3dATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3dATI != glVertexStream3dATI);
  rCtx->dsp.CurrTable()->glVertexStream3dATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream3dvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3dvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream3dvATI != glVertexStream3dvATI);
  rCtx->dsp.CurrTable()->glVertexStream3dvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream4sATI(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4sATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4sATI != glVertexStream4sATI);
  rCtx->dsp.CurrTable()->glVertexStream4sATI(stream, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexStream4svATI(GLenum stream, const GLshort *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream4svATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4svATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4svATI != glVertexStream4svATI);
  rCtx->dsp.CurrTable()->glVertexStream4svATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream4iATI(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4iATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4iATI != glVertexStream4iATI);
  rCtx->dsp.CurrTable()->glVertexStream4iATI(stream, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexStream4ivATI(GLenum stream, const GLint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream4ivATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4ivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4ivATI != glVertexStream4ivATI);
  rCtx->dsp.CurrTable()->glVertexStream4ivATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream4fATI(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4fATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4fATI != glVertexStream4fATI);
  rCtx->dsp.CurrTable()->glVertexStream4fATI(stream, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream4fvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4fvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4fvATI != glVertexStream4fvATI);
  rCtx->dsp.CurrTable()->glVertexStream4fvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream4dATI(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4dATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4dATI != glVertexStream4dATI);
  rCtx->dsp.CurrTable()->glVertexStream4dATI(stream, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexStream4dvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4dvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexStream4dvATI != glVertexStream4dvATI);
  rCtx->dsp.CurrTable()->glVertexStream4dvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3bATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3bATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3bATI != glNormalStream3bATI);
  rCtx->dsp.CurrTable()->glNormalStream3bATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3bvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3bvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3bvATI != glNormalStream3bvATI);
  rCtx->dsp.CurrTable()->glNormalStream3bvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3sATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3sATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3sATI != glNormalStream3sATI);
  rCtx->dsp.CurrTable()->glNormalStream3sATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glNormalStream3svATI(GLenum stream, const GLshort *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3svATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3svATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3svATI != glNormalStream3svATI);
  rCtx->dsp.CurrTable()->glNormalStream3svATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3iATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3iATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3iATI != glNormalStream3iATI);
  rCtx->dsp.CurrTable()->glNormalStream3iATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glNormalStream3ivATI(GLenum stream, const GLint *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3ivATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3ivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3ivATI != glNormalStream3ivATI);
  rCtx->dsp.CurrTable()->glNormalStream3ivATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3fATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3fATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3fATI != glNormalStream3fATI);
  rCtx->dsp.CurrTable()->glNormalStream3fATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3fvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3fvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3fvATI != glNormalStream3fvATI);
  rCtx->dsp.CurrTable()->glNormalStream3fvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3dATI(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3dATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3dATI != glNormalStream3dATI);
  rCtx->dsp.CurrTable()->glNormalStream3dATI(stream, x, y, z);
}

REGAL_DECL void REGAL_CALL glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalStream3dvATI(", toString(stream), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3dvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalStream3dvATI != glNormalStream3dvATI);
  rCtx->dsp.CurrTable()->glNormalStream3dvATI(stream, coords);
}

REGAL_DECL void REGAL_CALL glClientActiveVertexStreamATI(GLenum stream)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClientActiveVertexStreamATI(", toString(stream), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClientActiveVertexStreamATI);
  RegalAssert(rCtx->dsp.CurrTable()->glClientActiveVertexStreamATI != glClientActiveVertexStreamATI);
  rCtx->dsp.CurrTable()->glClientActiveVertexStreamATI(stream);
}

REGAL_DECL void REGAL_CALL glVertexBlendEnviATI(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexBlendEnviATI(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexBlendEnviATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexBlendEnviATI != glVertexBlendEnviATI);
  rCtx->dsp.CurrTable()->glVertexBlendEnviATI(pname, param);
}

REGAL_DECL void REGAL_CALL glVertexBlendEnvfATI(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexBlendEnvfATI(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexBlendEnvfATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexBlendEnvfATI != glVertexBlendEnvfATI);
  rCtx->dsp.CurrTable()->glVertexBlendEnvfATI(pname, param);
}

/* GL_ATI_element_array */

REGAL_DECL void REGAL_CALL glElementPointerATI(GLenum type, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glElementPointerATI(", toString(type), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glElementPointerATI);
  RegalAssert(rCtx->dsp.CurrTable()->glElementPointerATI != glElementPointerATI);
  rCtx->dsp.CurrTable()->glElementPointerATI(type, pointer);
}

REGAL_DECL void REGAL_CALL glDrawElementArrayATI(GLenum mode, GLsizei count)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementArrayATI(", toString(mode), ", ", count, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementArrayATI);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementArrayATI != glDrawElementArrayATI);
  rCtx->dsp.CurrTable()->glDrawElementArrayATI(mode, count);
}

REGAL_DECL void REGAL_CALL glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawRangeElementArrayATI(", toString(mode), ", ", start, ", ", end, ", ", count, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElementArrayATI);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElementArrayATI != glDrawRangeElementArrayATI);
  rCtx->dsp.CurrTable()->glDrawRangeElementArrayATI(mode, start, end, count);
}

/* GL_SUN_mesh_array */

REGAL_DECL void REGAL_CALL glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawMeshArraysSUN(", toString(mode), ", ", first, ", ", count, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawMeshArraysSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawMeshArraysSUN != glDrawMeshArraysSUN);
  rCtx->dsp.CurrTable()->glDrawMeshArraysSUN(mode, first, count, width);
}

/* GL_NV_occlusion_query */

REGAL_DECL void REGAL_CALL glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenOcclusionQueriesNV(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenOcclusionQueriesNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGenOcclusionQueriesNV != glGenOcclusionQueriesNV);
  rCtx->dsp.CurrTable()->glGenOcclusionQueriesNV(n, ids);
}

REGAL_DECL void REGAL_CALL glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteOcclusionQueriesNV(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteOcclusionQueriesNV);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteOcclusionQueriesNV != glDeleteOcclusionQueriesNV);
  rCtx->dsp.CurrTable()->glDeleteOcclusionQueriesNV(n, ids);
}

REGAL_DECL GLboolean REGAL_CALL glIsOcclusionQueryNV(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsOcclusionQueryNV(", id, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsOcclusionQueryNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsOcclusionQueryNV != glIsOcclusionQueryNV);
  return rCtx->dsp.CurrTable()->glIsOcclusionQueryNV(id);
}

REGAL_DECL void REGAL_CALL glBeginOcclusionQueryNV(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginOcclusionQueryNV(", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginOcclusionQueryNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginOcclusionQueryNV != glBeginOcclusionQueryNV);
  rCtx->dsp.CurrTable()->glBeginOcclusionQueryNV(id);
}

REGAL_DECL void REGAL_CALL glEndOcclusionQueryNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndOcclusionQueryNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndOcclusionQueryNV);
  RegalAssert(rCtx->dsp.CurrTable()->glEndOcclusionQueryNV != glEndOcclusionQueryNV);
  rCtx->dsp.CurrTable()->glEndOcclusionQueryNV();
}

REGAL_DECL void REGAL_CALL glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetOcclusionQueryivNV(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetOcclusionQueryivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetOcclusionQueryivNV != glGetOcclusionQueryivNV);
  rCtx->dsp.CurrTable()->glGetOcclusionQueryivNV(id, pname, params);
}

REGAL_DECL void REGAL_CALL glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetOcclusionQueryuivNV(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetOcclusionQueryuivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetOcclusionQueryuivNV != glGetOcclusionQueryuivNV);
  rCtx->dsp.CurrTable()->glGetOcclusionQueryuivNV(id, pname, params);
}

/* GL_NV_point_sprite */

REGAL_DECL void REGAL_CALL glPointParameteriNV(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameteriNV(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameteriNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameteriNV != glPointParameteriNV);
  rCtx->dsp.CurrTable()->glPointParameteriNV(pname, param);
}

REGAL_DECL void REGAL_CALL glPointParameterivNV(GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointParameterivNV(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPointParameterivNV != glPointParameterivNV);
  rCtx->dsp.CurrTable()->glPointParameterivNV(pname, params);
}

/* GL_EXT_stencil_two_side */

REGAL_DECL void REGAL_CALL glActiveStencilFaceEXT(GLenum face)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glActiveStencilFaceEXT(", toString(face), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glActiveStencilFaceEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glActiveStencilFaceEXT != glActiveStencilFaceEXT);
  rCtx->dsp.CurrTable()->glActiveStencilFaceEXT(face);
}

/* GL_APPLE_element_array */

REGAL_DECL void REGAL_CALL glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glElementPointerAPPLE(", toString(type), ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glElementPointerAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glElementPointerAPPLE != glElementPointerAPPLE);
  rCtx->dsp.CurrTable()->glElementPointerAPPLE(type, pointer);
}

REGAL_DECL void REGAL_CALL glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementArrayAPPLE(", toString(mode), ", ", first, ", ", count, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementArrayAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementArrayAPPLE != glDrawElementArrayAPPLE);
  rCtx->dsp.CurrTable()->glDrawElementArrayAPPLE(mode, first, count);
}

REGAL_DECL void REGAL_CALL glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawRangeElementArrayAPPLE(", toString(mode), ", ", start, ", ", end, ", ", first, ", ", count, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElementArrayAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawRangeElementArrayAPPLE != glDrawRangeElementArrayAPPLE);
  rCtx->dsp.CurrTable()->glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
}

REGAL_DECL void REGAL_CALL glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawElementArrayAPPLE(", toString(mode), ", ", first, ", ", count, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElementArrayAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElementArrayAPPLE != glMultiDrawElementArrayAPPLE);
  rCtx->dsp.CurrTable()->glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
}

REGAL_DECL void REGAL_CALL glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawRangeElementArrayAPPLE(", toString(mode), ", ", start, ", ", end, ", ", first, ", ", count, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawRangeElementArrayAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawRangeElementArrayAPPLE != glMultiDrawRangeElementArrayAPPLE);
  rCtx->dsp.CurrTable()->glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
}

/* GL_APPLE_fence */

REGAL_DECL void REGAL_CALL glGenFencesAPPLE(GLsizei n, GLuint *fences)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenFencesAPPLE(", n, ", ", fences, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenFencesAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glGenFencesAPPLE != glGenFencesAPPLE);
  rCtx->dsp.CurrTable()->glGenFencesAPPLE(n, fences);
}

REGAL_DECL void REGAL_CALL glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteFencesAPPLE(", n, ", ", fences, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFencesAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFencesAPPLE != glDeleteFencesAPPLE);
  rCtx->dsp.CurrTable()->glDeleteFencesAPPLE(n, fences);
}

REGAL_DECL void REGAL_CALL glSetFenceAPPLE(GLuint fence)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSetFenceAPPLE(", fence, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSetFenceAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glSetFenceAPPLE != glSetFenceAPPLE);
  rCtx->dsp.CurrTable()->glSetFenceAPPLE(fence);
}

REGAL_DECL GLboolean REGAL_CALL glIsFenceAPPLE(GLuint fence)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsFenceAPPLE(", fence, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsFenceAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glIsFenceAPPLE != glIsFenceAPPLE);
  return rCtx->dsp.CurrTable()->glIsFenceAPPLE(fence);
}

REGAL_DECL GLboolean REGAL_CALL glTestFenceAPPLE(GLuint fence)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTestFenceAPPLE(", fence, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTestFenceAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glTestFenceAPPLE != glTestFenceAPPLE);
  return rCtx->dsp.CurrTable()->glTestFenceAPPLE(fence);
}

REGAL_DECL void REGAL_CALL glFinishFenceAPPLE(GLuint fence)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFinishFenceAPPLE(", fence, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFinishFenceAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glFinishFenceAPPLE != glFinishFenceAPPLE);
  rCtx->dsp.CurrTable()->glFinishFenceAPPLE(fence);
}

REGAL_DECL GLboolean REGAL_CALL glTestObjectAPPLE(GLenum object, GLuint name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTestObjectAPPLE(", toString(object), ", ", name, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTestObjectAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glTestObjectAPPLE != glTestObjectAPPLE);
  return rCtx->dsp.CurrTable()->glTestObjectAPPLE(object, name);
}

REGAL_DECL void REGAL_CALL glFinishObjectAPPLE(GLenum object, GLint name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFinishObjectAPPLE(", toString(object), ", ", name, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFinishObjectAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glFinishObjectAPPLE != glFinishObjectAPPLE);
  rCtx->dsp.CurrTable()->glFinishObjectAPPLE(object, name);
}

/* GL_APPLE_vertex_array_object */

REGAL_DECL void REGAL_CALL glBindVertexArrayAPPLE(GLuint array)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindVertexArrayAPPLE(", array, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindVertexArrayAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glBindVertexArrayAPPLE != glBindVertexArrayAPPLE);
  rCtx->dsp.CurrTable()->glBindVertexArrayAPPLE(array);
}

REGAL_DECL void REGAL_CALL glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteVertexArraysAPPLE(", n, ", ", arrays, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteVertexArraysAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteVertexArraysAPPLE != glDeleteVertexArraysAPPLE);
  rCtx->dsp.CurrTable()->glDeleteVertexArraysAPPLE(n, arrays);
}

REGAL_DECL void REGAL_CALL glGenVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenVertexArraysAPPLE(", n, ", ", arrays, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenVertexArraysAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glGenVertexArraysAPPLE != glGenVertexArraysAPPLE);
  rCtx->dsp.CurrTable()->glGenVertexArraysAPPLE(n, arrays);
}

REGAL_DECL GLboolean REGAL_CALL glIsVertexArrayAPPLE(GLuint array)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsVertexArrayAPPLE(", array, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsVertexArrayAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glIsVertexArrayAPPLE != glIsVertexArrayAPPLE);
  return rCtx->dsp.CurrTable()->glIsVertexArrayAPPLE(array);
}

/* GL_APPLE_vertex_array_range */

REGAL_DECL void REGAL_CALL glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexArrayRangeAPPLE(", length, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexArrayRangeAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexArrayRangeAPPLE != glVertexArrayRangeAPPLE);
  rCtx->dsp.CurrTable()->glVertexArrayRangeAPPLE(length, pointer);
}

REGAL_DECL void REGAL_CALL glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFlushVertexArrayRangeAPPLE(", length, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFlushVertexArrayRangeAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glFlushVertexArrayRangeAPPLE != glFlushVertexArrayRangeAPPLE);
  rCtx->dsp.CurrTable()->glFlushVertexArrayRangeAPPLE(length, pointer);
}

REGAL_DECL void REGAL_CALL glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexArrayParameteriAPPLE(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexArrayParameteriAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexArrayParameteriAPPLE != glVertexArrayParameteriAPPLE);
  rCtx->dsp.CurrTable()->glVertexArrayParameteriAPPLE(pname, param);
}

/* GL_ATI_draw_buffers */

REGAL_DECL void REGAL_CALL glDrawBuffersATI(GLsizei n, const GLenum *bufs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawBuffersATI(", n, ", ", bufs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBuffersATI);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBuffersATI != glDrawBuffersATI);
  rCtx->dsp.CurrTable()->glDrawBuffersATI(n, bufs);
}

/* GL_NV_fragment_program */

REGAL_DECL void REGAL_CALL glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramNamedParameter4fNV(", id, ", ", len, ", ", name, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramNamedParameter4fNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramNamedParameter4fNV != glProgramNamedParameter4fNV);
  rCtx->dsp.CurrTable()->glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramNamedParameter4dNV(", id, ", ", len, ", ", name, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramNamedParameter4dNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramNamedParameter4dNV != glProgramNamedParameter4dNV);
  rCtx->dsp.CurrTable()->glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramNamedParameter4fvNV(", id, ", ", len, ", ", name, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramNamedParameter4fvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramNamedParameter4fvNV != glProgramNamedParameter4fvNV);
  rCtx->dsp.CurrTable()->glProgramNamedParameter4fvNV(id, len, name, v);
}

REGAL_DECL void REGAL_CALL glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramNamedParameter4dvNV(", id, ", ", len, ", ", name, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramNamedParameter4dvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramNamedParameter4dvNV != glProgramNamedParameter4dvNV);
  rCtx->dsp.CurrTable()->glProgramNamedParameter4dvNV(id, len, name, v);
}

REGAL_DECL void REGAL_CALL glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramNamedParameterfvNV(", id, ", ", len, ", ", name, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramNamedParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramNamedParameterfvNV != glGetProgramNamedParameterfvNV);
  rCtx->dsp.CurrTable()->glGetProgramNamedParameterfvNV(id, len, name, params);
}

REGAL_DECL void REGAL_CALL glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramNamedParameterdvNV(", id, ", ", len, ", ", name, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramNamedParameterdvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramNamedParameterdvNV != glGetProgramNamedParameterdvNV);
  rCtx->dsp.CurrTable()->glGetProgramNamedParameterdvNV(id, len, name, params);
}

/* GL_NV_half_float */

REGAL_DECL void REGAL_CALL glVertex2hNV(GLhalfNV x, GLhalfNV y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2hNV(", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2hNV != glVertex2hNV);
  rCtx->dsp.CurrTable()->glVertex2hNV(x, y);
}

REGAL_DECL void REGAL_CALL glVertex2hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex2hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex2hvNV != glVertex2hvNV);
  rCtx->dsp.CurrTable()->glVertex2hvNV(v);
}

REGAL_DECL void REGAL_CALL glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3hNV(", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3hNV != glVertex3hNV);
  rCtx->dsp.CurrTable()->glVertex3hNV(x, y, z);
}

REGAL_DECL void REGAL_CALL glVertex3hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex3hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex3hvNV != glVertex3hvNV);
  rCtx->dsp.CurrTable()->glVertex3hvNV(v);
}

REGAL_DECL void REGAL_CALL glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4hNV(", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4hNV != glVertex4hNV);
  rCtx->dsp.CurrTable()->glVertex4hNV(x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertex4hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertex4hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertex4hvNV != glVertex4hvNV);
  rCtx->dsp.CurrTable()->glVertex4hvNV(v);
}

REGAL_DECL void REGAL_CALL glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3hNV(", nx, ", ", ny, ", ", nz, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3hNV != glNormal3hNV);
  rCtx->dsp.CurrTable()->glNormal3hNV(nx, ny, nz);
}

REGAL_DECL void REGAL_CALL glNormal3hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormal3hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glNormal3hvNV != glNormal3hvNV);
  rCtx->dsp.CurrTable()->glNormal3hvNV(v);
}

REGAL_DECL void REGAL_CALL glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3hNV(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3hNV != glColor3hNV);
  rCtx->dsp.CurrTable()->glColor3hNV(red, green, blue);
}

REGAL_DECL void REGAL_CALL glColor3hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor3hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor3hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glColor3hvNV != glColor3hvNV);
  rCtx->dsp.CurrTable()->glColor3hvNV(v);
}

REGAL_DECL void REGAL_CALL glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4hNV(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4hNV != glColor4hNV);
  rCtx->dsp.CurrTable()->glColor4hNV(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glColor4hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColor4hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColor4hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glColor4hvNV != glColor4hvNV);
  rCtx->dsp.CurrTable()->glColor4hvNV(v);
}

REGAL_DECL void REGAL_CALL glTexCoord1hNV(GLhalfNV s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1hNV(", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1hNV != glTexCoord1hNV);
  rCtx->dsp.CurrTable()->glTexCoord1hNV(s);
}

REGAL_DECL void REGAL_CALL glTexCoord1hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord1hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord1hvNV != glTexCoord1hvNV);
  rCtx->dsp.CurrTable()->glTexCoord1hvNV(v);
}

REGAL_DECL void REGAL_CALL glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2hNV(", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2hNV != glTexCoord2hNV);
  rCtx->dsp.CurrTable()->glTexCoord2hNV(s, t);
}

REGAL_DECL void REGAL_CALL glTexCoord2hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord2hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord2hvNV != glTexCoord2hvNV);
  rCtx->dsp.CurrTable()->glTexCoord2hvNV(v);
}

REGAL_DECL void REGAL_CALL glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3hNV(", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3hNV != glTexCoord3hNV);
  rCtx->dsp.CurrTable()->glTexCoord3hNV(s, t, r);
}

REGAL_DECL void REGAL_CALL glTexCoord3hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord3hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord3hvNV != glTexCoord3hvNV);
  rCtx->dsp.CurrTable()->glTexCoord3hvNV(v);
}

REGAL_DECL void REGAL_CALL glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4hNV(", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4hNV != glTexCoord4hNV);
  rCtx->dsp.CurrTable()->glTexCoord4hNV(s, t, r, q);
}

REGAL_DECL void REGAL_CALL glTexCoord4hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoord4hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoord4hvNV != glTexCoord4hvNV);
  rCtx->dsp.CurrTable()->glTexCoord4hvNV(v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1hNV(", toString(target), ", ", s, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1hNV != glMultiTexCoord1hNV);
  rCtx->dsp.CurrTable()->glMultiTexCoord1hNV(target, s);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord1hvNV(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord1hvNV != glMultiTexCoord1hvNV);
  rCtx->dsp.CurrTable()->glMultiTexCoord1hvNV(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2hNV(", toString(target), ", ", s, ", ", t, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2hNV != glMultiTexCoord2hNV);
  rCtx->dsp.CurrTable()->glMultiTexCoord2hNV(target, s, t);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord2hvNV(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord2hvNV != glMultiTexCoord2hvNV);
  rCtx->dsp.CurrTable()->glMultiTexCoord2hvNV(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3hNV(", toString(target), ", ", s, ", ", t, ", ", r, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3hNV != glMultiTexCoord3hNV);
  rCtx->dsp.CurrTable()->glMultiTexCoord3hNV(target, s, t, r);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord3hvNV(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord3hvNV != glMultiTexCoord3hvNV);
  rCtx->dsp.CurrTable()->glMultiTexCoord3hvNV(target, v);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4hNV(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4hNV != glMultiTexCoord4hNV);
  rCtx->dsp.CurrTable()->glMultiTexCoord4hNV(target, s, t, r, q);
}

REGAL_DECL void REGAL_CALL glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoord4hvNV(", toString(target), ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoord4hvNV != glMultiTexCoord4hvNV);
  rCtx->dsp.CurrTable()->glMultiTexCoord4hvNV(target, v);
}

REGAL_DECL void REGAL_CALL glFogCoordhNV(GLhalfNV coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordhNV(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordhNV);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordhNV != glFogCoordhNV);
  rCtx->dsp.CurrTable()->glFogCoordhNV(coord);
}

REGAL_DECL void REGAL_CALL glFogCoordhvNV(const GLhalfNV *coord)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordhvNV(", coord, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordhvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordhvNV != glFogCoordhvNV);
  rCtx->dsp.CurrTable()->glFogCoordhvNV(coord);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3hNV(", red, ", ", green, ", ", blue, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3hNV != glSecondaryColor3hNV);
  rCtx->dsp.CurrTable()->glSecondaryColor3hNV(red, green, blue);
}

REGAL_DECL void REGAL_CALL glSecondaryColor3hvNV(const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColor3hvNV(", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColor3hvNV != glSecondaryColor3hvNV);
  rCtx->dsp.CurrTable()->glSecondaryColor3hvNV(v);
}

REGAL_DECL void REGAL_CALL glVertexWeighthNV(GLhalfNV weight)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexWeighthNV(", weight, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeighthNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeighthNV != glVertexWeighthNV);
  rCtx->dsp.CurrTable()->glVertexWeighthNV(weight);
}

REGAL_DECL void REGAL_CALL glVertexWeighthvNV(const GLhalfNV *weight)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexWeighthvNV(", weight, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeighthvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexWeighthvNV != glVertexWeighthvNV);
  rCtx->dsp.CurrTable()->glVertexWeighthvNV(weight);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1hNV(GLuint index, GLhalfNV x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1hNV(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1hNV != glVertexAttrib1hNV);
  rCtx->dsp.CurrTable()->glVertexAttrib1hNV(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib1hvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib1hvNV != glVertexAttrib1hvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib1hvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2hNV(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2hNV != glVertexAttrib2hNV);
  rCtx->dsp.CurrTable()->glVertexAttrib2hNV(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib2hvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib2hvNV != glVertexAttrib2hvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib2hvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3hNV(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3hNV != glVertexAttrib3hNV);
  rCtx->dsp.CurrTable()->glVertexAttrib3hNV(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib3hvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib3hvNV != glVertexAttrib3hvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib3hvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4hNV(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4hNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4hNV != glVertexAttrib4hNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4hNV(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttrib4hvNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttrib4hvNV != glVertexAttrib4hvNV);
  rCtx->dsp.CurrTable()->glVertexAttrib4hvNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs1hvNV(", index, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs1hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs1hvNV != glVertexAttribs1hvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs1hvNV(index, count, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs2hvNV(", index, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs2hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs2hvNV != glVertexAttribs2hvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs2hvNV(index, count, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs3hvNV(", index, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs3hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs3hvNV != glVertexAttribs3hvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs3hvNV(index, count, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribs4hvNV(", index, ", ", count, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4hvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribs4hvNV != glVertexAttribs4hvNV);
  rCtx->dsp.CurrTable()->glVertexAttribs4hvNV(index, count, v);
}

/* GL_NV_pixel_data_range */

REGAL_DECL void REGAL_CALL glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPixelDataRangeNV(", toString(target), ", ", size, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPixelDataRangeNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPixelDataRangeNV != glPixelDataRangeNV);
  rCtx->dsp.CurrTable()->glPixelDataRangeNV(target, size, pointer);
}

REGAL_DECL void REGAL_CALL glFlushPixelDataRangeNV(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFlushPixelDataRangeNV(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFlushPixelDataRangeNV);
  RegalAssert(rCtx->dsp.CurrTable()->glFlushPixelDataRangeNV != glFlushPixelDataRangeNV);
  rCtx->dsp.CurrTable()->glFlushPixelDataRangeNV(target);
}

/* GL_NV_primitive_restart */

REGAL_DECL void REGAL_CALL glPrimitiveRestartNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPrimitiveRestartNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPrimitiveRestartNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPrimitiveRestartNV != glPrimitiveRestartNV);
  rCtx->dsp.CurrTable()->glPrimitiveRestartNV();
}

REGAL_DECL void REGAL_CALL glPrimitiveRestartIndexNV(GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPrimitiveRestartIndexNV(", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPrimitiveRestartIndexNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPrimitiveRestartIndexNV != glPrimitiveRestartIndexNV);
  rCtx->dsp.CurrTable()->glPrimitiveRestartIndexNV(index);
}

/* GL_ATI_map_object_buffer */

REGAL_DECL GLvoid *REGAL_CALL glMapObjectBufferATI(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapObjectBufferATI(", buffer, ")");
  if (!rCtx) return NULL;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapObjectBufferATI);
  RegalAssert(rCtx->dsp.CurrTable()->glMapObjectBufferATI != glMapObjectBufferATI);
  return rCtx->dsp.CurrTable()->glMapObjectBufferATI(buffer);
}

REGAL_DECL void REGAL_CALL glUnmapObjectBufferATI(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUnmapObjectBufferATI(", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUnmapObjectBufferATI);
  RegalAssert(rCtx->dsp.CurrTable()->glUnmapObjectBufferATI != glUnmapObjectBufferATI);
  rCtx->dsp.CurrTable()->glUnmapObjectBufferATI(buffer);
}

/* GL_ATI_separate_stencil */

REGAL_DECL void REGAL_CALL glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilOpSeparateATI(", toString(face), ", ", toString(sfail), ", ", toString(dpfail), ", ", toString(dppass), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilOpSeparateATI);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilOpSeparateATI != glStencilOpSeparateATI);
  rCtx->dsp.CurrTable()->glStencilOpSeparateATI(face, sfail, dpfail, dppass);
}

REGAL_DECL void REGAL_CALL glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilFuncSeparateATI(", toString(frontfunc), ", ", toString(backfunc), ", ", ref, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFuncSeparateATI);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFuncSeparateATI != glStencilFuncSeparateATI);
  rCtx->dsp.CurrTable()->glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
}

/* GL_ATI_vertex_attrib_array_object */

REGAL_DECL void REGAL_CALL glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribArrayObjectATI(", index, ", ", size, ", ", toString(type), ", ", normalized, ", ", stride, ", ", buffer, ", ", offset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribArrayObjectATI);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribArrayObjectATI != glVertexAttribArrayObjectATI);
  rCtx->dsp.CurrTable()->glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribArrayObjectfvATI(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribArrayObjectfvATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribArrayObjectfvATI != glGetVertexAttribArrayObjectfvATI);
  rCtx->dsp.CurrTable()->glGetVertexAttribArrayObjectfvATI(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribArrayObjectivATI(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribArrayObjectivATI);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribArrayObjectivATI != glGetVertexAttribArrayObjectivATI);
  rCtx->dsp.CurrTable()->glGetVertexAttribArrayObjectivATI(index, pname, params);
}

/* GL_EXT_depth_bounds_test */

REGAL_DECL void REGAL_CALL glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthBoundsEXT(", zmin, ", ", zmax, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthBoundsEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthBoundsEXT != glDepthBoundsEXT);
  rCtx->dsp.CurrTable()->glDepthBoundsEXT(zmin, zmax);
}

/* GL_EXT_blend_equation_separate */

REGAL_DECL void REGAL_CALL glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationSeparateEXT(", toString(modeRGB), ", ", toString(modeAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparateEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparateEXT != glBlendEquationSeparateEXT);
  rCtx->dsp.CurrTable()->glBlendEquationSeparateEXT(modeRGB, modeAlpha);
}

/* GL_EXT_framebuffer_object */

REGAL_DECL GLboolean REGAL_CALL glIsRenderbufferEXT(GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsRenderbufferEXT(", renderbuffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsRenderbufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glIsRenderbufferEXT != glIsRenderbufferEXT);
  return rCtx->dsp.CurrTable()->glIsRenderbufferEXT(renderbuffer);
}

REGAL_DECL void REGAL_CALL glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindRenderbufferEXT(", toString(target), ", ", renderbuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindRenderbufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindRenderbufferEXT != glBindRenderbufferEXT);
  rCtx->dsp.CurrTable()->glBindRenderbufferEXT(target, renderbuffer);
}

REGAL_DECL void REGAL_CALL glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteRenderbuffersEXT(", n, ", ", renderbuffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteRenderbuffersEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteRenderbuffersEXT != glDeleteRenderbuffersEXT);
  rCtx->dsp.CurrTable()->glDeleteRenderbuffersEXT(n, renderbuffers);
}

REGAL_DECL void REGAL_CALL glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenRenderbuffersEXT(", n, ", ", renderbuffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenRenderbuffersEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGenRenderbuffersEXT != glGenRenderbuffersEXT);
  rCtx->dsp.CurrTable()->glGenRenderbuffersEXT(n, renderbuffers);
}

REGAL_DECL void REGAL_CALL glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRenderbufferStorageEXT(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorageEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorageEXT != glRenderbufferStorageEXT);
  rCtx->dsp.CurrTable()->glRenderbufferStorageEXT(target, internalformat, width, height);
}

REGAL_DECL void REGAL_CALL glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetRenderbufferParameterivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetRenderbufferParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetRenderbufferParameterivEXT != glGetRenderbufferParameterivEXT);
  rCtx->dsp.CurrTable()->glGetRenderbufferParameterivEXT(target, pname, params);
}

REGAL_DECL GLboolean REGAL_CALL glIsFramebufferEXT(GLuint framebuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsFramebufferEXT(", framebuffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsFramebufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glIsFramebufferEXT != glIsFramebufferEXT);
  return rCtx->dsp.CurrTable()->glIsFramebufferEXT(framebuffer);
}

REGAL_DECL void REGAL_CALL glBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindFramebufferEXT(", toString(target), ", ", framebuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindFramebufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindFramebufferEXT != glBindFramebufferEXT);
  rCtx->dsp.CurrTable()->glBindFramebufferEXT(target, framebuffer);
}

REGAL_DECL void REGAL_CALL glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteFramebuffersEXT(", n, ", ", framebuffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFramebuffersEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteFramebuffersEXT != glDeleteFramebuffersEXT);
  rCtx->dsp.CurrTable()->glDeleteFramebuffersEXT(n, framebuffers);
}

REGAL_DECL void REGAL_CALL glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenFramebuffersEXT(", n, ", ", framebuffers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenFramebuffersEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGenFramebuffersEXT != glGenFramebuffersEXT);
  rCtx->dsp.CurrTable()->glGenFramebuffersEXT(n, framebuffers);
}

REGAL_DECL GLenum REGAL_CALL glCheckFramebufferStatusEXT(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCheckFramebufferStatusEXT(", toString(target), ")");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCheckFramebufferStatusEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCheckFramebufferStatusEXT != glCheckFramebufferStatusEXT);
  return rCtx->dsp.CurrTable()->glCheckFramebufferStatusEXT(target);
}

REGAL_DECL void REGAL_CALL glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTexture1DEXT(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture1DEXT != glFramebufferTexture1DEXT);
  rCtx->dsp.CurrTable()->glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
}

REGAL_DECL void REGAL_CALL glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTexture2DEXT(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture2DEXT != glFramebufferTexture2DEXT);
  rCtx->dsp.CurrTable()->glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
}

REGAL_DECL void REGAL_CALL glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTexture3DEXT(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", zoffset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTexture3DEXT != glFramebufferTexture3DEXT);
  rCtx->dsp.CurrTable()->glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
}

REGAL_DECL void REGAL_CALL glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferRenderbufferEXT(", toString(target), ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferRenderbufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferRenderbufferEXT != glFramebufferRenderbufferEXT);
  rCtx->dsp.CurrTable()->glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
}

REGAL_DECL void REGAL_CALL glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFramebufferAttachmentParameterivEXT(", toString(target), ", ", toString(attachment), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFramebufferAttachmentParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFramebufferAttachmentParameterivEXT != glGetFramebufferAttachmentParameterivEXT);
  rCtx->dsp.CurrTable()->glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
}

REGAL_DECL void REGAL_CALL glGenerateMipmapEXT(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenerateMipmapEXT(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenerateMipmapEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGenerateMipmapEXT != glGenerateMipmapEXT);
  rCtx->dsp.CurrTable()->glGenerateMipmapEXT(target);
}

/* GL_GREMEDY_string_marker */

REGAL_DECL void REGAL_CALL glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStringMarkerGREMEDY(", len, ", ", string, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStringMarkerGREMEDY);
  RegalAssert(rCtx->dsp.CurrTable()->glStringMarkerGREMEDY != glStringMarkerGREMEDY);
  rCtx->dsp.CurrTable()->glStringMarkerGREMEDY(len, string);
}

/* GL_EXT_stencil_clear_tag */

REGAL_DECL void REGAL_CALL glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilClearTagEXT(", stencilTagBits, ", ", stencilClearTag, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilClearTagEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilClearTagEXT != glStencilClearTagEXT);
  rCtx->dsp.CurrTable()->glStencilClearTagEXT(stencilTagBits, stencilClearTag);
}

/* GL_EXT_framebuffer_blit */

REGAL_DECL void REGAL_CALL glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlitFramebufferEXT(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlitFramebufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBlitFramebufferEXT != glBlitFramebufferEXT);
  rCtx->dsp.CurrTable()->glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

/* GL_EXT_framebuffer_multisample */

REGAL_DECL void REGAL_CALL glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRenderbufferStorageMultisampleEXT(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorageMultisampleEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorageMultisampleEXT != glRenderbufferStorageMultisampleEXT);
  rCtx->dsp.CurrTable()->glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
}

/* GL_EXT_timer_query */

REGAL_DECL void REGAL_CALL glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryObjecti64vEXT(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjecti64vEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjecti64vEXT != glGetQueryObjecti64vEXT);
  rCtx->dsp.CurrTable()->glGetQueryObjecti64vEXT(id, pname, params);
}

REGAL_DECL void REGAL_CALL glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetQueryObjectui64vEXT(", id, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectui64vEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetQueryObjectui64vEXT != glGetQueryObjectui64vEXT);
  rCtx->dsp.CurrTable()->glGetQueryObjectui64vEXT(id, pname, params);
}

/* GL_EXT_gpu_program_parameters */

REGAL_DECL void REGAL_CALL glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameters4fvEXT(", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameters4fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameters4fvEXT != glProgramEnvParameters4fvEXT);
  rCtx->dsp.CurrTable()->glProgramEnvParameters4fvEXT(target, index, count, params);
}

REGAL_DECL void REGAL_CALL glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameters4fvEXT(", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameters4fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameters4fvEXT != glProgramLocalParameters4fvEXT);
  rCtx->dsp.CurrTable()->glProgramLocalParameters4fvEXT(target, index, count, params);
}

/* GL_APPLE_flush_buffer_range */

REGAL_DECL void REGAL_CALL glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBufferParameteriAPPLE(", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBufferParameteriAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glBufferParameteriAPPLE != glBufferParameteriAPPLE);
  rCtx->dsp.CurrTable()->glBufferParameteriAPPLE(target, pname, param);
}

REGAL_DECL void REGAL_CALL glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFlushMappedBufferRangeAPPLE(", toString(target), ", ", offset, ", ", size, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFlushMappedBufferRangeAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glFlushMappedBufferRangeAPPLE != glFlushMappedBufferRangeAPPLE);
  rCtx->dsp.CurrTable()->glFlushMappedBufferRangeAPPLE(target, offset, size);
}

/* GL_NV_gpu_program4 */

REGAL_DECL void REGAL_CALL glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameterI4iNV(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameterI4iNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameterI4iNV != glProgramLocalParameterI4iNV);
  rCtx->dsp.CurrTable()->glProgramLocalParameterI4iNV(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameterI4ivNV(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameterI4ivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameterI4ivNV != glProgramLocalParameterI4ivNV);
  rCtx->dsp.CurrTable()->glProgramLocalParameterI4ivNV(target, index, params);
}

REGAL_DECL void REGAL_CALL glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParametersI4ivNV(", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParametersI4ivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParametersI4ivNV != glProgramLocalParametersI4ivNV);
  rCtx->dsp.CurrTable()->glProgramLocalParametersI4ivNV(target, index, count, params);
}

REGAL_DECL void REGAL_CALL glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameterI4uiNV(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameterI4uiNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameterI4uiNV != glProgramLocalParameterI4uiNV);
  rCtx->dsp.CurrTable()->glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParameterI4uivNV(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameterI4uivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParameterI4uivNV != glProgramLocalParameterI4uivNV);
  rCtx->dsp.CurrTable()->glProgramLocalParameterI4uivNV(target, index, params);
}

REGAL_DECL void REGAL_CALL glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramLocalParametersI4uivNV(", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParametersI4uivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramLocalParametersI4uivNV != glProgramLocalParametersI4uivNV);
  rCtx->dsp.CurrTable()->glProgramLocalParametersI4uivNV(target, index, count, params);
}

REGAL_DECL void REGAL_CALL glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameterI4iNV(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameterI4iNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameterI4iNV != glProgramEnvParameterI4iNV);
  rCtx->dsp.CurrTable()->glProgramEnvParameterI4iNV(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameterI4ivNV(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameterI4ivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameterI4ivNV != glProgramEnvParameterI4ivNV);
  rCtx->dsp.CurrTable()->glProgramEnvParameterI4ivNV(target, index, params);
}

REGAL_DECL void REGAL_CALL glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParametersI4ivNV(", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParametersI4ivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParametersI4ivNV != glProgramEnvParametersI4ivNV);
  rCtx->dsp.CurrTable()->glProgramEnvParametersI4ivNV(target, index, count, params);
}

REGAL_DECL void REGAL_CALL glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameterI4uiNV(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameterI4uiNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameterI4uiNV != glProgramEnvParameterI4uiNV);
  rCtx->dsp.CurrTable()->glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParameterI4uivNV(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameterI4uivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParameterI4uivNV != glProgramEnvParameterI4uivNV);
  rCtx->dsp.CurrTable()->glProgramEnvParameterI4uivNV(target, index, params);
}

REGAL_DECL void REGAL_CALL glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramEnvParametersI4uivNV(", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParametersI4uivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramEnvParametersI4uivNV != glProgramEnvParametersI4uivNV);
  rCtx->dsp.CurrTable()->glProgramEnvParametersI4uivNV(target, index, count, params);
}

REGAL_DECL void REGAL_CALL glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramLocalParameterIivNV(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramLocalParameterIivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramLocalParameterIivNV != glGetProgramLocalParameterIivNV);
  rCtx->dsp.CurrTable()->glGetProgramLocalParameterIivNV(target, index, params);
}

REGAL_DECL void REGAL_CALL glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramLocalParameterIuivNV(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramLocalParameterIuivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramLocalParameterIuivNV != glGetProgramLocalParameterIuivNV);
  rCtx->dsp.CurrTable()->glGetProgramLocalParameterIuivNV(target, index, params);
}

REGAL_DECL void REGAL_CALL glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramEnvParameterIivNV(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramEnvParameterIivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramEnvParameterIivNV != glGetProgramEnvParameterIivNV);
  rCtx->dsp.CurrTable()->glGetProgramEnvParameterIivNV(target, index, params);
}

REGAL_DECL void REGAL_CALL glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetProgramEnvParameterIuivNV(", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramEnvParameterIuivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetProgramEnvParameterIuivNV != glGetProgramEnvParameterIuivNV);
  rCtx->dsp.CurrTable()->glGetProgramEnvParameterIuivNV(target, index, params);
}

/* GL_NV_geometry_program4 */

REGAL_DECL void REGAL_CALL glProgramVertexLimitNV(GLenum target, GLint limit)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramVertexLimitNV(", toString(target), ", ", limit, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramVertexLimitNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramVertexLimitNV != glProgramVertexLimitNV);
  rCtx->dsp.CurrTable()->glProgramVertexLimitNV(target, limit);
}

REGAL_DECL void REGAL_CALL glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTextureEXT(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureEXT != glFramebufferTextureEXT);
  rCtx->dsp.CurrTable()->glFramebufferTextureEXT(target, attachment, texture, level);
}

REGAL_DECL void REGAL_CALL glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTextureFaceEXT(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureFaceEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureFaceEXT != glFramebufferTextureFaceEXT);
  rCtx->dsp.CurrTable()->glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
}

/* GL_EXT_geometry_shader4 */

REGAL_DECL void REGAL_CALL glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramParameteriEXT(", program, ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameteriEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramParameteriEXT != glProgramParameteriEXT);
  rCtx->dsp.CurrTable()->glProgramParameteriEXT(program, pname, value);
}

/* GL_NV_vertex_program4 */

REGAL_DECL void REGAL_CALL glVertexAttribI1iEXT(GLuint index, GLint x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI1iEXT(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1iEXT != glVertexAttribI1iEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI1iEXT(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI2iEXT(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2iEXT != glVertexAttribI2iEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI2iEXT(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI3iEXT(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3iEXT != glVertexAttribI3iEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI3iEXT(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4iEXT(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4iEXT != glVertexAttribI4iEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI4iEXT(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttribI1uiEXT(GLuint index, GLuint x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI1uiEXT(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1uiEXT != glVertexAttribI1uiEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI1uiEXT(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI2uiEXT(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2uiEXT != glVertexAttribI2uiEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI2uiEXT(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI3uiEXT(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3uiEXT != glVertexAttribI3uiEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI3uiEXT(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4uiEXT(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4uiEXT != glVertexAttribI4uiEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI4uiEXT(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttribI1ivEXT(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI1ivEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1ivEXT != glVertexAttribI1ivEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI1ivEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI2ivEXT(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI2ivEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2ivEXT != glVertexAttribI2ivEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI2ivEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI3ivEXT(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI3ivEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3ivEXT != glVertexAttribI3ivEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI3ivEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4ivEXT(GLuint index, const GLint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4ivEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4ivEXT != glVertexAttribI4ivEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI4ivEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI1uivEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI1uivEXT != glVertexAttribI1uivEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI1uivEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI2uivEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI2uivEXT != glVertexAttribI2uivEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI2uivEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI3uivEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI3uivEXT != glVertexAttribI3uivEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI3uivEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4uivEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4uivEXT != glVertexAttribI4uivEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI4uivEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4bvEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4bvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4bvEXT != glVertexAttribI4bvEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI4bvEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4svEXT(GLuint index, const GLshort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4svEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4svEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4svEXT != glVertexAttribI4svEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI4svEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4ubvEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4ubvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4ubvEXT != glVertexAttribI4ubvEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI4ubvEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribI4usvEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4usvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribI4usvEXT != glVertexAttribI4usvEXT);
  rCtx->dsp.CurrTable()->glVertexAttribI4usvEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribIPointerEXT(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribIPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribIPointerEXT != glVertexAttribIPointerEXT);
  rCtx->dsp.CurrTable()->glVertexAttribIPointerEXT(index, size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribIivEXT(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribIivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribIivEXT != glGetVertexAttribIivEXT);
  rCtx->dsp.CurrTable()->glGetVertexAttribIivEXT(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribIuivEXT(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribIuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribIuivEXT != glGetVertexAttribIuivEXT);
  rCtx->dsp.CurrTable()->glGetVertexAttribIuivEXT(index, pname, params);
}

/* GL_EXT_gpu_shader4 */

REGAL_DECL void REGAL_CALL glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformuivEXT(", program, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformuivEXT != glGetUniformuivEXT);
  rCtx->dsp.CurrTable()->glGetUniformuivEXT(program, location, params);
}

REGAL_DECL void REGAL_CALL glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindFragDataLocationEXT(", program, ", ", color, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindFragDataLocationEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindFragDataLocationEXT != glBindFragDataLocationEXT);
  rCtx->dsp.CurrTable()->glBindFragDataLocationEXT(program, color, name);
}

REGAL_DECL GLint REGAL_CALL glGetFragDataLocationEXT(GLuint program, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragDataLocationEXT(", program, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragDataLocationEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragDataLocationEXT != glGetFragDataLocationEXT);
  return rCtx->dsp.CurrTable()->glGetFragDataLocationEXT(program, name);
}

REGAL_DECL void REGAL_CALL glUniform1uiEXT(GLint location, GLuint v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1uiEXT(", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1uiEXT != glUniform1uiEXT);
  rCtx->dsp.CurrTable()->glUniform1uiEXT(location, v0);
}

REGAL_DECL void REGAL_CALL glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2uiEXT(", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2uiEXT != glUniform2uiEXT);
  rCtx->dsp.CurrTable()->glUniform2uiEXT(location, v0, v1);
}

REGAL_DECL void REGAL_CALL glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3uiEXT(", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3uiEXT != glUniform3uiEXT);
  rCtx->dsp.CurrTable()->glUniform3uiEXT(location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4uiEXT(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4uiEXT != glUniform4uiEXT);
  rCtx->dsp.CurrTable()->glUniform4uiEXT(location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1uivEXT(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1uivEXT != glUniform1uivEXT);
  rCtx->dsp.CurrTable()->glUniform1uivEXT(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2uivEXT(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2uivEXT != glUniform2uivEXT);
  rCtx->dsp.CurrTable()->glUniform2uivEXT(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3uivEXT(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3uivEXT != glUniform3uivEXT);
  rCtx->dsp.CurrTable()->glUniform3uivEXT(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4uivEXT(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4uivEXT != glUniform4uivEXT);
  rCtx->dsp.CurrTable()->glUniform4uivEXT(location, count, value);
}

/* GL_EXT_draw_instanced */

REGAL_DECL void REGAL_CALL glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawArraysInstancedEXT(", toString(mode), ", ", start, ", ", count, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysInstancedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysInstancedEXT != glDrawArraysInstancedEXT);
  rCtx->dsp.CurrTable()->glDrawArraysInstancedEXT(mode, start, count, primcount);
}

REGAL_DECL void REGAL_CALL glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementsInstancedEXT(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedEXT != glDrawElementsInstancedEXT);
  rCtx->dsp.CurrTable()->glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
}

/* GL_EXT_texture_array */

REGAL_DECL void REGAL_CALL glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferTextureLayerEXT(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureLayerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferTextureLayerEXT != glFramebufferTextureLayerEXT);
  rCtx->dsp.CurrTable()->glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
}

/* GL_EXT_texture_buffer_object */

REGAL_DECL void REGAL_CALL glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexBufferEXT(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexBufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTexBufferEXT != glTexBufferEXT);
  rCtx->dsp.CurrTable()->glTexBufferEXT(target, internalformat, buffer);
}

/* GL_NV_depth_buffer_float */

REGAL_DECL void REGAL_CALL glDepthRangedNV(GLdouble zNear, GLdouble zFar)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthRangedNV(", zNear, ", ", zFar, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRangedNV);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthRangedNV != glDepthRangedNV);
  rCtx->dsp.CurrTable()->glDepthRangedNV(zNear, zFar);
}

REGAL_DECL void REGAL_CALL glClearDepthdNV(GLdouble depth)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearDepthdNV(", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearDepthdNV);
  RegalAssert(rCtx->dsp.CurrTable()->glClearDepthdNV != glClearDepthdNV);
  rCtx->dsp.CurrTable()->glClearDepthdNV(depth);
}

REGAL_DECL void REGAL_CALL glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDepthBoundsdNV(", zmin, ", ", zmax, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDepthBoundsdNV);
  RegalAssert(rCtx->dsp.CurrTable()->glDepthBoundsdNV != glDepthBoundsdNV);
  rCtx->dsp.CurrTable()->glDepthBoundsdNV(zmin, zmax);
}

/* GL_NV_framebuffer_multisample_coverage */

REGAL_DECL void REGAL_CALL glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glRenderbufferStorageMultisampleCoverageNV(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorageMultisampleCoverageNV);
  RegalAssert(rCtx->dsp.CurrTable()->glRenderbufferStorageMultisampleCoverageNV != glRenderbufferStorageMultisampleCoverageNV);
  rCtx->dsp.CurrTable()->glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
}

/* GL_NV_parameter_buffer_object */

REGAL_DECL void REGAL_CALL glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramBufferParametersfvNV(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramBufferParametersfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramBufferParametersfvNV != glProgramBufferParametersfvNV);
  rCtx->dsp.CurrTable()->glProgramBufferParametersfvNV(target, buffer, index, count, params);
}

REGAL_DECL void REGAL_CALL glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramBufferParametersIivNV(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramBufferParametersIivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramBufferParametersIivNV != glProgramBufferParametersIivNV);
  rCtx->dsp.CurrTable()->glProgramBufferParametersIivNV(target, buffer, index, count, params);
}

REGAL_DECL void REGAL_CALL glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramBufferParametersIuivNV(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramBufferParametersIuivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramBufferParametersIuivNV != glProgramBufferParametersIuivNV);
  rCtx->dsp.CurrTable()->glProgramBufferParametersIuivNV(target, buffer, index, count, params);
}

/* GL_EXT_draw_buffers2 */

REGAL_DECL void REGAL_CALL glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorMaskIndexedEXT(", buf, ", ", r, ", ", g, ", ", b, ", ", a, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorMaskIndexedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glColorMaskIndexedEXT != glColorMaskIndexedEXT);
  rCtx->dsp.CurrTable()->glColorMaskIndexedEXT(buf, r, g, b, a);
}

REGAL_DECL void REGAL_CALL glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBooleanIndexedvEXT(", toString(value), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBooleanIndexedvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBooleanIndexedvEXT != glGetBooleanIndexedvEXT);
  rCtx->dsp.CurrTable()->glGetBooleanIndexedvEXT(value, index, data);
}

REGAL_DECL void REGAL_CALL glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetIntegerIndexedvEXT(", toString(value), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegerIndexedvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegerIndexedvEXT != glGetIntegerIndexedvEXT);
  rCtx->dsp.CurrTable()->glGetIntegerIndexedvEXT(value, index, data);
}

REGAL_DECL void REGAL_CALL glEnableIndexedEXT(GLenum target, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnableIndexedEXT(", toString(target), ", ", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnableIndexedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glEnableIndexedEXT != glEnableIndexedEXT);
  rCtx->dsp.CurrTable()->glEnableIndexedEXT(target, index);
}

REGAL_DECL void REGAL_CALL glDisableIndexedEXT(GLenum target, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisableIndexedEXT(", toString(target), ", ", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisableIndexedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDisableIndexedEXT != glDisableIndexedEXT);
  rCtx->dsp.CurrTable()->glDisableIndexedEXT(target, index);
}

REGAL_DECL GLboolean REGAL_CALL glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsEnabledIndexedEXT(", toString(target), ", ", index, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsEnabledIndexedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glIsEnabledIndexedEXT != glIsEnabledIndexedEXT);
  return rCtx->dsp.CurrTable()->glIsEnabledIndexedEXT(target, index);
}

/* GL_NV_transform_feedback */

REGAL_DECL void REGAL_CALL glBeginTransformFeedbackNV(GLenum primitiveMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginTransformFeedbackNV(", toString(primitiveMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginTransformFeedbackNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginTransformFeedbackNV != glBeginTransformFeedbackNV);
  rCtx->dsp.CurrTable()->glBeginTransformFeedbackNV(primitiveMode);
}

REGAL_DECL void REGAL_CALL glEndTransformFeedbackNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndTransformFeedbackNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndTransformFeedbackNV);
  RegalAssert(rCtx->dsp.CurrTable()->glEndTransformFeedbackNV != glEndTransformFeedbackNV);
  rCtx->dsp.CurrTable()->glEndTransformFeedbackNV();
}

REGAL_DECL void REGAL_CALL glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTransformFeedbackAttribsNV(", count, ", ", attribs, ", ", toString(bufferMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTransformFeedbackAttribsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTransformFeedbackAttribsNV != glTransformFeedbackAttribsNV);
  rCtx->dsp.CurrTable()->glTransformFeedbackAttribsNV(count, attribs, bufferMode);
}

REGAL_DECL void REGAL_CALL glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferRangeNV(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferRangeNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferRangeNV != glBindBufferRangeNV);
  rCtx->dsp.CurrTable()->glBindBufferRangeNV(target, index, buffer, offset, size);
}

REGAL_DECL void REGAL_CALL glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferOffsetNV(", toString(target), ", ", index, ", ", buffer, ", ", offset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferOffsetNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferOffsetNV != glBindBufferOffsetNV);
  rCtx->dsp.CurrTable()->glBindBufferOffsetNV(target, index, buffer, offset);
}

REGAL_DECL void REGAL_CALL glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferBaseNV(", toString(target), ", ", index, ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferBaseNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferBaseNV != glBindBufferBaseNV);
  rCtx->dsp.CurrTable()->glBindBufferBaseNV(target, index, buffer);
}

REGAL_DECL void REGAL_CALL glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTransformFeedbackVaryingsNV(", program, ", ", count, ", ", locations, ", ", toString(bufferMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTransformFeedbackVaryingsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTransformFeedbackVaryingsNV != glTransformFeedbackVaryingsNV);
  rCtx->dsp.CurrTable()->glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
}

REGAL_DECL void REGAL_CALL glActiveVaryingNV(GLuint program, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glActiveVaryingNV(", program, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glActiveVaryingNV);
  RegalAssert(rCtx->dsp.CurrTable()->glActiveVaryingNV != glActiveVaryingNV);
  rCtx->dsp.CurrTable()->glActiveVaryingNV(program, name);
}

REGAL_DECL GLint REGAL_CALL glGetVaryingLocationNV(GLuint program, const GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVaryingLocationNV(", program, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVaryingLocationNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVaryingLocationNV != glGetVaryingLocationNV);
  return rCtx->dsp.CurrTable()->glGetVaryingLocationNV(program, name);
}

REGAL_DECL void REGAL_CALL glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetActiveVaryingNV(", program, ", ", index, ", ", bufSize, ", ", length, ", ", size, ", ", type, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveVaryingNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetActiveVaryingNV != glGetActiveVaryingNV);
  rCtx->dsp.CurrTable()->glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
}

REGAL_DECL void REGAL_CALL glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTransformFeedbackVaryingNV(", program, ", ", index, ", ", location, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTransformFeedbackVaryingNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTransformFeedbackVaryingNV != glGetTransformFeedbackVaryingNV);
  rCtx->dsp.CurrTable()->glGetTransformFeedbackVaryingNV(program, index, location);
}

/* GL_EXT_bindable_uniform */

REGAL_DECL void REGAL_CALL glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformBufferEXT(", program, ", ", location, ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformBufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformBufferEXT != glUniformBufferEXT);
  rCtx->dsp.CurrTable()->glUniformBufferEXT(program, location, buffer);
}

REGAL_DECL GLint REGAL_CALL glGetUniformBufferSizeEXT(GLuint program, GLint location)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformBufferSizeEXT(", program, ", ", location, ")");
  if (!rCtx) return (GLint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformBufferSizeEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformBufferSizeEXT != glGetUniformBufferSizeEXT);
  return rCtx->dsp.CurrTable()->glGetUniformBufferSizeEXT(program, location);
}

REGAL_DECL GLintptr REGAL_CALL glGetUniformOffsetEXT(GLuint program, GLint location)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformOffsetEXT(", program, ", ", location, ")");
  if (!rCtx) return (GLintptr )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformOffsetEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformOffsetEXT != glGetUniformOffsetEXT);
  return rCtx->dsp.CurrTable()->glGetUniformOffsetEXT(program, location);
}

/* GL_EXT_texture_integer */

REGAL_DECL void REGAL_CALL glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexParameterIivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterIivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterIivEXT != glTexParameterIivEXT);
  rCtx->dsp.CurrTable()->glTexParameterIivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexParameterIuivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterIuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTexParameterIuivEXT != glTexParameterIuivEXT);
  rCtx->dsp.CurrTable()->glTexParameterIuivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexParameterIivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterIivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterIivEXT != glGetTexParameterIivEXT);
  rCtx->dsp.CurrTable()->glGetTexParameterIivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexParameterIuivEXT(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterIuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterIuivEXT != glGetTexParameterIuivEXT);
  rCtx->dsp.CurrTable()->glGetTexParameterIuivEXT(target, pname, params);
}

REGAL_DECL void REGAL_CALL glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearColorIiEXT(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearColorIiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glClearColorIiEXT != glClearColorIiEXT);
  rCtx->dsp.CurrTable()->glClearColorIiEXT(red, green, blue, alpha);
}

REGAL_DECL void REGAL_CALL glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClearColorIuiEXT(", red, ", ", green, ", ", blue, ", ", alpha, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClearColorIuiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glClearColorIuiEXT != glClearColorIuiEXT);
  rCtx->dsp.CurrTable()->glClearColorIuiEXT(red, green, blue, alpha);
}

/* GL_GREMEDY_frame_terminator */

REGAL_DECL void REGAL_CALL glFrameTerminatorGREMEDY(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFrameTerminatorGREMEDY()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFrameTerminatorGREMEDY);
  RegalAssert(rCtx->dsp.CurrTable()->glFrameTerminatorGREMEDY != glFrameTerminatorGREMEDY);
  rCtx->dsp.CurrTable()->glFrameTerminatorGREMEDY();
}

/* GL_NV_conditional_render */

REGAL_DECL void REGAL_CALL glBeginConditionalRenderNV(GLuint id, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginConditionalRenderNV(", id, ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginConditionalRenderNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginConditionalRenderNV != glBeginConditionalRenderNV);
  rCtx->dsp.CurrTable()->glBeginConditionalRenderNV(id, mode);
}

REGAL_DECL void REGAL_CALL glEndConditionalRenderNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndConditionalRenderNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndConditionalRenderNV);
  RegalAssert(rCtx->dsp.CurrTable()->glEndConditionalRenderNV != glEndConditionalRenderNV);
  rCtx->dsp.CurrTable()->glEndConditionalRenderNV();
}

/* GL_NV_present_video */

REGAL_DECL void REGAL_CALL glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPresentFrameKeyedNV(", video_slot, ", ", minPresentTime, ", ", beginPresentTimeId, ", ", presentDurationId, ", ", toString(type), ", ", toString(target0), ", ", fill0, ", ", key0, ", ", toString(target1), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPresentFrameKeyedNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPresentFrameKeyedNV != glPresentFrameKeyedNV);
  rCtx->dsp.CurrTable()->glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}

REGAL_DECL void REGAL_CALL glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPresentFrameDualFillNV(", video_slot, ", ", minPresentTime, ", ", beginPresentTimeId, ", ", presentDurationId, ", ", toString(type), ", ", toString(target0), ", ", fill0, ", ", toString(target1), ", ", fill1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPresentFrameDualFillNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPresentFrameDualFillNV != glPresentFrameDualFillNV);
  rCtx->dsp.CurrTable()->glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}

REGAL_DECL void REGAL_CALL glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVideoivNV(", video_slot, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoivNV != glGetVideoivNV);
  rCtx->dsp.CurrTable()->glGetVideoivNV(video_slot, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVideouivNV(", video_slot, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideouivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideouivNV != glGetVideouivNV);
  rCtx->dsp.CurrTable()->glGetVideouivNV(video_slot, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVideoi64vNV(", video_slot, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoi64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoi64vNV != glGetVideoi64vNV);
  rCtx->dsp.CurrTable()->glGetVideoi64vNV(video_slot, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVideoui64vNV(", video_slot, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoui64vNV != glGetVideoui64vNV);
  rCtx->dsp.CurrTable()->glGetVideoui64vNV(video_slot, pname, params);
}

/* GL_EXT_transform_feedback */

REGAL_DECL void REGAL_CALL glBeginTransformFeedbackEXT(GLenum primitiveMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginTransformFeedbackEXT(", toString(primitiveMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginTransformFeedbackEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginTransformFeedbackEXT != glBeginTransformFeedbackEXT);
  rCtx->dsp.CurrTable()->glBeginTransformFeedbackEXT(primitiveMode);
}

REGAL_DECL void REGAL_CALL glEndTransformFeedbackEXT(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndTransformFeedbackEXT()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndTransformFeedbackEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glEndTransformFeedbackEXT != glEndTransformFeedbackEXT);
  rCtx->dsp.CurrTable()->glEndTransformFeedbackEXT();
}

REGAL_DECL void REGAL_CALL glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferRangeEXT(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferRangeEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferRangeEXT != glBindBufferRangeEXT);
  rCtx->dsp.CurrTable()->glBindBufferRangeEXT(target, index, buffer, offset, size);
}

REGAL_DECL void REGAL_CALL glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferOffsetEXT(", toString(target), ", ", index, ", ", buffer, ", ", offset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferOffsetEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferOffsetEXT != glBindBufferOffsetEXT);
  rCtx->dsp.CurrTable()->glBindBufferOffsetEXT(target, index, buffer, offset);
}

REGAL_DECL void REGAL_CALL glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindBufferBaseEXT(", toString(target), ", ", index, ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferBaseEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindBufferBaseEXT != glBindBufferBaseEXT);
  rCtx->dsp.CurrTable()->glBindBufferBaseEXT(target, index, buffer);
}

REGAL_DECL void REGAL_CALL glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTransformFeedbackVaryingsEXT(", program, ", ", count, ", ", varyings, ", ", toString(bufferMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTransformFeedbackVaryingsEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTransformFeedbackVaryingsEXT != glTransformFeedbackVaryingsEXT);
  rCtx->dsp.CurrTable()->glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
}

REGAL_DECL void REGAL_CALL glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTransformFeedbackVaryingEXT(", program, ", ", index, ", ", bufSize, ", ", length, ", ", size, ", ", type, ", ", boost::print::quote(name,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTransformFeedbackVaryingEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTransformFeedbackVaryingEXT != glGetTransformFeedbackVaryingEXT);
  rCtx->dsp.CurrTable()->glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
}

/* GL_EXT_direct_state_access */

REGAL_DECL void REGAL_CALL glClientAttribDefaultEXT(GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glClientAttribDefaultEXT(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glClientAttribDefaultEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glClientAttribDefaultEXT != glClientAttribDefaultEXT);
  rCtx->dsp.CurrTable()->glClientAttribDefaultEXT(mask);
}

REGAL_DECL void REGAL_CALL glPushClientAttribDefaultEXT(GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPushClientAttribDefaultEXT(", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPushClientAttribDefaultEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPushClientAttribDefaultEXT != glPushClientAttribDefaultEXT);
  rCtx->dsp.CurrTable()->glPushClientAttribDefaultEXT(mask);
}

REGAL_DECL void REGAL_CALL glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixLoadfEXT(", toString(mode), ", ", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoadfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoadfEXT != glMatrixLoadfEXT);
  rCtx->dsp.CurrTable()->glMatrixLoadfEXT(mode, m);
}

REGAL_DECL void REGAL_CALL glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixLoaddEXT(", toString(mode), ", ", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoaddEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoaddEXT != glMatrixLoaddEXT);
  rCtx->dsp.CurrTable()->glMatrixLoaddEXT(mode, m);
}

REGAL_DECL void REGAL_CALL glMatrixMultfEXT(GLenum mode, const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixMultfEXT(", toString(mode), ", ", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMultfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMultfEXT != glMatrixMultfEXT);
  rCtx->dsp.CurrTable()->glMatrixMultfEXT(mode, m);
}

REGAL_DECL void REGAL_CALL glMatrixMultdEXT(GLenum mode, const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixMultdEXT(", toString(mode), ", ", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMultdEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMultdEXT != glMatrixMultdEXT);
  rCtx->dsp.CurrTable()->glMatrixMultdEXT(mode, m);
}

REGAL_DECL void REGAL_CALL glMatrixLoadIdentityEXT(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixLoadIdentityEXT(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoadIdentityEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoadIdentityEXT != glMatrixLoadIdentityEXT);
  rCtx->dsp.CurrTable()->glMatrixLoadIdentityEXT(mode);
}

REGAL_DECL void REGAL_CALL glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixRotatefEXT(", toString(mode), ", ", angle, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixRotatefEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixRotatefEXT != glMatrixRotatefEXT);
  rCtx->dsp.CurrTable()->glMatrixRotatefEXT(mode, angle, x, y, z);
}

REGAL_DECL void REGAL_CALL glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixRotatedEXT(", toString(mode), ", ", angle, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixRotatedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixRotatedEXT != glMatrixRotatedEXT);
  rCtx->dsp.CurrTable()->glMatrixRotatedEXT(mode, angle, x, y, z);
}

REGAL_DECL void REGAL_CALL glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixScalefEXT(", toString(mode), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixScalefEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixScalefEXT != glMatrixScalefEXT);
  rCtx->dsp.CurrTable()->glMatrixScalefEXT(mode, x, y, z);
}

REGAL_DECL void REGAL_CALL glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixScaledEXT(", toString(mode), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixScaledEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixScaledEXT != glMatrixScaledEXT);
  rCtx->dsp.CurrTable()->glMatrixScaledEXT(mode, x, y, z);
}

REGAL_DECL void REGAL_CALL glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixTranslatefEXT(", toString(mode), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixTranslatefEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixTranslatefEXT != glMatrixTranslatefEXT);
  rCtx->dsp.CurrTable()->glMatrixTranslatefEXT(mode, x, y, z);
}

REGAL_DECL void REGAL_CALL glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixTranslatedEXT(", toString(mode), ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixTranslatedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixTranslatedEXT != glMatrixTranslatedEXT);
  rCtx->dsp.CurrTable()->glMatrixTranslatedEXT(mode, x, y, z);
}

REGAL_DECL void REGAL_CALL glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixFrustumEXT(", toString(mode), ", ", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixFrustumEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixFrustumEXT != glMatrixFrustumEXT);
  rCtx->dsp.CurrTable()->glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
}

REGAL_DECL void REGAL_CALL glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixOrthoEXT(", toString(mode), ", ", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixOrthoEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixOrthoEXT != glMatrixOrthoEXT);
  rCtx->dsp.CurrTable()->glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
}

REGAL_DECL void REGAL_CALL glMatrixPopEXT(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixPopEXT(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixPopEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixPopEXT != glMatrixPopEXT);
  rCtx->dsp.CurrTable()->glMatrixPopEXT(mode);
}

REGAL_DECL void REGAL_CALL glMatrixPushEXT(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixPushEXT(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixPushEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixPushEXT != glMatrixPushEXT);
  rCtx->dsp.CurrTable()->glMatrixPushEXT(mode);
}

REGAL_DECL void REGAL_CALL glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixLoadTransposefEXT(", toString(mode), ", ", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoadTransposefEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoadTransposefEXT != glMatrixLoadTransposefEXT);
  rCtx->dsp.CurrTable()->glMatrixLoadTransposefEXT(mode, m);
}

REGAL_DECL void REGAL_CALL glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixLoadTransposedEXT(", toString(mode), ", ", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoadTransposedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixLoadTransposedEXT != glMatrixLoadTransposedEXT);
  rCtx->dsp.CurrTable()->glMatrixLoadTransposedEXT(mode, m);
}

REGAL_DECL void REGAL_CALL glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixMultTransposefEXT(", toString(mode), ", ", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMultTransposefEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMultTransposefEXT != glMatrixMultTransposefEXT);
  rCtx->dsp.CurrTable()->glMatrixMultTransposefEXT(mode, m);
}

REGAL_DECL void REGAL_CALL glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMatrixMultTransposedEXT(", toString(mode), ", ", m, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMultTransposedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMatrixMultTransposedEXT != glMatrixMultTransposedEXT);
  rCtx->dsp.CurrTable()->glMatrixMultTransposedEXT(mode, m);
}

REGAL_DECL void REGAL_CALL glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureParameterfEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterfEXT != glTextureParameterfEXT);
  rCtx->dsp.CurrTable()->glTextureParameterfEXT(texture, target, pname, param);
}

REGAL_DECL void REGAL_CALL glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureParameterfvEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterfvEXT != glTextureParameterfvEXT);
  rCtx->dsp.CurrTable()->glTextureParameterfvEXT(texture, target, pname, param);
}

REGAL_DECL void REGAL_CALL glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureParameteriEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameteriEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameteriEXT != glTextureParameteriEXT);
  rCtx->dsp.CurrTable()->glTextureParameteriEXT(texture, target, pname, param);
}

REGAL_DECL void REGAL_CALL glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureParameterivEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterivEXT != glTextureParameterivEXT);
  rCtx->dsp.CurrTable()->glTextureParameterivEXT(texture, target, pname, param);
}

REGAL_DECL void REGAL_CALL glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureImage1DEXT(", texture, ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage1DEXT != glTextureImage1DEXT);
  rCtx->dsp.CurrTable()->glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureImage2DEXT(", texture, ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage2DEXT != glTextureImage2DEXT);
  rCtx->dsp.CurrTable()->glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureSubImage1DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureSubImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureSubImage1DEXT != glTextureSubImage1DEXT);
  rCtx->dsp.CurrTable()->glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureSubImage2DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureSubImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureSubImage2DEXT != glTextureSubImage2DEXT);
  rCtx->dsp.CurrTable()->glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTextureImage1DEXT(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureImage1DEXT != glCopyTextureImage1DEXT);
  rCtx->dsp.CurrTable()->glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
}

REGAL_DECL void REGAL_CALL glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTextureImage2DEXT(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureImage2DEXT != glCopyTextureImage2DEXT);
  rCtx->dsp.CurrTable()->glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
}

REGAL_DECL void REGAL_CALL glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTextureSubImage1DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureSubImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureSubImage1DEXT != glCopyTextureSubImage1DEXT);
  rCtx->dsp.CurrTable()->glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
}

REGAL_DECL void REGAL_CALL glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTextureSubImage2DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureSubImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureSubImage2DEXT != glCopyTextureSubImage2DEXT);
  rCtx->dsp.CurrTable()->glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureImageEXT(", texture, ", ", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureImageEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureImageEXT != glGetTextureImageEXT);
  rCtx->dsp.CurrTable()->glGetTextureImageEXT(texture, target, level, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureParameterfvEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureParameterfvEXT != glGetTextureParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetTextureParameterfvEXT(texture, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureParameterivEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureParameterivEXT != glGetTextureParameterivEXT);
  rCtx->dsp.CurrTable()->glGetTextureParameterivEXT(texture, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureLevelParameterfvEXT(", texture, ", ", toString(target), ", ", level, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureLevelParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureLevelParameterfvEXT != glGetTextureLevelParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureLevelParameterivEXT(", texture, ", ", toString(target), ", ", level, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureLevelParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureLevelParameterivEXT != glGetTextureLevelParameterivEXT);
  rCtx->dsp.CurrTable()->glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
}

REGAL_DECL void REGAL_CALL glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureImage3DEXT(", texture, ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage3DEXT != glTextureImage3DEXT);
  rCtx->dsp.CurrTable()->glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureSubImage3DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureSubImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureSubImage3DEXT != glTextureSubImage3DEXT);
  rCtx->dsp.CurrTable()->glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyTextureSubImage3DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureSubImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyTextureSubImage3DEXT != glCopyTextureSubImage3DEXT);
  rCtx->dsp.CurrTable()->glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexParameterfEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterfEXT != glMultiTexParameterfEXT);
  rCtx->dsp.CurrTable()->glMultiTexParameterfEXT(texunit, target, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexParameterfvEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterfvEXT != glMultiTexParameterfvEXT);
  rCtx->dsp.CurrTable()->glMultiTexParameterfvEXT(texunit, target, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexParameteriEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameteriEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameteriEXT != glMultiTexParameteriEXT);
  rCtx->dsp.CurrTable()->glMultiTexParameteriEXT(texunit, target, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexParameterivEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterivEXT != glMultiTexParameterivEXT);
  rCtx->dsp.CurrTable()->glMultiTexParameterivEXT(texunit, target, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexImage1DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexImage1DEXT != glMultiTexImage1DEXT);
  rCtx->dsp.CurrTable()->glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexImage2DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexImage2DEXT != glMultiTexImage2DEXT);
  rCtx->dsp.CurrTable()->glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexSubImage1DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexSubImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexSubImage1DEXT != glMultiTexSubImage1DEXT);
  rCtx->dsp.CurrTable()->glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexSubImage2DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexSubImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexSubImage2DEXT != glMultiTexSubImage2DEXT);
  rCtx->dsp.CurrTable()->glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyMultiTexImage1DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexImage1DEXT != glCopyMultiTexImage1DEXT);
  rCtx->dsp.CurrTable()->glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
}

REGAL_DECL void REGAL_CALL glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyMultiTexImage2DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexImage2DEXT != glCopyMultiTexImage2DEXT);
  rCtx->dsp.CurrTable()->glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
}

REGAL_DECL void REGAL_CALL glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyMultiTexSubImage1DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexSubImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexSubImage1DEXT != glCopyMultiTexSubImage1DEXT);
  rCtx->dsp.CurrTable()->glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
}

REGAL_DECL void REGAL_CALL glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyMultiTexSubImage2DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexSubImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexSubImage2DEXT != glCopyMultiTexSubImage2DEXT);
  rCtx->dsp.CurrTable()->glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexImageEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexImageEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexImageEXT != glGetMultiTexImageEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexParameterfvEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexParameterfvEXT != glGetMultiTexParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexParameterfvEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexParameterivEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexParameterivEXT != glGetMultiTexParameterivEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexParameterivEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexLevelParameterfvEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexLevelParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexLevelParameterfvEXT != glGetMultiTexLevelParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexLevelParameterivEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexLevelParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexLevelParameterivEXT != glGetMultiTexLevelParameterivEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
}

REGAL_DECL void REGAL_CALL glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexImage3DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexImage3DEXT != glMultiTexImage3DEXT);
  rCtx->dsp.CurrTable()->glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexSubImage3DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexSubImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexSubImage3DEXT != glMultiTexSubImage3DEXT);
  rCtx->dsp.CurrTable()->glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

REGAL_DECL void REGAL_CALL glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyMultiTexSubImage3DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexSubImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyMultiTexSubImage3DEXT != glCopyMultiTexSubImage3DEXT);
  rCtx->dsp.CurrTable()->glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindMultiTextureEXT(", toString(texunit), ", ", toString(target), ", ", texture, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindMultiTextureEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindMultiTextureEXT != glBindMultiTextureEXT);
  rCtx->dsp.CurrTable()->glBindMultiTextureEXT(texunit, target, texture);
}

REGAL_DECL void REGAL_CALL glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnableClientStateIndexedEXT(", toString(array), ", ", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnableClientStateIndexedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glEnableClientStateIndexedEXT != glEnableClientStateIndexedEXT);
  rCtx->dsp.CurrTable()->glEnableClientStateIndexedEXT(array, index);
}

REGAL_DECL void REGAL_CALL glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisableClientStateIndexedEXT(", toString(array), ", ", index, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisableClientStateIndexedEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDisableClientStateIndexedEXT != glDisableClientStateIndexedEXT);
  rCtx->dsp.CurrTable()->glDisableClientStateIndexedEXT(array, index);
}

REGAL_DECL void REGAL_CALL glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexCoordPointerEXT(", toString(texunit), ", ", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexCoordPointerEXT != glMultiTexCoordPointerEXT);
  rCtx->dsp.CurrTable()->glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexEnvfEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexEnvfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexEnvfEXT != glMultiTexEnvfEXT);
  rCtx->dsp.CurrTable()->glMultiTexEnvfEXT(texunit, target, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexEnvfvEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexEnvfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexEnvfvEXT != glMultiTexEnvfvEXT);
  rCtx->dsp.CurrTable()->glMultiTexEnvfvEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexEnviEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexEnviEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexEnviEXT != glMultiTexEnviEXT);
  rCtx->dsp.CurrTable()->glMultiTexEnviEXT(texunit, target, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexEnvivEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexEnvivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexEnvivEXT != glMultiTexEnvivEXT);
  rCtx->dsp.CurrTable()->glMultiTexEnvivEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexGendEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGendEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGendEXT != glMultiTexGendEXT);
  rCtx->dsp.CurrTable()->glMultiTexGendEXT(texunit, coord, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexGendvEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGendvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGendvEXT != glMultiTexGendvEXT);
  rCtx->dsp.CurrTable()->glMultiTexGendvEXT(texunit, coord, pname, params);
}

REGAL_DECL void REGAL_CALL glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexGenfEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGenfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGenfEXT != glMultiTexGenfEXT);
  rCtx->dsp.CurrTable()->glMultiTexGenfEXT(texunit, coord, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexGenfvEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGenfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGenfvEXT != glMultiTexGenfvEXT);
  rCtx->dsp.CurrTable()->glMultiTexGenfvEXT(texunit, coord, pname, params);
}

REGAL_DECL void REGAL_CALL glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexGeniEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGeniEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGeniEXT != glMultiTexGeniEXT);
  rCtx->dsp.CurrTable()->glMultiTexGeniEXT(texunit, coord, pname, param);
}

REGAL_DECL void REGAL_CALL glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexGenivEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGenivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexGenivEXT != glMultiTexGenivEXT);
  rCtx->dsp.CurrTable()->glMultiTexGenivEXT(texunit, coord, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexEnvfvEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexEnvfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexEnvfvEXT != glGetMultiTexEnvfvEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexEnvfvEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexEnvivEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexEnvivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexEnvivEXT != glGetMultiTexEnvivEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexEnvivEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexGendvEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexGendvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexGendvEXT != glGetMultiTexGendvEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexGendvEXT(texunit, coord, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexGenfvEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexGenfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexGenfvEXT != glGetMultiTexGenfvEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexGenfvEXT(texunit, coord, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexGenivEXT(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexGenivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexGenivEXT != glGetMultiTexGenivEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexGenivEXT(texunit, coord, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFloatIndexedvEXT(", toString(target), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFloatIndexedvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFloatIndexedvEXT != glGetFloatIndexedvEXT);
  rCtx->dsp.CurrTable()->glGetFloatIndexedvEXT(target, index, data);
}

REGAL_DECL void REGAL_CALL glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetDoubleIndexedvEXT(", toString(target), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetDoubleIndexedvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetDoubleIndexedvEXT != glGetDoubleIndexedvEXT);
  rCtx->dsp.CurrTable()->glGetDoubleIndexedvEXT(target, index, data);
}

REGAL_DECL void REGAL_CALL glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPointerIndexedvEXT(", toString(target), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPointerIndexedvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPointerIndexedvEXT != glGetPointerIndexedvEXT);
  rCtx->dsp.CurrTable()->glGetPointerIndexedvEXT(target, index, data);
}

REGAL_DECL void REGAL_CALL glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTextureImage3DEXT(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureImage3DEXT != glCompressedTextureImage3DEXT);
  rCtx->dsp.CurrTable()->glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

REGAL_DECL void REGAL_CALL glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTextureImage2DEXT(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", bits, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureImage2DEXT != glCompressedTextureImage2DEXT);
  rCtx->dsp.CurrTable()->glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
}

REGAL_DECL void REGAL_CALL glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTextureImage1DEXT(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", bits, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureImage1DEXT != glCompressedTextureImage1DEXT);
  rCtx->dsp.CurrTable()->glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
}

REGAL_DECL void REGAL_CALL glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTextureSubImage3DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureSubImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureSubImage3DEXT != glCompressedTextureSubImage3DEXT);
  rCtx->dsp.CurrTable()->glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}

REGAL_DECL void REGAL_CALL glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTextureSubImage2DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureSubImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureSubImage2DEXT != glCompressedTextureSubImage2DEXT);
  rCtx->dsp.CurrTable()->glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

REGAL_DECL void REGAL_CALL glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedTextureSubImage1DEXT(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", bits, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureSubImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedTextureSubImage1DEXT != glCompressedTextureSubImage1DEXT);
  rCtx->dsp.CurrTable()->glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
}

REGAL_DECL void REGAL_CALL glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCompressedTextureImageEXT(", texture, ", ", toString(target), ", ", lod, ", ", img, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCompressedTextureImageEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCompressedTextureImageEXT != glGetCompressedTextureImageEXT);
  rCtx->dsp.CurrTable()->glGetCompressedTextureImageEXT(texture, target, lod, img);
}

REGAL_DECL void REGAL_CALL glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedMultiTexImage3DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexImage3DEXT != glCompressedMultiTexImage3DEXT);
  rCtx->dsp.CurrTable()->glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

REGAL_DECL void REGAL_CALL glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedMultiTexImage2DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", bits, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexImage2DEXT != glCompressedMultiTexImage2DEXT);
  rCtx->dsp.CurrTable()->glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
}

REGAL_DECL void REGAL_CALL glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedMultiTexImage1DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexImage1DEXT != glCompressedMultiTexImage1DEXT);
  rCtx->dsp.CurrTable()->glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedMultiTexSubImage3DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage3DEXT != glCompressedMultiTexSubImage3DEXT);
  rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedMultiTexSubImage2DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage2DEXT != glCompressedMultiTexSubImage2DEXT);
  rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCompressedMultiTexSubImage1DEXT(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage1DEXT != glCompressedMultiTexSubImage1DEXT);
  rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, data);
}

REGAL_DECL void REGAL_CALL glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetCompressedMultiTexImageEXT(", toString(texunit), ", ", toString(target), ", ", lod, ", ", img, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetCompressedMultiTexImageEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetCompressedMultiTexImageEXT != glGetCompressedMultiTexImageEXT);
  rCtx->dsp.CurrTable()->glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
}

REGAL_DECL void REGAL_CALL glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramStringEXT(", program, ", ", toString(target), ", ", toString(format), ", ", len, ", ", string, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramStringEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramStringEXT != glNamedProgramStringEXT);
  rCtx->dsp.CurrTable()->glNamedProgramStringEXT(program, target, format, len, string);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameter4dEXT(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4dEXT != glNamedProgramLocalParameter4dEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameter4dvEXT(", program, ", ", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4dvEXT != glNamedProgramLocalParameter4dvEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4dvEXT(program, target, index, params);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameter4fEXT(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4fEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4fEXT != glNamedProgramLocalParameter4fEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameter4fvEXT(", program, ", ", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4fvEXT != glNamedProgramLocalParameter4fvEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4fvEXT(program, target, index, params);
}

REGAL_DECL void REGAL_CALL glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedProgramLocalParameterdvEXT(", program, ", ", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterdvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterdvEXT != glGetNamedProgramLocalParameterdvEXT);
  rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
}

REGAL_DECL void REGAL_CALL glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedProgramLocalParameterfvEXT(", program, ", ", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterfvEXT != glGetNamedProgramLocalParameterfvEXT);
  rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
}

REGAL_DECL void REGAL_CALL glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedProgramivEXT(", program, ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramivEXT != glGetNamedProgramivEXT);
  rCtx->dsp.CurrTable()->glGetNamedProgramivEXT(program, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedProgramStringEXT(", program, ", ", toString(target), ", ", toString(pname), ", ", string, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramStringEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramStringEXT != glGetNamedProgramStringEXT);
  rCtx->dsp.CurrTable()->glGetNamedProgramStringEXT(program, target, pname, string);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameters4fvEXT(", program, ", ", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameters4fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameters4fvEXT != glNamedProgramLocalParameters4fvEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameterI4iEXT(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4iEXT != glNamedProgramLocalParameterI4iEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameterI4ivEXT(", program, ", ", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4ivEXT != glNamedProgramLocalParameterI4ivEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParametersI4ivEXT(", program, ", ", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParametersI4ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParametersI4ivEXT != glNamedProgramLocalParametersI4ivEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameterI4uiEXT(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4uiEXT != glNamedProgramLocalParameterI4uiEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParameterI4uivEXT(", program, ", ", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4uivEXT != glNamedProgramLocalParameterI4uivEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
}

REGAL_DECL void REGAL_CALL glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedProgramLocalParametersI4uivEXT(", program, ", ", toString(target), ", ", index, ", ", count, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParametersI4uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedProgramLocalParametersI4uivEXT != glNamedProgramLocalParametersI4uivEXT);
  rCtx->dsp.CurrTable()->glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
}

REGAL_DECL void REGAL_CALL glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedProgramLocalParameterIivEXT(", program, ", ", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterIivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterIivEXT != glGetNamedProgramLocalParameterIivEXT);
  rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
}

REGAL_DECL void REGAL_CALL glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedProgramLocalParameterIuivEXT(", program, ", ", toString(target), ", ", index, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterIuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterIuivEXT != glGetNamedProgramLocalParameterIuivEXT);
  rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
}

REGAL_DECL void REGAL_CALL glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureParameterIivEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterIivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterIivEXT != glTextureParameterIivEXT);
  rCtx->dsp.CurrTable()->glTextureParameterIivEXT(texture, target, pname, params);
}

REGAL_DECL void REGAL_CALL glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureParameterIuivEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterIuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureParameterIuivEXT != glTextureParameterIuivEXT);
  rCtx->dsp.CurrTable()->glTextureParameterIuivEXT(texture, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureParameterIivEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureParameterIivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureParameterIivEXT != glGetTextureParameterIivEXT);
  rCtx->dsp.CurrTable()->glGetTextureParameterIivEXT(texture, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureParameterIuivEXT(", texture, ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureParameterIuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureParameterIuivEXT != glGetTextureParameterIuivEXT);
  rCtx->dsp.CurrTable()->glGetTextureParameterIuivEXT(texture, target, pname, params);
}

REGAL_DECL void REGAL_CALL glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexParameterIivEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterIivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterIivEXT != glMultiTexParameterIivEXT);
  rCtx->dsp.CurrTable()->glMultiTexParameterIivEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexParameterIuivEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterIuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexParameterIuivEXT != glMultiTexParameterIuivEXT);
  rCtx->dsp.CurrTable()->glMultiTexParameterIuivEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexParameterIivEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexParameterIivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexParameterIivEXT != glGetMultiTexParameterIivEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexParameterIivEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultiTexParameterIuivEXT(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexParameterIuivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultiTexParameterIuivEXT != glGetMultiTexParameterIuivEXT);
  rCtx->dsp.CurrTable()->glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
}

REGAL_DECL void REGAL_CALL glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1fEXT(", program, ", ", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1fEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1fEXT != glProgramUniform1fEXT);
  rCtx->dsp.CurrTable()->glProgramUniform1fEXT(program, location, v0);
}

REGAL_DECL void REGAL_CALL glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2fEXT(", program, ", ", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2fEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2fEXT != glProgramUniform2fEXT);
  rCtx->dsp.CurrTable()->glProgramUniform2fEXT(program, location, v0, v1);
}

REGAL_DECL void REGAL_CALL glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3fEXT(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3fEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3fEXT != glProgramUniform3fEXT);
  rCtx->dsp.CurrTable()->glProgramUniform3fEXT(program, location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4fEXT(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4fEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4fEXT != glProgramUniform4fEXT);
  rCtx->dsp.CurrTable()->glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1iEXT(", program, ", ", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1iEXT != glProgramUniform1iEXT);
  rCtx->dsp.CurrTable()->glProgramUniform1iEXT(program, location, v0);
}

REGAL_DECL void REGAL_CALL glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2iEXT(", program, ", ", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2iEXT != glProgramUniform2iEXT);
  rCtx->dsp.CurrTable()->glProgramUniform2iEXT(program, location, v0, v1);
}

REGAL_DECL void REGAL_CALL glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3iEXT(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3iEXT != glProgramUniform3iEXT);
  rCtx->dsp.CurrTable()->glProgramUniform3iEXT(program, location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4iEXT(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4iEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4iEXT != glProgramUniform4iEXT);
  rCtx->dsp.CurrTable()->glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1fvEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1fvEXT != glProgramUniform1fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniform1fvEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2fvEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2fvEXT != glProgramUniform2fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniform2fvEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3fvEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3fvEXT != glProgramUniform3fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniform3fvEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4fvEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4fvEXT != glProgramUniform4fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniform4fvEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1ivEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1ivEXT != glProgramUniform1ivEXT);
  rCtx->dsp.CurrTable()->glProgramUniform1ivEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2ivEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2ivEXT != glProgramUniform2ivEXT);
  rCtx->dsp.CurrTable()->glProgramUniform2ivEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3ivEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3ivEXT != glProgramUniform3ivEXT);
  rCtx->dsp.CurrTable()->glProgramUniform3ivEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4ivEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4ivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4ivEXT != glProgramUniform4ivEXT);
  rCtx->dsp.CurrTable()->glProgramUniform4ivEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2fvEXT != glProgramUniformMatrix2fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3fvEXT != glProgramUniformMatrix3fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4fvEXT != glProgramUniformMatrix4fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2x3fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3fvEXT != glProgramUniformMatrix2x3fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3x2fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2fvEXT != glProgramUniformMatrix3x2fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2x4fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4fvEXT != glProgramUniformMatrix2x4fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4x2fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2fvEXT != glProgramUniformMatrix4x2fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3x4fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4fvEXT != glProgramUniformMatrix3x4fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4x3fvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3fvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3fvEXT != glProgramUniformMatrix4x3fvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1uiEXT(", program, ", ", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1uiEXT != glProgramUniform1uiEXT);
  rCtx->dsp.CurrTable()->glProgramUniform1uiEXT(program, location, v0);
}

REGAL_DECL void REGAL_CALL glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2uiEXT(", program, ", ", location, ", ", v0, ", ", v1, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2uiEXT != glProgramUniform2uiEXT);
  rCtx->dsp.CurrTable()->glProgramUniform2uiEXT(program, location, v0, v1);
}

REGAL_DECL void REGAL_CALL glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3uiEXT(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3uiEXT != glProgramUniform3uiEXT);
  rCtx->dsp.CurrTable()->glProgramUniform3uiEXT(program, location, v0, v1, v2);
}

REGAL_DECL void REGAL_CALL glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4uiEXT(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4uiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4uiEXT != glProgramUniform4uiEXT);
  rCtx->dsp.CurrTable()->glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
}

REGAL_DECL void REGAL_CALL glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1uivEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1uivEXT != glProgramUniform1uivEXT);
  rCtx->dsp.CurrTable()->glProgramUniform1uivEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2uivEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2uivEXT != glProgramUniform2uivEXT);
  rCtx->dsp.CurrTable()->glProgramUniform2uivEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3uivEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3uivEXT != glProgramUniform3uivEXT);
  rCtx->dsp.CurrTable()->glProgramUniform3uivEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4uivEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4uivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4uivEXT != glProgramUniform4uivEXT);
  rCtx->dsp.CurrTable()->glProgramUniform4uivEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedBufferDataEXT(", buffer, ", ", size, ", ", data, ", ", toString(usage), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedBufferDataEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedBufferDataEXT != glNamedBufferDataEXT);
  rCtx->dsp.CurrTable()->glNamedBufferDataEXT(buffer, size, data, usage);
}

REGAL_DECL void REGAL_CALL glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedBufferSubDataEXT(", buffer, ", ", offset, ", ", size, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedBufferSubDataEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedBufferSubDataEXT != glNamedBufferSubDataEXT);
  rCtx->dsp.CurrTable()->glNamedBufferSubDataEXT(buffer, offset, size, data);
}

REGAL_DECL GLvoid *REGAL_CALL glMapNamedBufferEXT(GLuint buffer, GLenum access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapNamedBufferEXT(", buffer, ", ", toString(access), ")");
  if (!rCtx) return NULL;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapNamedBufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMapNamedBufferEXT != glMapNamedBufferEXT);
  return rCtx->dsp.CurrTable()->glMapNamedBufferEXT(buffer, access);
}

REGAL_DECL GLboolean REGAL_CALL glUnmapNamedBufferEXT(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUnmapNamedBufferEXT(", buffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUnmapNamedBufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUnmapNamedBufferEXT != glUnmapNamedBufferEXT);
  return rCtx->dsp.CurrTable()->glUnmapNamedBufferEXT(buffer);
}

REGAL_DECL void REGAL_CALL glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedBufferParameterivEXT(", buffer, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedBufferParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedBufferParameterivEXT != glGetNamedBufferParameterivEXT);
  rCtx->dsp.CurrTable()->glGetNamedBufferParameterivEXT(buffer, pname, params);
}

REGAL_DECL void REGAL_CALL glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedBufferPointervEXT(", buffer, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedBufferPointervEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedBufferPointervEXT != glGetNamedBufferPointervEXT);
  rCtx->dsp.CurrTable()->glGetNamedBufferPointervEXT(buffer, pname, params);
}

REGAL_DECL void REGAL_CALL glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedBufferSubDataEXT(", buffer, ", ", offset, ", ", size, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedBufferSubDataEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedBufferSubDataEXT != glGetNamedBufferSubDataEXT);
  rCtx->dsp.CurrTable()->glGetNamedBufferSubDataEXT(buffer, offset, size, data);
}

REGAL_DECL void REGAL_CALL glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureBufferEXT(", texture, ", ", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureBufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureBufferEXT != glTextureBufferEXT);
  rCtx->dsp.CurrTable()->glTextureBufferEXT(texture, target, internalformat, buffer);
}

REGAL_DECL void REGAL_CALL glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexBufferEXT(", toString(texunit), ", ", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexBufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexBufferEXT != glMultiTexBufferEXT);
  rCtx->dsp.CurrTable()->glMultiTexBufferEXT(texunit, target, internalformat, buffer);
}

REGAL_DECL void REGAL_CALL glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedRenderbufferStorageEXT(", renderbuffer, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedRenderbufferStorageEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedRenderbufferStorageEXT != glNamedRenderbufferStorageEXT);
  rCtx->dsp.CurrTable()->glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
}

REGAL_DECL void REGAL_CALL glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedRenderbufferParameterivEXT(", renderbuffer, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedRenderbufferParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedRenderbufferParameterivEXT != glGetNamedRenderbufferParameterivEXT);
  rCtx->dsp.CurrTable()->glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
}

REGAL_DECL GLenum REGAL_CALL glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCheckNamedFramebufferStatusEXT(", framebuffer, ", ", toString(target), ")");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCheckNamedFramebufferStatusEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCheckNamedFramebufferStatusEXT != glCheckNamedFramebufferStatusEXT);
  return rCtx->dsp.CurrTable()->glCheckNamedFramebufferStatusEXT(framebuffer, target);
}

REGAL_DECL void REGAL_CALL glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedFramebufferTexture1DEXT(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTexture1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTexture1DEXT != glNamedFramebufferTexture1DEXT);
  rCtx->dsp.CurrTable()->glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
}

REGAL_DECL void REGAL_CALL glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedFramebufferTexture2DEXT(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTexture2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTexture2DEXT != glNamedFramebufferTexture2DEXT);
  rCtx->dsp.CurrTable()->glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
}

REGAL_DECL void REGAL_CALL glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedFramebufferTexture3DEXT(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", zoffset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTexture3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTexture3DEXT != glNamedFramebufferTexture3DEXT);
  rCtx->dsp.CurrTable()->glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
}

REGAL_DECL void REGAL_CALL glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedFramebufferRenderbufferEXT(", framebuffer, ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferRenderbufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferRenderbufferEXT != glNamedFramebufferRenderbufferEXT);
  rCtx->dsp.CurrTable()->glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

REGAL_DECL void REGAL_CALL glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedFramebufferAttachmentParameterivEXT(", framebuffer, ", ", toString(attachment), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedFramebufferAttachmentParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedFramebufferAttachmentParameterivEXT != glGetNamedFramebufferAttachmentParameterivEXT);
  rCtx->dsp.CurrTable()->glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
}

REGAL_DECL void REGAL_CALL glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenerateTextureMipmapEXT(", texture, ", ", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenerateTextureMipmapEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGenerateTextureMipmapEXT != glGenerateTextureMipmapEXT);
  rCtx->dsp.CurrTable()->glGenerateTextureMipmapEXT(texture, target);
}

REGAL_DECL void REGAL_CALL glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenerateMultiTexMipmapEXT(", toString(texunit), ", ", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenerateMultiTexMipmapEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGenerateMultiTexMipmapEXT != glGenerateMultiTexMipmapEXT);
  rCtx->dsp.CurrTable()->glGenerateMultiTexMipmapEXT(texunit, target);
}

REGAL_DECL void REGAL_CALL glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferDrawBufferEXT(", framebuffer, ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferDrawBufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferDrawBufferEXT != glFramebufferDrawBufferEXT);
  rCtx->dsp.CurrTable()->glFramebufferDrawBufferEXT(framebuffer, mode);
}

REGAL_DECL void REGAL_CALL glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferDrawBuffersEXT(", framebuffer, ", ", n, ", ", bufs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferDrawBuffersEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferDrawBuffersEXT != glFramebufferDrawBuffersEXT);
  rCtx->dsp.CurrTable()->glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
}

REGAL_DECL void REGAL_CALL glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFramebufferReadBufferEXT(", framebuffer, ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferReadBufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFramebufferReadBufferEXT != glFramebufferReadBufferEXT);
  rCtx->dsp.CurrTable()->glFramebufferReadBufferEXT(framebuffer, mode);
}

REGAL_DECL void REGAL_CALL glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFramebufferParameterivEXT(", framebuffer, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFramebufferParameterivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFramebufferParameterivEXT != glGetFramebufferParameterivEXT);
  rCtx->dsp.CurrTable()->glGetFramebufferParameterivEXT(framebuffer, pname, params);
}

REGAL_DECL void REGAL_CALL glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedRenderbufferStorageMultisampleEXT(", renderbuffer, ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedRenderbufferStorageMultisampleEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedRenderbufferStorageMultisampleEXT != glNamedRenderbufferStorageMultisampleEXT);
  rCtx->dsp.CurrTable()->glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
}

REGAL_DECL void REGAL_CALL glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedRenderbufferStorageMultisampleCoverageEXT(", renderbuffer, ", ", coverageSamples, ", ", colorSamples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedRenderbufferStorageMultisampleCoverageEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedRenderbufferStorageMultisampleCoverageEXT != glNamedRenderbufferStorageMultisampleCoverageEXT);
  rCtx->dsp.CurrTable()->glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}

REGAL_DECL void REGAL_CALL glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedFramebufferTextureEXT(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTextureEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTextureEXT != glNamedFramebufferTextureEXT);
  rCtx->dsp.CurrTable()->glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
}

REGAL_DECL void REGAL_CALL glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedFramebufferTextureLayerEXT(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTextureLayerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTextureLayerEXT != glNamedFramebufferTextureLayerEXT);
  rCtx->dsp.CurrTable()->glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
}

REGAL_DECL void REGAL_CALL glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedFramebufferTextureFaceEXT(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTextureFaceEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedFramebufferTextureFaceEXT != glNamedFramebufferTextureFaceEXT);
  rCtx->dsp.CurrTable()->glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
}

REGAL_DECL void REGAL_CALL glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureRenderbufferEXT(", texture, ", ", toString(target), ", ", renderbuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureRenderbufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureRenderbufferEXT != glTextureRenderbufferEXT);
  rCtx->dsp.CurrTable()->glTextureRenderbufferEXT(texture, target, renderbuffer);
}

REGAL_DECL void REGAL_CALL glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiTexRenderbufferEXT(", toString(texunit), ", ", toString(target), ", ", renderbuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexRenderbufferEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiTexRenderbufferEXT != glMultiTexRenderbufferEXT);
  rCtx->dsp.CurrTable()->glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
}

REGAL_DECL GLvoid *REGAL_CALL glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapNamedBufferRangeEXT(", buffer, ", ", offset, ", ", length, ", ", access, ")");
  if (!rCtx) return NULL;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapNamedBufferRangeEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMapNamedBufferRangeEXT != glMapNamedBufferRangeEXT);
  return rCtx->dsp.CurrTable()->glMapNamedBufferRangeEXT(buffer, offset, length, access);
}

REGAL_DECL void REGAL_CALL glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFlushMappedNamedBufferRangeEXT(", buffer, ", ", offset, ", ", length, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFlushMappedNamedBufferRangeEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFlushMappedNamedBufferRangeEXT != glFlushMappedNamedBufferRangeEXT);
  rCtx->dsp.CurrTable()->glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
}

REGAL_DECL void REGAL_CALL glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNamedCopyBufferSubDataEXT(", readBuffer, ", ", writeBuffer, ", ", readOffset, ", ", writeOffset, ", ", size, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNamedCopyBufferSubDataEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNamedCopyBufferSubDataEXT != glNamedCopyBufferSubDataEXT);
  rCtx->dsp.CurrTable()->glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

REGAL_DECL void REGAL_CALL glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1dEXT(", program, ", ", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1dEXT != glProgramUniform1dEXT);
  rCtx->dsp.CurrTable()->glProgramUniform1dEXT(program, location, x);
}

REGAL_DECL void REGAL_CALL glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2dEXT(", program, ", ", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2dEXT != glProgramUniform2dEXT);
  rCtx->dsp.CurrTable()->glProgramUniform2dEXT(program, location, x, y);
}

REGAL_DECL void REGAL_CALL glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3dEXT(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3dEXT != glProgramUniform3dEXT);
  rCtx->dsp.CurrTable()->glProgramUniform3dEXT(program, location, x, y, z);
}

REGAL_DECL void REGAL_CALL glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4dEXT(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4dEXT != glProgramUniform4dEXT);
  rCtx->dsp.CurrTable()->glProgramUniform4dEXT(program, location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1dvEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1dvEXT != glProgramUniform1dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniform1dvEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2dvEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2dvEXT != glProgramUniform2dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniform2dvEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3dvEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3dvEXT != glProgramUniform3dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniform3dvEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4dvEXT(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4dvEXT != glProgramUniform4dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniform4dvEXT(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2dvEXT != glProgramUniformMatrix2dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3dvEXT != glProgramUniformMatrix3dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4dvEXT != glProgramUniformMatrix4dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2x3dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3dvEXT != glProgramUniformMatrix2x3dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix2x4dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4dvEXT != glProgramUniformMatrix2x4dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3x2dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2dvEXT != glProgramUniformMatrix3x2dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix3x4dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4dvEXT != glProgramUniformMatrix3x4dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4x2dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2dvEXT != glProgramUniformMatrix4x2dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformMatrix4x3dvEXT(", program, ", ", location, ", ", count, ", ", transpose, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3dvEXT != glProgramUniformMatrix4x3dvEXT);
  rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
}

/* GL_NV_explicit_multisample */

REGAL_DECL void REGAL_CALL glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetMultisamplefvNV(", toString(pname), ", ", index, ", ", val, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultisamplefvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetMultisamplefvNV != glGetMultisamplefvNV);
  rCtx->dsp.CurrTable()->glGetMultisamplefvNV(pname, index, val);
}

REGAL_DECL void REGAL_CALL glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSampleMaskIndexedNV(", index, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMaskIndexedNV);
  RegalAssert(rCtx->dsp.CurrTable()->glSampleMaskIndexedNV != glSampleMaskIndexedNV);
  rCtx->dsp.CurrTable()->glSampleMaskIndexedNV(index, mask);
}

REGAL_DECL void REGAL_CALL glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexRenderbufferNV(", toString(target), ", ", renderbuffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexRenderbufferNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexRenderbufferNV != glTexRenderbufferNV);
  rCtx->dsp.CurrTable()->glTexRenderbufferNV(target, renderbuffer);
}

/* GL_NV_transform_feedback2 */

REGAL_DECL void REGAL_CALL glBindTransformFeedbackNV(GLenum target, GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindTransformFeedbackNV(", toString(target), ", ", id, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindTransformFeedbackNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBindTransformFeedbackNV != glBindTransformFeedbackNV);
  rCtx->dsp.CurrTable()->glBindTransformFeedbackNV(target, id);
}

REGAL_DECL void REGAL_CALL glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteTransformFeedbacksNV(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteTransformFeedbacksNV);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteTransformFeedbacksNV != glDeleteTransformFeedbacksNV);
  rCtx->dsp.CurrTable()->glDeleteTransformFeedbacksNV(n, ids);
}

REGAL_DECL void REGAL_CALL glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenTransformFeedbacksNV(", n, ", ", ids, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenTransformFeedbacksNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGenTransformFeedbacksNV != glGenTransformFeedbacksNV);
  rCtx->dsp.CurrTable()->glGenTransformFeedbacksNV(n, ids);
}

REGAL_DECL GLboolean REGAL_CALL glIsTransformFeedbackNV(GLuint id)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsTransformFeedbackNV(", id, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsTransformFeedbackNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsTransformFeedbackNV != glIsTransformFeedbackNV);
  return rCtx->dsp.CurrTable()->glIsTransformFeedbackNV(id);
}

REGAL_DECL void REGAL_CALL glPauseTransformFeedbackNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPauseTransformFeedbackNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPauseTransformFeedbackNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPauseTransformFeedbackNV != glPauseTransformFeedbackNV);
  rCtx->dsp.CurrTable()->glPauseTransformFeedbackNV();
}

REGAL_DECL void REGAL_CALL glResumeTransformFeedbackNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glResumeTransformFeedbackNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glResumeTransformFeedbackNV);
  RegalAssert(rCtx->dsp.CurrTable()->glResumeTransformFeedbackNV != glResumeTransformFeedbackNV);
  rCtx->dsp.CurrTable()->glResumeTransformFeedbackNV();
}

REGAL_DECL void REGAL_CALL glDrawTransformFeedbackNV(GLenum mode, GLuint name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawTransformFeedbackNV(", toString(mode), ", ", name, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedbackNV);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedbackNV != glDrawTransformFeedbackNV);
  rCtx->dsp.CurrTable()->glDrawTransformFeedbackNV(mode, name);
}

/* GL_AMD_performance_monitor */

REGAL_DECL void REGAL_CALL glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPerfMonitorGroupsAMD(", numGroups, ", ", groupsSize, ", ", groups, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorGroupsAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorGroupsAMD != glGetPerfMonitorGroupsAMD);
  rCtx->dsp.CurrTable()->glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
}

REGAL_DECL void REGAL_CALL glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPerfMonitorCountersAMD(", group, ", ", numCounters, ", ", maxActiveCounters, ", ", countersSize, ", ", counters, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorCountersAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorCountersAMD != glGetPerfMonitorCountersAMD);
  rCtx->dsp.CurrTable()->glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, countersSize, counters);
}

REGAL_DECL void REGAL_CALL glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPerfMonitorGroupStringAMD(", group, ", ", bufSize, ", ", length, ", ", boost::print::quote(groupString,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorGroupStringAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorGroupStringAMD != glGetPerfMonitorGroupStringAMD);
  rCtx->dsp.CurrTable()->glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
}

REGAL_DECL void REGAL_CALL glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPerfMonitorCounterStringAMD(", group, ", ", counter, ", ", bufSize, ", ", length, ", ", boost::print::quote(counterString,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorCounterStringAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorCounterStringAMD != glGetPerfMonitorCounterStringAMD);
  rCtx->dsp.CurrTable()->glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
}

REGAL_DECL void REGAL_CALL glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPerfMonitorCounterInfoAMD(", group, ", ", counter, ", ", toString(pname), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorCounterInfoAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorCounterInfoAMD != glGetPerfMonitorCounterInfoAMD);
  rCtx->dsp.CurrTable()->glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
}

REGAL_DECL void REGAL_CALL glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenPerfMonitorsAMD(", n, ", ", monitors, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenPerfMonitorsAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGenPerfMonitorsAMD != glGenPerfMonitorsAMD);
  rCtx->dsp.CurrTable()->glGenPerfMonitorsAMD(n, monitors);
}

REGAL_DECL void REGAL_CALL glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeletePerfMonitorsAMD(", n, ", ", monitors, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeletePerfMonitorsAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glDeletePerfMonitorsAMD != glDeletePerfMonitorsAMD);
  rCtx->dsp.CurrTable()->glDeletePerfMonitorsAMD(n, monitors);
}

REGAL_DECL void REGAL_CALL glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSelectPerfMonitorCountersAMD(", monitor, ", ", enable, ", ", group, ", ", numCounters, ", ", counterList, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSelectPerfMonitorCountersAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glSelectPerfMonitorCountersAMD != glSelectPerfMonitorCountersAMD);
  rCtx->dsp.CurrTable()->glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
}

REGAL_DECL void REGAL_CALL glBeginPerfMonitorAMD(GLuint monitor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginPerfMonitorAMD(", monitor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginPerfMonitorAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginPerfMonitorAMD != glBeginPerfMonitorAMD);
  rCtx->dsp.CurrTable()->glBeginPerfMonitorAMD(monitor);
}

REGAL_DECL void REGAL_CALL glEndPerfMonitorAMD(GLuint monitor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndPerfMonitorAMD(", monitor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndPerfMonitorAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glEndPerfMonitorAMD != glEndPerfMonitorAMD);
  rCtx->dsp.CurrTable()->glEndPerfMonitorAMD(monitor);
}

REGAL_DECL void REGAL_CALL glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPerfMonitorCounterDataAMD(", monitor, ", ", toString(pname), ", ", dataSize, ", ", data, ", ", bytesWritten, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorCounterDataAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPerfMonitorCounterDataAMD != glGetPerfMonitorCounterDataAMD);
  rCtx->dsp.CurrTable()->glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
}

/* GL_AMD_vertex_shader_tessellator */

REGAL_DECL void REGAL_CALL glTessellationFactorAMD(GLfloat factor)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTessellationFactorAMD(", factor, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTessellationFactorAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glTessellationFactorAMD != glTessellationFactorAMD);
  rCtx->dsp.CurrTable()->glTessellationFactorAMD(factor);
}

REGAL_DECL void REGAL_CALL glTessellationModeAMD(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTessellationModeAMD(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTessellationModeAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glTessellationModeAMD != glTessellationModeAMD);
  rCtx->dsp.CurrTable()->glTessellationModeAMD(mode);
}

/* GL_EXT_provoking_vertex */

REGAL_DECL void REGAL_CALL glProvokingVertexEXT(GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProvokingVertexEXT(", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProvokingVertexEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glProvokingVertexEXT != glProvokingVertexEXT);
  rCtx->dsp.CurrTable()->glProvokingVertexEXT(mode);
}

/* GL_AMD_draw_buffers_blend */

REGAL_DECL void REGAL_CALL glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFuncIndexedAMD(", buf, ", ", toString(src), ", ", toString(dst), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncIndexedAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncIndexedAMD != glBlendFuncIndexedAMD);
  rCtx->dsp.CurrTable()->glBlendFuncIndexedAMD(buf, src, dst);
}

REGAL_DECL void REGAL_CALL glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendFuncSeparateIndexedAMD(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparateIndexedAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendFuncSeparateIndexedAMD != glBlendFuncSeparateIndexedAMD);
  rCtx->dsp.CurrTable()->glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

REGAL_DECL void REGAL_CALL glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationIndexedAMD(", buf, ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationIndexedAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationIndexedAMD != glBlendEquationIndexedAMD);
  rCtx->dsp.CurrTable()->glBlendEquationIndexedAMD(buf, mode);
}

REGAL_DECL void REGAL_CALL glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBlendEquationSeparateIndexedAMD(", buf, ", ", toString(modeRGB), ", ", toString(modeAlpha), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparateIndexedAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glBlendEquationSeparateIndexedAMD != glBlendEquationSeparateIndexedAMD);
  rCtx->dsp.CurrTable()->glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
}

/* GL_APPLE_texture_range */

REGAL_DECL void REGAL_CALL glTextureRangeAPPLE(GLenum target, GLsizei length, GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureRangeAPPLE(", toString(target), ", ", length, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureRangeAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureRangeAPPLE != glTextureRangeAPPLE);
  rCtx->dsp.CurrTable()->glTextureRangeAPPLE(target, length, pointer);
}

REGAL_DECL void REGAL_CALL glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTexParameterPointervAPPLE(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterPointervAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTexParameterPointervAPPLE != glGetTexParameterPointervAPPLE);
  rCtx->dsp.CurrTable()->glGetTexParameterPointervAPPLE(target, pname, params);
}

/* GL_APPLE_vertex_program_evaluators */

REGAL_DECL void REGAL_CALL glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEnableVertexAttribAPPLE(", index, ", ", toString(pname), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEnableVertexAttribAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glEnableVertexAttribAPPLE != glEnableVertexAttribAPPLE);
  rCtx->dsp.CurrTable()->glEnableVertexAttribAPPLE(index, pname);
}

REGAL_DECL void REGAL_CALL glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDisableVertexAttribAPPLE(", index, ", ", toString(pname), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDisableVertexAttribAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glDisableVertexAttribAPPLE != glDisableVertexAttribAPPLE);
  rCtx->dsp.CurrTable()->glDisableVertexAttribAPPLE(index, pname);
}

REGAL_DECL GLboolean REGAL_CALL glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsVertexAttribEnabledAPPLE(", index, ", ", toString(pname), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsVertexAttribEnabledAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glIsVertexAttribEnabledAPPLE != glIsVertexAttribEnabledAPPLE);
  return rCtx->dsp.CurrTable()->glIsVertexAttribEnabledAPPLE(index, pname);
}

REGAL_DECL void REGAL_CALL glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapVertexAttrib1dAPPLE(", index, ", ", size, ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapVertexAttrib1dAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glMapVertexAttrib1dAPPLE != glMapVertexAttrib1dAPPLE);
  rCtx->dsp.CurrTable()->glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
}

REGAL_DECL void REGAL_CALL glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapVertexAttrib1fAPPLE(", index, ", ", size, ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", points, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapVertexAttrib1fAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glMapVertexAttrib1fAPPLE != glMapVertexAttrib1fAPPLE);
  rCtx->dsp.CurrTable()->glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
}

REGAL_DECL void REGAL_CALL glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapVertexAttrib2dAPPLE(", index, ", ", size, ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapVertexAttrib2dAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glMapVertexAttrib2dAPPLE != glMapVertexAttrib2dAPPLE);
  rCtx->dsp.CurrTable()->glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

REGAL_DECL void REGAL_CALL glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMapVertexAttrib2fAPPLE(", index, ", ", size, ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMapVertexAttrib2fAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glMapVertexAttrib2fAPPLE != glMapVertexAttrib2fAPPLE);
  rCtx->dsp.CurrTable()->glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

/* GL_APPLE_object_purgeable */

REGAL_DECL GLenum REGAL_CALL glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glObjectPurgeableAPPLE(", toString(objectType), ", ", name, ", ", toString(option), ")");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glObjectPurgeableAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glObjectPurgeableAPPLE != glObjectPurgeableAPPLE);
  return rCtx->dsp.CurrTable()->glObjectPurgeableAPPLE(objectType, name, option);
}

REGAL_DECL GLenum REGAL_CALL glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glObjectUnpurgeableAPPLE(", toString(objectType), ", ", name, ", ", toString(option), ")");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glObjectUnpurgeableAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glObjectUnpurgeableAPPLE != glObjectUnpurgeableAPPLE);
  return rCtx->dsp.CurrTable()->glObjectUnpurgeableAPPLE(objectType, name, option);
}

REGAL_DECL void REGAL_CALL glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetObjectParameterivAPPLE(", toString(objectType), ", ", name, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectParameterivAPPLE);
  RegalAssert(rCtx->dsp.CurrTable()->glGetObjectParameterivAPPLE != glGetObjectParameterivAPPLE);
  rCtx->dsp.CurrTable()->glGetObjectParameterivAPPLE(objectType, name, pname, params);
}

/* GL_NV_video_capture */

REGAL_DECL void REGAL_CALL glBeginVideoCaptureNV(GLuint video_capture_slot)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBeginVideoCaptureNV(", video_capture_slot, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBeginVideoCaptureNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBeginVideoCaptureNV != glBeginVideoCaptureNV);
  rCtx->dsp.CurrTable()->glBeginVideoCaptureNV(video_capture_slot);
}

REGAL_DECL void REGAL_CALL glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindVideoCaptureStreamBufferNV(", video_capture_slot, ", ", stream, ", ", toString(frame_region), ", ", offset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindVideoCaptureStreamBufferNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBindVideoCaptureStreamBufferNV != glBindVideoCaptureStreamBufferNV);
  rCtx->dsp.CurrTable()->glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
}

REGAL_DECL void REGAL_CALL glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindVideoCaptureStreamTextureNV(", video_capture_slot, ", ", stream, ", ", toString(frame_region), ", ", toString(target), ", ", texture, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindVideoCaptureStreamTextureNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBindVideoCaptureStreamTextureNV != glBindVideoCaptureStreamTextureNV);
  rCtx->dsp.CurrTable()->glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
}

REGAL_DECL void REGAL_CALL glEndVideoCaptureNV(GLuint video_capture_slot)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEndVideoCaptureNV(", video_capture_slot, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEndVideoCaptureNV);
  RegalAssert(rCtx->dsp.CurrTable()->glEndVideoCaptureNV != glEndVideoCaptureNV);
  rCtx->dsp.CurrTable()->glEndVideoCaptureNV(video_capture_slot);
}

REGAL_DECL void REGAL_CALL glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVideoCaptureivNV(", video_capture_slot, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoCaptureivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoCaptureivNV != glGetVideoCaptureivNV);
  rCtx->dsp.CurrTable()->glGetVideoCaptureivNV(video_capture_slot, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVideoCaptureStreamivNV(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoCaptureStreamivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoCaptureStreamivNV != glGetVideoCaptureStreamivNV);
  rCtx->dsp.CurrTable()->glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVideoCaptureStreamfvNV(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoCaptureStreamfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoCaptureStreamfvNV != glGetVideoCaptureStreamfvNV);
  rCtx->dsp.CurrTable()->glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVideoCaptureStreamdvNV(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoCaptureStreamdvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVideoCaptureStreamdvNV != glGetVideoCaptureStreamdvNV);
  rCtx->dsp.CurrTable()->glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
}

REGAL_DECL GLenum REGAL_CALL glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVideoCaptureNV(", video_capture_slot, ", ", sequence_num, ", ", capture_time, ")");
  if (!rCtx) return (GLenum )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVideoCaptureNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVideoCaptureNV != glVideoCaptureNV);
  return rCtx->dsp.CurrTable()->glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
}

REGAL_DECL void REGAL_CALL glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVideoCaptureStreamParameterivNV(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterivNV != glVideoCaptureStreamParameterivNV);
  rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
}

REGAL_DECL void REGAL_CALL glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVideoCaptureStreamParameterfvNV(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterfvNV != glVideoCaptureStreamParameterfvNV);
  rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
}

REGAL_DECL void REGAL_CALL glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVideoCaptureStreamParameterdvNV(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterdvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterdvNV != glVideoCaptureStreamParameterdvNV);
  rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
}

/* GL_NV_copy_image */

REGAL_DECL void REGAL_CALL glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyImageSubDataNV(", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", dstName, ", ", toString(dstTarget), ", ", dstLevel, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyImageSubDataNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyImageSubDataNV != glCopyImageSubDataNV);
  rCtx->dsp.CurrTable()->glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

/* GL_EXT_separate_shader_objects */

REGAL_DECL void REGAL_CALL glUseShaderProgramEXT(GLenum type, GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUseShaderProgramEXT(", toString(type), ", ", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUseShaderProgramEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glUseShaderProgramEXT != glUseShaderProgramEXT);
  rCtx->dsp.CurrTable()->glUseShaderProgramEXT(type, program);
}

REGAL_DECL void REGAL_CALL glActiveProgramEXT(GLuint program)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glActiveProgramEXT(", program, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glActiveProgramEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glActiveProgramEXT != glActiveProgramEXT);
  rCtx->dsp.CurrTable()->glActiveProgramEXT(program);
}

REGAL_DECL GLuint REGAL_CALL glCreateShaderProgramEXT(GLenum type, const GLchar *string)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCreateShaderProgramEXT(", toString(type), ", ", boost::print::quote(string,'"'), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCreateShaderProgramEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glCreateShaderProgramEXT != glCreateShaderProgramEXT);
  return rCtx->dsp.CurrTable()->glCreateShaderProgramEXT(type, string);
}

/* GL_NV_shader_buffer_load */

REGAL_DECL void REGAL_CALL glMakeBufferResidentNV(GLenum target, GLenum access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMakeBufferResidentNV(", toString(target), ", ", toString(access), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMakeBufferResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMakeBufferResidentNV != glMakeBufferResidentNV);
  rCtx->dsp.CurrTable()->glMakeBufferResidentNV(target, access);
}

REGAL_DECL void REGAL_CALL glMakeBufferNonResidentNV(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMakeBufferNonResidentNV(", toString(target), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMakeBufferNonResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMakeBufferNonResidentNV != glMakeBufferNonResidentNV);
  rCtx->dsp.CurrTable()->glMakeBufferNonResidentNV(target);
}

REGAL_DECL GLboolean REGAL_CALL glIsBufferResidentNV(GLenum target)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsBufferResidentNV(", toString(target), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsBufferResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsBufferResidentNV != glIsBufferResidentNV);
  return rCtx->dsp.CurrTable()->glIsBufferResidentNV(target);
}

REGAL_DECL void REGAL_CALL glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMakeNamedBufferResidentNV(", buffer, ", ", toString(access), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMakeNamedBufferResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMakeNamedBufferResidentNV != glMakeNamedBufferResidentNV);
  rCtx->dsp.CurrTable()->glMakeNamedBufferResidentNV(buffer, access);
}

REGAL_DECL void REGAL_CALL glMakeNamedBufferNonResidentNV(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMakeNamedBufferNonResidentNV(", buffer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMakeNamedBufferNonResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMakeNamedBufferNonResidentNV != glMakeNamedBufferNonResidentNV);
  rCtx->dsp.CurrTable()->glMakeNamedBufferNonResidentNV(buffer);
}

REGAL_DECL GLboolean REGAL_CALL glIsNamedBufferResidentNV(GLuint buffer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsNamedBufferResidentNV(", buffer, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsNamedBufferResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsNamedBufferResidentNV != glIsNamedBufferResidentNV);
  return rCtx->dsp.CurrTable()->glIsNamedBufferResidentNV(buffer);
}

REGAL_DECL void REGAL_CALL glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetBufferParameterui64vNV(", toString(target), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferParameterui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetBufferParameterui64vNV != glGetBufferParameterui64vNV);
  rCtx->dsp.CurrTable()->glGetBufferParameterui64vNV(target, pname, params);
}

REGAL_DECL void REGAL_CALL glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetNamedBufferParameterui64vNV(", buffer, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedBufferParameterui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetNamedBufferParameterui64vNV != glGetNamedBufferParameterui64vNV);
  rCtx->dsp.CurrTable()->glGetNamedBufferParameterui64vNV(buffer, pname, params);
}

REGAL_DECL void REGAL_CALL glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetIntegerui64vNV(", toString(target), ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegerui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegerui64vNV != glGetIntegerui64vNV);
  rCtx->dsp.CurrTable()->glGetIntegerui64vNV(target, data);
}

REGAL_DECL void REGAL_CALL glUniformui64NV(GLint location, GLuint64EXT v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformui64NV(", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformui64NV != glUniformui64NV);
  rCtx->dsp.CurrTable()->glUniformui64NV(location, v0);
}

REGAL_DECL void REGAL_CALL glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformui64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformui64vNV != glUniformui64vNV);
  rCtx->dsp.CurrTable()->glUniformui64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformui64vNV(", program, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformui64vNV != glGetUniformui64vNV);
  rCtx->dsp.CurrTable()->glGetUniformui64vNV(program, location, params);
}

REGAL_DECL void REGAL_CALL glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformui64NV(", program, ", ", location, ", ", v0, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformui64NV != glProgramUniformui64NV);
  rCtx->dsp.CurrTable()->glProgramUniformui64NV(program, location, v0);
}

REGAL_DECL void REGAL_CALL glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformui64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformui64vNV != glProgramUniformui64vNV);
  rCtx->dsp.CurrTable()->glProgramUniformui64vNV(program, location, count, value);
}

/* GL_NV_vertex_buffer_unified_memory */

REGAL_DECL void REGAL_CALL glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBufferAddressRangeNV(", toString(pname), ", ", index, ", ", address, ", ", length, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBufferAddressRangeNV);
  RegalAssert(rCtx->dsp.CurrTable()->glBufferAddressRangeNV != glBufferAddressRangeNV);
  rCtx->dsp.CurrTable()->glBufferAddressRangeNV(pname, index, address, length);
}

REGAL_DECL void REGAL_CALL glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexFormatNV(", size, ", ", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexFormatNV != glVertexFormatNV);
  rCtx->dsp.CurrTable()->glVertexFormatNV(size, type, stride);
}

REGAL_DECL void REGAL_CALL glNormalFormatNV(GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNormalFormatNV(", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNormalFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glNormalFormatNV != glNormalFormatNV);
  rCtx->dsp.CurrTable()->glNormalFormatNV(type, stride);
}

REGAL_DECL void REGAL_CALL glColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glColorFormatNV(", size, ", ", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glColorFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glColorFormatNV != glColorFormatNV);
  rCtx->dsp.CurrTable()->glColorFormatNV(size, type, stride);
}

REGAL_DECL void REGAL_CALL glIndexFormatNV(GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIndexFormatNV(", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIndexFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIndexFormatNV != glIndexFormatNV);
  rCtx->dsp.CurrTable()->glIndexFormatNV(type, stride);
}

REGAL_DECL void REGAL_CALL glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexCoordFormatNV(", size, ", ", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexCoordFormatNV != glTexCoordFormatNV);
  rCtx->dsp.CurrTable()->glTexCoordFormatNV(size, type, stride);
}

REGAL_DECL void REGAL_CALL glEdgeFlagFormatNV(GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glEdgeFlagFormatNV(", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glEdgeFlagFormatNV != glEdgeFlagFormatNV);
  rCtx->dsp.CurrTable()->glEdgeFlagFormatNV(stride);
}

REGAL_DECL void REGAL_CALL glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSecondaryColorFormatNV(", size, ", ", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glSecondaryColorFormatNV != glSecondaryColorFormatNV);
  rCtx->dsp.CurrTable()->glSecondaryColorFormatNV(size, type, stride);
}

REGAL_DECL void REGAL_CALL glFogCoordFormatNV(GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFogCoordFormatNV(", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glFogCoordFormatNV != glFogCoordFormatNV);
  rCtx->dsp.CurrTable()->glFogCoordFormatNV(type, stride);
}

REGAL_DECL void REGAL_CALL glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribFormatNV(", index, ", ", size, ", ", toString(type), ", ", normalized, ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribFormatNV != glVertexAttribFormatNV);
  rCtx->dsp.CurrTable()->glVertexAttribFormatNV(index, size, type, normalized, stride);
}

REGAL_DECL void REGAL_CALL glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribIFormatNV(", index, ", ", size, ", ", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribIFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribIFormatNV != glVertexAttribIFormatNV);
  rCtx->dsp.CurrTable()->glVertexAttribIFormatNV(index, size, type, stride);
}

REGAL_DECL void REGAL_CALL glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetIntegerui64i_vNV(", toString(target), ", ", index, ", ", data, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegerui64i_vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetIntegerui64i_vNV != glGetIntegerui64i_vNV);
  rCtx->dsp.CurrTable()->glGetIntegerui64i_vNV(target, index, data);
}

/* GL_NV_texture_barrier */

REGAL_DECL void REGAL_CALL glTextureBarrierNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureBarrierNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureBarrierNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureBarrierNV != glTextureBarrierNV);
  rCtx->dsp.CurrTable()->glTextureBarrierNV();
}

/* GL_EXT_shader_image_load_store */

REGAL_DECL void REGAL_CALL glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBindImageTextureEXT(", index, ", ", texture, ", ", level, ", ", layered, ", ", layer, ", ", toString(access), ", ", format, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBindImageTextureEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBindImageTextureEXT != glBindImageTextureEXT);
  rCtx->dsp.CurrTable()->glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
}

REGAL_DECL void REGAL_CALL glMemoryBarrierEXT(GLbitfield barriers)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMemoryBarrierEXT(", barriers, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMemoryBarrierEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glMemoryBarrierEXT != glMemoryBarrierEXT);
  rCtx->dsp.CurrTable()->glMemoryBarrierEXT(barriers);
}

/* GL_EXT_vertex_attrib_64bit */

REGAL_DECL void REGAL_CALL glVertexAttribL1dEXT(GLuint index, GLdouble x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL1dEXT(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1dEXT != glVertexAttribL1dEXT);
  rCtx->dsp.CurrTable()->glVertexAttribL1dEXT(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL2dEXT(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2dEXT != glVertexAttribL2dEXT);
  rCtx->dsp.CurrTable()->glVertexAttribL2dEXT(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL3dEXT(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3dEXT != glVertexAttribL3dEXT);
  rCtx->dsp.CurrTable()->glVertexAttribL3dEXT(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL4dEXT(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4dEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4dEXT != glVertexAttribL4dEXT);
  rCtx->dsp.CurrTable()->glVertexAttribL4dEXT(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL1dvEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1dvEXT != glVertexAttribL1dvEXT);
  rCtx->dsp.CurrTable()->glVertexAttribL1dvEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL2dvEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2dvEXT != glVertexAttribL2dvEXT);
  rCtx->dsp.CurrTable()->glVertexAttribL2dvEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL3dvEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3dvEXT != glVertexAttribL3dvEXT);
  rCtx->dsp.CurrTable()->glVertexAttribL3dvEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL4dvEXT(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4dvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4dvEXT != glVertexAttribL4dvEXT);
  rCtx->dsp.CurrTable()->glVertexAttribL4dvEXT(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribLPointerEXT(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", pointer, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribLPointerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribLPointerEXT != glVertexAttribLPointerEXT);
  rCtx->dsp.CurrTable()->glVertexAttribLPointerEXT(index, size, type, stride, pointer);
}

REGAL_DECL void REGAL_CALL glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexArrayVertexAttribLOffsetEXT(", vaobj, ", ", buffer, ", ", index, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexArrayVertexAttribLOffsetEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexArrayVertexAttribLOffsetEXT != glVertexArrayVertexAttribLOffsetEXT);
  rCtx->dsp.CurrTable()->glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribLdvEXT(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribLdvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribLdvEXT != glGetVertexAttribLdvEXT);
  rCtx->dsp.CurrTable()->glGetVertexAttribLdvEXT(index, pname, params);
}

/* GL_NV_gpu_shader5 */

REGAL_DECL void REGAL_CALL glUniform1i64NV(GLint location, GLint64EXT x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1i64NV(", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1i64NV != glUniform1i64NV);
  rCtx->dsp.CurrTable()->glUniform1i64NV(location, x);
}

REGAL_DECL void REGAL_CALL glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2i64NV(", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2i64NV != glUniform2i64NV);
  rCtx->dsp.CurrTable()->glUniform2i64NV(location, x, y);
}

REGAL_DECL void REGAL_CALL glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3i64NV(", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3i64NV != glUniform3i64NV);
  rCtx->dsp.CurrTable()->glUniform3i64NV(location, x, y, z);
}

REGAL_DECL void REGAL_CALL glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4i64NV(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4i64NV != glUniform4i64NV);
  rCtx->dsp.CurrTable()->glUniform4i64NV(location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1i64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1i64vNV != glUniform1i64vNV);
  rCtx->dsp.CurrTable()->glUniform1i64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2i64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2i64vNV != glUniform2i64vNV);
  rCtx->dsp.CurrTable()->glUniform2i64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3i64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3i64vNV != glUniform3i64vNV);
  rCtx->dsp.CurrTable()->glUniform3i64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4i64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4i64vNV != glUniform4i64vNV);
  rCtx->dsp.CurrTable()->glUniform4i64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform1ui64NV(GLint location, GLuint64EXT x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1ui64NV(", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1ui64NV != glUniform1ui64NV);
  rCtx->dsp.CurrTable()->glUniform1ui64NV(location, x);
}

REGAL_DECL void REGAL_CALL glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2ui64NV(", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2ui64NV != glUniform2ui64NV);
  rCtx->dsp.CurrTable()->glUniform2ui64NV(location, x, y);
}

REGAL_DECL void REGAL_CALL glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3ui64NV(", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3ui64NV != glUniform3ui64NV);
  rCtx->dsp.CurrTable()->glUniform3ui64NV(location, x, y, z);
}

REGAL_DECL void REGAL_CALL glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4ui64NV(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4ui64NV != glUniform4ui64NV);
  rCtx->dsp.CurrTable()->glUniform4ui64NV(location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform1ui64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform1ui64vNV != glUniform1ui64vNV);
  rCtx->dsp.CurrTable()->glUniform1ui64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform2ui64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform2ui64vNV != glUniform2ui64vNV);
  rCtx->dsp.CurrTable()->glUniform2ui64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform3ui64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform3ui64vNV != glUniform3ui64vNV);
  rCtx->dsp.CurrTable()->glUniform3ui64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniform4ui64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniform4ui64vNV != glUniform4ui64vNV);
  rCtx->dsp.CurrTable()->glUniform4ui64vNV(location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1i64NV(", program, ", ", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1i64NV != glProgramUniform1i64NV);
  rCtx->dsp.CurrTable()->glProgramUniform1i64NV(program, location, x);
}

REGAL_DECL void REGAL_CALL glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2i64NV(", program, ", ", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2i64NV != glProgramUniform2i64NV);
  rCtx->dsp.CurrTable()->glProgramUniform2i64NV(program, location, x, y);
}

REGAL_DECL void REGAL_CALL glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3i64NV(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3i64NV != glProgramUniform3i64NV);
  rCtx->dsp.CurrTable()->glProgramUniform3i64NV(program, location, x, y, z);
}

REGAL_DECL void REGAL_CALL glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4i64NV(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4i64NV != glProgramUniform4i64NV);
  rCtx->dsp.CurrTable()->glProgramUniform4i64NV(program, location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1i64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1i64vNV != glProgramUniform1i64vNV);
  rCtx->dsp.CurrTable()->glProgramUniform1i64vNV(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2i64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2i64vNV != glProgramUniform2i64vNV);
  rCtx->dsp.CurrTable()->glProgramUniform2i64vNV(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3i64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3i64vNV != glProgramUniform3i64vNV);
  rCtx->dsp.CurrTable()->glProgramUniform3i64vNV(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4i64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4i64vNV != glProgramUniform4i64vNV);
  rCtx->dsp.CurrTable()->glProgramUniform4i64vNV(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1ui64NV(", program, ", ", location, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1ui64NV != glProgramUniform1ui64NV);
  rCtx->dsp.CurrTable()->glProgramUniform1ui64NV(program, location, x);
}

REGAL_DECL void REGAL_CALL glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2ui64NV(", program, ", ", location, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2ui64NV != glProgramUniform2ui64NV);
  rCtx->dsp.CurrTable()->glProgramUniform2ui64NV(program, location, x, y);
}

REGAL_DECL void REGAL_CALL glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3ui64NV(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3ui64NV != glProgramUniform3ui64NV);
  rCtx->dsp.CurrTable()->glProgramUniform3ui64NV(program, location, x, y, z);
}

REGAL_DECL void REGAL_CALL glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4ui64NV(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4ui64NV != glProgramUniform4ui64NV);
  rCtx->dsp.CurrTable()->glProgramUniform4ui64NV(program, location, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform1ui64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform1ui64vNV != glProgramUniform1ui64vNV);
  rCtx->dsp.CurrTable()->glProgramUniform1ui64vNV(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform2ui64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform2ui64vNV != glProgramUniform2ui64vNV);
  rCtx->dsp.CurrTable()->glProgramUniform2ui64vNV(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform3ui64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform3ui64vNV != glProgramUniform3ui64vNV);
  rCtx->dsp.CurrTable()->glProgramUniform3ui64vNV(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniform4ui64vNV(", program, ", ", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniform4ui64vNV != glProgramUniform4ui64vNV);
  rCtx->dsp.CurrTable()->glProgramUniform4ui64vNV(program, location, count, value);
}

REGAL_DECL void REGAL_CALL glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetUniformi64vNV(", program, ", ", location, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformi64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetUniformi64vNV != glGetUniformi64vNV);
  rCtx->dsp.CurrTable()->glGetUniformi64vNV(program, location, params);
}

/* GL_NV_vertex_attrib_integer_64bit */

REGAL_DECL void REGAL_CALL glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL1i64NV(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1i64NV != glVertexAttribL1i64NV);
  rCtx->dsp.CurrTable()->glVertexAttribL1i64NV(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL2i64NV(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2i64NV != glVertexAttribL2i64NV);
  rCtx->dsp.CurrTable()->glVertexAttribL2i64NV(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL3i64NV(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3i64NV != glVertexAttribL3i64NV);
  rCtx->dsp.CurrTable()->glVertexAttribL3i64NV(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL4i64NV(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4i64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4i64NV != glVertexAttribL4i64NV);
  rCtx->dsp.CurrTable()->glVertexAttribL4i64NV(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL1ui64NV(", index, ", ", x, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1ui64NV != glVertexAttribL1ui64NV);
  rCtx->dsp.CurrTable()->glVertexAttribL1ui64NV(index, x);
}

REGAL_DECL void REGAL_CALL glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL2ui64NV(", index, ", ", x, ", ", y, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2ui64NV != glVertexAttribL2ui64NV);
  rCtx->dsp.CurrTable()->glVertexAttribL2ui64NV(index, x, y);
}

REGAL_DECL void REGAL_CALL glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL3ui64NV(", index, ", ", x, ", ", y, ", ", z, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3ui64NV != glVertexAttribL3ui64NV);
  rCtx->dsp.CurrTable()->glVertexAttribL3ui64NV(index, x, y, z);
}

REGAL_DECL void REGAL_CALL glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL4ui64NV(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4ui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4ui64NV != glVertexAttribL4ui64NV);
  rCtx->dsp.CurrTable()->glVertexAttribL4ui64NV(index, x, y, z, w);
}

REGAL_DECL void REGAL_CALL glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL1i64vNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1i64vNV != glVertexAttribL1i64vNV);
  rCtx->dsp.CurrTable()->glVertexAttribL1i64vNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL2i64vNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2i64vNV != glVertexAttribL2i64vNV);
  rCtx->dsp.CurrTable()->glVertexAttribL2i64vNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL3i64vNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3i64vNV != glVertexAttribL3i64vNV);
  rCtx->dsp.CurrTable()->glVertexAttribL3i64vNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL4i64vNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4i64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4i64vNV != glVertexAttribL4i64vNV);
  rCtx->dsp.CurrTable()->glVertexAttribL4i64vNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL1ui64vNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL1ui64vNV != glVertexAttribL1ui64vNV);
  rCtx->dsp.CurrTable()->glVertexAttribL1ui64vNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL2ui64vNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL2ui64vNV != glVertexAttribL2ui64vNV);
  rCtx->dsp.CurrTable()->glVertexAttribL2ui64vNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL3ui64vNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL3ui64vNV != glVertexAttribL3ui64vNV);
  rCtx->dsp.CurrTable()->glVertexAttribL3ui64vNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribL4ui64vNV(", index, ", ", v, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4ui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribL4ui64vNV != glVertexAttribL4ui64vNV);
  rCtx->dsp.CurrTable()->glVertexAttribL4ui64vNV(index, v);
}

REGAL_DECL void REGAL_CALL glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVertexAttribLFormatNV(", index, ", ", size, ", ", toString(type), ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribLFormatNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVertexAttribLFormatNV != glVertexAttribLFormatNV);
  rCtx->dsp.CurrTable()->glVertexAttribLFormatNV(index, size, type, stride);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribLi64vNV(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribLi64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribLi64vNV != glGetVertexAttribLi64vNV);
  rCtx->dsp.CurrTable()->glGetVertexAttribLi64vNV(index, pname, params);
}

REGAL_DECL void REGAL_CALL glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetVertexAttribLui64vNV(", index, ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribLui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetVertexAttribLui64vNV != glGetVertexAttribLui64vNV);
  rCtx->dsp.CurrTable()->glGetVertexAttribLui64vNV(index, pname, params);
}

/* GL_NV_vdpau_interop */

REGAL_DECL void REGAL_CALL glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAUInitNV(", vdpDevice, ", ", getProcAddress, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUInitNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUInitNV != glVDPAUInitNV);
  rCtx->dsp.CurrTable()->glVDPAUInitNV(vdpDevice, getProcAddress);
}

REGAL_DECL void REGAL_CALL glVDPAUFiniNV(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAUFiniNV()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUFiniNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUFiniNV != glVDPAUFiniNV);
  rCtx->dsp.CurrTable()->glVDPAUFiniNV();
}

REGAL_DECL GLvdpauSurfaceNV REGAL_CALL glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAURegisterVideoSurfaceNV(", vdpSurface, ", ", toString(target), ", ", numTextureNames, ", ", textureNames, ")");
  if (!rCtx) return (GLvdpauSurfaceNV )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAURegisterVideoSurfaceNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAURegisterVideoSurfaceNV != glVDPAURegisterVideoSurfaceNV);
  return rCtx->dsp.CurrTable()->glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

REGAL_DECL GLvdpauSurfaceNV REGAL_CALL glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAURegisterOutputSurfaceNV(", vdpSurface, ", ", toString(target), ", ", numTextureNames, ", ", textureNames, ")");
  if (!rCtx) return (GLvdpauSurfaceNV )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAURegisterOutputSurfaceNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAURegisterOutputSurfaceNV != glVDPAURegisterOutputSurfaceNV);
  return rCtx->dsp.CurrTable()->glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

REGAL_DECL GLboolean REGAL_CALL glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAUIsSurfaceNV(", surface, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUIsSurfaceNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUIsSurfaceNV != glVDPAUIsSurfaceNV);
  return rCtx->dsp.CurrTable()->glVDPAUIsSurfaceNV(surface);
}

REGAL_DECL void REGAL_CALL glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAUUnregisterSurfaceNV(", surface, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUUnregisterSurfaceNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUUnregisterSurfaceNV != glVDPAUUnregisterSurfaceNV);
  rCtx->dsp.CurrTable()->glVDPAUUnregisterSurfaceNV(surface);
}

REGAL_DECL void REGAL_CALL glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAUGetSurfaceivNV(", surface, ", ", toString(pname), ", ", bufSize, ", ", length, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUGetSurfaceivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUGetSurfaceivNV != glVDPAUGetSurfaceivNV);
  rCtx->dsp.CurrTable()->glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
}

REGAL_DECL void REGAL_CALL glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAUSurfaceAccessNV(", surface, ", ", toString(access), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUSurfaceAccessNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUSurfaceAccessNV != glVDPAUSurfaceAccessNV);
  rCtx->dsp.CurrTable()->glVDPAUSurfaceAccessNV(surface, access);
}

REGAL_DECL void REGAL_CALL glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAUMapSurfacesNV(", numSurfaces, ", ", surfaces, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUMapSurfacesNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUMapSurfacesNV != glVDPAUMapSurfacesNV);
  rCtx->dsp.CurrTable()->glVDPAUMapSurfacesNV(numSurfaces, surfaces);
}

REGAL_DECL void REGAL_CALL glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glVDPAUUnmapSurfacesNV(", numSurfaces, ", ", surfaces, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUUnmapSurfacesNV);
  RegalAssert(rCtx->dsp.CurrTable()->glVDPAUUnmapSurfacesNV != glVDPAUUnmapSurfacesNV);
  rCtx->dsp.CurrTable()->glVDPAUUnmapSurfacesNV(numSurfaces, surfaces);
}

/* GL_NV_path_rendering */

REGAL_DECL void REGAL_CALL glCopyPathNV(GLuint resultPath, GLuint srcPath)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCopyPathNV(", resultPath, ", ", srcPath, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCopyPathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCopyPathNV != glCopyPathNV);
  rCtx->dsp.CurrTable()->glCopyPathNV(resultPath, srcPath);
}

REGAL_DECL void REGAL_CALL glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCoverFillPathInstancedNV(", numPaths, ", ", toString(pathNameType), ", ", paths, ", ", pathBase, ", ", toString(coverMode), ", ", toString(transformType), ", ", transformValues, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCoverFillPathInstancedNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCoverFillPathInstancedNV != glCoverFillPathInstancedNV);
  rCtx->dsp.CurrTable()->glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

REGAL_DECL void REGAL_CALL glCoverFillPathNV(GLuint path, GLenum coverMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCoverFillPathNV(", path, ", ", toString(coverMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCoverFillPathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCoverFillPathNV != glCoverFillPathNV);
  rCtx->dsp.CurrTable()->glCoverFillPathNV(path, coverMode);
}

REGAL_DECL void REGAL_CALL glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCoverStrokePathInstancedNV(", numPaths, ", ", toString(pathNameType), ", ", paths, ", ", pathBase, ", ", toString(coverMode), ", ", toString(transformType), ", ", transformValues, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCoverStrokePathInstancedNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCoverStrokePathInstancedNV != glCoverStrokePathInstancedNV);
  rCtx->dsp.CurrTable()->glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

REGAL_DECL void REGAL_CALL glCoverStrokePathNV(GLuint name, GLenum coverMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCoverStrokePathNV(", name, ", ", toString(coverMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCoverStrokePathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glCoverStrokePathNV != glCoverStrokePathNV);
  rCtx->dsp.CurrTable()->glCoverStrokePathNV(name, coverMode);
}

REGAL_DECL void REGAL_CALL glDeletePathsNV(GLuint path, GLsizei range)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeletePathsNV(", path, ", ", range, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeletePathsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glDeletePathsNV != glDeletePathsNV);
  rCtx->dsp.CurrTable()->glDeletePathsNV(path, range);
}

REGAL_DECL GLuint REGAL_CALL glGenPathsNV(GLsizei range)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenPathsNV(", range, ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenPathsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGenPathsNV != glGenPathsNV);
  return rCtx->dsp.CurrTable()->glGenPathsNV(range);
}

REGAL_DECL void REGAL_CALL glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat*value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathColorGenfvNV(", toString(color), ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathColorGenfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathColorGenfvNV != glGetPathColorGenfvNV);
  rCtx->dsp.CurrTable()->glGetPathColorGenfvNV(color, pname, value);
}

REGAL_DECL void REGAL_CALL glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathColorGenivNV(", toString(color), ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathColorGenivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathColorGenivNV != glGetPathColorGenivNV);
  rCtx->dsp.CurrTable()->glGetPathColorGenivNV(color, pname, value);
}

REGAL_DECL void REGAL_CALL glGetPathCommandsNV(GLuint name, GLubyte *commands)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathCommandsNV(", name, ", ", commands, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathCommandsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathCommandsNV != glGetPathCommandsNV);
  rCtx->dsp.CurrTable()->glGetPathCommandsNV(name, commands);
}

REGAL_DECL void REGAL_CALL glGetPathCoordsNV(GLuint name, GLfloat*coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathCoordsNV(", name, ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathCoordsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathCoordsNV != glGetPathCoordsNV);
  rCtx->dsp.CurrTable()->glGetPathCoordsNV(name, coords);
}

REGAL_DECL void REGAL_CALL glGetPathDashArrayNV(GLuint name, GLfloat *dashArray)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathDashArrayNV(", name, ", ", dashArray, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathDashArrayNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathDashArrayNV != glGetPathDashArrayNV);
  rCtx->dsp.CurrTable()->glGetPathDashArrayNV(name, dashArray);
}

REGAL_DECL GLfloat REGAL_CALL glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathLengthNV(", path, ", ", startSegment, ", ", numSegments, ")");
  if (!rCtx) return (GLfloat )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathLengthNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathLengthNV != glGetPathLengthNV);
  return rCtx->dsp.CurrTable()->glGetPathLengthNV(path, startSegment, numSegments);
}

REGAL_DECL void REGAL_CALL glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat*metrics)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathMetricRangeNV(", metricQueryMask, ", ", fistPathName, ", ", numPaths, ", ", stride, ", ", metrics, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathMetricRangeNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathMetricRangeNV != glGetPathMetricRangeNV);
  rCtx->dsp.CurrTable()->glGetPathMetricRangeNV(metricQueryMask, fistPathName, numPaths, stride, metrics);
}

REGAL_DECL void REGAL_CALL glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathMetricsNV(", metricQueryMask, ", ", numPaths, ", ", toString(pathNameType), ", ", paths, ", ", pathBase, ", ", stride, ", ", metrics, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathMetricsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathMetricsNV != glGetPathMetricsNV);
  rCtx->dsp.CurrTable()->glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}

REGAL_DECL void REGAL_CALL glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat*value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathParameterfvNV(", name, ", ", toString(param), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathParameterfvNV != glGetPathParameterfvNV);
  rCtx->dsp.CurrTable()->glGetPathParameterfvNV(name, param, value);
}

REGAL_DECL void REGAL_CALL glGetPathParameterivNV(GLuint name, GLenum param, GLint*value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathParameterivNV(", name, ", ", toString(param), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathParameterivNV != glGetPathParameterivNV);
  rCtx->dsp.CurrTable()->glGetPathParameterivNV(name, param, value);
}

REGAL_DECL void REGAL_CALL glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathSpacingNV(", toString(pathListMode), ", ", numPaths, ", ", toString(pathNameType), ", ", paths, ", ", pathBase, ", ", advanceScale, ", ", kerningScale, ", ", toString(transformType), ", ", returnedSpacing, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathSpacingNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathSpacingNV != glGetPathSpacingNV);
  rCtx->dsp.CurrTable()->glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}

REGAL_DECL void REGAL_CALL glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat*value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathTexGenfvNV(", toString(texCoordSet), ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathTexGenfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathTexGenfvNV != glGetPathTexGenfvNV);
  rCtx->dsp.CurrTable()->glGetPathTexGenfvNV(texCoordSet, pname, value);
}

REGAL_DECL void REGAL_CALL glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint*value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetPathTexGenivNV(", toString(texCoordSet), ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathTexGenivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetPathTexGenivNV != glGetPathTexGenivNV);
  rCtx->dsp.CurrTable()->glGetPathTexGenivNV(texCoordSet, pname, value);
}

REGAL_DECL void REGAL_CALL glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glInterpolatePathsNV(", resultPath, ", ", pathA, ", ", pathB, ", ", weight, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glInterpolatePathsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glInterpolatePathsNV != glInterpolatePathsNV);
  rCtx->dsp.CurrTable()->glInterpolatePathsNV(resultPath, pathA, pathB, weight);
}

REGAL_DECL GLboolean REGAL_CALL glIsPathNV(GLuint path)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsPathNV(", path, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsPathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsPathNV != glIsPathNV);
  return rCtx->dsp.CurrTable()->glIsPathNV(path);
}

REGAL_DECL GLboolean REGAL_CALL glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsPointInFillPathNV(", path, ", ", mask, ", ", x, ", ", y, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsPointInFillPathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsPointInFillPathNV != glIsPointInFillPathNV);
  return rCtx->dsp.CurrTable()->glIsPointInFillPathNV(path, mask, x, y);
}

REGAL_DECL GLboolean REGAL_CALL glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsPointInStrokePathNV(", path, ", ", x, ", ", y, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsPointInStrokePathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsPointInStrokePathNV != glIsPointInStrokePathNV);
  return rCtx->dsp.CurrTable()->glIsPointInStrokePathNV(path, x, y);
}

REGAL_DECL void REGAL_CALL glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathColorGenNV(", toString(color), ", ", toString(genMode), ", ", toString(colorFormat), ", ", coeffs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathColorGenNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathColorGenNV != glPathColorGenNV);
  rCtx->dsp.CurrTable()->glPathColorGenNV(color, genMode, colorFormat, coeffs);
}

REGAL_DECL void REGAL_CALL glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte*commands, GLsizei numCoords, GLenum coordType, const GLvoid*coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathCommandsNV(", path, ", ", numCommands, ", ", commands, ", ", numCoords, ", ", toString(coordType), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathCommandsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathCommandsNV != glPathCommandsNV);
  rCtx->dsp.CurrTable()->glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
}

REGAL_DECL void REGAL_CALL glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathCoordsNV(", path, ", ", numCoords, ", ", toString(coordType), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathCoordsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathCoordsNV != glPathCoordsNV);
  rCtx->dsp.CurrTable()->glPathCoordsNV(path, numCoords, coordType, coords);
}

REGAL_DECL void REGAL_CALL glPathCoverDepthFuncNV(GLenum zfunc)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathCoverDepthFuncNV(", toString(zfunc), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathCoverDepthFuncNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathCoverDepthFuncNV != glPathCoverDepthFuncNV);
  rCtx->dsp.CurrTable()->glPathCoverDepthFuncNV(zfunc);
}

REGAL_DECL void REGAL_CALL glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathDashArrayNV(", path, ", ", dashCount, ", ", dashArray, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathDashArrayNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathDashArrayNV != glPathDashArrayNV);
  rCtx->dsp.CurrTable()->glPathDashArrayNV(path, dashCount, dashArray);
}

REGAL_DECL void REGAL_CALL glPathFogGenNV(GLenum genMode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathFogGenNV(", toString(genMode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathFogGenNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathFogGenNV != glPathFogGenNV);
  rCtx->dsp.CurrTable()->glPathFogGenNV(genMode);
}

REGAL_DECL void REGAL_CALL glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathGlyphRangeNV(", firstPathName, ", ", toString(fontTarget), ", ", fontName, ", ", fontStyle, ", ", firstGlyph, ", ", numGlyphs, ", ", toString(handleMissingGlyphs), ", ", pathParameterTemplate, ", ", emScale, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathGlyphRangeNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathGlyphRangeNV != glPathGlyphRangeNV);
  rCtx->dsp.CurrTable()->glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}

REGAL_DECL void REGAL_CALL glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathGlyphsNV(", firstPathName, ", ", toString(fontTarget), ", ", fontName, ", ", fontStyle, ", ", numGlyphs, ", ", toString(type), ", ", charcodes, ", ", toString(handleMissingGlyphs), ", ", pathParameterTemplate, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathGlyphsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathGlyphsNV != glPathGlyphsNV);
  rCtx->dsp.CurrTable()->glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}

REGAL_DECL void REGAL_CALL glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathParameterfNV(", path, ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathParameterfNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathParameterfNV != glPathParameterfNV);
  rCtx->dsp.CurrTable()->glPathParameterfNV(path, pname, value);
}

REGAL_DECL void REGAL_CALL glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathParameterfvNV(", path, ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathParameterfvNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathParameterfvNV != glPathParameterfvNV);
  rCtx->dsp.CurrTable()->glPathParameterfvNV(path, pname, value);
}

REGAL_DECL void REGAL_CALL glPathParameteriNV(GLuint path, GLenum pname, GLint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathParameteriNV(", path, ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathParameteriNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathParameteriNV != glPathParameteriNV);
  rCtx->dsp.CurrTable()->glPathParameteriNV(path, pname, value);
}

REGAL_DECL void REGAL_CALL glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathParameterivNV(", path, ", ", toString(pname), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathParameterivNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathParameterivNV != glPathParameterivNV);
  rCtx->dsp.CurrTable()->glPathParameterivNV(path, pname, value);
}

REGAL_DECL void REGAL_CALL glPathStencilDepthOffsetNV(GLfloat factor, GLint units)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathStencilDepthOffsetNV(", factor, ", ", units, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathStencilDepthOffsetNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathStencilDepthOffsetNV != glPathStencilDepthOffsetNV);
  rCtx->dsp.CurrTable()->glPathStencilDepthOffsetNV(factor, units);
}

REGAL_DECL void REGAL_CALL glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathStencilFuncNV(", toString(func), ", ", ref, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathStencilFuncNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathStencilFuncNV != glPathStencilFuncNV);
  rCtx->dsp.CurrTable()->glPathStencilFuncNV(func, ref, mask);
}

REGAL_DECL void REGAL_CALL glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathStringNV(", path, ", ", toString(format), ", ", length, ", ", pathString, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathStringNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathStringNV != glPathStringNV);
  rCtx->dsp.CurrTable()->glPathStringNV(path, format, length, pathString);
}

REGAL_DECL void REGAL_CALL glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte*commands, GLsizei numCoords, GLenum coordType, const GLvoid*coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathSubCommandsNV(", path, ", ", commandStart, ", ", commandsToDelete, ", ", numCommands, ", ", commands, ", ", numCoords, ", ", toString(coordType), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathSubCommandsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathSubCommandsNV != glPathSubCommandsNV);
  rCtx->dsp.CurrTable()->glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}

REGAL_DECL void REGAL_CALL glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathSubCoordsNV(", path, ", ", coordStart, ", ", numCoords, ", ", toString(coordType), ", ", coords, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathSubCoordsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathSubCoordsNV != glPathSubCoordsNV);
  rCtx->dsp.CurrTable()->glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
}

REGAL_DECL void REGAL_CALL glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPathTexGenNV(", toString(texCoordSet), ", ", toString(genMode), ", ", components, ", ", coeffs, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPathTexGenNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPathTexGenNV != glPathTexGenNV);
  rCtx->dsp.CurrTable()->glPathTexGenNV(texCoordSet, genMode, components, coeffs);
}

REGAL_DECL GLboolean REGAL_CALL glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat*x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPointAlongPathNV(", path, ", ", startSegment, ", ", numSegments, ", ", distance, ", ", x, ", ", y, ", ", tangentX, ", ", tangentY, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPointAlongPathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glPointAlongPathNV != glPointAlongPathNV);
  return rCtx->dsp.CurrTable()->glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
}

REGAL_DECL void REGAL_CALL glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilFillPathInstancedNV(", numPaths, ", ", toString(pathNameType), ", ", paths, ", ", pathBase, ", ", toString(fillMode), ", ", mask, ", ", toString(transformType), ", ", transformValues, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFillPathInstancedNV);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFillPathInstancedNV != glStencilFillPathInstancedNV);
  rCtx->dsp.CurrTable()->glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}

REGAL_DECL void REGAL_CALL glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilFillPathNV(", path, ", ", toString(fillMode), ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFillPathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilFillPathNV != glStencilFillPathNV);
  rCtx->dsp.CurrTable()->glStencilFillPathNV(path, fillMode, mask);
}

REGAL_DECL void REGAL_CALL glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilStrokePathInstancedNV(", numPaths, ", ", toString(pathNameType), ", ", paths, ", ", pathBase, ", ", reference, ", ", mask, ", ", toString(transformType), ", ", transformValues, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilStrokePathInstancedNV);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilStrokePathInstancedNV != glStencilStrokePathInstancedNV);
  rCtx->dsp.CurrTable()->glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}

REGAL_DECL void REGAL_CALL glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilStrokePathNV(", path, ", ", reference, ", ", mask, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilStrokePathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilStrokePathNV != glStencilStrokePathNV);
  rCtx->dsp.CurrTable()->glStencilStrokePathNV(path, reference, mask);
}

REGAL_DECL void REGAL_CALL glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTransformPathNV(", resultPath, ", ", srcPath, ", ", toString(transformType), ", ", transformValues, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTransformPathNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTransformPathNV != glTransformPathNV);
  rCtx->dsp.CurrTable()->glTransformPathNV(resultPath, srcPath, transformType, transformValues);
}

REGAL_DECL void REGAL_CALL glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glWeightPathsNV(", resultPath, ", ", numPaths, ", ", paths, ", ", weights, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glWeightPathsNV);
  RegalAssert(rCtx->dsp.CurrTable()->glWeightPathsNV != glWeightPathsNV);
  rCtx->dsp.CurrTable()->glWeightPathsNV(resultPath, numPaths, paths, weights);
}

/* GL_REGAL_extension_query */

REGAL_DECL GLboolean REGAL_CALL glGetExtensionREGAL(const GLchar *ext)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetExtensionREGAL(", boost::print::quote(ext,'"'), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetExtensionREGAL);
  RegalAssert(rCtx->dsp.CurrTable()->glGetExtensionREGAL != glGetExtensionREGAL);
  return rCtx->dsp.CurrTable()->glGetExtensionREGAL(ext);
}

REGAL_DECL GLboolean REGAL_CALL glIsSupportedREGAL(const GLchar *ext)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsSupportedREGAL(", boost::print::quote(ext,'"'), ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsSupportedREGAL);
  RegalAssert(rCtx->dsp.CurrTable()->glIsSupportedREGAL != glIsSupportedREGAL);
  return rCtx->dsp.CurrTable()->glIsSupportedREGAL(ext);
}

/* GL_AMD_debug_output */

REGAL_DECL GLuint REGAL_CALL glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetDebugMessageLogAMD(", count, ", ", bufsize, ", ", categories, ", ", severities, ", ", ids, ", ", lengths, ", ", boost::print::quote(message,'"'), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetDebugMessageLogAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGetDebugMessageLogAMD != glGetDebugMessageLogAMD);
  return rCtx->dsp.CurrTable()->glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
}

REGAL_DECL void REGAL_CALL glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDebugMessageCallbackAMD(", userParam, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageCallbackAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageCallbackAMD != glDebugMessageCallbackAMD);
  rCtx->dsp.CurrTable()->glDebugMessageCallbackAMD(callback, userParam);
}

REGAL_DECL void REGAL_CALL glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDebugMessageEnableAMD(", toString(category), ", ", toString(severity), ", ", count, ", ", ids, ", ", enabled, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageEnableAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageEnableAMD != glDebugMessageEnableAMD);
  rCtx->dsp.CurrTable()->glDebugMessageEnableAMD(category, severity, count, ids, enabled);
}

REGAL_DECL void REGAL_CALL glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDebugMessageInsertAMD(", toString(category), ", ", toString(severity), ", ", id, ", ", length, ", ", boost::print::quote(buf,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageInsertAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glDebugMessageInsertAMD != glDebugMessageInsertAMD);
  rCtx->dsp.CurrTable()->glDebugMessageInsertAMD(category, severity, id, length, buf);
}

/* GL_AMD_multi_draw_indirect */

REGAL_DECL void REGAL_CALL glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawArraysIndirectAMD(", toString(mode), ", ", indirect, ", ", primcount, ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawArraysIndirectAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawArraysIndirectAMD != glMultiDrawArraysIndirectAMD);
  rCtx->dsp.CurrTable()->glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
}

REGAL_DECL void REGAL_CALL glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMultiDrawElementsIndirectAMD(", toString(mode), ", ", toString(type), ", ", indirect, ", ", primcount, ", ", stride, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElementsIndirectAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glMultiDrawElementsIndirectAMD != glMultiDrawElementsIndirectAMD);
  rCtx->dsp.CurrTable()->glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
}

/* GL_AMD_name_gen_delete */

REGAL_DECL GLboolean REGAL_CALL glIsNameAMD(GLenum identifier, GLuint name)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsNameAMD(", toString(identifier), ", ", name, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsNameAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glIsNameAMD != glIsNameAMD);
  return rCtx->dsp.CurrTable()->glIsNameAMD(identifier, name);
}

REGAL_DECL void REGAL_CALL glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteNamesAMD(", toString(identifier), ", ", num, ", ", names, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteNamesAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteNamesAMD != glDeleteNamesAMD);
  rCtx->dsp.CurrTable()->glDeleteNamesAMD(identifier, num, names);
}

REGAL_DECL void REGAL_CALL glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGenNamesAMD(", toString(identifier), ", ", num, ", ", names, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGenNamesAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glGenNamesAMD != glGenNamesAMD);
  rCtx->dsp.CurrTable()->glGenNamesAMD(identifier, num, names);
}

/* GL_AMD_sample_positions */

REGAL_DECL void REGAL_CALL glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glSetMultisamplefvAMD(", toString(pname), ", ", index, ", ", val, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glSetMultisamplefvAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glSetMultisamplefvAMD != glSetMultisamplefvAMD);
  rCtx->dsp.CurrTable()->glSetMultisamplefvAMD(pname, index, val);
}

/* GL_AMD_stencil_operation_extended */

REGAL_DECL void REGAL_CALL glStencilOpValueAMD(GLenum face, GLuint value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glStencilOpValueAMD(", toString(face), ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glStencilOpValueAMD);
  RegalAssert(rCtx->dsp.CurrTable()->glStencilOpValueAMD != glStencilOpValueAMD);
  rCtx->dsp.CurrTable()->glStencilOpValueAMD(face, value);
}

/* GL_ARB_base_instance */

REGAL_DECL void REGAL_CALL glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawArraysInstancedBaseInstance(", toString(mode), ", ", first, ", ", count, ", ", primcount, ", ", baseinstance, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysInstancedBaseInstance);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawArraysInstancedBaseInstance != glDrawArraysInstancedBaseInstance);
  rCtx->dsp.CurrTable()->glDrawArraysInstancedBaseInstance(mode, first, count, primcount, baseinstance);
}

REGAL_DECL void REGAL_CALL glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementsInstancedBaseInstance(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ", ", baseinstance, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseInstance);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseInstance != glDrawElementsInstancedBaseInstance);
  rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseInstance(mode, count, type, indices, primcount, baseinstance);
}

REGAL_DECL void REGAL_CALL glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawElementsInstancedBaseVertexBaseInstance(", toString(mode), ", ", count, ", ", toString(type), ", ", indices, ", ", primcount, ", ", basevertex, ", ", baseinstance, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseVertexBaseInstance);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseVertexBaseInstance != glDrawElementsInstancedBaseVertexBaseInstance);
  rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, primcount, basevertex, baseinstance);
}

/* GL_ARB_cl_event */

REGAL_DECL GLsync REGAL_CALL glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glCreateSyncFromCLeventARB(", context, ", ", event, ", ", flags, ")");
  if (!rCtx) return (GLsync )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glCreateSyncFromCLeventARB);
  RegalAssert(rCtx->dsp.CurrTable()->glCreateSyncFromCLeventARB != glCreateSyncFromCLeventARB);
  return rCtx->dsp.CurrTable()->glCreateSyncFromCLeventARB(context, event, flags);
}

/* GL_ARB_internalformat_query */

REGAL_DECL void REGAL_CALL glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetInternalformativ(", toString(target), ", ", toString(internalformat), ", ", toString(pname), ", ", bufSize, ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetInternalformativ);
  RegalAssert(rCtx->dsp.CurrTable()->glGetInternalformativ != glGetInternalformativ);
  rCtx->dsp.CurrTable()->glGetInternalformativ(target, internalformat, pname, bufSize, params);
}

/* GL_ARB_texture_storage */

REGAL_DECL void REGAL_CALL glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexStorage1D(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexStorage1D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexStorage1D != glTexStorage1D);
  rCtx->dsp.CurrTable()->glTexStorage1D(target, levels, internalformat, width);
}

REGAL_DECL void REGAL_CALL glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexStorage2D(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexStorage2D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexStorage2D != glTexStorage2D);
  rCtx->dsp.CurrTable()->glTexStorage2D(target, levels, internalformat, width, height);
}

REGAL_DECL void REGAL_CALL glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexStorage3D(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexStorage3D);
  RegalAssert(rCtx->dsp.CurrTable()->glTexStorage3D != glTexStorage3D);
  rCtx->dsp.CurrTable()->glTexStorage3D(target, levels, internalformat, width, height, depth);
}

REGAL_DECL void REGAL_CALL glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureStorage1DEXT(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureStorage1DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureStorage1DEXT != glTextureStorage1DEXT);
  rCtx->dsp.CurrTable()->glTextureStorage1DEXT(texture, target, levels, internalformat, width);
}

REGAL_DECL void REGAL_CALL glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureStorage2DEXT(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureStorage2DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureStorage2DEXT != glTextureStorage2DEXT);
  rCtx->dsp.CurrTable()->glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
}

REGAL_DECL void REGAL_CALL glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureStorage3DEXT(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureStorage3DEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureStorage3DEXT != glTextureStorage3DEXT);
  rCtx->dsp.CurrTable()->glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
}

/* GL_ARB_transform_feedback_instanced */

REGAL_DECL void REGAL_CALL glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawTransformFeedbackInstanced(", toString(mode), ", ", id, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedbackInstanced);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedbackInstanced != glDrawTransformFeedbackInstanced);
  rCtx->dsp.CurrTable()->glDrawTransformFeedbackInstanced(mode, id, primcount);
}

REGAL_DECL void REGAL_CALL glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawTransformFeedbackStreamInstanced(", toString(mode), ", ", id, ", ", stream, ", ", primcount, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedbackStreamInstanced);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawTransformFeedbackStreamInstanced != glDrawTransformFeedbackStreamInstanced);
  rCtx->dsp.CurrTable()->glDrawTransformFeedbackStreamInstanced(mode, id, stream, primcount);
}

/* GL_EXT_x11_sync_object */

REGAL_DECL GLsync REGAL_CALL glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glImportSyncEXT(", toString(external_sync_type), ", ", external_sync, ", ", flags, ")");
  if (!rCtx) return (GLsync )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glImportSyncEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glImportSyncEXT != glImportSyncEXT);
  return rCtx->dsp.CurrTable()->glImportSyncEXT(external_sync_type, external_sync, flags);
}

/* GL_INTEL_texture_scissor */

REGAL_DECL void REGAL_CALL glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexScissorFuncINTEL(", toString(target), ", ", toString(lfunc), ", ", toString(hfunc), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexScissorFuncINTEL);
  RegalAssert(rCtx->dsp.CurrTable()->glTexScissorFuncINTEL != glTexScissorFuncINTEL);
  rCtx->dsp.CurrTable()->glTexScissorFuncINTEL(target, lfunc, hfunc);
}

REGAL_DECL void REGAL_CALL glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexScissorINTEL(", toString(target), ", ", tlow, ", ", thigh, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexScissorINTEL);
  RegalAssert(rCtx->dsp.CurrTable()->glTexScissorINTEL != glTexScissorINTEL);
  rCtx->dsp.CurrTable()->glTexScissorINTEL(target, tlow, thigh);
}

/* GL_NV_bindless_texture */

REGAL_DECL GLboolean REGAL_CALL glIsImageHandleResidentNV(GLuint64 handle)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsImageHandleResidentNV(", handle, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsImageHandleResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsImageHandleResidentNV != glIsImageHandleResidentNV);
  return rCtx->dsp.CurrTable()->glIsImageHandleResidentNV(handle);
}

REGAL_DECL GLboolean REGAL_CALL glIsTextureHandleResidentNV(GLuint64 handle)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glIsTextureHandleResidentNV(", handle, ")");
  if (!rCtx) return (GLboolean )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glIsTextureHandleResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glIsTextureHandleResidentNV != glIsTextureHandleResidentNV);
  return rCtx->dsp.CurrTable()->glIsTextureHandleResidentNV(handle);
}

REGAL_DECL GLuint64 REGAL_CALL glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetImageHandleNV(", texture, ", ", level, ", ", layered, ", ", layer, ", ", toString(format), ")");
  if (!rCtx) return (GLuint64 )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetImageHandleNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetImageHandleNV != glGetImageHandleNV);
  return rCtx->dsp.CurrTable()->glGetImageHandleNV(texture, level, layered, layer, format);
}

REGAL_DECL GLuint64 REGAL_CALL glGetTextureHandleNV(GLuint texture)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureHandleNV(", texture, ")");
  if (!rCtx) return (GLuint64 )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureHandleNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureHandleNV != glGetTextureHandleNV);
  return rCtx->dsp.CurrTable()->glGetTextureHandleNV(texture);
}

REGAL_DECL GLuint64 REGAL_CALL glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetTextureSamplerHandleNV(", texture, ", ", sampler, ")");
  if (!rCtx) return (GLuint64 )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureSamplerHandleNV);
  RegalAssert(rCtx->dsp.CurrTable()->glGetTextureSamplerHandleNV != glGetTextureSamplerHandleNV);
  return rCtx->dsp.CurrTable()->glGetTextureSamplerHandleNV(texture, sampler);
}

REGAL_DECL void REGAL_CALL glMakeImageHandleNonResidentNV(GLuint64 handle)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMakeImageHandleNonResidentNV(", handle, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMakeImageHandleNonResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMakeImageHandleNonResidentNV != glMakeImageHandleNonResidentNV);
  rCtx->dsp.CurrTable()->glMakeImageHandleNonResidentNV(handle);
}

REGAL_DECL void REGAL_CALL glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMakeImageHandleResidentNV(", handle, ", ", toString(access), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMakeImageHandleResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMakeImageHandleResidentNV != glMakeImageHandleResidentNV);
  rCtx->dsp.CurrTable()->glMakeImageHandleResidentNV(handle, access);
}

REGAL_DECL void REGAL_CALL glMakeTextureHandleNonResidentNV(GLuint64 handle)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMakeTextureHandleNonResidentNV(", handle, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMakeTextureHandleNonResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMakeTextureHandleNonResidentNV != glMakeTextureHandleNonResidentNV);
  rCtx->dsp.CurrTable()->glMakeTextureHandleNonResidentNV(handle);
}

REGAL_DECL void REGAL_CALL glMakeTextureHandleResidentNV(GLuint64 handle)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glMakeTextureHandleResidentNV(", handle, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glMakeTextureHandleResidentNV);
  RegalAssert(rCtx->dsp.CurrTable()->glMakeTextureHandleResidentNV != glMakeTextureHandleResidentNV);
  rCtx->dsp.CurrTable()->glMakeTextureHandleResidentNV(handle);
}

REGAL_DECL void REGAL_CALL glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformHandleui64NV(", program, ", ", location, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformHandleui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformHandleui64NV != glProgramUniformHandleui64NV);
  rCtx->dsp.CurrTable()->glProgramUniformHandleui64NV(program, location, value);
}

REGAL_DECL void REGAL_CALL glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glProgramUniformHandleui64vNV(", program, ", ", location, ", ", count, ", ", values, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformHandleui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glProgramUniformHandleui64vNV != glProgramUniformHandleui64vNV);
  rCtx->dsp.CurrTable()->glProgramUniformHandleui64vNV(program, location, count, values);
}

REGAL_DECL void REGAL_CALL glUniformHandleui64NV(GLint location, GLuint64 value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformHandleui64NV(", location, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformHandleui64NV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformHandleui64NV != glUniformHandleui64NV);
  rCtx->dsp.CurrTable()->glUniformHandleui64NV(location, value);
}

REGAL_DECL void REGAL_CALL glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glUniformHandleui64vNV(", location, ", ", count, ", ", value, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glUniformHandleui64vNV);
  RegalAssert(rCtx->dsp.CurrTable()->glUniformHandleui64vNV != glUniformHandleui64vNV);
  rCtx->dsp.CurrTable()->glUniformHandleui64vNV(location, count, value);
}

/* GL_NV_texture_multisample */

REGAL_DECL void REGAL_CALL glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage2DMultisampleCoverageNV(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", fixedSampleLocations, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage2DMultisampleCoverageNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage2DMultisampleCoverageNV != glTexImage2DMultisampleCoverageNV);
  rCtx->dsp.CurrTable()->glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

REGAL_DECL void REGAL_CALL glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTexImage3DMultisampleCoverageNV(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", fixedSampleLocations, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage3DMultisampleCoverageNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTexImage3DMultisampleCoverageNV != glTexImage3DMultisampleCoverageNV);
  rCtx->dsp.CurrTable()->glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

REGAL_DECL void REGAL_CALL glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureImage2DMultisampleCoverageNV(", texture, ", ", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", fixedSampleLocations, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage2DMultisampleCoverageNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage2DMultisampleCoverageNV != glTextureImage2DMultisampleCoverageNV);
  rCtx->dsp.CurrTable()->glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

REGAL_DECL void REGAL_CALL glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureImage2DMultisampleNV(", texture, ", ", toString(target), ", ", samples, ", ", internalFormat, ", ", width, ", ", height, ", ", fixedSampleLocations, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage2DMultisampleNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage2DMultisampleNV != glTextureImage2DMultisampleNV);
  rCtx->dsp.CurrTable()->glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}

REGAL_DECL void REGAL_CALL glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureImage3DMultisampleCoverageNV(", texture, ", ", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", fixedSampleLocations, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage3DMultisampleCoverageNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage3DMultisampleCoverageNV != glTextureImage3DMultisampleCoverageNV);
  rCtx->dsp.CurrTable()->glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

REGAL_DECL void REGAL_CALL glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureImage3DMultisampleNV(", texture, ", ", toString(target), ", ", samples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", fixedSampleLocations, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage3DMultisampleNV);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureImage3DMultisampleNV != glTextureImage3DMultisampleNV);
  rCtx->dsp.CurrTable()->glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}

/* GL_SUN_read_video_pixels */

REGAL_DECL void REGAL_CALL glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReadVideoPixelsSUN(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", pixels, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReadVideoPixelsSUN);
  RegalAssert(rCtx->dsp.CurrTable()->glReadVideoPixelsSUN != glReadVideoPixelsSUN);
  rCtx->dsp.CurrTable()->glReadVideoPixelsSUN(x, y, width, height, format, type, pixels);
}

/* GL_EXT_fragment_lighting */

REGAL_DECL void REGAL_CALL glFragmentColorMaterialEXT(GLenum face, GLenum mode)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentColorMaterialEXT(", toString(face), ", ", toString(mode), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentColorMaterialEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentColorMaterialEXT != glFragmentColorMaterialEXT);
  rCtx->dsp.CurrTable()->glFragmentColorMaterialEXT(face, mode);
}

REGAL_DECL void REGAL_CALL glFragmentLightModelfEXT(GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightModelfEXT(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelfEXT != glFragmentLightModelfEXT);
  rCtx->dsp.CurrTable()->glFragmentLightModelfEXT(pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentLightModelfvEXT(GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightModelfvEXT(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelfvEXT != glFragmentLightModelfvEXT);
  rCtx->dsp.CurrTable()->glFragmentLightModelfvEXT(pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentLightModeliEXT(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightModeliEXT(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModeliEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModeliEXT != glFragmentLightModeliEXT);
  rCtx->dsp.CurrTable()->glFragmentLightModeliEXT(pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentLightModelivEXT(GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightModelivEXT(", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightModelivEXT != glFragmentLightModelivEXT);
  rCtx->dsp.CurrTable()->glFragmentLightModelivEXT(pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightfEXT(", toString(light), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightfEXT != glFragmentLightfEXT);
  rCtx->dsp.CurrTable()->glFragmentLightfEXT(light, pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightfvEXT(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightfvEXT != glFragmentLightfvEXT);
  rCtx->dsp.CurrTable()->glFragmentLightfvEXT(light, pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentLightiEXT(GLenum light, GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightiEXT(", toString(light), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightiEXT != glFragmentLightiEXT);
  rCtx->dsp.CurrTable()->glFragmentLightiEXT(light, pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentLightivEXT(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentLightivEXT != glFragmentLightivEXT);
  rCtx->dsp.CurrTable()->glFragmentLightivEXT(light, pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentMaterialfEXT(", toString(face), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialfEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialfEXT != glFragmentMaterialfEXT);
  rCtx->dsp.CurrTable()->glFragmentMaterialfEXT(face, pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentMaterialfvEXT(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialfvEXT != glFragmentMaterialfvEXT);
  rCtx->dsp.CurrTable()->glFragmentMaterialfvEXT(face, pname, params);
}

REGAL_DECL void REGAL_CALL glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentMaterialiEXT(", toString(face), ", ", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialiEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialiEXT != glFragmentMaterialiEXT);
  rCtx->dsp.CurrTable()->glFragmentMaterialiEXT(face, pname, param);
}

REGAL_DECL void REGAL_CALL glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glFragmentMaterialivEXT(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glFragmentMaterialivEXT != glFragmentMaterialivEXT);
  rCtx->dsp.CurrTable()->glFragmentMaterialivEXT(face, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragmentLightfvEXT(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentLightfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentLightfvEXT != glGetFragmentLightfvEXT);
  rCtx->dsp.CurrTable()->glGetFragmentLightfvEXT(light, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragmentLightivEXT(", toString(light), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentLightivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentLightivEXT != glGetFragmentLightivEXT);
  rCtx->dsp.CurrTable()->glGetFragmentLightivEXT(light, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragmentMaterialfvEXT(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentMaterialfvEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentMaterialfvEXT != glGetFragmentMaterialfvEXT);
  rCtx->dsp.CurrTable()->glGetFragmentMaterialfvEXT(face, pname, params);
}

REGAL_DECL void REGAL_CALL glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glGetFragmentMaterialivEXT(", toString(face), ", ", toString(pname), ", ", params, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentMaterialivEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glGetFragmentMaterialivEXT != glGetFragmentMaterialivEXT);
  rCtx->dsp.CurrTable()->glGetFragmentMaterialivEXT(face, pname, params);
}

REGAL_DECL void REGAL_CALL glLightEnviEXT(GLenum pname, GLint param)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glLightEnviEXT(", toString(pname), ", ", param, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glLightEnviEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glLightEnviEXT != glLightEnviEXT);
  rCtx->dsp.CurrTable()->glLightEnviEXT(pname, param);
}

/* GL_EXT_debug_marker */

REGAL_DECL void REGAL_CALL glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glInsertEventMarkerEXT(", length, ", ", boost::print::quote(marker,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glInsertEventMarkerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glInsertEventMarkerEXT != glInsertEventMarkerEXT);
  rCtx->dsp.CurrTable()->glInsertEventMarkerEXT(length, marker);
}

REGAL_DECL void REGAL_CALL glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPushGroupMarkerEXT(", length, ", ", boost::print::quote(marker,'"'), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPushGroupMarkerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPushGroupMarkerEXT != glPushGroupMarkerEXT);
  rCtx->dsp.CurrTable()->glPushGroupMarkerEXT(length, marker);
}

REGAL_DECL void REGAL_CALL glPopGroupMarkerEXT(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glPopGroupMarkerEXT()");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glPopGroupMarkerEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glPopGroupMarkerEXT != glPopGroupMarkerEXT);
  rCtx->dsp.CurrTable()->glPopGroupMarkerEXT();
}

/* GL_KTX_buffer_region */

REGAL_DECL GLuint REGAL_CALL glBufferRegionEnabledEXT(void)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glBufferRegionEnabledEXT()");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glBufferRegionEnabledEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glBufferRegionEnabledEXT != glBufferRegionEnabledEXT);
  return rCtx->dsp.CurrTable()->glBufferRegionEnabledEXT();
}

REGAL_DECL GLuint REGAL_CALL glNewBufferRegionEXT(GLenum region)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glNewBufferRegionEXT(", toString(region), ")");
  if (!rCtx) return (GLuint )0;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glNewBufferRegionEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glNewBufferRegionEXT != glNewBufferRegionEXT);
  return rCtx->dsp.CurrTable()->glNewBufferRegionEXT(region);
}

REGAL_DECL void REGAL_CALL glDeleteBufferRegionEXT(GLenum region)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDeleteBufferRegionEXT(", toString(region), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteBufferRegionEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDeleteBufferRegionEXT != glDeleteBufferRegionEXT);
  rCtx->dsp.CurrTable()->glDeleteBufferRegionEXT(region);
}

REGAL_DECL void REGAL_CALL glReadBufferRegionEXT(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glReadBufferRegionEXT(", region, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glReadBufferRegionEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glReadBufferRegionEXT != glReadBufferRegionEXT);
  rCtx->dsp.CurrTable()->glReadBufferRegionEXT(region, x, y, width, height);
}

REGAL_DECL void REGAL_CALL glDrawBufferRegionEXT(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glDrawBufferRegionEXT(", region, ", ", x, ", ", y, ", ", width, ", ", height, ", ", xDest, ", ", yDest, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBufferRegionEXT);
  RegalAssert(rCtx->dsp.CurrTable()->glDrawBufferRegionEXT != glDrawBufferRegionEXT);
  rCtx->dsp.CurrTable()->glDrawBufferRegionEXT(region, x, y, width, height, xDest, yDest);
}

/* GL_SGIX_fog_texture */

REGAL_DECL void REGAL_CALL glTextureFogSGIX(GLenum pname)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glTextureFogSGIX(", toString(pname), ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glTextureFogSGIX);
  RegalAssert(rCtx->dsp.CurrTable()->glTextureFogSGIX != glTextureFogSGIX);
  rCtx->dsp.CurrTable()->glTextureFogSGIX(pname);
}

/* GL_WIN_swap_hint */

REGAL_DECL void REGAL_CALL glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RTrace("glAddSwapHintRectWIN(", x, ", ", y, ", ", width, ", ", height, ")");
  if (!rCtx) return;
  RegalAssert(rCtx);
  RegalAssert(rCtx->dsp.CurrTable());
  RegalAssert(rCtx->dsp.CurrTable()->glAddSwapHintRectWIN);
  RegalAssert(rCtx->dsp.CurrTable()->glAddSwapHintRectWIN != glAddSwapHintRectWIN);
  rCtx->dsp.CurrTable()->glAddSwapHintRectWIN(x, y, width, height);
}

#if REGAL_SYS_WGL

/* WGL_GDI */

REGAL_DECL int REGAL_CALL wglChoosePixelFormat(HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd)
{
  RTrace("wglChoosePixelFormat(", hDC, ", ", ppfd, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglChoosePixelFormat, "wglChoosePixelFormat" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglChoosePixelFormat) {
    ret = dispatchTableGlobal.wglChoosePixelFormat(hDC, ppfd);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL wglDescribePixelFormat(HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
{
  RTrace("wglDescribePixelFormat(", hDC, ", ", iPixelFormat, ", ", nBytes, ", ", ppfd, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDescribePixelFormat, "wglDescribePixelFormat" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglDescribePixelFormat) {
    ret = dispatchTableGlobal.wglDescribePixelFormat(hDC, iPixelFormat, nBytes, ppfd);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL wglGetPixelFormat(HDC hDC)
{
  RTrace("wglGetPixelFormat(", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetPixelFormat, "wglGetPixelFormat" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglGetPixelFormat) {
    ret = dispatchTableGlobal.wglGetPixelFormat(hDC);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglSetPixelFormat(HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd)
{
  RTrace("wglSetPixelFormat(", hDC, ", ", iPixelFormat, ", ", ppfd, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSetPixelFormat, "wglSetPixelFormat" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSetPixelFormat) {
    ret = dispatchTableGlobal.wglSetPixelFormat(hDC, iPixelFormat, ppfd);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglSwapBuffers(HDC hDC)
{
  RTrace("wglSwapBuffers(", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSwapBuffers, "wglSwapBuffers" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSwapBuffers) {
    ret = dispatchTableGlobal.wglSwapBuffers(hDC);
  }
  return ret;
}

/* WGL_core */

REGAL_DECL HGLRC REGAL_CALL wglCreateContext(HDC hDC)
{
  RTrace("wglCreateContext(", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateContext, "wglCreateContext" );
    initialized = true;
  }
  HGLRC  ret = (HGLRC )0;
  if (dispatchTableGlobal.wglCreateContext) {
    ret = dispatchTableGlobal.wglCreateContext(hDC);
  }
  return ret;
}

REGAL_DECL HGLRC REGAL_CALL wglCreateLayerContext(HDC hDC, int iLayerPlane)
{
  RTrace("wglCreateLayerContext(", hDC, ", ", iLayerPlane, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateLayerContext, "wglCreateLayerContext" );
    initialized = true;
  }
  HGLRC  ret = (HGLRC )0;
  if (dispatchTableGlobal.wglCreateLayerContext) {
    ret = dispatchTableGlobal.wglCreateLayerContext(hDC, iLayerPlane);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglCopyContext(HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
{
  RTrace("wglCopyContext(", hglrcSrc, ", ", hglrcDst, ", ", mask, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCopyContext, "wglCopyContext" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglCopyContext) {
    ret = dispatchTableGlobal.wglCopyContext(hglrcSrc, hglrcDst, mask);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDeleteContext(HGLRC hglrc)
{
  RTrace("wglDeleteContext(", hglrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDeleteContext, "wglDeleteContext" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDeleteContext) {
    ret = dispatchTableGlobal.wglDeleteContext(hglrc);
  }
  return ret;
}

REGAL_DECL HGLRC REGAL_CALL wglGetCurrentContext(void)
{
  RTrace("wglGetCurrentContext()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetCurrentContext, "wglGetCurrentContext" );
    initialized = true;
  }
  HGLRC  ret = (HGLRC )0;
  if (dispatchTableGlobal.wglGetCurrentContext) {
    ret = dispatchTableGlobal.wglGetCurrentContext();
  }
  return ret;
}

REGAL_DECL HDC REGAL_CALL wglGetCurrentDC(void)
{
  RTrace("wglGetCurrentDC()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetCurrentDC, "wglGetCurrentDC" );
    initialized = true;
  }
  HDC  ret = (HDC )0;
  if (dispatchTableGlobal.wglGetCurrentDC) {
    ret = dispatchTableGlobal.wglGetCurrentDC();
  }
  return ret;
}

REGAL_DECL PROC REGAL_CALL wglGetDefaultProcAddress(LPCSTR lpszProc)
{
  RTrace("wglGetDefaultProcAddress(", lpszProc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetDefaultProcAddress, "wglGetDefaultProcAddress" );
    initialized = true;
  }
  PROC  ret = (PROC )0;
  if (dispatchTableGlobal.wglGetDefaultProcAddress) {
    ret = dispatchTableGlobal.wglGetDefaultProcAddress(lpszProc);
  }
  return ret;
}

REGAL_DECL PROC REGAL_CALL wglGetProcAddress(LPCSTR lpszProc)
{
  RTrace("wglGetProcAddress(", lpszProc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetProcAddress, "wglGetProcAddress" );
    initialized = true;
  }
  PROC  ret = (PROC )0;
  ret = Lookup::gl_Lookup<PROC>(lpszProc);
  if (ret)
    return ret;
  ret = Lookup::wgl_Lookup<PROC>(lpszProc);
  if (ret)
    return ret;
  if (dispatchTableGlobal.wglGetProcAddress) {
    ret = dispatchTableGlobal.wglGetProcAddress(lpszProc);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglMakeCurrent(HDC hDC, HGLRC hglrc)
{
  RTrace("wglMakeCurrent(", hDC, ", ", hglrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglMakeCurrent, "wglMakeCurrent" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglMakeCurrent) {
    ret = dispatchTableGlobal.wglMakeCurrent(hDC, hglrc);
       RegalMakeCurrent(RegalSystemContext(hglrc));
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglShareLists(HGLRC hglrcShare, HGLRC hglrcSrc)
{
  RTrace("wglShareLists(", hglrcShare, ", ", hglrcSrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglShareLists, "wglShareLists" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglShareLists) {
    ret = dispatchTableGlobal.wglShareLists(hglrcShare, hglrcSrc);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglUseFontBitmapsA(HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  RTrace("wglUseFontBitmapsA(", hDC, ", ", first, ", ", count, ", ", listBase, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglUseFontBitmapsA, "wglUseFontBitmapsA" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglUseFontBitmapsA) {
    ret = dispatchTableGlobal.wglUseFontBitmapsA(hDC, first, count, listBase);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglUseFontBitmapsW(HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  RTrace("wglUseFontBitmapsW(", hDC, ", ", first, ", ", count, ", ", listBase, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglUseFontBitmapsW, "wglUseFontBitmapsW" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglUseFontBitmapsW) {
    ret = dispatchTableGlobal.wglUseFontBitmapsW(hDC, first, count, listBase);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglUseFontOutlinesA(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  RTrace("wglUseFontOutlinesA(", hDC, ", ", first, ", ", count, ", ", listBase, ", ", deviation, ", ", extrusion, ", ", format, ", ", lpgmf, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglUseFontOutlinesA, "wglUseFontOutlinesA" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglUseFontOutlinesA) {
    ret = dispatchTableGlobal.wglUseFontOutlinesA(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglUseFontOutlinesW(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  RTrace("wglUseFontOutlinesW(", hDC, ", ", first, ", ", count, ", ", listBase, ", ", deviation, ", ", extrusion, ", ", format, ", ", lpgmf, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglUseFontOutlinesW, "wglUseFontOutlinesW" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglUseFontOutlinesW) {
    ret = dispatchTableGlobal.wglUseFontOutlinesW(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDescribeLayerPlane(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)
{
  RTrace("wglDescribeLayerPlane(", hDC, ", ", iPixelFormat, ", ", iLayerPlane, ", ", nBytes, ", ", plpd, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDescribeLayerPlane, "wglDescribeLayerPlane" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDescribeLayerPlane) {
    ret = dispatchTableGlobal.wglDescribeLayerPlane(hDC, iPixelFormat, iLayerPlane, nBytes, plpd);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL wglSetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr)
{
  RTrace("wglSetLayerPaletteEntries(", hDC, ", ", iLayerPlane, ", ", iStart, ", ", nEntries, ", ", pcr, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSetLayerPaletteEntries, "wglSetLayerPaletteEntries" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglSetLayerPaletteEntries) {
    ret = dispatchTableGlobal.wglSetLayerPaletteEntries(hDC, iLayerPlane, iStart, nEntries, pcr);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL wglGetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr)
{
  RTrace("wglGetLayerPaletteEntries(", hDC, ", ", iLayerPlane, ", ", iStart, ", ", nEntries, ", ", pcr, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetLayerPaletteEntries, "wglGetLayerPaletteEntries" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglGetLayerPaletteEntries) {
    ret = dispatchTableGlobal.wglGetLayerPaletteEntries(hDC, iLayerPlane, iStart, nEntries, pcr);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglRealizeLayerPalette(HDC hDC, int iLayerPlane, BOOL bRealize)
{
  RTrace("wglRealizeLayerPalette(", hDC, ", ", iLayerPlane, ", ", bRealize, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglRealizeLayerPalette, "wglRealizeLayerPalette" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglRealizeLayerPalette) {
    ret = dispatchTableGlobal.wglRealizeLayerPalette(hDC, iLayerPlane, bRealize);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglSwapLayerBuffers(HDC hDC, UINT fuPlanes)
{
  RTrace("wglSwapLayerBuffers(", hDC, ", ", fuPlanes, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSwapLayerBuffers, "wglSwapLayerBuffers" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSwapLayerBuffers) {
    ret = dispatchTableGlobal.wglSwapLayerBuffers(hDC, fuPlanes);
  }
  return ret;
}

REGAL_DECL DWORD REGAL_CALL wglSwapMultipleBuffers(UINT n, const WGLSWAP *ps)
{
  RTrace("wglSwapMultipleBuffers(", n, ", ", ps, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSwapMultipleBuffers, "wglSwapMultipleBuffers" );
    initialized = true;
  }
  DWORD  ret = (DWORD )0;
  if (dispatchTableGlobal.wglSwapMultipleBuffers) {
    ret = dispatchTableGlobal.wglSwapMultipleBuffers(n, ps);
  }
  return ret;
}

/* WGL_ARB_buffer_region */

REGAL_DECL HANDLE REGAL_CALL wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType)
{
  RTrace("wglCreateBufferRegionARB(", hDC, ", ", iLayerPlane, ", ", uType, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateBufferRegionARB, "wglCreateBufferRegionARB" );
    initialized = true;
  }
  HANDLE  ret = (HANDLE )0;
  if (dispatchTableGlobal.wglCreateBufferRegionARB) {
    ret = dispatchTableGlobal.wglCreateBufferRegionARB(hDC, iLayerPlane, uType);
  }
  return ret;
}

REGAL_DECL VOID REGAL_CALL wglDeleteBufferRegionARB(HANDLE hRegion)
{
  RTrace("wglDeleteBufferRegionARB(", hRegion, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDeleteBufferRegionARB, "wglDeleteBufferRegionARB" );
    initialized = true;
  }
  if (dispatchTableGlobal.wglDeleteBufferRegionARB) {
    dispatchTableGlobal.wglDeleteBufferRegionARB(hRegion);
  }
}

REGAL_DECL BOOL REGAL_CALL wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height)
{
  RTrace("wglSaveBufferRegionARB(", hRegion, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSaveBufferRegionARB, "wglSaveBufferRegionARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSaveBufferRegionARB) {
    ret = dispatchTableGlobal.wglSaveBufferRegionARB(hRegion, x, y, width, height);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
{
  RTrace("wglRestoreBufferRegionARB(", hRegion, ", ", x, ", ", y, ", ", width, ", ", height, ", ", xSrc, ", ", ySrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglRestoreBufferRegionARB, "wglRestoreBufferRegionARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglRestoreBufferRegionARB) {
    ret = dispatchTableGlobal.wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc);
  }
  return ret;
}

/* WGL_ARB_extensions_string */

REGAL_DECL const char *REGAL_CALL wglGetExtensionsStringARB(HDC hDC)
{
  RTrace("wglGetExtensionsStringARB(", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetExtensionsStringARB, "wglGetExtensionsStringARB" );
    initialized = true;
  }
  const char * ret = NULL;
  if (dispatchTableGlobal.wglGetExtensionsStringARB) {
    ret = dispatchTableGlobal.wglGetExtensionsStringARB(hDC);
  }
  return ret;
}

/* WGL_ARB_pixel_format */

REGAL_DECL BOOL REGAL_CALL wglGetPixelFormatAttribivARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
{
  RTrace("wglGetPixelFormatAttribivARB(", hDC, ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", piAttributes, ", ", piValues, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetPixelFormatAttribivARB, "wglGetPixelFormatAttribivARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetPixelFormatAttribivARB) {
    ret = dispatchTableGlobal.wglGetPixelFormatAttribivARB(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetPixelFormatAttribfvARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
{
  RTrace("wglGetPixelFormatAttribfvARB(", hDC, ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", piAttributes, ", ", pfValues, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetPixelFormatAttribfvARB, "wglGetPixelFormatAttribfvARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetPixelFormatAttribfvARB) {
    ret = dispatchTableGlobal.wglGetPixelFormatAttribfvARB(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglChoosePixelFormatARB(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
{
  RTrace("wglChoosePixelFormatARB(", hDC, ", ", piAttribIList, ", ", pfAttribFList, ", ", nMaxFormats, ", ", piFormats, ", ", nNumFormats, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglChoosePixelFormatARB, "wglChoosePixelFormatARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglChoosePixelFormatARB) {
    ret = dispatchTableGlobal.wglChoosePixelFormatARB(hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  return ret;
}

/* WGL_ARB_make_current_read */

REGAL_DECL BOOL REGAL_CALL wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  RTrace("wglMakeContextCurrentARB(", hDrawDC, ", ", hReadDC, ", ", hglrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglMakeContextCurrentARB, "wglMakeContextCurrentARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglMakeContextCurrentARB) {
    ret = dispatchTableGlobal.wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc);
  }
  return ret;
}

REGAL_DECL HDC REGAL_CALL wglGetCurrentReadDCARB(void)
{
  RTrace("wglGetCurrentReadDCARB()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetCurrentReadDCARB, "wglGetCurrentReadDCARB" );
    initialized = true;
  }
  HDC  ret = (HDC )0;
  if (dispatchTableGlobal.wglGetCurrentReadDCARB) {
    ret = dispatchTableGlobal.wglGetCurrentReadDCARB();
  }
  return ret;
}

/* WGL_ARB_pbuffer */

REGAL_DECL HPBUFFERARB REGAL_CALL wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
{
  RTrace("wglCreatePbufferARB(", hDC, ", ", iPixelFormat, ", ", iWidth, ", ", iHeight, ", ", piAttribList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreatePbufferARB, "wglCreatePbufferARB" );
    initialized = true;
  }
  HPBUFFERARB  ret = (HPBUFFERARB )0;
  if (dispatchTableGlobal.wglCreatePbufferARB) {
    ret = dispatchTableGlobal.wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  return ret;
}

REGAL_DECL HDC REGAL_CALL wglGetPbufferDCARB(HPBUFFERARB hPbuffer)
{
  RTrace("wglGetPbufferDCARB(", hPbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetPbufferDCARB, "wglGetPbufferDCARB" );
    initialized = true;
  }
  HDC  ret = (HDC )0;
  if (dispatchTableGlobal.wglGetPbufferDCARB) {
    ret = dispatchTableGlobal.wglGetPbufferDCARB(hPbuffer);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC)
{
  RTrace("wglReleasePbufferDCARB(", hPbuffer, ", ", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglReleasePbufferDCARB, "wglReleasePbufferDCARB" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglReleasePbufferDCARB) {
    ret = dispatchTableGlobal.wglReleasePbufferDCARB(hPbuffer, hDC);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDestroyPbufferARB(HPBUFFERARB hPbuffer)
{
  RTrace("wglDestroyPbufferARB(", hPbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDestroyPbufferARB, "wglDestroyPbufferARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDestroyPbufferARB) {
    ret = dispatchTableGlobal.wglDestroyPbufferARB(hPbuffer);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int *piValue)
{
  RTrace("wglQueryPbufferARB(", hPbuffer, ", ", iAttribute, ", ", piValue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryPbufferARB, "wglQueryPbufferARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryPbufferARB) {
    ret = dispatchTableGlobal.wglQueryPbufferARB(hPbuffer, iAttribute, piValue);
  }
  return ret;
}

/* WGL_ARB_render_texture */

REGAL_DECL BOOL REGAL_CALL wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
{
  RTrace("wglBindTexImageARB(", hPbuffer, ", ", iBuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglBindTexImageARB, "wglBindTexImageARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglBindTexImageARB) {
    ret = dispatchTableGlobal.wglBindTexImageARB(hPbuffer, iBuffer);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
{
  RTrace("wglReleaseTexImageARB(", hPbuffer, ", ", iBuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglReleaseTexImageARB, "wglReleaseTexImageARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglReleaseTexImageARB) {
    ret = dispatchTableGlobal.wglReleaseTexImageARB(hPbuffer, iBuffer);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int *piAttribList)
{
  RTrace("wglSetPbufferAttribARB(", hPbuffer, ", ", piAttribList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSetPbufferAttribARB, "wglSetPbufferAttribARB" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSetPbufferAttribARB) {
    ret = dispatchTableGlobal.wglSetPbufferAttribARB(hPbuffer, piAttribList);
  }
  return ret;
}

/* WGL_ARB_create_context */

REGAL_DECL HGLRC REGAL_CALL wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *piAttribList)
{
  RTrace("wglCreateContextAttribsARB(", hDC, ", ", hShareContext, ", ", piAttribList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateContextAttribsARB, "wglCreateContextAttribsARB" );
    initialized = true;
  }
  HGLRC  ret = (HGLRC )0;
  if (dispatchTableGlobal.wglCreateContextAttribsARB) {
    ret = dispatchTableGlobal.wglCreateContextAttribsARB(hDC, hShareContext, piAttribList);
  }
  return ret;
}

/* WGL_EXT_display_color_table */

REGAL_DECL GLboolean REGAL_CALL wglCreateDisplayColorTableEXT(GLushort id)
{
  RTrace("wglCreateDisplayColorTableEXT(", id, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateDisplayColorTableEXT, "wglCreateDisplayColorTableEXT" );
    initialized = true;
  }
  GLboolean  ret = (GLboolean )0;
  if (dispatchTableGlobal.wglCreateDisplayColorTableEXT) {
    ret = dispatchTableGlobal.wglCreateDisplayColorTableEXT(id);
  }
  return ret;
}

REGAL_DECL GLboolean REGAL_CALL wglLoadDisplayColorTableEXT(const GLushort *table, GLuint length)
{
  RTrace("wglLoadDisplayColorTableEXT(", table, ", ", length, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglLoadDisplayColorTableEXT, "wglLoadDisplayColorTableEXT" );
    initialized = true;
  }
  GLboolean  ret = (GLboolean )0;
  if (dispatchTableGlobal.wglLoadDisplayColorTableEXT) {
    ret = dispatchTableGlobal.wglLoadDisplayColorTableEXT(table, length);
  }
  return ret;
}

REGAL_DECL GLboolean REGAL_CALL wglBindDisplayColorTableEXT(GLushort id)
{
  RTrace("wglBindDisplayColorTableEXT(", id, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglBindDisplayColorTableEXT, "wglBindDisplayColorTableEXT" );
    initialized = true;
  }
  GLboolean  ret = (GLboolean )0;
  if (dispatchTableGlobal.wglBindDisplayColorTableEXT) {
    ret = dispatchTableGlobal.wglBindDisplayColorTableEXT(id);
  }
  return ret;
}

REGAL_DECL VOID REGAL_CALL wglDestroyDisplayColorTableEXT(GLushort id)
{
  RTrace("wglDestroyDisplayColorTableEXT(", id, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDestroyDisplayColorTableEXT, "wglDestroyDisplayColorTableEXT" );
    initialized = true;
  }
  if (dispatchTableGlobal.wglDestroyDisplayColorTableEXT) {
    dispatchTableGlobal.wglDestroyDisplayColorTableEXT(id);
  }
}

/* WGL_EXT_extensions_string */

REGAL_DECL const char *REGAL_CALL wglGetExtensionsStringEXT(void)
{
  RTrace("wglGetExtensionsStringEXT()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetExtensionsStringEXT, "wglGetExtensionsStringEXT" );
    initialized = true;
  }
  const char * ret = NULL;
  if (dispatchTableGlobal.wglGetExtensionsStringEXT) {
    ret = dispatchTableGlobal.wglGetExtensionsStringEXT();
  }
  return ret;
}

/* WGL_EXT_make_current_read */

REGAL_DECL BOOL REGAL_CALL wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  RTrace("wglMakeContextCurrentEXT(", hDrawDC, ", ", hReadDC, ", ", hglrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglMakeContextCurrentEXT, "wglMakeContextCurrentEXT" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglMakeContextCurrentEXT) {
    ret = dispatchTableGlobal.wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc);
  }
  return ret;
}

REGAL_DECL HDC REGAL_CALL wglGetCurrentReadDCEXT(void)
{
  RTrace("wglGetCurrentReadDCEXT()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetCurrentReadDCEXT, "wglGetCurrentReadDCEXT" );
    initialized = true;
  }
  HDC  ret = (HDC )0;
  if (dispatchTableGlobal.wglGetCurrentReadDCEXT) {
    ret = dispatchTableGlobal.wglGetCurrentReadDCEXT();
  }
  return ret;
}

/* WGL_EXT_pixel_format */

REGAL_DECL BOOL REGAL_CALL wglGetPixelFormatAttribivEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
{
  RTrace("wglGetPixelFormatAttribivEXT(", hDC, ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", piAttributes, ", ", piValues, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetPixelFormatAttribivEXT, "wglGetPixelFormatAttribivEXT" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetPixelFormatAttribivEXT) {
    ret = dispatchTableGlobal.wglGetPixelFormatAttribivEXT(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetPixelFormatAttribfvEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
{
  RTrace("wglGetPixelFormatAttribfvEXT(", hDC, ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", piAttributes, ", ", pfValues, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetPixelFormatAttribfvEXT, "wglGetPixelFormatAttribfvEXT" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetPixelFormatAttribfvEXT) {
    ret = dispatchTableGlobal.wglGetPixelFormatAttribfvEXT(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglChoosePixelFormatEXT(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
{
  RTrace("wglChoosePixelFormatEXT(", hDC, ", ", piAttribIList, ", ", pfAttribFList, ", ", nMaxFormats, ", ", piFormats, ", ", nNumFormats, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglChoosePixelFormatEXT, "wglChoosePixelFormatEXT" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglChoosePixelFormatEXT) {
    ret = dispatchTableGlobal.wglChoosePixelFormatEXT(hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  return ret;
}

/* WGL_EXT_pbuffer */

REGAL_DECL HPBUFFEREXT REGAL_CALL wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
{
  RTrace("wglCreatePbufferEXT(", hDC, ", ", iPixelFormat, ", ", iWidth, ", ", iHeight, ", ", piAttribList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreatePbufferEXT, "wglCreatePbufferEXT" );
    initialized = true;
  }
  HPBUFFEREXT  ret = (HPBUFFEREXT )0;
  if (dispatchTableGlobal.wglCreatePbufferEXT) {
    ret = dispatchTableGlobal.wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  return ret;
}

REGAL_DECL HDC REGAL_CALL wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer)
{
  RTrace("wglGetPbufferDCEXT(", hPbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetPbufferDCEXT, "wglGetPbufferDCEXT" );
    initialized = true;
  }
  HDC  ret = (HDC )0;
  if (dispatchTableGlobal.wglGetPbufferDCEXT) {
    ret = dispatchTableGlobal.wglGetPbufferDCEXT(hPbuffer);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC)
{
  RTrace("wglReleasePbufferDCEXT(", hPbuffer, ", ", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglReleasePbufferDCEXT, "wglReleasePbufferDCEXT" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglReleasePbufferDCEXT) {
    ret = dispatchTableGlobal.wglReleasePbufferDCEXT(hPbuffer, hDC);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer)
{
  RTrace("wglDestroyPbufferEXT(", hPbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDestroyPbufferEXT, "wglDestroyPbufferEXT" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDestroyPbufferEXT) {
    ret = dispatchTableGlobal.wglDestroyPbufferEXT(hPbuffer);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)
{
  RTrace("wglQueryPbufferEXT(", hPbuffer, ", ", iAttribute, ", ", piValue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryPbufferEXT, "wglQueryPbufferEXT" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryPbufferEXT) {
    ret = dispatchTableGlobal.wglQueryPbufferEXT(hPbuffer, iAttribute, piValue);
  }
  return ret;
}

/* WGL_EXT_swap_control */

REGAL_DECL BOOL REGAL_CALL wglSwapIntervalEXT(int interval)
{
  RTrace("wglSwapIntervalEXT(", interval, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSwapIntervalEXT, "wglSwapIntervalEXT" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSwapIntervalEXT) {
    ret = dispatchTableGlobal.wglSwapIntervalEXT(interval);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL wglGetSwapIntervalEXT(void)
{
  RTrace("wglGetSwapIntervalEXT()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetSwapIntervalEXT, "wglGetSwapIntervalEXT" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglGetSwapIntervalEXT) {
    ret = dispatchTableGlobal.wglGetSwapIntervalEXT();
  }
  return ret;
}

/* WGL_NV_vertex_array_range */

REGAL_DECL void *REGAL_CALL wglAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
{
  RTrace("wglAllocateMemoryNV(", size, ", ", readfreq, ", ", writefreq, ", ", priority, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglAllocateMemoryNV, "wglAllocateMemoryNV" );
    initialized = true;
  }
  void * ret = NULL;
  if (dispatchTableGlobal.wglAllocateMemoryNV) {
    ret = dispatchTableGlobal.wglAllocateMemoryNV(size, readfreq, writefreq, priority);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL wglFreeMemoryNV(void *pointer)
{
  RTrace("wglFreeMemoryNV(", pointer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglFreeMemoryNV, "wglFreeMemoryNV" );
    initialized = true;
  }
  if (dispatchTableGlobal.wglFreeMemoryNV) {
    dispatchTableGlobal.wglFreeMemoryNV(pointer);
  }
}

/* WGL_OML_sync_control */

REGAL_DECL BOOL REGAL_CALL wglGetSyncValuesOML(HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  RTrace("wglGetSyncValuesOML(", hDC, ", ", ust, ", ", msc, ", ", sbc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetSyncValuesOML, "wglGetSyncValuesOML" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetSyncValuesOML) {
    ret = dispatchTableGlobal.wglGetSyncValuesOML(hDC, ust, msc, sbc);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetMscRateOML(HDC hDC, INT32 *numerator, INT32 *denominator)
{
  RTrace("wglGetMscRateOML(", hDC, ", ", numerator, ", ", denominator, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetMscRateOML, "wglGetMscRateOML" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetMscRateOML) {
    ret = dispatchTableGlobal.wglGetMscRateOML(hDC, numerator, denominator);
  }
  return ret;
}

REGAL_DECL INT64 REGAL_CALL wglSwapBuffersMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  RTrace("wglSwapBuffersMscOML(", hDC, ", ", target_msc, ", ", divisor, ", ", remainder, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSwapBuffersMscOML, "wglSwapBuffersMscOML" );
    initialized = true;
  }
  INT64  ret = (INT64 )0;
  if (dispatchTableGlobal.wglSwapBuffersMscOML) {
    ret = dispatchTableGlobal.wglSwapBuffersMscOML(hDC, target_msc, divisor, remainder);
  }
  return ret;
}

REGAL_DECL INT64 REGAL_CALL wglSwapLayerBuffersMscOML(HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  RTrace("wglSwapLayerBuffersMscOML(", hDC, ", ", fuPlanes, ", ", target_msc, ", ", divisor, ", ", remainder, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSwapLayerBuffersMscOML, "wglSwapLayerBuffersMscOML" );
    initialized = true;
  }
  INT64  ret = (INT64 )0;
  if (dispatchTableGlobal.wglSwapLayerBuffersMscOML) {
    ret = dispatchTableGlobal.wglSwapLayerBuffersMscOML(hDC, fuPlanes, target_msc, divisor, remainder);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglWaitForMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  RTrace("wglWaitForMscOML(", hDC, ", ", target_msc, ", ", divisor, ", ", remainder, ", ", ust, ", ", msc, ", ", sbc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglWaitForMscOML, "wglWaitForMscOML" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglWaitForMscOML) {
    ret = dispatchTableGlobal.wglWaitForMscOML(hDC, target_msc, divisor, remainder, ust, msc, sbc);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglWaitForSbcOML(HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  RTrace("wglWaitForSbcOML(", hDC, ", ", target_sbc, ", ", ust, ", ", msc, ", ", sbc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglWaitForSbcOML, "wglWaitForSbcOML" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglWaitForSbcOML) {
    ret = dispatchTableGlobal.wglWaitForSbcOML(hDC, target_sbc, ust, msc, sbc);
  }
  return ret;
}

/* WGL_I3D_digital_video_control */

REGAL_DECL BOOL REGAL_CALL wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int *piValue)
{
  RTrace("wglGetDigitalVideoParametersI3D(", hDC, ", ", iAttribute, ", ", piValue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetDigitalVideoParametersI3D, "wglGetDigitalVideoParametersI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetDigitalVideoParametersI3D) {
    ret = dispatchTableGlobal.wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int *piValue)
{
  RTrace("wglSetDigitalVideoParametersI3D(", hDC, ", ", iAttribute, ", ", piValue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSetDigitalVideoParametersI3D, "wglSetDigitalVideoParametersI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSetDigitalVideoParametersI3D) {
    ret = dispatchTableGlobal.wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
  }
  return ret;
}

/* WGL_I3D_gamma */

REGAL_DECL BOOL REGAL_CALL wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int *piValue)
{
  RTrace("wglGetGammaTableParametersI3D(", hDC, ", ", iAttribute, ", ", piValue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetGammaTableParametersI3D, "wglGetGammaTableParametersI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetGammaTableParametersI3D) {
    ret = dispatchTableGlobal.wglGetGammaTableParametersI3D(hDC, iAttribute, piValue);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int *piValue)
{
  RTrace("wglSetGammaTableParametersI3D(", hDC, ", ", iAttribute, ", ", piValue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSetGammaTableParametersI3D, "wglSetGammaTableParametersI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSetGammaTableParametersI3D) {
    ret = dispatchTableGlobal.wglSetGammaTableParametersI3D(hDC, iAttribute, piValue);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)
{
  RTrace("wglGetGammaTableI3D(", hDC, ", ", iEntries, ", ", puRed, ", ", puGreen, ", ", puBlue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetGammaTableI3D, "wglGetGammaTableI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetGammaTableI3D) {
    ret = dispatchTableGlobal.wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)
{
  RTrace("wglSetGammaTableI3D(", hDC, ", ", iEntries, ", ", puRed, ", ", puGreen, ", ", puBlue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSetGammaTableI3D, "wglSetGammaTableI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSetGammaTableI3D) {
    ret = dispatchTableGlobal.wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
  }
  return ret;
}

/* WGL_I3D_genlock */

REGAL_DECL BOOL REGAL_CALL wglEnableGenlockI3D(HDC hDC)
{
  RTrace("wglEnableGenlockI3D(", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglEnableGenlockI3D, "wglEnableGenlockI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglEnableGenlockI3D) {
    ret = dispatchTableGlobal.wglEnableGenlockI3D(hDC);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDisableGenlockI3D(HDC hDC)
{
  RTrace("wglDisableGenlockI3D(", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDisableGenlockI3D, "wglDisableGenlockI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDisableGenlockI3D) {
    ret = dispatchTableGlobal.wglDisableGenlockI3D(hDC);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglIsEnabledGenlockI3D(HDC hDC, BOOL *pFlag)
{
  RTrace("wglIsEnabledGenlockI3D(", hDC, ", ", pFlag, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglIsEnabledGenlockI3D, "wglIsEnabledGenlockI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglIsEnabledGenlockI3D) {
    ret = dispatchTableGlobal.wglIsEnabledGenlockI3D(hDC, pFlag);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGenlockSourceI3D(HDC hDC, UINT uSource)
{
  RTrace("wglGenlockSourceI3D(", hDC, ", ", uSource, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGenlockSourceI3D, "wglGenlockSourceI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGenlockSourceI3D) {
    ret = dispatchTableGlobal.wglGenlockSourceI3D(hDC, uSource);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetGenlockSourceI3D(HDC hDC, UINT *uSource)
{
  RTrace("wglGetGenlockSourceI3D(", hDC, ", ", uSource, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetGenlockSourceI3D, "wglGetGenlockSourceI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetGenlockSourceI3D) {
    ret = dispatchTableGlobal.wglGetGenlockSourceI3D(hDC, uSource);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge)
{
  RTrace("wglGenlockSourceEdgeI3D(", hDC, ", ", uEdge, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGenlockSourceEdgeI3D, "wglGenlockSourceEdgeI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGenlockSourceEdgeI3D) {
    ret = dispatchTableGlobal.wglGenlockSourceEdgeI3D(hDC, uEdge);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetGenlockSourceEdgeI3D(HDC hDC, UINT *uEdge)
{
  RTrace("wglGetGenlockSourceEdgeI3D(", hDC, ", ", uEdge, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetGenlockSourceEdgeI3D, "wglGetGenlockSourceEdgeI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetGenlockSourceEdgeI3D) {
    ret = dispatchTableGlobal.wglGetGenlockSourceEdgeI3D(hDC, uEdge);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGenlockSampleRateI3D(HDC hDC, UINT uRate)
{
  RTrace("wglGenlockSampleRateI3D(", hDC, ", ", uRate, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGenlockSampleRateI3D, "wglGenlockSampleRateI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGenlockSampleRateI3D) {
    ret = dispatchTableGlobal.wglGenlockSampleRateI3D(hDC, uRate);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetGenlockSampleRateI3D(HDC hDC, UINT *uRate)
{
  RTrace("wglGetGenlockSampleRateI3D(", hDC, ", ", uRate, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetGenlockSampleRateI3D, "wglGetGenlockSampleRateI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetGenlockSampleRateI3D) {
    ret = dispatchTableGlobal.wglGetGenlockSampleRateI3D(hDC, uRate);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay)
{
  RTrace("wglGenlockSourceDelayI3D(", hDC, ", ", uDelay, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGenlockSourceDelayI3D, "wglGenlockSourceDelayI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGenlockSourceDelayI3D) {
    ret = dispatchTableGlobal.wglGenlockSourceDelayI3D(hDC, uDelay);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetGenlockSourceDelayI3D(HDC hDC, UINT *uDelay)
{
  RTrace("wglGetGenlockSourceDelayI3D(", hDC, ", ", uDelay, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetGenlockSourceDelayI3D, "wglGetGenlockSourceDelayI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetGenlockSourceDelayI3D) {
    ret = dispatchTableGlobal.wglGetGenlockSourceDelayI3D(hDC, uDelay);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)
{
  RTrace("wglQueryGenlockMaxSourceDelayI3D(", hDC, ", ", uMaxLineDelay, ", ", uMaxPixelDelay, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryGenlockMaxSourceDelayI3D, "wglQueryGenlockMaxSourceDelayI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryGenlockMaxSourceDelayI3D) {
    ret = dispatchTableGlobal.wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay);
  }
  return ret;
}

/* WGL_I3D_image_buffer */

REGAL_DECL LPVOID REGAL_CALL wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags)
{
  RTrace("wglCreateImageBufferI3D(", hDC, ", ", dwSize, ", ", uFlags, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateImageBufferI3D, "wglCreateImageBufferI3D" );
    initialized = true;
  }
  LPVOID  ret = (LPVOID )0;
  if (dispatchTableGlobal.wglCreateImageBufferI3D) {
    ret = dispatchTableGlobal.wglCreateImageBufferI3D(hDC, dwSize, uFlags);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress)
{
  RTrace("wglDestroyImageBufferI3D(", hDC, ", ", pAddress, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDestroyImageBufferI3D, "wglDestroyImageBufferI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDestroyImageBufferI3D) {
    ret = dispatchTableGlobal.wglDestroyImageBufferI3D(hDC, pAddress);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)
{
  RTrace("wglAssociateImageBufferEventsI3D(", hDC, ", ", pEvent, ", ", pAddress, ", ", pSize, ", ", count, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglAssociateImageBufferEventsI3D, "wglAssociateImageBufferEventsI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglAssociateImageBufferEventsI3D) {
    ret = dispatchTableGlobal.wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID *pAddress, UINT count)
{
  RTrace("wglReleaseImageBufferEventsI3D(", hDC, ", ", pAddress, ", ", count, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglReleaseImageBufferEventsI3D, "wglReleaseImageBufferEventsI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglReleaseImageBufferEventsI3D) {
    ret = dispatchTableGlobal.wglReleaseImageBufferEventsI3D(hDC, pAddress, count);
  }
  return ret;
}

/* WGL_I3D_swap_frame_lock */

REGAL_DECL BOOL REGAL_CALL wglEnableFrameLockI3D(void)
{
  RTrace("wglEnableFrameLockI3D()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglEnableFrameLockI3D, "wglEnableFrameLockI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglEnableFrameLockI3D) {
    ret = dispatchTableGlobal.wglEnableFrameLockI3D();
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDisableFrameLockI3D(void)
{
  RTrace("wglDisableFrameLockI3D()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDisableFrameLockI3D, "wglDisableFrameLockI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDisableFrameLockI3D) {
    ret = dispatchTableGlobal.wglDisableFrameLockI3D();
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglIsEnabledFrameLockI3D(BOOL *pFlag)
{
  RTrace("wglIsEnabledFrameLockI3D(", pFlag, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglIsEnabledFrameLockI3D, "wglIsEnabledFrameLockI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglIsEnabledFrameLockI3D) {
    ret = dispatchTableGlobal.wglIsEnabledFrameLockI3D(pFlag);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryFrameLockMasterI3D(BOOL *pFlag)
{
  RTrace("wglQueryFrameLockMasterI3D(", pFlag, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryFrameLockMasterI3D, "wglQueryFrameLockMasterI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryFrameLockMasterI3D) {
    ret = dispatchTableGlobal.wglQueryFrameLockMasterI3D(pFlag);
  }
  return ret;
}

/* WGL_I3D_swap_frame_usage */

REGAL_DECL BOOL REGAL_CALL wglGetFrameUsageI3D(float *pUsage)
{
  RTrace("wglGetFrameUsageI3D(", pUsage, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetFrameUsageI3D, "wglGetFrameUsageI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetFrameUsageI3D) {
    ret = dispatchTableGlobal.wglGetFrameUsageI3D(pUsage);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglBeginFrameTrackingI3D(void)
{
  RTrace("wglBeginFrameTrackingI3D()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglBeginFrameTrackingI3D, "wglBeginFrameTrackingI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglBeginFrameTrackingI3D) {
    ret = dispatchTableGlobal.wglBeginFrameTrackingI3D();
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglEndFrameTrackingI3D(void)
{
  RTrace("wglEndFrameTrackingI3D()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglEndFrameTrackingI3D, "wglEndFrameTrackingI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglEndFrameTrackingI3D) {
    ret = dispatchTableGlobal.wglEndFrameTrackingI3D();
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryFrameTrackingI3D(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)
{
  RTrace("wglQueryFrameTrackingI3D(", pFrameCount, ", ", pMissedFrames, ", ", pLastMissedUsage, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryFrameTrackingI3D, "wglQueryFrameTrackingI3D" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryFrameTrackingI3D) {
    ret = dispatchTableGlobal.wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage);
  }
  return ret;
}

/* WGL_3DL_stereo_control */

REGAL_DECL BOOL REGAL_CALL wglSetStereoEmitterState3DL(HDC hDC, UINT uState)
{
  RTrace("wglSetStereoEmitterState3DL(", hDC, ", ", uState, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSetStereoEmitterState3DL, "wglSetStereoEmitterState3DL" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSetStereoEmitterState3DL) {
    ret = dispatchTableGlobal.wglSetStereoEmitterState3DL(hDC, uState);
  }
  return ret;
}

/* WGL_NV_present_video */

REGAL_DECL int REGAL_CALL wglEnumerateVideoDevicesNV(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)
{
  RTrace("wglEnumerateVideoDevicesNV(", hDC, ", ", phDeviceList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglEnumerateVideoDevicesNV, "wglEnumerateVideoDevicesNV" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.wglEnumerateVideoDevicesNV) {
    ret = dispatchTableGlobal.wglEnumerateVideoDevicesNV(hDC, phDeviceList);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglBindVideoDeviceNV(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)
{
  RTrace("wglBindVideoDeviceNV(", hDC, ", ", uVideoSlot, ", ", hVideoDevice, ", ", piAttribList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglBindVideoDeviceNV, "wglBindVideoDeviceNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglBindVideoDeviceNV) {
    ret = dispatchTableGlobal.wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryCurrentContextNV(int iAttribute, int *piValue)
{
  RTrace("wglQueryCurrentContextNV(", iAttribute, ", ", piValue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryCurrentContextNV, "wglQueryCurrentContextNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryCurrentContextNV) {
    ret = dispatchTableGlobal.wglQueryCurrentContextNV(iAttribute, piValue);
  }
  return ret;
}

/* WGL_NV_video_output */

REGAL_DECL BOOL REGAL_CALL wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)
{
  RTrace("wglGetVideoDeviceNV(", hDC, ", ", numDevices, ", ", hVideoDevice, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetVideoDeviceNV, "wglGetVideoDeviceNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetVideoDeviceNV) {
    ret = dispatchTableGlobal.wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice)
{
  RTrace("wglReleaseVideoDeviceNV(", hVideoDevice, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglReleaseVideoDeviceNV, "wglReleaseVideoDeviceNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglReleaseVideoDeviceNV) {
    ret = dispatchTableGlobal.wglReleaseVideoDeviceNV(hVideoDevice);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  RTrace("wglBindVideoImageNV(", hVideoDevice, ", ", hPbuffer, ", ", iVideoBuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglBindVideoImageNV, "wglBindVideoImageNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglBindVideoImageNV) {
    ret = dispatchTableGlobal.wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  RTrace("wglReleaseVideoImageNV(", hPbuffer, ", ", iVideoBuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglReleaseVideoImageNV, "wglReleaseVideoImageNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglReleaseVideoImageNV) {
    ret = dispatchTableGlobal.wglReleaseVideoImageNV(hPbuffer, iVideoBuffer);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)
{
  RTrace("wglSendPbufferToVideoNV(", hPbuffer, ", ", iBufferType, ", ", pulCounterPbuffer, ", ", bBlock, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglSendPbufferToVideoNV, "wglSendPbufferToVideoNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglSendPbufferToVideoNV) {
    ret = dispatchTableGlobal.wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
{
  RTrace("wglGetVideoInfoNV(", hpVideoDevice, ", ", pulCounterOutputPbuffer, ", ", pulCounterOutputVideo, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetVideoInfoNV, "wglGetVideoInfoNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglGetVideoInfoNV) {
    ret = dispatchTableGlobal.wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  return ret;
}

/* WGL_NV_swap_group */

REGAL_DECL BOOL REGAL_CALL wglJoinSwapGroupNV(HDC hDC, GLuint group)
{
  RTrace("wglJoinSwapGroupNV(", hDC, ", ", group, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglJoinSwapGroupNV, "wglJoinSwapGroupNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglJoinSwapGroupNV) {
    ret = dispatchTableGlobal.wglJoinSwapGroupNV(hDC, group);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglBindSwapBarrierNV(GLuint group, GLuint barrier)
{
  RTrace("wglBindSwapBarrierNV(", group, ", ", barrier, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglBindSwapBarrierNV, "wglBindSwapBarrierNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglBindSwapBarrierNV) {
    ret = dispatchTableGlobal.wglBindSwapBarrierNV(group, barrier);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQuerySwapGroupNV(HDC hDC, GLuint *group, GLuint *barrier)
{
  RTrace("wglQuerySwapGroupNV(", hDC, ", ", group, ", ", barrier, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQuerySwapGroupNV, "wglQuerySwapGroupNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQuerySwapGroupNV) {
    ret = dispatchTableGlobal.wglQuerySwapGroupNV(hDC, group, barrier);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryMaxSwapGroupsNV(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)
{
  RTrace("wglQueryMaxSwapGroupsNV(", hDC, ", ", maxGroups, ", ", maxBarriers, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryMaxSwapGroupsNV, "wglQueryMaxSwapGroupsNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryMaxSwapGroupsNV) {
    ret = dispatchTableGlobal.wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryFrameCountNV(HDC hDC, GLuint *count)
{
  RTrace("wglQueryFrameCountNV(", hDC, ", ", count, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryFrameCountNV, "wglQueryFrameCountNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryFrameCountNV) {
    ret = dispatchTableGlobal.wglQueryFrameCountNV(hDC, count);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglResetFrameCountNV(HDC hDC)
{
  RTrace("wglResetFrameCountNV(", hDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglResetFrameCountNV, "wglResetFrameCountNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglResetFrameCountNV) {
    ret = dispatchTableGlobal.wglResetFrameCountNV(hDC);
  }
  return ret;
}

/* WGL_NV_gpu_affinity */

REGAL_DECL BOOL REGAL_CALL wglEnumGpusNV(UINT iGpuIndex, HGPUNV *phGpu)
{
  RTrace("wglEnumGpusNV(", iGpuIndex, ", ", phGpu, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglEnumGpusNV, "wglEnumGpusNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglEnumGpusNV) {
    ret = dispatchTableGlobal.wglEnumGpusNV(iGpuIndex, phGpu);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
{
  RTrace("wglEnumGpuDevicesNV(", hGpu, ", ", iDeviceIndex, ", ", lpGpuDevice, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglEnumGpuDevicesNV, "wglEnumGpuDevicesNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglEnumGpuDevicesNV) {
    ret = dispatchTableGlobal.wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice);
  }
  return ret;
}

REGAL_DECL HDC REGAL_CALL wglCreateAffinityDCNV(const HGPUNV *phGpuList)
{
  RTrace("wglCreateAffinityDCNV(", phGpuList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateAffinityDCNV, "wglCreateAffinityDCNV" );
    initialized = true;
  }
  HDC  ret = (HDC )0;
  if (dispatchTableGlobal.wglCreateAffinityDCNV) {
    ret = dispatchTableGlobal.wglCreateAffinityDCNV(phGpuList);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)
{
  RTrace("wglEnumGpusFromAffinityDCNV(", hAffinityDC, ", ", iGpuIndex, ", ", hGpu, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglEnumGpusFromAffinityDCNV, "wglEnumGpusFromAffinityDCNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglEnumGpusFromAffinityDCNV) {
    ret = dispatchTableGlobal.wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDeleteDCNV(HDC hAffinityDC)
{
  RTrace("wglDeleteDCNV(", hAffinityDC, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDeleteDCNV, "wglDeleteDCNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDeleteDCNV) {
    ret = dispatchTableGlobal.wglDeleteDCNV(hAffinityDC);
  }
  return ret;
}

/* WGL_AMD_gpu_association */

REGAL_DECL UINT REGAL_CALL wglGetGPUIDsAMD(UINT maxCount, UINT *ids)
{
  RTrace("wglGetGPUIDsAMD(", maxCount, ", ", ids, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetGPUIDsAMD, "wglGetGPUIDsAMD" );
    initialized = true;
  }
  UINT  ret = (UINT )0;
  if (dispatchTableGlobal.wglGetGPUIDsAMD) {
    ret = dispatchTableGlobal.wglGetGPUIDsAMD(maxCount, ids);
  }
  return ret;
}

REGAL_DECL INT REGAL_CALL wglGetGPUInfoAMD(UINT id, int property, GLenum dataType, UINT size, void *data)
{
  RTrace("wglGetGPUInfoAMD(", id, ", ", property, ", ", toString(dataType), ", ", size, ", ", data, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetGPUInfoAMD, "wglGetGPUInfoAMD" );
    initialized = true;
  }
  INT  ret = (INT )0;
  if (dispatchTableGlobal.wglGetGPUInfoAMD) {
    ret = dispatchTableGlobal.wglGetGPUInfoAMD(id, property, dataType, size, data);
  }
  return ret;
}

REGAL_DECL UINT REGAL_CALL wglGetContextGPUIDAMD(HGLRC hglrc)
{
  RTrace("wglGetContextGPUIDAMD(", hglrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetContextGPUIDAMD, "wglGetContextGPUIDAMD" );
    initialized = true;
  }
  UINT  ret = (UINT )0;
  if (dispatchTableGlobal.wglGetContextGPUIDAMD) {
    ret = dispatchTableGlobal.wglGetContextGPUIDAMD(hglrc);
  }
  return ret;
}

REGAL_DECL HGLRC REGAL_CALL wglCreateAssociatedContextAMD(UINT id)
{
  RTrace("wglCreateAssociatedContextAMD(", id, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateAssociatedContextAMD, "wglCreateAssociatedContextAMD" );
    initialized = true;
  }
  HGLRC  ret = (HGLRC )0;
  if (dispatchTableGlobal.wglCreateAssociatedContextAMD) {
    ret = dispatchTableGlobal.wglCreateAssociatedContextAMD(id);
  }
  return ret;
}

REGAL_DECL HGLRC REGAL_CALL wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int *attribList)
{
  RTrace("wglCreateAssociatedContextAttribsAMD(", id, ", ", hShareContext, ", ", attribList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCreateAssociatedContextAttribsAMD, "wglCreateAssociatedContextAttribsAMD" );
    initialized = true;
  }
  HGLRC  ret = (HGLRC )0;
  if (dispatchTableGlobal.wglCreateAssociatedContextAttribsAMD) {
    ret = dispatchTableGlobal.wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglDeleteAssociatedContextAMD(HGLRC hglrc)
{
  RTrace("wglDeleteAssociatedContextAMD(", hglrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglDeleteAssociatedContextAMD, "wglDeleteAssociatedContextAMD" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglDeleteAssociatedContextAMD) {
    ret = dispatchTableGlobal.wglDeleteAssociatedContextAMD(hglrc);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglMakeAssociatedContextCurrentAMD(HGLRC hglrc)
{
  RTrace("wglMakeAssociatedContextCurrentAMD(", hglrc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglMakeAssociatedContextCurrentAMD, "wglMakeAssociatedContextCurrentAMD" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglMakeAssociatedContextCurrentAMD) {
    ret = dispatchTableGlobal.wglMakeAssociatedContextCurrentAMD(hglrc);
  }
  return ret;
}

REGAL_DECL HGLRC REGAL_CALL wglGetCurrentAssociatedContextAMD(void)
{
  RTrace("wglGetCurrentAssociatedContextAMD()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglGetCurrentAssociatedContextAMD, "wglGetCurrentAssociatedContextAMD" );
    initialized = true;
  }
  HGLRC  ret = (HGLRC )0;
  if (dispatchTableGlobal.wglGetCurrentAssociatedContextAMD) {
    ret = dispatchTableGlobal.wglGetCurrentAssociatedContextAMD();
  }
  return ret;
}

REGAL_DECL VOID REGAL_CALL wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RTrace("wglBlitContextFramebufferAMD(", dstCtx, ", ", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglBlitContextFramebufferAMD, "wglBlitContextFramebufferAMD" );
    initialized = true;
  }
  if (dispatchTableGlobal.wglBlitContextFramebufferAMD) {
    dispatchTableGlobal.wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

/* WGL_NV_video_capture */

REGAL_DECL BOOL REGAL_CALL wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
{
  RTrace("wglBindVideoCaptureDeviceNV(", uVideoSlot, ", ", hDevice, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglBindVideoCaptureDeviceNV, "wglBindVideoCaptureDeviceNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglBindVideoCaptureDeviceNV) {
    ret = dispatchTableGlobal.wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice);
  }
  return ret;
}

REGAL_DECL UINT REGAL_CALL wglEnumerateVideoCaptureDevicesNV(HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList)
{
  RTrace("wglEnumerateVideoCaptureDevicesNV(", hDC, ", ", phDeviceList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglEnumerateVideoCaptureDevicesNV, "wglEnumerateVideoCaptureDevicesNV" );
    initialized = true;
  }
  UINT  ret = (UINT )0;
  if (dispatchTableGlobal.wglEnumerateVideoCaptureDevicesNV) {
    ret = dispatchTableGlobal.wglEnumerateVideoCaptureDevicesNV(hDC, phDeviceList);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglLockVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
{
  RTrace("wglLockVideoCaptureDeviceNV(", hDC, ", ", hDevice, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglLockVideoCaptureDeviceNV, "wglLockVideoCaptureDeviceNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglLockVideoCaptureDeviceNV) {
    ret = dispatchTableGlobal.wglLockVideoCaptureDeviceNV(hDC, hDevice);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglQueryVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)
{
  RTrace("wglQueryVideoCaptureDeviceNV(", hDC, ", ", hDevice, ", ", iAttribute, ", ", piValue, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglQueryVideoCaptureDeviceNV, "wglQueryVideoCaptureDeviceNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglQueryVideoCaptureDeviceNV) {
    ret = dispatchTableGlobal.wglQueryVideoCaptureDeviceNV(hDC, hDevice, iAttribute, piValue);
  }
  return ret;
}

REGAL_DECL BOOL REGAL_CALL wglReleaseVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
{
  RTrace("wglReleaseVideoCaptureDeviceNV(", hDC, ", ", hDevice, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglReleaseVideoCaptureDeviceNV, "wglReleaseVideoCaptureDeviceNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglReleaseVideoCaptureDeviceNV) {
    ret = dispatchTableGlobal.wglReleaseVideoCaptureDeviceNV(hDC, hDevice);
  }
  return ret;
}

/* WGL_NV_copy_image */

REGAL_DECL BOOL REGAL_CALL wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  RTrace("wglCopyImageSubDataNV(", hSrcRC, ", ", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", hDstRC, ", ", dstName, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.wglCopyImageSubDataNV, "wglCopyImageSubDataNV" );
    initialized = true;
  }
  BOOL  ret = (BOOL )0;
  if (dispatchTableGlobal.wglCopyImageSubDataNV) {
    ret = dispatchTableGlobal.wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
  return ret;
}

#endif /* REGAL_SYS_WGL */
#if REGAL_SYS_GLX

/* GLX_VERSION_1_0 */

REGAL_DECL Bool REGAL_CALL glXQueryExtension(Display *dpy, int *errorBase, int *eventBase)
{
  RTrace("glXQueryExtension(", dpy, ", ", errorBase, ", ", eventBase, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryExtension, "glXQueryExtension" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXQueryExtension) {
    ret = dispatchTableGlobal.glXQueryExtension(dpy, errorBase, eventBase);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXQueryVersion(Display *dpy, int *major, int *minor)
{
  RTrace("glXQueryVersion(", dpy, ", ", major, ", ", minor, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryVersion, "glXQueryVersion" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXQueryVersion) {
    ret = dispatchTableGlobal.glXQueryVersion(dpy, major, minor);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXGetConfig(Display *dpy, XVisualInfo *vis, int attrib, int *value)
{
  RTrace("glXGetConfig(", dpy, ", ", vis, ", ", attrib, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetConfig, "glXGetConfig" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXGetConfig) {
    ret = dispatchTableGlobal.glXGetConfig(dpy, vis, attrib, value);
  }
  return ret;
}

REGAL_DECL XVisualInfo *REGAL_CALL glXChooseVisual(Display *dpy, int screen, int *attribList)
{
  RTrace("glXChooseVisual(", dpy, ", ", screen, ", ", attribList, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXChooseVisual, "glXChooseVisual" );
    initialized = true;
  }
  XVisualInfo * ret = NULL;
  if (dispatchTableGlobal.glXChooseVisual) {
    ret = dispatchTableGlobal.glXChooseVisual(dpy, screen, attribList);
  }
  return ret;
}

REGAL_DECL GLXPixmap REGAL_CALL glXCreateGLXPixmap(Display *dpy, XVisualInfo *vis, Pixmap pixmap)
{
  RTrace("glXCreateGLXPixmap(", dpy, ", ", vis, ", ", pixmap, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateGLXPixmap, "glXCreateGLXPixmap" );
    initialized = true;
  }
  GLXPixmap  ret = (GLXPixmap )0;
  if (dispatchTableGlobal.glXCreateGLXPixmap) {
    ret = dispatchTableGlobal.glXCreateGLXPixmap(dpy, vis, pixmap);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXDestroyGLXPixmap(Display *dpy, GLXPixmap pix)
{
  RTrace("glXDestroyGLXPixmap(", dpy, ", ", pix, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXDestroyGLXPixmap, "glXDestroyGLXPixmap" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXDestroyGLXPixmap) {
    dispatchTableGlobal.glXDestroyGLXPixmap(dpy, pix);
  }
}

REGAL_DECL GLXContext REGAL_CALL glXCreateContext(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
{
  RTrace("glXCreateContext(", dpy, ", ", vis, ", ", shareList, ", ", direct, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateContext, "glXCreateContext" );
    initialized = true;
  }
  GLXContext  ret = (GLXContext )0;
  if (dispatchTableGlobal.glXCreateContext) {
    ret = dispatchTableGlobal.glXCreateContext(dpy, vis, shareList, direct);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXDestroyContext(Display *dpy, GLXContext ctx)
{
  RTrace("glXDestroyContext(", dpy, ", ", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXDestroyContext, "glXDestroyContext" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXDestroyContext) {
    dispatchTableGlobal.glXDestroyContext(dpy, ctx);
  }
}

REGAL_DECL Bool REGAL_CALL glXIsDirect(Display *dpy, GLXContext ctx)
{
  RTrace("glXIsDirect(", dpy, ", ", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXIsDirect, "glXIsDirect" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXIsDirect) {
    ret = dispatchTableGlobal.glXIsDirect(dpy, ctx);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXCopyContext(Display *dpy, GLXContext src, GLXContext dst, unsigned long mask)
{
  RTrace("glXCopyContext(", dpy, ", ", src, ", ", dst, ", ", mask, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCopyContext, "glXCopyContext" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXCopyContext) {
    dispatchTableGlobal.glXCopyContext(dpy, src, dst, mask);
  }
}

REGAL_DECL Bool REGAL_CALL glXMakeCurrent(Display *dpy, GLXDrawable drawable, GLXContext ctx)
{
  RTrace("glXMakeCurrent(", dpy, ", ", drawable, ", ", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXMakeCurrent, "glXMakeCurrent" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXMakeCurrent) {
    ret = dispatchTableGlobal.glXMakeCurrent(dpy, drawable, ctx);
       RegalMakeCurrent( RegalSystemContext(ctx) );
  }
  return ret;
}

REGAL_DECL GLXContext REGAL_CALL glXGetCurrentContext(void)
{
  RTrace("glXGetCurrentContext()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetCurrentContext, "glXGetCurrentContext" );
    initialized = true;
  }
  GLXContext  ret = (GLXContext )0;
  if (dispatchTableGlobal.glXGetCurrentContext) {
    ret = dispatchTableGlobal.glXGetCurrentContext();
  }
  return ret;
}

REGAL_DECL GLXDrawable REGAL_CALL glXGetCurrentDrawable(void)
{
  RTrace("glXGetCurrentDrawable()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetCurrentDrawable, "glXGetCurrentDrawable" );
    initialized = true;
  }
  GLXDrawable  ret = (GLXDrawable )0;
  if (dispatchTableGlobal.glXGetCurrentDrawable) {
    ret = dispatchTableGlobal.glXGetCurrentDrawable();
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXWaitGL(void)
{
  RTrace("glXWaitGL()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXWaitGL, "glXWaitGL" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXWaitGL) {
    dispatchTableGlobal.glXWaitGL();
  }
}

REGAL_DECL void REGAL_CALL glXWaitX(void)
{
  RTrace("glXWaitX()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXWaitX, "glXWaitX" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXWaitX) {
    dispatchTableGlobal.glXWaitX();
  }
}

REGAL_DECL void REGAL_CALL glXSwapBuffers(Display *dpy, GLXDrawable drawable)
{
  RTrace("glXSwapBuffers(", dpy, ", ", drawable, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXSwapBuffers, "glXSwapBuffers" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXSwapBuffers) {
    dispatchTableGlobal.glXSwapBuffers(dpy, drawable);
  }
}

REGAL_DECL void REGAL_CALL glXUseXFont(Font font, int first, int count, int listBase)
{
  RTrace("glXUseXFont(", font, ", ", first, ", ", count, ", ", listBase, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXUseXFont, "glXUseXFont" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXUseXFont) {
    dispatchTableGlobal.glXUseXFont(font, first, count, listBase);
  }
}

/* GLX_VERSION_1_1 */

REGAL_DECL const char *REGAL_CALL glXQueryExtensionsString(Display *dpy, int screen)
{
  RTrace("glXQueryExtensionsString(", dpy, ", ", screen, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryExtensionsString, "glXQueryExtensionsString" );
    initialized = true;
  }
  const char * ret = NULL;
  if (dispatchTableGlobal.glXQueryExtensionsString) {
    ret = dispatchTableGlobal.glXQueryExtensionsString(dpy, screen);
  }
  return ret;
}

REGAL_DECL const char *REGAL_CALL glXGetClientString(Display *dpy, int name)
{
  RTrace("glXGetClientString(", dpy, ", ", name, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetClientString, "glXGetClientString" );
    initialized = true;
  }
  const char * ret = NULL;
  if (dispatchTableGlobal.glXGetClientString) {
    ret = dispatchTableGlobal.glXGetClientString(dpy, name);
  }
  return ret;
}

REGAL_DECL const char *REGAL_CALL glXQueryServerString(Display *dpy, int screen, int name)
{
  RTrace("glXQueryServerString(", dpy, ", ", screen, ", ", name, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryServerString, "glXQueryServerString" );
    initialized = true;
  }
  const char * ret = NULL;
  if (dispatchTableGlobal.glXQueryServerString) {
    ret = dispatchTableGlobal.glXQueryServerString(dpy, screen, name);
  }
  return ret;
}

/* GLX_VERSION_1_2 */

REGAL_DECL Display *REGAL_CALL glXGetCurrentDisplay(void)
{
  RTrace("glXGetCurrentDisplay()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetCurrentDisplay, "glXGetCurrentDisplay" );
    initialized = true;
  }
  Display * ret = NULL;
  if (dispatchTableGlobal.glXGetCurrentDisplay) {
    ret = dispatchTableGlobal.glXGetCurrentDisplay();
  }
  return ret;
}

/* GLX_VERSION_1_3 */

REGAL_DECL GLXFBConfig *REGAL_CALL glXChooseFBConfig(Display *dpy, int screen, const int *attrib_list, int *nelements)
{
  RTrace("glXChooseFBConfig(", dpy, ", ", screen, ", ", attrib_list, ", ", nelements, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXChooseFBConfig, "glXChooseFBConfig" );
    initialized = true;
  }
  GLXFBConfig * ret = NULL;
  if (dispatchTableGlobal.glXChooseFBConfig) {
    ret = dispatchTableGlobal.glXChooseFBConfig(dpy, screen, attrib_list, nelements);
  }
  return ret;
}

REGAL_DECL GLXFBConfig *REGAL_CALL glXGetFBConfigs(Display *dpy, int screen, int *nelements)
{
  RTrace("glXGetFBConfigs(", dpy, ", ", screen, ", ", nelements, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetFBConfigs, "glXGetFBConfigs" );
    initialized = true;
  }
  GLXFBConfig * ret = NULL;
  if (dispatchTableGlobal.glXGetFBConfigs) {
    ret = dispatchTableGlobal.glXGetFBConfigs(dpy, screen, nelements);
  }
  return ret;
}

REGAL_DECL XVisualInfo *REGAL_CALL glXGetVisualFromFBConfig(Display *dpy, GLXFBConfig config)
{
  RTrace("glXGetVisualFromFBConfig(", dpy, ", ", config, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetVisualFromFBConfig, "glXGetVisualFromFBConfig" );
    initialized = true;
  }
  XVisualInfo * ret = NULL;
  if (dispatchTableGlobal.glXGetVisualFromFBConfig) {
    ret = dispatchTableGlobal.glXGetVisualFromFBConfig(dpy, config);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXGetFBConfigAttrib(Display *dpy, GLXFBConfig config, int attribute, int *value)
{
  RTrace("glXGetFBConfigAttrib(", dpy, ", ", config, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetFBConfigAttrib, "glXGetFBConfigAttrib" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXGetFBConfigAttrib) {
    ret = dispatchTableGlobal.glXGetFBConfigAttrib(dpy, config, attribute, value);
  }
  return ret;
}

REGAL_DECL GLXWindow REGAL_CALL glXCreateWindow(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)
{
  RTrace("glXCreateWindow(", dpy, ", ", config, ", ", win, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateWindow, "glXCreateWindow" );
    initialized = true;
  }
  GLXWindow  ret = (GLXWindow )0;
  if (dispatchTableGlobal.glXCreateWindow) {
    ret = dispatchTableGlobal.glXCreateWindow(dpy, config, win, attrib_list);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXDestroyWindow(Display *dpy, GLXWindow win)
{
  RTrace("glXDestroyWindow(", dpy, ", ", win, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXDestroyWindow, "glXDestroyWindow" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXDestroyWindow) {
    dispatchTableGlobal.glXDestroyWindow(dpy, win);
  }
}

REGAL_DECL GLXPixmap REGAL_CALL glXCreatePixmap(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)
{
  RTrace("glXCreatePixmap(", dpy, ", ", config, ", ", pixmap, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreatePixmap, "glXCreatePixmap" );
    initialized = true;
  }
  GLXPixmap  ret = (GLXPixmap )0;
  if (dispatchTableGlobal.glXCreatePixmap) {
    ret = dispatchTableGlobal.glXCreatePixmap(dpy, config, pixmap, attrib_list);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXDestroyPixmap(Display *dpy, GLXPixmap pixmap)
{
  RTrace("glXDestroyPixmap(", dpy, ", ", pixmap, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXDestroyPixmap, "glXDestroyPixmap" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXDestroyPixmap) {
    dispatchTableGlobal.glXDestroyPixmap(dpy, pixmap);
  }
}

REGAL_DECL GLXPbuffer REGAL_CALL glXCreatePbuffer(Display *dpy, GLXFBConfig config, const int *attrib_list)
{
  RTrace("glXCreatePbuffer(", dpy, ", ", config, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreatePbuffer, "glXCreatePbuffer" );
    initialized = true;
  }
  GLXPbuffer  ret = (GLXPbuffer )0;
  if (dispatchTableGlobal.glXCreatePbuffer) {
    ret = dispatchTableGlobal.glXCreatePbuffer(dpy, config, attrib_list);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXDestroyPbuffer(Display *dpy, GLXPbuffer pbuf)
{
  RTrace("glXDestroyPbuffer(", dpy, ", ", pbuf, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXDestroyPbuffer, "glXDestroyPbuffer" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXDestroyPbuffer) {
    dispatchTableGlobal.glXDestroyPbuffer(dpy, pbuf);
  }
}

REGAL_DECL void REGAL_CALL glXQueryDrawable(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
{
  RTrace("glXQueryDrawable(", dpy, ", ", draw, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryDrawable, "glXQueryDrawable" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXQueryDrawable) {
    dispatchTableGlobal.glXQueryDrawable(dpy, draw, attribute, value);
  }
}

REGAL_DECL GLXContext REGAL_CALL glXCreateNewContext(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
  RTrace("glXCreateNewContext(", dpy, ", ", config, ", ", render_type, ", ", share_list, ", ", direct, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateNewContext, "glXCreateNewContext" );
    initialized = true;
  }
  GLXContext  ret = (GLXContext )0;
  if (dispatchTableGlobal.glXCreateNewContext) {
    ret = dispatchTableGlobal.glXCreateNewContext(dpy, config, render_type, share_list, direct);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXMakeContextCurrent(Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  RTrace("glXMakeContextCurrent(", display, ", ", draw, ", ", read, ", ", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXMakeContextCurrent, "glXMakeContextCurrent" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXMakeContextCurrent) {
    ret = dispatchTableGlobal.glXMakeContextCurrent(display, draw, read, ctx);
  }
  return ret;
}

REGAL_DECL GLXDrawable REGAL_CALL glXGetCurrentReadDrawable(void)
{
  RTrace("glXGetCurrentReadDrawable()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetCurrentReadDrawable, "glXGetCurrentReadDrawable" );
    initialized = true;
  }
  GLXDrawable  ret = (GLXDrawable )0;
  if (dispatchTableGlobal.glXGetCurrentReadDrawable) {
    ret = dispatchTableGlobal.glXGetCurrentReadDrawable();
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXQueryContext(Display *dpy, GLXContext ctx, int attribute, int *value)
{
  RTrace("glXQueryContext(", dpy, ", ", ctx, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryContext, "glXQueryContext" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXQueryContext) {
    ret = dispatchTableGlobal.glXQueryContext(dpy, ctx, attribute, value);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXSelectEvent(Display *dpy, GLXDrawable draw, unsigned long event_mask)
{
  RTrace("glXSelectEvent(", dpy, ", ", draw, ", ", event_mask, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXSelectEvent, "glXSelectEvent" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXSelectEvent) {
    dispatchTableGlobal.glXSelectEvent(dpy, draw, event_mask);
  }
}

REGAL_DECL void REGAL_CALL glXGetSelectedEvent(Display *dpy, GLXDrawable draw, unsigned long *event_mask)
{
  RTrace("glXGetSelectedEvent(", dpy, ", ", draw, ", ", event_mask, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetSelectedEvent, "glXGetSelectedEvent" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXGetSelectedEvent) {
    dispatchTableGlobal.glXGetSelectedEvent(dpy, draw, event_mask);
  }
}

/* GLX_VERSION_1_4 */

REGAL_DECL void *REGAL_CALL glXGetProcAddress(const GLubyte *procName)
{
  RTrace("glXGetProcAddress(", procName, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetProcAddress, "glXGetProcAddress" );
    initialized = true;
  }
  void * ret = NULL;
  ret = Lookup::gl_Lookup<void *>(reinterpret_cast<const char *>(procName));
  if (ret)
    return ret;
  ret = Lookup::glx_Lookup<void *>(reinterpret_cast<const char *>(procName));
  if (ret)
    return ret;
  if (dispatchTableGlobal.glXGetProcAddress) {
    ret = dispatchTableGlobal.glXGetProcAddress(procName);
  }
  return ret;
}

/* GLX_ARB_get_proc_address */

REGAL_DECL void *REGAL_CALL glXGetProcAddressARB(const GLubyte *procName)
{
  RTrace("glXGetProcAddressARB(", procName, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetProcAddressARB, "glXGetProcAddressARB" );
    initialized = true;
  }
  void * ret = NULL;
  ret = Lookup::gl_Lookup<void *>(reinterpret_cast<const char *>(procName));
  if (ret)
    return ret;
  ret = Lookup::glx_Lookup<void *>(reinterpret_cast<const char *>(procName));
  if (ret)
    return ret;
  if (dispatchTableGlobal.glXGetProcAddressARB) {
    ret = dispatchTableGlobal.glXGetProcAddressARB(procName);
  }
  return ret;
}

/* GLX_ARB_create_context */

REGAL_DECL GLXContext REGAL_CALL glXCreateContextAttribsARB(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
{
  RTrace("glXCreateContextAttribsARB(", dpy, ", ", config, ", ", share_context, ", ", direct, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateContextAttribsARB, "glXCreateContextAttribsARB" );
    initialized = true;
  }
  GLXContext  ret = (GLXContext )0;
  if (dispatchTableGlobal.glXCreateContextAttribsARB) {
    ret = dispatchTableGlobal.glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
  }
  return ret;
}

/* GLX_SGI_swap_control */

REGAL_DECL int REGAL_CALL glXSwapIntervalSGI(int interval)
{
  RTrace("glXSwapIntervalSGI(", interval, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXSwapIntervalSGI, "glXSwapIntervalSGI" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXSwapIntervalSGI) {
    ret = dispatchTableGlobal.glXSwapIntervalSGI(interval);
  }
  return ret;
}

/* GLX_SGI_video_sync */

REGAL_DECL int REGAL_CALL glXGetVideoSyncSGI(unsigned int *count)
{
  RTrace("glXGetVideoSyncSGI(", count, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetVideoSyncSGI, "glXGetVideoSyncSGI" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXGetVideoSyncSGI) {
    ret = dispatchTableGlobal.glXGetVideoSyncSGI(count);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *count)
{
  RTrace("glXWaitVideoSyncSGI(", divisor, ", ", remainder, ", ", count, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXWaitVideoSyncSGI, "glXWaitVideoSyncSGI" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXWaitVideoSyncSGI) {
    ret = dispatchTableGlobal.glXWaitVideoSyncSGI(divisor, remainder, count);
  }
  return ret;
}

/* GLX_SGI_make_current_read */

REGAL_DECL GLXDrawable REGAL_CALL glXGetCurrentReadDrawableSGI(void)
{
  RTrace("glXGetCurrentReadDrawableSGI()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetCurrentReadDrawableSGI, "glXGetCurrentReadDrawableSGI" );
    initialized = true;
  }
  GLXDrawable  ret = (GLXDrawable )0;
  if (dispatchTableGlobal.glXGetCurrentReadDrawableSGI) {
    ret = dispatchTableGlobal.glXGetCurrentReadDrawableSGI();
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXMakeCurrentReadSGI(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  RTrace("glXMakeCurrentReadSGI(", dpy, ", ", draw, ", ", read, ", ", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXMakeCurrentReadSGI, "glXMakeCurrentReadSGI" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXMakeCurrentReadSGI) {
    ret = dispatchTableGlobal.glXMakeCurrentReadSGI(dpy, draw, read, ctx);
  }
  return ret;
}

/* GLX_EXT_import_context */

REGAL_DECL void REGAL_CALL glXFreeContextEXT(Display *dpy, GLXContext context)
{
  RTrace("glXFreeContextEXT(", dpy, ", ", context, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXFreeContextEXT, "glXFreeContextEXT" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXFreeContextEXT) {
    dispatchTableGlobal.glXFreeContextEXT(dpy, context);
  }
}

REGAL_DECL GLXContextID REGAL_CALL glXGetContextIDEXT(const GLXContext context)
{
  RTrace("glXGetContextIDEXT(", context, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetContextIDEXT, "glXGetContextIDEXT" );
    initialized = true;
  }
  GLXContextID  ret = (GLXContextID )0;
  if (dispatchTableGlobal.glXGetContextIDEXT) {
    ret = dispatchTableGlobal.glXGetContextIDEXT(context);
  }
  return ret;
}

REGAL_DECL GLXContext REGAL_CALL glXImportContextEXT(Display *dpy, GLXContextID contextID)
{
  RTrace("glXImportContextEXT(", dpy, ", ", contextID, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXImportContextEXT, "glXImportContextEXT" );
    initialized = true;
  }
  GLXContext  ret = (GLXContext )0;
  if (dispatchTableGlobal.glXImportContextEXT) {
    ret = dispatchTableGlobal.glXImportContextEXT(dpy, contextID);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXQueryContextInfoEXT(Display *dpy, GLXContext context, int attribute, int *value)
{
  RTrace("glXQueryContextInfoEXT(", dpy, ", ", context, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryContextInfoEXT, "glXQueryContextInfoEXT" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXQueryContextInfoEXT) {
    ret = dispatchTableGlobal.glXQueryContextInfoEXT(dpy, context, attribute, value);
  }
  return ret;
}

/* GLX_SGIX_fbconfig */

REGAL_DECL GLXFBConfigSGIX *REGAL_CALL glXChooseFBConfigSGIX(Display *dpy, int screen, const int *attrib_list, int *nelements)
{
  RTrace("glXChooseFBConfigSGIX(", dpy, ", ", screen, ", ", attrib_list, ", ", nelements, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXChooseFBConfigSGIX, "glXChooseFBConfigSGIX" );
    initialized = true;
  }
  GLXFBConfigSGIX * ret = NULL;
  if (dispatchTableGlobal.glXChooseFBConfigSGIX) {
    ret = dispatchTableGlobal.glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements);
  }
  return ret;
}

REGAL_DECL GLXContext REGAL_CALL glXCreateContextWithConfigSGIX(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
  RTrace("glXCreateContextWithConfigSGIX(", dpy, ", ", config, ", ", render_type, ", ", share_list, ", ", direct, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateContextWithConfigSGIX, "glXCreateContextWithConfigSGIX" );
    initialized = true;
  }
  GLXContext  ret = (GLXContext )0;
  if (dispatchTableGlobal.glXCreateContextWithConfigSGIX) {
    ret = dispatchTableGlobal.glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct);
  }
  return ret;
}

REGAL_DECL GLXPixmap REGAL_CALL glXCreateGLXPixmapWithConfigSGIX(Display *dpy, GLXFBConfig config, Pixmap pixmap)
{
  RTrace("glXCreateGLXPixmapWithConfigSGIX(", dpy, ", ", config, ", ", pixmap, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateGLXPixmapWithConfigSGIX, "glXCreateGLXPixmapWithConfigSGIX" );
    initialized = true;
  }
  GLXPixmap  ret = (GLXPixmap )0;
  if (dispatchTableGlobal.glXCreateGLXPixmapWithConfigSGIX) {
    ret = dispatchTableGlobal.glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXGetFBConfigAttribSGIX(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)
{
  RTrace("glXGetFBConfigAttribSGIX(", dpy, ", ", config, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetFBConfigAttribSGIX, "glXGetFBConfigAttribSGIX" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXGetFBConfigAttribSGIX) {
    ret = dispatchTableGlobal.glXGetFBConfigAttribSGIX(dpy, config, attribute, value);
  }
  return ret;
}

REGAL_DECL GLXFBConfigSGIX REGAL_CALL glXGetFBConfigFromVisualSGIX(Display *dpy, XVisualInfo *vis)
{
  RTrace("glXGetFBConfigFromVisualSGIX(", dpy, ", ", vis, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetFBConfigFromVisualSGIX, "glXGetFBConfigFromVisualSGIX" );
    initialized = true;
  }
  GLXFBConfigSGIX  ret = (GLXFBConfigSGIX )0;
  if (dispatchTableGlobal.glXGetFBConfigFromVisualSGIX) {
    ret = dispatchTableGlobal.glXGetFBConfigFromVisualSGIX(dpy, vis);
  }
  return ret;
}

REGAL_DECL XVisualInfo *REGAL_CALL glXGetVisualFromFBConfigSGIX(Display *dpy, GLXFBConfig config)
{
  RTrace("glXGetVisualFromFBConfigSGIX(", dpy, ", ", config, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetVisualFromFBConfigSGIX, "glXGetVisualFromFBConfigSGIX" );
    initialized = true;
  }
  XVisualInfo * ret = NULL;
  if (dispatchTableGlobal.glXGetVisualFromFBConfigSGIX) {
    ret = dispatchTableGlobal.glXGetVisualFromFBConfigSGIX(dpy, config);
  }
  return ret;
}

/* GLX_SGIX_pbuffer */

REGAL_DECL GLXPbuffer REGAL_CALL glXCreateGLXPbufferSGIX(Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list)
{
  RTrace("glXCreateGLXPbufferSGIX(", dpy, ", ", config, ", ", width, ", ", height, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateGLXPbufferSGIX, "glXCreateGLXPbufferSGIX" );
    initialized = true;
  }
  GLXPbuffer  ret = (GLXPbuffer )0;
  if (dispatchTableGlobal.glXCreateGLXPbufferSGIX) {
    ret = dispatchTableGlobal.glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXDestroyGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf)
{
  RTrace("glXDestroyGLXPbufferSGIX(", dpy, ", ", pbuf, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXDestroyGLXPbufferSGIX, "glXDestroyGLXPbufferSGIX" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXDestroyGLXPbufferSGIX) {
    dispatchTableGlobal.glXDestroyGLXPbufferSGIX(dpy, pbuf);
  }
}

REGAL_DECL void REGAL_CALL glXGetSelectedEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long *mask)
{
  RTrace("glXGetSelectedEventSGIX(", dpy, ", ", drawable, ", ", mask, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetSelectedEventSGIX, "glXGetSelectedEventSGIX" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXGetSelectedEventSGIX) {
    dispatchTableGlobal.glXGetSelectedEventSGIX(dpy, drawable, mask);
  }
}

REGAL_DECL void REGAL_CALL glXQueryGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value)
{
  RTrace("glXQueryGLXPbufferSGIX(", dpy, ", ", pbuf, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryGLXPbufferSGIX, "glXQueryGLXPbufferSGIX" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXQueryGLXPbufferSGIX) {
    dispatchTableGlobal.glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value);
  }
}

REGAL_DECL void REGAL_CALL glXSelectEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long mask)
{
  RTrace("glXSelectEventSGIX(", dpy, ", ", drawable, ", ", mask, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXSelectEventSGIX, "glXSelectEventSGIX" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXSelectEventSGIX) {
    dispatchTableGlobal.glXSelectEventSGIX(dpy, drawable, mask);
  }
}

/* GLX_SGI_cushion */

REGAL_DECL void REGAL_CALL glXCushionSGI(Display *dpy, Window window, float cushion)
{
  RTrace("glXCushionSGI(", dpy, ", ", window, ", ", cushion, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCushionSGI, "glXCushionSGI" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXCushionSGI) {
    dispatchTableGlobal.glXCushionSGI(dpy, window, cushion);
  }
}

/* GLX_SGIX_video_resize */

REGAL_DECL int REGAL_CALL glXBindChannelToWindowSGIX(Display *display, int screen, int channel, Window window)
{
  RTrace("glXBindChannelToWindowSGIX(", display, ", ", screen, ", ", channel, ", ", window, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXBindChannelToWindowSGIX, "glXBindChannelToWindowSGIX" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXBindChannelToWindowSGIX) {
    ret = dispatchTableGlobal.glXBindChannelToWindowSGIX(display, screen, channel, window);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXChannelRectSGIX(Display *display, int screen, int channel, int x, int y, int w, int h)
{
  RTrace("glXChannelRectSGIX(", display, ", ", screen, ", ", channel, ", ", x, ", ", y, ", ", w, ", ", h, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXChannelRectSGIX, "glXChannelRectSGIX" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXChannelRectSGIX) {
    ret = dispatchTableGlobal.glXChannelRectSGIX(display, screen, channel, x, y, w, h);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXChannelRectSyncSGIX(Display *display, int screen, int channel, GLenum synctype)
{
  RTrace("glXChannelRectSyncSGIX(", display, ", ", screen, ", ", channel, ", ", toString(synctype), ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXChannelRectSyncSGIX, "glXChannelRectSyncSGIX" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXChannelRectSyncSGIX) {
    ret = dispatchTableGlobal.glXChannelRectSyncSGIX(display, screen, channel, synctype);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXQueryChannelDeltasSGIX(Display *display, int screen, int channel, int *x, int *y, int *w, int *h)
{
  RTrace("glXQueryChannelDeltasSGIX(", display, ", ", screen, ", ", channel, ", ", x, ", ", y, ", ", w, ", ", h, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryChannelDeltasSGIX, "glXQueryChannelDeltasSGIX" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXQueryChannelDeltasSGIX) {
    ret = dispatchTableGlobal.glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXQueryChannelRectSGIX(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)
{
  RTrace("glXQueryChannelRectSGIX(", display, ", ", screen, ", ", channel, ", ", dx, ", ", dy, ", ", dw, ", ", dh, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryChannelRectSGIX, "glXQueryChannelRectSGIX" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXQueryChannelRectSGIX) {
    ret = dispatchTableGlobal.glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh);
  }
  return ret;
}

/* GLX_SGIX_swap_group */

REGAL_DECL void REGAL_CALL glXJoinSwapGroupSGIX(Display *dpy, GLXDrawable drawable, GLXDrawable member)
{
  RTrace("glXJoinSwapGroupSGIX(", dpy, ", ", drawable, ", ", member, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXJoinSwapGroupSGIX, "glXJoinSwapGroupSGIX" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXJoinSwapGroupSGIX) {
    dispatchTableGlobal.glXJoinSwapGroupSGIX(dpy, drawable, member);
  }
}

/* GLX_SGIX_swap_barrier */

REGAL_DECL void REGAL_CALL glXBindSwapBarrierSGIX(Display *dpy, GLXDrawable drawable, int barrier)
{
  RTrace("glXBindSwapBarrierSGIX(", dpy, ", ", drawable, ", ", barrier, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXBindSwapBarrierSGIX, "glXBindSwapBarrierSGIX" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXBindSwapBarrierSGIX) {
    dispatchTableGlobal.glXBindSwapBarrierSGIX(dpy, drawable, barrier);
  }
}

REGAL_DECL Bool REGAL_CALL glXQueryMaxSwapBarriersSGIX(Display *dpy, int screen, int *max)
{
  RTrace("glXQueryMaxSwapBarriersSGIX(", dpy, ", ", screen, ", ", max, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryMaxSwapBarriersSGIX, "glXQueryMaxSwapBarriersSGIX" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXQueryMaxSwapBarriersSGIX) {
    ret = dispatchTableGlobal.glXQueryMaxSwapBarriersSGIX(dpy, screen, max);
  }
  return ret;
}

/* GLX_SUN_get_transparent_index */

REGAL_DECL Status REGAL_CALL glXGetTransparentIndexSUN(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex)
{
  RTrace("glXGetTransparentIndexSUN(", dpy, ", ", overlay, ", ", underlay, ", ", pTransparentIndex, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetTransparentIndexSUN, "glXGetTransparentIndexSUN" );
    initialized = true;
  }
  Status  ret = (Status )0;
  if (dispatchTableGlobal.glXGetTransparentIndexSUN) {
    ret = dispatchTableGlobal.glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex);
  }
  return ret;
}

/* GLX_NV_vertex_array_range */

REGAL_DECL void *REGAL_CALL glXAllocateMemoryNV(GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)
{
  RTrace("glXAllocateMemoryNV(", size, ", ", readFrequency, ", ", writeFrequency, ", ", priority, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXAllocateMemoryNV, "glXAllocateMemoryNV" );
    initialized = true;
  }
  void * ret = NULL;
  if (dispatchTableGlobal.glXAllocateMemoryNV) {
    ret = dispatchTableGlobal.glXAllocateMemoryNV(size, readFrequency, writeFrequency, priority);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL glXFreeMemoryNV(void *pointer)
{
  RTrace("glXFreeMemoryNV(", pointer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXFreeMemoryNV, "glXFreeMemoryNV" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXFreeMemoryNV) {
    dispatchTableGlobal.glXFreeMemoryNV(pointer);
  }
}

/* GLX_MESA_copy_sub_buffer */

REGAL_DECL void REGAL_CALL glXCopySubBufferMESA(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)
{
  RTrace("glXCopySubBufferMESA(", dpy, ", ", drawable, ", ", x, ", ", y, ", ", width, ", ", height, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCopySubBufferMESA, "glXCopySubBufferMESA" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXCopySubBufferMESA) {
    dispatchTableGlobal.glXCopySubBufferMESA(dpy, drawable, x, y, width, height);
  }
}

/* GLX_MESA_pixmap_colormap */

REGAL_DECL GLXPixmap REGAL_CALL glXCreateGLXPixmapMESA(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)
{
  RTrace("glXCreateGLXPixmapMESA(", dpy, ", ", visual, ", ", pixmap, ", ", cmap, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCreateGLXPixmapMESA, "glXCreateGLXPixmapMESA" );
    initialized = true;
  }
  GLXPixmap  ret = (GLXPixmap )0;
  if (dispatchTableGlobal.glXCreateGLXPixmapMESA) {
    ret = dispatchTableGlobal.glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap);
  }
  return ret;
}

/* GLX_MESA_release_buffers */

REGAL_DECL Bool REGAL_CALL glXReleaseBuffersMESA(Display *dpy, GLXDrawable d)
{
  RTrace("glXReleaseBuffersMESA(", dpy, ", ", d, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXReleaseBuffersMESA, "glXReleaseBuffersMESA" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXReleaseBuffersMESA) {
    ret = dispatchTableGlobal.glXReleaseBuffersMESA(dpy, d);
  }
  return ret;
}

/* GLX_MESA_set_3dfx_mode */

REGAL_DECL GLboolean REGAL_CALL glXSet3DfxModeMESA(GLint mode)
{
  RTrace("glXSet3DfxModeMESA(", mode, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXSet3DfxModeMESA, "glXSet3DfxModeMESA" );
    initialized = true;
  }
  GLboolean  ret = (GLboolean )0;
  if (dispatchTableGlobal.glXSet3DfxModeMESA) {
    ret = dispatchTableGlobal.glXSet3DfxModeMESA(mode);
  }
  return ret;
}

/* GLX_OML_sync_control */

REGAL_DECL Bool REGAL_CALL glXGetMscRateOML(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)
{
  RTrace("glXGetMscRateOML(", dpy, ", ", drawable, ", ", numerator, ", ", denominator, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetMscRateOML, "glXGetMscRateOML" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXGetMscRateOML) {
    ret = dispatchTableGlobal.glXGetMscRateOML(dpy, drawable, numerator, denominator);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXGetSyncValuesOML(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  RTrace("glXGetSyncValuesOML(", dpy, ", ", drawable, ", ", ust, ", ", msc, ", ", sbc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetSyncValuesOML, "glXGetSyncValuesOML" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXGetSyncValuesOML) {
    ret = dispatchTableGlobal.glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc);
  }
  return ret;
}

REGAL_DECL int64_t REGAL_CALL glXSwapBuffersMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
{
  RTrace("glXSwapBuffersMscOML(", dpy, ", ", drawable, ", ", target_msc, ", ", divisor, ", ", remainder, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXSwapBuffersMscOML, "glXSwapBuffersMscOML" );
    initialized = true;
  }
  int64_t  ret = (int64_t )0;
  if (dispatchTableGlobal.glXSwapBuffersMscOML) {
    ret = dispatchTableGlobal.glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXWaitForMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  RTrace("glXWaitForMscOML(", dpy, ", ", drawable, ", ", target_msc, ", ", divisor, ", ", remainder, ", ", ust, ", ", msc, ", ", sbc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXWaitForMscOML, "glXWaitForMscOML" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXWaitForMscOML) {
    ret = dispatchTableGlobal.glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXWaitForSbcOML(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  RTrace("glXWaitForSbcOML(", dpy, ", ", drawable, ", ", target_sbc, ", ", ust, ", ", msc, ", ", sbc, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXWaitForSbcOML, "glXWaitForSbcOML" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXWaitForSbcOML) {
    ret = dispatchTableGlobal.glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc);
  }
  return ret;
}

/* GLX_MESA_agp_offset */

REGAL_DECL unsigned int REGAL_CALL glXGetAGPOffsetMESA(const void *pointer)
{
  RTrace("glXGetAGPOffsetMESA(", pointer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetAGPOffsetMESA, "glXGetAGPOffsetMESA" );
    initialized = true;
  }
  unsigned int  ret = (unsigned int )0;
  if (dispatchTableGlobal.glXGetAGPOffsetMESA) {
    ret = dispatchTableGlobal.glXGetAGPOffsetMESA(pointer);
  }
  return ret;
}

/* GLX_EXT_texture_from_pixmap */

REGAL_DECL void REGAL_CALL glXBindTexImageEXT(Display *display, GLXDrawable drawable, int buffer, const int *attrib_list)
{
  RTrace("glXBindTexImageEXT(", display, ", ", drawable, ", ", buffer, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXBindTexImageEXT, "glXBindTexImageEXT" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXBindTexImageEXT) {
    dispatchTableGlobal.glXBindTexImageEXT(display, drawable, buffer, attrib_list);
  }
}

REGAL_DECL void REGAL_CALL glXReleaseTexImageEXT(Display *display, GLXDrawable drawable, int buffer)
{
  RTrace("glXReleaseTexImageEXT(", display, ", ", drawable, ", ", buffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXReleaseTexImageEXT, "glXReleaseTexImageEXT" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXReleaseTexImageEXT) {
    dispatchTableGlobal.glXReleaseTexImageEXT(display, drawable, buffer);
  }
}

/* GLX_NV_present_video */

REGAL_DECL int REGAL_CALL glXBindVideoDeviceNV(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list)
{
  RTrace("glXBindVideoDeviceNV(", dpy, ", ", video_slot, ", ", video_device, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXBindVideoDeviceNV, "glXBindVideoDeviceNV" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXBindVideoDeviceNV) {
    ret = dispatchTableGlobal.glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list);
  }
  return ret;
}

REGAL_DECL unsigned int *REGAL_CALL glXEnumerateVideoDevicesNV(Display *dpy, int screen, int *nelements)
{
  RTrace("glXEnumerateVideoDevicesNV(", dpy, ", ", screen, ", ", nelements, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXEnumerateVideoDevicesNV, "glXEnumerateVideoDevicesNV" );
    initialized = true;
  }
  unsigned int * ret = NULL;
  if (dispatchTableGlobal.glXEnumerateVideoDevicesNV) {
    ret = dispatchTableGlobal.glXEnumerateVideoDevicesNV(dpy, screen, nelements);
  }
  return ret;
}

/* GLX_NV_video_output */

REGAL_DECL int REGAL_CALL glXBindVideoImageNV(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
{
  RTrace("glXBindVideoImageNV(", dpy, ", ", VideoDevice, ", ", pbuf, ", ", iVideoBuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXBindVideoImageNV, "glXBindVideoImageNV" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXBindVideoImageNV) {
    ret = dispatchTableGlobal.glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXGetVideoDeviceNV(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)
{
  RTrace("glXGetVideoDeviceNV(", dpy, ", ", screen, ", ", numVideoDevices, ", ", pVideoDevice, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetVideoDeviceNV, "glXGetVideoDeviceNV" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXGetVideoDeviceNV) {
    ret = dispatchTableGlobal.glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXGetVideoInfoNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
{
  RTrace("glXGetVideoInfoNV(", dpy, ", ", screen, ", ", VideoDevice, ", ", pulCounterOutputPbuffer, ", ", pulCounterOutputVideo, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetVideoInfoNV, "glXGetVideoInfoNV" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXGetVideoInfoNV) {
    ret = dispatchTableGlobal.glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXReleaseVideoDeviceNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)
{
  RTrace("glXReleaseVideoDeviceNV(", dpy, ", ", screen, ", ", VideoDevice, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXReleaseVideoDeviceNV, "glXReleaseVideoDeviceNV" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXReleaseVideoDeviceNV) {
    ret = dispatchTableGlobal.glXReleaseVideoDeviceNV(dpy, screen, VideoDevice);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXReleaseVideoImageNV(Display *dpy, GLXPbuffer pbuf)
{
  RTrace("glXReleaseVideoImageNV(", dpy, ", ", pbuf, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXReleaseVideoImageNV, "glXReleaseVideoImageNV" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXReleaseVideoImageNV) {
    ret = dispatchTableGlobal.glXReleaseVideoImageNV(dpy, pbuf);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXSendPbufferToVideoNV(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)
{
  RTrace("glXSendPbufferToVideoNV(", dpy, ", ", pbuf, ", ", iBufferType, ", ", pulCounterPbuffer, ", ", bBlock, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXSendPbufferToVideoNV, "glXSendPbufferToVideoNV" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXSendPbufferToVideoNV) {
    ret = dispatchTableGlobal.glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
  }
  return ret;
}

/* GLX_NV_swap_group */

REGAL_DECL Bool REGAL_CALL glXBindSwapBarrierNV(Display *dpy, GLuint group, GLuint barrier)
{
  RTrace("glXBindSwapBarrierNV(", dpy, ", ", group, ", ", barrier, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXBindSwapBarrierNV, "glXBindSwapBarrierNV" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXBindSwapBarrierNV) {
    ret = dispatchTableGlobal.glXBindSwapBarrierNV(dpy, group, barrier);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXJoinSwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint group)
{
  RTrace("glXJoinSwapGroupNV(", dpy, ", ", drawable, ", ", group, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXJoinSwapGroupNV, "glXJoinSwapGroupNV" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXJoinSwapGroupNV) {
    ret = dispatchTableGlobal.glXJoinSwapGroupNV(dpy, drawable, group);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXQueryFrameCountNV(Display *dpy, int screen, GLuint *count)
{
  RTrace("glXQueryFrameCountNV(", dpy, ", ", screen, ", ", count, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryFrameCountNV, "glXQueryFrameCountNV" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXQueryFrameCountNV) {
    ret = dispatchTableGlobal.glXQueryFrameCountNV(dpy, screen, count);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXQueryMaxSwapGroupsNV(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)
{
  RTrace("glXQueryMaxSwapGroupsNV(", dpy, ", ", screen, ", ", maxGroups, ", ", maxBarriers, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQueryMaxSwapGroupsNV, "glXQueryMaxSwapGroupsNV" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXQueryMaxSwapGroupsNV) {
    ret = dispatchTableGlobal.glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXQuerySwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)
{
  RTrace("glXQuerySwapGroupNV(", dpy, ", ", drawable, ", ", group, ", ", barrier, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXQuerySwapGroupNV, "glXQuerySwapGroupNV" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXQuerySwapGroupNV) {
    ret = dispatchTableGlobal.glXQuerySwapGroupNV(dpy, drawable, group, barrier);
  }
  return ret;
}

REGAL_DECL Bool REGAL_CALL glXResetFrameCountNV(Display *dpy, int screen)
{
  RTrace("glXResetFrameCountNV(", dpy, ", ", screen, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXResetFrameCountNV, "glXResetFrameCountNV" );
    initialized = true;
  }
  Bool  ret = (Bool )0;
  if (dispatchTableGlobal.glXResetFrameCountNV) {
    ret = dispatchTableGlobal.glXResetFrameCountNV(dpy, screen);
  }
  return ret;
}

/* GLX_EXT_swap_control */

REGAL_DECL void REGAL_CALL glXSwapIntervalEXT(Display *dpy, GLXDrawable drawable, int interval)
{
  RTrace("glXSwapIntervalEXT(", dpy, ", ", drawable, ", ", interval, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXSwapIntervalEXT, "glXSwapIntervalEXT" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXSwapIntervalEXT) {
    dispatchTableGlobal.glXSwapIntervalEXT(dpy, drawable, interval);
  }
}

/* GLX_NV_copy_image */

REGAL_DECL void REGAL_CALL glXCopyImageSubDataNV(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  RTrace("glXCopyImageSubDataNV(", dpy, ", ", srcCtx, ", ", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", dstCtx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXCopyImageSubDataNV, "glXCopyImageSubDataNV" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXCopyImageSubDataNV) {
    dispatchTableGlobal.glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
}

/* GLX_ATI_render_texture */

REGAL_DECL void REGAL_CALL glXBindTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
{
  RTrace("glXBindTexImageATI(", dpy, ", ", pbuf, ", ", buffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXBindTexImageATI, "glXBindTexImageATI" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXBindTexImageATI) {
    dispatchTableGlobal.glXBindTexImageATI(dpy, pbuf, buffer);
  }
}

REGAL_DECL void REGAL_CALL glXReleaseTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
{
  RTrace("glXReleaseTexImageATI(", dpy, ", ", pbuf, ", ", buffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXReleaseTexImageATI, "glXReleaseTexImageATI" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXReleaseTexImageATI) {
    dispatchTableGlobal.glXReleaseTexImageATI(dpy, pbuf, buffer);
  }
}

REGAL_DECL void REGAL_CALL glXDrawableAttribATI(Display *dpy, GLXDrawable draw, const int *attrib_list)
{
  RTrace("glXDrawableAttribATI(", dpy, ", ", draw, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXDrawableAttribATI, "glXDrawableAttribATI" );
    initialized = true;
  }
  if (dispatchTableGlobal.glXDrawableAttribATI) {
    dispatchTableGlobal.glXDrawableAttribATI(dpy, draw, attrib_list);
  }
}

/* GLX_SUN_video_resize */

REGAL_DECL int REGAL_CALL glXVideoResizeSUN(Display *display, GLXDrawable window, float factor)
{
  RTrace("glXVideoResizeSUN(", display, ", ", window, ", ", factor, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXVideoResizeSUN, "glXVideoResizeSUN" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXVideoResizeSUN) {
    ret = dispatchTableGlobal.glXVideoResizeSUN(display, window, factor);
  }
  return ret;
}

REGAL_DECL int REGAL_CALL glXGetVideoResizeSUN(Display *display, GLXDrawable window, float *factor)
{
  RTrace("glXGetVideoResizeSUN(", display, ", ", window, ", ", factor, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.glXGetVideoResizeSUN, "glXGetVideoResizeSUN" );
    initialized = true;
  }
  int  ret = (int )0;
  if (dispatchTableGlobal.glXGetVideoResizeSUN) {
    ret = dispatchTableGlobal.glXGetVideoResizeSUN(display, window, factor);
  }
  return ret;
}

#endif /* REGAL_SYS_GLX */
#if REGAL_SYS_OSX

/* CGL_VERSION_1_0 */

REGAL_DECL CGLError REGAL_CALL CGLChoosePixelFormat(const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix)
{
  RTrace("CGLChoosePixelFormat(", attribs, ", ", pix, ", ", npix, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLChoosePixelFormat, "CGLChoosePixelFormat" );
    initialized = true;
  }

  CGLPixelFormatAttribute nattribs[] = {
    kCGLPFAOpenGLProfile,
    (CGLPixelFormatAttribute)0x3200,
    (CGLPixelFormatAttribute)0
  };
  if( RegalGetEnv( "REGAL_FORCE_CORE_PROFILE" ) ) {
    attribs = nattribs;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLChoosePixelFormat) {
    ret = dispatchTableGlobal.CGLChoosePixelFormat(attribs, pix, npix);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLDestroyPixelFormat(CGLPixelFormatObj pix)
{
  RTrace("CGLDestroyPixelFormat(", pix, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLDestroyPixelFormat, "CGLDestroyPixelFormat" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLDestroyPixelFormat) {
    ret = dispatchTableGlobal.CGLDestroyPixelFormat(pix);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLDescribePixelFormat(CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value)
{
  RTrace("CGLDescribePixelFormat(", pix, ", ", pix_num, ", ", attrib, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLDescribePixelFormat, "CGLDescribePixelFormat" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLDescribePixelFormat) {
    ret = dispatchTableGlobal.CGLDescribePixelFormat(pix, pix_num, attrib, value);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend)
{
  RTrace("CGLQueryRendererInfo(", display_mask, ", ", rend, ", ", nrend, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLQueryRendererInfo, "CGLQueryRendererInfo" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLQueryRendererInfo) {
    ret = dispatchTableGlobal.CGLQueryRendererInfo(display_mask, rend, nrend);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLDestroyRendererInfo(CGLRendererInfoObj rend)
{
  RTrace("CGLDestroyRendererInfo(", rend, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLDestroyRendererInfo, "CGLDestroyRendererInfo" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLDestroyRendererInfo) {
    ret = dispatchTableGlobal.CGLDestroyRendererInfo(rend);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLDescribeRenderer(CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value)
{
  RTrace("CGLDescribeRenderer(", rend, ", ", rend_num, ", ", prop, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLDescribeRenderer, "CGLDescribeRenderer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLDescribeRenderer) {
    ret = dispatchTableGlobal.CGLDescribeRenderer(rend, rend_num, prop, value);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLCreateContext(CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx)
{
  RTrace("CGLCreateContext(", pix, ", ", share, ", ", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLCreateContext, "CGLCreateContext" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLCreateContext) {
    ret = dispatchTableGlobal.CGLCreateContext(pix, share, ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLDestroyContext(CGLContextObj ctx)
{
  RTrace("CGLDestroyContext(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLDestroyContext, "CGLDestroyContext" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLDestroyContext) {
    ret = dispatchTableGlobal.CGLDestroyContext(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLCopyContext(CGLContextObj src, CGLContextObj dst, GLbitfield mask)
{
  RTrace("CGLCopyContext(", src, ", ", dst, ", ", mask, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLCopyContext, "CGLCopyContext" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLCopyContext) {
    ret = dispatchTableGlobal.CGLCopyContext(src, dst, mask);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetOffScreen(CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr)
{
  RTrace("CGLSetOffScreen(", ctx, ", ", width, ", ", height, ", ", rowbytes, ", ", baseaddr, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetOffScreen, "CGLSetOffScreen" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetOffScreen) {
    ret = dispatchTableGlobal.CGLSetOffScreen(ctx, width, height, rowbytes, baseaddr);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLGetOffScreen(CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr)
{
  RTrace("CGLGetOffScreen(", ctx, ", ", width, ", ", height, ", ", rowbytes, ", ", baseaddr, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetOffScreen, "CGLGetOffScreen" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLGetOffScreen) {
    ret = dispatchTableGlobal.CGLGetOffScreen(ctx, width, height, rowbytes, baseaddr);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetOption(CGLGlobalOption pname, GLint param)
{
  RTrace("CGLSetOption(", pname, ", ", param, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetOption, "CGLSetOption" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetOption) {
    ret = dispatchTableGlobal.CGLSetOption(pname, param);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLGetOption(CGLGlobalOption pname, GLint *param)
{
  RTrace("CGLGetOption(", pname, ", ", param, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetOption, "CGLGetOption" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLGetOption) {
    ret = dispatchTableGlobal.CGLGetOption(pname, param);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetFullScreen(CGLContextObj ctx)
{
  RTrace("CGLSetFullScreen(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetFullScreen, "CGLSetFullScreen" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetFullScreen) {
    ret = dispatchTableGlobal.CGLSetFullScreen(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLClearDrawable(CGLContextObj ctx)
{
  RTrace("CGLClearDrawable(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLClearDrawable, "CGLClearDrawable" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLClearDrawable) {
    ret = dispatchTableGlobal.CGLClearDrawable(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLFlushDrawable(CGLContextObj ctx)
{
  RTrace("CGLFlushDrawable(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLFlushDrawable, "CGLFlushDrawable" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLFlushDrawable) {
    ret = dispatchTableGlobal.CGLFlushDrawable(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLEnable(CGLContextObj ctx, CGLContextEnable pname)
{
  RTrace("CGLEnable(", ctx, ", ", pname, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLEnable, "CGLEnable" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLEnable) {
    ret = dispatchTableGlobal.CGLEnable(ctx, pname);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLDisable(CGLContextObj ctx, CGLContextEnable pname)
{
  RTrace("CGLDisable(", ctx, ", ", pname, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLDisable, "CGLDisable" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLDisable) {
    ret = dispatchTableGlobal.CGLDisable(ctx, pname);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLIsEnabled(CGLContextObj ctx, CGLContextEnable pname, GLint *enable)
{
  RTrace("CGLIsEnabled(", ctx, ", ", pname, ", ", enable, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLIsEnabled, "CGLIsEnabled" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLIsEnabled) {
    ret = dispatchTableGlobal.CGLIsEnabled(ctx, pname, enable);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetParameter(CGLContextObj ctx, CGLContextEnable pname, const GLint *params)
{
  RTrace("CGLSetParameter(", ctx, ", ", pname, ", ", params, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetParameter, "CGLSetParameter" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetParameter) {
    ret = dispatchTableGlobal.CGLSetParameter(ctx, pname, params);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLGetParameter(CGLContextObj ctx, CGLContextEnable pname, GLint *params)
{
  RTrace("CGLGetParameter(", ctx, ", ", pname, ", ", params, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetParameter, "CGLGetParameter" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLGetParameter) {
    ret = dispatchTableGlobal.CGLGetParameter(ctx, pname, params);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetVirtualScreen(CGLContextObj ctx, GLint screen)
{
  RTrace("CGLSetVirtualScreen(", ctx, ", ", screen, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetVirtualScreen, "CGLSetVirtualScreen" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetVirtualScreen) {
    ret = dispatchTableGlobal.CGLSetVirtualScreen(ctx, screen);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLGetVirtualScreen(CGLContextObj ctx, GLint *screen)
{
  RTrace("CGLGetVirtualScreen(", ctx, ", ", screen, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetVirtualScreen, "CGLGetVirtualScreen" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLGetVirtualScreen) {
    ret = dispatchTableGlobal.CGLGetVirtualScreen(ctx, screen);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL CGLGetVersion(GLint *majorvers, GLint *minorvers)
{
  RTrace("CGLGetVersion(", majorvers, ", ", minorvers, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetVersion, "CGLGetVersion" );
    initialized = true;
  }
  if (dispatchTableGlobal.CGLGetVersion) {
    dispatchTableGlobal.CGLGetVersion(majorvers, minorvers);
  }
}

REGAL_DECL const char *REGAL_CALL CGLErrorString(CGLError error)
{
  RTrace("CGLErrorString(", error, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLErrorString, "CGLErrorString" );
    initialized = true;
  }
  const char * ret = NULL;
  if (dispatchTableGlobal.CGLErrorString) {
    ret = dispatchTableGlobal.CGLErrorString(error);
  }
  return ret;
}

/* CGL_VERSION_1_1 */

REGAL_DECL CGLError REGAL_CALL CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer)
{
  RTrace("CGLCreatePBuffer(", width, ", ", height, ", ", toString(target), ", ", toString(internalFormat), ", ", max_level, ", ", pbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLCreatePBuffer, "CGLCreatePBuffer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLCreatePBuffer) {
    ret = dispatchTableGlobal.CGLCreatePBuffer(width, height, target, internalFormat, max_level, pbuffer);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLDestroyPBuffer(CGLPBufferObj pbuffer)
{
  RTrace("CGLDestroyPBuffer(", pbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLDestroyPBuffer, "CGLDestroyPBuffer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLDestroyPBuffer) {
    ret = dispatchTableGlobal.CGLDestroyPBuffer(pbuffer);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLDescribePBuffer(CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap)
{
  RTrace("CGLDescribePBuffer(", pbuffer, ", ", width, ", ", height, ", ", target, ", ", internalFormat, ", ", mipmap, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLDescribePBuffer, "CGLDescribePBuffer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLDescribePBuffer) {
    ret = dispatchTableGlobal.CGLDescribePBuffer(pbuffer, width, height, target, internalFormat, mipmap);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLTexImagePBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source)
{
  RTrace("CGLTexImagePBuffer(", ctx, ", ", pbuffer, ", ", toString(source), ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLTexImagePBuffer, "CGLTexImagePBuffer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLTexImagePBuffer) {
    ret = dispatchTableGlobal.CGLTexImagePBuffer(ctx, pbuffer, source);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetPBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen)
{
  RTrace("CGLSetPBuffer(", ctx, ", ", pbuffer, ", ", toString(face), ", ", level, ", ", screen, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetPBuffer, "CGLSetPBuffer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetPBuffer) {
    ret = dispatchTableGlobal.CGLSetPBuffer(ctx, pbuffer, face, level, screen);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLGetPBuffer(CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen)
{
  RTrace("CGLGetPBuffer(", ctx, ", ", pbuffer, ", ", face, ", ", level, ", ", screen, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetPBuffer, "CGLGetPBuffer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLGetPBuffer) {
    ret = dispatchTableGlobal.CGLGetPBuffer(ctx, pbuffer, face, level, screen);
  }
  return ret;
}

/* CGL_VERSION_1_2 */

REGAL_DECL void REGAL_CALL CGLReleasePixelFormat(CGLPixelFormatObj pix)
{
  RTrace("CGLReleasePixelFormat(", pix, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLReleasePixelFormat, "CGLReleasePixelFormat" );
    initialized = true;
  }
  if (dispatchTableGlobal.CGLReleasePixelFormat) {
    dispatchTableGlobal.CGLReleasePixelFormat(pix);
  }
}

REGAL_DECL CGLPixelFormatObj REGAL_CALL CGLRetainPixelFormat(CGLPixelFormatObj pix)
{
  RTrace("CGLRetainPixelFormat(", pix, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLRetainPixelFormat, "CGLRetainPixelFormat" );
    initialized = true;
  }
  CGLPixelFormatObj  ret = (CGLPixelFormatObj )0;
  if (dispatchTableGlobal.CGLRetainPixelFormat) {
    ret = dispatchTableGlobal.CGLRetainPixelFormat(pix);
  }
  return ret;
}

REGAL_DECL GLuint REGAL_CALL CGLGetPixelFormatRetainCount(CGLPixelFormatObj pix)
{
  RTrace("CGLGetPixelFormatRetainCount(", pix, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetPixelFormatRetainCount, "CGLGetPixelFormatRetainCount" );
    initialized = true;
  }
  GLuint  ret = (GLuint )0;
  if (dispatchTableGlobal.CGLGetPixelFormatRetainCount) {
    ret = dispatchTableGlobal.CGLGetPixelFormatRetainCount(pix);
  }
  return ret;
}

REGAL_DECL CGLContextObj REGAL_CALL CGLRetainContext(CGLContextObj ctx)
{
  RTrace("CGLRetainContext(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLRetainContext, "CGLRetainContext" );
    initialized = true;
  }
  CGLContextObj  ret = (CGLContextObj )0;
  if (dispatchTableGlobal.CGLRetainContext) {
    ret = dispatchTableGlobal.CGLRetainContext(ctx);
  }
  return ret;
}

REGAL_DECL void REGAL_CALL CGLReleaseContext(CGLContextObj ctx)
{
  RTrace("CGLReleaseContext(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLReleaseContext, "CGLReleaseContext" );
    initialized = true;
  }
  if (dispatchTableGlobal.CGLReleaseContext) {
    dispatchTableGlobal.CGLReleaseContext(ctx);
  }
}

REGAL_DECL GLuint REGAL_CALL CGLGetContextRetainCount(CGLContextObj ctx)
{
  RTrace("CGLGetContextRetainCount(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetContextRetainCount, "CGLGetContextRetainCount" );
    initialized = true;
  }
  GLuint  ret = (GLuint )0;
  if (dispatchTableGlobal.CGLGetContextRetainCount) {
    ret = dispatchTableGlobal.CGLGetContextRetainCount(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLRetainPBuffer(CGLPBufferObj pbuffer)
{
  RTrace("CGLRetainPBuffer(", pbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLRetainPBuffer, "CGLRetainPBuffer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLRetainPBuffer) {
    ret = dispatchTableGlobal.CGLRetainPBuffer(pbuffer);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLReleasePBuffer(CGLPBufferObj pbuffer)
{
  RTrace("CGLReleasePBuffer(", pbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLReleasePBuffer, "CGLReleasePBuffer" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLReleasePBuffer) {
    ret = dispatchTableGlobal.CGLReleasePBuffer(pbuffer);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLGetPBufferRetainCount(CGLPBufferObj pbuffer)
{
  RTrace("CGLGetPBufferRetainCount(", pbuffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetPBufferRetainCount, "CGLGetPBufferRetainCount" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLGetPBufferRetainCount) {
    ret = dispatchTableGlobal.CGLGetPBufferRetainCount(pbuffer);
  }
  return ret;
}

REGAL_DECL CGLPixelFormatObj REGAL_CALL CGLGetPixelFormat(CGLContextObj ctx)
{
  RTrace("CGLGetPixelFormat(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetPixelFormat, "CGLGetPixelFormat" );
    initialized = true;
  }
  CGLPixelFormatObj  ret = (CGLPixelFormatObj )0;
  if (dispatchTableGlobal.CGLGetPixelFormat) {
    ret = dispatchTableGlobal.CGLGetPixelFormat(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetGlobalOption(CGLGlobalOption pname, const GLint *params)
{
  RTrace("CGLSetGlobalOption(", pname, ", ", params, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetGlobalOption, "CGLSetGlobalOption" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetGlobalOption) {
    ret = dispatchTableGlobal.CGLSetGlobalOption(pname, params);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLGetGlobalOption(CGLGlobalOption pname, GLint *params)
{
  RTrace("CGLGetGlobalOption(", pname, ", ", params, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetGlobalOption, "CGLGetGlobalOption" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLGetGlobalOption) {
    ret = dispatchTableGlobal.CGLGetGlobalOption(pname, params);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLLockContext(CGLContextObj ctx)
{
  RTrace("CGLLockContext(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLLockContext, "CGLLockContext" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLLockContext) {
    ret = dispatchTableGlobal.CGLLockContext(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLUnlockContext(CGLContextObj ctx)
{
  RTrace("CGLUnlockContext(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLUnlockContext, "CGLUnlockContext" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLUnlockContext) {
    ret = dispatchTableGlobal.CGLUnlockContext(ctx);
  }
  return ret;
}

/* CGL_VERSION_1_3 */

REGAL_DECL CGLShareGroupObj REGAL_CALL CGLGetShareGroup(CGLContextObj ctx)
{
  RTrace("CGLGetShareGroup(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetShareGroup, "CGLGetShareGroup" );
    initialized = true;
  }
  CGLShareGroupObj  ret = (CGLShareGroupObj )0;
  if (dispatchTableGlobal.CGLGetShareGroup) {
    ret = dispatchTableGlobal.CGLGetShareGroup(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLUpdateContext(CGLContextObj ctx)
{
  RTrace("CGLUpdateContext(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLUpdateContext, "CGLUpdateContext" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLUpdateContext) {
    ret = dispatchTableGlobal.CGLUpdateContext(ctx);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetCurrentContext(CGLContextObj ctx)
{
  RTrace("CGLSetCurrentContext(", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetCurrentContext, "CGLSetCurrentContext" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetCurrentContext) {
    ret = dispatchTableGlobal.CGLSetCurrentContext(ctx);
       RegalMakeCurrent( ctx );
  }
  return ret;
}

REGAL_DECL CGLContextObj REGAL_CALL CGLGetCurrentContext(void)
{
  RTrace("CGLGetCurrentContext()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetCurrentContext, "CGLGetCurrentContext" );
    initialized = true;
  }
  CGLContextObj  ret = (CGLContextObj )0;
  if (dispatchTableGlobal.CGLGetCurrentContext) {
    ret = dispatchTableGlobal.CGLGetCurrentContext();
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLSetSurface(CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf)
{
  RTrace("CGLSetSurface(", ctx, ", ", conn, ", ", win, ", ", srf, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLSetSurface, "CGLSetSurface" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLSetSurface) {
    ret = dispatchTableGlobal.CGLSetSurface(ctx, conn, win, srf);
  }
  return ret;
}

REGAL_DECL CGLError REGAL_CALL CGLGetSurface(CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf)
{
  RTrace("CGLGetSurface(", ctx, ", ", conn, ", ", win, ", ", srf, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.CGLGetSurface, "CGLGetSurface" );
    initialized = true;
  }
  CGLError  ret = (CGLError )0;
  if (dispatchTableGlobal.CGLGetSurface) {
    ret = dispatchTableGlobal.CGLGetSurface(ctx, conn, win, srf);
  }
  return ret;
}

#endif /* REGAL_SYS_OSX */
#if REGAL_SYS_ANDROID

/* EGL_VERSION_1_0 */

REGAL_DECL EGLint REGAL_CALL eglGetError(void)
{
  RTrace("eglGetError()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglGetError, "eglGetError" );
    initialized = true;
  }
  EGLint  ret = (EGLint )0;
  if (dispatchTableGlobal.eglGetError) {
    ret = dispatchTableGlobal.eglGetError();
  }
  return ret;
}

REGAL_DECL EGLDisplay REGAL_CALL eglGetDisplay(EGLNativeDisplayType display_id)
{
  RTrace("eglGetDisplay(", display_id, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglGetDisplay, "eglGetDisplay" );
    initialized = true;
  }
  EGLDisplay  ret = (EGLDisplay )0;
  if (dispatchTableGlobal.eglGetDisplay) {
    ret = dispatchTableGlobal.eglGetDisplay(display_id);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)
{
  RTrace("eglInitialize(", dpy, ", ", major, ", ", minor, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglInitialize, "eglInitialize" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglInitialize) {
    ret = dispatchTableGlobal.eglInitialize(dpy, major, minor);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglTerminate(EGLDisplay dpy)
{
  RTrace("eglTerminate(", dpy, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglTerminate, "eglTerminate" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglTerminate) {
    ret = dispatchTableGlobal.eglTerminate(dpy);
  }
  return ret;
}

REGAL_DECL const char *REGAL_CALL eglQueryString(EGLDisplay dpy, EGLint name)
{
  RTrace("eglQueryString(", dpy, ", ", name, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglQueryString, "eglQueryString" );
    initialized = true;
  }
  const char * ret = NULL;
  if (dispatchTableGlobal.eglQueryString) {
    ret = dispatchTableGlobal.eglQueryString(dpy, name);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
{
  RTrace("eglGetConfigs(", dpy, ", ", configs, ", ", config_size, ", ", num_config, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglGetConfigs, "eglGetConfigs" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglGetConfigs) {
    ret = dispatchTableGlobal.eglGetConfigs(dpy, configs, config_size, num_config);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
{
  RTrace("eglChooseConfig(", dpy, ", ", attrib_list, ", ", configs, ", ", config_size, ", ", num_config, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglChooseConfig, "eglChooseConfig" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglChooseConfig) {
    ret = dispatchTableGlobal.eglChooseConfig(dpy, attrib_list, configs, config_size, num_config);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
{
  RTrace("eglGetConfigAttrib(", dpy, ", ", config, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglGetConfigAttrib, "eglGetConfigAttrib" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglGetConfigAttrib) {
    ret = dispatchTableGlobal.eglGetConfigAttrib(dpy, config, attribute, value);
  }
  return ret;
}

REGAL_DECL EGLSurface REGAL_CALL eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
{
  RTrace("eglCreateWindowSurface(", dpy, ", ", config, ", ", win, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglCreateWindowSurface, "eglCreateWindowSurface" );
    initialized = true;
  }
  EGLSurface  ret = (EGLSurface )0;
  if (dispatchTableGlobal.eglCreateWindowSurface) {
    ret = dispatchTableGlobal.eglCreateWindowSurface(dpy, config, win, attrib_list);
  }
  return ret;
}

REGAL_DECL EGLSurface REGAL_CALL eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
{
  RTrace("eglCreatePbufferSurface(", dpy, ", ", config, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglCreatePbufferSurface, "eglCreatePbufferSurface" );
    initialized = true;
  }
  EGLSurface  ret = (EGLSurface )0;
  if (dispatchTableGlobal.eglCreatePbufferSurface) {
    ret = dispatchTableGlobal.eglCreatePbufferSurface(dpy, config, attrib_list);
  }
  return ret;
}

REGAL_DECL EGLSurface REGAL_CALL eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
{
  RTrace("eglCreatePixmapSurface(", dpy, ", ", config, ", ", pixmap, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglCreatePixmapSurface, "eglCreatePixmapSurface" );
    initialized = true;
  }
  EGLSurface  ret = (EGLSurface )0;
  if (dispatchTableGlobal.eglCreatePixmapSurface) {
    ret = dispatchTableGlobal.eglCreatePixmapSurface(dpy, config, pixmap, attrib_list);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglDestroySurface(EGLDisplay dpy, EGLSurface surface)
{
  RTrace("eglDestroySurface(", dpy, ", ", surface, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglDestroySurface, "eglDestroySurface" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglDestroySurface) {
    ret = dispatchTableGlobal.eglDestroySurface(dpy, surface);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
{
  RTrace("eglQuerySurface(", dpy, ", ", surface, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglQuerySurface, "eglQuerySurface" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglQuerySurface) {
    ret = dispatchTableGlobal.eglQuerySurface(dpy, surface, attribute, value);
  }
  return ret;
}

REGAL_DECL EGLContext REGAL_CALL eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
{
  RTrace("eglCreateContext(", dpy, ", ", config, ", ", share_context, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglCreateContext, "eglCreateContext" );
    initialized = true;
  }
  EGLContext  ret = (EGLContext )0;
  if (dispatchTableGlobal.eglCreateContext) {
    ret = dispatchTableGlobal.eglCreateContext(dpy, config, share_context, attrib_list);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglDestroyContext(EGLDisplay dpy, EGLContext ctx)
{
  RTrace("eglDestroyContext(", dpy, ", ", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglDestroyContext, "eglDestroyContext" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglDestroyContext) {
    ret = dispatchTableGlobal.eglDestroyContext(dpy, ctx);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
{
  RTrace("eglMakeCurrent(", dpy, ", ", draw, ", ", read, ", ", ctx, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglMakeCurrent, "eglMakeCurrent" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglMakeCurrent) {
    ret = dispatchTableGlobal.eglMakeCurrent(dpy, draw, read, ctx);
  }
  return ret;
}

REGAL_DECL EGLContext REGAL_CALL eglGetCurrentContext(void)
{
  RTrace("eglGetCurrentContext()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglGetCurrentContext, "eglGetCurrentContext" );
    initialized = true;
  }
  EGLContext  ret = (EGLContext )0;
  if (dispatchTableGlobal.eglGetCurrentContext) {
    ret = dispatchTableGlobal.eglGetCurrentContext();
  }
  return ret;
}

REGAL_DECL EGLSurface REGAL_CALL eglGetCurrentSurface(EGLint readdraw)
{
  RTrace("eglGetCurrentSurface(", readdraw, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglGetCurrentSurface, "eglGetCurrentSurface" );
    initialized = true;
  }
  EGLSurface  ret = (EGLSurface )0;
  if (dispatchTableGlobal.eglGetCurrentSurface) {
    ret = dispatchTableGlobal.eglGetCurrentSurface(readdraw);
  }
  return ret;
}

REGAL_DECL EGLDisplay REGAL_CALL eglGetCurrentDisplay(void)
{
  RTrace("eglGetCurrentDisplay()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglGetCurrentDisplay, "eglGetCurrentDisplay" );
    initialized = true;
  }
  EGLDisplay  ret = (EGLDisplay )0;
  if (dispatchTableGlobal.eglGetCurrentDisplay) {
    ret = dispatchTableGlobal.eglGetCurrentDisplay();
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
{
  RTrace("eglQueryContext(", dpy, ", ", ctx, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglQueryContext, "eglQueryContext" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglQueryContext) {
    ret = dispatchTableGlobal.eglQueryContext(dpy, ctx, attribute, value);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglWaitGL(void)
{
  RTrace("eglWaitGL()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglWaitGL, "eglWaitGL" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglWaitGL) {
    ret = dispatchTableGlobal.eglWaitGL();
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglWaitNative(EGLint engine)
{
  RTrace("eglWaitNative(", engine, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglWaitNative, "eglWaitNative" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglWaitNative) {
    ret = dispatchTableGlobal.eglWaitNative(engine);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)
{
  RTrace("eglSwapBuffers(", dpy, ", ", surface, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglSwapBuffers, "eglSwapBuffers" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglSwapBuffers) {
    ret = dispatchTableGlobal.eglSwapBuffers(dpy, surface);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
{
  RTrace("eglCopyBuffers(", dpy, ", ", surface, ", ", target, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglCopyBuffers, "eglCopyBuffers" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglCopyBuffers) {
    ret = dispatchTableGlobal.eglCopyBuffers(dpy, surface, target);
  }
  return ret;
}

REGAL_DECL __eglMustCastToProperFunctionPointerType REGAL_CALL eglGetProcAddress(const char *procname)
{
  RTrace("eglGetProcAddress(", boost::print::quote(procname,'"'), ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglGetProcAddress, "eglGetProcAddress" );
    initialized = true;
  }
  __eglMustCastToProperFunctionPointerType  ret = (__eglMustCastToProperFunctionPointerType )0;
  if (dispatchTableGlobal.eglGetProcAddress) {
    ret = dispatchTableGlobal.eglGetProcAddress(procname);
  }
  return ret;
}

/* EGL_VERSION_1_1 */

REGAL_DECL EGLBoolean REGAL_CALL eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
  RTrace("eglBindTexImage(", dpy, ", ", surface, ", ", buffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglBindTexImage, "eglBindTexImage" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglBindTexImage) {
    ret = dispatchTableGlobal.eglBindTexImage(dpy, surface, buffer);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
  RTrace("eglReleaseTexImage(", dpy, ", ", surface, ", ", buffer, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglReleaseTexImage, "eglReleaseTexImage" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglReleaseTexImage) {
    ret = dispatchTableGlobal.eglReleaseTexImage(dpy, surface, buffer);
  }
  return ret;
}

/* EGL_VERSION_1_2 */

REGAL_DECL EGLBoolean REGAL_CALL eglBindAPI(EGLenum api)
{
  RTrace("eglBindAPI(", api, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglBindAPI, "eglBindAPI" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglBindAPI) {
    ret = dispatchTableGlobal.eglBindAPI(api);
  }
  return ret;
}

REGAL_DECL EGLenum REGAL_CALL eglQueryAPI(void)
{
  RTrace("eglQueryAPI()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglQueryAPI, "eglQueryAPI" );
    initialized = true;
  }
  EGLenum  ret = (EGLenum )0;
  if (dispatchTableGlobal.eglQueryAPI) {
    ret = dispatchTableGlobal.eglQueryAPI();
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglWaitClient(void)
{
  RTrace("eglWaitClient()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglWaitClient, "eglWaitClient" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglWaitClient) {
    ret = dispatchTableGlobal.eglWaitClient();
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglReleaseThread(void)
{
  RTrace("eglReleaseThread()");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglReleaseThread, "eglReleaseThread" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglReleaseThread) {
    ret = dispatchTableGlobal.eglReleaseThread();
  }
  return ret;
}

REGAL_DECL EGLSurface REGAL_CALL eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
{
  RTrace("eglCreatePbufferFromClientBuffer(", dpy, ", ", buftype, ", ", buffer, ", ", config, ", ", attrib_list, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglCreatePbufferFromClientBuffer, "eglCreatePbufferFromClientBuffer" );
    initialized = true;
  }
  EGLSurface  ret = (EGLSurface )0;
  if (dispatchTableGlobal.eglCreatePbufferFromClientBuffer) {
    ret = dispatchTableGlobal.eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
{
  RTrace("eglSurfaceAttrib(", dpy, ", ", surface, ", ", attribute, ", ", value, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglSurfaceAttrib, "eglSurfaceAttrib" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglSurfaceAttrib) {
    ret = dispatchTableGlobal.eglSurfaceAttrib(dpy, surface, attribute, value);
  }
  return ret;
}

REGAL_DECL EGLBoolean REGAL_CALL eglSwapInterval(EGLDisplay dpy, EGLint interval)
{
  RTrace("eglSwapInterval(", dpy, ", ", interval, ")");
  static bool initialized = false;
  if (!initialized) {
    RegalGetProcAddress( dispatchTableGlobal.eglSwapInterval, "eglSwapInterval" );
    initialized = true;
  }
  EGLBoolean  ret = (EGLBoolean )0;
  if (dispatchTableGlobal.eglSwapInterval) {
    ret = dispatchTableGlobal.eglSwapInterval(dpy, interval);
  }
  return ret;
}

#endif /* REGAL_SYS_ANDROID */

#ifdef __cplusplus
}
#endif

void RegalCheckForGLErrors( RegalContext *ctx )
{
    GLenum err = ctx->dsp.driverTbl.glGetError();
    if (err != GL_NO_ERROR)
        Error("GL error = ",toString(err));
}

REGAL_NAMESPACE_END
