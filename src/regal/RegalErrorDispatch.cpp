/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir src/regal
*/

/*
Copyright (c) 2011 NVIDIA Corporation
Copyright (c) 2011-2012 Cass Everitt
Copyright (c) 2012 Scott Nations
Copyright (c) 2012 Mathias Schott
Copyright (c) 2012 Nigel Stewart
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "RegalPrivate.h"

RegalErrorCallback RegalErrorState::Set( RegalContext * ctx, RegalErrorCallback newCallback )
{
  RegalErrorCallback oldCallback = callback;
  if (callback) {
    if (!newCallback) {
      ctx->dsp.Erase( RDT_Error );
    }
  } else {
    if (newCallback) {
      ctx->dsp.Insert( 1, RDT_Error );
    }
  }
  callback = newCallback;
  return oldCallback;
}

RegalErrorCallback RegalSetErrorCallback( RegalErrorCallback callback )
{
   RegalContext * ctx = GET_REGAL_CONTEXT();
   return ctx->err.Set( ctx, callback );
}

// GL_VERSION_1_0

static void REGAL_CALL error_glNewList(GLuint list, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNewList(list, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndList(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndList();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCallList(GLuint list)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCallList(list);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCallLists(n, type, lists);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteLists(GLuint list, GLsizei range)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteLists(list, range);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glGenLists(GLsizei range)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGenLists(range);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glListBase(GLuint base)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glListBase(base);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBegin(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
rCtx->err.inBeginEnd = true;
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBegin(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3b(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3bv(const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3bv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3d(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3f(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3i(GLint red, GLint green, GLint blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3i(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3s(GLshort red, GLshort green, GLshort blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3s(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3ub(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3ubv(const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3ubv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3ui(GLuint red, GLuint green, GLuint blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3ui(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3uiv(const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3uiv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3us(GLushort red, GLushort green, GLushort blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3us(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3usv(const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3usv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4b(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4bv(const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4bv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4d(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4f(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4i(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4s(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4ub(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4ubv(const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4ubv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4ui(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4uiv(const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4uiv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4us(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4usv(const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4usv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEdgeFlag(GLboolean flag)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEdgeFlag(flag);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEdgeFlagv(const GLboolean *flag)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEdgeFlagv(flag);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnd(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnd();
    rCtx->err.inBeginEnd = false;
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexd(GLdouble c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexd(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexdv(const GLdouble *c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexdv(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexf(GLfloat c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexf(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexfv(const GLfloat *c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexfv(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexi(GLint c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexi(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexiv(const GLint *c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexiv(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexs(GLshort c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexs(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexsv(const GLshort *c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexsv(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3b(nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3bv(const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3bv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3d(nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3f(nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3i(GLint nx, GLint ny, GLint nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3i(nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3s(nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos2d(GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos2d(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos2dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos2dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos2f(GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos2f(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos2fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos2fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos2i(GLint x, GLint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos2i(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos2iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos2iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos2s(GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos2s(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos2sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos2sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos3d(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos3dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos3dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos3f(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos3fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos3fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos3i(GLint x, GLint y, GLint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos3i(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos3iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos3iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos3s(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos3sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos3sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos4d(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos4dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos4dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos4f(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos4fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos4fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos4i(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos4iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos4iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos4s(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRasterPos4sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRasterPos4sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRectd(x1, y1, x2, y2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRectdv(const GLdouble *v1, const GLdouble *v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRectdv(v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRectf(x1, y1, x2, y2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRectfv(const GLfloat *v1, const GLfloat *v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRectfv(v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRecti(x1, y1, x2, y2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRectiv(const GLint *v1, const GLint *v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRectiv(v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRects(x1, y1, x2, y2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRectsv(const GLshort *v1, const GLshort *v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRectsv(v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1d(GLdouble s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1d(s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1f(GLfloat s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1f(s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1i(GLint s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1i(s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1s(GLshort s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1s(s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2d(GLdouble s, GLdouble t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2d(s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2f(GLfloat s, GLfloat t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2f(s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2i(GLint s, GLint t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2i(s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2s(GLshort s, GLshort t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2s(s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3d(s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3f(s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3i(GLint s, GLint t, GLint r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3i(s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3s(GLshort s, GLshort t, GLshort r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3s(s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4d(s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4f(s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4i(s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4s(s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2d(GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2d(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2f(GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2f(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2i(GLint x, GLint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2i(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2s(GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2s(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3d(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3f(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3i(GLint x, GLint y, GLint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3i(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3s(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4d(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4f(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4i(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4i(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4s(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClipPlane(GLenum plane, const GLdouble *equation)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClipPlane(plane, equation);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorMaterial(GLenum face, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorMaterial(face, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCullFace(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCullFace(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogf(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogf(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogfv(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogfv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogi(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogi(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogiv(GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogiv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFrontFace(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFrontFace(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glHint(GLenum target, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glHint(target, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLightf(GLenum light, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLightf(light, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLightfv(light, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLighti(GLenum light, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLighti(light, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLightiv(GLenum light, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLightiv(light, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLightModelf(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLightModelf(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLightModelfv(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLightModelfv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLightModeli(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLightModeli(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLightModeliv(GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLightModeliv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLineStipple(GLint factor, GLushort pattern)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLineStipple(factor, pattern);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLineWidth(GLfloat width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLineWidth(width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMaterialf(face, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMaterialfv(face, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMateriali(GLenum face, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMateriali(face, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMaterialiv(face, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointSize(GLfloat size)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointSize(size);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPolygonMode(GLenum face, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPolygonMode(face, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPolygonStipple(const GLubyte *mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPolygonStipple(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glScissor(x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glShadeModel(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glShadeModel(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexParameterf(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexParameterfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexParameteri(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexEnvf(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexEnvfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexEnvi(GLenum target, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexEnvi(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexEnviv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexGend(GLenum coord, GLenum pname, GLdouble param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexGend(coord, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexGendv(coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexGenf(coord, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexGenfv(coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexGeni(GLenum coord, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexGeni(coord, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexGeniv(coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFeedbackBuffer(size, type, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSelectBuffer(GLsizei size, GLuint *buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSelectBuffer(size, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glRenderMode(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glRenderMode(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glInitNames(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glInitNames();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLoadName(GLuint name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadName(name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPassThrough(GLfloat token)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPassThrough(token);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPopName(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPopName();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPushName(GLuint name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPushName(name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawBuffer(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawBuffer(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClear(GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClear(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearAccum(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearColor(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearDepth(GLclampd depth)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearDepth(depth);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearIndex(GLfloat c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearIndex(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearStencil(GLint s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearStencil(s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorMask(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDepthMask(GLboolean flag)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthMask(flag);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexMask(GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexMask(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilMask(GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilMask(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glAccum(GLenum op, GLfloat value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAccum(op, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisable(GLenum cap)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisable(cap);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnable(GLenum cap)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnable(cap);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFinish(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFinish();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFlush(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFlush();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPopAttrib(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPopAttrib();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPushAttrib(GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPushAttrib(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMap1d(target, u1, u2, stride, order, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMap1f(target, u1, u2, stride, order, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapGrid1d(un, u1, u2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapGrid1f(un, u1, u2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapGrid2d(un, u1, u2, vn, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapGrid2f(un, u1, u2, vn, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalCoord1d(GLdouble u)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalCoord1d(u);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalCoord1dv(const GLdouble *u)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalCoord1dv(u);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalCoord1f(GLfloat u)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalCoord1f(u);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalCoord1fv(const GLfloat *u)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalCoord1fv(u);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalCoord2d(GLdouble u, GLdouble v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalCoord2d(u, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalCoord2dv(const GLdouble *u)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalCoord2dv(u);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalCoord2f(GLfloat u, GLfloat v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalCoord2f(u, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalCoord2fv(const GLfloat *u)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalCoord2fv(u);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalMesh1(mode, i1, i2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalMesh2(mode, i1, i2, j1, j2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalPoint1(GLint i)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalPoint1(i);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalPoint2(GLint i, GLint j)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalPoint2(i, j);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glAlphaFunc(GLenum func, GLclampf ref)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAlphaFunc(func, ref);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendFunc(GLenum sfactor, GLenum dfactor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFunc(sfactor, dfactor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDepthFunc(GLenum func)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthFunc(func);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilFunc(func, ref, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLogicOp(GLenum opcode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLogicOp(opcode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilOp(fail, zfail, zpass);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelZoom(xfactor, yfactor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelTransferf(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTransferf(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelTransferi(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTransferi(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelStoref(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelStoref(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelStorei(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelStorei(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelMapfv(map, mapsize, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelMapuiv(map, mapsize, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelMapusv(map, mapsize, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReadBuffer(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReadBuffer(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyPixels(x, y, width, height, type);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReadPixels(x, y, width, height, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawPixels(width, height, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetBooleanv(GLenum pname, GLboolean *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBooleanv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetDoublev(GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetDoublev(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFloatv(GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFloatv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetIntegerv(GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetIntegerv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetClipPlane(GLenum plane, GLdouble *equation)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetClipPlane(plane, equation);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLenum REGAL_CALL error_glGetError(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    GLenum err = rCtx->dsp.CurrTable()->glGetError();
    return err;
}

static void REGAL_CALL error_glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetLightfv(light, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetLightiv(GLenum light, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetLightiv(light, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMapdv(GLenum target, GLenum query, GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMapdv(target, query, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMapfv(GLenum target, GLenum query, GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMapfv(target, query, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMapiv(GLenum target, GLenum query, GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMapiv(target, query, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMaterialfv(face, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMaterialiv(face, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPixelMapfv(GLenum map, GLfloat *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPixelMapfv(map, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPixelMapuiv(GLenum map, GLuint *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPixelMapuiv(map, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPixelMapusv(GLenum map, GLushort *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPixelMapusv(map, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPolygonStipple(GLubyte *mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPolygonStipple(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static const GLubyte *REGAL_CALL error_glGetString(GLenum name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    const GLubyte * ret = rCtx->dsp.CurrTable()->glGetString(name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexEnvfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexEnviv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexGendv(coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexGenfv(coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexGeniv(coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexImage(target, level, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexParameterfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexLevelParameterfv(target, level, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexLevelParameteriv(target, level, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsEnabled(GLenum cap)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsEnabled(cap);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glIsList(GLuint list)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsList(list);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glDepthRange(GLclampd zNear, GLclampd zFar)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthRange(zNear, zFar);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFrustum(left, right, bottom, top, zNear, zFar);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLoadIdentity(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadIdentity();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLoadMatrixd(const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadMatrixd(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLoadMatrixf(const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadMatrixf(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixMode(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixMode(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultMatrixd(const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultMatrixd(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultMatrixf(const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultMatrixf(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glOrtho(left, right, bottom, top, zNear, zFar);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPopMatrix(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPopMatrix();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPushMatrix(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPushMatrix();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRotated(angle, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRotatef(angle, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glScaled(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glScaled(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glScalef(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glScalef(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTranslated(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTranslated(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTranslatef(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glViewport(x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_1_1

static void REGAL_CALL error_glArrayElement(GLint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glArrayElement(index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawArrays(mode, first, count);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElements(mode, count, type, indices);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glInterleavedArrays(format, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisableClientState(GLenum cap)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisableClientState(cap);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnableClientState(GLenum cap)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnableClientState(cap);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPointerv(GLenum pname, GLvoid **params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPointerv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorPointer(size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEdgeFlagPointer(stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexPointer(type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalPointer(type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordPointer(size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexPointer(size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPolygonOffset(GLfloat factor, GLfloat units)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPolygonOffset(factor, units);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexImage1D(target, level, internalformat, x, y, width, border);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexSubImage1D(target, level, xoffset, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glAreTexturesResident(n, textures, residences);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindTexture(GLenum target, GLuint texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindTexture(target, texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteTextures(GLsizei n, const GLuint *textures)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteTextures(n, textures);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenTextures(GLsizei n, GLuint *textures)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenTextures(n, textures);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsTexture(GLuint texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsTexture(texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPrioritizeTextures(n, textures, priorities);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexub(GLubyte c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexub(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexubv(const GLubyte *c)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexubv(c);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPopClientAttrib(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPopClientAttrib();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPushClientAttrib(GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPushClientAttrib(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_1_2

static void REGAL_CALL error_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendColor(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendEquation(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquation(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawRangeElements(mode, start, end, count, type, indices);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorTable(target, internalformat, width, format, type, table);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorTableParameterfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorTableParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyColorTable(target, internalformat, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTable(target, format, type, table);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTableParameterfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTableParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorSubTable(target, start, count, format, type, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyColorSubTable(target, start, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionFilter1D(target, internalformat, width, format, type, image);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionParameterf(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionParameterfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionParameteri(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyConvolutionFilter1D(target, internalformat, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetConvolutionFilter(target, format, type, image);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetConvolutionParameterfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetConvolutionParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetSeparableFilter(target, format, type, row, column, span);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetHistogram(target, reset, format, type, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetHistogramParameterfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetHistogramParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMinmax(target, reset, format, type, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMinmaxParameterfv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMinmaxParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glHistogram(target, width, internalformat, sink);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMinmax(target, internalformat, sink);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glResetHistogram(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glResetHistogram(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glResetMinmax(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glResetMinmax(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_1_3

static void REGAL_CALL error_glActiveTexture(GLenum texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glActiveTexture(texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSampleCoverage(GLclampf value, GLboolean invert)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSampleCoverage(value, invert);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCompressedTexImage(target, lod, img);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClientActiveTexture(GLenum texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClientActiveTexture(texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1d(GLenum target, GLdouble s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1d(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1dv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1f(GLenum target, GLfloat s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1f(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1fv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1i(GLenum target, GLint s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1i(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1iv(GLenum target, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1iv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1s(GLenum target, GLshort s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1s(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1sv(GLenum target, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1sv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2d(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2dv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2f(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2fv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2i(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2iv(GLenum target, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2iv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2s(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2sv(GLenum target, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2sv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3d(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3dv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3f(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3fv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3i(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3iv(GLenum target, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3iv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3s(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3sv(GLenum target, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3sv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4d(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4dv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4f(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4fv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4i(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4iv(GLenum target, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4iv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4s(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4sv(GLenum target, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4sv(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLoadTransposeMatrixf(const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadTransposeMatrixf(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLoadTransposeMatrixd(const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadTransposeMatrixd(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultTransposeMatrixf(const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultTransposeMatrixf(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultTransposeMatrixd(const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultTransposeMatrixd(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_1_4

static void REGAL_CALL error_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiDrawArrays(mode, first, count, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiDrawElements(mode, count, type, indices, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointParameterf(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterf(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointParameterfv(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterfv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointParameteri(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameteri(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointParameteriv(GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameteriv(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordf(GLfloat coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordf(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordfv(const GLfloat *coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordfv(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordd(GLdouble coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordd(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoorddv(const GLdouble *coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoorddv(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordPointer(type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3b(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3bv(const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3bv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3d(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3dv(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3dv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3f(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3fv(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3fv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3i(GLint red, GLint green, GLint blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3i(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3iv(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3iv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3s(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3sv(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3sv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3ub(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3ubv(const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3ubv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3ui(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3uiv(const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3uiv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3us(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3usv(const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3usv(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColorPointer(size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2d(GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2d(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2dv(const GLdouble *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2dv(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2f(GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2f(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2fv(const GLfloat *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2fv(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2i(GLint x, GLint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2i(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2iv(const GLint *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2iv(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2s(GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2s(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2sv(const GLshort *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2sv(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3d(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3dv(const GLdouble *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3dv(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3f(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3fv(const GLfloat *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3fv(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3i(GLint x, GLint y, GLint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3i(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3iv(const GLint *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3iv(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3s(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3sv(const GLshort *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3sv(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_1_5

static void REGAL_CALL error_glGenQueries(GLsizei n, GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenQueries(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteQueries(GLsizei n, const GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteQueries(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsQuery(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsQuery(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBeginQuery(GLenum target, GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginQuery(target, id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndQuery(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndQuery(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryiv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryObjectiv(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryObjectuiv(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBuffer(GLenum target, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBuffer(target, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteBuffers(n, buffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenBuffers(GLsizei n, GLuint *buffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenBuffers(n, buffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsBuffer(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsBuffer(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBufferData(target, size, data, usage);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBufferSubData(target, offset, size, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBufferSubData(target, offset, size, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLvoid *REGAL_CALL error_glMapBuffer(GLenum target, GLenum access)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLvoid * ret = rCtx->dsp.CurrTable()->glMapBuffer(target, access);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glUnmapBuffer(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glUnmapBuffer(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBufferParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBufferPointerv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_2_0

static void REGAL_CALL error_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationSeparate(modeRGB, modeAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawBuffers(GLsizei n, const GLenum *bufs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawBuffers(n, bufs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilOpSeparate(face, fail, zfail, zpass);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilFuncSeparate(face, func, ref, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilMaskSeparate(GLenum face, GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilMaskSeparate(face, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glAttachShader(GLuint program, GLuint shader)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAttachShader(program, shader);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindAttribLocation(program, index, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompileShader(GLuint shader)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompileShader(shader);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glCreateProgram(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glCreateProgram();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLuint REGAL_CALL error_glCreateShader(GLenum type)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glCreateShader(type);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glDeleteProgram(GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteProgram(program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteShader(GLuint shader)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteShader(shader);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDetachShader(GLuint program, GLuint shader)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDetachShader(program, shader);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisableVertexAttribArray(GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisableVertexAttribArray(index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnableVertexAttribArray(GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnableVertexAttribArray(index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveAttrib(program, index, bufSize, length, size, type, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveUniform(program, index, bufSize, length, size, type, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetAttachedShaders(program, maxCount, count, shaders);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetAttribLocation(GLuint program, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetAttribLocation(program, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramiv(program, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramInfoLog(program, bufSize, length, infoLog);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetShaderiv(shader, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetShaderInfoLog(shader, bufSize, length, infoLog);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetShaderSource(shader, bufSize, length, source);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetUniformLocation(GLuint program, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetUniformLocation(program, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformfv(program, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetUniformiv(GLuint program, GLint location, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformiv(program, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribdv(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribfv(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribiv(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribPointerv(index, pname, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsProgram(GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsProgram(program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glIsShader(GLuint shader)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsShader(shader);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glLinkProgram(GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLinkProgram(program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glShaderSource(shader, count, string, length);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUseProgram(GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUseProgram(program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1f(GLint location, GLfloat v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1f(location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2f(location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3f(location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4f(location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1i(GLint location, GLint v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1i(location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2i(GLint location, GLint v0, GLint v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2i(location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3i(location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4i(location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1fv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2fv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3fv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4fv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1iv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2iv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3iv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4iv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix2fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix3fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix4fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glValidateProgram(GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glValidateProgram(program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1d(GLuint index, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1d(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1dv(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1dv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1f(GLuint index, GLfloat x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1f(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1fv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1s(GLuint index, GLshort x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1s(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1sv(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1sv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2d(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2dv(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2dv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2f(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2fv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2s(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2sv(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2sv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3d(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3dv(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3dv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3f(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3fv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3s(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3sv(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3sv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4Nbv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4Niv(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4Niv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4Nsv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4Nub(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4Nubv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4Nuiv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4Nusv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4bv(GLuint index, const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4bv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4d(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4dv(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4dv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4f(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4fv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4iv(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4iv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4s(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4sv(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4sv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4ubv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4uiv(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4uiv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4usv(GLuint index, const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4usv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribPointer(index, size, type, normalized, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_2_1

static void REGAL_CALL error_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix2x3fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix3x2fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix2x4fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix4x2fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix3x4fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix4x3fv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_3_0

static void REGAL_CALL error_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorMaski(index, r, g, b, a);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBooleani_v(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetIntegeri_v(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnablei(GLenum cap, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnablei(cap, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisablei(GLenum cap, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisablei(cap, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsEnabledi(GLenum target, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsEnabledi(target, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBeginTransformFeedback(GLenum primitiveMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginTransformFeedback(primitiveMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndTransformFeedback(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndTransformFeedback();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferRange(target, index, buffer, offset, size);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferBase(target, index, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTransformFeedbackVaryings(program, count, varyings, bufferMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClampColor(GLenum target, GLenum clamp)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClampColor(target, clamp);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBeginConditionalRender(GLuint id, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginConditionalRender(id, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndConditionalRender(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndConditionalRender();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribIPointer(index, size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribIiv(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribIuiv(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI1i(GLuint index, GLint x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI1i(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI2i(GLuint index, GLint x, GLint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI2i(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI3i(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4i(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI1ui(GLuint index, GLuint x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI1ui(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI2ui(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI3ui(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4ui(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI1iv(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI1iv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI2iv(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI2iv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI3iv(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI3iv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4iv(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4iv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI1uiv(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI1uiv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI2uiv(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI2uiv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI3uiv(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI3uiv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4uiv(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4uiv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4bv(GLuint index, const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4bv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4sv(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4sv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4ubv(GLuint index, const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4ubv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4usv(GLuint index, const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4usv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformuiv(program, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindFragDataLocation(program, color, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetFragDataLocation(GLuint program, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetFragDataLocation(program, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glUniform1ui(GLint location, GLuint v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1ui(location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2ui(location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3ui(location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4ui(location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1uiv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2uiv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3uiv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4uiv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexParameterIiv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexParameterIuiv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexParameterIiv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexParameterIuiv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearBufferiv(buffer, drawbuffer, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearBufferuiv(buffer, drawbuffer, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearBufferfv(buffer, drawbuffer, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearBufferfi(buffer, drawbuffer, depth, stencil);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static const GLubyte *REGAL_CALL error_glGetStringi(GLenum name, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    const GLubyte * ret = rCtx->dsp.CurrTable()->glGetStringi(name, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_VERSION_3_1

static void REGAL_CALL error_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawArraysInstanced(mode, start, count, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElementsInstanced(mode, count, type, indices, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexBuffer(target, internalformat, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPrimitiveRestartIndex(GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPrimitiveRestartIndex(index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_3_2

static void REGAL_CALL error_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetInteger64i_v(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBufferParameteri64v(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTexture(target, attachment, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTextureFace(target, attachment, texture, level, face);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_3_3

static void REGAL_CALL error_glGenSamplers(GLsizei count, GLuint *samplers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenSamplers(count, samplers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteSamplers(GLsizei count, const GLuint *samplers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteSamplers(count, samplers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsSampler(GLuint sampler)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsSampler(sampler);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindSampler(GLuint unit, GLuint sampler)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindSampler(unit, sampler);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSamplerParameteri(sampler, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSamplerParameterf(sampler, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSamplerParameteriv(sampler, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSamplerParameterfv(sampler, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSamplerParameterIiv(sampler, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSamplerParameterIuiv(sampler, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetSamplerParameteriv(sampler, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetSamplerParameterfv(sampler, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetSamplerParameterIiv(sampler, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetSamplerParameterIuiv(sampler, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindFragDataLocationIndexed(GLuint program, GLuint color, GLuint index, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindFragDataLocationIndexed(program, color, index, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetFragDataIndex(GLuint program, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetFragDataIndex(program, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryObjecti64v(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryObjectui64v(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glQueryCounter(GLuint id, GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glQueryCounter(id, target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribDivisor(GLuint index, GLuint divisor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribDivisor(index, divisor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexP2ui(GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexP2ui(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexP2uiv(GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexP2uiv(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexP3ui(GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexP3ui(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexP3uiv(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexP4ui(GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexP4ui(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexP4uiv(GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexP4uiv(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordP1ui(GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordP1ui(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordP1uiv(GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordP1uiv(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordP2ui(GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordP2ui(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordP2uiv(GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordP2uiv(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordP3ui(GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordP3ui(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordP3uiv(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordP4ui(GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordP4ui(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordP4uiv(GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordP4uiv(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordP1ui(GLenum target, GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordP1ui(target, type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordP1uiv(GLenum target, GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordP1uiv(target, type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordP2ui(GLenum target, GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordP2ui(target, type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordP2uiv(GLenum target, GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordP2uiv(target, type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordP3ui(GLenum target, GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordP3ui(target, type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordP3uiv(GLenum target, GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordP3uiv(target, type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordP4ui(GLenum target, GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordP4ui(target, type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordP4uiv(GLenum target, GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordP4uiv(target, type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalP3ui(GLenum type, GLuint coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalP3ui(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalP3uiv(type, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorP3ui(GLenum type, GLuint color)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorP3ui(type, color);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorP3uiv(GLenum type, const GLuint *color)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorP3uiv(type, color);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorP4ui(GLenum type, GLuint color)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorP4ui(type, color);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorP4uiv(GLenum type, const GLuint *color)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorP4uiv(type, color);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColorP3ui(GLenum type, GLuint color)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColorP3ui(type, color);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColorP3uiv(GLenum type, const GLuint *color)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColorP3uiv(type, color);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribP1ui(index, type, normalized, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribP1uiv(index, type, normalized, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribP2ui(index, type, normalized, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribP2uiv(index, type, normalized, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribP3ui(index, type, normalized, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribP3uiv(index, type, normalized, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribP4ui(index, type, normalized, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribP4uiv(index, type, normalized, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_4_0

static void REGAL_CALL error_glBlendEquationi(GLuint buf, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationi(buf, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFunci(buf, src, dst);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawArraysIndirect(mode, indirect);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElementsIndirect(mode, type, indirect);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1d(GLint location, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1d(location, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2d(GLint location, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2d(location, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3d(location, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4d(location, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1dv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2dv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3dv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4dv(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix2dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix3dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix4dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix2x3dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix2x4dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix3x2dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix3x4dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix4x2dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix4x3dv(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetUniformdv(GLuint program, GLint location, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformdv(program, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_sample_shading

static void REGAL_CALL error_glMinSampleShading(GLclampf value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMinSampleShading(value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_4_0

static void REGAL_CALL error_glPatchParameteri(GLenum pname, GLint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPatchParameteri(pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPatchParameterfv(GLenum pname, const GLfloat *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPatchParameterfv(pname, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenTransformFeedbacks(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteTransformFeedbacks(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindTransformFeedback(GLenum target, GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindTransformFeedback(target, id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsTransformFeedback(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsTransformFeedback(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glPauseTransformFeedback(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPauseTransformFeedback();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glResumeTransformFeedback(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glResumeTransformFeedback();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawTransformFeedback(GLenum mode, GLuint name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawTransformFeedback(mode, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawTransformFeedbackStream(mode, id, stream);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginQueryIndexed(target, index, id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndQueryIndexed(GLenum target, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndQueryIndexed(target, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryIndexediv(target, index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetSubroutineUniformLocation(program, shaderType, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLuint REGAL_CALL error_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGetSubroutineIndex(program, shaderType, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveSubroutineUniformiv(program, shaderType, index, pname, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveSubroutineUniformName(program, shaderType, index, bufSize, length, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveSubroutineName(program, shaderType, index, bufSize, length, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformSubroutinesuiv(shaderType, count, indices);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformSubroutineuiv(shaderType, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramStageiv(program, shaderType, pname, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_VERSION_4_1

static void REGAL_CALL error_glVertexAttribL1d(GLuint index, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL1d(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL2d(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL3d(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL4d(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL1dv(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL1dv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL2dv(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL2dv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL3dv(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL3dv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL4dv(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL4dv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribLPointer(index, size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribLdv(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReleaseShaderCompiler(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReleaseShaderCompiler();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glShaderBinary(count, shaders, binaryformat, binary, length);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDepthRangef(GLclampf zNear, GLclampf zFar)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthRangef(zNear, zFar);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearDepthf(GLclampf depth)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearDepthf(depth);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramBinary(program, binaryFormat, binary, length);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameteri(program, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glViewportArrayv(first, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glViewportIndexedf(index, x, y, w, h);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glViewportIndexedfv(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glViewportIndexedfv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glScissorArrayv(first, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glScissorIndexed(index, left, bottom, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glScissorIndexedv(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glScissorIndexedv(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthRangeArrayv(first, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthRangeIndexed(index, n, f);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFloati_v(target, index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetDoublei_v(target, index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glActiveShaderProgram(GLuint pipeline, GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glActiveShaderProgram(pipeline, program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUseProgramStages(pipeline, stages, program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar **strings)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glCreateShaderProgramv(type, count, strings);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindProgramPipeline(GLuint pipeline)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindProgramPipeline(pipeline);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteProgramPipelines(n, pipelines);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenProgramPipelines(GLsizei n, GLuint *pipelines)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenProgramPipelines(n, pipelines);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsProgramPipeline(GLuint pipeline)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsProgramPipeline(pipeline);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramPipelineiv(pipeline, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glValidateProgramPipeline(GLuint pipeline)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glValidateProgramPipeline(pipeline);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1f(GLuint program, GLint location, GLfloat v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1f(program, location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2f(program, location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3f(program, location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4f(program, location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1i(GLuint program, GLint location, GLint v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1i(program, location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2i(program, location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3i(program, location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4i(program, location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1fv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2fv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3fv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4fv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1iv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2iv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3iv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4iv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1ui(program, location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2ui(program, location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3ui(program, location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4ui(program, location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1uiv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2uiv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3uiv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4uiv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1d(GLuint program, GLint location, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1d(program, location, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2d(program, location, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3d(program, location, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4d(program, location, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1dv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2dv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3dv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4dv(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_multitexture

static void REGAL_CALL error_glActiveTextureARB(GLenum texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glActiveTextureARB(texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClientActiveTextureARB(GLenum texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClientActiveTextureARB(texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1dARB(GLenum target, GLdouble s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1dARB(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1dvARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1fARB(GLenum target, GLfloat s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1fARB(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1fvARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1iARB(GLenum target, GLint s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1iARB(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1ivARB(GLenum target, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1ivARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1sARB(GLenum target, GLshort s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1sARB(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1svARB(GLenum target, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1svARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2dARB(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2dvARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2fARB(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2fvARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2iARB(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2ivARB(GLenum target, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2ivARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2sARB(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2svARB(GLenum target, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2svARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3dARB(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3dvARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3fARB(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3fvARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3iARB(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3ivARB(GLenum target, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3ivARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3sARB(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3svARB(GLenum target, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3svARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4dARB(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4dvARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4fARB(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4fvARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4iARB(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4ivARB(GLenum target, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4ivARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4sARB(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4svARB(GLenum target, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4svARB(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_transpose_matrix

static void REGAL_CALL error_glLoadTransposeMatrixfARB(const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadTransposeMatrixfARB(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLoadTransposeMatrixdARB(const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadTransposeMatrixdARB(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultTransposeMatrixfARB(const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultTransposeMatrixfARB(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultTransposeMatrixdARB(const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultTransposeMatrixdARB(m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_multisample

static void REGAL_CALL error_glSampleCoverageARB(GLclampf value, GLboolean invert)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSampleCoverageARB(value, invert);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_texture_compression

static void REGAL_CALL error_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCompressedTexImageARB(target, lod, img);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_point_parameters

static void REGAL_CALL error_glPointParameterfARB(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterfARB(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointParameterfvARB(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterfvARB(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_vertex_blend

static void REGAL_CALL error_glWeightbvARB(GLint size, const GLbyte *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightbvARB(size, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightsvARB(GLint size, const GLshort *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightsvARB(size, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightivARB(GLint size, const GLint *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightivARB(size, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightfvARB(GLint size, const GLfloat *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightfvARB(size, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightdvARB(GLint size, const GLdouble *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightdvARB(size, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightubvARB(GLint size, const GLubyte *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightubvARB(size, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightusvARB(GLint size, const GLushort *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightusvARB(size, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightuivARB(GLint size, const GLuint *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightuivARB(size, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightPointerARB(size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexBlendARB(GLint count)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexBlendARB(count);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_matrix_palette

static void REGAL_CALL error_glCurrentPaletteMatrixARB(GLint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCurrentPaletteMatrixARB(index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixIndexubvARB(GLint size, const GLubyte *indices)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixIndexubvARB(size, indices);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixIndexusvARB(GLint size, const GLushort *indices)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixIndexusvARB(size, indices);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixIndexuivARB(GLint size, const GLuint *indices)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixIndexuivARB(size, indices);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixIndexPointerARB(size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_window_pos

static void REGAL_CALL error_glWindowPos2dARB(GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2dARB(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2dvARB(const GLdouble *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2dvARB(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2fARB(GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2fARB(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2fvARB(const GLfloat *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2fvARB(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2iARB(GLint x, GLint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2iARB(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2ivARB(const GLint *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2ivARB(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2sARB(GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2sARB(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2svARB(const GLshort *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2svARB(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3dARB(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3dvARB(const GLdouble *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3dvARB(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3fARB(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3fvARB(const GLfloat *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3fvARB(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3iARB(GLint x, GLint y, GLint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3iARB(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3ivARB(const GLint *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3ivARB(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3sARB(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3svARB(const GLshort *p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3svARB(p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_vertex_program

static void REGAL_CALL error_glVertexAttrib1dARB(GLuint index, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1dARB(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1dvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1fARB(GLuint index, GLfloat x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1fARB(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1fvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1sARB(GLuint index, GLshort x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1sARB(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1svARB(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1svARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2dARB(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2dvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2fARB(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2fvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2sARB(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2svARB(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2svARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3dARB(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3dvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3fARB(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3fvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3sARB(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3svARB(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3svARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4NbvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4NivARB(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4NivARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4NsvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4NubARB(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4NubvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4NuivARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4NusvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4bvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4dARB(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4dvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4fARB(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4fvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4ivARB(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4ivARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4sARB(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4svARB(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4svARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4ubvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4uivARB(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4uivARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4usvARB(GLuint index, const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4usvARB(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnableVertexAttribArrayARB(GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnableVertexAttribArrayARB(index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisableVertexAttribArrayARB(GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisableVertexAttribArrayARB(index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramStringARB(target, format, len, string);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindProgramARB(GLenum target, GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindProgramARB(target, program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteProgramsARB(GLsizei n, const GLuint *programs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteProgramsARB(n, programs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenProgramsARB(GLsizei n, GLuint *programs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenProgramsARB(n, programs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameter4dARB(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameter4dvARB(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameter4fARB(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameter4fvARB(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameter4dARB(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameter4dvARB(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameter4fARB(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameter4fvARB(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramEnvParameterdvARB(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramEnvParameterfvARB(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramLocalParameterdvARB(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramLocalParameterfvARB(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramivARB(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramStringARB(target, pname, string);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribdvARB(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribfvARB(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribivARB(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribPointervARB(index, pname, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsProgramARB(GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsProgramARB(program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_ARB_vertex_buffer_object

static void REGAL_CALL error_glBindBufferARB(GLenum target, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferARB(target, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteBuffersARB(n, buffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenBuffersARB(GLsizei n, GLuint *buffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenBuffersARB(n, buffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsBufferARB(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsBufferARB(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBufferDataARB(target, size, data, usage);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBufferSubDataARB(target, offset, size, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBufferSubDataARB(target, offset, size, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLvoid *REGAL_CALL error_glMapBufferARB(GLenum target, GLenum access)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLvoid * ret = rCtx->dsp.CurrTable()->glMapBufferARB(target, access);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glUnmapBufferARB(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glUnmapBufferARB(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBufferParameterivARB(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBufferPointervARB(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_occlusion_query

static void REGAL_CALL error_glGenQueriesARB(GLsizei n, GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenQueriesARB(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteQueriesARB(GLsizei n, const GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteQueriesARB(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsQueryARB(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsQueryARB(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBeginQueryARB(GLenum target, GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginQueryARB(target, id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndQueryARB(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndQueryARB(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryivARB(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryObjectivARB(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryObjectuivARB(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_shader_objects

static void REGAL_CALL error_glDeleteObjectARB(GLhandleARB obj)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteObjectARB(obj);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLhandleARB REGAL_CALL error_glGetHandleARB(GLenum pname)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLhandleARB  ret = rCtx->dsp.CurrTable()->glGetHandleARB(pname);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDetachObjectARB(containerObj, attachedObj);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLhandleARB REGAL_CALL error_glCreateShaderObjectARB(GLenum shaderType)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLhandleARB  ret = rCtx->dsp.CurrTable()->glCreateShaderObjectARB(shaderType);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glShaderSourceARB(shaderObj, count, string, length);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompileShaderARB(GLhandleARB shaderObj)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompileShaderARB(shaderObj);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLhandleARB REGAL_CALL error_glCreateProgramObjectARB(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLhandleARB  ret = rCtx->dsp.CurrTable()->glCreateProgramObjectARB();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAttachObjectARB(containerObj, attachedObj);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLinkProgramARB(GLhandleARB programObj)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLinkProgramARB(programObj);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUseProgramObjectARB(GLhandleARB programObj)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUseProgramObjectARB(programObj);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glValidateProgramARB(GLhandleARB programObj)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glValidateProgramARB(programObj);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1fARB(GLint location, GLfloat v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1fARB(location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2fARB(location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3fARB(location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4fARB(location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1iARB(GLint location, GLint v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1iARB(location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2iARB(GLint location, GLint v0, GLint v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2iARB(location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3iARB(location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4iARB(location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1fvARB(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2fvARB(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3fvARB(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4fvARB(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1ivARB(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2ivARB(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3ivARB(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4ivARB(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix2fvARB(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix3fvARB(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformMatrix4fvARB(location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetObjectParameterfvARB(obj, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetObjectParameterivARB(obj, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetInfoLogARB(obj, maxLength, length, infoLog);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetUniformLocationARB(programObj, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformfvARB(programObj, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformivARB(programObj, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetShaderSourceARB(obj, maxLength, length, source);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_vertex_shader

static void REGAL_CALL error_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindAttribLocationARB(programObj, index, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetAttribLocationARB(programObj, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_ARB_draw_buffers

static void REGAL_CALL error_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawBuffersARB(n, bufs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_color_buffer_float

static void REGAL_CALL error_glClampColorARB(GLenum target, GLenum clamp)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClampColorARB(target, clamp);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_draw_instanced

static void REGAL_CALL error_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawArraysInstancedARB(mode, start, count, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElementsInstancedARB(mode, count, type, indices, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_framebuffer_object

static GLboolean REGAL_CALL error_glIsRenderbuffer(GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsRenderbuffer(renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindRenderbuffer(target, renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteRenderbuffers(n, renderbuffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenRenderbuffers(n, renderbuffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRenderbufferStorage(target, internalformat, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetRenderbufferParameteriv(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsFramebuffer(GLuint framebuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsFramebuffer(framebuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindFramebuffer(target, framebuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteFramebuffers(n, framebuffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenFramebuffers(n, framebuffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLenum REGAL_CALL error_glCheckFramebufferStatus(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLenum  ret = rCtx->dsp.CurrTable()->glCheckFramebufferStatus(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTexture1D(target, attachment, textarget, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTexture2D(target, attachment, textarget, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenerateMipmap(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenerateMipmap(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTextureLayer(target, attachment, texture, level, layer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_geometry_shader4

static void REGAL_CALL error_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameteriARB(program, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTextureARB(target, attachment, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTextureFaceARB(target, attachment, texture, level, face);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_instanced_arrays

static void REGAL_CALL error_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribDivisorARB(index, divisor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_map_buffer_range

static GLvoid *REGAL_CALL error_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLvoid * ret = rCtx->dsp.CurrTable()->glMapBufferRange(target, offset, length, access);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFlushMappedBufferRange(target, offset, length);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_texture_buffer_object

static void REGAL_CALL error_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexBufferARB(target, internalformat, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_vertex_array_object

static void REGAL_CALL error_glBindVertexArray(GLuint array)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindVertexArray(array);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteVertexArrays(n, arrays);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenVertexArrays(GLsizei n, GLuint *arrays)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenVertexArrays(n, arrays);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsVertexArray(GLuint array)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsVertexArray(array);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_ARB_uniform_buffer_object

static void REGAL_CALL error_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGetUniformBlockIndex(program, uniformBlockName);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_copy_buffer

static void REGAL_CALL error_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_draw_elements_base_vertex

static void REGAL_CALL error_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount, const GLint *basevertex)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_provoking_vertex

static void REGAL_CALL error_glProvokingVertex(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProvokingVertex(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_sync

static GLsync REGAL_CALL error_glFenceSync(GLenum condition, GLbitfield flags)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLsync  ret = rCtx->dsp.CurrTable()->glFenceSync(condition, flags);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glIsSync(GLsync sync)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsSync(sync);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glDeleteSync(GLsync sync)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteSync(sync);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLenum REGAL_CALL error_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLenum  ret = rCtx->dsp.CurrTable()->glClientWaitSync(sync, flags, timeout);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWaitSync(sync, flags, timeout);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetInteger64v(GLenum pname, GLint64 *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetInteger64v(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetSynciv(sync, pname, bufSize, length, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_texture_multisample

static void REGAL_CALL error_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultisamplefv(pname, index, val);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSampleMaski(GLuint index, GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSampleMaski(index, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_draw_buffers_blend

static void REGAL_CALL error_glBlendEquationiARB(GLuint buf, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationiARB(buf, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFunciARB(buf, src, dst);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_sample_shading

static void REGAL_CALL error_glMinSampleShadingARB(GLclampf value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMinSampleShadingARB(value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_shading_language_include

static void REGAL_CALL error_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedStringARB(type, namelen, name, stringlen, string);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteNamedStringARB(GLint namelen, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteNamedStringARB(namelen, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompileShaderIncludeARB(shader, count, path, length);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsNamedStringARB(GLint namelen, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsNamedStringARB(namelen, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedStringivARB(namelen, name, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ARB_debug_output

static void REGAL_CALL error_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDebugMessageControlARB(source, type, severity, count, ids, enabled);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDebugMessageInsertARB(source, type, id, severity, length, buf);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, GLvoid *userParam)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDebugMessageCallbackARB(callback, userParam);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glGetDebugMessageLogARB(GLuint count, GLsizei logsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGetDebugMessageLogARB(count, logsize, sources, types, ids, severities, lengths, messageLog);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_ARB_robustness

static GLenum REGAL_CALL error_glGetGraphicsResetStatusARB(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLenum  ret = rCtx->dsp.CurrTable()->glGetGraphicsResetStatusARB();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnMapdvARB(target, query, bufSize, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnMapfvARB(target, query, bufSize, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnMapivARB(target, query, bufSize, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnPixelMapfvARB(map, bufSize, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnPixelMapuivARB(map, bufSize, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnPixelMapusvARB(map, bufSize, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnPolygonStippleARB(bufSize, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnTexImageARB(target, level, format, type, bufSize, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReadnPixelsARB(x, y, width, height, format, type, bufSize, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnColorTableARB(target, format, type, bufSize, table);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnConvolutionFilterARB(target, format, type, bufSize, image);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnHistogramARB(target, reset, format, type, bufSize, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnMinmaxARB(target, reset, format, type, bufSize, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnCompressedTexImageARB(target, lod, bufSize, img);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnUniformfvARB(program, location, bufSize, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnUniformivARB(program, location, bufSize, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnUniformuivARB(program, location, bufSize, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetnUniformdvARB(program, location, bufSize, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_blend_color

static void REGAL_CALL error_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendColorEXT(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_polygon_offset

static void REGAL_CALL error_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPolygonOffsetEXT(factor, bias);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_texture3D

static void REGAL_CALL error_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_texture_filter4

static void REGAL_CALL error_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexFilterFuncSGIS(target, filter, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexFilterFuncSGIS(target, filter, n, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_subtexture

static void REGAL_CALL error_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_copy_texture

static void REGAL_CALL error_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_histogram

static void REGAL_CALL error_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetHistogramEXT(target, reset, format, type, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetHistogramParameterfvEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetHistogramParameterivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMinmaxEXT(target, reset, format, type, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMinmaxParameterfvEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMinmaxParameterivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glHistogramEXT(target, width, internalformat, sink);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMinmaxEXT(target, internalformat, sink);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glResetHistogramEXT(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glResetHistogramEXT(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glResetMinmaxEXT(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glResetMinmaxEXT(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_convolution

static void REGAL_CALL error_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionParameterfEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionParameterfvEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionParameteriEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glConvolutionParameterivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetConvolutionFilterEXT(target, format, type, image);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetConvolutionParameterfvEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetConvolutionParameterivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetSeparableFilterEXT(target, format, type, row, column, span);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGI_color_table

static void REGAL_CALL error_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorTableSGI(target, internalformat, width, format, type, table);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorTableParameterfvSGI(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorTableParameterivSGI(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyColorTableSGI(target, internalformat, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTableSGI(target, format, type, table);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTableParameterfvSGI(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTableParameterivSGI(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_pixel_texture

static void REGAL_CALL error_glPixelTexGenSGIX(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTexGenSGIX(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_pixel_texture

static void REGAL_CALL error_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTexGenParameteriSGIS(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTexGenParameterivSGIS(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTexGenParameterfSGIS(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTexGenParameterfvSGIS(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPixelTexGenParameterivSGIS(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPixelTexGenParameterfvSGIS(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_texture4D

static void REGAL_CALL error_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_texture_object

static GLboolean REGAL_CALL error_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glAreTexturesResidentEXT(n, textures, residences);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindTextureEXT(GLenum target, GLuint texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindTextureEXT(target, texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteTexturesEXT(n, textures);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenTexturesEXT(GLsizei n, GLuint *textures)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenTexturesEXT(n, textures);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsTextureEXT(GLuint texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsTextureEXT(texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPrioritizeTexturesEXT(n, textures, priorities);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_detail_texture

static void REGAL_CALL error_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDetailTexFuncSGIS(target, n, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetDetailTexFuncSGIS(target, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_sharpen_texture

static void REGAL_CALL error_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSharpenTexFuncSGIS(target, n, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetSharpenTexFuncSGIS(target, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_multisample

static void REGAL_CALL error_glSampleMaskSGIS(GLclampf value, GLboolean invert)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSampleMaskSGIS(value, invert);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSamplePatternSGIS(GLenum pattern)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSamplePatternSGIS(pattern);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_vertex_array

static void REGAL_CALL error_glArrayElementEXT(GLint i)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glArrayElementEXT(i);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorPointerEXT(size, type, stride, count, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawArraysEXT(mode, first, count);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEdgeFlagPointerEXT(stride, count, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPointervEXT(GLenum pname, GLvoid **params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPointervEXT(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexPointerEXT(type, stride, count, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalPointerEXT(type, stride, count, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordPointerEXT(size, type, stride, count, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexPointerEXT(size, type, stride, count, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_blend_minmax

static void REGAL_CALL error_glBlendEquationEXT(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationEXT(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_sprite

static void REGAL_CALL error_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSpriteParameterfSGIX(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSpriteParameterfvSGIX(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSpriteParameteriSGIX(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSpriteParameteriSGIX(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSpriteParameterivSGIX(GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSpriteParameterivSGIX(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_point_parameters

static void REGAL_CALL error_glPointParameterfEXT(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterfEXT(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointParameterfvEXT(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterfvEXT(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_point_parameters

static void REGAL_CALL error_glPointParameterfSGIS(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterfSGIS(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterfvSGIS(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_instruments

static GLint REGAL_CALL error_glGetInstrumentsSGIX(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetInstrumentsSGIX();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glInstrumentsBufferSGIX(size, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glPollInstrumentsSGIX(GLint *marker_p)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glPollInstrumentsSGIX(marker_p);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glReadInstrumentsSGIX(GLint marker)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReadInstrumentsSGIX(marker);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStartInstrumentsSGIX(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStartInstrumentsSGIX();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStopInstrumentsSGIX(GLint marker)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStopInstrumentsSGIX(marker);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_framezoom

static void REGAL_CALL error_glFrameZoomSGIX(GLint factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFrameZoomSGIX(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_tag_sample_buffer

static void REGAL_CALL error_glTagSampleBufferSGIX(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTagSampleBufferSGIX();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_polynomial_ffd

static void REGAL_CALL error_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeformSGIX(GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeformSGIX(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadIdentityDeformationMapSGIX(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_reference_plane

static void REGAL_CALL error_glReferencePlaneSGIX(const GLdouble *equation)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReferencePlaneSGIX(equation);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_flush_raster

static void REGAL_CALL error_glFlushRasterSGIX(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFlushRasterSGIX();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_fog_function

static void REGAL_CALL error_glFogFuncSGIS(GLsizei n, const GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogFuncSGIS(n, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFogFuncSGIS(GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFogFuncSGIS(points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_HP_image_transform

static void REGAL_CALL error_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glImageTransformParameteriHP(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glImageTransformParameterfHP(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glImageTransformParameterivHP(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glImageTransformParameterfvHP(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetImageTransformParameterivHP(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetImageTransformParameterfvHP(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_color_subtable

static void REGAL_CALL error_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorSubTableEXT(target, start, count, format, type, table);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyColorSubTableEXT(target, start, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_PGI_misc_hints

static void REGAL_CALL error_glHintPGI(GLenum target, GLint mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glHintPGI(target, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_paletted_texture

static void REGAL_CALL error_glColorTableEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorTableEXT(target, internalformat, width, format, type, table);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTableEXT(target, format, type, table);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTableParameterivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetColorTableParameterfvEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_list_priority

static void REGAL_CALL error_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetListParameterfvSGIX(list, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetListParameterivSGIX(list, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glListParameterfSGIX(list, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glListParameterfvSGIX(list, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glListParameteriSGIX(list, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glListParameterivSGIX(list, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_index_material

static void REGAL_CALL error_glIndexMaterialEXT(GLenum face, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexMaterialEXT(face, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_index_func

static void REGAL_CALL error_glIndexFuncEXT(GLenum func, GLclampf ref)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexFuncEXT(func, ref);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_compiled_vertex_array

static void REGAL_CALL error_glLockArraysEXT(GLint first, GLsizei count)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLockArraysEXT(first, count);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUnlockArraysEXT(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUnlockArraysEXT();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_cull_vertex

static void REGAL_CALL error_glCullParameterdvEXT(GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCullParameterdvEXT(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCullParameterfvEXT(GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCullParameterfvEXT(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_fragment_lighting

static void REGAL_CALL error_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentColorMaterialSGIX(face, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentLightfSGIX(light, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentLightfvSGIX(light, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentLightiSGIX(light, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentLightivSGIX(light, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentLightModelfSGIX(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentLightModelfvSGIX(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentLightModeliSGIX(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentLightModeliSGIX(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentLightModelivSGIX(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentMaterialfSGIX(face, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentMaterialfvSGIX(face, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentMaterialiSGIX(face, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFragmentMaterialivSGIX(face, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFragmentLightfvSGIX(light, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFragmentLightivSGIX(light, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFragmentMaterialfvSGIX(face, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFragmentMaterialivSGIX(face, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glLightEnviSGIX(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLightEnviSGIX(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_draw_range_elements

static void REGAL_CALL error_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawRangeElementsEXT(mode, start, end, count, type, indices);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_light_texture

static void REGAL_CALL error_glApplyTextureEXT(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glApplyTextureEXT(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureLightEXT(GLenum pname)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureLightEXT(pname);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureMaterialEXT(GLenum face, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureMaterialEXT(face, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_async

static void REGAL_CALL error_glAsyncMarkerSGIX(GLuint marker)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAsyncMarkerSGIX(marker);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glFinishAsyncSGIX(GLuint *markerp)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glFinishAsyncSGIX(markerp);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLint REGAL_CALL error_glPollAsyncSGIX(GLuint *markerp)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glPollAsyncSGIX(markerp);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLuint REGAL_CALL error_glGenAsyncMarkersSGIX(GLsizei range)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGenAsyncMarkersSGIX(range);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteAsyncMarkersSGIX(marker, range);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsAsyncMarkerSGIX(GLuint marker)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsAsyncMarkerSGIX(marker);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_INTEL_parallel_arrays

static void REGAL_CALL error_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexPointervINTEL(size, type, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalPointervINTEL(type, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorPointervINTEL(size, type, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordPointervINTEL(size, type, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_pixel_transform

static void REGAL_CALL error_glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTransformParameteriEXT(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTransformParameterfEXT(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTransformParameterivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelTransformParameterfvEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_secondary_color

static void REGAL_CALL error_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3bEXT(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3bvEXT(const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3bvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3dEXT(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3dvEXT(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3dvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3fEXT(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3fvEXT(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3fvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3iEXT(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3ivEXT(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3ivEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3sEXT(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3svEXT(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3svEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3ubEXT(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3ubvEXT(const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3ubvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3uiEXT(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3uivEXT(const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3uivEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3usEXT(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3usvEXT(const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3usvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColorPointerEXT(size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_texture_perturb_normal

static void REGAL_CALL error_glTextureNormalEXT(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureNormalEXT(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_multi_draw_arrays

static void REGAL_CALL error_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiDrawArraysEXT(mode, first, count, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiDrawElementsEXT(mode, count, type, indices, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_fog_coord

static void REGAL_CALL error_glFogCoordfEXT(GLfloat coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordfEXT(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordfvEXT(const GLfloat *coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordfvEXT(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoorddEXT(GLdouble coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoorddEXT(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoorddvEXT(const GLdouble *coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoorddvEXT(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordPointerEXT(type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_coordinate_frame

static void REGAL_CALL error_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3bEXT(tx, ty, tz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3bvEXT(const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3bvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3dEXT(tx, ty, tz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3dvEXT(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3dvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3fEXT(tx, ty, tz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3fvEXT(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3fvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3iEXT(tx, ty, tz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3ivEXT(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3ivEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3sEXT(tx, ty, tz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangent3svEXT(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangent3svEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3bEXT(bx, by, bz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3bvEXT(const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3bvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3dEXT(bx, by, bz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3dvEXT(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3dvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3fEXT(bx, by, bz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3fvEXT(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3fvEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3iEXT(bx, by, bz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3ivEXT(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3ivEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3sEXT(bx, by, bz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormal3svEXT(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormal3svEXT(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTangentPointerEXT(type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBinormalPointerEXT(type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SUNX_constant_data

static void REGAL_CALL error_glFinishTextureSUNX(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFinishTextureSUNX();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SUN_global_alpha

static void REGAL_CALL error_glGlobalAlphaFactorbSUN(GLbyte factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGlobalAlphaFactorbSUN(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGlobalAlphaFactorsSUN(GLshort factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGlobalAlphaFactorsSUN(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGlobalAlphaFactoriSUN(GLint factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGlobalAlphaFactoriSUN(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGlobalAlphaFactorfSUN(GLfloat factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGlobalAlphaFactorfSUN(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGlobalAlphaFactordSUN(GLdouble factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGlobalAlphaFactordSUN(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGlobalAlphaFactorubSUN(GLubyte factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGlobalAlphaFactorubSUN(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGlobalAlphaFactorusSUN(GLushort factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGlobalAlphaFactorusSUN(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGlobalAlphaFactoruiSUN(GLuint factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGlobalAlphaFactoruiSUN(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SUN_triangle_list

static void REGAL_CALL error_glReplacementCodeuiSUN(GLuint code)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiSUN(code);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeusSUN(GLushort code)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeusSUN(code);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeubSUN(GLubyte code)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeubSUN(code);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuivSUN(const GLuint *code)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuivSUN(code);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeusvSUN(const GLushort *code)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeusvSUN(code);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeubvSUN(const GLubyte *code)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeubvSUN(code);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodePointerSUN(type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SUN_vertex

static void REGAL_CALL error_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4ubVertex2fSUN(r, g, b, a, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4ubVertex2fvSUN(c, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4ubVertex3fvSUN(c, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3fVertex3fSUN(r, g, b, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3fVertex3fvSUN(c, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3fVertex3fvSUN(n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4fNormal3fVertex3fvSUN(c, n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fVertex3fSUN(s, t, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fVertex3fvSUN(tc, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4fVertex4fvSUN(tc, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiVertex3fSUN(rc, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiVertex3fvSUN(rc, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_blend_func_separate

static void REGAL_CALL error_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_INGR_blend_func_separate

static void REGAL_CALL error_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_vertex_weighting

static void REGAL_CALL error_glVertexWeightfEXT(GLfloat weight)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexWeightfEXT(weight);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexWeightfvEXT(const GLfloat *weight)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexWeightfvEXT(weight);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexWeightPointerEXT(size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_vertex_array_range

static void REGAL_CALL error_glFlushVertexArrayRangeNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFlushVertexArrayRangeNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexArrayRangeNV(size, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_register_combiners

static void REGAL_CALL error_glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCombinerParameterfvNV(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCombinerParameterfNV(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCombinerParameterfNV(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCombinerParameterivNV(GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCombinerParameterivNV(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCombinerParameteriNV(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCombinerParameteriNV(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFinalCombinerInputNV(variable, input, mapping, componentUsage);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCombinerOutputParameterivNV(stage, portion, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFinalCombinerInputParameterfvNV(variable, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFinalCombinerInputParameterivNV(variable, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_MESA_resize_buffers

static void REGAL_CALL error_glResizeBuffersMESA(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glResizeBuffersMESA();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_MESA_window_pos

static void REGAL_CALL error_glWindowPos2dMESA(GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2dMESA(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2dvMESA(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2dvMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2fMESA(GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2fMESA(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2fvMESA(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2fvMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2iMESA(GLint x, GLint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2iMESA(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2ivMESA(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2ivMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2sMESA(GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2sMESA(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos2svMESA(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos2svMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3dMESA(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3dvMESA(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3dvMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3fMESA(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3fvMESA(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3fvMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3iMESA(GLint x, GLint y, GLint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3iMESA(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3ivMESA(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3ivMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3sMESA(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos3svMESA(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos3svMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos4dMESA(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos4dvMESA(const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos4dvMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos4fMESA(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos4fvMESA(const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos4fvMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos4iMESA(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos4ivMESA(const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos4ivMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos4sMESA(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWindowPos4svMESA(const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWindowPos4svMESA(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_IBM_multimode_draw_arrays

static void REGAL_CALL error_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_IBM_vertex_array_lists

static void REGAL_CALL error_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorPointerListIBM(size, type, stride, pointer, ptrstride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexPointerListIBM(type, stride, pointer, ptrstride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalPointerListIBM(type, stride, pointer, ptrstride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_3DFX_tbuffer

static void REGAL_CALL error_glTbufferMask3DFX(GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTbufferMask3DFX(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_multisample

static void REGAL_CALL error_glSampleMaskEXT(GLclampf value, GLboolean invert)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSampleMaskEXT(value, invert);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSamplePatternEXT(GLenum pattern)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSamplePatternEXT(pattern);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIS_texture_color_mask

static void REGAL_CALL error_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureColorMaskSGIS(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_igloo_interface

static void REGAL_CALL error_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIglooInterfaceSGIX(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_fence

static void REGAL_CALL error_glDeleteFencesNV(GLsizei n, const GLuint *fences)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteFencesNV(n, fences);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenFencesNV(GLsizei n, GLuint *fences)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenFencesNV(n, fences);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsFenceNV(GLuint fence)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsFenceNV(fence);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glTestFenceNV(GLuint fence)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glTestFenceNV(fence);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFenceivNV(fence, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFinishFenceNV(GLuint fence)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFinishFenceNV(fence);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSetFenceNV(GLuint fence, GLenum condition)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSetFenceNV(fence, condition);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_evaluators

static void REGAL_CALL error_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapParameterivNV(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapParameterfvNV(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMapParameterivNV(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMapParameterfvNV(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMapAttribParameterivNV(target, index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMapAttribParameterfvNV(target, index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEvalMapsNV(GLenum target, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEvalMapsNV(target, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_register_combiners2

static void REGAL_CALL error_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCombinerStageParameterfvNV(stage, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCombinerStageParameterfvNV(stage, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_vertex_program

static GLboolean REGAL_CALL error_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glAreProgramsResidentNV(n, programs, residences);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindProgramNV(GLenum target, GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindProgramNV(target, id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteProgramsNV(GLsizei n, const GLuint *programs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteProgramsNV(n, programs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glExecuteProgramNV(target, id, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenProgramsNV(GLsizei n, GLuint *programs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenProgramsNV(n, programs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramParameterdvNV(target, index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramParameterfvNV(target, index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramivNV(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramStringNV(id, pname, program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTrackMatrixivNV(target, address, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribdvNV(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribfvNV(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribivNV(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribPointervNV(index, pname, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsProgramNV(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsProgramNV(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glLoadProgramNV(target, id, len, program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameter4dNV(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameter4dvNV(target, index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameter4fNV(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameter4fvNV(target, index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameters4dvNV(target, index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameters4fvNV(target, index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRequestResidentProgramsNV(n, programs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTrackMatrixNV(target, address, matrix, transform);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribPointerNV(index, fsize, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1dNV(GLuint index, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1dNV(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1dvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1fNV(GLuint index, GLfloat x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1fNV(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1fvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1sNV(GLuint index, GLshort x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1sNV(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1svNV(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1svNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2dNV(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2dvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2fNV(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2fvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2sNV(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2svNV(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2svNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3dNV(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3dvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3fNV(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3fvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3sNV(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3svNV(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3svNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4dNV(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4dvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4fNV(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4fvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4sNV(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4svNV(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4svNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4ubNV(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4ubvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs1dvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs1fvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs1svNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs2dvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs2fvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs2svNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs3dvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs3fvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs3svNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs4dvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs4fvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs4svNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs4ubvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_envmap_bumpmap

static void REGAL_CALL error_glTexBumpParameterivATI(GLenum pname, const GLint *param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexBumpParameterivATI(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexBumpParameterfvATI(GLenum pname, const GLfloat *param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexBumpParameterfvATI(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexBumpParameterivATI(GLenum pname, GLint *param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexBumpParameterivATI(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexBumpParameterfvATI(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_fragment_shader

static GLuint REGAL_CALL error_glGenFragmentShadersATI(GLuint range)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGenFragmentShadersATI(range);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindFragmentShaderATI(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindFragmentShaderATI(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteFragmentShaderATI(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteFragmentShaderATI(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBeginFragmentShaderATI(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginFragmentShaderATI();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndFragmentShaderATI(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndFragmentShaderATI();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPassTexCoordATI(dst, coord, swizzle);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSampleMapATI(dst, interp, swizzle);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSetFragmentShaderConstantATI(dst, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_pn_triangles

static void REGAL_CALL error_glPNTrianglesiATI(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPNTrianglesiATI(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPNTrianglesfATI(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPNTrianglesfATI(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_vertex_array_object

static GLuint REGAL_CALL error_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glNewObjectBufferATI(size, pointer, usage);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glIsObjectBufferATI(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsObjectBufferATI(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetObjectBufferfvATI(buffer, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetObjectBufferivATI(buffer, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFreeObjectBufferATI(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFreeObjectBufferATI(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glArrayObjectATI(array, size, type, stride, buffer, offset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetArrayObjectfvATI(array, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetArrayObjectivATI(array, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantArrayObjectATI(id, type, stride, buffer, offset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVariantArrayObjectfvATI(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVariantArrayObjectivATI(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_vertex_shader

static void REGAL_CALL error_glBeginVertexShaderEXT(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginVertexShaderEXT();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndVertexShaderEXT(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndVertexShaderEXT();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindVertexShaderEXT(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindVertexShaderEXT(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glGenVertexShadersEXT(GLuint range)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGenVertexShadersEXT(range);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glDeleteVertexShaderEXT(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteVertexShaderEXT(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glShaderOp1EXT(op, res, arg1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glShaderOp2EXT(op, res, arg1, arg2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glShaderOp3EXT(op, res, arg1, arg2, arg3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSwizzleEXT(res, in, outX, outY, outZ, outW);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWriteMaskEXT(res, in, outX, outY, outZ, outW);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glInsertComponentEXT(res, src, num);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glExtractComponentEXT(res, src, num);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGenSymbolsEXT(datatype, storagetype, range, components);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSetInvariantEXT(id, type, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSetLocalConstantEXT(id, type, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantbvEXT(GLuint id, const GLbyte *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantbvEXT(id, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantsvEXT(GLuint id, const GLshort *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantsvEXT(id, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantivEXT(GLuint id, const GLint *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantivEXT(id, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantfvEXT(GLuint id, const GLfloat *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantfvEXT(id, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantdvEXT(GLuint id, const GLdouble *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantdvEXT(id, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantubvEXT(GLuint id, const GLubyte *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantubvEXT(id, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantusvEXT(GLuint id, const GLushort *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantusvEXT(id, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantuivEXT(GLuint id, const GLuint *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantuivEXT(id, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVariantPointerEXT(id, type, stride, addr);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnableVariantClientStateEXT(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnableVariantClientStateEXT(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisableVariantClientStateEXT(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisableVariantClientStateEXT(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glBindLightParameterEXT(GLenum light, GLenum value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glBindLightParameterEXT(light, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLuint REGAL_CALL error_glBindMaterialParameterEXT(GLenum face, GLenum value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glBindMaterialParameterEXT(face, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLuint REGAL_CALL error_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glBindTexGenParameterEXT(unit, coord, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLuint REGAL_CALL error_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glBindTextureUnitParameterEXT(unit, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLuint REGAL_CALL error_glBindParameterEXT(GLenum value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glBindParameterEXT(value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glIsVariantEnabledEXT(GLuint id, GLenum cap)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsVariantEnabledEXT(id, cap);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVariantBooleanvEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVariantIntegervEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVariantFloatvEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVariantPointervEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetInvariantBooleanvEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetInvariantIntegervEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetInvariantFloatvEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetLocalConstantBooleanvEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetLocalConstantIntegervEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetLocalConstantFloatvEXT(id, value, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_vertex_streams

static void REGAL_CALL error_glVertexStream1sATI(GLenum stream, GLshort x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream1sATI(stream, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream1svATI(GLenum stream, const GLshort *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream1svATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream1iATI(GLenum stream, GLint x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream1iATI(stream, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream1ivATI(GLenum stream, const GLint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream1ivATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream1fATI(GLenum stream, GLfloat x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream1fATI(stream, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream1fvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream1dATI(GLenum stream, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream1dATI(stream, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream1dvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream2sATI(stream, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream2svATI(GLenum stream, const GLshort *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream2svATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream2iATI(stream, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream2ivATI(GLenum stream, const GLint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream2ivATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream2fATI(stream, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream2fvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream2dATI(stream, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream2dvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream3sATI(stream, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream3svATI(GLenum stream, const GLshort *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream3svATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream3iATI(stream, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream3ivATI(GLenum stream, const GLint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream3ivATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream3fATI(stream, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream3fvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream3dATI(stream, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream3dvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream4sATI(stream, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream4svATI(GLenum stream, const GLshort *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream4svATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream4iATI(stream, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream4ivATI(GLenum stream, const GLint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream4ivATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream4fATI(stream, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream4fvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream4dATI(stream, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexStream4dvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3bATI(stream, nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3bvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3sATI(stream, nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3svATI(GLenum stream, const GLshort *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3svATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3iATI(stream, nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3ivATI(GLenum stream, const GLint *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3ivATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3fATI(stream, nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3fvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3dATI(stream, nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalStream3dvATI(stream, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClientActiveVertexStreamATI(GLenum stream)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClientActiveVertexStreamATI(stream);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexBlendEnviATI(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexBlendEnviATI(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexBlendEnvfATI(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_element_array

static void REGAL_CALL error_glElementPointerATI(GLenum type, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glElementPointerATI(type, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawElementArrayATI(GLenum mode, GLsizei count)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElementArrayATI(mode, count);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawRangeElementArrayATI(mode, start, end, count);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SUN_mesh_array

static void REGAL_CALL error_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawMeshArraysSUN(mode, first, count, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_occlusion_query

static void REGAL_CALL error_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenOcclusionQueriesNV(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteOcclusionQueriesNV(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsOcclusionQueryNV(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsOcclusionQueryNV(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBeginOcclusionQueryNV(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginOcclusionQueryNV(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndOcclusionQueryNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndOcclusionQueryNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetOcclusionQueryivNV(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetOcclusionQueryuivNV(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_point_sprite

static void REGAL_CALL error_glPointParameteriNV(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameteriNV(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPointParameterivNV(GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPointParameterivNV(pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_stencil_two_side

static void REGAL_CALL error_glActiveStencilFaceEXT(GLenum face)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glActiveStencilFaceEXT(face);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_APPLE_element_array

static void REGAL_CALL error_glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glElementPointerAPPLE(type, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElementArrayAPPLE(mode, first, count);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_APPLE_fence

static void REGAL_CALL error_glGenFencesAPPLE(GLsizei n, GLuint *fences)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenFencesAPPLE(n, fences);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteFencesAPPLE(n, fences);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSetFenceAPPLE(GLuint fence)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSetFenceAPPLE(fence);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsFenceAPPLE(GLuint fence)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsFenceAPPLE(fence);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glTestFenceAPPLE(GLuint fence)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glTestFenceAPPLE(fence);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glFinishFenceAPPLE(GLuint fence)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFinishFenceAPPLE(fence);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glTestObjectAPPLE(GLenum object, GLuint name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glTestObjectAPPLE(object, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glFinishObjectAPPLE(GLenum object, GLint name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFinishObjectAPPLE(object, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_APPLE_vertex_array_object

static void REGAL_CALL error_glBindVertexArrayAPPLE(GLuint array)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindVertexArrayAPPLE(array);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteVertexArraysAPPLE(n, arrays);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenVertexArraysAPPLE(n, arrays);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsVertexArrayAPPLE(GLuint array)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsVertexArrayAPPLE(array);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_APPLE_vertex_array_range

static void REGAL_CALL error_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexArrayRangeAPPLE(length, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFlushVertexArrayRangeAPPLE(length, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexArrayParameteriAPPLE(pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_draw_buffers

static void REGAL_CALL error_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawBuffersATI(n, bufs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_fragment_program

static void REGAL_CALL error_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramNamedParameter4fvNV(id, len, name, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramNamedParameter4dvNV(id, len, name, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramNamedParameterfvNV(id, len, name, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramNamedParameterdvNV(id, len, name, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_half_float

static void REGAL_CALL error_glVertex2hNV(GLhalfNV x, GLhalfNV y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2hNV(x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex2hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex2hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3hNV(x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex3hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex3hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4hNV(x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertex4hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertex4hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3hNV(nx, ny, nz);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormal3hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormal3hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3hNV(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor3hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor3hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4hNV(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColor4hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColor4hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1hNV(GLhalfNV s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1hNV(s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord1hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord1hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2hNV(s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord2hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord2hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3hNV(s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord3hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord3hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4hNV(s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoord4hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoord4hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1hNV(target, s);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord1hvNV(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2hNV(target, s, t);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord2hvNV(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3hNV(target, s, t, r);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord3hvNV(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4hNV(target, s, t, r, q);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoord4hvNV(target, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordhNV(GLhalfNV coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordhNV(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordhvNV(const GLhalfNV *coord)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordhvNV(coord);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3hNV(red, green, blue);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColor3hvNV(const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColor3hvNV(v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexWeighthNV(GLhalfNV weight)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexWeighthNV(weight);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexWeighthvNV(const GLhalfNV *weight)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexWeighthvNV(weight);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1hNV(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib1hvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2hNV(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib2hvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3hNV(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib3hvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4hNV(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttrib4hvNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs1hvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs2hvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs3hvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribs4hvNV(index, count, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_pixel_data_range

static void REGAL_CALL error_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPixelDataRangeNV(target, size, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFlushPixelDataRangeNV(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFlushPixelDataRangeNV(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_primitive_restart

static void REGAL_CALL error_glPrimitiveRestartNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPrimitiveRestartNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPrimitiveRestartIndexNV(GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPrimitiveRestartIndexNV(index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_map_object_buffer

static GLvoid *REGAL_CALL error_glMapObjectBufferATI(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLvoid * ret = rCtx->dsp.CurrTable()->glMapObjectBufferATI(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glUnmapObjectBufferATI(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUnmapObjectBufferATI(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_separate_stencil

static void REGAL_CALL error_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilOpSeparateATI(face, sfail, dpfail, dppass);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_ATI_vertex_attrib_array_object

static void REGAL_CALL error_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribArrayObjectfvATI(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribArrayObjectivATI(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_depth_bounds_test

static void REGAL_CALL error_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthBoundsEXT(zmin, zmax);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_blend_equation_separate

static void REGAL_CALL error_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationSeparateEXT(modeRGB, modeAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_framebuffer_object

static GLboolean REGAL_CALL error_glIsRenderbufferEXT(GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsRenderbufferEXT(renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindRenderbufferEXT(target, renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteRenderbuffersEXT(n, renderbuffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenRenderbuffersEXT(n, renderbuffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRenderbufferStorageEXT(target, internalformat, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetRenderbufferParameterivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsFramebufferEXT(GLuint framebuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsFramebufferEXT(framebuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindFramebufferEXT(target, framebuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteFramebuffersEXT(n, framebuffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenFramebuffersEXT(n, framebuffers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLenum REGAL_CALL error_glCheckFramebufferStatusEXT(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLenum  ret = rCtx->dsp.CurrTable()->glCheckFramebufferStatusEXT(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenerateMipmapEXT(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenerateMipmapEXT(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_GREMEDY_string_marker

static void REGAL_CALL error_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStringMarkerGREMEDY(len, string);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_stencil_clear_tag

static void REGAL_CALL error_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilClearTagEXT(stencilTagBits, stencilClearTag);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_framebuffer_blit

static void REGAL_CALL error_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_framebuffer_multisample

static void REGAL_CALL error_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_timer_query

static void REGAL_CALL error_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryObjecti64vEXT(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetQueryObjectui64vEXT(id, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_gpu_program_parameters

static void REGAL_CALL error_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameters4fvEXT(target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameters4fvEXT(target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_APPLE_flush_buffer_range

static void REGAL_CALL error_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBufferParameteriAPPLE(target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFlushMappedBufferRangeAPPLE(target, offset, size);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_gpu_program4

static void REGAL_CALL error_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameterI4iNV(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameterI4ivNV(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParametersI4ivNV(target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParameterI4uivNV(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramLocalParametersI4uivNV(target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameterI4iNV(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameterI4ivNV(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParametersI4ivNV(target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParameterI4uivNV(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramEnvParametersI4uivNV(target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramLocalParameterIivNV(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramLocalParameterIuivNV(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramEnvParameterIivNV(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetProgramEnvParameterIuivNV(target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_geometry_program4

static void REGAL_CALL error_glProgramVertexLimitNV(GLenum target, GLint limit)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramVertexLimitNV(target, limit);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTextureEXT(target, attachment, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_geometry_shader4

static void REGAL_CALL error_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramParameteriEXT(program, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_vertex_program4

static void REGAL_CALL error_glVertexAttribI1iEXT(GLuint index, GLint x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI1iEXT(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI2iEXT(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI3iEXT(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4iEXT(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI1uiEXT(GLuint index, GLuint x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI1uiEXT(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI2uiEXT(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI3uiEXT(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4uiEXT(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI1ivEXT(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI1ivEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI2ivEXT(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI2ivEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI3ivEXT(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI3ivEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4ivEXT(GLuint index, const GLint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4ivEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI1uivEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI2uivEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI3uivEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4uivEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4bvEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4svEXT(GLuint index, const GLshort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4svEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4ubvEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribI4usvEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribIPointerEXT(index, size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribIivEXT(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribIuivEXT(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_gpu_shader4

static void REGAL_CALL error_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformuivEXT(program, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindFragDataLocationEXT(program, color, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetFragDataLocationEXT(GLuint program, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetFragDataLocationEXT(program, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glUniform1uiEXT(GLint location, GLuint v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1uiEXT(location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2uiEXT(location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3uiEXT(location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4uiEXT(location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1uivEXT(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2uivEXT(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3uivEXT(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4uivEXT(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_draw_instanced

static void REGAL_CALL error_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawArraysInstancedEXT(mode, start, count, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_texture_buffer_object

static void REGAL_CALL error_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexBufferEXT(target, internalformat, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_depth_buffer_float

static void REGAL_CALL error_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthRangedNV(zNear, zFar);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearDepthdNV(GLdouble depth)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearDepthdNV(depth);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDepthBoundsdNV(zmin, zmax);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_framebuffer_multisample_coverage

static void REGAL_CALL error_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_parameter_buffer_object

static void REGAL_CALL error_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramBufferParametersfvNV(target, buffer, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramBufferParametersIivNV(target, buffer, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramBufferParametersIuivNV(target, buffer, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_draw_buffers2

static void REGAL_CALL error_glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorMaskIndexedEXT(index, r, g, b, a);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBooleanIndexedvEXT(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetIntegerIndexedvEXT(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnableIndexedEXT(GLenum target, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnableIndexedEXT(target, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisableIndexedEXT(GLenum target, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisableIndexedEXT(target, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsEnabledIndexedEXT(target, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_NV_transform_feedback

static void REGAL_CALL error_glBeginTransformFeedbackNV(GLenum primitiveMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginTransformFeedbackNV(primitiveMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndTransformFeedbackNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndTransformFeedbackNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTransformFeedbackAttribsNV(count, attribs, bufferMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferRangeNV(target, index, buffer, offset, size);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferOffsetNV(target, index, buffer, offset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferBaseNV(target, index, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glActiveVaryingNV(GLuint program, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glActiveVaryingNV(program, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetVaryingLocationNV(GLuint program, const GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetVaryingLocationNV(program, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTransformFeedbackVaryingNV(program, index, location);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_bindable_uniform

static void REGAL_CALL error_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformBufferEXT(program, location, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLint REGAL_CALL error_glGetUniformBufferSizeEXT(GLuint program, GLint location)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLint  ret = rCtx->dsp.CurrTable()->glGetUniformBufferSizeEXT(program, location);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLintptr REGAL_CALL error_glGetUniformOffsetEXT(GLuint program, GLint location)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLintptr  ret = rCtx->dsp.CurrTable()->glGetUniformOffsetEXT(program, location);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_EXT_texture_integer

static void REGAL_CALL error_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexParameterIivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexParameterIuivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexParameterIivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexParameterIuivEXT(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearColorIiEXT(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClearColorIuiEXT(red, green, blue, alpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_GREMEDY_frame_terminator

static void REGAL_CALL error_glFrameTerminatorGREMEDY(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFrameTerminatorGREMEDY();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_conditional_render

static void REGAL_CALL error_glBeginConditionalRenderNV(GLuint id, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginConditionalRenderNV(id, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndConditionalRenderNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndConditionalRenderNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_present_video

static void REGAL_CALL error_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVideoivNV(video_slot, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVideouivNV(video_slot, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVideoi64vNV(video_slot, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVideoui64vNV(video_slot, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_transform_feedback

static void REGAL_CALL error_glBeginTransformFeedbackEXT(GLenum primitiveMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginTransformFeedbackEXT(primitiveMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndTransformFeedbackEXT(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndTransformFeedbackEXT();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferRangeEXT(target, index, buffer, offset, size);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferOffsetEXT(target, index, buffer, offset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindBufferBaseEXT(target, index, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_direct_state_access

static void REGAL_CALL error_glClientAttribDefaultEXT(GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glClientAttribDefaultEXT(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPushClientAttribDefaultEXT(GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPushClientAttribDefaultEXT(mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixLoadfEXT(mode, m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixLoaddEXT(mode, m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixMultfEXT(mode, m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixMultdEXT(mode, m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixLoadIdentityEXT(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixLoadIdentityEXT(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixRotatefEXT(mode, angle, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixRotatedEXT(mode, angle, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixScalefEXT(mode, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixScaledEXT(mode, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixTranslatefEXT(mode, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixTranslatedEXT(mode, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixPopEXT(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixPopEXT(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixPushEXT(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixPushEXT(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixLoadTransposefEXT(mode, m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixLoadTransposedEXT(mode, m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixMultTransposefEXT(mode, m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMatrixMultTransposedEXT(mode, m);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureParameterfEXT(texture, target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureParameterfvEXT(texture, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureParameteriEXT(texture, target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureParameterivEXT(texture, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTextureImageEXT(texture, target, level, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTextureParameterfvEXT(texture, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTextureParameterivEXT(texture, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexParameterfEXT(texunit, target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexParameterfvEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexParameteriEXT(texunit, target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexParameterivEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexParameterfvEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexParameterivEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindMultiTextureEXT(texunit, target, texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnableClientStateIndexedEXT(array, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisableClientStateIndexedEXT(array, index);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexEnvfEXT(texunit, target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexEnvfvEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexEnviEXT(texunit, target, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexEnvivEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexGendEXT(texunit, coord, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexGendvEXT(texunit, coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexGenfEXT(texunit, coord, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexGenfvEXT(texunit, coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexGeniEXT(texunit, coord, pname, param);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexGenivEXT(texunit, coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexEnvfvEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexEnvivEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexGendvEXT(texunit, coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexGenfvEXT(texunit, coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexGenivEXT(texunit, coord, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFloatIndexedvEXT(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetDoubleIndexedvEXT(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPointerIndexedvEXT(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCompressedTextureImageEXT(texture, target, lod, img);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramStringEXT(program, target, format, len, string);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4dvEXT(program, target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameter4fvEXT(program, target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedProgramivEXT(program, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedProgramStringEXT(program, target, pname, string);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureParameterIivEXT(texture, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureParameterIuivEXT(texture, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTextureParameterIivEXT(texture, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTextureParameterIuivEXT(texture, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexParameterIivEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexParameterIuivEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexParameterIivEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1fEXT(program, location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2fEXT(program, location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3fEXT(program, location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1iEXT(program, location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2iEXT(program, location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3iEXT(program, location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1fvEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2fvEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3fvEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4fvEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1ivEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2ivEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3ivEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4ivEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1uiEXT(program, location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2uiEXT(program, location, v0, v1);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3uiEXT(program, location, v0, v1, v2);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1uivEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2uivEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3uivEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4uivEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedBufferDataEXT(buffer, size, data, usage);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedBufferSubDataEXT(buffer, offset, size, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLvoid *REGAL_CALL error_glMapNamedBufferEXT(GLuint buffer, GLenum access)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLvoid * ret = rCtx->dsp.CurrTable()->glMapNamedBufferEXT(buffer, access);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glUnmapNamedBufferEXT(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glUnmapNamedBufferEXT(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedBufferParameterivEXT(buffer, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedBufferPointervEXT(buffer, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedBufferSubDataEXT(buffer, offset, size, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureBufferEXT(texture, target, internalformat, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexBufferEXT(texunit, target, internalformat, buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLenum REGAL_CALL error_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLenum  ret = rCtx->dsp.CurrTable()->glCheckNamedFramebufferStatusEXT(framebuffer, target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenerateTextureMipmapEXT(texture, target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenerateMultiTexMipmapEXT(texunit, target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferDrawBufferEXT(framebuffer, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFramebufferReadBufferEXT(framebuffer, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetFramebufferParameterivEXT(framebuffer, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureRenderbufferEXT(texture, target, renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLvoid *REGAL_CALL error_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLvoid * ret = rCtx->dsp.CurrTable()->glMapNamedBufferRangeEXT(buffer, offset, length, access);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1dEXT(program, location, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2dEXT(program, location, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3dEXT(program, location, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4dEXT(program, location, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1dvEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2dvEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3dvEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4dvEXT(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_explicit_multisample

static void REGAL_CALL error_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetMultisamplefvNV(pname, index, val);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSampleMaskIndexedNV(index, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexRenderbufferNV(target, renderbuffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_transform_feedback2

static void REGAL_CALL error_glBindTransformFeedbackNV(GLenum target, GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindTransformFeedbackNV(target, id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteTransformFeedbacksNV(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenTransformFeedbacksNV(n, ids);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsTransformFeedbackNV(GLuint id)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsTransformFeedbackNV(id);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glPauseTransformFeedbackNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPauseTransformFeedbackNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glResumeTransformFeedbackNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glResumeTransformFeedbackNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawTransformFeedbackNV(GLenum mode, GLuint name)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawTransformFeedbackNV(mode, name);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_AMD_performance_monitor

static void REGAL_CALL error_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGenPerfMonitorsAMD(n, monitors);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeletePerfMonitorsAMD(n, monitors);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBeginPerfMonitorAMD(GLuint monitor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginPerfMonitorAMD(monitor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndPerfMonitorAMD(GLuint monitor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndPerfMonitorAMD(monitor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_AMD_vertex_shader_tesselator

static void REGAL_CALL error_glTessellationFactorAMD(GLfloat factor)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTessellationFactorAMD(factor);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTessellationModeAMD(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTessellationModeAMD(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_provoking_vertex

static void REGAL_CALL error_glProvokingVertexEXT(GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProvokingVertexEXT(mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_AMD_draw_buffers_blend

static void REGAL_CALL error_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFuncIndexedAMD(buf, src, dst);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationIndexedAMD(buf, mode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_APPLE_texture_range

static void REGAL_CALL error_glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureRangeAPPLE(target, length, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetTexParameterPointervAPPLE(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_APPLE_vertex_program_evaluators

static void REGAL_CALL error_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEnableVertexAttribAPPLE(index, pname);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDisableVertexAttribAPPLE(index, pname);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsVertexAttribEnabledAPPLE(index, pname);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_APPLE_object_purgeable

static GLenum REGAL_CALL error_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLenum  ret = rCtx->dsp.CurrTable()->glObjectPurgeableAPPLE(objectType, name, option);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLenum REGAL_CALL error_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLenum  ret = rCtx->dsp.CurrTable()->glObjectUnpurgeableAPPLE(objectType, name, option);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetObjectParameterivAPPLE(objectType, name, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_video_capture

static void REGAL_CALL error_glBeginVideoCaptureNV(GLuint video_capture_slot)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBeginVideoCaptureNV(video_capture_slot);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEndVideoCaptureNV(GLuint video_capture_slot)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEndVideoCaptureNV(video_capture_slot);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVideoCaptureivNV(video_capture_slot, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLenum REGAL_CALL error_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLenum  ret = rCtx->dsp.CurrTable()->glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_copy_image

static void REGAL_CALL error_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_separate_shader_objects

static void REGAL_CALL error_glUseShaderProgramEXT(GLenum type, GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUseShaderProgramEXT(type, program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glActiveProgramEXT(GLuint program)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glActiveProgramEXT(program);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glCreateShaderProgramEXT(GLenum type, const GLchar *string)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glCreateShaderProgramEXT(type, string);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

// GL_NV_shader_buffer_load

static void REGAL_CALL error_glMakeBufferResidentNV(GLenum target, GLenum access)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMakeBufferResidentNV(target, access);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMakeBufferNonResidentNV(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMakeBufferNonResidentNV(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsBufferResidentNV(GLenum target)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsBufferResidentNV(target);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMakeNamedBufferResidentNV(buffer, access);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMakeNamedBufferNonResidentNV(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMakeNamedBufferNonResidentNV(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsNamedBufferResidentNV(GLuint buffer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsNamedBufferResidentNV(buffer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetBufferParameterui64vNV(target, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetNamedBufferParameterui64vNV(buffer, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetIntegerui64vNV(target, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformui64NV(GLint location, GLuint64EXT v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformui64NV(location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniformui64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformui64vNV(program, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformui64NV(program, location, v0);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniformui64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_vertex_buffer_unified_memory

static void REGAL_CALL error_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBufferAddressRangeNV(pname, index, address, length);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexFormatNV(size, type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glNormalFormatNV(GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glNormalFormatNV(type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glColorFormatNV(size, type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glIndexFormatNV(GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glIndexFormatNV(type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTexCoordFormatNV(size, type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glEdgeFlagFormatNV(GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glEdgeFlagFormatNV(stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glSecondaryColorFormatNV(size, type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glFogCoordFormatNV(GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glFogCoordFormatNV(type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribFormatNV(index, size, type, normalized, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribIFormatNV(index, size, type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetIntegerui64i_vNV(target, index, data);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_texture_barrier

static void REGAL_CALL error_glTextureBarrierNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureBarrierNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_shader_image_load_store

static void REGAL_CALL error_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glMemoryBarrierEXT(GLbitfield barriers)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glMemoryBarrierEXT(barriers);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_EXT_vertex_attrib_64bit

static void REGAL_CALL error_glVertexAttribL1dEXT(GLuint index, GLdouble x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL1dEXT(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL2dEXT(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL3dEXT(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL4dEXT(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL1dvEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL2dvEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL3dvEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL4dvEXT(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribLPointerEXT(index, size, type, stride, pointer);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribLdvEXT(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_gpu_shader5

static void REGAL_CALL error_glUniform1i64NV(GLint location, GLint64EXT x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1i64NV(location, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2i64NV(location, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3i64NV(location, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4i64NV(location, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1i64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2i64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3i64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4i64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1ui64NV(GLint location, GLuint64EXT x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1ui64NV(location, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2ui64NV(location, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3ui64NV(location, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4ui64NV(location, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform1ui64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform2ui64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform3ui64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glUniform4ui64vNV(location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1i64NV(program, location, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2i64NV(program, location, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3i64NV(program, location, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4i64NV(program, location, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1i64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2i64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3i64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4i64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1ui64NV(program, location, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2ui64NV(program, location, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3ui64NV(program, location, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4ui64NV(program, location, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform1ui64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform2ui64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform3ui64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glProgramUniform4ui64vNV(program, location, count, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetUniformi64vNV(program, location, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_vertex_attrib_integer_64bit

static void REGAL_CALL error_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL1i64NV(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL2i64NV(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL3i64NV(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL4i64NV(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL1ui64NV(index, x);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL2ui64NV(index, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL3ui64NV(index, x, y, z);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL4ui64NV(index, x, y, z, w);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL1i64vNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL2i64vNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL3i64vNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL4i64vNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL1ui64vNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL2ui64vNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL3ui64vNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribL4ui64vNV(index, v);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVertexAttribLFormatNV(index, size, type, stride);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribLi64vNV(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetVertexAttribLui64vNV(index, pname, params);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_vdpau_interop

static void REGAL_CALL error_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVDPAUInitNV(vdpDevice, getProcAddress);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVDPAUFiniNV(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVDPAUFiniNV();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLvdpauSurfaceNV REGAL_CALL error_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLvdpauSurfaceNV  ret = rCtx->dsp.CurrTable()->glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLvdpauSurfaceNV REGAL_CALL error_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLvdpauSurfaceNV  ret = rCtx->dsp.CurrTable()->glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glVDPAUIsSurfaceNV(surface);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVDPAUUnregisterSurfaceNV(surface);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVDPAUSurfaceAccessNV(surface, access);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVDPAUMapSurfacesNV(numSurfaces, surfaces);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glVDPAUUnmapSurfacesNV(numSurfaces, surfaces);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_NV_path_rendering

static void REGAL_CALL error_glCopyPathNV(GLuint resultPath, GLuint srcPath)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCopyPathNV(resultPath, srcPath);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void*paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCoverFillPathNV(GLuint path, GLenum coverMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCoverFillPathNV(path, coverMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void*paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glCoverStrokePathNV(GLuint name, GLenum coverMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glCoverStrokePathNV(name, coverMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDeletePathsNV(GLuint path, GLsizei range)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeletePathsNV(path, range);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLuint REGAL_CALL error_glGenPathsNV(GLsizei range)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glGenPathsNV(range);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat*value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathColorGenfvNV(color, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint*value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathColorGenivNV(color, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathCommandsNV(GLuint name, GLubyte*commands)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathCommandsNV(name, commands);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathCoordsNV(GLuint name, GLfloat*coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathCoordsNV(name, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathDashArrayNV(GLuint name, GLfloat*dashArray)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathDashArrayNV(name, dashArray);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLfloat REGAL_CALL error_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLfloat  ret = rCtx->dsp.CurrTable()->glGetPathLengthNV(path, startSegment, numSegments);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat*metrics)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathMetricRangeNV(metricQueryMask, fistPathName, numPaths, stride, metrics);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void*paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat*value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathParameterfvNV(name, param, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathParameterivNV(GLuint name, GLenum param, GLint*value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathParameterivNV(name, param, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void*paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat*value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathTexGenfvNV(texCoordSet, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint*value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glGetPathTexGenivNV(texCoordSet, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glInterpolatePathsNV(resultPath, pathA, pathB, weight);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glIsPathNV(GLuint path)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsPathNV(path);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsPointInFillPathNV(path, mask, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLboolean REGAL_CALL error_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glIsPointInStrokePathNV(path, x, y);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat*coeffs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathColorGenNV(color, genMode, colorFormat, coeffs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte*commands, GLsizei numCoords, GLenum coordType, const GLvoid*coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void*coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathCoordsNV(path, numCoords, coordType, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathCoverDepthFuncNV(GLenum zfunc)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathCoverDepthFuncNV(zfunc);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat*dashArray)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathDashArrayNV(path, dashCount, dashArray);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathFogGenNV(GLenum genMode)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathFogGenNV(genMode);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void*fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void*fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid*charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathParameterfNV(path, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat*value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathParameterfvNV(path, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathParameteriNV(path, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathParameterivNV(GLuint path, GLenum pname, const GLint*value)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathParameterivNV(path, pname, value);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathStencilDepthOffsetNV(GLfloat factor, GLint units)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathStencilDepthOffsetNV(factor, units);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathStencilFuncNV(func, ref, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathStringNV(GLuint path, GLenum format, GLsizei length, const void*pathString)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathStringNV(path, format, length, pathString);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte*commands, GLsizei numCoords, GLenum coordType, const GLvoid*coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void*coords)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat*coeffs)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glPathTexGenNV(texCoordSet, genMode, components, coeffs);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static GLboolean REGAL_CALL error_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat*x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLboolean  ret = rCtx->dsp.CurrTable()->glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void*paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilFillPathNV(path, fillMode, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void*paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glStencilStrokePathNV(path, reference, mask);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat*transformValues)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTransformPathNV(resultPath, srcPath, transformType, transformValues);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint paths[], const GLfloat weights[])
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glWeightPathsNV(resultPath, numPaths, paths, weights);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_KTX_buffer_region

static GLuint REGAL_CALL error_glBufferRegionEnabledEXT(void)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glBufferRegionEnabledEXT();
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static GLuint REGAL_CALL error_glNewBufferRegionEXT(GLenum region)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    GLuint  ret = rCtx->dsp.CurrTable()->glNewBufferRegionEXT(region);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
return ret;
}

static void REGAL_CALL error_glDeleteBufferRegionEXT(GLenum region)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDeleteBufferRegionEXT(region);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glReadBufferRegionEXT(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glReadBufferRegionEXT(region, x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

static void REGAL_CALL error_glDrawBufferRegionEXT(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glDrawBufferRegionEXT(region, x, y, width, height, xDest, yDest);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_SGIX_fog_texture

static void REGAL_CALL error_glTextureFogSGIX(GLenum pname)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glTextureFogSGIX(pname);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

// GL_WIN_swap_hint

static void REGAL_CALL error_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext * rCtx = GET_REGAL_CONTEXT();
    RegalDspScopedStepDown stepDown( rCtx->dsp );
    if (rCtx->err.inBeginEnd == false) {
        rCtx->dsp.CurrTable()->glGetError();
    }
    rCtx->dsp.CurrTable()->glAddSwapHintRectWIN(x, y, width, height);
    if (rCtx->err.inBeginEnd == false) {
        GLenum err1 = rCtx->dsp.CurrTable()->glGetError();
        if (err1 != GL_NO_ERROR) {
            rCtx->err.callback( err1 );
        }
    }
}

void RegalPrivateInitErrorDispatchTable( RegalDispatchTable & tbl )
{

// GL_VERSION_1_0

   tbl.glNewList = error_glNewList;
   tbl.glEndList = error_glEndList;
   tbl.glCallList = error_glCallList;
   tbl.glCallLists = error_glCallLists;
   tbl.glDeleteLists = error_glDeleteLists;
   tbl.glGenLists = error_glGenLists;
   tbl.glListBase = error_glListBase;
   tbl.glBegin = error_glBegin;
   tbl.glBitmap = error_glBitmap;
   tbl.glColor3b = error_glColor3b;
   tbl.glColor3bv = error_glColor3bv;
   tbl.glColor3d = error_glColor3d;
   tbl.glColor3dv = error_glColor3dv;
   tbl.glColor3f = error_glColor3f;
   tbl.glColor3fv = error_glColor3fv;
   tbl.glColor3i = error_glColor3i;
   tbl.glColor3iv = error_glColor3iv;
   tbl.glColor3s = error_glColor3s;
   tbl.glColor3sv = error_glColor3sv;
   tbl.glColor3ub = error_glColor3ub;
   tbl.glColor3ubv = error_glColor3ubv;
   tbl.glColor3ui = error_glColor3ui;
   tbl.glColor3uiv = error_glColor3uiv;
   tbl.glColor3us = error_glColor3us;
   tbl.glColor3usv = error_glColor3usv;
   tbl.glColor4b = error_glColor4b;
   tbl.glColor4bv = error_glColor4bv;
   tbl.glColor4d = error_glColor4d;
   tbl.glColor4dv = error_glColor4dv;
   tbl.glColor4f = error_glColor4f;
   tbl.glColor4fv = error_glColor4fv;
   tbl.glColor4i = error_glColor4i;
   tbl.glColor4iv = error_glColor4iv;
   tbl.glColor4s = error_glColor4s;
   tbl.glColor4sv = error_glColor4sv;
   tbl.glColor4ub = error_glColor4ub;
   tbl.glColor4ubv = error_glColor4ubv;
   tbl.glColor4ui = error_glColor4ui;
   tbl.glColor4uiv = error_glColor4uiv;
   tbl.glColor4us = error_glColor4us;
   tbl.glColor4usv = error_glColor4usv;
   tbl.glEdgeFlag = error_glEdgeFlag;
   tbl.glEdgeFlagv = error_glEdgeFlagv;
   tbl.glEnd = error_glEnd;
   tbl.glIndexd = error_glIndexd;
   tbl.glIndexdv = error_glIndexdv;
   tbl.glIndexf = error_glIndexf;
   tbl.glIndexfv = error_glIndexfv;
   tbl.glIndexi = error_glIndexi;
   tbl.glIndexiv = error_glIndexiv;
   tbl.glIndexs = error_glIndexs;
   tbl.glIndexsv = error_glIndexsv;
   tbl.glNormal3b = error_glNormal3b;
   tbl.glNormal3bv = error_glNormal3bv;
   tbl.glNormal3d = error_glNormal3d;
   tbl.glNormal3dv = error_glNormal3dv;
   tbl.glNormal3f = error_glNormal3f;
   tbl.glNormal3fv = error_glNormal3fv;
   tbl.glNormal3i = error_glNormal3i;
   tbl.glNormal3iv = error_glNormal3iv;
   tbl.glNormal3s = error_glNormal3s;
   tbl.glNormal3sv = error_glNormal3sv;
   tbl.glRasterPos2d = error_glRasterPos2d;
   tbl.glRasterPos2dv = error_glRasterPos2dv;
   tbl.glRasterPos2f = error_glRasterPos2f;
   tbl.glRasterPos2fv = error_glRasterPos2fv;
   tbl.glRasterPos2i = error_glRasterPos2i;
   tbl.glRasterPos2iv = error_glRasterPos2iv;
   tbl.glRasterPos2s = error_glRasterPos2s;
   tbl.glRasterPos2sv = error_glRasterPos2sv;
   tbl.glRasterPos3d = error_glRasterPos3d;
   tbl.glRasterPos3dv = error_glRasterPos3dv;
   tbl.glRasterPos3f = error_glRasterPos3f;
   tbl.glRasterPos3fv = error_glRasterPos3fv;
   tbl.glRasterPos3i = error_glRasterPos3i;
   tbl.glRasterPos3iv = error_glRasterPos3iv;
   tbl.glRasterPos3s = error_glRasterPos3s;
   tbl.glRasterPos3sv = error_glRasterPos3sv;
   tbl.glRasterPos4d = error_glRasterPos4d;
   tbl.glRasterPos4dv = error_glRasterPos4dv;
   tbl.glRasterPos4f = error_glRasterPos4f;
   tbl.glRasterPos4fv = error_glRasterPos4fv;
   tbl.glRasterPos4i = error_glRasterPos4i;
   tbl.glRasterPos4iv = error_glRasterPos4iv;
   tbl.glRasterPos4s = error_glRasterPos4s;
   tbl.glRasterPos4sv = error_glRasterPos4sv;
   tbl.glRectd = error_glRectd;
   tbl.glRectdv = error_glRectdv;
   tbl.glRectf = error_glRectf;
   tbl.glRectfv = error_glRectfv;
   tbl.glRecti = error_glRecti;
   tbl.glRectiv = error_glRectiv;
   tbl.glRects = error_glRects;
   tbl.glRectsv = error_glRectsv;
   tbl.glTexCoord1d = error_glTexCoord1d;
   tbl.glTexCoord1dv = error_glTexCoord1dv;
   tbl.glTexCoord1f = error_glTexCoord1f;
   tbl.glTexCoord1fv = error_glTexCoord1fv;
   tbl.glTexCoord1i = error_glTexCoord1i;
   tbl.glTexCoord1iv = error_glTexCoord1iv;
   tbl.glTexCoord1s = error_glTexCoord1s;
   tbl.glTexCoord1sv = error_glTexCoord1sv;
   tbl.glTexCoord2d = error_glTexCoord2d;
   tbl.glTexCoord2dv = error_glTexCoord2dv;
   tbl.glTexCoord2f = error_glTexCoord2f;
   tbl.glTexCoord2fv = error_glTexCoord2fv;
   tbl.glTexCoord2i = error_glTexCoord2i;
   tbl.glTexCoord2iv = error_glTexCoord2iv;
   tbl.glTexCoord2s = error_glTexCoord2s;
   tbl.glTexCoord2sv = error_glTexCoord2sv;
   tbl.glTexCoord3d = error_glTexCoord3d;
   tbl.glTexCoord3dv = error_glTexCoord3dv;
   tbl.glTexCoord3f = error_glTexCoord3f;
   tbl.glTexCoord3fv = error_glTexCoord3fv;
   tbl.glTexCoord3i = error_glTexCoord3i;
   tbl.glTexCoord3iv = error_glTexCoord3iv;
   tbl.glTexCoord3s = error_glTexCoord3s;
   tbl.glTexCoord3sv = error_glTexCoord3sv;
   tbl.glTexCoord4d = error_glTexCoord4d;
   tbl.glTexCoord4dv = error_glTexCoord4dv;
   tbl.glTexCoord4f = error_glTexCoord4f;
   tbl.glTexCoord4fv = error_glTexCoord4fv;
   tbl.glTexCoord4i = error_glTexCoord4i;
   tbl.glTexCoord4iv = error_glTexCoord4iv;
   tbl.glTexCoord4s = error_glTexCoord4s;
   tbl.glTexCoord4sv = error_glTexCoord4sv;
   tbl.glVertex2d = error_glVertex2d;
   tbl.glVertex2dv = error_glVertex2dv;
   tbl.glVertex2f = error_glVertex2f;
   tbl.glVertex2fv = error_glVertex2fv;
   tbl.glVertex2i = error_glVertex2i;
   tbl.glVertex2iv = error_glVertex2iv;
   tbl.glVertex2s = error_glVertex2s;
   tbl.glVertex2sv = error_glVertex2sv;
   tbl.glVertex3d = error_glVertex3d;
   tbl.glVertex3dv = error_glVertex3dv;
   tbl.glVertex3f = error_glVertex3f;
   tbl.glVertex3fv = error_glVertex3fv;
   tbl.glVertex3i = error_glVertex3i;
   tbl.glVertex3iv = error_glVertex3iv;
   tbl.glVertex3s = error_glVertex3s;
   tbl.glVertex3sv = error_glVertex3sv;
   tbl.glVertex4d = error_glVertex4d;
   tbl.glVertex4dv = error_glVertex4dv;
   tbl.glVertex4f = error_glVertex4f;
   tbl.glVertex4fv = error_glVertex4fv;
   tbl.glVertex4i = error_glVertex4i;
   tbl.glVertex4iv = error_glVertex4iv;
   tbl.glVertex4s = error_glVertex4s;
   tbl.glVertex4sv = error_glVertex4sv;
   tbl.glClipPlane = error_glClipPlane;
   tbl.glColorMaterial = error_glColorMaterial;
   tbl.glCullFace = error_glCullFace;
   tbl.glFogf = error_glFogf;
   tbl.glFogfv = error_glFogfv;
   tbl.glFogi = error_glFogi;
   tbl.glFogiv = error_glFogiv;
   tbl.glFrontFace = error_glFrontFace;
   tbl.glHint = error_glHint;
   tbl.glLightf = error_glLightf;
   tbl.glLightfv = error_glLightfv;
   tbl.glLighti = error_glLighti;
   tbl.glLightiv = error_glLightiv;
   tbl.glLightModelf = error_glLightModelf;
   tbl.glLightModelfv = error_glLightModelfv;
   tbl.glLightModeli = error_glLightModeli;
   tbl.glLightModeliv = error_glLightModeliv;
   tbl.glLineStipple = error_glLineStipple;
   tbl.glLineWidth = error_glLineWidth;
   tbl.glMaterialf = error_glMaterialf;
   tbl.glMaterialfv = error_glMaterialfv;
   tbl.glMateriali = error_glMateriali;
   tbl.glMaterialiv = error_glMaterialiv;
   tbl.glPointSize = error_glPointSize;
   tbl.glPolygonMode = error_glPolygonMode;
   tbl.glPolygonStipple = error_glPolygonStipple;
   tbl.glScissor = error_glScissor;
   tbl.glShadeModel = error_glShadeModel;
   tbl.glTexParameterf = error_glTexParameterf;
   tbl.glTexParameterfv = error_glTexParameterfv;
   tbl.glTexParameteri = error_glTexParameteri;
   tbl.glTexParameteriv = error_glTexParameteriv;
   tbl.glTexImage1D = error_glTexImage1D;
   tbl.glTexImage2D = error_glTexImage2D;
   tbl.glTexEnvf = error_glTexEnvf;
   tbl.glTexEnvfv = error_glTexEnvfv;
   tbl.glTexEnvi = error_glTexEnvi;
   tbl.glTexEnviv = error_glTexEnviv;
   tbl.glTexGend = error_glTexGend;
   tbl.glTexGendv = error_glTexGendv;
   tbl.glTexGenf = error_glTexGenf;
   tbl.glTexGenfv = error_glTexGenfv;
   tbl.glTexGeni = error_glTexGeni;
   tbl.glTexGeniv = error_glTexGeniv;
   tbl.glFeedbackBuffer = error_glFeedbackBuffer;
   tbl.glSelectBuffer = error_glSelectBuffer;
   tbl.glRenderMode = error_glRenderMode;
   tbl.glInitNames = error_glInitNames;
   tbl.glLoadName = error_glLoadName;
   tbl.glPassThrough = error_glPassThrough;
   tbl.glPopName = error_glPopName;
   tbl.glPushName = error_glPushName;
   tbl.glDrawBuffer = error_glDrawBuffer;
   tbl.glClear = error_glClear;
   tbl.glClearAccum = error_glClearAccum;
   tbl.glClearColor = error_glClearColor;
   tbl.glClearDepth = error_glClearDepth;
   tbl.glClearIndex = error_glClearIndex;
   tbl.glClearStencil = error_glClearStencil;
   tbl.glColorMask = error_glColorMask;
   tbl.glDepthMask = error_glDepthMask;
   tbl.glIndexMask = error_glIndexMask;
   tbl.glStencilMask = error_glStencilMask;
   tbl.glAccum = error_glAccum;
   tbl.glDisable = error_glDisable;
   tbl.glEnable = error_glEnable;
   tbl.glFinish = error_glFinish;
   tbl.glFlush = error_glFlush;
   tbl.glPopAttrib = error_glPopAttrib;
   tbl.glPushAttrib = error_glPushAttrib;
   tbl.glMap1d = error_glMap1d;
   tbl.glMap1f = error_glMap1f;
   tbl.glMap2d = error_glMap2d;
   tbl.glMap2f = error_glMap2f;
   tbl.glMapGrid1d = error_glMapGrid1d;
   tbl.glMapGrid1f = error_glMapGrid1f;
   tbl.glMapGrid2d = error_glMapGrid2d;
   tbl.glMapGrid2f = error_glMapGrid2f;
   tbl.glEvalCoord1d = error_glEvalCoord1d;
   tbl.glEvalCoord1dv = error_glEvalCoord1dv;
   tbl.glEvalCoord1f = error_glEvalCoord1f;
   tbl.glEvalCoord1fv = error_glEvalCoord1fv;
   tbl.glEvalCoord2d = error_glEvalCoord2d;
   tbl.glEvalCoord2dv = error_glEvalCoord2dv;
   tbl.glEvalCoord2f = error_glEvalCoord2f;
   tbl.glEvalCoord2fv = error_glEvalCoord2fv;
   tbl.glEvalMesh1 = error_glEvalMesh1;
   tbl.glEvalMesh2 = error_glEvalMesh2;
   tbl.glEvalPoint1 = error_glEvalPoint1;
   tbl.glEvalPoint2 = error_glEvalPoint2;
   tbl.glAlphaFunc = error_glAlphaFunc;
   tbl.glBlendFunc = error_glBlendFunc;
   tbl.glDepthFunc = error_glDepthFunc;
   tbl.glStencilFunc = error_glStencilFunc;
   tbl.glLogicOp = error_glLogicOp;
   tbl.glStencilOp = error_glStencilOp;
   tbl.glPixelZoom = error_glPixelZoom;
   tbl.glPixelTransferf = error_glPixelTransferf;
   tbl.glPixelTransferi = error_glPixelTransferi;
   tbl.glPixelStoref = error_glPixelStoref;
   tbl.glPixelStorei = error_glPixelStorei;
   tbl.glPixelMapfv = error_glPixelMapfv;
   tbl.glPixelMapuiv = error_glPixelMapuiv;
   tbl.glPixelMapusv = error_glPixelMapusv;
   tbl.glReadBuffer = error_glReadBuffer;
   tbl.glCopyPixels = error_glCopyPixels;
   tbl.glReadPixels = error_glReadPixels;
   tbl.glDrawPixels = error_glDrawPixels;
   tbl.glGetBooleanv = error_glGetBooleanv;
   tbl.glGetDoublev = error_glGetDoublev;
   tbl.glGetFloatv = error_glGetFloatv;
   tbl.glGetIntegerv = error_glGetIntegerv;
   tbl.glGetClipPlane = error_glGetClipPlane;
   tbl.glGetError = error_glGetError;
   tbl.glGetLightfv = error_glGetLightfv;
   tbl.glGetLightiv = error_glGetLightiv;
   tbl.glGetMapdv = error_glGetMapdv;
   tbl.glGetMapfv = error_glGetMapfv;
   tbl.glGetMapiv = error_glGetMapiv;
   tbl.glGetMaterialfv = error_glGetMaterialfv;
   tbl.glGetMaterialiv = error_glGetMaterialiv;
   tbl.glGetPixelMapfv = error_glGetPixelMapfv;
   tbl.glGetPixelMapuiv = error_glGetPixelMapuiv;
   tbl.glGetPixelMapusv = error_glGetPixelMapusv;
   tbl.glGetPolygonStipple = error_glGetPolygonStipple;
   tbl.glGetString = error_glGetString;
   tbl.glGetTexEnvfv = error_glGetTexEnvfv;
   tbl.glGetTexEnviv = error_glGetTexEnviv;
   tbl.glGetTexGendv = error_glGetTexGendv;
   tbl.glGetTexGenfv = error_glGetTexGenfv;
   tbl.glGetTexGeniv = error_glGetTexGeniv;
   tbl.glGetTexImage = error_glGetTexImage;
   tbl.glGetTexParameterfv = error_glGetTexParameterfv;
   tbl.glGetTexParameteriv = error_glGetTexParameteriv;
   tbl.glGetTexLevelParameterfv = error_glGetTexLevelParameterfv;
   tbl.glGetTexLevelParameteriv = error_glGetTexLevelParameteriv;
   tbl.glIsEnabled = error_glIsEnabled;
   tbl.glIsList = error_glIsList;
   tbl.glDepthRange = error_glDepthRange;
   tbl.glFrustum = error_glFrustum;
   tbl.glLoadIdentity = error_glLoadIdentity;
   tbl.glLoadMatrixd = error_glLoadMatrixd;
   tbl.glLoadMatrixf = error_glLoadMatrixf;
   tbl.glMatrixMode = error_glMatrixMode;
   tbl.glMultMatrixd = error_glMultMatrixd;
   tbl.glMultMatrixf = error_glMultMatrixf;
   tbl.glOrtho = error_glOrtho;
   tbl.glPopMatrix = error_glPopMatrix;
   tbl.glPushMatrix = error_glPushMatrix;
   tbl.glRotated = error_glRotated;
   tbl.glRotatef = error_glRotatef;
   tbl.glScaled = error_glScaled;
   tbl.glScalef = error_glScalef;
   tbl.glTranslated = error_glTranslated;
   tbl.glTranslatef = error_glTranslatef;
   tbl.glViewport = error_glViewport;

// GL_VERSION_1_1

   tbl.glArrayElement = error_glArrayElement;
   tbl.glDrawArrays = error_glDrawArrays;
   tbl.glDrawElements = error_glDrawElements;
   tbl.glInterleavedArrays = error_glInterleavedArrays;
   tbl.glDisableClientState = error_glDisableClientState;
   tbl.glEnableClientState = error_glEnableClientState;
   tbl.glGetPointerv = error_glGetPointerv;
   tbl.glColorPointer = error_glColorPointer;
   tbl.glEdgeFlagPointer = error_glEdgeFlagPointer;
   tbl.glIndexPointer = error_glIndexPointer;
   tbl.glNormalPointer = error_glNormalPointer;
   tbl.glTexCoordPointer = error_glTexCoordPointer;
   tbl.glVertexPointer = error_glVertexPointer;
   tbl.glPolygonOffset = error_glPolygonOffset;
   tbl.glCopyTexImage1D = error_glCopyTexImage1D;
   tbl.glCopyTexImage2D = error_glCopyTexImage2D;
   tbl.glCopyTexSubImage1D = error_glCopyTexSubImage1D;
   tbl.glCopyTexSubImage2D = error_glCopyTexSubImage2D;
   tbl.glTexSubImage1D = error_glTexSubImage1D;
   tbl.glTexSubImage2D = error_glTexSubImage2D;
   tbl.glAreTexturesResident = error_glAreTexturesResident;
   tbl.glBindTexture = error_glBindTexture;
   tbl.glDeleteTextures = error_glDeleteTextures;
   tbl.glGenTextures = error_glGenTextures;
   tbl.glIsTexture = error_glIsTexture;
   tbl.glPrioritizeTextures = error_glPrioritizeTextures;
   tbl.glIndexub = error_glIndexub;
   tbl.glIndexubv = error_glIndexubv;
   tbl.glPopClientAttrib = error_glPopClientAttrib;
   tbl.glPushClientAttrib = error_glPushClientAttrib;

// GL_VERSION_1_2

   tbl.glBlendColor = error_glBlendColor;
   tbl.glBlendEquation = error_glBlendEquation;
   tbl.glDrawRangeElements = error_glDrawRangeElements;
   tbl.glTexImage3D = error_glTexImage3D;
   tbl.glTexSubImage3D = error_glTexSubImage3D;
   tbl.glCopyTexSubImage3D = error_glCopyTexSubImage3D;
   tbl.glColorTable = error_glColorTable;
   tbl.glColorTableParameterfv = error_glColorTableParameterfv;
   tbl.glColorTableParameteriv = error_glColorTableParameteriv;
   tbl.glCopyColorTable = error_glCopyColorTable;
   tbl.glGetColorTable = error_glGetColorTable;
   tbl.glGetColorTableParameterfv = error_glGetColorTableParameterfv;
   tbl.glGetColorTableParameteriv = error_glGetColorTableParameteriv;
   tbl.glColorSubTable = error_glColorSubTable;
   tbl.glCopyColorSubTable = error_glCopyColorSubTable;
   tbl.glConvolutionFilter1D = error_glConvolutionFilter1D;
   tbl.glConvolutionFilter2D = error_glConvolutionFilter2D;
   tbl.glConvolutionParameterf = error_glConvolutionParameterf;
   tbl.glConvolutionParameterfv = error_glConvolutionParameterfv;
   tbl.glConvolutionParameteri = error_glConvolutionParameteri;
   tbl.glConvolutionParameteriv = error_glConvolutionParameteriv;
   tbl.glCopyConvolutionFilter1D = error_glCopyConvolutionFilter1D;
   tbl.glCopyConvolutionFilter2D = error_glCopyConvolutionFilter2D;
   tbl.glGetConvolutionFilter = error_glGetConvolutionFilter;
   tbl.glGetConvolutionParameterfv = error_glGetConvolutionParameterfv;
   tbl.glGetConvolutionParameteriv = error_glGetConvolutionParameteriv;
   tbl.glGetSeparableFilter = error_glGetSeparableFilter;
   tbl.glSeparableFilter2D = error_glSeparableFilter2D;
   tbl.glGetHistogram = error_glGetHistogram;
   tbl.glGetHistogramParameterfv = error_glGetHistogramParameterfv;
   tbl.glGetHistogramParameteriv = error_glGetHistogramParameteriv;
   tbl.glGetMinmax = error_glGetMinmax;
   tbl.glGetMinmaxParameterfv = error_glGetMinmaxParameterfv;
   tbl.glGetMinmaxParameteriv = error_glGetMinmaxParameteriv;
   tbl.glHistogram = error_glHistogram;
   tbl.glMinmax = error_glMinmax;
   tbl.glResetHistogram = error_glResetHistogram;
   tbl.glResetMinmax = error_glResetMinmax;

// GL_VERSION_1_3

   tbl.glActiveTexture = error_glActiveTexture;
   tbl.glSampleCoverage = error_glSampleCoverage;
   tbl.glCompressedTexImage3D = error_glCompressedTexImage3D;
   tbl.glCompressedTexImage2D = error_glCompressedTexImage2D;
   tbl.glCompressedTexImage1D = error_glCompressedTexImage1D;
   tbl.glCompressedTexSubImage3D = error_glCompressedTexSubImage3D;
   tbl.glCompressedTexSubImage2D = error_glCompressedTexSubImage2D;
   tbl.glCompressedTexSubImage1D = error_glCompressedTexSubImage1D;
   tbl.glGetCompressedTexImage = error_glGetCompressedTexImage;
   tbl.glClientActiveTexture = error_glClientActiveTexture;
   tbl.glMultiTexCoord1d = error_glMultiTexCoord1d;
   tbl.glMultiTexCoord1dv = error_glMultiTexCoord1dv;
   tbl.glMultiTexCoord1f = error_glMultiTexCoord1f;
   tbl.glMultiTexCoord1fv = error_glMultiTexCoord1fv;
   tbl.glMultiTexCoord1i = error_glMultiTexCoord1i;
   tbl.glMultiTexCoord1iv = error_glMultiTexCoord1iv;
   tbl.glMultiTexCoord1s = error_glMultiTexCoord1s;
   tbl.glMultiTexCoord1sv = error_glMultiTexCoord1sv;
   tbl.glMultiTexCoord2d = error_glMultiTexCoord2d;
   tbl.glMultiTexCoord2dv = error_glMultiTexCoord2dv;
   tbl.glMultiTexCoord2f = error_glMultiTexCoord2f;
   tbl.glMultiTexCoord2fv = error_glMultiTexCoord2fv;
   tbl.glMultiTexCoord2i = error_glMultiTexCoord2i;
   tbl.glMultiTexCoord2iv = error_glMultiTexCoord2iv;
   tbl.glMultiTexCoord2s = error_glMultiTexCoord2s;
   tbl.glMultiTexCoord2sv = error_glMultiTexCoord2sv;
   tbl.glMultiTexCoord3d = error_glMultiTexCoord3d;
   tbl.glMultiTexCoord3dv = error_glMultiTexCoord3dv;
   tbl.glMultiTexCoord3f = error_glMultiTexCoord3f;
   tbl.glMultiTexCoord3fv = error_glMultiTexCoord3fv;
   tbl.glMultiTexCoord3i = error_glMultiTexCoord3i;
   tbl.glMultiTexCoord3iv = error_glMultiTexCoord3iv;
   tbl.glMultiTexCoord3s = error_glMultiTexCoord3s;
   tbl.glMultiTexCoord3sv = error_glMultiTexCoord3sv;
   tbl.glMultiTexCoord4d = error_glMultiTexCoord4d;
   tbl.glMultiTexCoord4dv = error_glMultiTexCoord4dv;
   tbl.glMultiTexCoord4f = error_glMultiTexCoord4f;
   tbl.glMultiTexCoord4fv = error_glMultiTexCoord4fv;
   tbl.glMultiTexCoord4i = error_glMultiTexCoord4i;
   tbl.glMultiTexCoord4iv = error_glMultiTexCoord4iv;
   tbl.glMultiTexCoord4s = error_glMultiTexCoord4s;
   tbl.glMultiTexCoord4sv = error_glMultiTexCoord4sv;
   tbl.glLoadTransposeMatrixf = error_glLoadTransposeMatrixf;
   tbl.glLoadTransposeMatrixd = error_glLoadTransposeMatrixd;
   tbl.glMultTransposeMatrixf = error_glMultTransposeMatrixf;
   tbl.glMultTransposeMatrixd = error_glMultTransposeMatrixd;

// GL_VERSION_1_4

   tbl.glBlendFuncSeparate = error_glBlendFuncSeparate;
   tbl.glMultiDrawArrays = error_glMultiDrawArrays;
   tbl.glMultiDrawElements = error_glMultiDrawElements;
   tbl.glPointParameterf = error_glPointParameterf;
   tbl.glPointParameterfv = error_glPointParameterfv;
   tbl.glPointParameteri = error_glPointParameteri;
   tbl.glPointParameteriv = error_glPointParameteriv;
   tbl.glFogCoordf = error_glFogCoordf;
   tbl.glFogCoordfv = error_glFogCoordfv;
   tbl.glFogCoordd = error_glFogCoordd;
   tbl.glFogCoorddv = error_glFogCoorddv;
   tbl.glFogCoordPointer = error_glFogCoordPointer;
   tbl.glSecondaryColor3b = error_glSecondaryColor3b;
   tbl.glSecondaryColor3bv = error_glSecondaryColor3bv;
   tbl.glSecondaryColor3d = error_glSecondaryColor3d;
   tbl.glSecondaryColor3dv = error_glSecondaryColor3dv;
   tbl.glSecondaryColor3f = error_glSecondaryColor3f;
   tbl.glSecondaryColor3fv = error_glSecondaryColor3fv;
   tbl.glSecondaryColor3i = error_glSecondaryColor3i;
   tbl.glSecondaryColor3iv = error_glSecondaryColor3iv;
   tbl.glSecondaryColor3s = error_glSecondaryColor3s;
   tbl.glSecondaryColor3sv = error_glSecondaryColor3sv;
   tbl.glSecondaryColor3ub = error_glSecondaryColor3ub;
   tbl.glSecondaryColor3ubv = error_glSecondaryColor3ubv;
   tbl.glSecondaryColor3ui = error_glSecondaryColor3ui;
   tbl.glSecondaryColor3uiv = error_glSecondaryColor3uiv;
   tbl.glSecondaryColor3us = error_glSecondaryColor3us;
   tbl.glSecondaryColor3usv = error_glSecondaryColor3usv;
   tbl.glSecondaryColorPointer = error_glSecondaryColorPointer;
   tbl.glWindowPos2d = error_glWindowPos2d;
   tbl.glWindowPos2dv = error_glWindowPos2dv;
   tbl.glWindowPos2f = error_glWindowPos2f;
   tbl.glWindowPos2fv = error_glWindowPos2fv;
   tbl.glWindowPos2i = error_glWindowPos2i;
   tbl.glWindowPos2iv = error_glWindowPos2iv;
   tbl.glWindowPos2s = error_glWindowPos2s;
   tbl.glWindowPos2sv = error_glWindowPos2sv;
   tbl.glWindowPos3d = error_glWindowPos3d;
   tbl.glWindowPos3dv = error_glWindowPos3dv;
   tbl.glWindowPos3f = error_glWindowPos3f;
   tbl.glWindowPos3fv = error_glWindowPos3fv;
   tbl.glWindowPos3i = error_glWindowPos3i;
   tbl.glWindowPos3iv = error_glWindowPos3iv;
   tbl.glWindowPos3s = error_glWindowPos3s;
   tbl.glWindowPos3sv = error_glWindowPos3sv;

// GL_VERSION_1_5

   tbl.glGenQueries = error_glGenQueries;
   tbl.glDeleteQueries = error_glDeleteQueries;
   tbl.glIsQuery = error_glIsQuery;
   tbl.glBeginQuery = error_glBeginQuery;
   tbl.glEndQuery = error_glEndQuery;
   tbl.glGetQueryiv = error_glGetQueryiv;
   tbl.glGetQueryObjectiv = error_glGetQueryObjectiv;
   tbl.glGetQueryObjectuiv = error_glGetQueryObjectuiv;
   tbl.glBindBuffer = error_glBindBuffer;
   tbl.glDeleteBuffers = error_glDeleteBuffers;
   tbl.glGenBuffers = error_glGenBuffers;
   tbl.glIsBuffer = error_glIsBuffer;
   tbl.glBufferData = error_glBufferData;
   tbl.glBufferSubData = error_glBufferSubData;
   tbl.glGetBufferSubData = error_glGetBufferSubData;
   tbl.glMapBuffer = error_glMapBuffer;
   tbl.glUnmapBuffer = error_glUnmapBuffer;
   tbl.glGetBufferParameteriv = error_glGetBufferParameteriv;
   tbl.glGetBufferPointerv = error_glGetBufferPointerv;

// GL_VERSION_2_0

   tbl.glBlendEquationSeparate = error_glBlendEquationSeparate;
   tbl.glDrawBuffers = error_glDrawBuffers;
   tbl.glStencilOpSeparate = error_glStencilOpSeparate;
   tbl.glStencilFuncSeparate = error_glStencilFuncSeparate;
   tbl.glStencilMaskSeparate = error_glStencilMaskSeparate;
   tbl.glAttachShader = error_glAttachShader;
   tbl.glBindAttribLocation = error_glBindAttribLocation;
   tbl.glCompileShader = error_glCompileShader;
   tbl.glCreateProgram = error_glCreateProgram;
   tbl.glCreateShader = error_glCreateShader;
   tbl.glDeleteProgram = error_glDeleteProgram;
   tbl.glDeleteShader = error_glDeleteShader;
   tbl.glDetachShader = error_glDetachShader;
   tbl.glDisableVertexAttribArray = error_glDisableVertexAttribArray;
   tbl.glEnableVertexAttribArray = error_glEnableVertexAttribArray;
   tbl.glGetActiveAttrib = error_glGetActiveAttrib;
   tbl.glGetActiveUniform = error_glGetActiveUniform;
   tbl.glGetAttachedShaders = error_glGetAttachedShaders;
   tbl.glGetAttribLocation = error_glGetAttribLocation;
   tbl.glGetProgramiv = error_glGetProgramiv;
   tbl.glGetProgramInfoLog = error_glGetProgramInfoLog;
   tbl.glGetShaderiv = error_glGetShaderiv;
   tbl.glGetShaderInfoLog = error_glGetShaderInfoLog;
   tbl.glGetShaderSource = error_glGetShaderSource;
   tbl.glGetUniformLocation = error_glGetUniformLocation;
   tbl.glGetUniformfv = error_glGetUniformfv;
   tbl.glGetUniformiv = error_glGetUniformiv;
   tbl.glGetVertexAttribdv = error_glGetVertexAttribdv;
   tbl.glGetVertexAttribfv = error_glGetVertexAttribfv;
   tbl.glGetVertexAttribiv = error_glGetVertexAttribiv;
   tbl.glGetVertexAttribPointerv = error_glGetVertexAttribPointerv;
   tbl.glIsProgram = error_glIsProgram;
   tbl.glIsShader = error_glIsShader;
   tbl.glLinkProgram = error_glLinkProgram;
   tbl.glShaderSource = error_glShaderSource;
   tbl.glUseProgram = error_glUseProgram;
   tbl.glUniform1f = error_glUniform1f;
   tbl.glUniform2f = error_glUniform2f;
   tbl.glUniform3f = error_glUniform3f;
   tbl.glUniform4f = error_glUniform4f;
   tbl.glUniform1i = error_glUniform1i;
   tbl.glUniform2i = error_glUniform2i;
   tbl.glUniform3i = error_glUniform3i;
   tbl.glUniform4i = error_glUniform4i;
   tbl.glUniform1fv = error_glUniform1fv;
   tbl.glUniform2fv = error_glUniform2fv;
   tbl.glUniform3fv = error_glUniform3fv;
   tbl.glUniform4fv = error_glUniform4fv;
   tbl.glUniform1iv = error_glUniform1iv;
   tbl.glUniform2iv = error_glUniform2iv;
   tbl.glUniform3iv = error_glUniform3iv;
   tbl.glUniform4iv = error_glUniform4iv;
   tbl.glUniformMatrix2fv = error_glUniformMatrix2fv;
   tbl.glUniformMatrix3fv = error_glUniformMatrix3fv;
   tbl.glUniformMatrix4fv = error_glUniformMatrix4fv;
   tbl.glValidateProgram = error_glValidateProgram;
   tbl.glVertexAttrib1d = error_glVertexAttrib1d;
   tbl.glVertexAttrib1dv = error_glVertexAttrib1dv;
   tbl.glVertexAttrib1f = error_glVertexAttrib1f;
   tbl.glVertexAttrib1fv = error_glVertexAttrib1fv;
   tbl.glVertexAttrib1s = error_glVertexAttrib1s;
   tbl.glVertexAttrib1sv = error_glVertexAttrib1sv;
   tbl.glVertexAttrib2d = error_glVertexAttrib2d;
   tbl.glVertexAttrib2dv = error_glVertexAttrib2dv;
   tbl.glVertexAttrib2f = error_glVertexAttrib2f;
   tbl.glVertexAttrib2fv = error_glVertexAttrib2fv;
   tbl.glVertexAttrib2s = error_glVertexAttrib2s;
   tbl.glVertexAttrib2sv = error_glVertexAttrib2sv;
   tbl.glVertexAttrib3d = error_glVertexAttrib3d;
   tbl.glVertexAttrib3dv = error_glVertexAttrib3dv;
   tbl.glVertexAttrib3f = error_glVertexAttrib3f;
   tbl.glVertexAttrib3fv = error_glVertexAttrib3fv;
   tbl.glVertexAttrib3s = error_glVertexAttrib3s;
   tbl.glVertexAttrib3sv = error_glVertexAttrib3sv;
   tbl.glVertexAttrib4Nbv = error_glVertexAttrib4Nbv;
   tbl.glVertexAttrib4Niv = error_glVertexAttrib4Niv;
   tbl.glVertexAttrib4Nsv = error_glVertexAttrib4Nsv;
   tbl.glVertexAttrib4Nub = error_glVertexAttrib4Nub;
   tbl.glVertexAttrib4Nubv = error_glVertexAttrib4Nubv;
   tbl.glVertexAttrib4Nuiv = error_glVertexAttrib4Nuiv;
   tbl.glVertexAttrib4Nusv = error_glVertexAttrib4Nusv;
   tbl.glVertexAttrib4bv = error_glVertexAttrib4bv;
   tbl.glVertexAttrib4d = error_glVertexAttrib4d;
   tbl.glVertexAttrib4dv = error_glVertexAttrib4dv;
   tbl.glVertexAttrib4f = error_glVertexAttrib4f;
   tbl.glVertexAttrib4fv = error_glVertexAttrib4fv;
   tbl.glVertexAttrib4iv = error_glVertexAttrib4iv;
   tbl.glVertexAttrib4s = error_glVertexAttrib4s;
   tbl.glVertexAttrib4sv = error_glVertexAttrib4sv;
   tbl.glVertexAttrib4ubv = error_glVertexAttrib4ubv;
   tbl.glVertexAttrib4uiv = error_glVertexAttrib4uiv;
   tbl.glVertexAttrib4usv = error_glVertexAttrib4usv;
   tbl.glVertexAttribPointer = error_glVertexAttribPointer;

// GL_VERSION_2_1

   tbl.glUniformMatrix2x3fv = error_glUniformMatrix2x3fv;
   tbl.glUniformMatrix3x2fv = error_glUniformMatrix3x2fv;
   tbl.glUniformMatrix2x4fv = error_glUniformMatrix2x4fv;
   tbl.glUniformMatrix4x2fv = error_glUniformMatrix4x2fv;
   tbl.glUniformMatrix3x4fv = error_glUniformMatrix3x4fv;
   tbl.glUniformMatrix4x3fv = error_glUniformMatrix4x3fv;

// GL_VERSION_3_0

   tbl.glColorMaski = error_glColorMaski;
   tbl.glGetBooleani_v = error_glGetBooleani_v;
   tbl.glGetIntegeri_v = error_glGetIntegeri_v;
   tbl.glEnablei = error_glEnablei;
   tbl.glDisablei = error_glDisablei;
   tbl.glIsEnabledi = error_glIsEnabledi;
   tbl.glBeginTransformFeedback = error_glBeginTransformFeedback;
   tbl.glEndTransformFeedback = error_glEndTransformFeedback;
   tbl.glBindBufferRange = error_glBindBufferRange;
   tbl.glBindBufferBase = error_glBindBufferBase;
   tbl.glTransformFeedbackVaryings = error_glTransformFeedbackVaryings;
   tbl.glGetTransformFeedbackVarying = error_glGetTransformFeedbackVarying;
   tbl.glClampColor = error_glClampColor;
   tbl.glBeginConditionalRender = error_glBeginConditionalRender;
   tbl.glEndConditionalRender = error_glEndConditionalRender;
   tbl.glVertexAttribIPointer = error_glVertexAttribIPointer;
   tbl.glGetVertexAttribIiv = error_glGetVertexAttribIiv;
   tbl.glGetVertexAttribIuiv = error_glGetVertexAttribIuiv;
   tbl.glVertexAttribI1i = error_glVertexAttribI1i;
   tbl.glVertexAttribI2i = error_glVertexAttribI2i;
   tbl.glVertexAttribI3i = error_glVertexAttribI3i;
   tbl.glVertexAttribI4i = error_glVertexAttribI4i;
   tbl.glVertexAttribI1ui = error_glVertexAttribI1ui;
   tbl.glVertexAttribI2ui = error_glVertexAttribI2ui;
   tbl.glVertexAttribI3ui = error_glVertexAttribI3ui;
   tbl.glVertexAttribI4ui = error_glVertexAttribI4ui;
   tbl.glVertexAttribI1iv = error_glVertexAttribI1iv;
   tbl.glVertexAttribI2iv = error_glVertexAttribI2iv;
   tbl.glVertexAttribI3iv = error_glVertexAttribI3iv;
   tbl.glVertexAttribI4iv = error_glVertexAttribI4iv;
   tbl.glVertexAttribI1uiv = error_glVertexAttribI1uiv;
   tbl.glVertexAttribI2uiv = error_glVertexAttribI2uiv;
   tbl.glVertexAttribI3uiv = error_glVertexAttribI3uiv;
   tbl.glVertexAttribI4uiv = error_glVertexAttribI4uiv;
   tbl.glVertexAttribI4bv = error_glVertexAttribI4bv;
   tbl.glVertexAttribI4sv = error_glVertexAttribI4sv;
   tbl.glVertexAttribI4ubv = error_glVertexAttribI4ubv;
   tbl.glVertexAttribI4usv = error_glVertexAttribI4usv;
   tbl.glGetUniformuiv = error_glGetUniformuiv;
   tbl.glBindFragDataLocation = error_glBindFragDataLocation;
   tbl.glGetFragDataLocation = error_glGetFragDataLocation;
   tbl.glUniform1ui = error_glUniform1ui;
   tbl.glUniform2ui = error_glUniform2ui;
   tbl.glUniform3ui = error_glUniform3ui;
   tbl.glUniform4ui = error_glUniform4ui;
   tbl.glUniform1uiv = error_glUniform1uiv;
   tbl.glUniform2uiv = error_glUniform2uiv;
   tbl.glUniform3uiv = error_glUniform3uiv;
   tbl.glUniform4uiv = error_glUniform4uiv;
   tbl.glTexParameterIiv = error_glTexParameterIiv;
   tbl.glTexParameterIuiv = error_glTexParameterIuiv;
   tbl.glGetTexParameterIiv = error_glGetTexParameterIiv;
   tbl.glGetTexParameterIuiv = error_glGetTexParameterIuiv;
   tbl.glClearBufferiv = error_glClearBufferiv;
   tbl.glClearBufferuiv = error_glClearBufferuiv;
   tbl.glClearBufferfv = error_glClearBufferfv;
   tbl.glClearBufferfi = error_glClearBufferfi;
   tbl.glGetStringi = error_glGetStringi;

// GL_VERSION_3_1

   tbl.glDrawArraysInstanced = error_glDrawArraysInstanced;
   tbl.glDrawElementsInstanced = error_glDrawElementsInstanced;
   tbl.glTexBuffer = error_glTexBuffer;
   tbl.glPrimitiveRestartIndex = error_glPrimitiveRestartIndex;

// GL_VERSION_3_2

   tbl.glGetInteger64i_v = error_glGetInteger64i_v;
   tbl.glGetBufferParameteri64v = error_glGetBufferParameteri64v;
   tbl.glFramebufferTexture = error_glFramebufferTexture;
   tbl.glFramebufferTextureFace = error_glFramebufferTextureFace;

// GL_VERSION_3_3

   tbl.glGenSamplers = error_glGenSamplers;
   tbl.glDeleteSamplers = error_glDeleteSamplers;
   tbl.glIsSampler = error_glIsSampler;
   tbl.glBindSampler = error_glBindSampler;
   tbl.glSamplerParameteri = error_glSamplerParameteri;
   tbl.glSamplerParameterf = error_glSamplerParameterf;
   tbl.glSamplerParameteriv = error_glSamplerParameteriv;
   tbl.glSamplerParameterfv = error_glSamplerParameterfv;
   tbl.glSamplerParameterIiv = error_glSamplerParameterIiv;
   tbl.glSamplerParameterIuiv = error_glSamplerParameterIuiv;
   tbl.glGetSamplerParameteriv = error_glGetSamplerParameteriv;
   tbl.glGetSamplerParameterfv = error_glGetSamplerParameterfv;
   tbl.glGetSamplerParameterIiv = error_glGetSamplerParameterIiv;
   tbl.glGetSamplerParameterIuiv = error_glGetSamplerParameterIuiv;
   tbl.glBindFragDataLocationIndexed = error_glBindFragDataLocationIndexed;
   tbl.glGetFragDataIndex = error_glGetFragDataIndex;
   tbl.glGetQueryObjecti64v = error_glGetQueryObjecti64v;
   tbl.glGetQueryObjectui64v = error_glGetQueryObjectui64v;
   tbl.glQueryCounter = error_glQueryCounter;
   tbl.glVertexAttribDivisor = error_glVertexAttribDivisor;
   tbl.glVertexP2ui = error_glVertexP2ui;
   tbl.glVertexP2uiv = error_glVertexP2uiv;
   tbl.glVertexP3ui = error_glVertexP3ui;
   tbl.glVertexP3uiv = error_glVertexP3uiv;
   tbl.glVertexP4ui = error_glVertexP4ui;
   tbl.glVertexP4uiv = error_glVertexP4uiv;
   tbl.glTexCoordP1ui = error_glTexCoordP1ui;
   tbl.glTexCoordP1uiv = error_glTexCoordP1uiv;
   tbl.glTexCoordP2ui = error_glTexCoordP2ui;
   tbl.glTexCoordP2uiv = error_glTexCoordP2uiv;
   tbl.glTexCoordP3ui = error_glTexCoordP3ui;
   tbl.glTexCoordP3uiv = error_glTexCoordP3uiv;
   tbl.glTexCoordP4ui = error_glTexCoordP4ui;
   tbl.glTexCoordP4uiv = error_glTexCoordP4uiv;
   tbl.glMultiTexCoordP1ui = error_glMultiTexCoordP1ui;
   tbl.glMultiTexCoordP1uiv = error_glMultiTexCoordP1uiv;
   tbl.glMultiTexCoordP2ui = error_glMultiTexCoordP2ui;
   tbl.glMultiTexCoordP2uiv = error_glMultiTexCoordP2uiv;
   tbl.glMultiTexCoordP3ui = error_glMultiTexCoordP3ui;
   tbl.glMultiTexCoordP3uiv = error_glMultiTexCoordP3uiv;
   tbl.glMultiTexCoordP4ui = error_glMultiTexCoordP4ui;
   tbl.glMultiTexCoordP4uiv = error_glMultiTexCoordP4uiv;
   tbl.glNormalP3ui = error_glNormalP3ui;
   tbl.glNormalP3uiv = error_glNormalP3uiv;
   tbl.glColorP3ui = error_glColorP3ui;
   tbl.glColorP3uiv = error_glColorP3uiv;
   tbl.glColorP4ui = error_glColorP4ui;
   tbl.glColorP4uiv = error_glColorP4uiv;
   tbl.glSecondaryColorP3ui = error_glSecondaryColorP3ui;
   tbl.glSecondaryColorP3uiv = error_glSecondaryColorP3uiv;
   tbl.glVertexAttribP1ui = error_glVertexAttribP1ui;
   tbl.glVertexAttribP1uiv = error_glVertexAttribP1uiv;
   tbl.glVertexAttribP2ui = error_glVertexAttribP2ui;
   tbl.glVertexAttribP2uiv = error_glVertexAttribP2uiv;
   tbl.glVertexAttribP3ui = error_glVertexAttribP3ui;
   tbl.glVertexAttribP3uiv = error_glVertexAttribP3uiv;
   tbl.glVertexAttribP4ui = error_glVertexAttribP4ui;
   tbl.glVertexAttribP4uiv = error_glVertexAttribP4uiv;

// GL_VERSION_4_0

   tbl.glBlendEquationi = error_glBlendEquationi;
   tbl.glBlendEquationSeparatei = error_glBlendEquationSeparatei;
   tbl.glBlendFunci = error_glBlendFunci;
   tbl.glBlendFuncSeparatei = error_glBlendFuncSeparatei;
   tbl.glDrawArraysIndirect = error_glDrawArraysIndirect;
   tbl.glDrawElementsIndirect = error_glDrawElementsIndirect;
   tbl.glUniform1d = error_glUniform1d;
   tbl.glUniform2d = error_glUniform2d;
   tbl.glUniform3d = error_glUniform3d;
   tbl.glUniform4d = error_glUniform4d;
   tbl.glUniform1dv = error_glUniform1dv;
   tbl.glUniform2dv = error_glUniform2dv;
   tbl.glUniform3dv = error_glUniform3dv;
   tbl.glUniform4dv = error_glUniform4dv;
   tbl.glUniformMatrix2dv = error_glUniformMatrix2dv;
   tbl.glUniformMatrix3dv = error_glUniformMatrix3dv;
   tbl.glUniformMatrix4dv = error_glUniformMatrix4dv;
   tbl.glUniformMatrix2x3dv = error_glUniformMatrix2x3dv;
   tbl.glUniformMatrix2x4dv = error_glUniformMatrix2x4dv;
   tbl.glUniformMatrix3x2dv = error_glUniformMatrix3x2dv;
   tbl.glUniformMatrix3x4dv = error_glUniformMatrix3x4dv;
   tbl.glUniformMatrix4x2dv = error_glUniformMatrix4x2dv;
   tbl.glUniformMatrix4x3dv = error_glUniformMatrix4x3dv;
   tbl.glGetUniformdv = error_glGetUniformdv;

// GL_ARB_sample_shading

   tbl.glMinSampleShading = error_glMinSampleShading;

// GL_VERSION_4_0

   tbl.glPatchParameteri = error_glPatchParameteri;
   tbl.glPatchParameterfv = error_glPatchParameterfv;
   tbl.glGenTransformFeedbacks = error_glGenTransformFeedbacks;
   tbl.glDeleteTransformFeedbacks = error_glDeleteTransformFeedbacks;
   tbl.glBindTransformFeedback = error_glBindTransformFeedback;
   tbl.glIsTransformFeedback = error_glIsTransformFeedback;
   tbl.glPauseTransformFeedback = error_glPauseTransformFeedback;
   tbl.glResumeTransformFeedback = error_glResumeTransformFeedback;
   tbl.glDrawTransformFeedback = error_glDrawTransformFeedback;
   tbl.glDrawTransformFeedbackStream = error_glDrawTransformFeedbackStream;
   tbl.glBeginQueryIndexed = error_glBeginQueryIndexed;
   tbl.glEndQueryIndexed = error_glEndQueryIndexed;
   tbl.glGetQueryIndexediv = error_glGetQueryIndexediv;
   tbl.glGetSubroutineUniformLocation = error_glGetSubroutineUniformLocation;
   tbl.glGetSubroutineIndex = error_glGetSubroutineIndex;
   tbl.glGetActiveSubroutineUniformiv = error_glGetActiveSubroutineUniformiv;
   tbl.glGetActiveSubroutineUniformName = error_glGetActiveSubroutineUniformName;
   tbl.glGetActiveSubroutineName = error_glGetActiveSubroutineName;
   tbl.glUniformSubroutinesuiv = error_glUniformSubroutinesuiv;
   tbl.glGetUniformSubroutineuiv = error_glGetUniformSubroutineuiv;
   tbl.glGetProgramStageiv = error_glGetProgramStageiv;

// GL_VERSION_4_1

   tbl.glVertexAttribL1d = error_glVertexAttribL1d;
   tbl.glVertexAttribL2d = error_glVertexAttribL2d;
   tbl.glVertexAttribL3d = error_glVertexAttribL3d;
   tbl.glVertexAttribL4d = error_glVertexAttribL4d;
   tbl.glVertexAttribL1dv = error_glVertexAttribL1dv;
   tbl.glVertexAttribL2dv = error_glVertexAttribL2dv;
   tbl.glVertexAttribL3dv = error_glVertexAttribL3dv;
   tbl.glVertexAttribL4dv = error_glVertexAttribL4dv;
   tbl.glVertexAttribLPointer = error_glVertexAttribLPointer;
   tbl.glGetVertexAttribLdv = error_glGetVertexAttribLdv;
   tbl.glReleaseShaderCompiler = error_glReleaseShaderCompiler;
   tbl.glShaderBinary = error_glShaderBinary;
   tbl.glGetShaderPrecisionFormat = error_glGetShaderPrecisionFormat;
   tbl.glDepthRangef = error_glDepthRangef;
   tbl.glClearDepthf = error_glClearDepthf;
   tbl.glGetProgramBinary = error_glGetProgramBinary;
   tbl.glProgramBinary = error_glProgramBinary;
   tbl.glProgramParameteri = error_glProgramParameteri;
   tbl.glViewportArrayv = error_glViewportArrayv;
   tbl.glViewportIndexedf = error_glViewportIndexedf;
   tbl.glViewportIndexedfv = error_glViewportIndexedfv;
   tbl.glScissorArrayv = error_glScissorArrayv;
   tbl.glScissorIndexed = error_glScissorIndexed;
   tbl.glScissorIndexedv = error_glScissorIndexedv;
   tbl.glDepthRangeArrayv = error_glDepthRangeArrayv;
   tbl.glDepthRangeIndexed = error_glDepthRangeIndexed;
   tbl.glGetFloati_v = error_glGetFloati_v;
   tbl.glGetDoublei_v = error_glGetDoublei_v;
   tbl.glActiveShaderProgram = error_glActiveShaderProgram;
   tbl.glUseProgramStages = error_glUseProgramStages;
   tbl.glCreateShaderProgramv = error_glCreateShaderProgramv;
   tbl.glBindProgramPipeline = error_glBindProgramPipeline;
   tbl.glDeleteProgramPipelines = error_glDeleteProgramPipelines;
   tbl.glGenProgramPipelines = error_glGenProgramPipelines;
   tbl.glIsProgramPipeline = error_glIsProgramPipeline;
   tbl.glGetProgramPipelineiv = error_glGetProgramPipelineiv;
   tbl.glValidateProgramPipeline = error_glValidateProgramPipeline;
   tbl.glGetProgramPipelineInfoLog = error_glGetProgramPipelineInfoLog;
   tbl.glProgramUniform1f = error_glProgramUniform1f;
   tbl.glProgramUniform2f = error_glProgramUniform2f;
   tbl.glProgramUniform3f = error_glProgramUniform3f;
   tbl.glProgramUniform4f = error_glProgramUniform4f;
   tbl.glProgramUniform1i = error_glProgramUniform1i;
   tbl.glProgramUniform2i = error_glProgramUniform2i;
   tbl.glProgramUniform3i = error_glProgramUniform3i;
   tbl.glProgramUniform4i = error_glProgramUniform4i;
   tbl.glProgramUniform1fv = error_glProgramUniform1fv;
   tbl.glProgramUniform2fv = error_glProgramUniform2fv;
   tbl.glProgramUniform3fv = error_glProgramUniform3fv;
   tbl.glProgramUniform4fv = error_glProgramUniform4fv;
   tbl.glProgramUniform1iv = error_glProgramUniform1iv;
   tbl.glProgramUniform2iv = error_glProgramUniform2iv;
   tbl.glProgramUniform3iv = error_glProgramUniform3iv;
   tbl.glProgramUniform4iv = error_glProgramUniform4iv;
   tbl.glProgramUniformMatrix2fv = error_glProgramUniformMatrix2fv;
   tbl.glProgramUniformMatrix3fv = error_glProgramUniformMatrix3fv;
   tbl.glProgramUniformMatrix4fv = error_glProgramUniformMatrix4fv;
   tbl.glProgramUniformMatrix2x3fv = error_glProgramUniformMatrix2x3fv;
   tbl.glProgramUniformMatrix3x2fv = error_glProgramUniformMatrix3x2fv;
   tbl.glProgramUniformMatrix2x4fv = error_glProgramUniformMatrix2x4fv;
   tbl.glProgramUniformMatrix4x2fv = error_glProgramUniformMatrix4x2fv;
   tbl.glProgramUniformMatrix3x4fv = error_glProgramUniformMatrix3x4fv;
   tbl.glProgramUniformMatrix4x3fv = error_glProgramUniformMatrix4x3fv;
   tbl.glProgramUniform1ui = error_glProgramUniform1ui;
   tbl.glProgramUniform2ui = error_glProgramUniform2ui;
   tbl.glProgramUniform3ui = error_glProgramUniform3ui;
   tbl.glProgramUniform4ui = error_glProgramUniform4ui;
   tbl.glProgramUniform1uiv = error_glProgramUniform1uiv;
   tbl.glProgramUniform2uiv = error_glProgramUniform2uiv;
   tbl.glProgramUniform3uiv = error_glProgramUniform3uiv;
   tbl.glProgramUniform4uiv = error_glProgramUniform4uiv;
   tbl.glProgramUniform1d = error_glProgramUniform1d;
   tbl.glProgramUniform2d = error_glProgramUniform2d;
   tbl.glProgramUniform3d = error_glProgramUniform3d;
   tbl.glProgramUniform4d = error_glProgramUniform4d;
   tbl.glProgramUniform1dv = error_glProgramUniform1dv;
   tbl.glProgramUniform2dv = error_glProgramUniform2dv;
   tbl.glProgramUniform3dv = error_glProgramUniform3dv;
   tbl.glProgramUniform4dv = error_glProgramUniform4dv;
   tbl.glProgramUniformMatrix2dv = error_glProgramUniformMatrix2dv;
   tbl.glProgramUniformMatrix3dv = error_glProgramUniformMatrix3dv;
   tbl.glProgramUniformMatrix4dv = error_glProgramUniformMatrix4dv;
   tbl.glProgramUniformMatrix2x3dv = error_glProgramUniformMatrix2x3dv;
   tbl.glProgramUniformMatrix2x4dv = error_glProgramUniformMatrix2x4dv;
   tbl.glProgramUniformMatrix3x2dv = error_glProgramUniformMatrix3x2dv;
   tbl.glProgramUniformMatrix3x4dv = error_glProgramUniformMatrix3x4dv;
   tbl.glProgramUniformMatrix4x2dv = error_glProgramUniformMatrix4x2dv;
   tbl.glProgramUniformMatrix4x3dv = error_glProgramUniformMatrix4x3dv;

// GL_ARB_multitexture

   tbl.glActiveTextureARB = error_glActiveTextureARB;
   tbl.glClientActiveTextureARB = error_glClientActiveTextureARB;
   tbl.glMultiTexCoord1dARB = error_glMultiTexCoord1dARB;
   tbl.glMultiTexCoord1dvARB = error_glMultiTexCoord1dvARB;
   tbl.glMultiTexCoord1fARB = error_glMultiTexCoord1fARB;
   tbl.glMultiTexCoord1fvARB = error_glMultiTexCoord1fvARB;
   tbl.glMultiTexCoord1iARB = error_glMultiTexCoord1iARB;
   tbl.glMultiTexCoord1ivARB = error_glMultiTexCoord1ivARB;
   tbl.glMultiTexCoord1sARB = error_glMultiTexCoord1sARB;
   tbl.glMultiTexCoord1svARB = error_glMultiTexCoord1svARB;
   tbl.glMultiTexCoord2dARB = error_glMultiTexCoord2dARB;
   tbl.glMultiTexCoord2dvARB = error_glMultiTexCoord2dvARB;
   tbl.glMultiTexCoord2fARB = error_glMultiTexCoord2fARB;
   tbl.glMultiTexCoord2fvARB = error_glMultiTexCoord2fvARB;
   tbl.glMultiTexCoord2iARB = error_glMultiTexCoord2iARB;
   tbl.glMultiTexCoord2ivARB = error_glMultiTexCoord2ivARB;
   tbl.glMultiTexCoord2sARB = error_glMultiTexCoord2sARB;
   tbl.glMultiTexCoord2svARB = error_glMultiTexCoord2svARB;
   tbl.glMultiTexCoord3dARB = error_glMultiTexCoord3dARB;
   tbl.glMultiTexCoord3dvARB = error_glMultiTexCoord3dvARB;
   tbl.glMultiTexCoord3fARB = error_glMultiTexCoord3fARB;
   tbl.glMultiTexCoord3fvARB = error_glMultiTexCoord3fvARB;
   tbl.glMultiTexCoord3iARB = error_glMultiTexCoord3iARB;
   tbl.glMultiTexCoord3ivARB = error_glMultiTexCoord3ivARB;
   tbl.glMultiTexCoord3sARB = error_glMultiTexCoord3sARB;
   tbl.glMultiTexCoord3svARB = error_glMultiTexCoord3svARB;
   tbl.glMultiTexCoord4dARB = error_glMultiTexCoord4dARB;
   tbl.glMultiTexCoord4dvARB = error_glMultiTexCoord4dvARB;
   tbl.glMultiTexCoord4fARB = error_glMultiTexCoord4fARB;
   tbl.glMultiTexCoord4fvARB = error_glMultiTexCoord4fvARB;
   tbl.glMultiTexCoord4iARB = error_glMultiTexCoord4iARB;
   tbl.glMultiTexCoord4ivARB = error_glMultiTexCoord4ivARB;
   tbl.glMultiTexCoord4sARB = error_glMultiTexCoord4sARB;
   tbl.glMultiTexCoord4svARB = error_glMultiTexCoord4svARB;

// GL_ARB_transpose_matrix

   tbl.glLoadTransposeMatrixfARB = error_glLoadTransposeMatrixfARB;
   tbl.glLoadTransposeMatrixdARB = error_glLoadTransposeMatrixdARB;
   tbl.glMultTransposeMatrixfARB = error_glMultTransposeMatrixfARB;
   tbl.glMultTransposeMatrixdARB = error_glMultTransposeMatrixdARB;

// GL_ARB_multisample

   tbl.glSampleCoverageARB = error_glSampleCoverageARB;

// GL_ARB_texture_compression

   tbl.glCompressedTexImage3DARB = error_glCompressedTexImage3DARB;
   tbl.glCompressedTexImage2DARB = error_glCompressedTexImage2DARB;
   tbl.glCompressedTexImage1DARB = error_glCompressedTexImage1DARB;
   tbl.glCompressedTexSubImage3DARB = error_glCompressedTexSubImage3DARB;
   tbl.glCompressedTexSubImage2DARB = error_glCompressedTexSubImage2DARB;
   tbl.glCompressedTexSubImage1DARB = error_glCompressedTexSubImage1DARB;
   tbl.glGetCompressedTexImageARB = error_glGetCompressedTexImageARB;

// GL_ARB_point_parameters

   tbl.glPointParameterfARB = error_glPointParameterfARB;
   tbl.glPointParameterfvARB = error_glPointParameterfvARB;

// GL_ARB_vertex_blend

   tbl.glWeightbvARB = error_glWeightbvARB;
   tbl.glWeightsvARB = error_glWeightsvARB;
   tbl.glWeightivARB = error_glWeightivARB;
   tbl.glWeightfvARB = error_glWeightfvARB;
   tbl.glWeightdvARB = error_glWeightdvARB;
   tbl.glWeightubvARB = error_glWeightubvARB;
   tbl.glWeightusvARB = error_glWeightusvARB;
   tbl.glWeightuivARB = error_glWeightuivARB;
   tbl.glWeightPointerARB = error_glWeightPointerARB;
   tbl.glVertexBlendARB = error_glVertexBlendARB;

// GL_ARB_matrix_palette

   tbl.glCurrentPaletteMatrixARB = error_glCurrentPaletteMatrixARB;
   tbl.glMatrixIndexubvARB = error_glMatrixIndexubvARB;
   tbl.glMatrixIndexusvARB = error_glMatrixIndexusvARB;
   tbl.glMatrixIndexuivARB = error_glMatrixIndexuivARB;
   tbl.glMatrixIndexPointerARB = error_glMatrixIndexPointerARB;

// GL_ARB_window_pos

   tbl.glWindowPos2dARB = error_glWindowPos2dARB;
   tbl.glWindowPos2dvARB = error_glWindowPos2dvARB;
   tbl.glWindowPos2fARB = error_glWindowPos2fARB;
   tbl.glWindowPos2fvARB = error_glWindowPos2fvARB;
   tbl.glWindowPos2iARB = error_glWindowPos2iARB;
   tbl.glWindowPos2ivARB = error_glWindowPos2ivARB;
   tbl.glWindowPos2sARB = error_glWindowPos2sARB;
   tbl.glWindowPos2svARB = error_glWindowPos2svARB;
   tbl.glWindowPos3dARB = error_glWindowPos3dARB;
   tbl.glWindowPos3dvARB = error_glWindowPos3dvARB;
   tbl.glWindowPos3fARB = error_glWindowPos3fARB;
   tbl.glWindowPos3fvARB = error_glWindowPos3fvARB;
   tbl.glWindowPos3iARB = error_glWindowPos3iARB;
   tbl.glWindowPos3ivARB = error_glWindowPos3ivARB;
   tbl.glWindowPos3sARB = error_glWindowPos3sARB;
   tbl.glWindowPos3svARB = error_glWindowPos3svARB;

// GL_ARB_vertex_program

   tbl.glVertexAttrib1dARB = error_glVertexAttrib1dARB;
   tbl.glVertexAttrib1dvARB = error_glVertexAttrib1dvARB;
   tbl.glVertexAttrib1fARB = error_glVertexAttrib1fARB;
   tbl.glVertexAttrib1fvARB = error_glVertexAttrib1fvARB;
   tbl.glVertexAttrib1sARB = error_glVertexAttrib1sARB;
   tbl.glVertexAttrib1svARB = error_glVertexAttrib1svARB;
   tbl.glVertexAttrib2dARB = error_glVertexAttrib2dARB;
   tbl.glVertexAttrib2dvARB = error_glVertexAttrib2dvARB;
   tbl.glVertexAttrib2fARB = error_glVertexAttrib2fARB;
   tbl.glVertexAttrib2fvARB = error_glVertexAttrib2fvARB;
   tbl.glVertexAttrib2sARB = error_glVertexAttrib2sARB;
   tbl.glVertexAttrib2svARB = error_glVertexAttrib2svARB;
   tbl.glVertexAttrib3dARB = error_glVertexAttrib3dARB;
   tbl.glVertexAttrib3dvARB = error_glVertexAttrib3dvARB;
   tbl.glVertexAttrib3fARB = error_glVertexAttrib3fARB;
   tbl.glVertexAttrib3fvARB = error_glVertexAttrib3fvARB;
   tbl.glVertexAttrib3sARB = error_glVertexAttrib3sARB;
   tbl.glVertexAttrib3svARB = error_glVertexAttrib3svARB;
   tbl.glVertexAttrib4NbvARB = error_glVertexAttrib4NbvARB;
   tbl.glVertexAttrib4NivARB = error_glVertexAttrib4NivARB;
   tbl.glVertexAttrib4NsvARB = error_glVertexAttrib4NsvARB;
   tbl.glVertexAttrib4NubARB = error_glVertexAttrib4NubARB;
   tbl.glVertexAttrib4NubvARB = error_glVertexAttrib4NubvARB;
   tbl.glVertexAttrib4NuivARB = error_glVertexAttrib4NuivARB;
   tbl.glVertexAttrib4NusvARB = error_glVertexAttrib4NusvARB;
   tbl.glVertexAttrib4bvARB = error_glVertexAttrib4bvARB;
   tbl.glVertexAttrib4dARB = error_glVertexAttrib4dARB;
   tbl.glVertexAttrib4dvARB = error_glVertexAttrib4dvARB;
   tbl.glVertexAttrib4fARB = error_glVertexAttrib4fARB;
   tbl.glVertexAttrib4fvARB = error_glVertexAttrib4fvARB;
   tbl.glVertexAttrib4ivARB = error_glVertexAttrib4ivARB;
   tbl.glVertexAttrib4sARB = error_glVertexAttrib4sARB;
   tbl.glVertexAttrib4svARB = error_glVertexAttrib4svARB;
   tbl.glVertexAttrib4ubvARB = error_glVertexAttrib4ubvARB;
   tbl.glVertexAttrib4uivARB = error_glVertexAttrib4uivARB;
   tbl.glVertexAttrib4usvARB = error_glVertexAttrib4usvARB;
   tbl.glVertexAttribPointerARB = error_glVertexAttribPointerARB;
   tbl.glEnableVertexAttribArrayARB = error_glEnableVertexAttribArrayARB;
   tbl.glDisableVertexAttribArrayARB = error_glDisableVertexAttribArrayARB;
   tbl.glProgramStringARB = error_glProgramStringARB;
   tbl.glBindProgramARB = error_glBindProgramARB;
   tbl.glDeleteProgramsARB = error_glDeleteProgramsARB;
   tbl.glGenProgramsARB = error_glGenProgramsARB;
   tbl.glProgramEnvParameter4dARB = error_glProgramEnvParameter4dARB;
   tbl.glProgramEnvParameter4dvARB = error_glProgramEnvParameter4dvARB;
   tbl.glProgramEnvParameter4fARB = error_glProgramEnvParameter4fARB;
   tbl.glProgramEnvParameter4fvARB = error_glProgramEnvParameter4fvARB;
   tbl.glProgramLocalParameter4dARB = error_glProgramLocalParameter4dARB;
   tbl.glProgramLocalParameter4dvARB = error_glProgramLocalParameter4dvARB;
   tbl.glProgramLocalParameter4fARB = error_glProgramLocalParameter4fARB;
   tbl.glProgramLocalParameter4fvARB = error_glProgramLocalParameter4fvARB;
   tbl.glGetProgramEnvParameterdvARB = error_glGetProgramEnvParameterdvARB;
   tbl.glGetProgramEnvParameterfvARB = error_glGetProgramEnvParameterfvARB;
   tbl.glGetProgramLocalParameterdvARB = error_glGetProgramLocalParameterdvARB;
   tbl.glGetProgramLocalParameterfvARB = error_glGetProgramLocalParameterfvARB;
   tbl.glGetProgramivARB = error_glGetProgramivARB;
   tbl.glGetProgramStringARB = error_glGetProgramStringARB;
   tbl.glGetVertexAttribdvARB = error_glGetVertexAttribdvARB;
   tbl.glGetVertexAttribfvARB = error_glGetVertexAttribfvARB;
   tbl.glGetVertexAttribivARB = error_glGetVertexAttribivARB;
   tbl.glGetVertexAttribPointervARB = error_glGetVertexAttribPointervARB;
   tbl.glIsProgramARB = error_glIsProgramARB;

// GL_ARB_vertex_buffer_object

   tbl.glBindBufferARB = error_glBindBufferARB;
   tbl.glDeleteBuffersARB = error_glDeleteBuffersARB;
   tbl.glGenBuffersARB = error_glGenBuffersARB;
   tbl.glIsBufferARB = error_glIsBufferARB;
   tbl.glBufferDataARB = error_glBufferDataARB;
   tbl.glBufferSubDataARB = error_glBufferSubDataARB;
   tbl.glGetBufferSubDataARB = error_glGetBufferSubDataARB;
   tbl.glMapBufferARB = error_glMapBufferARB;
   tbl.glUnmapBufferARB = error_glUnmapBufferARB;
   tbl.glGetBufferParameterivARB = error_glGetBufferParameterivARB;
   tbl.glGetBufferPointervARB = error_glGetBufferPointervARB;

// GL_ARB_occlusion_query

   tbl.glGenQueriesARB = error_glGenQueriesARB;
   tbl.glDeleteQueriesARB = error_glDeleteQueriesARB;
   tbl.glIsQueryARB = error_glIsQueryARB;
   tbl.glBeginQueryARB = error_glBeginQueryARB;
   tbl.glEndQueryARB = error_glEndQueryARB;
   tbl.glGetQueryivARB = error_glGetQueryivARB;
   tbl.glGetQueryObjectivARB = error_glGetQueryObjectivARB;
   tbl.glGetQueryObjectuivARB = error_glGetQueryObjectuivARB;

// GL_ARB_shader_objects

   tbl.glDeleteObjectARB = error_glDeleteObjectARB;
   tbl.glGetHandleARB = error_glGetHandleARB;
   tbl.glDetachObjectARB = error_glDetachObjectARB;
   tbl.glCreateShaderObjectARB = error_glCreateShaderObjectARB;
   tbl.glShaderSourceARB = error_glShaderSourceARB;
   tbl.glCompileShaderARB = error_glCompileShaderARB;
   tbl.glCreateProgramObjectARB = error_glCreateProgramObjectARB;
   tbl.glAttachObjectARB = error_glAttachObjectARB;
   tbl.glLinkProgramARB = error_glLinkProgramARB;
   tbl.glUseProgramObjectARB = error_glUseProgramObjectARB;
   tbl.glValidateProgramARB = error_glValidateProgramARB;
   tbl.glUniform1fARB = error_glUniform1fARB;
   tbl.glUniform2fARB = error_glUniform2fARB;
   tbl.glUniform3fARB = error_glUniform3fARB;
   tbl.glUniform4fARB = error_glUniform4fARB;
   tbl.glUniform1iARB = error_glUniform1iARB;
   tbl.glUniform2iARB = error_glUniform2iARB;
   tbl.glUniform3iARB = error_glUniform3iARB;
   tbl.glUniform4iARB = error_glUniform4iARB;
   tbl.glUniform1fvARB = error_glUniform1fvARB;
   tbl.glUniform2fvARB = error_glUniform2fvARB;
   tbl.glUniform3fvARB = error_glUniform3fvARB;
   tbl.glUniform4fvARB = error_glUniform4fvARB;
   tbl.glUniform1ivARB = error_glUniform1ivARB;
   tbl.glUniform2ivARB = error_glUniform2ivARB;
   tbl.glUniform3ivARB = error_glUniform3ivARB;
   tbl.glUniform4ivARB = error_glUniform4ivARB;
   tbl.glUniformMatrix2fvARB = error_glUniformMatrix2fvARB;
   tbl.glUniformMatrix3fvARB = error_glUniformMatrix3fvARB;
   tbl.glUniformMatrix4fvARB = error_glUniformMatrix4fvARB;
   tbl.glGetObjectParameterfvARB = error_glGetObjectParameterfvARB;
   tbl.glGetObjectParameterivARB = error_glGetObjectParameterivARB;
   tbl.glGetInfoLogARB = error_glGetInfoLogARB;
   tbl.glGetAttachedObjectsARB = error_glGetAttachedObjectsARB;
   tbl.glGetUniformLocationARB = error_glGetUniformLocationARB;
   tbl.glGetActiveUniformARB = error_glGetActiveUniformARB;
   tbl.glGetUniformfvARB = error_glGetUniformfvARB;
   tbl.glGetUniformivARB = error_glGetUniformivARB;
   tbl.glGetShaderSourceARB = error_glGetShaderSourceARB;

// GL_ARB_vertex_shader

   tbl.glBindAttribLocationARB = error_glBindAttribLocationARB;
   tbl.glGetActiveAttribARB = error_glGetActiveAttribARB;
   tbl.glGetAttribLocationARB = error_glGetAttribLocationARB;

// GL_ARB_draw_buffers

   tbl.glDrawBuffersARB = error_glDrawBuffersARB;

// GL_ARB_color_buffer_float

   tbl.glClampColorARB = error_glClampColorARB;

// GL_ARB_draw_instanced

   tbl.glDrawArraysInstancedARB = error_glDrawArraysInstancedARB;
   tbl.glDrawElementsInstancedARB = error_glDrawElementsInstancedARB;

// GL_ARB_framebuffer_object

   tbl.glIsRenderbuffer = error_glIsRenderbuffer;
   tbl.glBindRenderbuffer = error_glBindRenderbuffer;
   tbl.glDeleteRenderbuffers = error_glDeleteRenderbuffers;
   tbl.glGenRenderbuffers = error_glGenRenderbuffers;
   tbl.glRenderbufferStorage = error_glRenderbufferStorage;
   tbl.glGetRenderbufferParameteriv = error_glGetRenderbufferParameteriv;
   tbl.glIsFramebuffer = error_glIsFramebuffer;
   tbl.glBindFramebuffer = error_glBindFramebuffer;
   tbl.glDeleteFramebuffers = error_glDeleteFramebuffers;
   tbl.glGenFramebuffers = error_glGenFramebuffers;
   tbl.glCheckFramebufferStatus = error_glCheckFramebufferStatus;
   tbl.glFramebufferTexture1D = error_glFramebufferTexture1D;
   tbl.glFramebufferTexture2D = error_glFramebufferTexture2D;
   tbl.glFramebufferTexture3D = error_glFramebufferTexture3D;
   tbl.glFramebufferRenderbuffer = error_glFramebufferRenderbuffer;
   tbl.glGetFramebufferAttachmentParameteriv = error_glGetFramebufferAttachmentParameteriv;
   tbl.glGenerateMipmap = error_glGenerateMipmap;
   tbl.glBlitFramebuffer = error_glBlitFramebuffer;
   tbl.glRenderbufferStorageMultisample = error_glRenderbufferStorageMultisample;
   tbl.glFramebufferTextureLayer = error_glFramebufferTextureLayer;

// GL_ARB_geometry_shader4

   tbl.glProgramParameteriARB = error_glProgramParameteriARB;
   tbl.glFramebufferTextureARB = error_glFramebufferTextureARB;
   tbl.glFramebufferTextureLayerARB = error_glFramebufferTextureLayerARB;
   tbl.glFramebufferTextureFaceARB = error_glFramebufferTextureFaceARB;

// GL_ARB_instanced_arrays

   tbl.glVertexAttribDivisorARB = error_glVertexAttribDivisorARB;

// GL_ARB_map_buffer_range

   tbl.glMapBufferRange = error_glMapBufferRange;
   tbl.glFlushMappedBufferRange = error_glFlushMappedBufferRange;

// GL_ARB_texture_buffer_object

   tbl.glTexBufferARB = error_glTexBufferARB;

// GL_ARB_vertex_array_object

   tbl.glBindVertexArray = error_glBindVertexArray;
   tbl.glDeleteVertexArrays = error_glDeleteVertexArrays;
   tbl.glGenVertexArrays = error_glGenVertexArrays;
   tbl.glIsVertexArray = error_glIsVertexArray;

// GL_ARB_uniform_buffer_object

   tbl.glGetUniformIndices = error_glGetUniformIndices;
   tbl.glGetActiveUniformsiv = error_glGetActiveUniformsiv;
   tbl.glGetActiveUniformName = error_glGetActiveUniformName;
   tbl.glGetUniformBlockIndex = error_glGetUniformBlockIndex;
   tbl.glGetActiveUniformBlockiv = error_glGetActiveUniformBlockiv;
   tbl.glGetActiveUniformBlockName = error_glGetActiveUniformBlockName;
   tbl.glUniformBlockBinding = error_glUniformBlockBinding;

// GL_ARB_copy_buffer

   tbl.glCopyBufferSubData = error_glCopyBufferSubData;

// GL_ARB_draw_elements_base_vertex

   tbl.glDrawElementsBaseVertex = error_glDrawElementsBaseVertex;
   tbl.glDrawRangeElementsBaseVertex = error_glDrawRangeElementsBaseVertex;
   tbl.glDrawElementsInstancedBaseVertex = error_glDrawElementsInstancedBaseVertex;
   tbl.glMultiDrawElementsBaseVertex = error_glMultiDrawElementsBaseVertex;

// GL_ARB_provoking_vertex

   tbl.glProvokingVertex = error_glProvokingVertex;

// GL_ARB_sync

   tbl.glFenceSync = error_glFenceSync;
   tbl.glIsSync = error_glIsSync;
   tbl.glDeleteSync = error_glDeleteSync;
   tbl.glClientWaitSync = error_glClientWaitSync;
   tbl.glWaitSync = error_glWaitSync;
   tbl.glGetInteger64v = error_glGetInteger64v;
   tbl.glGetSynciv = error_glGetSynciv;

// GL_ARB_texture_multisample

   tbl.glTexImage2DMultisample = error_glTexImage2DMultisample;
   tbl.glTexImage3DMultisample = error_glTexImage3DMultisample;
   tbl.glGetMultisamplefv = error_glGetMultisamplefv;
   tbl.glSampleMaski = error_glSampleMaski;

// GL_ARB_draw_buffers_blend

   tbl.glBlendEquationiARB = error_glBlendEquationiARB;
   tbl.glBlendEquationSeparateiARB = error_glBlendEquationSeparateiARB;
   tbl.glBlendFunciARB = error_glBlendFunciARB;
   tbl.glBlendFuncSeparateiARB = error_glBlendFuncSeparateiARB;

// GL_ARB_sample_shading

   tbl.glMinSampleShadingARB = error_glMinSampleShadingARB;

// GL_ARB_shading_language_include

   tbl.glNamedStringARB = error_glNamedStringARB;
   tbl.glDeleteNamedStringARB = error_glDeleteNamedStringARB;
   tbl.glCompileShaderIncludeARB = error_glCompileShaderIncludeARB;
   tbl.glIsNamedStringARB = error_glIsNamedStringARB;
   tbl.glGetNamedStringARB = error_glGetNamedStringARB;
   tbl.glGetNamedStringivARB = error_glGetNamedStringivARB;

// GL_ARB_debug_output

   tbl.glDebugMessageControlARB = error_glDebugMessageControlARB;
   tbl.glDebugMessageInsertARB = error_glDebugMessageInsertARB;
   tbl.glDebugMessageCallbackARB = error_glDebugMessageCallbackARB;
   tbl.glGetDebugMessageLogARB = error_glGetDebugMessageLogARB;

// GL_ARB_robustness

   tbl.glGetGraphicsResetStatusARB = error_glGetGraphicsResetStatusARB;
   tbl.glGetnMapdvARB = error_glGetnMapdvARB;
   tbl.glGetnMapfvARB = error_glGetnMapfvARB;
   tbl.glGetnMapivARB = error_glGetnMapivARB;
   tbl.glGetnPixelMapfvARB = error_glGetnPixelMapfvARB;
   tbl.glGetnPixelMapuivARB = error_glGetnPixelMapuivARB;
   tbl.glGetnPixelMapusvARB = error_glGetnPixelMapusvARB;
   tbl.glGetnPolygonStippleARB = error_glGetnPolygonStippleARB;
   tbl.glGetnTexImageARB = error_glGetnTexImageARB;
   tbl.glReadnPixelsARB = error_glReadnPixelsARB;
   tbl.glGetnColorTableARB = error_glGetnColorTableARB;
   tbl.glGetnConvolutionFilterARB = error_glGetnConvolutionFilterARB;
   tbl.glGetnSeparableFilterARB = error_glGetnSeparableFilterARB;
   tbl.glGetnHistogramARB = error_glGetnHistogramARB;
   tbl.glGetnMinmaxARB = error_glGetnMinmaxARB;
   tbl.glGetnCompressedTexImageARB = error_glGetnCompressedTexImageARB;
   tbl.glGetnUniformfvARB = error_glGetnUniformfvARB;
   tbl.glGetnUniformivARB = error_glGetnUniformivARB;
   tbl.glGetnUniformuivARB = error_glGetnUniformuivARB;
   tbl.glGetnUniformdvARB = error_glGetnUniformdvARB;

// GL_EXT_blend_color

   tbl.glBlendColorEXT = error_glBlendColorEXT;

// GL_EXT_polygon_offset

   tbl.glPolygonOffsetEXT = error_glPolygonOffsetEXT;

// GL_EXT_texture3D

   tbl.glTexImage3DEXT = error_glTexImage3DEXT;
   tbl.glTexSubImage3DEXT = error_glTexSubImage3DEXT;

// GL_SGIS_texture_filter4

   tbl.glGetTexFilterFuncSGIS = error_glGetTexFilterFuncSGIS;
   tbl.glTexFilterFuncSGIS = error_glTexFilterFuncSGIS;

// GL_EXT_subtexture

   tbl.glTexSubImage1DEXT = error_glTexSubImage1DEXT;
   tbl.glTexSubImage2DEXT = error_glTexSubImage2DEXT;

// GL_EXT_copy_texture

   tbl.glCopyTexImage1DEXT = error_glCopyTexImage1DEXT;
   tbl.glCopyTexImage2DEXT = error_glCopyTexImage2DEXT;
   tbl.glCopyTexSubImage1DEXT = error_glCopyTexSubImage1DEXT;
   tbl.glCopyTexSubImage2DEXT = error_glCopyTexSubImage2DEXT;
   tbl.glCopyTexSubImage3DEXT = error_glCopyTexSubImage3DEXT;

// GL_EXT_histogram

   tbl.glGetHistogramEXT = error_glGetHistogramEXT;
   tbl.glGetHistogramParameterfvEXT = error_glGetHistogramParameterfvEXT;
   tbl.glGetHistogramParameterivEXT = error_glGetHistogramParameterivEXT;
   tbl.glGetMinmaxEXT = error_glGetMinmaxEXT;
   tbl.glGetMinmaxParameterfvEXT = error_glGetMinmaxParameterfvEXT;
   tbl.glGetMinmaxParameterivEXT = error_glGetMinmaxParameterivEXT;
   tbl.glHistogramEXT = error_glHistogramEXT;
   tbl.glMinmaxEXT = error_glMinmaxEXT;
   tbl.glResetHistogramEXT = error_glResetHistogramEXT;
   tbl.glResetMinmaxEXT = error_glResetMinmaxEXT;

// GL_EXT_convolution

   tbl.glConvolutionFilter1DEXT = error_glConvolutionFilter1DEXT;
   tbl.glConvolutionFilter2DEXT = error_glConvolutionFilter2DEXT;
   tbl.glConvolutionParameterfEXT = error_glConvolutionParameterfEXT;
   tbl.glConvolutionParameterfvEXT = error_glConvolutionParameterfvEXT;
   tbl.glConvolutionParameteriEXT = error_glConvolutionParameteriEXT;
   tbl.glConvolutionParameterivEXT = error_glConvolutionParameterivEXT;
   tbl.glCopyConvolutionFilter1DEXT = error_glCopyConvolutionFilter1DEXT;
   tbl.glCopyConvolutionFilter2DEXT = error_glCopyConvolutionFilter2DEXT;
   tbl.glGetConvolutionFilterEXT = error_glGetConvolutionFilterEXT;
   tbl.glGetConvolutionParameterfvEXT = error_glGetConvolutionParameterfvEXT;
   tbl.glGetConvolutionParameterivEXT = error_glGetConvolutionParameterivEXT;
   tbl.glGetSeparableFilterEXT = error_glGetSeparableFilterEXT;
   tbl.glSeparableFilter2DEXT = error_glSeparableFilter2DEXT;

// GL_SGI_color_table

   tbl.glColorTableSGI = error_glColorTableSGI;
   tbl.glColorTableParameterfvSGI = error_glColorTableParameterfvSGI;
   tbl.glColorTableParameterivSGI = error_glColorTableParameterivSGI;
   tbl.glCopyColorTableSGI = error_glCopyColorTableSGI;
   tbl.glGetColorTableSGI = error_glGetColorTableSGI;
   tbl.glGetColorTableParameterfvSGI = error_glGetColorTableParameterfvSGI;
   tbl.glGetColorTableParameterivSGI = error_glGetColorTableParameterivSGI;

// GL_SGIX_pixel_texture

   tbl.glPixelTexGenSGIX = error_glPixelTexGenSGIX;

// GL_SGIS_pixel_texture

   tbl.glPixelTexGenParameteriSGIS = error_glPixelTexGenParameteriSGIS;
   tbl.glPixelTexGenParameterivSGIS = error_glPixelTexGenParameterivSGIS;
   tbl.glPixelTexGenParameterfSGIS = error_glPixelTexGenParameterfSGIS;
   tbl.glPixelTexGenParameterfvSGIS = error_glPixelTexGenParameterfvSGIS;
   tbl.glGetPixelTexGenParameterivSGIS = error_glGetPixelTexGenParameterivSGIS;
   tbl.glGetPixelTexGenParameterfvSGIS = error_glGetPixelTexGenParameterfvSGIS;

// GL_SGIS_texture4D

   tbl.glTexImage4DSGIS = error_glTexImage4DSGIS;
   tbl.glTexSubImage4DSGIS = error_glTexSubImage4DSGIS;

// GL_EXT_texture_object

   tbl.glAreTexturesResidentEXT = error_glAreTexturesResidentEXT;
   tbl.glBindTextureEXT = error_glBindTextureEXT;
   tbl.glDeleteTexturesEXT = error_glDeleteTexturesEXT;
   tbl.glGenTexturesEXT = error_glGenTexturesEXT;
   tbl.glIsTextureEXT = error_glIsTextureEXT;
   tbl.glPrioritizeTexturesEXT = error_glPrioritizeTexturesEXT;

// GL_SGIS_detail_texture

   tbl.glDetailTexFuncSGIS = error_glDetailTexFuncSGIS;
   tbl.glGetDetailTexFuncSGIS = error_glGetDetailTexFuncSGIS;

// GL_SGIS_sharpen_texture

   tbl.glSharpenTexFuncSGIS = error_glSharpenTexFuncSGIS;
   tbl.glGetSharpenTexFuncSGIS = error_glGetSharpenTexFuncSGIS;

// GL_SGIS_multisample

   tbl.glSampleMaskSGIS = error_glSampleMaskSGIS;
   tbl.glSamplePatternSGIS = error_glSamplePatternSGIS;

// GL_EXT_vertex_array

   tbl.glArrayElementEXT = error_glArrayElementEXT;
   tbl.glColorPointerEXT = error_glColorPointerEXT;
   tbl.glDrawArraysEXT = error_glDrawArraysEXT;
   tbl.glEdgeFlagPointerEXT = error_glEdgeFlagPointerEXT;
   tbl.glGetPointervEXT = error_glGetPointervEXT;
   tbl.glIndexPointerEXT = error_glIndexPointerEXT;
   tbl.glNormalPointerEXT = error_glNormalPointerEXT;
   tbl.glTexCoordPointerEXT = error_glTexCoordPointerEXT;
   tbl.glVertexPointerEXT = error_glVertexPointerEXT;

// GL_EXT_blend_minmax

   tbl.glBlendEquationEXT = error_glBlendEquationEXT;

// GL_SGIX_sprite

   tbl.glSpriteParameterfSGIX = error_glSpriteParameterfSGIX;
   tbl.glSpriteParameterfvSGIX = error_glSpriteParameterfvSGIX;
   tbl.glSpriteParameteriSGIX = error_glSpriteParameteriSGIX;
   tbl.glSpriteParameterivSGIX = error_glSpriteParameterivSGIX;

// GL_EXT_point_parameters

   tbl.glPointParameterfEXT = error_glPointParameterfEXT;
   tbl.glPointParameterfvEXT = error_glPointParameterfvEXT;

// GL_SGIS_point_parameters

   tbl.glPointParameterfSGIS = error_glPointParameterfSGIS;
   tbl.glPointParameterfvSGIS = error_glPointParameterfvSGIS;

// GL_SGIX_instruments

   tbl.glGetInstrumentsSGIX = error_glGetInstrumentsSGIX;
   tbl.glInstrumentsBufferSGIX = error_glInstrumentsBufferSGIX;
   tbl.glPollInstrumentsSGIX = error_glPollInstrumentsSGIX;
   tbl.glReadInstrumentsSGIX = error_glReadInstrumentsSGIX;
   tbl.glStartInstrumentsSGIX = error_glStartInstrumentsSGIX;
   tbl.glStopInstrumentsSGIX = error_glStopInstrumentsSGIX;

// GL_SGIX_framezoom

   tbl.glFrameZoomSGIX = error_glFrameZoomSGIX;

// GL_SGIX_tag_sample_buffer

   tbl.glTagSampleBufferSGIX = error_glTagSampleBufferSGIX;

// GL_SGIX_polynomial_ffd

   tbl.glDeformationMap3dSGIX = error_glDeformationMap3dSGIX;
   tbl.glDeformationMap3fSGIX = error_glDeformationMap3fSGIX;
   tbl.glDeformSGIX = error_glDeformSGIX;
   tbl.glLoadIdentityDeformationMapSGIX = error_glLoadIdentityDeformationMapSGIX;

// GL_SGIX_reference_plane

   tbl.glReferencePlaneSGIX = error_glReferencePlaneSGIX;

// GL_SGIX_flush_raster

   tbl.glFlushRasterSGIX = error_glFlushRasterSGIX;

// GL_SGIS_fog_function

   tbl.glFogFuncSGIS = error_glFogFuncSGIS;
   tbl.glGetFogFuncSGIS = error_glGetFogFuncSGIS;

// GL_HP_image_transform

   tbl.glImageTransformParameteriHP = error_glImageTransformParameteriHP;
   tbl.glImageTransformParameterfHP = error_glImageTransformParameterfHP;
   tbl.glImageTransformParameterivHP = error_glImageTransformParameterivHP;
   tbl.glImageTransformParameterfvHP = error_glImageTransformParameterfvHP;
   tbl.glGetImageTransformParameterivHP = error_glGetImageTransformParameterivHP;
   tbl.glGetImageTransformParameterfvHP = error_glGetImageTransformParameterfvHP;

// GL_EXT_color_subtable

   tbl.glColorSubTableEXT = error_glColorSubTableEXT;
   tbl.glCopyColorSubTableEXT = error_glCopyColorSubTableEXT;

// GL_PGI_misc_hints

   tbl.glHintPGI = error_glHintPGI;

// GL_EXT_paletted_texture

   tbl.glColorTableEXT = error_glColorTableEXT;
   tbl.glGetColorTableEXT = error_glGetColorTableEXT;
   tbl.glGetColorTableParameterivEXT = error_glGetColorTableParameterivEXT;
   tbl.glGetColorTableParameterfvEXT = error_glGetColorTableParameterfvEXT;

// GL_SGIX_list_priority

   tbl.glGetListParameterfvSGIX = error_glGetListParameterfvSGIX;
   tbl.glGetListParameterivSGIX = error_glGetListParameterivSGIX;
   tbl.glListParameterfSGIX = error_glListParameterfSGIX;
   tbl.glListParameterfvSGIX = error_glListParameterfvSGIX;
   tbl.glListParameteriSGIX = error_glListParameteriSGIX;
   tbl.glListParameterivSGIX = error_glListParameterivSGIX;

// GL_EXT_index_material

   tbl.glIndexMaterialEXT = error_glIndexMaterialEXT;

// GL_EXT_index_func

   tbl.glIndexFuncEXT = error_glIndexFuncEXT;

// GL_EXT_compiled_vertex_array

   tbl.glLockArraysEXT = error_glLockArraysEXT;
   tbl.glUnlockArraysEXT = error_glUnlockArraysEXT;

// GL_EXT_cull_vertex

   tbl.glCullParameterdvEXT = error_glCullParameterdvEXT;
   tbl.glCullParameterfvEXT = error_glCullParameterfvEXT;

// GL_SGIX_fragment_lighting

   tbl.glFragmentColorMaterialSGIX = error_glFragmentColorMaterialSGIX;
   tbl.glFragmentLightfSGIX = error_glFragmentLightfSGIX;
   tbl.glFragmentLightfvSGIX = error_glFragmentLightfvSGIX;
   tbl.glFragmentLightiSGIX = error_glFragmentLightiSGIX;
   tbl.glFragmentLightivSGIX = error_glFragmentLightivSGIX;
   tbl.glFragmentLightModelfSGIX = error_glFragmentLightModelfSGIX;
   tbl.glFragmentLightModelfvSGIX = error_glFragmentLightModelfvSGIX;
   tbl.glFragmentLightModeliSGIX = error_glFragmentLightModeliSGIX;
   tbl.glFragmentLightModelivSGIX = error_glFragmentLightModelivSGIX;
   tbl.glFragmentMaterialfSGIX = error_glFragmentMaterialfSGIX;
   tbl.glFragmentMaterialfvSGIX = error_glFragmentMaterialfvSGIX;
   tbl.glFragmentMaterialiSGIX = error_glFragmentMaterialiSGIX;
   tbl.glFragmentMaterialivSGIX = error_glFragmentMaterialivSGIX;
   tbl.glGetFragmentLightfvSGIX = error_glGetFragmentLightfvSGIX;
   tbl.glGetFragmentLightivSGIX = error_glGetFragmentLightivSGIX;
   tbl.glGetFragmentMaterialfvSGIX = error_glGetFragmentMaterialfvSGIX;
   tbl.glGetFragmentMaterialivSGIX = error_glGetFragmentMaterialivSGIX;
   tbl.glLightEnviSGIX = error_glLightEnviSGIX;

// GL_EXT_draw_range_elements

   tbl.glDrawRangeElementsEXT = error_glDrawRangeElementsEXT;

// GL_EXT_light_texture

   tbl.glApplyTextureEXT = error_glApplyTextureEXT;
   tbl.glTextureLightEXT = error_glTextureLightEXT;
   tbl.glTextureMaterialEXT = error_glTextureMaterialEXT;

// GL_SGIX_async

   tbl.glAsyncMarkerSGIX = error_glAsyncMarkerSGIX;
   tbl.glFinishAsyncSGIX = error_glFinishAsyncSGIX;
   tbl.glPollAsyncSGIX = error_glPollAsyncSGIX;
   tbl.glGenAsyncMarkersSGIX = error_glGenAsyncMarkersSGIX;
   tbl.glDeleteAsyncMarkersSGIX = error_glDeleteAsyncMarkersSGIX;
   tbl.glIsAsyncMarkerSGIX = error_glIsAsyncMarkerSGIX;

// GL_INTEL_parallel_arrays

   tbl.glVertexPointervINTEL = error_glVertexPointervINTEL;
   tbl.glNormalPointervINTEL = error_glNormalPointervINTEL;
   tbl.glColorPointervINTEL = error_glColorPointervINTEL;
   tbl.glTexCoordPointervINTEL = error_glTexCoordPointervINTEL;

// GL_EXT_pixel_transform

   tbl.glPixelTransformParameteriEXT = error_glPixelTransformParameteriEXT;
   tbl.glPixelTransformParameterfEXT = error_glPixelTransformParameterfEXT;
   tbl.glPixelTransformParameterivEXT = error_glPixelTransformParameterivEXT;
   tbl.glPixelTransformParameterfvEXT = error_glPixelTransformParameterfvEXT;

// GL_EXT_secondary_color

   tbl.glSecondaryColor3bEXT = error_glSecondaryColor3bEXT;
   tbl.glSecondaryColor3bvEXT = error_glSecondaryColor3bvEXT;
   tbl.glSecondaryColor3dEXT = error_glSecondaryColor3dEXT;
   tbl.glSecondaryColor3dvEXT = error_glSecondaryColor3dvEXT;
   tbl.glSecondaryColor3fEXT = error_glSecondaryColor3fEXT;
   tbl.glSecondaryColor3fvEXT = error_glSecondaryColor3fvEXT;
   tbl.glSecondaryColor3iEXT = error_glSecondaryColor3iEXT;
   tbl.glSecondaryColor3ivEXT = error_glSecondaryColor3ivEXT;
   tbl.glSecondaryColor3sEXT = error_glSecondaryColor3sEXT;
   tbl.glSecondaryColor3svEXT = error_glSecondaryColor3svEXT;
   tbl.glSecondaryColor3ubEXT = error_glSecondaryColor3ubEXT;
   tbl.glSecondaryColor3ubvEXT = error_glSecondaryColor3ubvEXT;
   tbl.glSecondaryColor3uiEXT = error_glSecondaryColor3uiEXT;
   tbl.glSecondaryColor3uivEXT = error_glSecondaryColor3uivEXT;
   tbl.glSecondaryColor3usEXT = error_glSecondaryColor3usEXT;
   tbl.glSecondaryColor3usvEXT = error_glSecondaryColor3usvEXT;
   tbl.glSecondaryColorPointerEXT = error_glSecondaryColorPointerEXT;

// GL_EXT_texture_perturb_normal

   tbl.glTextureNormalEXT = error_glTextureNormalEXT;

// GL_EXT_multi_draw_arrays

   tbl.glMultiDrawArraysEXT = error_glMultiDrawArraysEXT;
   tbl.glMultiDrawElementsEXT = error_glMultiDrawElementsEXT;

// GL_EXT_fog_coord

   tbl.glFogCoordfEXT = error_glFogCoordfEXT;
   tbl.glFogCoordfvEXT = error_glFogCoordfvEXT;
   tbl.glFogCoorddEXT = error_glFogCoorddEXT;
   tbl.glFogCoorddvEXT = error_glFogCoorddvEXT;
   tbl.glFogCoordPointerEXT = error_glFogCoordPointerEXT;

// GL_EXT_coordinate_frame

   tbl.glTangent3bEXT = error_glTangent3bEXT;
   tbl.glTangent3bvEXT = error_glTangent3bvEXT;
   tbl.glTangent3dEXT = error_glTangent3dEXT;
   tbl.glTangent3dvEXT = error_glTangent3dvEXT;
   tbl.glTangent3fEXT = error_glTangent3fEXT;
   tbl.glTangent3fvEXT = error_glTangent3fvEXT;
   tbl.glTangent3iEXT = error_glTangent3iEXT;
   tbl.glTangent3ivEXT = error_glTangent3ivEXT;
   tbl.glTangent3sEXT = error_glTangent3sEXT;
   tbl.glTangent3svEXT = error_glTangent3svEXT;
   tbl.glBinormal3bEXT = error_glBinormal3bEXT;
   tbl.glBinormal3bvEXT = error_glBinormal3bvEXT;
   tbl.glBinormal3dEXT = error_glBinormal3dEXT;
   tbl.glBinormal3dvEXT = error_glBinormal3dvEXT;
   tbl.glBinormal3fEXT = error_glBinormal3fEXT;
   tbl.glBinormal3fvEXT = error_glBinormal3fvEXT;
   tbl.glBinormal3iEXT = error_glBinormal3iEXT;
   tbl.glBinormal3ivEXT = error_glBinormal3ivEXT;
   tbl.glBinormal3sEXT = error_glBinormal3sEXT;
   tbl.glBinormal3svEXT = error_glBinormal3svEXT;
   tbl.glTangentPointerEXT = error_glTangentPointerEXT;
   tbl.glBinormalPointerEXT = error_glBinormalPointerEXT;

// GL_SUNX_constant_data

   tbl.glFinishTextureSUNX = error_glFinishTextureSUNX;

// GL_SUN_global_alpha

   tbl.glGlobalAlphaFactorbSUN = error_glGlobalAlphaFactorbSUN;
   tbl.glGlobalAlphaFactorsSUN = error_glGlobalAlphaFactorsSUN;
   tbl.glGlobalAlphaFactoriSUN = error_glGlobalAlphaFactoriSUN;
   tbl.glGlobalAlphaFactorfSUN = error_glGlobalAlphaFactorfSUN;
   tbl.glGlobalAlphaFactordSUN = error_glGlobalAlphaFactordSUN;
   tbl.glGlobalAlphaFactorubSUN = error_glGlobalAlphaFactorubSUN;
   tbl.glGlobalAlphaFactorusSUN = error_glGlobalAlphaFactorusSUN;
   tbl.glGlobalAlphaFactoruiSUN = error_glGlobalAlphaFactoruiSUN;

// GL_SUN_triangle_list

   tbl.glReplacementCodeuiSUN = error_glReplacementCodeuiSUN;
   tbl.glReplacementCodeusSUN = error_glReplacementCodeusSUN;
   tbl.glReplacementCodeubSUN = error_glReplacementCodeubSUN;
   tbl.glReplacementCodeuivSUN = error_glReplacementCodeuivSUN;
   tbl.glReplacementCodeusvSUN = error_glReplacementCodeusvSUN;
   tbl.glReplacementCodeubvSUN = error_glReplacementCodeubvSUN;
   tbl.glReplacementCodePointerSUN = error_glReplacementCodePointerSUN;

// GL_SUN_vertex

   tbl.glColor4ubVertex2fSUN = error_glColor4ubVertex2fSUN;
   tbl.glColor4ubVertex2fvSUN = error_glColor4ubVertex2fvSUN;
   tbl.glColor4ubVertex3fSUN = error_glColor4ubVertex3fSUN;
   tbl.glColor4ubVertex3fvSUN = error_glColor4ubVertex3fvSUN;
   tbl.glColor3fVertex3fSUN = error_glColor3fVertex3fSUN;
   tbl.glColor3fVertex3fvSUN = error_glColor3fVertex3fvSUN;
   tbl.glNormal3fVertex3fSUN = error_glNormal3fVertex3fSUN;
   tbl.glNormal3fVertex3fvSUN = error_glNormal3fVertex3fvSUN;
   tbl.glColor4fNormal3fVertex3fSUN = error_glColor4fNormal3fVertex3fSUN;
   tbl.glColor4fNormal3fVertex3fvSUN = error_glColor4fNormal3fVertex3fvSUN;
   tbl.glTexCoord2fVertex3fSUN = error_glTexCoord2fVertex3fSUN;
   tbl.glTexCoord2fVertex3fvSUN = error_glTexCoord2fVertex3fvSUN;
   tbl.glTexCoord4fVertex4fSUN = error_glTexCoord4fVertex4fSUN;
   tbl.glTexCoord4fVertex4fvSUN = error_glTexCoord4fVertex4fvSUN;
   tbl.glTexCoord2fColor4ubVertex3fSUN = error_glTexCoord2fColor4ubVertex3fSUN;
   tbl.glTexCoord2fColor4ubVertex3fvSUN = error_glTexCoord2fColor4ubVertex3fvSUN;
   tbl.glTexCoord2fColor3fVertex3fSUN = error_glTexCoord2fColor3fVertex3fSUN;
   tbl.glTexCoord2fColor3fVertex3fvSUN = error_glTexCoord2fColor3fVertex3fvSUN;
   tbl.glTexCoord2fNormal3fVertex3fSUN = error_glTexCoord2fNormal3fVertex3fSUN;
   tbl.glTexCoord2fNormal3fVertex3fvSUN = error_glTexCoord2fNormal3fVertex3fvSUN;
   tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = error_glTexCoord2fColor4fNormal3fVertex3fSUN;
   tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = error_glTexCoord2fColor4fNormal3fVertex3fvSUN;
   tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = error_glTexCoord4fColor4fNormal3fVertex4fSUN;
   tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = error_glTexCoord4fColor4fNormal3fVertex4fvSUN;
   tbl.glReplacementCodeuiVertex3fSUN = error_glReplacementCodeuiVertex3fSUN;
   tbl.glReplacementCodeuiVertex3fvSUN = error_glReplacementCodeuiVertex3fvSUN;
   tbl.glReplacementCodeuiColor4ubVertex3fSUN = error_glReplacementCodeuiColor4ubVertex3fSUN;
   tbl.glReplacementCodeuiColor4ubVertex3fvSUN = error_glReplacementCodeuiColor4ubVertex3fvSUN;
   tbl.glReplacementCodeuiColor3fVertex3fSUN = error_glReplacementCodeuiColor3fVertex3fSUN;
   tbl.glReplacementCodeuiColor3fVertex3fvSUN = error_glReplacementCodeuiColor3fVertex3fvSUN;
   tbl.glReplacementCodeuiNormal3fVertex3fSUN = error_glReplacementCodeuiNormal3fVertex3fSUN;
   tbl.glReplacementCodeuiNormal3fVertex3fvSUN = error_glReplacementCodeuiNormal3fVertex3fvSUN;
   tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = error_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
   tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = error_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
   tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = error_glReplacementCodeuiTexCoord2fVertex3fSUN;
   tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = error_glReplacementCodeuiTexCoord2fVertex3fvSUN;
   tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = error_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
   tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = error_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
   tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
   tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = error_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;

// GL_EXT_blend_func_separate

   tbl.glBlendFuncSeparateEXT = error_glBlendFuncSeparateEXT;

// GL_INGR_blend_func_separate

   tbl.glBlendFuncSeparateINGR = error_glBlendFuncSeparateINGR;

// GL_EXT_vertex_weighting

   tbl.glVertexWeightfEXT = error_glVertexWeightfEXT;
   tbl.glVertexWeightfvEXT = error_glVertexWeightfvEXT;
   tbl.glVertexWeightPointerEXT = error_glVertexWeightPointerEXT;

// GL_NV_vertex_array_range

   tbl.glFlushVertexArrayRangeNV = error_glFlushVertexArrayRangeNV;
   tbl.glVertexArrayRangeNV = error_glVertexArrayRangeNV;

// GL_NV_register_combiners

   tbl.glCombinerParameterfvNV = error_glCombinerParameterfvNV;
   tbl.glCombinerParameterfNV = error_glCombinerParameterfNV;
   tbl.glCombinerParameterivNV = error_glCombinerParameterivNV;
   tbl.glCombinerParameteriNV = error_glCombinerParameteriNV;
   tbl.glCombinerInputNV = error_glCombinerInputNV;
   tbl.glCombinerOutputNV = error_glCombinerOutputNV;
   tbl.glFinalCombinerInputNV = error_glFinalCombinerInputNV;
   tbl.glGetCombinerInputParameterfvNV = error_glGetCombinerInputParameterfvNV;
   tbl.glGetCombinerInputParameterivNV = error_glGetCombinerInputParameterivNV;
   tbl.glGetCombinerOutputParameterfvNV = error_glGetCombinerOutputParameterfvNV;
   tbl.glGetCombinerOutputParameterivNV = error_glGetCombinerOutputParameterivNV;
   tbl.glGetFinalCombinerInputParameterfvNV = error_glGetFinalCombinerInputParameterfvNV;
   tbl.glGetFinalCombinerInputParameterivNV = error_glGetFinalCombinerInputParameterivNV;

// GL_MESA_resize_buffers

   tbl.glResizeBuffersMESA = error_glResizeBuffersMESA;

// GL_MESA_window_pos

   tbl.glWindowPos2dMESA = error_glWindowPos2dMESA;
   tbl.glWindowPos2dvMESA = error_glWindowPos2dvMESA;
   tbl.glWindowPos2fMESA = error_glWindowPos2fMESA;
   tbl.glWindowPos2fvMESA = error_glWindowPos2fvMESA;
   tbl.glWindowPos2iMESA = error_glWindowPos2iMESA;
   tbl.glWindowPos2ivMESA = error_glWindowPos2ivMESA;
   tbl.glWindowPos2sMESA = error_glWindowPos2sMESA;
   tbl.glWindowPos2svMESA = error_glWindowPos2svMESA;
   tbl.glWindowPos3dMESA = error_glWindowPos3dMESA;
   tbl.glWindowPos3dvMESA = error_glWindowPos3dvMESA;
   tbl.glWindowPos3fMESA = error_glWindowPos3fMESA;
   tbl.glWindowPos3fvMESA = error_glWindowPos3fvMESA;
   tbl.glWindowPos3iMESA = error_glWindowPos3iMESA;
   tbl.glWindowPos3ivMESA = error_glWindowPos3ivMESA;
   tbl.glWindowPos3sMESA = error_glWindowPos3sMESA;
   tbl.glWindowPos3svMESA = error_glWindowPos3svMESA;
   tbl.glWindowPos4dMESA = error_glWindowPos4dMESA;
   tbl.glWindowPos4dvMESA = error_glWindowPos4dvMESA;
   tbl.glWindowPos4fMESA = error_glWindowPos4fMESA;
   tbl.glWindowPos4fvMESA = error_glWindowPos4fvMESA;
   tbl.glWindowPos4iMESA = error_glWindowPos4iMESA;
   tbl.glWindowPos4ivMESA = error_glWindowPos4ivMESA;
   tbl.glWindowPos4sMESA = error_glWindowPos4sMESA;
   tbl.glWindowPos4svMESA = error_glWindowPos4svMESA;

// GL_IBM_multimode_draw_arrays

   tbl.glMultiModeDrawArraysIBM = error_glMultiModeDrawArraysIBM;
   tbl.glMultiModeDrawElementsIBM = error_glMultiModeDrawElementsIBM;

// GL_IBM_vertex_array_lists

   tbl.glColorPointerListIBM = error_glColorPointerListIBM;
   tbl.glSecondaryColorPointerListIBM = error_glSecondaryColorPointerListIBM;
   tbl.glEdgeFlagPointerListIBM = error_glEdgeFlagPointerListIBM;
   tbl.glFogCoordPointerListIBM = error_glFogCoordPointerListIBM;
   tbl.glIndexPointerListIBM = error_glIndexPointerListIBM;
   tbl.glNormalPointerListIBM = error_glNormalPointerListIBM;
   tbl.glTexCoordPointerListIBM = error_glTexCoordPointerListIBM;
   tbl.glVertexPointerListIBM = error_glVertexPointerListIBM;

// GL_3DFX_tbuffer

   tbl.glTbufferMask3DFX = error_glTbufferMask3DFX;

// GL_EXT_multisample

   tbl.glSampleMaskEXT = error_glSampleMaskEXT;
   tbl.glSamplePatternEXT = error_glSamplePatternEXT;

// GL_SGIS_texture_color_mask

   tbl.glTextureColorMaskSGIS = error_glTextureColorMaskSGIS;

// GL_SGIX_igloo_interface

   tbl.glIglooInterfaceSGIX = error_glIglooInterfaceSGIX;

// GL_NV_fence

   tbl.glDeleteFencesNV = error_glDeleteFencesNV;
   tbl.glGenFencesNV = error_glGenFencesNV;
   tbl.glIsFenceNV = error_glIsFenceNV;
   tbl.glTestFenceNV = error_glTestFenceNV;
   tbl.glGetFenceivNV = error_glGetFenceivNV;
   tbl.glFinishFenceNV = error_glFinishFenceNV;
   tbl.glSetFenceNV = error_glSetFenceNV;

// GL_NV_evaluators

   tbl.glMapControlPointsNV = error_glMapControlPointsNV;
   tbl.glMapParameterivNV = error_glMapParameterivNV;
   tbl.glMapParameterfvNV = error_glMapParameterfvNV;
   tbl.glGetMapControlPointsNV = error_glGetMapControlPointsNV;
   tbl.glGetMapParameterivNV = error_glGetMapParameterivNV;
   tbl.glGetMapParameterfvNV = error_glGetMapParameterfvNV;
   tbl.glGetMapAttribParameterivNV = error_glGetMapAttribParameterivNV;
   tbl.glGetMapAttribParameterfvNV = error_glGetMapAttribParameterfvNV;
   tbl.glEvalMapsNV = error_glEvalMapsNV;

// GL_NV_register_combiners2

   tbl.glCombinerStageParameterfvNV = error_glCombinerStageParameterfvNV;
   tbl.glGetCombinerStageParameterfvNV = error_glGetCombinerStageParameterfvNV;

// GL_NV_vertex_program

   tbl.glAreProgramsResidentNV = error_glAreProgramsResidentNV;
   tbl.glBindProgramNV = error_glBindProgramNV;
   tbl.glDeleteProgramsNV = error_glDeleteProgramsNV;
   tbl.glExecuteProgramNV = error_glExecuteProgramNV;
   tbl.glGenProgramsNV = error_glGenProgramsNV;
   tbl.glGetProgramParameterdvNV = error_glGetProgramParameterdvNV;
   tbl.glGetProgramParameterfvNV = error_glGetProgramParameterfvNV;
   tbl.glGetProgramivNV = error_glGetProgramivNV;
   tbl.glGetProgramStringNV = error_glGetProgramStringNV;
   tbl.glGetTrackMatrixivNV = error_glGetTrackMatrixivNV;
   tbl.glGetVertexAttribdvNV = error_glGetVertexAttribdvNV;
   tbl.glGetVertexAttribfvNV = error_glGetVertexAttribfvNV;
   tbl.glGetVertexAttribivNV = error_glGetVertexAttribivNV;
   tbl.glGetVertexAttribPointervNV = error_glGetVertexAttribPointervNV;
   tbl.glIsProgramNV = error_glIsProgramNV;
   tbl.glLoadProgramNV = error_glLoadProgramNV;
   tbl.glProgramParameter4dNV = error_glProgramParameter4dNV;
   tbl.glProgramParameter4dvNV = error_glProgramParameter4dvNV;
   tbl.glProgramParameter4fNV = error_glProgramParameter4fNV;
   tbl.glProgramParameter4fvNV = error_glProgramParameter4fvNV;
   tbl.glProgramParameters4dvNV = error_glProgramParameters4dvNV;
   tbl.glProgramParameters4fvNV = error_glProgramParameters4fvNV;
   tbl.glRequestResidentProgramsNV = error_glRequestResidentProgramsNV;
   tbl.glTrackMatrixNV = error_glTrackMatrixNV;
   tbl.glVertexAttribPointerNV = error_glVertexAttribPointerNV;
   tbl.glVertexAttrib1dNV = error_glVertexAttrib1dNV;
   tbl.glVertexAttrib1dvNV = error_glVertexAttrib1dvNV;
   tbl.glVertexAttrib1fNV = error_glVertexAttrib1fNV;
   tbl.glVertexAttrib1fvNV = error_glVertexAttrib1fvNV;
   tbl.glVertexAttrib1sNV = error_glVertexAttrib1sNV;
   tbl.glVertexAttrib1svNV = error_glVertexAttrib1svNV;
   tbl.glVertexAttrib2dNV = error_glVertexAttrib2dNV;
   tbl.glVertexAttrib2dvNV = error_glVertexAttrib2dvNV;
   tbl.glVertexAttrib2fNV = error_glVertexAttrib2fNV;
   tbl.glVertexAttrib2fvNV = error_glVertexAttrib2fvNV;
   tbl.glVertexAttrib2sNV = error_glVertexAttrib2sNV;
   tbl.glVertexAttrib2svNV = error_glVertexAttrib2svNV;
   tbl.glVertexAttrib3dNV = error_glVertexAttrib3dNV;
   tbl.glVertexAttrib3dvNV = error_glVertexAttrib3dvNV;
   tbl.glVertexAttrib3fNV = error_glVertexAttrib3fNV;
   tbl.glVertexAttrib3fvNV = error_glVertexAttrib3fvNV;
   tbl.glVertexAttrib3sNV = error_glVertexAttrib3sNV;
   tbl.glVertexAttrib3svNV = error_glVertexAttrib3svNV;
   tbl.glVertexAttrib4dNV = error_glVertexAttrib4dNV;
   tbl.glVertexAttrib4dvNV = error_glVertexAttrib4dvNV;
   tbl.glVertexAttrib4fNV = error_glVertexAttrib4fNV;
   tbl.glVertexAttrib4fvNV = error_glVertexAttrib4fvNV;
   tbl.glVertexAttrib4sNV = error_glVertexAttrib4sNV;
   tbl.glVertexAttrib4svNV = error_glVertexAttrib4svNV;
   tbl.glVertexAttrib4ubNV = error_glVertexAttrib4ubNV;
   tbl.glVertexAttrib4ubvNV = error_glVertexAttrib4ubvNV;
   tbl.glVertexAttribs1dvNV = error_glVertexAttribs1dvNV;
   tbl.glVertexAttribs1fvNV = error_glVertexAttribs1fvNV;
   tbl.glVertexAttribs1svNV = error_glVertexAttribs1svNV;
   tbl.glVertexAttribs2dvNV = error_glVertexAttribs2dvNV;
   tbl.glVertexAttribs2fvNV = error_glVertexAttribs2fvNV;
   tbl.glVertexAttribs2svNV = error_glVertexAttribs2svNV;
   tbl.glVertexAttribs3dvNV = error_glVertexAttribs3dvNV;
   tbl.glVertexAttribs3fvNV = error_glVertexAttribs3fvNV;
   tbl.glVertexAttribs3svNV = error_glVertexAttribs3svNV;
   tbl.glVertexAttribs4dvNV = error_glVertexAttribs4dvNV;
   tbl.glVertexAttribs4fvNV = error_glVertexAttribs4fvNV;
   tbl.glVertexAttribs4svNV = error_glVertexAttribs4svNV;
   tbl.glVertexAttribs4ubvNV = error_glVertexAttribs4ubvNV;

// GL_ATI_envmap_bumpmap

   tbl.glTexBumpParameterivATI = error_glTexBumpParameterivATI;
   tbl.glTexBumpParameterfvATI = error_glTexBumpParameterfvATI;
   tbl.glGetTexBumpParameterivATI = error_glGetTexBumpParameterivATI;
   tbl.glGetTexBumpParameterfvATI = error_glGetTexBumpParameterfvATI;

// GL_ATI_fragment_shader

   tbl.glGenFragmentShadersATI = error_glGenFragmentShadersATI;
   tbl.glBindFragmentShaderATI = error_glBindFragmentShaderATI;
   tbl.glDeleteFragmentShaderATI = error_glDeleteFragmentShaderATI;
   tbl.glBeginFragmentShaderATI = error_glBeginFragmentShaderATI;
   tbl.glEndFragmentShaderATI = error_glEndFragmentShaderATI;
   tbl.glPassTexCoordATI = error_glPassTexCoordATI;
   tbl.glSampleMapATI = error_glSampleMapATI;
   tbl.glColorFragmentOp1ATI = error_glColorFragmentOp1ATI;
   tbl.glColorFragmentOp2ATI = error_glColorFragmentOp2ATI;
   tbl.glColorFragmentOp3ATI = error_glColorFragmentOp3ATI;
   tbl.glAlphaFragmentOp1ATI = error_glAlphaFragmentOp1ATI;
   tbl.glAlphaFragmentOp2ATI = error_glAlphaFragmentOp2ATI;
   tbl.glAlphaFragmentOp3ATI = error_glAlphaFragmentOp3ATI;
   tbl.glSetFragmentShaderConstantATI = error_glSetFragmentShaderConstantATI;

// GL_ATI_pn_triangles

   tbl.glPNTrianglesiATI = error_glPNTrianglesiATI;
   tbl.glPNTrianglesfATI = error_glPNTrianglesfATI;

// GL_ATI_vertex_array_object

   tbl.glNewObjectBufferATI = error_glNewObjectBufferATI;
   tbl.glIsObjectBufferATI = error_glIsObjectBufferATI;
   tbl.glUpdateObjectBufferATI = error_glUpdateObjectBufferATI;
   tbl.glGetObjectBufferfvATI = error_glGetObjectBufferfvATI;
   tbl.glGetObjectBufferivATI = error_glGetObjectBufferivATI;
   tbl.glFreeObjectBufferATI = error_glFreeObjectBufferATI;
   tbl.glArrayObjectATI = error_glArrayObjectATI;
   tbl.glGetArrayObjectfvATI = error_glGetArrayObjectfvATI;
   tbl.glGetArrayObjectivATI = error_glGetArrayObjectivATI;
   tbl.glVariantArrayObjectATI = error_glVariantArrayObjectATI;
   tbl.glGetVariantArrayObjectfvATI = error_glGetVariantArrayObjectfvATI;
   tbl.glGetVariantArrayObjectivATI = error_glGetVariantArrayObjectivATI;

// GL_EXT_vertex_shader

   tbl.glBeginVertexShaderEXT = error_glBeginVertexShaderEXT;
   tbl.glEndVertexShaderEXT = error_glEndVertexShaderEXT;
   tbl.glBindVertexShaderEXT = error_glBindVertexShaderEXT;
   tbl.glGenVertexShadersEXT = error_glGenVertexShadersEXT;
   tbl.glDeleteVertexShaderEXT = error_glDeleteVertexShaderEXT;
   tbl.glShaderOp1EXT = error_glShaderOp1EXT;
   tbl.glShaderOp2EXT = error_glShaderOp2EXT;
   tbl.glShaderOp3EXT = error_glShaderOp3EXT;
   tbl.glSwizzleEXT = error_glSwizzleEXT;
   tbl.glWriteMaskEXT = error_glWriteMaskEXT;
   tbl.glInsertComponentEXT = error_glInsertComponentEXT;
   tbl.glExtractComponentEXT = error_glExtractComponentEXT;
   tbl.glGenSymbolsEXT = error_glGenSymbolsEXT;
   tbl.glSetInvariantEXT = error_glSetInvariantEXT;
   tbl.glSetLocalConstantEXT = error_glSetLocalConstantEXT;
   tbl.glVariantbvEXT = error_glVariantbvEXT;
   tbl.glVariantsvEXT = error_glVariantsvEXT;
   tbl.glVariantivEXT = error_glVariantivEXT;
   tbl.glVariantfvEXT = error_glVariantfvEXT;
   tbl.glVariantdvEXT = error_glVariantdvEXT;
   tbl.glVariantubvEXT = error_glVariantubvEXT;
   tbl.glVariantusvEXT = error_glVariantusvEXT;
   tbl.glVariantuivEXT = error_glVariantuivEXT;
   tbl.glVariantPointerEXT = error_glVariantPointerEXT;
   tbl.glEnableVariantClientStateEXT = error_glEnableVariantClientStateEXT;
   tbl.glDisableVariantClientStateEXT = error_glDisableVariantClientStateEXT;
   tbl.glBindLightParameterEXT = error_glBindLightParameterEXT;
   tbl.glBindMaterialParameterEXT = error_glBindMaterialParameterEXT;
   tbl.glBindTexGenParameterEXT = error_glBindTexGenParameterEXT;
   tbl.glBindTextureUnitParameterEXT = error_glBindTextureUnitParameterEXT;
   tbl.glBindParameterEXT = error_glBindParameterEXT;
   tbl.glIsVariantEnabledEXT = error_glIsVariantEnabledEXT;
   tbl.glGetVariantBooleanvEXT = error_glGetVariantBooleanvEXT;
   tbl.glGetVariantIntegervEXT = error_glGetVariantIntegervEXT;
   tbl.glGetVariantFloatvEXT = error_glGetVariantFloatvEXT;
   tbl.glGetVariantPointervEXT = error_glGetVariantPointervEXT;
   tbl.glGetInvariantBooleanvEXT = error_glGetInvariantBooleanvEXT;
   tbl.glGetInvariantIntegervEXT = error_glGetInvariantIntegervEXT;
   tbl.glGetInvariantFloatvEXT = error_glGetInvariantFloatvEXT;
   tbl.glGetLocalConstantBooleanvEXT = error_glGetLocalConstantBooleanvEXT;
   tbl.glGetLocalConstantIntegervEXT = error_glGetLocalConstantIntegervEXT;
   tbl.glGetLocalConstantFloatvEXT = error_glGetLocalConstantFloatvEXT;

// GL_ATI_vertex_streams

   tbl.glVertexStream1sATI = error_glVertexStream1sATI;
   tbl.glVertexStream1svATI = error_glVertexStream1svATI;
   tbl.glVertexStream1iATI = error_glVertexStream1iATI;
   tbl.glVertexStream1ivATI = error_glVertexStream1ivATI;
   tbl.glVertexStream1fATI = error_glVertexStream1fATI;
   tbl.glVertexStream1fvATI = error_glVertexStream1fvATI;
   tbl.glVertexStream1dATI = error_glVertexStream1dATI;
   tbl.glVertexStream1dvATI = error_glVertexStream1dvATI;
   tbl.glVertexStream2sATI = error_glVertexStream2sATI;
   tbl.glVertexStream2svATI = error_glVertexStream2svATI;
   tbl.glVertexStream2iATI = error_glVertexStream2iATI;
   tbl.glVertexStream2ivATI = error_glVertexStream2ivATI;
   tbl.glVertexStream2fATI = error_glVertexStream2fATI;
   tbl.glVertexStream2fvATI = error_glVertexStream2fvATI;
   tbl.glVertexStream2dATI = error_glVertexStream2dATI;
   tbl.glVertexStream2dvATI = error_glVertexStream2dvATI;
   tbl.glVertexStream3sATI = error_glVertexStream3sATI;
   tbl.glVertexStream3svATI = error_glVertexStream3svATI;
   tbl.glVertexStream3iATI = error_glVertexStream3iATI;
   tbl.glVertexStream3ivATI = error_glVertexStream3ivATI;
   tbl.glVertexStream3fATI = error_glVertexStream3fATI;
   tbl.glVertexStream3fvATI = error_glVertexStream3fvATI;
   tbl.glVertexStream3dATI = error_glVertexStream3dATI;
   tbl.glVertexStream3dvATI = error_glVertexStream3dvATI;
   tbl.glVertexStream4sATI = error_glVertexStream4sATI;
   tbl.glVertexStream4svATI = error_glVertexStream4svATI;
   tbl.glVertexStream4iATI = error_glVertexStream4iATI;
   tbl.glVertexStream4ivATI = error_glVertexStream4ivATI;
   tbl.glVertexStream4fATI = error_glVertexStream4fATI;
   tbl.glVertexStream4fvATI = error_glVertexStream4fvATI;
   tbl.glVertexStream4dATI = error_glVertexStream4dATI;
   tbl.glVertexStream4dvATI = error_glVertexStream4dvATI;
   tbl.glNormalStream3bATI = error_glNormalStream3bATI;
   tbl.glNormalStream3bvATI = error_glNormalStream3bvATI;
   tbl.glNormalStream3sATI = error_glNormalStream3sATI;
   tbl.glNormalStream3svATI = error_glNormalStream3svATI;
   tbl.glNormalStream3iATI = error_glNormalStream3iATI;
   tbl.glNormalStream3ivATI = error_glNormalStream3ivATI;
   tbl.glNormalStream3fATI = error_glNormalStream3fATI;
   tbl.glNormalStream3fvATI = error_glNormalStream3fvATI;
   tbl.glNormalStream3dATI = error_glNormalStream3dATI;
   tbl.glNormalStream3dvATI = error_glNormalStream3dvATI;
   tbl.glClientActiveVertexStreamATI = error_glClientActiveVertexStreamATI;
   tbl.glVertexBlendEnviATI = error_glVertexBlendEnviATI;
   tbl.glVertexBlendEnvfATI = error_glVertexBlendEnvfATI;

// GL_ATI_element_array

   tbl.glElementPointerATI = error_glElementPointerATI;
   tbl.glDrawElementArrayATI = error_glDrawElementArrayATI;
   tbl.glDrawRangeElementArrayATI = error_glDrawRangeElementArrayATI;

// GL_SUN_mesh_array

   tbl.glDrawMeshArraysSUN = error_glDrawMeshArraysSUN;

// GL_NV_occlusion_query

   tbl.glGenOcclusionQueriesNV = error_glGenOcclusionQueriesNV;
   tbl.glDeleteOcclusionQueriesNV = error_glDeleteOcclusionQueriesNV;
   tbl.glIsOcclusionQueryNV = error_glIsOcclusionQueryNV;
   tbl.glBeginOcclusionQueryNV = error_glBeginOcclusionQueryNV;
   tbl.glEndOcclusionQueryNV = error_glEndOcclusionQueryNV;
   tbl.glGetOcclusionQueryivNV = error_glGetOcclusionQueryivNV;
   tbl.glGetOcclusionQueryuivNV = error_glGetOcclusionQueryuivNV;

// GL_NV_point_sprite

   tbl.glPointParameteriNV = error_glPointParameteriNV;
   tbl.glPointParameterivNV = error_glPointParameterivNV;

// GL_EXT_stencil_two_side

   tbl.glActiveStencilFaceEXT = error_glActiveStencilFaceEXT;

// GL_APPLE_element_array

   tbl.glElementPointerAPPLE = error_glElementPointerAPPLE;
   tbl.glDrawElementArrayAPPLE = error_glDrawElementArrayAPPLE;
   tbl.glDrawRangeElementArrayAPPLE = error_glDrawRangeElementArrayAPPLE;
   tbl.glMultiDrawElementArrayAPPLE = error_glMultiDrawElementArrayAPPLE;
   tbl.glMultiDrawRangeElementArrayAPPLE = error_glMultiDrawRangeElementArrayAPPLE;

// GL_APPLE_fence

   tbl.glGenFencesAPPLE = error_glGenFencesAPPLE;
   tbl.glDeleteFencesAPPLE = error_glDeleteFencesAPPLE;
   tbl.glSetFenceAPPLE = error_glSetFenceAPPLE;
   tbl.glIsFenceAPPLE = error_glIsFenceAPPLE;
   tbl.glTestFenceAPPLE = error_glTestFenceAPPLE;
   tbl.glFinishFenceAPPLE = error_glFinishFenceAPPLE;
   tbl.glTestObjectAPPLE = error_glTestObjectAPPLE;
   tbl.glFinishObjectAPPLE = error_glFinishObjectAPPLE;

// GL_APPLE_vertex_array_object

   tbl.glBindVertexArrayAPPLE = error_glBindVertexArrayAPPLE;
   tbl.glDeleteVertexArraysAPPLE = error_glDeleteVertexArraysAPPLE;
   tbl.glGenVertexArraysAPPLE = error_glGenVertexArraysAPPLE;
   tbl.glIsVertexArrayAPPLE = error_glIsVertexArrayAPPLE;

// GL_APPLE_vertex_array_range

   tbl.glVertexArrayRangeAPPLE = error_glVertexArrayRangeAPPLE;
   tbl.glFlushVertexArrayRangeAPPLE = error_glFlushVertexArrayRangeAPPLE;
   tbl.glVertexArrayParameteriAPPLE = error_glVertexArrayParameteriAPPLE;

// GL_ATI_draw_buffers

   tbl.glDrawBuffersATI = error_glDrawBuffersATI;

// GL_NV_fragment_program

   tbl.glProgramNamedParameter4fNV = error_glProgramNamedParameter4fNV;
   tbl.glProgramNamedParameter4dNV = error_glProgramNamedParameter4dNV;
   tbl.glProgramNamedParameter4fvNV = error_glProgramNamedParameter4fvNV;
   tbl.glProgramNamedParameter4dvNV = error_glProgramNamedParameter4dvNV;
   tbl.glGetProgramNamedParameterfvNV = error_glGetProgramNamedParameterfvNV;
   tbl.glGetProgramNamedParameterdvNV = error_glGetProgramNamedParameterdvNV;

// GL_NV_half_float

   tbl.glVertex2hNV = error_glVertex2hNV;
   tbl.glVertex2hvNV = error_glVertex2hvNV;
   tbl.glVertex3hNV = error_glVertex3hNV;
   tbl.glVertex3hvNV = error_glVertex3hvNV;
   tbl.glVertex4hNV = error_glVertex4hNV;
   tbl.glVertex4hvNV = error_glVertex4hvNV;
   tbl.glNormal3hNV = error_glNormal3hNV;
   tbl.glNormal3hvNV = error_glNormal3hvNV;
   tbl.glColor3hNV = error_glColor3hNV;
   tbl.glColor3hvNV = error_glColor3hvNV;
   tbl.glColor4hNV = error_glColor4hNV;
   tbl.glColor4hvNV = error_glColor4hvNV;
   tbl.glTexCoord1hNV = error_glTexCoord1hNV;
   tbl.glTexCoord1hvNV = error_glTexCoord1hvNV;
   tbl.glTexCoord2hNV = error_glTexCoord2hNV;
   tbl.glTexCoord2hvNV = error_glTexCoord2hvNV;
   tbl.glTexCoord3hNV = error_glTexCoord3hNV;
   tbl.glTexCoord3hvNV = error_glTexCoord3hvNV;
   tbl.glTexCoord4hNV = error_glTexCoord4hNV;
   tbl.glTexCoord4hvNV = error_glTexCoord4hvNV;
   tbl.glMultiTexCoord1hNV = error_glMultiTexCoord1hNV;
   tbl.glMultiTexCoord1hvNV = error_glMultiTexCoord1hvNV;
   tbl.glMultiTexCoord2hNV = error_glMultiTexCoord2hNV;
   tbl.glMultiTexCoord2hvNV = error_glMultiTexCoord2hvNV;
   tbl.glMultiTexCoord3hNV = error_glMultiTexCoord3hNV;
   tbl.glMultiTexCoord3hvNV = error_glMultiTexCoord3hvNV;
   tbl.glMultiTexCoord4hNV = error_glMultiTexCoord4hNV;
   tbl.glMultiTexCoord4hvNV = error_glMultiTexCoord4hvNV;
   tbl.glFogCoordhNV = error_glFogCoordhNV;
   tbl.glFogCoordhvNV = error_glFogCoordhvNV;
   tbl.glSecondaryColor3hNV = error_glSecondaryColor3hNV;
   tbl.glSecondaryColor3hvNV = error_glSecondaryColor3hvNV;
   tbl.glVertexWeighthNV = error_glVertexWeighthNV;
   tbl.glVertexWeighthvNV = error_glVertexWeighthvNV;
   tbl.glVertexAttrib1hNV = error_glVertexAttrib1hNV;
   tbl.glVertexAttrib1hvNV = error_glVertexAttrib1hvNV;
   tbl.glVertexAttrib2hNV = error_glVertexAttrib2hNV;
   tbl.glVertexAttrib2hvNV = error_glVertexAttrib2hvNV;
   tbl.glVertexAttrib3hNV = error_glVertexAttrib3hNV;
   tbl.glVertexAttrib3hvNV = error_glVertexAttrib3hvNV;
   tbl.glVertexAttrib4hNV = error_glVertexAttrib4hNV;
   tbl.glVertexAttrib4hvNV = error_glVertexAttrib4hvNV;
   tbl.glVertexAttribs1hvNV = error_glVertexAttribs1hvNV;
   tbl.glVertexAttribs2hvNV = error_glVertexAttribs2hvNV;
   tbl.glVertexAttribs3hvNV = error_glVertexAttribs3hvNV;
   tbl.glVertexAttribs4hvNV = error_glVertexAttribs4hvNV;

// GL_NV_pixel_data_range

   tbl.glPixelDataRangeNV = error_glPixelDataRangeNV;
   tbl.glFlushPixelDataRangeNV = error_glFlushPixelDataRangeNV;

// GL_NV_primitive_restart

   tbl.glPrimitiveRestartNV = error_glPrimitiveRestartNV;
   tbl.glPrimitiveRestartIndexNV = error_glPrimitiveRestartIndexNV;

// GL_ATI_map_object_buffer

   tbl.glMapObjectBufferATI = error_glMapObjectBufferATI;
   tbl.glUnmapObjectBufferATI = error_glUnmapObjectBufferATI;

// GL_ATI_separate_stencil

   tbl.glStencilOpSeparateATI = error_glStencilOpSeparateATI;
   tbl.glStencilFuncSeparateATI = error_glStencilFuncSeparateATI;

// GL_ATI_vertex_attrib_array_object

   tbl.glVertexAttribArrayObjectATI = error_glVertexAttribArrayObjectATI;
   tbl.glGetVertexAttribArrayObjectfvATI = error_glGetVertexAttribArrayObjectfvATI;
   tbl.glGetVertexAttribArrayObjectivATI = error_glGetVertexAttribArrayObjectivATI;

// GL_EXT_depth_bounds_test

   tbl.glDepthBoundsEXT = error_glDepthBoundsEXT;

// GL_EXT_blend_equation_separate

   tbl.glBlendEquationSeparateEXT = error_glBlendEquationSeparateEXT;

// GL_EXT_framebuffer_object

   tbl.glIsRenderbufferEXT = error_glIsRenderbufferEXT;
   tbl.glBindRenderbufferEXT = error_glBindRenderbufferEXT;
   tbl.glDeleteRenderbuffersEXT = error_glDeleteRenderbuffersEXT;
   tbl.glGenRenderbuffersEXT = error_glGenRenderbuffersEXT;
   tbl.glRenderbufferStorageEXT = error_glRenderbufferStorageEXT;
   tbl.glGetRenderbufferParameterivEXT = error_glGetRenderbufferParameterivEXT;
   tbl.glIsFramebufferEXT = error_glIsFramebufferEXT;
   tbl.glBindFramebufferEXT = error_glBindFramebufferEXT;
   tbl.glDeleteFramebuffersEXT = error_glDeleteFramebuffersEXT;
   tbl.glGenFramebuffersEXT = error_glGenFramebuffersEXT;
   tbl.glCheckFramebufferStatusEXT = error_glCheckFramebufferStatusEXT;
   tbl.glFramebufferTexture1DEXT = error_glFramebufferTexture1DEXT;
   tbl.glFramebufferTexture2DEXT = error_glFramebufferTexture2DEXT;
   tbl.glFramebufferTexture3DEXT = error_glFramebufferTexture3DEXT;
   tbl.glFramebufferRenderbufferEXT = error_glFramebufferRenderbufferEXT;
   tbl.glGetFramebufferAttachmentParameterivEXT = error_glGetFramebufferAttachmentParameterivEXT;
   tbl.glGenerateMipmapEXT = error_glGenerateMipmapEXT;

// GL_GREMEDY_string_marker

   tbl.glStringMarkerGREMEDY = error_glStringMarkerGREMEDY;

// GL_EXT_stencil_clear_tag

   tbl.glStencilClearTagEXT = error_glStencilClearTagEXT;

// GL_EXT_framebuffer_blit

   tbl.glBlitFramebufferEXT = error_glBlitFramebufferEXT;

// GL_EXT_framebuffer_multisample

   tbl.glRenderbufferStorageMultisampleEXT = error_glRenderbufferStorageMultisampleEXT;

// GL_EXT_timer_query

   tbl.glGetQueryObjecti64vEXT = error_glGetQueryObjecti64vEXT;
   tbl.glGetQueryObjectui64vEXT = error_glGetQueryObjectui64vEXT;

// GL_EXT_gpu_program_parameters

   tbl.glProgramEnvParameters4fvEXT = error_glProgramEnvParameters4fvEXT;
   tbl.glProgramLocalParameters4fvEXT = error_glProgramLocalParameters4fvEXT;

// GL_APPLE_flush_buffer_range

   tbl.glBufferParameteriAPPLE = error_glBufferParameteriAPPLE;
   tbl.glFlushMappedBufferRangeAPPLE = error_glFlushMappedBufferRangeAPPLE;

// GL_NV_gpu_program4

   tbl.glProgramLocalParameterI4iNV = error_glProgramLocalParameterI4iNV;
   tbl.glProgramLocalParameterI4ivNV = error_glProgramLocalParameterI4ivNV;
   tbl.glProgramLocalParametersI4ivNV = error_glProgramLocalParametersI4ivNV;
   tbl.glProgramLocalParameterI4uiNV = error_glProgramLocalParameterI4uiNV;
   tbl.glProgramLocalParameterI4uivNV = error_glProgramLocalParameterI4uivNV;
   tbl.glProgramLocalParametersI4uivNV = error_glProgramLocalParametersI4uivNV;
   tbl.glProgramEnvParameterI4iNV = error_glProgramEnvParameterI4iNV;
   tbl.glProgramEnvParameterI4ivNV = error_glProgramEnvParameterI4ivNV;
   tbl.glProgramEnvParametersI4ivNV = error_glProgramEnvParametersI4ivNV;
   tbl.glProgramEnvParameterI4uiNV = error_glProgramEnvParameterI4uiNV;
   tbl.glProgramEnvParameterI4uivNV = error_glProgramEnvParameterI4uivNV;
   tbl.glProgramEnvParametersI4uivNV = error_glProgramEnvParametersI4uivNV;
   tbl.glGetProgramLocalParameterIivNV = error_glGetProgramLocalParameterIivNV;
   tbl.glGetProgramLocalParameterIuivNV = error_glGetProgramLocalParameterIuivNV;
   tbl.glGetProgramEnvParameterIivNV = error_glGetProgramEnvParameterIivNV;
   tbl.glGetProgramEnvParameterIuivNV = error_glGetProgramEnvParameterIuivNV;

// GL_NV_geometry_program4

   tbl.glProgramVertexLimitNV = error_glProgramVertexLimitNV;
   tbl.glFramebufferTextureEXT = error_glFramebufferTextureEXT;
   tbl.glFramebufferTextureLayerEXT = error_glFramebufferTextureLayerEXT;
   tbl.glFramebufferTextureFaceEXT = error_glFramebufferTextureFaceEXT;

// GL_EXT_geometry_shader4

   tbl.glProgramParameteriEXT = error_glProgramParameteriEXT;

// GL_NV_vertex_program4

   tbl.glVertexAttribI1iEXT = error_glVertexAttribI1iEXT;
   tbl.glVertexAttribI2iEXT = error_glVertexAttribI2iEXT;
   tbl.glVertexAttribI3iEXT = error_glVertexAttribI3iEXT;
   tbl.glVertexAttribI4iEXT = error_glVertexAttribI4iEXT;
   tbl.glVertexAttribI1uiEXT = error_glVertexAttribI1uiEXT;
   tbl.glVertexAttribI2uiEXT = error_glVertexAttribI2uiEXT;
   tbl.glVertexAttribI3uiEXT = error_glVertexAttribI3uiEXT;
   tbl.glVertexAttribI4uiEXT = error_glVertexAttribI4uiEXT;
   tbl.glVertexAttribI1ivEXT = error_glVertexAttribI1ivEXT;
   tbl.glVertexAttribI2ivEXT = error_glVertexAttribI2ivEXT;
   tbl.glVertexAttribI3ivEXT = error_glVertexAttribI3ivEXT;
   tbl.glVertexAttribI4ivEXT = error_glVertexAttribI4ivEXT;
   tbl.glVertexAttribI1uivEXT = error_glVertexAttribI1uivEXT;
   tbl.glVertexAttribI2uivEXT = error_glVertexAttribI2uivEXT;
   tbl.glVertexAttribI3uivEXT = error_glVertexAttribI3uivEXT;
   tbl.glVertexAttribI4uivEXT = error_glVertexAttribI4uivEXT;
   tbl.glVertexAttribI4bvEXT = error_glVertexAttribI4bvEXT;
   tbl.glVertexAttribI4svEXT = error_glVertexAttribI4svEXT;
   tbl.glVertexAttribI4ubvEXT = error_glVertexAttribI4ubvEXT;
   tbl.glVertexAttribI4usvEXT = error_glVertexAttribI4usvEXT;
   tbl.glVertexAttribIPointerEXT = error_glVertexAttribIPointerEXT;
   tbl.glGetVertexAttribIivEXT = error_glGetVertexAttribIivEXT;
   tbl.glGetVertexAttribIuivEXT = error_glGetVertexAttribIuivEXT;

// GL_EXT_gpu_shader4

   tbl.glGetUniformuivEXT = error_glGetUniformuivEXT;
   tbl.glBindFragDataLocationEXT = error_glBindFragDataLocationEXT;
   tbl.glGetFragDataLocationEXT = error_glGetFragDataLocationEXT;
   tbl.glUniform1uiEXT = error_glUniform1uiEXT;
   tbl.glUniform2uiEXT = error_glUniform2uiEXT;
   tbl.glUniform3uiEXT = error_glUniform3uiEXT;
   tbl.glUniform4uiEXT = error_glUniform4uiEXT;
   tbl.glUniform1uivEXT = error_glUniform1uivEXT;
   tbl.glUniform2uivEXT = error_glUniform2uivEXT;
   tbl.glUniform3uivEXT = error_glUniform3uivEXT;
   tbl.glUniform4uivEXT = error_glUniform4uivEXT;

// GL_EXT_draw_instanced

   tbl.glDrawArraysInstancedEXT = error_glDrawArraysInstancedEXT;
   tbl.glDrawElementsInstancedEXT = error_glDrawElementsInstancedEXT;

// GL_EXT_texture_buffer_object

   tbl.glTexBufferEXT = error_glTexBufferEXT;

// GL_NV_depth_buffer_float

   tbl.glDepthRangedNV = error_glDepthRangedNV;
   tbl.glClearDepthdNV = error_glClearDepthdNV;
   tbl.glDepthBoundsdNV = error_glDepthBoundsdNV;

// GL_NV_framebuffer_multisample_coverage

   tbl.glRenderbufferStorageMultisampleCoverageNV = error_glRenderbufferStorageMultisampleCoverageNV;

// GL_NV_parameter_buffer_object

   tbl.glProgramBufferParametersfvNV = error_glProgramBufferParametersfvNV;
   tbl.glProgramBufferParametersIivNV = error_glProgramBufferParametersIivNV;
   tbl.glProgramBufferParametersIuivNV = error_glProgramBufferParametersIuivNV;

// GL_EXT_draw_buffers2

   tbl.glColorMaskIndexedEXT = error_glColorMaskIndexedEXT;
   tbl.glGetBooleanIndexedvEXT = error_glGetBooleanIndexedvEXT;
   tbl.glGetIntegerIndexedvEXT = error_glGetIntegerIndexedvEXT;
   tbl.glEnableIndexedEXT = error_glEnableIndexedEXT;
   tbl.glDisableIndexedEXT = error_glDisableIndexedEXT;
   tbl.glIsEnabledIndexedEXT = error_glIsEnabledIndexedEXT;

// GL_NV_transform_feedback

   tbl.glBeginTransformFeedbackNV = error_glBeginTransformFeedbackNV;
   tbl.glEndTransformFeedbackNV = error_glEndTransformFeedbackNV;
   tbl.glTransformFeedbackAttribsNV = error_glTransformFeedbackAttribsNV;
   tbl.glBindBufferRangeNV = error_glBindBufferRangeNV;
   tbl.glBindBufferOffsetNV = error_glBindBufferOffsetNV;
   tbl.glBindBufferBaseNV = error_glBindBufferBaseNV;
   tbl.glTransformFeedbackVaryingsNV = error_glTransformFeedbackVaryingsNV;
   tbl.glActiveVaryingNV = error_glActiveVaryingNV;
   tbl.glGetVaryingLocationNV = error_glGetVaryingLocationNV;
   tbl.glGetActiveVaryingNV = error_glGetActiveVaryingNV;
   tbl.glGetTransformFeedbackVaryingNV = error_glGetTransformFeedbackVaryingNV;

// GL_EXT_bindable_uniform

   tbl.glUniformBufferEXT = error_glUniformBufferEXT;
   tbl.glGetUniformBufferSizeEXT = error_glGetUniformBufferSizeEXT;
   tbl.glGetUniformOffsetEXT = error_glGetUniformOffsetEXT;

// GL_EXT_texture_integer

   tbl.glTexParameterIivEXT = error_glTexParameterIivEXT;
   tbl.glTexParameterIuivEXT = error_glTexParameterIuivEXT;
   tbl.glGetTexParameterIivEXT = error_glGetTexParameterIivEXT;
   tbl.glGetTexParameterIuivEXT = error_glGetTexParameterIuivEXT;
   tbl.glClearColorIiEXT = error_glClearColorIiEXT;
   tbl.glClearColorIuiEXT = error_glClearColorIuiEXT;

// GL_GREMEDY_frame_terminator

   tbl.glFrameTerminatorGREMEDY = error_glFrameTerminatorGREMEDY;

// GL_NV_conditional_render

   tbl.glBeginConditionalRenderNV = error_glBeginConditionalRenderNV;
   tbl.glEndConditionalRenderNV = error_glEndConditionalRenderNV;

// GL_NV_present_video

   tbl.glPresentFrameKeyedNV = error_glPresentFrameKeyedNV;
   tbl.glPresentFrameDualFillNV = error_glPresentFrameDualFillNV;
   tbl.glGetVideoivNV = error_glGetVideoivNV;
   tbl.glGetVideouivNV = error_glGetVideouivNV;
   tbl.glGetVideoi64vNV = error_glGetVideoi64vNV;
   tbl.glGetVideoui64vNV = error_glGetVideoui64vNV;

// GL_EXT_transform_feedback

   tbl.glBeginTransformFeedbackEXT = error_glBeginTransformFeedbackEXT;
   tbl.glEndTransformFeedbackEXT = error_glEndTransformFeedbackEXT;
   tbl.glBindBufferRangeEXT = error_glBindBufferRangeEXT;
   tbl.glBindBufferOffsetEXT = error_glBindBufferOffsetEXT;
   tbl.glBindBufferBaseEXT = error_glBindBufferBaseEXT;
   tbl.glTransformFeedbackVaryingsEXT = error_glTransformFeedbackVaryingsEXT;
   tbl.glGetTransformFeedbackVaryingEXT = error_glGetTransformFeedbackVaryingEXT;

// GL_EXT_direct_state_access

   tbl.glClientAttribDefaultEXT = error_glClientAttribDefaultEXT;
   tbl.glPushClientAttribDefaultEXT = error_glPushClientAttribDefaultEXT;
   tbl.glMatrixLoadfEXT = error_glMatrixLoadfEXT;
   tbl.glMatrixLoaddEXT = error_glMatrixLoaddEXT;
   tbl.glMatrixMultfEXT = error_glMatrixMultfEXT;
   tbl.glMatrixMultdEXT = error_glMatrixMultdEXT;
   tbl.glMatrixLoadIdentityEXT = error_glMatrixLoadIdentityEXT;
   tbl.glMatrixRotatefEXT = error_glMatrixRotatefEXT;
   tbl.glMatrixRotatedEXT = error_glMatrixRotatedEXT;
   tbl.glMatrixScalefEXT = error_glMatrixScalefEXT;
   tbl.glMatrixScaledEXT = error_glMatrixScaledEXT;
   tbl.glMatrixTranslatefEXT = error_glMatrixTranslatefEXT;
   tbl.glMatrixTranslatedEXT = error_glMatrixTranslatedEXT;
   tbl.glMatrixFrustumEXT = error_glMatrixFrustumEXT;
   tbl.glMatrixOrthoEXT = error_glMatrixOrthoEXT;
   tbl.glMatrixPopEXT = error_glMatrixPopEXT;
   tbl.glMatrixPushEXT = error_glMatrixPushEXT;
   tbl.glMatrixLoadTransposefEXT = error_glMatrixLoadTransposefEXT;
   tbl.glMatrixLoadTransposedEXT = error_glMatrixLoadTransposedEXT;
   tbl.glMatrixMultTransposefEXT = error_glMatrixMultTransposefEXT;
   tbl.glMatrixMultTransposedEXT = error_glMatrixMultTransposedEXT;
   tbl.glTextureParameterfEXT = error_glTextureParameterfEXT;
   tbl.glTextureParameterfvEXT = error_glTextureParameterfvEXT;
   tbl.glTextureParameteriEXT = error_glTextureParameteriEXT;
   tbl.glTextureParameterivEXT = error_glTextureParameterivEXT;
   tbl.glTextureImage1DEXT = error_glTextureImage1DEXT;
   tbl.glTextureImage2DEXT = error_glTextureImage2DEXT;
   tbl.glTextureSubImage1DEXT = error_glTextureSubImage1DEXT;
   tbl.glTextureSubImage2DEXT = error_glTextureSubImage2DEXT;
   tbl.glCopyTextureImage1DEXT = error_glCopyTextureImage1DEXT;
   tbl.glCopyTextureImage2DEXT = error_glCopyTextureImage2DEXT;
   tbl.glCopyTextureSubImage1DEXT = error_glCopyTextureSubImage1DEXT;
   tbl.glCopyTextureSubImage2DEXT = error_glCopyTextureSubImage2DEXT;
   tbl.glGetTextureImageEXT = error_glGetTextureImageEXT;
   tbl.glGetTextureParameterfvEXT = error_glGetTextureParameterfvEXT;
   tbl.glGetTextureParameterivEXT = error_glGetTextureParameterivEXT;
   tbl.glGetTextureLevelParameterfvEXT = error_glGetTextureLevelParameterfvEXT;
   tbl.glGetTextureLevelParameterivEXT = error_glGetTextureLevelParameterivEXT;
   tbl.glTextureImage3DEXT = error_glTextureImage3DEXT;
   tbl.glTextureSubImage3DEXT = error_glTextureSubImage3DEXT;
   tbl.glCopyTextureSubImage3DEXT = error_glCopyTextureSubImage3DEXT;
   tbl.glMultiTexParameterfEXT = error_glMultiTexParameterfEXT;
   tbl.glMultiTexParameterfvEXT = error_glMultiTexParameterfvEXT;
   tbl.glMultiTexParameteriEXT = error_glMultiTexParameteriEXT;
   tbl.glMultiTexParameterivEXT = error_glMultiTexParameterivEXT;
   tbl.glMultiTexImage1DEXT = error_glMultiTexImage1DEXT;
   tbl.glMultiTexImage2DEXT = error_glMultiTexImage2DEXT;
   tbl.glMultiTexSubImage1DEXT = error_glMultiTexSubImage1DEXT;
   tbl.glMultiTexSubImage2DEXT = error_glMultiTexSubImage2DEXT;
   tbl.glCopyMultiTexImage1DEXT = error_glCopyMultiTexImage1DEXT;
   tbl.glCopyMultiTexImage2DEXT = error_glCopyMultiTexImage2DEXT;
   tbl.glCopyMultiTexSubImage1DEXT = error_glCopyMultiTexSubImage1DEXT;
   tbl.glCopyMultiTexSubImage2DEXT = error_glCopyMultiTexSubImage2DEXT;
   tbl.glGetMultiTexImageEXT = error_glGetMultiTexImageEXT;
   tbl.glGetMultiTexParameterfvEXT = error_glGetMultiTexParameterfvEXT;
   tbl.glGetMultiTexParameterivEXT = error_glGetMultiTexParameterivEXT;
   tbl.glGetMultiTexLevelParameterfvEXT = error_glGetMultiTexLevelParameterfvEXT;
   tbl.glGetMultiTexLevelParameterivEXT = error_glGetMultiTexLevelParameterivEXT;
   tbl.glMultiTexImage3DEXT = error_glMultiTexImage3DEXT;
   tbl.glMultiTexSubImage3DEXT = error_glMultiTexSubImage3DEXT;
   tbl.glCopyMultiTexSubImage3DEXT = error_glCopyMultiTexSubImage3DEXT;
   tbl.glBindMultiTextureEXT = error_glBindMultiTextureEXT;
   tbl.glEnableClientStateIndexedEXT = error_glEnableClientStateIndexedEXT;
   tbl.glDisableClientStateIndexedEXT = error_glDisableClientStateIndexedEXT;
   tbl.glMultiTexCoordPointerEXT = error_glMultiTexCoordPointerEXT;
   tbl.glMultiTexEnvfEXT = error_glMultiTexEnvfEXT;
   tbl.glMultiTexEnvfvEXT = error_glMultiTexEnvfvEXT;
   tbl.glMultiTexEnviEXT = error_glMultiTexEnviEXT;
   tbl.glMultiTexEnvivEXT = error_glMultiTexEnvivEXT;
   tbl.glMultiTexGendEXT = error_glMultiTexGendEXT;
   tbl.glMultiTexGendvEXT = error_glMultiTexGendvEXT;
   tbl.glMultiTexGenfEXT = error_glMultiTexGenfEXT;
   tbl.glMultiTexGenfvEXT = error_glMultiTexGenfvEXT;
   tbl.glMultiTexGeniEXT = error_glMultiTexGeniEXT;
   tbl.glMultiTexGenivEXT = error_glMultiTexGenivEXT;
   tbl.glGetMultiTexEnvfvEXT = error_glGetMultiTexEnvfvEXT;
   tbl.glGetMultiTexEnvivEXT = error_glGetMultiTexEnvivEXT;
   tbl.glGetMultiTexGendvEXT = error_glGetMultiTexGendvEXT;
   tbl.glGetMultiTexGenfvEXT = error_glGetMultiTexGenfvEXT;
   tbl.glGetMultiTexGenivEXT = error_glGetMultiTexGenivEXT;
   tbl.glGetFloatIndexedvEXT = error_glGetFloatIndexedvEXT;
   tbl.glGetDoubleIndexedvEXT = error_glGetDoubleIndexedvEXT;
   tbl.glGetPointerIndexedvEXT = error_glGetPointerIndexedvEXT;
   tbl.glCompressedTextureImage3DEXT = error_glCompressedTextureImage3DEXT;
   tbl.glCompressedTextureImage2DEXT = error_glCompressedTextureImage2DEXT;
   tbl.glCompressedTextureImage1DEXT = error_glCompressedTextureImage1DEXT;
   tbl.glCompressedTextureSubImage3DEXT = error_glCompressedTextureSubImage3DEXT;
   tbl.glCompressedTextureSubImage2DEXT = error_glCompressedTextureSubImage2DEXT;
   tbl.glCompressedTextureSubImage1DEXT = error_glCompressedTextureSubImage1DEXT;
   tbl.glGetCompressedTextureImageEXT = error_glGetCompressedTextureImageEXT;
   tbl.glCompressedMultiTexImage3DEXT = error_glCompressedMultiTexImage3DEXT;
   tbl.glCompressedMultiTexImage2DEXT = error_glCompressedMultiTexImage2DEXT;
   tbl.glCompressedMultiTexImage1DEXT = error_glCompressedMultiTexImage1DEXT;
   tbl.glCompressedMultiTexSubImage3DEXT = error_glCompressedMultiTexSubImage3DEXT;
   tbl.glCompressedMultiTexSubImage2DEXT = error_glCompressedMultiTexSubImage2DEXT;
   tbl.glCompressedMultiTexSubImage1DEXT = error_glCompressedMultiTexSubImage1DEXT;
   tbl.glGetCompressedMultiTexImageEXT = error_glGetCompressedMultiTexImageEXT;
   tbl.glNamedProgramStringEXT = error_glNamedProgramStringEXT;
   tbl.glNamedProgramLocalParameter4dEXT = error_glNamedProgramLocalParameter4dEXT;
   tbl.glNamedProgramLocalParameter4dvEXT = error_glNamedProgramLocalParameter4dvEXT;
   tbl.glNamedProgramLocalParameter4fEXT = error_glNamedProgramLocalParameter4fEXT;
   tbl.glNamedProgramLocalParameter4fvEXT = error_glNamedProgramLocalParameter4fvEXT;
   tbl.glGetNamedProgramLocalParameterdvEXT = error_glGetNamedProgramLocalParameterdvEXT;
   tbl.glGetNamedProgramLocalParameterfvEXT = error_glGetNamedProgramLocalParameterfvEXT;
   tbl.glGetNamedProgramivEXT = error_glGetNamedProgramivEXT;
   tbl.glGetNamedProgramStringEXT = error_glGetNamedProgramStringEXT;
   tbl.glNamedProgramLocalParameters4fvEXT = error_glNamedProgramLocalParameters4fvEXT;
   tbl.glNamedProgramLocalParameterI4iEXT = error_glNamedProgramLocalParameterI4iEXT;
   tbl.glNamedProgramLocalParameterI4ivEXT = error_glNamedProgramLocalParameterI4ivEXT;
   tbl.glNamedProgramLocalParametersI4ivEXT = error_glNamedProgramLocalParametersI4ivEXT;
   tbl.glNamedProgramLocalParameterI4uiEXT = error_glNamedProgramLocalParameterI4uiEXT;
   tbl.glNamedProgramLocalParameterI4uivEXT = error_glNamedProgramLocalParameterI4uivEXT;
   tbl.glNamedProgramLocalParametersI4uivEXT = error_glNamedProgramLocalParametersI4uivEXT;
   tbl.glGetNamedProgramLocalParameterIivEXT = error_glGetNamedProgramLocalParameterIivEXT;
   tbl.glGetNamedProgramLocalParameterIuivEXT = error_glGetNamedProgramLocalParameterIuivEXT;
   tbl.glTextureParameterIivEXT = error_glTextureParameterIivEXT;
   tbl.glTextureParameterIuivEXT = error_glTextureParameterIuivEXT;
   tbl.glGetTextureParameterIivEXT = error_glGetTextureParameterIivEXT;
   tbl.glGetTextureParameterIuivEXT = error_glGetTextureParameterIuivEXT;
   tbl.glMultiTexParameterIivEXT = error_glMultiTexParameterIivEXT;
   tbl.glMultiTexParameterIuivEXT = error_glMultiTexParameterIuivEXT;
   tbl.glGetMultiTexParameterIivEXT = error_glGetMultiTexParameterIivEXT;
   tbl.glGetMultiTexParameterIuivEXT = error_glGetMultiTexParameterIuivEXT;
   tbl.glProgramUniform1fEXT = error_glProgramUniform1fEXT;
   tbl.glProgramUniform2fEXT = error_glProgramUniform2fEXT;
   tbl.glProgramUniform3fEXT = error_glProgramUniform3fEXT;
   tbl.glProgramUniform4fEXT = error_glProgramUniform4fEXT;
   tbl.glProgramUniform1iEXT = error_glProgramUniform1iEXT;
   tbl.glProgramUniform2iEXT = error_glProgramUniform2iEXT;
   tbl.glProgramUniform3iEXT = error_glProgramUniform3iEXT;
   tbl.glProgramUniform4iEXT = error_glProgramUniform4iEXT;
   tbl.glProgramUniform1fvEXT = error_glProgramUniform1fvEXT;
   tbl.glProgramUniform2fvEXT = error_glProgramUniform2fvEXT;
   tbl.glProgramUniform3fvEXT = error_glProgramUniform3fvEXT;
   tbl.glProgramUniform4fvEXT = error_glProgramUniform4fvEXT;
   tbl.glProgramUniform1ivEXT = error_glProgramUniform1ivEXT;
   tbl.glProgramUniform2ivEXT = error_glProgramUniform2ivEXT;
   tbl.glProgramUniform3ivEXT = error_glProgramUniform3ivEXT;
   tbl.glProgramUniform4ivEXT = error_glProgramUniform4ivEXT;
   tbl.glProgramUniformMatrix2fvEXT = error_glProgramUniformMatrix2fvEXT;
   tbl.glProgramUniformMatrix3fvEXT = error_glProgramUniformMatrix3fvEXT;
   tbl.glProgramUniformMatrix4fvEXT = error_glProgramUniformMatrix4fvEXT;
   tbl.glProgramUniformMatrix2x3fvEXT = error_glProgramUniformMatrix2x3fvEXT;
   tbl.glProgramUniformMatrix3x2fvEXT = error_glProgramUniformMatrix3x2fvEXT;
   tbl.glProgramUniformMatrix2x4fvEXT = error_glProgramUniformMatrix2x4fvEXT;
   tbl.glProgramUniformMatrix4x2fvEXT = error_glProgramUniformMatrix4x2fvEXT;
   tbl.glProgramUniformMatrix3x4fvEXT = error_glProgramUniformMatrix3x4fvEXT;
   tbl.glProgramUniformMatrix4x3fvEXT = error_glProgramUniformMatrix4x3fvEXT;
   tbl.glProgramUniform1uiEXT = error_glProgramUniform1uiEXT;
   tbl.glProgramUniform2uiEXT = error_glProgramUniform2uiEXT;
   tbl.glProgramUniform3uiEXT = error_glProgramUniform3uiEXT;
   tbl.glProgramUniform4uiEXT = error_glProgramUniform4uiEXT;
   tbl.glProgramUniform1uivEXT = error_glProgramUniform1uivEXT;
   tbl.glProgramUniform2uivEXT = error_glProgramUniform2uivEXT;
   tbl.glProgramUniform3uivEXT = error_glProgramUniform3uivEXT;
   tbl.glProgramUniform4uivEXT = error_glProgramUniform4uivEXT;
   tbl.glNamedBufferDataEXT = error_glNamedBufferDataEXT;
   tbl.glNamedBufferSubDataEXT = error_glNamedBufferSubDataEXT;
   tbl.glMapNamedBufferEXT = error_glMapNamedBufferEXT;
   tbl.glUnmapNamedBufferEXT = error_glUnmapNamedBufferEXT;
   tbl.glGetNamedBufferParameterivEXT = error_glGetNamedBufferParameterivEXT;
   tbl.glGetNamedBufferPointervEXT = error_glGetNamedBufferPointervEXT;
   tbl.glGetNamedBufferSubDataEXT = error_glGetNamedBufferSubDataEXT;
   tbl.glTextureBufferEXT = error_glTextureBufferEXT;
   tbl.glMultiTexBufferEXT = error_glMultiTexBufferEXT;
   tbl.glNamedRenderbufferStorageEXT = error_glNamedRenderbufferStorageEXT;
   tbl.glGetNamedRenderbufferParameterivEXT = error_glGetNamedRenderbufferParameterivEXT;
   tbl.glCheckNamedFramebufferStatusEXT = error_glCheckNamedFramebufferStatusEXT;
   tbl.glNamedFramebufferTexture1DEXT = error_glNamedFramebufferTexture1DEXT;
   tbl.glNamedFramebufferTexture2DEXT = error_glNamedFramebufferTexture2DEXT;
   tbl.glNamedFramebufferTexture3DEXT = error_glNamedFramebufferTexture3DEXT;
   tbl.glNamedFramebufferRenderbufferEXT = error_glNamedFramebufferRenderbufferEXT;
   tbl.glGetNamedFramebufferAttachmentParameterivEXT = error_glGetNamedFramebufferAttachmentParameterivEXT;
   tbl.glGenerateTextureMipmapEXT = error_glGenerateTextureMipmapEXT;
   tbl.glGenerateMultiTexMipmapEXT = error_glGenerateMultiTexMipmapEXT;
   tbl.glFramebufferDrawBufferEXT = error_glFramebufferDrawBufferEXT;
   tbl.glFramebufferDrawBuffersEXT = error_glFramebufferDrawBuffersEXT;
   tbl.glFramebufferReadBufferEXT = error_glFramebufferReadBufferEXT;
   tbl.glGetFramebufferParameterivEXT = error_glGetFramebufferParameterivEXT;
   tbl.glNamedRenderbufferStorageMultisampleEXT = error_glNamedRenderbufferStorageMultisampleEXT;
   tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = error_glNamedRenderbufferStorageMultisampleCoverageEXT;
   tbl.glNamedFramebufferTextureEXT = error_glNamedFramebufferTextureEXT;
   tbl.glNamedFramebufferTextureLayerEXT = error_glNamedFramebufferTextureLayerEXT;
   tbl.glNamedFramebufferTextureFaceEXT = error_glNamedFramebufferTextureFaceEXT;
   tbl.glTextureRenderbufferEXT = error_glTextureRenderbufferEXT;
   tbl.glMultiTexRenderbufferEXT = error_glMultiTexRenderbufferEXT;
   tbl.glMapNamedBufferRangeEXT = error_glMapNamedBufferRangeEXT;
   tbl.glFlushMappedNamedBufferRangeEXT = error_glFlushMappedNamedBufferRangeEXT;
   tbl.glNamedCopyBufferSubDataEXT = error_glNamedCopyBufferSubDataEXT;
   tbl.glProgramUniform1dEXT = error_glProgramUniform1dEXT;
   tbl.glProgramUniform2dEXT = error_glProgramUniform2dEXT;
   tbl.glProgramUniform3dEXT = error_glProgramUniform3dEXT;
   tbl.glProgramUniform4dEXT = error_glProgramUniform4dEXT;
   tbl.glProgramUniform1dvEXT = error_glProgramUniform1dvEXT;
   tbl.glProgramUniform2dvEXT = error_glProgramUniform2dvEXT;
   tbl.glProgramUniform3dvEXT = error_glProgramUniform3dvEXT;
   tbl.glProgramUniform4dvEXT = error_glProgramUniform4dvEXT;
   tbl.glProgramUniformMatrix2dvEXT = error_glProgramUniformMatrix2dvEXT;
   tbl.glProgramUniformMatrix3dvEXT = error_glProgramUniformMatrix3dvEXT;
   tbl.glProgramUniformMatrix4dvEXT = error_glProgramUniformMatrix4dvEXT;
   tbl.glProgramUniformMatrix2x3dvEXT = error_glProgramUniformMatrix2x3dvEXT;
   tbl.glProgramUniformMatrix2x4dvEXT = error_glProgramUniformMatrix2x4dvEXT;
   tbl.glProgramUniformMatrix3x2dvEXT = error_glProgramUniformMatrix3x2dvEXT;
   tbl.glProgramUniformMatrix3x4dvEXT = error_glProgramUniformMatrix3x4dvEXT;
   tbl.glProgramUniformMatrix4x2dvEXT = error_glProgramUniformMatrix4x2dvEXT;
   tbl.glProgramUniformMatrix4x3dvEXT = error_glProgramUniformMatrix4x3dvEXT;

// GL_NV_explicit_multisample

   tbl.glGetMultisamplefvNV = error_glGetMultisamplefvNV;
   tbl.glSampleMaskIndexedNV = error_glSampleMaskIndexedNV;
   tbl.glTexRenderbufferNV = error_glTexRenderbufferNV;

// GL_NV_transform_feedback2

   tbl.glBindTransformFeedbackNV = error_glBindTransformFeedbackNV;
   tbl.glDeleteTransformFeedbacksNV = error_glDeleteTransformFeedbacksNV;
   tbl.glGenTransformFeedbacksNV = error_glGenTransformFeedbacksNV;
   tbl.glIsTransformFeedbackNV = error_glIsTransformFeedbackNV;
   tbl.glPauseTransformFeedbackNV = error_glPauseTransformFeedbackNV;
   tbl.glResumeTransformFeedbackNV = error_glResumeTransformFeedbackNV;
   tbl.glDrawTransformFeedbackNV = error_glDrawTransformFeedbackNV;

// GL_AMD_performance_monitor

   tbl.glGetPerfMonitorGroupsAMD = error_glGetPerfMonitorGroupsAMD;
   tbl.glGetPerfMonitorCountersAMD = error_glGetPerfMonitorCountersAMD;
   tbl.glGetPerfMonitorGroupStringAMD = error_glGetPerfMonitorGroupStringAMD;
   tbl.glGetPerfMonitorCounterStringAMD = error_glGetPerfMonitorCounterStringAMD;
   tbl.glGetPerfMonitorCounterInfoAMD = error_glGetPerfMonitorCounterInfoAMD;
   tbl.glGenPerfMonitorsAMD = error_glGenPerfMonitorsAMD;
   tbl.glDeletePerfMonitorsAMD = error_glDeletePerfMonitorsAMD;
   tbl.glSelectPerfMonitorCountersAMD = error_glSelectPerfMonitorCountersAMD;
   tbl.glBeginPerfMonitorAMD = error_glBeginPerfMonitorAMD;
   tbl.glEndPerfMonitorAMD = error_glEndPerfMonitorAMD;
   tbl.glGetPerfMonitorCounterDataAMD = error_glGetPerfMonitorCounterDataAMD;

// GL_AMD_vertex_shader_tesselator

   tbl.glTessellationFactorAMD = error_glTessellationFactorAMD;
   tbl.glTessellationModeAMD = error_glTessellationModeAMD;

// GL_EXT_provoking_vertex

   tbl.glProvokingVertexEXT = error_glProvokingVertexEXT;

// GL_AMD_draw_buffers_blend

   tbl.glBlendFuncIndexedAMD = error_glBlendFuncIndexedAMD;
   tbl.glBlendFuncSeparateIndexedAMD = error_glBlendFuncSeparateIndexedAMD;
   tbl.glBlendEquationIndexedAMD = error_glBlendEquationIndexedAMD;
   tbl.glBlendEquationSeparateIndexedAMD = error_glBlendEquationSeparateIndexedAMD;

// GL_APPLE_texture_range

   tbl.glTextureRangeAPPLE = error_glTextureRangeAPPLE;
   tbl.glGetTexParameterPointervAPPLE = error_glGetTexParameterPointervAPPLE;

// GL_APPLE_vertex_program_evaluators

   tbl.glEnableVertexAttribAPPLE = error_glEnableVertexAttribAPPLE;
   tbl.glDisableVertexAttribAPPLE = error_glDisableVertexAttribAPPLE;
   tbl.glIsVertexAttribEnabledAPPLE = error_glIsVertexAttribEnabledAPPLE;
   tbl.glMapVertexAttrib1dAPPLE = error_glMapVertexAttrib1dAPPLE;
   tbl.glMapVertexAttrib1fAPPLE = error_glMapVertexAttrib1fAPPLE;
   tbl.glMapVertexAttrib2dAPPLE = error_glMapVertexAttrib2dAPPLE;
   tbl.glMapVertexAttrib2fAPPLE = error_glMapVertexAttrib2fAPPLE;

// GL_APPLE_object_purgeable

   tbl.glObjectPurgeableAPPLE = error_glObjectPurgeableAPPLE;
   tbl.glObjectUnpurgeableAPPLE = error_glObjectUnpurgeableAPPLE;
   tbl.glGetObjectParameterivAPPLE = error_glGetObjectParameterivAPPLE;

// GL_NV_video_capture

   tbl.glBeginVideoCaptureNV = error_glBeginVideoCaptureNV;
   tbl.glBindVideoCaptureStreamBufferNV = error_glBindVideoCaptureStreamBufferNV;
   tbl.glBindVideoCaptureStreamTextureNV = error_glBindVideoCaptureStreamTextureNV;
   tbl.glEndVideoCaptureNV = error_glEndVideoCaptureNV;
   tbl.glGetVideoCaptureivNV = error_glGetVideoCaptureivNV;
   tbl.glGetVideoCaptureStreamivNV = error_glGetVideoCaptureStreamivNV;
   tbl.glGetVideoCaptureStreamfvNV = error_glGetVideoCaptureStreamfvNV;
   tbl.glGetVideoCaptureStreamdvNV = error_glGetVideoCaptureStreamdvNV;
   tbl.glVideoCaptureNV = error_glVideoCaptureNV;
   tbl.glVideoCaptureStreamParameterivNV = error_glVideoCaptureStreamParameterivNV;
   tbl.glVideoCaptureStreamParameterfvNV = error_glVideoCaptureStreamParameterfvNV;
   tbl.glVideoCaptureStreamParameterdvNV = error_glVideoCaptureStreamParameterdvNV;

// GL_NV_copy_image

   tbl.glCopyImageSubDataNV = error_glCopyImageSubDataNV;

// GL_EXT_separate_shader_objects

   tbl.glUseShaderProgramEXT = error_glUseShaderProgramEXT;
   tbl.glActiveProgramEXT = error_glActiveProgramEXT;
   tbl.glCreateShaderProgramEXT = error_glCreateShaderProgramEXT;

// GL_NV_shader_buffer_load

   tbl.glMakeBufferResidentNV = error_glMakeBufferResidentNV;
   tbl.glMakeBufferNonResidentNV = error_glMakeBufferNonResidentNV;
   tbl.glIsBufferResidentNV = error_glIsBufferResidentNV;
   tbl.glMakeNamedBufferResidentNV = error_glMakeNamedBufferResidentNV;
   tbl.glMakeNamedBufferNonResidentNV = error_glMakeNamedBufferNonResidentNV;
   tbl.glIsNamedBufferResidentNV = error_glIsNamedBufferResidentNV;
   tbl.glGetBufferParameterui64vNV = error_glGetBufferParameterui64vNV;
   tbl.glGetNamedBufferParameterui64vNV = error_glGetNamedBufferParameterui64vNV;
   tbl.glGetIntegerui64vNV = error_glGetIntegerui64vNV;
   tbl.glUniformui64NV = error_glUniformui64NV;
   tbl.glUniformui64vNV = error_glUniformui64vNV;
   tbl.glGetUniformui64vNV = error_glGetUniformui64vNV;
   tbl.glProgramUniformui64NV = error_glProgramUniformui64NV;
   tbl.glProgramUniformui64vNV = error_glProgramUniformui64vNV;

// GL_NV_vertex_buffer_unified_memory

   tbl.glBufferAddressRangeNV = error_glBufferAddressRangeNV;
   tbl.glVertexFormatNV = error_glVertexFormatNV;
   tbl.glNormalFormatNV = error_glNormalFormatNV;
   tbl.glColorFormatNV = error_glColorFormatNV;
   tbl.glIndexFormatNV = error_glIndexFormatNV;
   tbl.glTexCoordFormatNV = error_glTexCoordFormatNV;
   tbl.glEdgeFlagFormatNV = error_glEdgeFlagFormatNV;
   tbl.glSecondaryColorFormatNV = error_glSecondaryColorFormatNV;
   tbl.glFogCoordFormatNV = error_glFogCoordFormatNV;
   tbl.glVertexAttribFormatNV = error_glVertexAttribFormatNV;
   tbl.glVertexAttribIFormatNV = error_glVertexAttribIFormatNV;
   tbl.glGetIntegerui64i_vNV = error_glGetIntegerui64i_vNV;

// GL_NV_texture_barrier

   tbl.glTextureBarrierNV = error_glTextureBarrierNV;

// GL_EXT_shader_image_load_store

   tbl.glBindImageTextureEXT = error_glBindImageTextureEXT;
   tbl.glMemoryBarrierEXT = error_glMemoryBarrierEXT;

// GL_EXT_vertex_attrib_64bit

   tbl.glVertexAttribL1dEXT = error_glVertexAttribL1dEXT;
   tbl.glVertexAttribL2dEXT = error_glVertexAttribL2dEXT;
   tbl.glVertexAttribL3dEXT = error_glVertexAttribL3dEXT;
   tbl.glVertexAttribL4dEXT = error_glVertexAttribL4dEXT;
   tbl.glVertexAttribL1dvEXT = error_glVertexAttribL1dvEXT;
   tbl.glVertexAttribL2dvEXT = error_glVertexAttribL2dvEXT;
   tbl.glVertexAttribL3dvEXT = error_glVertexAttribL3dvEXT;
   tbl.glVertexAttribL4dvEXT = error_glVertexAttribL4dvEXT;
   tbl.glVertexAttribLPointerEXT = error_glVertexAttribLPointerEXT;
   tbl.glVertexArrayVertexAttribLOffsetEXT = error_glVertexArrayVertexAttribLOffsetEXT;
   tbl.glGetVertexAttribLdvEXT = error_glGetVertexAttribLdvEXT;

// GL_NV_gpu_shader5

   tbl.glUniform1i64NV = error_glUniform1i64NV;
   tbl.glUniform2i64NV = error_glUniform2i64NV;
   tbl.glUniform3i64NV = error_glUniform3i64NV;
   tbl.glUniform4i64NV = error_glUniform4i64NV;
   tbl.glUniform1i64vNV = error_glUniform1i64vNV;
   tbl.glUniform2i64vNV = error_glUniform2i64vNV;
   tbl.glUniform3i64vNV = error_glUniform3i64vNV;
   tbl.glUniform4i64vNV = error_glUniform4i64vNV;
   tbl.glUniform1ui64NV = error_glUniform1ui64NV;
   tbl.glUniform2ui64NV = error_glUniform2ui64NV;
   tbl.glUniform3ui64NV = error_glUniform3ui64NV;
   tbl.glUniform4ui64NV = error_glUniform4ui64NV;
   tbl.glUniform1ui64vNV = error_glUniform1ui64vNV;
   tbl.glUniform2ui64vNV = error_glUniform2ui64vNV;
   tbl.glUniform3ui64vNV = error_glUniform3ui64vNV;
   tbl.glUniform4ui64vNV = error_glUniform4ui64vNV;
   tbl.glProgramUniform1i64NV = error_glProgramUniform1i64NV;
   tbl.glProgramUniform2i64NV = error_glProgramUniform2i64NV;
   tbl.glProgramUniform3i64NV = error_glProgramUniform3i64NV;
   tbl.glProgramUniform4i64NV = error_glProgramUniform4i64NV;
   tbl.glProgramUniform1i64vNV = error_glProgramUniform1i64vNV;
   tbl.glProgramUniform2i64vNV = error_glProgramUniform2i64vNV;
   tbl.glProgramUniform3i64vNV = error_glProgramUniform3i64vNV;
   tbl.glProgramUniform4i64vNV = error_glProgramUniform4i64vNV;
   tbl.glProgramUniform1ui64NV = error_glProgramUniform1ui64NV;
   tbl.glProgramUniform2ui64NV = error_glProgramUniform2ui64NV;
   tbl.glProgramUniform3ui64NV = error_glProgramUniform3ui64NV;
   tbl.glProgramUniform4ui64NV = error_glProgramUniform4ui64NV;
   tbl.glProgramUniform1ui64vNV = error_glProgramUniform1ui64vNV;
   tbl.glProgramUniform2ui64vNV = error_glProgramUniform2ui64vNV;
   tbl.glProgramUniform3ui64vNV = error_glProgramUniform3ui64vNV;
   tbl.glProgramUniform4ui64vNV = error_glProgramUniform4ui64vNV;
   tbl.glGetUniformi64vNV = error_glGetUniformi64vNV;

// GL_NV_vertex_attrib_integer_64bit

   tbl.glVertexAttribL1i64NV = error_glVertexAttribL1i64NV;
   tbl.glVertexAttribL2i64NV = error_glVertexAttribL2i64NV;
   tbl.glVertexAttribL3i64NV = error_glVertexAttribL3i64NV;
   tbl.glVertexAttribL4i64NV = error_glVertexAttribL4i64NV;
   tbl.glVertexAttribL1ui64NV = error_glVertexAttribL1ui64NV;
   tbl.glVertexAttribL2ui64NV = error_glVertexAttribL2ui64NV;
   tbl.glVertexAttribL3ui64NV = error_glVertexAttribL3ui64NV;
   tbl.glVertexAttribL4ui64NV = error_glVertexAttribL4ui64NV;
   tbl.glVertexAttribL1i64vNV = error_glVertexAttribL1i64vNV;
   tbl.glVertexAttribL2i64vNV = error_glVertexAttribL2i64vNV;
   tbl.glVertexAttribL3i64vNV = error_glVertexAttribL3i64vNV;
   tbl.glVertexAttribL4i64vNV = error_glVertexAttribL4i64vNV;
   tbl.glVertexAttribL1ui64vNV = error_glVertexAttribL1ui64vNV;
   tbl.glVertexAttribL2ui64vNV = error_glVertexAttribL2ui64vNV;
   tbl.glVertexAttribL3ui64vNV = error_glVertexAttribL3ui64vNV;
   tbl.glVertexAttribL4ui64vNV = error_glVertexAttribL4ui64vNV;
   tbl.glVertexAttribLFormatNV = error_glVertexAttribLFormatNV;
   tbl.glGetVertexAttribLi64vNV = error_glGetVertexAttribLi64vNV;
   tbl.glGetVertexAttribLui64vNV = error_glGetVertexAttribLui64vNV;

// GL_NV_vdpau_interop

   tbl.glVDPAUInitNV = error_glVDPAUInitNV;
   tbl.glVDPAUFiniNV = error_glVDPAUFiniNV;
   tbl.glVDPAURegisterVideoSurfaceNV = error_glVDPAURegisterVideoSurfaceNV;
   tbl.glVDPAURegisterOutputSurfaceNV = error_glVDPAURegisterOutputSurfaceNV;
   tbl.glVDPAUIsSurfaceNV = error_glVDPAUIsSurfaceNV;
   tbl.glVDPAUUnregisterSurfaceNV = error_glVDPAUUnregisterSurfaceNV;
   tbl.glVDPAUGetSurfaceivNV = error_glVDPAUGetSurfaceivNV;
   tbl.glVDPAUSurfaceAccessNV = error_glVDPAUSurfaceAccessNV;
   tbl.glVDPAUMapSurfacesNV = error_glVDPAUMapSurfacesNV;
   tbl.glVDPAUUnmapSurfacesNV = error_glVDPAUUnmapSurfacesNV;

// GL_NV_path_rendering

   tbl.glCopyPathNV = error_glCopyPathNV;
   tbl.glCoverFillPathInstancedNV = error_glCoverFillPathInstancedNV;
   tbl.glCoverFillPathNV = error_glCoverFillPathNV;
   tbl.glCoverStrokePathInstancedNV = error_glCoverStrokePathInstancedNV;
   tbl.glCoverStrokePathNV = error_glCoverStrokePathNV;
   tbl.glDeletePathsNV = error_glDeletePathsNV;
   tbl.glGenPathsNV = error_glGenPathsNV;
   tbl.glGetPathColorGenfvNV = error_glGetPathColorGenfvNV;
   tbl.glGetPathColorGenivNV = error_glGetPathColorGenivNV;
   tbl.glGetPathCommandsNV = error_glGetPathCommandsNV;
   tbl.glGetPathCoordsNV = error_glGetPathCoordsNV;
   tbl.glGetPathDashArrayNV = error_glGetPathDashArrayNV;
   tbl.glGetPathLengthNV = error_glGetPathLengthNV;
   tbl.glGetPathMetricRangeNV = error_glGetPathMetricRangeNV;
   tbl.glGetPathMetricsNV = error_glGetPathMetricsNV;
   tbl.glGetPathParameterfvNV = error_glGetPathParameterfvNV;
   tbl.glGetPathParameterivNV = error_glGetPathParameterivNV;
   tbl.glGetPathSpacingNV = error_glGetPathSpacingNV;
   tbl.glGetPathTexGenfvNV = error_glGetPathTexGenfvNV;
   tbl.glGetPathTexGenivNV = error_glGetPathTexGenivNV;
   tbl.glInterpolatePathsNV = error_glInterpolatePathsNV;
   tbl.glIsPathNV = error_glIsPathNV;
   tbl.glIsPointInFillPathNV = error_glIsPointInFillPathNV;
   tbl.glIsPointInStrokePathNV = error_glIsPointInStrokePathNV;
   tbl.glPathColorGenNV = error_glPathColorGenNV;
   tbl.glPathCommandsNV = error_glPathCommandsNV;
   tbl.glPathCoordsNV = error_glPathCoordsNV;
   tbl.glPathCoverDepthFuncNV = error_glPathCoverDepthFuncNV;
   tbl.glPathDashArrayNV = error_glPathDashArrayNV;
   tbl.glPathFogGenNV = error_glPathFogGenNV;
   tbl.glPathGlyphRangeNV = error_glPathGlyphRangeNV;
   tbl.glPathGlyphsNV = error_glPathGlyphsNV;
   tbl.glPathParameterfNV = error_glPathParameterfNV;
   tbl.glPathParameterfvNV = error_glPathParameterfvNV;
   tbl.glPathParameteriNV = error_glPathParameteriNV;
   tbl.glPathParameterivNV = error_glPathParameterivNV;
   tbl.glPathStencilDepthOffsetNV = error_glPathStencilDepthOffsetNV;
   tbl.glPathStencilFuncNV = error_glPathStencilFuncNV;
   tbl.glPathStringNV = error_glPathStringNV;
   tbl.glPathSubCommandsNV = error_glPathSubCommandsNV;
   tbl.glPathSubCoordsNV = error_glPathSubCoordsNV;
   tbl.glPathTexGenNV = error_glPathTexGenNV;
   tbl.glPointAlongPathNV = error_glPointAlongPathNV;
   tbl.glStencilFillPathInstancedNV = error_glStencilFillPathInstancedNV;
   tbl.glStencilFillPathNV = error_glStencilFillPathNV;
   tbl.glStencilStrokePathInstancedNV = error_glStencilStrokePathInstancedNV;
   tbl.glStencilStrokePathNV = error_glStencilStrokePathNV;
   tbl.glTransformPathNV = error_glTransformPathNV;
   tbl.glWeightPathsNV = error_glWeightPathsNV;

// GL_KTX_buffer_region

   tbl.glBufferRegionEnabledEXT = error_glBufferRegionEnabledEXT;
   tbl.glNewBufferRegionEXT = error_glNewBufferRegionEXT;
   tbl.glDeleteBufferRegionEXT = error_glDeleteBufferRegionEXT;
   tbl.glReadBufferRegionEXT = error_glReadBufferRegionEXT;
   tbl.glDrawBufferRegionEXT = error_glDrawBufferRegionEXT;

// GL_SGIX_fog_texture

   tbl.glTextureFogSGIX = error_glTextureFogSGIX;

// GL_WIN_swap_hint

   tbl.glAddSwapHintRectWIN = error_glAddSwapHintRectWIN;

}
