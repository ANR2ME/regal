/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir src/regal
*/

/*
Copyright (c) 2011 NVIDIA Corporation
Copyright (c) 2011-2012 Cass Everitt
Copyright (c) 2012 Scott Nations
Copyright (c) 2012 Mathias Schott
Copyright (c) 2012 Nigel Stewart
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef REGAL_LOOKUP_H
#define REGAL_LOOKUP_H

#include "RegalPrivate.h"

#include <cstdlib>
#include <cstring>

inline int RegalNameCmp(const void *a, const void *b)
{
  return std::strcmp(*(const char **) a, *(const char **) b);
}

extern const char * const Regal_gl_LookupName[2316];
extern const void *Regal_gl_LookupValue[2316];

template<typename T>
T
Regal_gl_Lookup(const char *name, T def = NULL)
{
  const char **res = (const char **) std::bsearch(&name, Regal_gl_LookupName, 2315, sizeof(const char *), RegalNameCmp);
  return res ? reinterpret_cast<T>(const_cast<void *>(Regal_gl_LookupValue[(size_t) (res - Regal_gl_LookupName)])) : def;
}

#ifdef REGAL_SYS_WGL

extern const char * const Regal_wgl_LookupName[136];
extern const void *Regal_wgl_LookupValue[136];

template<typename T>
T
Regal_wgl_Lookup(const char *name, T def = NULL)
{
  const char **res = (const char **) std::bsearch(&name, Regal_wgl_LookupName, 135, sizeof(const char *), RegalNameCmp);
  return res ? reinterpret_cast<T>(const_cast<void *>(Regal_wgl_LookupValue[(size_t) (res - Regal_wgl_LookupName)])) : def;
}

#endif

#ifdef REGAL_SYS_GLX

extern const char * const Regal_glx_LookupName[107];
extern const void *Regal_glx_LookupValue[107];

template<typename T>
T
Regal_glx_Lookup(const char *name, T def = NULL)
{
  const char **res = (const char **) std::bsearch(&name, Regal_glx_LookupName, 106, sizeof(const char *), RegalNameCmp);
  return res ? reinterpret_cast<T>(const_cast<void *>(Regal_glx_LookupValue[(size_t) (res - Regal_glx_LookupName)])) : def;
}

#endif

#ifdef REGAL_SYS_OSX

extern const char * const Regal_cgl_LookupName[50];
extern const void *Regal_cgl_LookupValue[50];

template<typename T>
T
Regal_cgl_Lookup(const char *name, T def = NULL)
{
  const char **res = (const char **) std::bsearch(&name, Regal_cgl_LookupName, 49, sizeof(const char *), RegalNameCmp);
  return res ? reinterpret_cast<T>(const_cast<void *>(Regal_cgl_LookupValue[(size_t) (res - Regal_cgl_LookupName)])) : def;
}

#endif

#ifdef REGAL_SYS_ANDROID

extern const char * const Regal_egl_LookupName[35];
extern const void *Regal_egl_LookupValue[35];

template<typename T>
T
Regal_egl_Lookup(const char *name, T def = NULL)
{
  const char **res = (const char **) std::bsearch(&name, Regal_egl_LookupName, 34, sizeof(const char *), RegalNameCmp);
  return res ? reinterpret_cast<T>(const_cast<void *>(Regal_egl_LookupValue[(size_t) (res - Regal_egl_LookupName)])) : def;
}

#endif

#endif
