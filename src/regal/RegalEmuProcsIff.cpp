/* NOTE: Do not edit this file, it is generated by a script:
   E.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "RegalIff.h"
#include "RegalEmuProcsIff.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

static void REGAL_CALL emuProcInterceptIff_glActiveTexture(RegalContext *_context, GLenum texture)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowActiveTexture( texture );

  orig.glActiveTexture( _context, texture );

}

static void REGAL_CALL emuProcInterceptIff_glActiveTextureARB(RegalContext *_context, GLenum texture)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowActiveTexture( texture );

  orig.glActiveTextureARB( _context, texture );

}

static void REGAL_CALL emuProcInterceptIff_glAlphaFunc(RegalContext *_context, GLenum func, GLclampf ref)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AlphaFunc( func, ref ); return;

  orig.glAlphaFunc( _context, func, ref );

}

static void REGAL_CALL emuProcInterceptIff_glBegin(RegalContext *_context, GLenum mode)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Begin( _context, mode ); return;

  orig.glBegin( _context, mode );

}

static void REGAL_CALL emuProcInterceptIff_glBindBuffer(RegalContext *_context, GLenum target, GLuint buffer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glBindBuffer( _context, target, buffer );

}

static void REGAL_CALL emuProcInterceptIff_glBindMultiTextureEXT(RegalContext *_context, GLenum texunit, GLenum target, GLuint texture)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowMultiTexBinding( texunit, target, texture );

  orig.glBindMultiTextureEXT( _context, texunit, target, texture );

}

static void REGAL_CALL emuProcInterceptIff_glBindProgramPipeline(RegalContext *_context, GLuint pipeline)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->ShadowBindProgramPipeline( pipeline ) ) {
      return;
  }

  orig.glBindProgramPipeline( _context, pipeline );

}

static void REGAL_CALL emuProcInterceptIff_glBindTexture(RegalContext *_context, GLenum target, GLuint texture)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexBinding( target, texture );

  orig.glBindTexture( _context, target, texture );

}

static void REGAL_CALL emuProcInterceptIff_glBindTextureEXT(RegalContext *_context, GLenum target, GLuint texture)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexBinding( target, texture );

  orig.glBindTextureEXT( _context, target, texture );

}

static void REGAL_CALL emuProcInterceptIff_glBindVertexArray(RegalContext *_context, GLuint array)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->glBindVertexArray( _context, array );

  orig.glBindVertexArray( _context, array );

}

static void REGAL_CALL emuProcInterceptIff_glBindVertexArrayAPPLE(RegalContext *_context, GLuint array)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->glBindVertexArray( _context, array );

  orig.glBindVertexArrayAPPLE( _context, array );

}

static void REGAL_CALL emuProcInterceptIff_glBindVertexArrayOES(RegalContext *_context, GLuint array)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->glBindVertexArray( _context, array );

  orig.glBindVertexArrayOES( _context, array );

}

static void REGAL_CALL emuProcInterceptIff_glClientActiveTexture(RegalContext *_context, GLenum texture)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowClientActiveTexture( texture );

  orig.glClientActiveTexture( _context, texture );

}

static void REGAL_CALL emuProcInterceptIff_glClientActiveTextureARB(RegalContext *_context, GLenum texture)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowClientActiveTexture( texture );

  orig.glClientActiveTextureARB( _context, texture );

}

static void REGAL_CALL emuProcInterceptIff_glClipPlane(RegalContext *_context, GLenum plane, const GLdouble *equation)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->ClipPlane( plane, equation ); return;

  orig.glClipPlane( _context, plane, equation );

}

static void REGAL_CALL emuProcInterceptIff_glColor3b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue ); return;

  orig.glColor3b( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glColor3bv(RegalContext *_context, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor3bv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor3d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue ); return;

  orig.glColor3d( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glColor3dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor3dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor3f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue ); return;

  orig.glColor3f( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glColor3fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor3fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor3i(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue ); return;

  orig.glColor3i( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glColor3iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor3iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor3s(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue ); return;

  orig.glColor3s( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glColor3sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor3sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor3ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue ); return;

  orig.glColor3ub( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glColor3ubv(RegalContext *_context, const GLubyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor3ubv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor3ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue ); return;

  orig.glColor3ui( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glColor3uiv(RegalContext *_context, const GLuint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor3uiv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor3us(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue ); return;

  orig.glColor3us( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glColor3usv(RegalContext *_context, const GLushort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor3usv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor4b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha ); return;

  orig.glColor4b( _context, red, green, blue, alpha );

}

static void REGAL_CALL emuProcInterceptIff_glColor4bv(RegalContext *_context, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor4bv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor4d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha ); return;

  orig.glColor4d( _context, red, green, blue, alpha );

}

static void REGAL_CALL emuProcInterceptIff_glColor4dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor4dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor4f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha ); return;

  orig.glColor4f( _context, red, green, blue, alpha );

}

static void REGAL_CALL emuProcInterceptIff_glColor4fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor4fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor4i(RegalContext *_context, GLint red, GLint green, GLint blue, GLint alpha)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha ); return;

  orig.glColor4i( _context, red, green, blue, alpha );

}

static void REGAL_CALL emuProcInterceptIff_glColor4iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor4iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor4s(RegalContext *_context, GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha ); return;

  orig.glColor4s( _context, red, green, blue, alpha );

}

static void REGAL_CALL emuProcInterceptIff_glColor4sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor4sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor4ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha ); return;

  orig.glColor4ub( _context, red, green, blue, alpha );

}

static void REGAL_CALL emuProcInterceptIff_glColor4ubv(RegalContext *_context, const GLubyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor4ubv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor4ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha ); return;

  orig.glColor4ui( _context, red, green, blue, alpha );

}

static void REGAL_CALL emuProcInterceptIff_glColor4uiv(RegalContext *_context, const GLuint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor4uiv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColor4us(RegalContext *_context, GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha ); return;

  orig.glColor4us( _context, red, green, blue, alpha );

}

static void REGAL_CALL emuProcInterceptIff_glColor4usv(RegalContext *_context, const GLushort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v ); return;

  orig.glColor4usv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glColorMaterial(RegalContext *_context, GLenum face, GLenum mode)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->ColorMaterial( face, mode ); return;

  orig.glColorMaterial( _context, face, mode );

}

static void REGAL_CALL emuProcInterceptIff_glColorPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->ColorPointer( _context, size, type, stride, pointer ); return;

  orig.glColorPointer( _context, size, type, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glColorPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->ColorPointer( _context, size, type, stride, pointer ); return;

  orig.glColorPointerEXT( _context, size, type, stride, count, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glCopyTexImage2D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalformat );

  orig.glCopyTexImage2D( _context, target, level, internalformat, x, y, width, height, border );

}

static GLuint REGAL_CALL emuProcInterceptIff_glCreateShader(RegalContext *_context, GLenum type)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  return _context->iff->CreateShader( _context, type );

  return orig.glCreateShader( _context, type );

}

static GLhandleARB REGAL_CALL emuProcInterceptIff_glCreateShaderObjectARB(RegalContext *_context, GLenum shaderType)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  return _context->iff->CreateShader( _context, shaderType );

  return orig.glCreateShaderObjectARB( _context, shaderType );

}

static void REGAL_CALL emuProcInterceptIff_glDepthRange(RegalContext *_context, GLclampd zNear, GLclampd zFar)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->DepthRange( GLfloat(zNear), GLfloat(zFar) );

  orig.glDepthRange( _context, zNear, zFar );

}

static void REGAL_CALL emuProcInterceptIff_glDisable(RegalContext *_context, GLenum cap)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->ShadowDisable( cap ) ) {
      return;
  }

  orig.glDisable( _context, cap );

}

static void REGAL_CALL emuProcInterceptIff_glDisableClientState(RegalContext *_context, GLenum cap)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->DisableClientState( _context, cap ); return;

  orig.glDisableClientState( _context, cap );

}

static void REGAL_CALL emuProcInterceptIff_glDisableIndexedEXT(RegalContext *_context, GLenum target, GLuint index)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->DisableIndexed( target, index ); return;

  orig.glDisableIndexedEXT( _context, target, index );

}

static void REGAL_CALL emuProcInterceptIff_glDisableVertexAttribArray(RegalContext *_context, GLuint index)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );
  _context->iff->DisableArray( _context, index );

  orig.glDisableVertexAttribArray( _context, index );

}

static void REGAL_CALL emuProcInterceptIff_glDisableVertexAttribArrayARB(RegalContext *_context, GLuint index)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );
  _context->iff->DisableArray( _context, index );

  orig.glDisableVertexAttribArrayARB( _context, index );

}

static void REGAL_CALL emuProcInterceptIff_glDisablei(RegalContext *_context, GLenum cap, GLuint index)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->DisableIndexed( cap, index ); return;

  orig.glDisablei( _context, cap, index );

}

static void REGAL_CALL emuProcInterceptIff_glDrawArrays(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawArrays( _context, mode, first, count );

}

static void REGAL_CALL emuProcInterceptIff_glDrawArraysEXT(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawArraysEXT( _context, mode, first, count );

}

static void REGAL_CALL emuProcInterceptIff_glDrawArraysIndirect(RegalContext *_context, GLenum mode, const GLvoid *indirect)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawArraysIndirect( _context, mode, indirect );

}

static void REGAL_CALL emuProcInterceptIff_glDrawArraysInstanced(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawArraysInstanced( _context, mode, start, count, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glDrawArraysInstancedARB(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawArraysInstancedARB( _context, mode, start, count, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glDrawArraysInstancedEXT(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawArraysInstancedEXT( _context, mode, start, count, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElementArrayAPPLE(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElementArrayAPPLE( _context, mode, first, count );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElementArrayATI(RegalContext *_context, GLenum mode, GLsizei count)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElementArrayATI( _context, mode, count );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElements(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElements( _context, mode, count, type, indices );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElementsBaseVertex(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElementsBaseVertex( _context, mode, count, type, indices, basevertex );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElementsIndirect(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElementsIndirect( _context, mode, type, indirect );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElementsInstanced(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElementsInstanced( _context, mode, count, type, indices, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElementsInstancedARB(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElementsInstancedARB( _context, mode, count, type, indices, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElementsInstancedBaseVertex(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElementsInstancedBaseVertex( _context, mode, count, type, indices, primcount, basevertex );

}

static void REGAL_CALL emuProcInterceptIff_glDrawElementsInstancedEXT(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawElementsInstancedEXT( _context, mode, count, type, indices, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glDrawRangeElementArrayAPPLE(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawRangeElementArrayAPPLE( _context, mode, start, end, first, count );

}

static void REGAL_CALL emuProcInterceptIff_glDrawRangeElementArrayATI(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawRangeElementArrayATI( _context, mode, start, end, count );

}

static void REGAL_CALL emuProcInterceptIff_glDrawRangeElements(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawRangeElements( _context, mode, start, end, count, type, indices );

}

static void REGAL_CALL emuProcInterceptIff_glDrawRangeElementsBaseVertex(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawRangeElementsBaseVertex( _context, mode, start, end, count, type, indices, basevertex );

}

static void REGAL_CALL emuProcInterceptIff_glDrawRangeElementsEXT(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glDrawRangeElementsEXT( _context, mode, start, end, count, type, indices );

}

static void REGAL_CALL emuProcInterceptIff_glEdgeFlagPointer(RegalContext *_context, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->EdgeFlagPointer( _context, stride, pointer ); return;

  orig.glEdgeFlagPointer( _context, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glEdgeFlagPointerEXT(RegalContext *_context, GLsizei stride, GLsizei count, const GLboolean *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->EdgeFlagPointer( _context, stride, pointer ); return;

  orig.glEdgeFlagPointerEXT( _context, stride, count, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glEnable(RegalContext *_context, GLenum cap)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->ShadowEnable( cap ) ) {
      return;
  }

  orig.glEnable( _context, cap );

}

static void REGAL_CALL emuProcInterceptIff_glEnableClientState(RegalContext *_context, GLenum cap)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->EnableClientState( _context, cap ); return;

  orig.glEnableClientState( _context, cap );

}

static void REGAL_CALL emuProcInterceptIff_glEnableIndexedEXT(RegalContext *_context, GLenum target, GLuint index)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->EnableIndexed( target, index ); return;

  orig.glEnableIndexedEXT( _context, target, index );

}

static void REGAL_CALL emuProcInterceptIff_glEnableVertexAttribArray(RegalContext *_context, GLuint index)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );
  _context->iff->EnableArray( _context, index );

  orig.glEnableVertexAttribArray( _context, index );

}

static void REGAL_CALL emuProcInterceptIff_glEnableVertexAttribArrayARB(RegalContext *_context, GLuint index)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );
  _context->iff->EnableArray( _context, index );

  orig.glEnableVertexAttribArrayARB( _context, index );

}

static void REGAL_CALL emuProcInterceptIff_glEnablei(RegalContext *_context, GLenum cap, GLuint index)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->EnableIndexed( cap, index ); return;

  orig.glEnablei( _context, cap, index );

}

static void REGAL_CALL emuProcInterceptIff_glEnd(RegalContext *_context)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->End( _context ); return;

  orig.glEnd( _context );

}

static void REGAL_CALL emuProcInterceptIff_glFogCoordPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->FogCoordPointer( _context, type, stride, pointer ); return;

  orig.glFogCoordPointer( _context, type, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glFogCoordPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->FogCoordPointer( _context, type, stride, pointer ); return;

  orig.glFogCoordPointerEXT( _context, type, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glFogf(RegalContext *_context, GLenum pname, GLfloat param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Fog( pname, param ); return;

  orig.glFogf( _context, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glFogfv(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Fog( pname, params ); return;

  orig.glFogfv( _context, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glFogi(RegalContext *_context, GLenum pname, GLint param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Fog( pname, param ); return;

  orig.glFogi( _context, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glFogiv(RegalContext *_context, GLenum pname, const GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Fog( pname, params ); return;

  orig.glFogiv( _context, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glFrustum(RegalContext *_context, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Frustum( left, right, bottom, top, zNear, zFar ); return;

  orig.glFrustum( _context, left, right, bottom, top, zNear, zFar );

}

static void REGAL_CALL emuProcInterceptIff_glGetBooleanv(RegalContext *_context, GLenum pname, GLboolean *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->glGetBooleanv( _context, pname, params ) ) {
      return;
  }

  orig.glGetBooleanv( _context, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetDoublev(RegalContext *_context, GLenum pname, GLdouble *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->Get( _context, pname, params ) ) {
      return;
  }

  orig.glGetDoublev( _context, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetFloatv(RegalContext *_context, GLenum pname, GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->Get( _context, pname, params ) ) {
      return;
  }

  orig.glGetFloatv( _context, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetIntegerv(RegalContext *_context, GLenum pname, GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->Get( _context, pname, params ) ) {
      return;
  }

  orig.glGetIntegerv( _context, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetMaterialfv(RegalContext *_context, GLenum face, GLenum pname, GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->GetMaterial( face, pname, params ); return;

  orig.glGetMaterialfv( _context, face, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetMaterialiv(RegalContext *_context, GLenum face, GLenum pname, GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->GetMaterial( face, pname, params ); return;

  orig.glGetMaterialiv( _context, face, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetMultiTexGendvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->GetMultiTexGenv( _context, texunit, coord, pname, params ) ) {
      return;
  }

  orig.glGetMultiTexGendvEXT( _context, texunit, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetMultiTexGenfvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->GetMultiTexGenv( _context, texunit, coord, pname, params ) ) {
      return;
  }

  orig.glGetMultiTexGenfvEXT( _context, texunit, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetMultiTexGenivEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->GetMultiTexGenv( _context, texunit, coord, pname, params ) ) {
      return;
  }

  orig.glGetMultiTexGenivEXT( _context, texunit, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetTexEnvfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->GetTexEnv( target, pname, params ) ) {
      return;
  }

  orig.glGetTexEnvfv( _context, target, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetTexEnviv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->GetTexEnv( target, pname, params ) ) {
      return;
  }

  orig.glGetTexEnviv( _context, target, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetTexGendv(RegalContext *_context, GLenum coord, GLenum pname, GLdouble *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->GetTexGenv( _context, coord, pname, params ) ) {
      return;
  }

  orig.glGetTexGendv( _context, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetTexGenfv(RegalContext *_context, GLenum coord, GLenum pname, GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->GetTexGenv( _context, coord, pname, params ) ) {
      return;
  }

  orig.glGetTexGenfv( _context, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetTexGeniv(RegalContext *_context, GLenum coord, GLenum pname, GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RestoreVao( _context );
  if ( _context->iff->GetTexGenv( _context, coord, pname, params ) ) {
      return;
  }

  orig.glGetTexGeniv( _context, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetVertexAttribPointerv(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glGetVertexAttribPointerv( _context, index, pname, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glGetVertexAttribPointervARB(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glGetVertexAttribPointervARB( _context, index, pname, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glGetVertexAttribdv(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glGetVertexAttribdv( _context, index, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetVertexAttribdvARB(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glGetVertexAttribdvARB( _context, index, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetVertexAttribfv(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glGetVertexAttribfv( _context, index, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetVertexAttribfvARB(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glGetVertexAttribfvARB( _context, index, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetVertexAttribiv(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glGetVertexAttribiv( _context, index, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glGetVertexAttribivARB(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glGetVertexAttribivARB( _context, index, pname, params );

}

static GLboolean REGAL_CALL emuProcInterceptIff_glIsEnabled(RegalContext *_context, GLenum cap)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  GLboolean enabled;
  if ( _context->iff->IsEnabled( _context, cap, enabled ) ) {
    return enabled;
  }

  return orig.glIsEnabled( _context, cap );

}

static GLboolean REGAL_CALL emuProcInterceptIff_glIsVertexArray(RegalContext *_context, GLuint array)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  return _context->iff->IsVertexArray( _context, array );

  return orig.glIsVertexArray( _context, array );

}

static void REGAL_CALL emuProcInterceptIff_glLightModelf(RegalContext *_context, GLenum pname, GLfloat param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LightModel( pname, param ); return;

  orig.glLightModelf( _context, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glLightModelfv(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LightModel( pname, params ); return;

  orig.glLightModelfv( _context, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glLightModeli(RegalContext *_context, GLenum pname, GLint param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LightModel( pname, param ); return;

  orig.glLightModeli( _context, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glLightModeliv(RegalContext *_context, GLenum pname, const GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LightModel( pname, params ); return;

  orig.glLightModeliv( _context, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glLightf(RegalContext *_context, GLenum light, GLenum pname, GLfloat param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Light( light, pname, param ); return;

  orig.glLightf( _context, light, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glLightfv(RegalContext *_context, GLenum light, GLenum pname, const GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Light( light, pname, params ); return;

  orig.glLightfv( _context, light, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glLighti(RegalContext *_context, GLenum light, GLenum pname, GLint param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Light( light, pname, param ); return;

  orig.glLighti( _context, light, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glLightiv(RegalContext *_context, GLenum light, GLenum pname, const GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Light( light, pname, params ); return;

  orig.glLightiv( _context, light, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glLinkProgram(RegalContext *_context, GLuint program)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LinkProgram( _context, program ); return;

  orig.glLinkProgram( _context, program );

}

static void REGAL_CALL emuProcInterceptIff_glLinkProgramARB(RegalContext *_context, GLhandleARB programObj)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LinkProgram( _context, programObj ); return;

  orig.glLinkProgramARB( _context, programObj );

}

static void REGAL_CALL emuProcInterceptIff_glLoadIdentity(RegalContext *_context)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LoadIdentity(  ); return;

  orig.glLoadIdentity( _context );

}

static void REGAL_CALL emuProcInterceptIff_glLoadMatrixd(RegalContext *_context, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LoadMatrix( m ); return;

  orig.glLoadMatrixd( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glLoadMatrixf(RegalContext *_context, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LoadMatrix( m ); return;

  orig.glLoadMatrixf( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glLoadTransposeMatrixd(RegalContext *_context, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LoadTransposeMatrix( m ); return;

  orig.glLoadTransposeMatrixd( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glLoadTransposeMatrixdARB(RegalContext *_context, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LoadTransposeMatrix( m ); return;

  orig.glLoadTransposeMatrixdARB( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glLoadTransposeMatrixf(RegalContext *_context, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LoadTransposeMatrix( m ); return;

  orig.glLoadTransposeMatrixf( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glLoadTransposeMatrixfARB(RegalContext *_context, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->LoadTransposeMatrix( m ); return;

  orig.glLoadTransposeMatrixfARB( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glMaterialf(RegalContext *_context, GLenum face, GLenum pname, GLfloat param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Material( face, pname, param ); return;

  orig.glMaterialf( _context, face, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glMaterialfv(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Material( face, pname, params ); return;

  orig.glMaterialfv( _context, face, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glMateriali(RegalContext *_context, GLenum face, GLenum pname, GLint param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Material( face, pname, param ); return;

  orig.glMateriali( _context, face, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glMaterialiv(RegalContext *_context, GLenum face, GLenum pname, const GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Material( face, pname, params ); return;

  orig.glMaterialiv( _context, face, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixFrustumEXT(RegalContext *_context, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixFrustum( mode, left, right, bottom, top, zNear, zFar ); return;

  orig.glMatrixFrustumEXT( _context, mode, left, right, bottom, top, zNear, zFar );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixLoadIdentityEXT(RegalContext *_context, GLenum mode)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixLoadIdentity( mode ); return;

  orig.glMatrixLoadIdentityEXT( _context, mode );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixLoadTransposedEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixLoadTranspose( mode, m ); return;

  orig.glMatrixLoadTransposedEXT( _context, mode, m );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixLoadTransposefEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixLoadTranspose( mode, m ); return;

  orig.glMatrixLoadTransposefEXT( _context, mode, m );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixLoaddEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixLoad( mode, m ); return;

  orig.glMatrixLoaddEXT( _context, mode, m );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixLoadfEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixLoad( mode, m ); return;

  orig.glMatrixLoadfEXT( _context, mode, m );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixMode(RegalContext *_context, GLenum mode)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->ShadowMatrixMode( mode ) ) {
      return;
  }

  orig.glMatrixMode( _context, mode );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixMultTransposedEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixMultTranspose( mode, m ); return;

  orig.glMatrixMultTransposedEXT( _context, mode, m );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixMultTransposefEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixMultTranspose( mode, m ); return;

  orig.glMatrixMultTransposefEXT( _context, mode, m );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixMultdEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixMult( mode, m ); return;

  orig.glMatrixMultdEXT( _context, mode, m );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixMultfEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixMult( mode, m ); return;

  orig.glMatrixMultfEXT( _context, mode, m );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixOrthoEXT(RegalContext *_context, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixOrtho( mode, left, right, bottom, top, zNear, zFar ); return;

  orig.glMatrixOrthoEXT( _context, mode, left, right, bottom, top, zNear, zFar );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixPopEXT(RegalContext *_context, GLenum mode)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixPop( mode ); return;

  orig.glMatrixPopEXT( _context, mode );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixPushEXT(RegalContext *_context, GLenum mode)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixPush( mode ); return;

  orig.glMatrixPushEXT( _context, mode );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixRotatedEXT(RegalContext *_context, GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixRotate( mode, angle, x, y, z ); return;

  orig.glMatrixRotatedEXT( _context, mode, angle, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixRotatefEXT(RegalContext *_context, GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixRotate( mode, angle, x, y, z ); return;

  orig.glMatrixRotatefEXT( _context, mode, angle, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixScaledEXT(RegalContext *_context, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixScale( mode, x, y, z ); return;

  orig.glMatrixScaledEXT( _context, mode, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixScalefEXT(RegalContext *_context, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixScale( mode, x, y, z ); return;

  orig.glMatrixScalefEXT( _context, mode, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixTranslatedEXT(RegalContext *_context, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixTranslate( mode, x, y, z ); return;

  orig.glMatrixTranslatedEXT( _context, mode, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glMatrixTranslatefEXT(RegalContext *_context, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MatrixTranslate( mode, x, y, z ); return;

  orig.glMatrixTranslatefEXT( _context, mode, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glMultMatrixd(RegalContext *_context, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MultMatrix( m ); return;

  orig.glMultMatrixd( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glMultMatrixf(RegalContext *_context, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MultMatrix( m ); return;

  orig.glMultMatrixf( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glMultTransposeMatrixd(RegalContext *_context, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MultTransposeMatrix( m ); return;

  orig.glMultTransposeMatrixd( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glMultTransposeMatrixdARB(RegalContext *_context, const GLdouble *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MultTransposeMatrix( m ); return;

  orig.glMultTransposeMatrixdARB( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glMultTransposeMatrixf(RegalContext *_context, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MultTransposeMatrix( m ); return;

  orig.glMultTransposeMatrixf( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glMultTransposeMatrixfARB(RegalContext *_context, const GLfloat *m)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->MultTransposeMatrix( m ); return;

  orig.glMultTransposeMatrixfARB( _context, m );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawArrays(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawArrays( _context, mode, first, count, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawArraysEXT(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawArraysEXT( _context, mode, first, count, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawArraysIndirect(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawArraysIndirect( _context, mode, indirect, primcount, stride );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawArraysIndirectAMD(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawArraysIndirectAMD( _context, mode, indirect, primcount, stride );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawElementArrayAPPLE(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawElementArrayAPPLE( _context, mode, first, count, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawElements(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawElements( _context, mode, count, type, indices, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawElementsBaseVertex(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawElementsBaseVertex( _context, mode, count, type, indices, primcount, basevertex );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawElementsEXT(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawElementsEXT( _context, mode, count, type, indices, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawElementsIndirect(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawElementsIndirect( _context, mode, type, indirect, primcount, stride );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawElementsIndirectAMD(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawElementsIndirectAMD( _context, mode, type, indirect, primcount, stride );

}

static void REGAL_CALL emuProcInterceptIff_glMultiDrawRangeElementArrayAPPLE(RegalContext *_context, GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->PreDraw( _context );

  orig.glMultiDrawRangeElementArrayAPPLE( _context, mode, start, end, first, count, primcount );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1d(RegalContext *_context, GLenum target, GLdouble s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s ); return;

  orig.glMultiTexCoord1d( _context, target, s );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1dARB(RegalContext *_context, GLenum target, GLdouble s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s ); return;

  orig.glMultiTexCoord1dARB( _context, target, s );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord1dv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord1dvARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1f(RegalContext *_context, GLenum target, GLfloat s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s ); return;

  orig.glMultiTexCoord1f( _context, target, s );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1fARB(RegalContext *_context, GLenum target, GLfloat s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s ); return;

  orig.glMultiTexCoord1fARB( _context, target, s );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord1fv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord1fvARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1i(RegalContext *_context, GLenum target, GLint s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s ); return;

  orig.glMultiTexCoord1i( _context, target, s );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1iARB(RegalContext *_context, GLenum target, GLint s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s ); return;

  orig.glMultiTexCoord1iARB( _context, target, s );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1iv(RegalContext *_context, GLenum target, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord1iv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord1ivARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1s(RegalContext *_context, GLenum target, GLshort s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s ); return;

  orig.glMultiTexCoord1s( _context, target, s );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1sARB(RegalContext *_context, GLenum target, GLshort s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s ); return;

  orig.glMultiTexCoord1sARB( _context, target, s );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord1sv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord1svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord1svARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t ); return;

  orig.glMultiTexCoord2d( _context, target, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t ); return;

  orig.glMultiTexCoord2dARB( _context, target, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord2dv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord2dvARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t ); return;

  orig.glMultiTexCoord2f( _context, target, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t ); return;

  orig.glMultiTexCoord2fARB( _context, target, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord2fv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord2fvARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2i(RegalContext *_context, GLenum target, GLint s, GLint t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t ); return;

  orig.glMultiTexCoord2i( _context, target, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2iARB(RegalContext *_context, GLenum target, GLint s, GLint t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t ); return;

  orig.glMultiTexCoord2iARB( _context, target, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2iv(RegalContext *_context, GLenum target, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord2iv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord2ivARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2s(RegalContext *_context, GLenum target, GLshort s, GLshort t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t ); return;

  orig.glMultiTexCoord2s( _context, target, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t ); return;

  orig.glMultiTexCoord2sARB( _context, target, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord2sv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord2svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord2svARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r ); return;

  orig.glMultiTexCoord3d( _context, target, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r ); return;

  orig.glMultiTexCoord3dARB( _context, target, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord3dv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord3dvARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r ); return;

  orig.glMultiTexCoord3f( _context, target, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r ); return;

  orig.glMultiTexCoord3fARB( _context, target, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord3fv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord3fvARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3i(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r ); return;

  orig.glMultiTexCoord3i( _context, target, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3iARB(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r ); return;

  orig.glMultiTexCoord3iARB( _context, target, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3iv(RegalContext *_context, GLenum target, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord3iv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord3ivARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3s(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r ); return;

  orig.glMultiTexCoord3s( _context, target, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r ); return;

  orig.glMultiTexCoord3sARB( _context, target, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord3sv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord3svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord3svARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q ); return;

  orig.glMultiTexCoord4d( _context, target, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q ); return;

  orig.glMultiTexCoord4dARB( _context, target, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord4dv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord4dvARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q ); return;

  orig.glMultiTexCoord4f( _context, target, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q ); return;

  orig.glMultiTexCoord4fARB( _context, target, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord4fv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord4fvARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4i(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q ); return;

  orig.glMultiTexCoord4i( _context, target, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4iARB(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q ); return;

  orig.glMultiTexCoord4iARB( _context, target, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4iv(RegalContext *_context, GLenum target, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord4iv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord4ivARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4s(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q ); return;

  orig.glMultiTexCoord4s( _context, target, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q ); return;

  orig.glMultiTexCoord4sARB( _context, target, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord4sv( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexCoord4svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v ); return;

  orig.glMultiTexCoord4svARB( _context, target, v );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexEnvfEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexEnv( texunit, target, pname, param ); return;

  orig.glMultiTexEnvfEXT( _context, texunit, target, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexEnvfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexEnv( texunit, target, pname, params ); return;

  orig.glMultiTexEnvfvEXT( _context, texunit, target, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexEnviEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexEnv( texunit, target, pname, param ); return;

  orig.glMultiTexEnviEXT( _context, texunit, target, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexEnvivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexEnv( texunit, target, pname, params ); return;

  orig.glMultiTexEnvivEXT( _context, texunit, target, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowMultiTexInfo( texunit, target, internalformat );

  orig.glMultiTexImage1DEXT( _context, texunit, target, level, internalformat, width, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowMultiTexInfo( texunit, target, internalformat );

  orig.glMultiTexImage2DEXT( _context, texunit, target, level, internalformat, width, height, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glMultiTexImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowMultiTexInfo( texunit, target, internalformat );

  orig.glMultiTexImage3DEXT( _context, texunit, target, level, internalformat, width, height, depth, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3b(RegalContext *_context, GLbyte nx, GLbyte ny, GLbyte nz)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz ); return;

  orig.glNormal3b( _context, nx, ny, nz );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3bv(RegalContext *_context, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v ); return;

  orig.glNormal3bv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3d(RegalContext *_context, GLdouble nx, GLdouble ny, GLdouble nz)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz ); return;

  orig.glNormal3d( _context, nx, ny, nz );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v ); return;

  orig.glNormal3dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3f(RegalContext *_context, GLfloat nx, GLfloat ny, GLfloat nz)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz ); return;

  orig.glNormal3f( _context, nx, ny, nz );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v ); return;

  orig.glNormal3fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3i(RegalContext *_context, GLint nx, GLint ny, GLint nz)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz ); return;

  orig.glNormal3i( _context, nx, ny, nz );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v ); return;

  orig.glNormal3iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3s(RegalContext *_context, GLshort nx, GLshort ny, GLshort nz)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz ); return;

  orig.glNormal3s( _context, nx, ny, nz );

}

static void REGAL_CALL emuProcInterceptIff_glNormal3sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v ); return;

  orig.glNormal3sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glNormalPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->NormalPointer( _context, type, stride, pointer ); return;

  orig.glNormalPointer( _context, type, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glNormalPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->NormalPointer( _context, type, stride, pointer ); return;

  orig.glNormalPointerEXT( _context, type, stride, count, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glOrtho(RegalContext *_context, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Ortho( left, right, bottom, top, zNear, zFar ); return;

  orig.glOrtho( _context, left, right, bottom, top, zNear, zFar );

}

static void REGAL_CALL emuProcInterceptIff_glPopMatrix(RegalContext *_context)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->PopMatrix(  ); return;

  orig.glPopMatrix( _context );

}

static void REGAL_CALL emuProcInterceptIff_glPushMatrix(RegalContext *_context)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->PushMatrix(  ); return;

  orig.glPushMatrix( _context );

}

static void REGAL_CALL emuProcInterceptIff_glRasterPos2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RasterPosition( _context, x, y ); return;

  orig.glRasterPos2d( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glRasterPos2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RasterPosition( _context, x, y ); return;

  orig.glRasterPos2f( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glRasterPos2i(RegalContext *_context, GLint x, GLint y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RasterPosition( _context, x, y ); return;

  orig.glRasterPos2i( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glRasterPos2s(RegalContext *_context, GLshort x, GLshort y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RasterPosition( _context, x, y ); return;

  orig.glRasterPos2s( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glRasterPos3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RasterPosition( _context, x, y, z ); return;

  orig.glRasterPos3d( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glRasterPos3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RasterPosition( _context, x, y, z ); return;

  orig.glRasterPos3f( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glRasterPos3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RasterPosition( _context, x, y, z ); return;

  orig.glRasterPos3i( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glRasterPos3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->RasterPosition( _context, x, y, z ); return;

  orig.glRasterPos3s( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glRotated(RegalContext *_context, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Rotate( angle, x, y, z ); return;

  orig.glRotated( _context, angle, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glRotatef(RegalContext *_context, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Rotate( angle, x, y, z ); return;

  orig.glRotatef( _context, angle, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glScaled(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Scale( x, y, z ); return;

  orig.glScaled( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glScalef(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Scale( x, y, z ); return;

  orig.glScalef( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3b( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3bEXT(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3bEXT( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3bv(RegalContext *_context, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3bv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3bvEXT(RegalContext *_context, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3bvEXT( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3d( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3dEXT(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3dEXT( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3dvEXT(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3dvEXT( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3f( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3fEXT(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3fEXT( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3fvEXT(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3fvEXT( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3i(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3i( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3iEXT(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3iEXT( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3ivEXT(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3ivEXT( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3s(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3s( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3sEXT(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3sEXT( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3svEXT(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3svEXT( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3ub( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3ubEXT(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3ubEXT( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3ubv(RegalContext *_context, const GLubyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3ubv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3ubvEXT(RegalContext *_context, const GLubyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3ubvEXT( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3ui( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3uiEXT(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3uiEXT( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3uiv(RegalContext *_context, const GLuint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3uiv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3uivEXT(RegalContext *_context, const GLuint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3uivEXT( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3us(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3us( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3usEXT(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue ); return;

  orig.glSecondaryColor3usEXT( _context, red, green, blue );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3usv(RegalContext *_context, const GLushort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3usv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColor3usvEXT(RegalContext *_context, const GLushort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v ); return;

  orig.glSecondaryColor3usvEXT( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColorPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->SecondaryColorPointer( _context, size, type, stride, pointer ); return;

  orig.glSecondaryColorPointer( _context, size, type, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glSecondaryColorPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->SecondaryColorPointer( _context, size, type, stride, pointer ); return;

  orig.glSecondaryColorPointerEXT( _context, size, type, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glShadeModel(RegalContext *_context, GLenum mode)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadeModel( mode );

  orig.glShadeModel( _context, mode );

}

static void REGAL_CALL emuProcInterceptIff_glShaderSource(RegalContext *_context, GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->ShaderSource( _context, shader, count, string, length ); return;

  orig.glShaderSource( _context, shader, count, string, length );

}

static void REGAL_CALL emuProcInterceptIff_glShaderSourceARB(RegalContext *_context, GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->ShaderSource( _context, shaderObj, count, string, length ); return;

  orig.glShaderSourceARB( _context, shaderObj, count, string, length );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord1d(RegalContext *_context, GLdouble s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s ); return;

  orig.glTexCoord1d( _context, s );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord1dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord1dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord1f(RegalContext *_context, GLfloat s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s ); return;

  orig.glTexCoord1f( _context, s );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord1fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord1fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord1i(RegalContext *_context, GLint s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s ); return;

  orig.glTexCoord1i( _context, s );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord1iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord1iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord1s(RegalContext *_context, GLshort s)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s ); return;

  orig.glTexCoord1s( _context, s );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord1sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord1sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord2d(RegalContext *_context, GLdouble s, GLdouble t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t ); return;

  orig.glTexCoord2d( _context, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord2dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord2dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord2f(RegalContext *_context, GLfloat s, GLfloat t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t ); return;

  orig.glTexCoord2f( _context, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord2fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord2fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord2i(RegalContext *_context, GLint s, GLint t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t ); return;

  orig.glTexCoord2i( _context, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord2iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord2iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord2s(RegalContext *_context, GLshort s, GLshort t)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t ); return;

  orig.glTexCoord2s( _context, s, t );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord2sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord2sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord3d(RegalContext *_context, GLdouble s, GLdouble t, GLdouble r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r ); return;

  orig.glTexCoord3d( _context, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord3dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord3dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord3f(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r ); return;

  orig.glTexCoord3f( _context, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord3fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord3fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord3i(RegalContext *_context, GLint s, GLint t, GLint r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r ); return;

  orig.glTexCoord3i( _context, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord3iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord3iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord3s(RegalContext *_context, GLshort s, GLshort t, GLshort r)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r ); return;

  orig.glTexCoord3s( _context, s, t, r );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord3sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord3sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord4d(RegalContext *_context, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r, q ); return;

  orig.glTexCoord4d( _context, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord4dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord4dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord4f(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r, q ); return;

  orig.glTexCoord4f( _context, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord4fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord4fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord4i(RegalContext *_context, GLint s, GLint t, GLint r, GLint q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r, q ); return;

  orig.glTexCoord4i( _context, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord4iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord4iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord4s(RegalContext *_context, GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r, q ); return;

  orig.glTexCoord4s( _context, s, t, r, q );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoord4sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v ); return;

  orig.glTexCoord4sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoordPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexCoordPointer( _context, size, type, stride, pointer ); return;

  orig.glTexCoordPointer( _context, size, type, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glTexCoordPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexCoordPointer( _context, size, type, stride, pointer ); return;

  orig.glTexCoordPointerEXT( _context, size, type, stride, count, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glTexEnvf(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexEnv( target, pname, param ); return;

  orig.glTexEnvf( _context, target, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glTexEnvfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexEnv( target, pname, params ); return;

  orig.glTexEnvfv( _context, target, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glTexEnvi(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexEnv( target, pname, param ); return;

  orig.glTexEnvi( _context, target, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glTexEnviv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->TexEnv( target, pname, params ); return;

  orig.glTexEnviv( _context, target, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glTexGend(RegalContext *_context, GLenum coord, GLenum pname, GLdouble param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if ( _context->iff->TexGen( coord, pname, param ) ) {
      return;
  }

  orig.glTexGend( _context, coord, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glTexGendv(RegalContext *_context, GLenum coord, GLenum pname, const GLdouble *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if ( _context->iff->TexGen( coord, pname, params ) ) {
      return;
  }

  orig.glTexGendv( _context, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glTexGenf(RegalContext *_context, GLenum coord, GLenum pname, GLfloat param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if ( _context->iff->TexGen( coord, pname, param ) ) {
      return;
  }

  orig.glTexGenf( _context, coord, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glTexGenfv(RegalContext *_context, GLenum coord, GLenum pname, const GLfloat *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if ( _context->iff->TexGen( coord, pname, params ) ) {
      return;
  }

  orig.glTexGenfv( _context, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glTexGeni(RegalContext *_context, GLenum coord, GLenum pname, GLint param)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if ( _context->iff->TexGen( coord, pname, param ) ) {
      return;
  }

  orig.glTexGeni( _context, coord, pname, param );

}

static void REGAL_CALL emuProcInterceptIff_glTexGeniv(RegalContext *_context, GLenum coord, GLenum pname, const GLint *params)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if ( _context->iff->TexGen( coord, pname, params ) ) {
      return;
  }

  orig.glTexGeniv( _context, coord, pname, params );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage1D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalformat );

  orig.glTexImage1D( _context, target, level, internalformat, width, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage2D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalformat );

  orig.glTexImage2D( _context, target, level, internalformat, width, height, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage2DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalformat );

  orig.glTexImage2DMultisample( _context, target, samples, internalformat, width, height, fixedsamplelocations );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage2DMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalFormat );

  orig.glTexImage2DMultisampleCoverageNV( _context, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage3D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalformat );

  orig.glTexImage3D( _context, target, level, internalformat, width, height, depth, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalformat );

  orig.glTexImage3DEXT( _context, target, level, internalformat, width, height, depth, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage3DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalformat );

  orig.glTexImage3DMultisample( _context, target, samples, internalformat, width, height, depth, fixedsamplelocations );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage3DMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalFormat );

  orig.glTexImage3DMultisampleCoverageNV( _context, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations );

}

static void REGAL_CALL emuProcInterceptIff_glTexImage4DSGIS(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTexInfo( target, internalformat );

  orig.glTexImage4DSGIS( _context, target, level, internalformat, width, height, depth, size4d, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glTextureImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTextureInfo( texture, target, internalformat );

  orig.glTextureImage1DEXT( _context, texture, target, level, internalformat, width, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glTextureImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTextureInfo( texture, target, internalformat );

  orig.glTextureImage2DEXT( _context, texture, target, level, internalformat, width, height, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glTextureImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->ShadowTextureInfo( texture, target, internalformat );

  orig.glTextureImage3DEXT( _context, texture, target, level, internalformat, width, height, depth, border, format, type, pixels );

}

static void REGAL_CALL emuProcInterceptIff_glTranslated(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Translate( x, y, z ); return;

  orig.glTranslated( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glTranslatef(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Translate( x, y, z ); return;

  orig.glTranslatef( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1d(RegalContext *_context, GLint location, GLdouble x)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, 1, x );
    return;
  }

  orig.glUniform1d( _context, location, x );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, count, value );
    return;
  }

  orig.glUniform1dv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1f(RegalContext *_context, GLint location, GLfloat v0)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, 1, v0 );
    return;
  }

  orig.glUniform1f( _context, location, v0 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1fARB(RegalContext *_context, GLint location, GLfloat v0)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, 1, v0 );
    return;
  }

  orig.glUniform1fARB( _context, location, v0 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, count, value );
    return;
  }

  orig.glUniform1fv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, count, value );
    return;
  }

  orig.glUniform1fvARB( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1i(RegalContext *_context, GLint location, GLint v0)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, 1, v0 );
    return;
  }

  orig.glUniform1i( _context, location, v0 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1iARB(RegalContext *_context, GLint location, GLint v0)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, 1, v0 );
    return;
  }

  orig.glUniform1iARB( _context, location, v0 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, count, value );
    return;
  }

  orig.glUniform1iv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, count, value );
    return;
  }

  orig.glUniform1ivARB( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1ui(RegalContext *_context, GLint location, GLuint v0)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, 1, v0 );
    return;
  }

  orig.glUniform1ui( _context, location, v0 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform1uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 1, location, count, value );
    return;
  }

  orig.glUniform1uiv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2d(RegalContext *_context, GLint location, GLdouble x, GLdouble y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, 1, x, y );
    return;
  }

  orig.glUniform2d( _context, location, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, count, value );
    return;
  }

  orig.glUniform2dv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, 1, v0, v1 );
    return;
  }

  orig.glUniform2f( _context, location, v0, v1 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, 1, v0, v1 );
    return;
  }

  orig.glUniform2fARB( _context, location, v0, v1 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, count, value );
    return;
  }

  orig.glUniform2fv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, count, value );
    return;
  }

  orig.glUniform2fvARB( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2i(RegalContext *_context, GLint location, GLint v0, GLint v1)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, 1, v0, v1 );
    return;
  }

  orig.glUniform2i( _context, location, v0, v1 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2iARB(RegalContext *_context, GLint location, GLint v0, GLint v1)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, 1, v0, v1 );
    return;
  }

  orig.glUniform2iARB( _context, location, v0, v1 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, count, value );
    return;
  }

  orig.glUniform2iv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, count, value );
    return;
  }

  orig.glUniform2ivARB( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, 1, v0, v1 );
    return;
  }

  orig.glUniform2ui( _context, location, v0, v1 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform2uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 2, location, count, value );
    return;
  }

  orig.glUniform2uiv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3d(RegalContext *_context, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, 1, x, y, z );
    return;
  }

  orig.glUniform3d( _context, location, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, count, value );
    return;
  }

  orig.glUniform3dv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, 1, v0, v1, v2 );
    return;
  }

  orig.glUniform3f( _context, location, v0, v1, v2 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, 1, v0, v1, v2 );
    return;
  }

  orig.glUniform3fARB( _context, location, v0, v1, v2 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, count, value );
    return;
  }

  orig.glUniform3fv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, count, value );
    return;
  }

  orig.glUniform3fvARB( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3i(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, 1, v0, v1, v2 );
    return;
  }

  orig.glUniform3i( _context, location, v0, v1, v2 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3iARB(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, 1, v0, v1, v2 );
    return;
  }

  orig.glUniform3iARB( _context, location, v0, v1, v2 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, count, value );
    return;
  }

  orig.glUniform3iv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, count, value );
    return;
  }

  orig.glUniform3ivARB( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, 1, v0, v1, v2 );
    return;
  }

  orig.glUniform3ui( _context, location, v0, v1, v2 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform3uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 3, location, count, value );
    return;
  }

  orig.glUniform3uiv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4d(RegalContext *_context, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, 1, x, y, z, w );
    return;
  }

  orig.glUniform4d( _context, location, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, count, value );
    return;
  }

  orig.glUniform4dv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, 1, v0, v1, v2, v3 );
    return;
  }

  orig.glUniform4f( _context, location, v0, v1, v2, v3 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, 1, v0, v1, v2, v3 );
    return;
  }

  orig.glUniform4fARB( _context, location, v0, v1, v2, v3 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, count, value );
    return;
  }

  orig.glUniform4fv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, count, value );
    return;
  }

  orig.glUniform4fvARB( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4i(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, 1, v0, v1, v2, v3 );
    return;
  }

  orig.glUniform4i( _context, location, v0, v1, v2, v3 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4iARB(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, 1, v0, v1, v2, v3 );
    return;
  }

  orig.glUniform4iARB( _context, location, v0, v1, v2, v3 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, count, value );
    return;
  }

  orig.glUniform4iv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, count, value );
    return;
  }

  orig.glUniform4ivARB( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, 1, v0, v1, v2, v3 );
    return;
  }

  orig.glUniform4ui( _context, location, v0, v1, v2, v3 );

}

static void REGAL_CALL emuProcInterceptIff_glUniform4uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->Uniform( _context, 4, location, count, value );
    return;
  }

  orig.glUniform4uiv( _context, location, count, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 2, 2, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix2dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 2, 2, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix2fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix2fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 2, 2, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix2fvARB( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix2x3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 2, 3, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix2x3dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix2x3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 2, 3, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix2x3fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix2x4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 2, 4, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix2x4dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix2x4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 2, 4, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix2x4fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 3, 3, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix3dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 3, 3, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix3fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix3fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 3, 3, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix3fvARB( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix3x2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 3, 2, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix3x2dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix3x2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 3, 2, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix3x2fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix3x4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 3, 4, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix3x4dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix3x4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 3, 4, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix3x4fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 4, 4, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix4dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 4, 4, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix4fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix4fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 4, 4, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix4fvARB( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix4x2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 4, 2, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix4x2dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix4x2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 4, 2, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix4x2fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix4x3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 4, 3, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix4x3dv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUniformMatrix4x3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->currinst ) {
    _context->iff->UniformMatrix( _context, 4, 3, location, count, transpose, value );
    return;
  }

  orig.glUniformMatrix4x3fv( _context, location, count, transpose, value );

}

static void REGAL_CALL emuProcInterceptIff_glUseProgram(RegalContext *_context, GLuint program)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->ShadowUseProgram( program ) ) {
      return;
  }

  orig.glUseProgram( _context, program );

}

static void REGAL_CALL emuProcInterceptIff_glUseProgramObjectARB(RegalContext *_context, GLhandleARB programObj)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  if( _context->iff->ShadowUseProgram( programObj ) ) {
      return;
  }

  orig.glUseProgramObjectARB( _context, programObj );

}

static void REGAL_CALL emuProcInterceptIff_glVertex2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y ); return;

  orig.glVertex2d( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertex2dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex2dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y ); return;

  orig.glVertex2f( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertex2fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex2fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex2i(RegalContext *_context, GLint x, GLint y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y ); return;

  orig.glVertex2i( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertex2iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex2iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex2s(RegalContext *_context, GLshort x, GLshort y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y ); return;

  orig.glVertex2s( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertex2sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex2sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z ); return;

  orig.glVertex3d( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertex3dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex3dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z ); return;

  orig.glVertex3f( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertex3fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex3fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z ); return;

  orig.glVertex3i( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertex3iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex3iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z ); return;

  orig.glVertex3s( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertex3sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex3sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex4d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z, w ); return;

  orig.glVertex4d( _context, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertex4dv(RegalContext *_context, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex4dv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex4f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z, w ); return;

  orig.glVertex4f( _context, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertex4fv(RegalContext *_context, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex4fv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex4i(RegalContext *_context, GLint x, GLint y, GLint z, GLint w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z, w ); return;

  orig.glVertex4i( _context, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertex4iv(RegalContext *_context, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex4iv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertex4s(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z, w ); return;

  orig.glVertex4s( _context, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertex4sv(RegalContext *_context, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v ); return;

  orig.glVertex4sv( _context, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1d(RegalContext *_context, GLuint index, GLdouble x)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, x );

  orig.glVertexAttrib1d( _context, index, x );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1dARB(RegalContext *_context, GLuint index, GLdouble x)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, x );

  orig.glVertexAttrib1dARB( _context, index, x );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, v );

  orig.glVertexAttrib1dv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, v );

  orig.glVertexAttrib1dvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1f(RegalContext *_context, GLuint index, GLfloat x)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, x );

  orig.glVertexAttrib1f( _context, index, x );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1fARB(RegalContext *_context, GLuint index, GLfloat x)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, x );

  orig.glVertexAttrib1fARB( _context, index, x );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, v );

  orig.glVertexAttrib1fv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, v );

  orig.glVertexAttrib1fvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1s(RegalContext *_context, GLuint index, GLshort x)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, x );

  orig.glVertexAttrib1s( _context, index, x );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1sARB(RegalContext *_context, GLuint index, GLshort x)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, x );

  orig.glVertexAttrib1sARB( _context, index, x );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, v );

  orig.glVertexAttrib1sv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib1svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<1>( _context, index, v );

  orig.glVertexAttrib1svARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, x, y );

  orig.glVertexAttrib2d( _context, index, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, x, y );

  orig.glVertexAttrib2dARB( _context, index, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, v );

  orig.glVertexAttrib2dv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, v );

  orig.glVertexAttrib2dvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, x, y );

  orig.glVertexAttrib2f( _context, index, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, x, y );

  orig.glVertexAttrib2fARB( _context, index, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, v );

  orig.glVertexAttrib2fv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, v );

  orig.glVertexAttrib2fvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2s(RegalContext *_context, GLuint index, GLshort x, GLshort y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, x, y );

  orig.glVertexAttrib2s( _context, index, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, x, y );

  orig.glVertexAttrib2sARB( _context, index, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, v );

  orig.glVertexAttrib2sv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib2svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<2>( _context, index, v );

  orig.glVertexAttrib2svARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, x, y, z );

  orig.glVertexAttrib3d( _context, index, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, x, y, z );

  orig.glVertexAttrib3dARB( _context, index, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, v );

  orig.glVertexAttrib3dv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, v );

  orig.glVertexAttrib3dvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, x, y, z );

  orig.glVertexAttrib3f( _context, index, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, x, y, z );

  orig.glVertexAttrib3fARB( _context, index, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, v );

  orig.glVertexAttrib3fv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, v );

  orig.glVertexAttrib3fvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3s(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, x, y, z );

  orig.glVertexAttrib3s( _context, index, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, x, y, z );

  orig.glVertexAttrib3sARB( _context, index, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, v );

  orig.glVertexAttrib3sv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib3svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<3>( _context, index, v );

  orig.glVertexAttrib3svARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4Nbv(RegalContext *_context, GLuint index, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4Nbv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4NbvARB(RegalContext *_context, GLuint index, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4NbvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4Niv(RegalContext *_context, GLuint index, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4Niv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4NivARB(RegalContext *_context, GLuint index, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4NivARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4Nsv(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4Nsv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4NsvARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4NsvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4Nub(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, x, y, z, w );

  orig.glVertexAttrib4Nub( _context, index, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4NubARB(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, x, y, z, w );

  orig.glVertexAttrib4NubARB( _context, index, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4Nubv(RegalContext *_context, GLuint index, const GLubyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4Nubv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4NubvARB(RegalContext *_context, GLuint index, const GLubyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4NubvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4Nusv(RegalContext *_context, GLuint index, const GLushort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4Nusv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4NusvARB(RegalContext *_context, GLuint index, const GLushort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->AttrN<4>( _context, index, v );

  orig.glVertexAttrib4NusvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4bv(RegalContext *_context, GLuint index, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4bv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4bvARB(RegalContext *_context, GLuint index, const GLbyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4bvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, x, y, z, w );

  orig.glVertexAttrib4d( _context, index, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, x, y, z, w );

  orig.glVertexAttrib4dARB( _context, index, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4dv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4dvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, x, y, z, w );

  orig.glVertexAttrib4f( _context, index, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, x, y, z, w );

  orig.glVertexAttrib4fARB( _context, index, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4fv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4fvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4iv(RegalContext *_context, GLuint index, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4iv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4ivARB(RegalContext *_context, GLuint index, const GLint *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4ivARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4s(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, x, y, z, w );

  orig.glVertexAttrib4s( _context, index, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, x, y, z, w );

  orig.glVertexAttrib4sARB( _context, index, x, y, z, w );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4sv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4svARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4ubv(RegalContext *_context, GLuint index, const GLubyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4ubv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4ubvARB(RegalContext *_context, GLuint index, const GLubyte *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4ubvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4usv(RegalContext *_context, GLuint index, const GLushort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4usv( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttrib4usvARB(RegalContext *_context, GLuint index, const GLushort *v)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Attr<4>( _context, index, v );

  orig.glVertexAttrib4usvARB( _context, index, v );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttribPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glVertexAttribPointer( _context, index, size, type, normalized, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glVertexAttribPointerARB(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->RestoreVao( _context );

  orig.glVertexAttribPointerARB( _context, index, size, type, normalized, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glVertexPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->VertexPointer( _context, size, type, stride, pointer ); return;

  orig.glVertexPointer( _context, size, type, stride, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glVertexPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->VertexPointer( _context, size, type, stride, pointer ); return;

  orig.glVertexPointerEXT( _context, size, type, stride, count, pointer );

}

static void REGAL_CALL emuProcInterceptIff_glViewport(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // prefix
  _context->iff->Viewport( x, y, width, height );

  orig.glViewport( _context, x, y, width, height );

}

static void REGAL_CALL emuProcInterceptIff_glWindowPos2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->WindowPosition( _context, x, y ); return;

  orig.glWindowPos2d( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glWindowPos2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->WindowPosition( _context, x, y ); return;

  orig.glWindowPos2f( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glWindowPos2i(RegalContext *_context, GLint x, GLint y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->WindowPosition( _context, x, y ); return;

  orig.glWindowPos2i( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glWindowPos2s(RegalContext *_context, GLshort x, GLshort y)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->WindowPosition( _context, x, y ); return;

  orig.glWindowPos2s( _context, x, y );

}

static void REGAL_CALL emuProcInterceptIff_glWindowPos3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->WindowPosition( _context, x, y, z ); return;

  orig.glWindowPos3d( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glWindowPos3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->WindowPosition( _context, x, y, z ); return;

  orig.glWindowPos3f( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glWindowPos3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->WindowPosition( _context, x, y, z ); return;

  orig.glWindowPos3i( _context, x, y, z );

}

static void REGAL_CALL emuProcInterceptIff_glWindowPos3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  RegalAssert(_context);
  EmuProcsOriginateIff & orig = _context->iff->orig;

  // impl
  _context->iff->WindowPosition( _context, x, y, z ); return;

  orig.glWindowPos3s( _context, x, y, z );

}

void EmuProcsInterceptIff( Dispatch::GL & dt ) {
  dt.glActiveTexture                   = emuProcInterceptIff_glActiveTexture;
  dt.glActiveTextureARB                = emuProcInterceptIff_glActiveTextureARB;
  dt.glAlphaFunc                       = emuProcInterceptIff_glAlphaFunc;
  dt.glBegin                           = emuProcInterceptIff_glBegin;
  dt.glBindBuffer                      = emuProcInterceptIff_glBindBuffer;
  dt.glBindMultiTextureEXT             = emuProcInterceptIff_glBindMultiTextureEXT;
  dt.glBindProgramPipeline             = emuProcInterceptIff_glBindProgramPipeline;
  dt.glBindTexture                     = emuProcInterceptIff_glBindTexture;
  dt.glBindTextureEXT                  = emuProcInterceptIff_glBindTextureEXT;
  dt.glBindVertexArray                 = emuProcInterceptIff_glBindVertexArray;
  dt.glBindVertexArrayAPPLE            = emuProcInterceptIff_glBindVertexArrayAPPLE;
  dt.glBindVertexArrayOES              = emuProcInterceptIff_glBindVertexArrayOES;
  dt.glClientActiveTexture             = emuProcInterceptIff_glClientActiveTexture;
  dt.glClientActiveTextureARB          = emuProcInterceptIff_glClientActiveTextureARB;
  dt.glClipPlane                       = emuProcInterceptIff_glClipPlane;
  dt.glColor3b                         = emuProcInterceptIff_glColor3b;
  dt.glColor3bv                        = emuProcInterceptIff_glColor3bv;
  dt.glColor3d                         = emuProcInterceptIff_glColor3d;
  dt.glColor3dv                        = emuProcInterceptIff_glColor3dv;
  dt.glColor3f                         = emuProcInterceptIff_glColor3f;
  dt.glColor3fv                        = emuProcInterceptIff_glColor3fv;
  dt.glColor3i                         = emuProcInterceptIff_glColor3i;
  dt.glColor3iv                        = emuProcInterceptIff_glColor3iv;
  dt.glColor3s                         = emuProcInterceptIff_glColor3s;
  dt.glColor3sv                        = emuProcInterceptIff_glColor3sv;
  dt.glColor3ub                        = emuProcInterceptIff_glColor3ub;
  dt.glColor3ubv                       = emuProcInterceptIff_glColor3ubv;
  dt.glColor3ui                        = emuProcInterceptIff_glColor3ui;
  dt.glColor3uiv                       = emuProcInterceptIff_glColor3uiv;
  dt.glColor3us                        = emuProcInterceptIff_glColor3us;
  dt.glColor3usv                       = emuProcInterceptIff_glColor3usv;
  dt.glColor4b                         = emuProcInterceptIff_glColor4b;
  dt.glColor4bv                        = emuProcInterceptIff_glColor4bv;
  dt.glColor4d                         = emuProcInterceptIff_glColor4d;
  dt.glColor4dv                        = emuProcInterceptIff_glColor4dv;
  dt.glColor4f                         = emuProcInterceptIff_glColor4f;
  dt.glColor4fv                        = emuProcInterceptIff_glColor4fv;
  dt.glColor4i                         = emuProcInterceptIff_glColor4i;
  dt.glColor4iv                        = emuProcInterceptIff_glColor4iv;
  dt.glColor4s                         = emuProcInterceptIff_glColor4s;
  dt.glColor4sv                        = emuProcInterceptIff_glColor4sv;
  dt.glColor4ub                        = emuProcInterceptIff_glColor4ub;
  dt.glColor4ubv                       = emuProcInterceptIff_glColor4ubv;
  dt.glColor4ui                        = emuProcInterceptIff_glColor4ui;
  dt.glColor4uiv                       = emuProcInterceptIff_glColor4uiv;
  dt.glColor4us                        = emuProcInterceptIff_glColor4us;
  dt.glColor4usv                       = emuProcInterceptIff_glColor4usv;
  dt.glColorMaterial                   = emuProcInterceptIff_glColorMaterial;
  dt.glColorPointer                    = emuProcInterceptIff_glColorPointer;
  dt.glColorPointerEXT                 = emuProcInterceptIff_glColorPointerEXT;
  dt.glCopyTexImage2D                  = emuProcInterceptIff_glCopyTexImage2D;
  dt.glCreateShader                    = emuProcInterceptIff_glCreateShader;
  dt.glCreateShaderObjectARB           = emuProcInterceptIff_glCreateShaderObjectARB;
  dt.glDepthRange                      = emuProcInterceptIff_glDepthRange;
  dt.glDisable                         = emuProcInterceptIff_glDisable;
  dt.glDisableClientState              = emuProcInterceptIff_glDisableClientState;
  dt.glDisableIndexedEXT               = emuProcInterceptIff_glDisableIndexedEXT;
  dt.glDisableVertexAttribArray        = emuProcInterceptIff_glDisableVertexAttribArray;
  dt.glDisableVertexAttribArrayARB     = emuProcInterceptIff_glDisableVertexAttribArrayARB;
  dt.glDisablei                        = emuProcInterceptIff_glDisablei;
  dt.glDrawArrays                      = emuProcInterceptIff_glDrawArrays;
  dt.glDrawArraysEXT                   = emuProcInterceptIff_glDrawArraysEXT;
  dt.glDrawArraysIndirect              = emuProcInterceptIff_glDrawArraysIndirect;
  dt.glDrawArraysInstanced             = emuProcInterceptIff_glDrawArraysInstanced;
  dt.glDrawArraysInstancedARB          = emuProcInterceptIff_glDrawArraysInstancedARB;
  dt.glDrawArraysInstancedEXT          = emuProcInterceptIff_glDrawArraysInstancedEXT;
  dt.glDrawElementArrayAPPLE           = emuProcInterceptIff_glDrawElementArrayAPPLE;
  dt.glDrawElementArrayATI             = emuProcInterceptIff_glDrawElementArrayATI;
  dt.glDrawElements                    = emuProcInterceptIff_glDrawElements;
  dt.glDrawElementsBaseVertex          = emuProcInterceptIff_glDrawElementsBaseVertex;
  dt.glDrawElementsIndirect            = emuProcInterceptIff_glDrawElementsIndirect;
  dt.glDrawElementsInstanced           = emuProcInterceptIff_glDrawElementsInstanced;
  dt.glDrawElementsInstancedARB        = emuProcInterceptIff_glDrawElementsInstancedARB;
  dt.glDrawElementsInstancedBaseVertex = emuProcInterceptIff_glDrawElementsInstancedBaseVertex;
  dt.glDrawElementsInstancedEXT        = emuProcInterceptIff_glDrawElementsInstancedEXT;
  dt.glDrawRangeElementArrayAPPLE      = emuProcInterceptIff_glDrawRangeElementArrayAPPLE;
  dt.glDrawRangeElementArrayATI        = emuProcInterceptIff_glDrawRangeElementArrayATI;
  dt.glDrawRangeElements               = emuProcInterceptIff_glDrawRangeElements;
  dt.glDrawRangeElementsBaseVertex     = emuProcInterceptIff_glDrawRangeElementsBaseVertex;
  dt.glDrawRangeElementsEXT            = emuProcInterceptIff_glDrawRangeElementsEXT;
  dt.glEdgeFlagPointer                 = emuProcInterceptIff_glEdgeFlagPointer;
  dt.glEdgeFlagPointerEXT              = emuProcInterceptIff_glEdgeFlagPointerEXT;
  dt.glEnable                          = emuProcInterceptIff_glEnable;
  dt.glEnableClientState               = emuProcInterceptIff_glEnableClientState;
  dt.glEnableIndexedEXT                = emuProcInterceptIff_glEnableIndexedEXT;
  dt.glEnableVertexAttribArray         = emuProcInterceptIff_glEnableVertexAttribArray;
  dt.glEnableVertexAttribArrayARB      = emuProcInterceptIff_glEnableVertexAttribArrayARB;
  dt.glEnablei                         = emuProcInterceptIff_glEnablei;
  dt.glEnd                             = emuProcInterceptIff_glEnd;
  dt.glFogCoordPointer                 = emuProcInterceptIff_glFogCoordPointer;
  dt.glFogCoordPointerEXT              = emuProcInterceptIff_glFogCoordPointerEXT;
  dt.glFogf                            = emuProcInterceptIff_glFogf;
  dt.glFogfv                           = emuProcInterceptIff_glFogfv;
  dt.glFogi                            = emuProcInterceptIff_glFogi;
  dt.glFogiv                           = emuProcInterceptIff_glFogiv;
  dt.glFrustum                         = emuProcInterceptIff_glFrustum;
  dt.glGetBooleanv                     = emuProcInterceptIff_glGetBooleanv;
  dt.glGetDoublev                      = emuProcInterceptIff_glGetDoublev;
  dt.glGetFloatv                       = emuProcInterceptIff_glGetFloatv;
  dt.glGetIntegerv                     = emuProcInterceptIff_glGetIntegerv;
  dt.glGetMaterialfv                   = emuProcInterceptIff_glGetMaterialfv;
  dt.glGetMaterialiv                   = emuProcInterceptIff_glGetMaterialiv;
  dt.glGetMultiTexGendvEXT             = emuProcInterceptIff_glGetMultiTexGendvEXT;
  dt.glGetMultiTexGenfvEXT             = emuProcInterceptIff_glGetMultiTexGenfvEXT;
  dt.glGetMultiTexGenivEXT             = emuProcInterceptIff_glGetMultiTexGenivEXT;
  dt.glGetTexEnvfv                     = emuProcInterceptIff_glGetTexEnvfv;
  dt.glGetTexEnviv                     = emuProcInterceptIff_glGetTexEnviv;
  dt.glGetTexGendv                     = emuProcInterceptIff_glGetTexGendv;
  dt.glGetTexGenfv                     = emuProcInterceptIff_glGetTexGenfv;
  dt.glGetTexGeniv                     = emuProcInterceptIff_glGetTexGeniv;
  dt.glGetVertexAttribPointerv         = emuProcInterceptIff_glGetVertexAttribPointerv;
  dt.glGetVertexAttribPointervARB      = emuProcInterceptIff_glGetVertexAttribPointervARB;
  dt.glGetVertexAttribdv               = emuProcInterceptIff_glGetVertexAttribdv;
  dt.glGetVertexAttribdvARB            = emuProcInterceptIff_glGetVertexAttribdvARB;
  dt.glGetVertexAttribfv               = emuProcInterceptIff_glGetVertexAttribfv;
  dt.glGetVertexAttribfvARB            = emuProcInterceptIff_glGetVertexAttribfvARB;
  dt.glGetVertexAttribiv               = emuProcInterceptIff_glGetVertexAttribiv;
  dt.glGetVertexAttribivARB            = emuProcInterceptIff_glGetVertexAttribivARB;
  dt.glIsEnabled                       = emuProcInterceptIff_glIsEnabled;
  dt.glIsVertexArray                   = emuProcInterceptIff_glIsVertexArray;
  dt.glLightModelf                     = emuProcInterceptIff_glLightModelf;
  dt.glLightModelfv                    = emuProcInterceptIff_glLightModelfv;
  dt.glLightModeli                     = emuProcInterceptIff_glLightModeli;
  dt.glLightModeliv                    = emuProcInterceptIff_glLightModeliv;
  dt.glLightf                          = emuProcInterceptIff_glLightf;
  dt.glLightfv                         = emuProcInterceptIff_glLightfv;
  dt.glLighti                          = emuProcInterceptIff_glLighti;
  dt.glLightiv                         = emuProcInterceptIff_glLightiv;
  dt.glLinkProgram                     = emuProcInterceptIff_glLinkProgram;
  dt.glLinkProgramARB                  = emuProcInterceptIff_glLinkProgramARB;
  dt.glLoadIdentity                    = emuProcInterceptIff_glLoadIdentity;
  dt.glLoadMatrixd                     = emuProcInterceptIff_glLoadMatrixd;
  dt.glLoadMatrixf                     = emuProcInterceptIff_glLoadMatrixf;
  dt.glLoadTransposeMatrixd            = emuProcInterceptIff_glLoadTransposeMatrixd;
  dt.glLoadTransposeMatrixdARB         = emuProcInterceptIff_glLoadTransposeMatrixdARB;
  dt.glLoadTransposeMatrixf            = emuProcInterceptIff_glLoadTransposeMatrixf;
  dt.glLoadTransposeMatrixfARB         = emuProcInterceptIff_glLoadTransposeMatrixfARB;
  dt.glMaterialf                       = emuProcInterceptIff_glMaterialf;
  dt.glMaterialfv                      = emuProcInterceptIff_glMaterialfv;
  dt.glMateriali                       = emuProcInterceptIff_glMateriali;
  dt.glMaterialiv                      = emuProcInterceptIff_glMaterialiv;
  dt.glMatrixFrustumEXT                = emuProcInterceptIff_glMatrixFrustumEXT;
  dt.glMatrixLoadIdentityEXT           = emuProcInterceptIff_glMatrixLoadIdentityEXT;
  dt.glMatrixLoadTransposedEXT         = emuProcInterceptIff_glMatrixLoadTransposedEXT;
  dt.glMatrixLoadTransposefEXT         = emuProcInterceptIff_glMatrixLoadTransposefEXT;
  dt.glMatrixLoaddEXT                  = emuProcInterceptIff_glMatrixLoaddEXT;
  dt.glMatrixLoadfEXT                  = emuProcInterceptIff_glMatrixLoadfEXT;
  dt.glMatrixMode                      = emuProcInterceptIff_glMatrixMode;
  dt.glMatrixMultTransposedEXT         = emuProcInterceptIff_glMatrixMultTransposedEXT;
  dt.glMatrixMultTransposefEXT         = emuProcInterceptIff_glMatrixMultTransposefEXT;
  dt.glMatrixMultdEXT                  = emuProcInterceptIff_glMatrixMultdEXT;
  dt.glMatrixMultfEXT                  = emuProcInterceptIff_glMatrixMultfEXT;
  dt.glMatrixOrthoEXT                  = emuProcInterceptIff_glMatrixOrthoEXT;
  dt.glMatrixPopEXT                    = emuProcInterceptIff_glMatrixPopEXT;
  dt.glMatrixPushEXT                   = emuProcInterceptIff_glMatrixPushEXT;
  dt.glMatrixRotatedEXT                = emuProcInterceptIff_glMatrixRotatedEXT;
  dt.glMatrixRotatefEXT                = emuProcInterceptIff_glMatrixRotatefEXT;
  dt.glMatrixScaledEXT                 = emuProcInterceptIff_glMatrixScaledEXT;
  dt.glMatrixScalefEXT                 = emuProcInterceptIff_glMatrixScalefEXT;
  dt.glMatrixTranslatedEXT             = emuProcInterceptIff_glMatrixTranslatedEXT;
  dt.glMatrixTranslatefEXT             = emuProcInterceptIff_glMatrixTranslatefEXT;
  dt.glMultMatrixd                     = emuProcInterceptIff_glMultMatrixd;
  dt.glMultMatrixf                     = emuProcInterceptIff_glMultMatrixf;
  dt.glMultTransposeMatrixd            = emuProcInterceptIff_glMultTransposeMatrixd;
  dt.glMultTransposeMatrixdARB         = emuProcInterceptIff_glMultTransposeMatrixdARB;
  dt.glMultTransposeMatrixf            = emuProcInterceptIff_glMultTransposeMatrixf;
  dt.glMultTransposeMatrixfARB         = emuProcInterceptIff_glMultTransposeMatrixfARB;
  dt.glMultiDrawArrays                 = emuProcInterceptIff_glMultiDrawArrays;
  dt.glMultiDrawArraysEXT              = emuProcInterceptIff_glMultiDrawArraysEXT;
  dt.glMultiDrawArraysIndirect         = emuProcInterceptIff_glMultiDrawArraysIndirect;
  dt.glMultiDrawArraysIndirectAMD      = emuProcInterceptIff_glMultiDrawArraysIndirectAMD;
  dt.glMultiDrawElementArrayAPPLE      = emuProcInterceptIff_glMultiDrawElementArrayAPPLE;
  dt.glMultiDrawElements               = emuProcInterceptIff_glMultiDrawElements;
  dt.glMultiDrawElementsBaseVertex     = emuProcInterceptIff_glMultiDrawElementsBaseVertex;
  dt.glMultiDrawElementsEXT            = emuProcInterceptIff_glMultiDrawElementsEXT;
  dt.glMultiDrawElementsIndirect       = emuProcInterceptIff_glMultiDrawElementsIndirect;
  dt.glMultiDrawElementsIndirectAMD    = emuProcInterceptIff_glMultiDrawElementsIndirectAMD;
  dt.glMultiDrawRangeElementArrayAPPLE = emuProcInterceptIff_glMultiDrawRangeElementArrayAPPLE;
  dt.glMultiTexCoord1d                 = emuProcInterceptIff_glMultiTexCoord1d;
  dt.glMultiTexCoord1dARB              = emuProcInterceptIff_glMultiTexCoord1dARB;
  dt.glMultiTexCoord1dv                = emuProcInterceptIff_glMultiTexCoord1dv;
  dt.glMultiTexCoord1dvARB             = emuProcInterceptIff_glMultiTexCoord1dvARB;
  dt.glMultiTexCoord1f                 = emuProcInterceptIff_glMultiTexCoord1f;
  dt.glMultiTexCoord1fARB              = emuProcInterceptIff_glMultiTexCoord1fARB;
  dt.glMultiTexCoord1fv                = emuProcInterceptIff_glMultiTexCoord1fv;
  dt.glMultiTexCoord1fvARB             = emuProcInterceptIff_glMultiTexCoord1fvARB;
  dt.glMultiTexCoord1i                 = emuProcInterceptIff_glMultiTexCoord1i;
  dt.glMultiTexCoord1iARB              = emuProcInterceptIff_glMultiTexCoord1iARB;
  dt.glMultiTexCoord1iv                = emuProcInterceptIff_glMultiTexCoord1iv;
  dt.glMultiTexCoord1ivARB             = emuProcInterceptIff_glMultiTexCoord1ivARB;
  dt.glMultiTexCoord1s                 = emuProcInterceptIff_glMultiTexCoord1s;
  dt.glMultiTexCoord1sARB              = emuProcInterceptIff_glMultiTexCoord1sARB;
  dt.glMultiTexCoord1sv                = emuProcInterceptIff_glMultiTexCoord1sv;
  dt.glMultiTexCoord1svARB             = emuProcInterceptIff_glMultiTexCoord1svARB;
  dt.glMultiTexCoord2d                 = emuProcInterceptIff_glMultiTexCoord2d;
  dt.glMultiTexCoord2dARB              = emuProcInterceptIff_glMultiTexCoord2dARB;
  dt.glMultiTexCoord2dv                = emuProcInterceptIff_glMultiTexCoord2dv;
  dt.glMultiTexCoord2dvARB             = emuProcInterceptIff_glMultiTexCoord2dvARB;
  dt.glMultiTexCoord2f                 = emuProcInterceptIff_glMultiTexCoord2f;
  dt.glMultiTexCoord2fARB              = emuProcInterceptIff_glMultiTexCoord2fARB;
  dt.glMultiTexCoord2fv                = emuProcInterceptIff_glMultiTexCoord2fv;
  dt.glMultiTexCoord2fvARB             = emuProcInterceptIff_glMultiTexCoord2fvARB;
  dt.glMultiTexCoord2i                 = emuProcInterceptIff_glMultiTexCoord2i;
  dt.glMultiTexCoord2iARB              = emuProcInterceptIff_glMultiTexCoord2iARB;
  dt.glMultiTexCoord2iv                = emuProcInterceptIff_glMultiTexCoord2iv;
  dt.glMultiTexCoord2ivARB             = emuProcInterceptIff_glMultiTexCoord2ivARB;
  dt.glMultiTexCoord2s                 = emuProcInterceptIff_glMultiTexCoord2s;
  dt.glMultiTexCoord2sARB              = emuProcInterceptIff_glMultiTexCoord2sARB;
  dt.glMultiTexCoord2sv                = emuProcInterceptIff_glMultiTexCoord2sv;
  dt.glMultiTexCoord2svARB             = emuProcInterceptIff_glMultiTexCoord2svARB;
  dt.glMultiTexCoord3d                 = emuProcInterceptIff_glMultiTexCoord3d;
  dt.glMultiTexCoord3dARB              = emuProcInterceptIff_glMultiTexCoord3dARB;
  dt.glMultiTexCoord3dv                = emuProcInterceptIff_glMultiTexCoord3dv;
  dt.glMultiTexCoord3dvARB             = emuProcInterceptIff_glMultiTexCoord3dvARB;
  dt.glMultiTexCoord3f                 = emuProcInterceptIff_glMultiTexCoord3f;
  dt.glMultiTexCoord3fARB              = emuProcInterceptIff_glMultiTexCoord3fARB;
  dt.glMultiTexCoord3fv                = emuProcInterceptIff_glMultiTexCoord3fv;
  dt.glMultiTexCoord3fvARB             = emuProcInterceptIff_glMultiTexCoord3fvARB;
  dt.glMultiTexCoord3i                 = emuProcInterceptIff_glMultiTexCoord3i;
  dt.glMultiTexCoord3iARB              = emuProcInterceptIff_glMultiTexCoord3iARB;
  dt.glMultiTexCoord3iv                = emuProcInterceptIff_glMultiTexCoord3iv;
  dt.glMultiTexCoord3ivARB             = emuProcInterceptIff_glMultiTexCoord3ivARB;
  dt.glMultiTexCoord3s                 = emuProcInterceptIff_glMultiTexCoord3s;
  dt.glMultiTexCoord3sARB              = emuProcInterceptIff_glMultiTexCoord3sARB;
  dt.glMultiTexCoord3sv                = emuProcInterceptIff_glMultiTexCoord3sv;
  dt.glMultiTexCoord3svARB             = emuProcInterceptIff_glMultiTexCoord3svARB;
  dt.glMultiTexCoord4d                 = emuProcInterceptIff_glMultiTexCoord4d;
  dt.glMultiTexCoord4dARB              = emuProcInterceptIff_glMultiTexCoord4dARB;
  dt.glMultiTexCoord4dv                = emuProcInterceptIff_glMultiTexCoord4dv;
  dt.glMultiTexCoord4dvARB             = emuProcInterceptIff_glMultiTexCoord4dvARB;
  dt.glMultiTexCoord4f                 = emuProcInterceptIff_glMultiTexCoord4f;
  dt.glMultiTexCoord4fARB              = emuProcInterceptIff_glMultiTexCoord4fARB;
  dt.glMultiTexCoord4fv                = emuProcInterceptIff_glMultiTexCoord4fv;
  dt.glMultiTexCoord4fvARB             = emuProcInterceptIff_glMultiTexCoord4fvARB;
  dt.glMultiTexCoord4i                 = emuProcInterceptIff_glMultiTexCoord4i;
  dt.glMultiTexCoord4iARB              = emuProcInterceptIff_glMultiTexCoord4iARB;
  dt.glMultiTexCoord4iv                = emuProcInterceptIff_glMultiTexCoord4iv;
  dt.glMultiTexCoord4ivARB             = emuProcInterceptIff_glMultiTexCoord4ivARB;
  dt.glMultiTexCoord4s                 = emuProcInterceptIff_glMultiTexCoord4s;
  dt.glMultiTexCoord4sARB              = emuProcInterceptIff_glMultiTexCoord4sARB;
  dt.glMultiTexCoord4sv                = emuProcInterceptIff_glMultiTexCoord4sv;
  dt.glMultiTexCoord4svARB             = emuProcInterceptIff_glMultiTexCoord4svARB;
  dt.glMultiTexEnvfEXT                 = emuProcInterceptIff_glMultiTexEnvfEXT;
  dt.glMultiTexEnvfvEXT                = emuProcInterceptIff_glMultiTexEnvfvEXT;
  dt.glMultiTexEnviEXT                 = emuProcInterceptIff_glMultiTexEnviEXT;
  dt.glMultiTexEnvivEXT                = emuProcInterceptIff_glMultiTexEnvivEXT;
  dt.glMultiTexImage1DEXT              = emuProcInterceptIff_glMultiTexImage1DEXT;
  dt.glMultiTexImage2DEXT              = emuProcInterceptIff_glMultiTexImage2DEXT;
  dt.glMultiTexImage3DEXT              = emuProcInterceptIff_glMultiTexImage3DEXT;
  dt.glNormal3b                        = emuProcInterceptIff_glNormal3b;
  dt.glNormal3bv                       = emuProcInterceptIff_glNormal3bv;
  dt.glNormal3d                        = emuProcInterceptIff_glNormal3d;
  dt.glNormal3dv                       = emuProcInterceptIff_glNormal3dv;
  dt.glNormal3f                        = emuProcInterceptIff_glNormal3f;
  dt.glNormal3fv                       = emuProcInterceptIff_glNormal3fv;
  dt.glNormal3i                        = emuProcInterceptIff_glNormal3i;
  dt.glNormal3iv                       = emuProcInterceptIff_glNormal3iv;
  dt.glNormal3s                        = emuProcInterceptIff_glNormal3s;
  dt.glNormal3sv                       = emuProcInterceptIff_glNormal3sv;
  dt.glNormalPointer                   = emuProcInterceptIff_glNormalPointer;
  dt.glNormalPointerEXT                = emuProcInterceptIff_glNormalPointerEXT;
  dt.glOrtho                           = emuProcInterceptIff_glOrtho;
  dt.glPopMatrix                       = emuProcInterceptIff_glPopMatrix;
  dt.glPushMatrix                      = emuProcInterceptIff_glPushMatrix;
  dt.glRasterPos2d                     = emuProcInterceptIff_glRasterPos2d;
  dt.glRasterPos2f                     = emuProcInterceptIff_glRasterPos2f;
  dt.glRasterPos2i                     = emuProcInterceptIff_glRasterPos2i;
  dt.glRasterPos2s                     = emuProcInterceptIff_glRasterPos2s;
  dt.glRasterPos3d                     = emuProcInterceptIff_glRasterPos3d;
  dt.glRasterPos3f                     = emuProcInterceptIff_glRasterPos3f;
  dt.glRasterPos3i                     = emuProcInterceptIff_glRasterPos3i;
  dt.glRasterPos3s                     = emuProcInterceptIff_glRasterPos3s;
  dt.glRotated                         = emuProcInterceptIff_glRotated;
  dt.glRotatef                         = emuProcInterceptIff_glRotatef;
  dt.glScaled                          = emuProcInterceptIff_glScaled;
  dt.glScalef                          = emuProcInterceptIff_glScalef;
  dt.glSecondaryColor3b                = emuProcInterceptIff_glSecondaryColor3b;
  dt.glSecondaryColor3bEXT             = emuProcInterceptIff_glSecondaryColor3bEXT;
  dt.glSecondaryColor3bv               = emuProcInterceptIff_glSecondaryColor3bv;
  dt.glSecondaryColor3bvEXT            = emuProcInterceptIff_glSecondaryColor3bvEXT;
  dt.glSecondaryColor3d                = emuProcInterceptIff_glSecondaryColor3d;
  dt.glSecondaryColor3dEXT             = emuProcInterceptIff_glSecondaryColor3dEXT;
  dt.glSecondaryColor3dv               = emuProcInterceptIff_glSecondaryColor3dv;
  dt.glSecondaryColor3dvEXT            = emuProcInterceptIff_glSecondaryColor3dvEXT;
  dt.glSecondaryColor3f                = emuProcInterceptIff_glSecondaryColor3f;
  dt.glSecondaryColor3fEXT             = emuProcInterceptIff_glSecondaryColor3fEXT;
  dt.glSecondaryColor3fv               = emuProcInterceptIff_glSecondaryColor3fv;
  dt.glSecondaryColor3fvEXT            = emuProcInterceptIff_glSecondaryColor3fvEXT;
  dt.glSecondaryColor3i                = emuProcInterceptIff_glSecondaryColor3i;
  dt.glSecondaryColor3iEXT             = emuProcInterceptIff_glSecondaryColor3iEXT;
  dt.glSecondaryColor3iv               = emuProcInterceptIff_glSecondaryColor3iv;
  dt.glSecondaryColor3ivEXT            = emuProcInterceptIff_glSecondaryColor3ivEXT;
  dt.glSecondaryColor3s                = emuProcInterceptIff_glSecondaryColor3s;
  dt.glSecondaryColor3sEXT             = emuProcInterceptIff_glSecondaryColor3sEXT;
  dt.glSecondaryColor3sv               = emuProcInterceptIff_glSecondaryColor3sv;
  dt.glSecondaryColor3svEXT            = emuProcInterceptIff_glSecondaryColor3svEXT;
  dt.glSecondaryColor3ub               = emuProcInterceptIff_glSecondaryColor3ub;
  dt.glSecondaryColor3ubEXT            = emuProcInterceptIff_glSecondaryColor3ubEXT;
  dt.glSecondaryColor3ubv              = emuProcInterceptIff_glSecondaryColor3ubv;
  dt.glSecondaryColor3ubvEXT           = emuProcInterceptIff_glSecondaryColor3ubvEXT;
  dt.glSecondaryColor3ui               = emuProcInterceptIff_glSecondaryColor3ui;
  dt.glSecondaryColor3uiEXT            = emuProcInterceptIff_glSecondaryColor3uiEXT;
  dt.glSecondaryColor3uiv              = emuProcInterceptIff_glSecondaryColor3uiv;
  dt.glSecondaryColor3uivEXT           = emuProcInterceptIff_glSecondaryColor3uivEXT;
  dt.glSecondaryColor3us               = emuProcInterceptIff_glSecondaryColor3us;
  dt.glSecondaryColor3usEXT            = emuProcInterceptIff_glSecondaryColor3usEXT;
  dt.glSecondaryColor3usv              = emuProcInterceptIff_glSecondaryColor3usv;
  dt.glSecondaryColor3usvEXT           = emuProcInterceptIff_glSecondaryColor3usvEXT;
  dt.glSecondaryColorPointer           = emuProcInterceptIff_glSecondaryColorPointer;
  dt.glSecondaryColorPointerEXT        = emuProcInterceptIff_glSecondaryColorPointerEXT;
  dt.glShadeModel                      = emuProcInterceptIff_glShadeModel;
  dt.glShaderSource                    = emuProcInterceptIff_glShaderSource;
  dt.glShaderSourceARB                 = emuProcInterceptIff_glShaderSourceARB;
  dt.glTexCoord1d                      = emuProcInterceptIff_glTexCoord1d;
  dt.glTexCoord1dv                     = emuProcInterceptIff_glTexCoord1dv;
  dt.glTexCoord1f                      = emuProcInterceptIff_glTexCoord1f;
  dt.glTexCoord1fv                     = emuProcInterceptIff_glTexCoord1fv;
  dt.glTexCoord1i                      = emuProcInterceptIff_glTexCoord1i;
  dt.glTexCoord1iv                     = emuProcInterceptIff_glTexCoord1iv;
  dt.glTexCoord1s                      = emuProcInterceptIff_glTexCoord1s;
  dt.glTexCoord1sv                     = emuProcInterceptIff_glTexCoord1sv;
  dt.glTexCoord2d                      = emuProcInterceptIff_glTexCoord2d;
  dt.glTexCoord2dv                     = emuProcInterceptIff_glTexCoord2dv;
  dt.glTexCoord2f                      = emuProcInterceptIff_glTexCoord2f;
  dt.glTexCoord2fv                     = emuProcInterceptIff_glTexCoord2fv;
  dt.glTexCoord2i                      = emuProcInterceptIff_glTexCoord2i;
  dt.glTexCoord2iv                     = emuProcInterceptIff_glTexCoord2iv;
  dt.glTexCoord2s                      = emuProcInterceptIff_glTexCoord2s;
  dt.glTexCoord2sv                     = emuProcInterceptIff_glTexCoord2sv;
  dt.glTexCoord3d                      = emuProcInterceptIff_glTexCoord3d;
  dt.glTexCoord3dv                     = emuProcInterceptIff_glTexCoord3dv;
  dt.glTexCoord3f                      = emuProcInterceptIff_glTexCoord3f;
  dt.glTexCoord3fv                     = emuProcInterceptIff_glTexCoord3fv;
  dt.glTexCoord3i                      = emuProcInterceptIff_glTexCoord3i;
  dt.glTexCoord3iv                     = emuProcInterceptIff_glTexCoord3iv;
  dt.glTexCoord3s                      = emuProcInterceptIff_glTexCoord3s;
  dt.glTexCoord3sv                     = emuProcInterceptIff_glTexCoord3sv;
  dt.glTexCoord4d                      = emuProcInterceptIff_glTexCoord4d;
  dt.glTexCoord4dv                     = emuProcInterceptIff_glTexCoord4dv;
  dt.glTexCoord4f                      = emuProcInterceptIff_glTexCoord4f;
  dt.glTexCoord4fv                     = emuProcInterceptIff_glTexCoord4fv;
  dt.glTexCoord4i                      = emuProcInterceptIff_glTexCoord4i;
  dt.glTexCoord4iv                     = emuProcInterceptIff_glTexCoord4iv;
  dt.glTexCoord4s                      = emuProcInterceptIff_glTexCoord4s;
  dt.glTexCoord4sv                     = emuProcInterceptIff_glTexCoord4sv;
  dt.glTexCoordPointer                 = emuProcInterceptIff_glTexCoordPointer;
  dt.glTexCoordPointerEXT              = emuProcInterceptIff_glTexCoordPointerEXT;
  dt.glTexEnvf                         = emuProcInterceptIff_glTexEnvf;
  dt.glTexEnvfv                        = emuProcInterceptIff_glTexEnvfv;
  dt.glTexEnvi                         = emuProcInterceptIff_glTexEnvi;
  dt.glTexEnviv                        = emuProcInterceptIff_glTexEnviv;
  dt.glTexGend                         = emuProcInterceptIff_glTexGend;
  dt.glTexGendv                        = emuProcInterceptIff_glTexGendv;
  dt.glTexGenf                         = emuProcInterceptIff_glTexGenf;
  dt.glTexGenfv                        = emuProcInterceptIff_glTexGenfv;
  dt.glTexGeni                         = emuProcInterceptIff_glTexGeni;
  dt.glTexGeniv                        = emuProcInterceptIff_glTexGeniv;
  dt.glTexImage1D                      = emuProcInterceptIff_glTexImage1D;
  dt.glTexImage2D                      = emuProcInterceptIff_glTexImage2D;
  dt.glTexImage2DMultisample           = emuProcInterceptIff_glTexImage2DMultisample;
  dt.glTexImage2DMultisampleCoverageNV = emuProcInterceptIff_glTexImage2DMultisampleCoverageNV;
  dt.glTexImage3D                      = emuProcInterceptIff_glTexImage3D;
  dt.glTexImage3DEXT                   = emuProcInterceptIff_glTexImage3DEXT;
  dt.glTexImage3DMultisample           = emuProcInterceptIff_glTexImage3DMultisample;
  dt.glTexImage3DMultisampleCoverageNV = emuProcInterceptIff_glTexImage3DMultisampleCoverageNV;
  dt.glTexImage4DSGIS                  = emuProcInterceptIff_glTexImage4DSGIS;
  dt.glTextureImage1DEXT               = emuProcInterceptIff_glTextureImage1DEXT;
  dt.glTextureImage2DEXT               = emuProcInterceptIff_glTextureImage2DEXT;
  dt.glTextureImage3DEXT               = emuProcInterceptIff_glTextureImage3DEXT;
  dt.glTranslated                      = emuProcInterceptIff_glTranslated;
  dt.glTranslatef                      = emuProcInterceptIff_glTranslatef;
  dt.glUniform1d                       = emuProcInterceptIff_glUniform1d;
  dt.glUniform1dv                      = emuProcInterceptIff_glUniform1dv;
  dt.glUniform1f                       = emuProcInterceptIff_glUniform1f;
  dt.glUniform1fARB                    = emuProcInterceptIff_glUniform1fARB;
  dt.glUniform1fv                      = emuProcInterceptIff_glUniform1fv;
  dt.glUniform1fvARB                   = emuProcInterceptIff_glUniform1fvARB;
  dt.glUniform1i                       = emuProcInterceptIff_glUniform1i;
  dt.glUniform1iARB                    = emuProcInterceptIff_glUniform1iARB;
  dt.glUniform1iv                      = emuProcInterceptIff_glUniform1iv;
  dt.glUniform1ivARB                   = emuProcInterceptIff_glUniform1ivARB;
  dt.glUniform1ui                      = emuProcInterceptIff_glUniform1ui;
  dt.glUniform1uiv                     = emuProcInterceptIff_glUniform1uiv;
  dt.glUniform2d                       = emuProcInterceptIff_glUniform2d;
  dt.glUniform2dv                      = emuProcInterceptIff_glUniform2dv;
  dt.glUniform2f                       = emuProcInterceptIff_glUniform2f;
  dt.glUniform2fARB                    = emuProcInterceptIff_glUniform2fARB;
  dt.glUniform2fv                      = emuProcInterceptIff_glUniform2fv;
  dt.glUniform2fvARB                   = emuProcInterceptIff_glUniform2fvARB;
  dt.glUniform2i                       = emuProcInterceptIff_glUniform2i;
  dt.glUniform2iARB                    = emuProcInterceptIff_glUniform2iARB;
  dt.glUniform2iv                      = emuProcInterceptIff_glUniform2iv;
  dt.glUniform2ivARB                   = emuProcInterceptIff_glUniform2ivARB;
  dt.glUniform2ui                      = emuProcInterceptIff_glUniform2ui;
  dt.glUniform2uiv                     = emuProcInterceptIff_glUniform2uiv;
  dt.glUniform3d                       = emuProcInterceptIff_glUniform3d;
  dt.glUniform3dv                      = emuProcInterceptIff_glUniform3dv;
  dt.glUniform3f                       = emuProcInterceptIff_glUniform3f;
  dt.glUniform3fARB                    = emuProcInterceptIff_glUniform3fARB;
  dt.glUniform3fv                      = emuProcInterceptIff_glUniform3fv;
  dt.glUniform3fvARB                   = emuProcInterceptIff_glUniform3fvARB;
  dt.glUniform3i                       = emuProcInterceptIff_glUniform3i;
  dt.glUniform3iARB                    = emuProcInterceptIff_glUniform3iARB;
  dt.glUniform3iv                      = emuProcInterceptIff_glUniform3iv;
  dt.glUniform3ivARB                   = emuProcInterceptIff_glUniform3ivARB;
  dt.glUniform3ui                      = emuProcInterceptIff_glUniform3ui;
  dt.glUniform3uiv                     = emuProcInterceptIff_glUniform3uiv;
  dt.glUniform4d                       = emuProcInterceptIff_glUniform4d;
  dt.glUniform4dv                      = emuProcInterceptIff_glUniform4dv;
  dt.glUniform4f                       = emuProcInterceptIff_glUniform4f;
  dt.glUniform4fARB                    = emuProcInterceptIff_glUniform4fARB;
  dt.glUniform4fv                      = emuProcInterceptIff_glUniform4fv;
  dt.glUniform4fvARB                   = emuProcInterceptIff_glUniform4fvARB;
  dt.glUniform4i                       = emuProcInterceptIff_glUniform4i;
  dt.glUniform4iARB                    = emuProcInterceptIff_glUniform4iARB;
  dt.glUniform4iv                      = emuProcInterceptIff_glUniform4iv;
  dt.glUniform4ivARB                   = emuProcInterceptIff_glUniform4ivARB;
  dt.glUniform4ui                      = emuProcInterceptIff_glUniform4ui;
  dt.glUniform4uiv                     = emuProcInterceptIff_glUniform4uiv;
  dt.glUniformMatrix2dv                = emuProcInterceptIff_glUniformMatrix2dv;
  dt.glUniformMatrix2fv                = emuProcInterceptIff_glUniformMatrix2fv;
  dt.glUniformMatrix2fvARB             = emuProcInterceptIff_glUniformMatrix2fvARB;
  dt.glUniformMatrix2x3dv              = emuProcInterceptIff_glUniformMatrix2x3dv;
  dt.glUniformMatrix2x3fv              = emuProcInterceptIff_glUniformMatrix2x3fv;
  dt.glUniformMatrix2x4dv              = emuProcInterceptIff_glUniformMatrix2x4dv;
  dt.glUniformMatrix2x4fv              = emuProcInterceptIff_glUniformMatrix2x4fv;
  dt.glUniformMatrix3dv                = emuProcInterceptIff_glUniformMatrix3dv;
  dt.glUniformMatrix3fv                = emuProcInterceptIff_glUniformMatrix3fv;
  dt.glUniformMatrix3fvARB             = emuProcInterceptIff_glUniformMatrix3fvARB;
  dt.glUniformMatrix3x2dv              = emuProcInterceptIff_glUniformMatrix3x2dv;
  dt.glUniformMatrix3x2fv              = emuProcInterceptIff_glUniformMatrix3x2fv;
  dt.glUniformMatrix3x4dv              = emuProcInterceptIff_glUniformMatrix3x4dv;
  dt.glUniformMatrix3x4fv              = emuProcInterceptIff_glUniformMatrix3x4fv;
  dt.glUniformMatrix4dv                = emuProcInterceptIff_glUniformMatrix4dv;
  dt.glUniformMatrix4fv                = emuProcInterceptIff_glUniformMatrix4fv;
  dt.glUniformMatrix4fvARB             = emuProcInterceptIff_glUniformMatrix4fvARB;
  dt.glUniformMatrix4x2dv              = emuProcInterceptIff_glUniformMatrix4x2dv;
  dt.glUniformMatrix4x2fv              = emuProcInterceptIff_glUniformMatrix4x2fv;
  dt.glUniformMatrix4x3dv              = emuProcInterceptIff_glUniformMatrix4x3dv;
  dt.glUniformMatrix4x3fv              = emuProcInterceptIff_glUniformMatrix4x3fv;
  dt.glUseProgram                      = emuProcInterceptIff_glUseProgram;
  dt.glUseProgramObjectARB             = emuProcInterceptIff_glUseProgramObjectARB;
  dt.glVertex2d                        = emuProcInterceptIff_glVertex2d;
  dt.glVertex2dv                       = emuProcInterceptIff_glVertex2dv;
  dt.glVertex2f                        = emuProcInterceptIff_glVertex2f;
  dt.glVertex2fv                       = emuProcInterceptIff_glVertex2fv;
  dt.glVertex2i                        = emuProcInterceptIff_glVertex2i;
  dt.glVertex2iv                       = emuProcInterceptIff_glVertex2iv;
  dt.glVertex2s                        = emuProcInterceptIff_glVertex2s;
  dt.glVertex2sv                       = emuProcInterceptIff_glVertex2sv;
  dt.glVertex3d                        = emuProcInterceptIff_glVertex3d;
  dt.glVertex3dv                       = emuProcInterceptIff_glVertex3dv;
  dt.glVertex3f                        = emuProcInterceptIff_glVertex3f;
  dt.glVertex3fv                       = emuProcInterceptIff_glVertex3fv;
  dt.glVertex3i                        = emuProcInterceptIff_glVertex3i;
  dt.glVertex3iv                       = emuProcInterceptIff_glVertex3iv;
  dt.glVertex3s                        = emuProcInterceptIff_glVertex3s;
  dt.glVertex3sv                       = emuProcInterceptIff_glVertex3sv;
  dt.glVertex4d                        = emuProcInterceptIff_glVertex4d;
  dt.glVertex4dv                       = emuProcInterceptIff_glVertex4dv;
  dt.glVertex4f                        = emuProcInterceptIff_glVertex4f;
  dt.glVertex4fv                       = emuProcInterceptIff_glVertex4fv;
  dt.glVertex4i                        = emuProcInterceptIff_glVertex4i;
  dt.glVertex4iv                       = emuProcInterceptIff_glVertex4iv;
  dt.glVertex4s                        = emuProcInterceptIff_glVertex4s;
  dt.glVertex4sv                       = emuProcInterceptIff_glVertex4sv;
  dt.glVertexAttrib1d                  = emuProcInterceptIff_glVertexAttrib1d;
  dt.glVertexAttrib1dARB               = emuProcInterceptIff_glVertexAttrib1dARB;
  dt.glVertexAttrib1dv                 = emuProcInterceptIff_glVertexAttrib1dv;
  dt.glVertexAttrib1dvARB              = emuProcInterceptIff_glVertexAttrib1dvARB;
  dt.glVertexAttrib1f                  = emuProcInterceptIff_glVertexAttrib1f;
  dt.glVertexAttrib1fARB               = emuProcInterceptIff_glVertexAttrib1fARB;
  dt.glVertexAttrib1fv                 = emuProcInterceptIff_glVertexAttrib1fv;
  dt.glVertexAttrib1fvARB              = emuProcInterceptIff_glVertexAttrib1fvARB;
  dt.glVertexAttrib1s                  = emuProcInterceptIff_glVertexAttrib1s;
  dt.glVertexAttrib1sARB               = emuProcInterceptIff_glVertexAttrib1sARB;
  dt.glVertexAttrib1sv                 = emuProcInterceptIff_glVertexAttrib1sv;
  dt.glVertexAttrib1svARB              = emuProcInterceptIff_glVertexAttrib1svARB;
  dt.glVertexAttrib2d                  = emuProcInterceptIff_glVertexAttrib2d;
  dt.glVertexAttrib2dARB               = emuProcInterceptIff_glVertexAttrib2dARB;
  dt.glVertexAttrib2dv                 = emuProcInterceptIff_glVertexAttrib2dv;
  dt.glVertexAttrib2dvARB              = emuProcInterceptIff_glVertexAttrib2dvARB;
  dt.glVertexAttrib2f                  = emuProcInterceptIff_glVertexAttrib2f;
  dt.glVertexAttrib2fARB               = emuProcInterceptIff_glVertexAttrib2fARB;
  dt.glVertexAttrib2fv                 = emuProcInterceptIff_glVertexAttrib2fv;
  dt.glVertexAttrib2fvARB              = emuProcInterceptIff_glVertexAttrib2fvARB;
  dt.glVertexAttrib2s                  = emuProcInterceptIff_glVertexAttrib2s;
  dt.glVertexAttrib2sARB               = emuProcInterceptIff_glVertexAttrib2sARB;
  dt.glVertexAttrib2sv                 = emuProcInterceptIff_glVertexAttrib2sv;
  dt.glVertexAttrib2svARB              = emuProcInterceptIff_glVertexAttrib2svARB;
  dt.glVertexAttrib3d                  = emuProcInterceptIff_glVertexAttrib3d;
  dt.glVertexAttrib3dARB               = emuProcInterceptIff_glVertexAttrib3dARB;
  dt.glVertexAttrib3dv                 = emuProcInterceptIff_glVertexAttrib3dv;
  dt.glVertexAttrib3dvARB              = emuProcInterceptIff_glVertexAttrib3dvARB;
  dt.glVertexAttrib3f                  = emuProcInterceptIff_glVertexAttrib3f;
  dt.glVertexAttrib3fARB               = emuProcInterceptIff_glVertexAttrib3fARB;
  dt.glVertexAttrib3fv                 = emuProcInterceptIff_glVertexAttrib3fv;
  dt.glVertexAttrib3fvARB              = emuProcInterceptIff_glVertexAttrib3fvARB;
  dt.glVertexAttrib3s                  = emuProcInterceptIff_glVertexAttrib3s;
  dt.glVertexAttrib3sARB               = emuProcInterceptIff_glVertexAttrib3sARB;
  dt.glVertexAttrib3sv                 = emuProcInterceptIff_glVertexAttrib3sv;
  dt.glVertexAttrib3svARB              = emuProcInterceptIff_glVertexAttrib3svARB;
  dt.glVertexAttrib4Nbv                = emuProcInterceptIff_glVertexAttrib4Nbv;
  dt.glVertexAttrib4NbvARB             = emuProcInterceptIff_glVertexAttrib4NbvARB;
  dt.glVertexAttrib4Niv                = emuProcInterceptIff_glVertexAttrib4Niv;
  dt.glVertexAttrib4NivARB             = emuProcInterceptIff_glVertexAttrib4NivARB;
  dt.glVertexAttrib4Nsv                = emuProcInterceptIff_glVertexAttrib4Nsv;
  dt.glVertexAttrib4NsvARB             = emuProcInterceptIff_glVertexAttrib4NsvARB;
  dt.glVertexAttrib4Nub                = emuProcInterceptIff_glVertexAttrib4Nub;
  dt.glVertexAttrib4NubARB             = emuProcInterceptIff_glVertexAttrib4NubARB;
  dt.glVertexAttrib4Nubv               = emuProcInterceptIff_glVertexAttrib4Nubv;
  dt.glVertexAttrib4NubvARB            = emuProcInterceptIff_glVertexAttrib4NubvARB;
  dt.glVertexAttrib4Nusv               = emuProcInterceptIff_glVertexAttrib4Nusv;
  dt.glVertexAttrib4NusvARB            = emuProcInterceptIff_glVertexAttrib4NusvARB;
  dt.glVertexAttrib4bv                 = emuProcInterceptIff_glVertexAttrib4bv;
  dt.glVertexAttrib4bvARB              = emuProcInterceptIff_glVertexAttrib4bvARB;
  dt.glVertexAttrib4d                  = emuProcInterceptIff_glVertexAttrib4d;
  dt.glVertexAttrib4dARB               = emuProcInterceptIff_glVertexAttrib4dARB;
  dt.glVertexAttrib4dv                 = emuProcInterceptIff_glVertexAttrib4dv;
  dt.glVertexAttrib4dvARB              = emuProcInterceptIff_glVertexAttrib4dvARB;
  dt.glVertexAttrib4f                  = emuProcInterceptIff_glVertexAttrib4f;
  dt.glVertexAttrib4fARB               = emuProcInterceptIff_glVertexAttrib4fARB;
  dt.glVertexAttrib4fv                 = emuProcInterceptIff_glVertexAttrib4fv;
  dt.glVertexAttrib4fvARB              = emuProcInterceptIff_glVertexAttrib4fvARB;
  dt.glVertexAttrib4iv                 = emuProcInterceptIff_glVertexAttrib4iv;
  dt.glVertexAttrib4ivARB              = emuProcInterceptIff_glVertexAttrib4ivARB;
  dt.glVertexAttrib4s                  = emuProcInterceptIff_glVertexAttrib4s;
  dt.glVertexAttrib4sARB               = emuProcInterceptIff_glVertexAttrib4sARB;
  dt.glVertexAttrib4sv                 = emuProcInterceptIff_glVertexAttrib4sv;
  dt.glVertexAttrib4svARB              = emuProcInterceptIff_glVertexAttrib4svARB;
  dt.glVertexAttrib4ubv                = emuProcInterceptIff_glVertexAttrib4ubv;
  dt.glVertexAttrib4ubvARB             = emuProcInterceptIff_glVertexAttrib4ubvARB;
  dt.glVertexAttrib4usv                = emuProcInterceptIff_glVertexAttrib4usv;
  dt.glVertexAttrib4usvARB             = emuProcInterceptIff_glVertexAttrib4usvARB;
  dt.glVertexAttribPointer             = emuProcInterceptIff_glVertexAttribPointer;
  dt.glVertexAttribPointerARB          = emuProcInterceptIff_glVertexAttribPointerARB;
  dt.glVertexPointer                   = emuProcInterceptIff_glVertexPointer;
  dt.glVertexPointerEXT                = emuProcInterceptIff_glVertexPointerEXT;
  dt.glViewport                        = emuProcInterceptIff_glViewport;
  dt.glWindowPos2d                     = emuProcInterceptIff_glWindowPos2d;
  dt.glWindowPos2f                     = emuProcInterceptIff_glWindowPos2f;
  dt.glWindowPos2i                     = emuProcInterceptIff_glWindowPos2i;
  dt.glWindowPos2s                     = emuProcInterceptIff_glWindowPos2s;
  dt.glWindowPos3d                     = emuProcInterceptIff_glWindowPos3d;
  dt.glWindowPos3f                     = emuProcInterceptIff_glWindowPos3f;
  dt.glWindowPos3i                     = emuProcInterceptIff_glWindowPos3i;
  dt.glWindowPos3s                     = emuProcInterceptIff_glWindowPos3s;
}

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION
