/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "RegalBaseVertex.h"
#include "RegalEmuProcsBaseVertex.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

static void REGAL_CALL emuProcInterceptBaseVertex_glBindBuffer(GLenum target, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glBindBuffer( target, buffer );

  _context->bv->orig.glBindBuffer(target, buffer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glBindVertexArray(GLuint array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glBindVertexArray( array );

  _context->bv->orig.glBindVertexArray(array);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glBindVertexBuffer( bindingindex, buffer, offset, stride );

  _context->bv->orig.glBindVertexBuffer(bindingindex, buffer, offset, stride);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glClientActiveTexture(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glClientActiveTexture( texture );

  _context->bv->orig.glClientActiveTexture(texture);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glClientActiveTextureARB(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glClientActiveTexture( texture );

  _context->bv->orig.glClientActiveTextureARB(texture);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glColorPointer( size, type, stride, pointer );

  _context->bv->orig.glColorPointer(size, type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisable(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisable( cap );

  _context->bv->orig.glDisable(cap);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisableClientState(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisableClientState( cap );

  _context->bv->orig.glDisableClientState(cap);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisableClientStateIndexedEXT( array, index );

  _context->bv->orig.glDisableClientStateIndexedEXT(array, index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisableClientStateiEXT(GLenum array, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisableClientStateiEXT( array, index );

  _context->bv->orig.glDisableClientStateiEXT(array, index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisableIndexedEXT(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisableIndexedEXT( target, index );

  _context->bv->orig.glDisableIndexedEXT(target, index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisableVertexArrayAttribEXT( vaobj, array );

  _context->bv->orig.glDisableVertexArrayAttribEXT(vaobj, array);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisableVertexArrayEXT( vaobj, array );

  _context->bv->orig.glDisableVertexArrayEXT(vaobj, array);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisableVertexAttribArray(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisableVertexAttribArray( index );

  _context->bv->orig.glDisableVertexAttribArray(index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDisablei(GLenum cap, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glDisablei( cap, index );

  _context->bv->orig.glDisablei(cap, index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // impl
  if( ! _context->bv->glDrawElementsBaseVertex( *_context, mode, count, type, indices, basevertex ) ) {
    _context->emu.curr.glDrawElementsBaseVertex( mode, count, type, indices, basevertex );
  }

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // impl
  if( ! _context->bv->glDrawElementsInstancedBaseVertex( *_context, mode, count, type, indices, primcount, basevertex ) ) {
    _context->emu.curr.glDrawElementsInstancedBaseVertex( mode, count, type, indices, primcount, basevertex );
  }

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // impl
  if( ! _context->bv->glDrawElementsInstancedBaseVertexBaseInstance( *_context, mode, count, type, indices, primcount, basevertex, baseinstance ) ) {
    _context->emu.curr.glDrawElementsInstancedBaseVertexBaseInstance( mode, count, type, indices, primcount, basevertex, baseinstance );
  }

}

static void REGAL_CALL emuProcInterceptBaseVertex_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // impl
  if( ! _context->bv->glDrawRangeElementsBaseVertex( *_context, mode, start, end, count, type, indices, basevertex ) ) {
    _context->emu.curr.glDrawRangeElementsBaseVertex( mode, start, end, count, type, indices, basevertex );
  }

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEdgeFlagPointer( stride, pointer );

  _context->bv->orig.glEdgeFlagPointer(stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnable(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnable( cap );

  _context->bv->orig.glEnable(cap);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnableClientState(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnableClientState( cap );

  _context->bv->orig.glEnableClientState(cap);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnableClientStateIndexedEXT( array, index );

  _context->bv->orig.glEnableClientStateIndexedEXT(array, index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnableClientStateiEXT(GLenum array, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnableClientStateiEXT( array, index );

  _context->bv->orig.glEnableClientStateiEXT(array, index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnableIndexedEXT(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnableIndexedEXT( target, index );

  _context->bv->orig.glEnableIndexedEXT(target, index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnableVertexArrayAttribEXT( vaobj, array );

  _context->bv->orig.glEnableVertexArrayAttribEXT(vaobj, array);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnableVertexArrayEXT( vaobj, array );

  _context->bv->orig.glEnableVertexArrayEXT(vaobj, array);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnableVertexAttribArray(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnableVertexAttribArray( index );

  _context->bv->orig.glEnableVertexAttribArray(index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glEnablei(GLenum cap, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glEnablei( cap, index );

  _context->bv->orig.glEnablei(cap, index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glFogCoordPointer( type, stride, pointer );

  _context->bv->orig.glFogCoordPointer(type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glIndexPointer( type, stride, pointer );

  _context->bv->orig.glIndexPointer(type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glInterleavedArrays( format, stride, pointer );

  _context->bv->orig.glInterleavedArrays(format, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // impl
  if( ! _context->bv->glMultiDrawElementsBaseVertex( *_context, mode, count, type, indices, primcount, basevertex ) ) {
    _context->emu.curr.glMultiDrawElementsBaseVertex( mode, count, type, indices, primcount, basevertex );
  }

}

static void REGAL_CALL emuProcInterceptBaseVertex_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glMultiTexCoordPointerEXT( texunit, size, type, stride, pointer );

  _context->bv->orig.glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glNormalPointer( type, stride, pointer );

  _context->bv->orig.glNormalPointer(type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glPrimitiveRestartIndex(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glPrimitiveRestartIndex( index );

  _context->bv->orig.glPrimitiveRestartIndex(index);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glSecondaryColorPointer( size, type, stride, pointer );

  _context->bv->orig.glSecondaryColorPointer(size, type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glTexCoordPointer( size, type, stride, pointer );

  _context->bv->orig.glTexCoordPointer(size, type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayColorOffsetEXT( vaobj, buffer, size, type, stride, offset );

  _context->bv->orig.glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayEdgeFlagOffsetEXT( vaobj, buffer, stride, offset );

  _context->bv->orig.glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayFogCoordOffsetEXT( vaobj, buffer, type, stride, offset );

  _context->bv->orig.glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayIndexOffsetEXT( vaobj, buffer, type, stride, offset );

  _context->bv->orig.glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayMultiTexCoordOffsetEXT( vaobj, buffer, texunit, size, type, stride, offset );

  _context->bv->orig.glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayNormalOffsetEXT( vaobj, buffer, type, stride, offset );

  _context->bv->orig.glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArraySecondaryColorOffsetEXT( vaobj, buffer, size, type, stride, offset );

  _context->bv->orig.glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayTexCoordOffsetEXT( vaobj, buffer, size, type, stride, offset );

  _context->bv->orig.glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayVertexAttribIOffsetEXT( vaobj, buffer, index, size, type, stride, offset );

  _context->bv->orig.glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayVertexAttribOffsetEXT( vaobj, buffer, index, size, type, normalized, stride, offset );

  _context->bv->orig.glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexArrayVertexOffsetEXT( vaobj, buffer, size, type, stride, offset );

  _context->bv->orig.glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexAttribBinding( attribindex, bindingindex );

  _context->bv->orig.glVertexAttribBinding(attribindex, bindingindex);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexAttribDivisor(GLuint index, GLuint divisor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexAttribDivisor( index, divisor );

  _context->bv->orig.glVertexAttribDivisor(index, divisor);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexAttribFormat( attribindex, size, type, normalized, relativeoffset );

  _context->bv->orig.glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexAttribIFormat( attribindex, size, type, relativeoffset );

  _context->bv->orig.glVertexAttribIFormat(attribindex, size, type, relativeoffset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexAttribIPointer( index, size, type, stride, pointer );

  _context->bv->orig.glVertexAttribIPointer(index, size, type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexAttribLFormat( attribindex, size, type, relativeoffset );

  _context->bv->orig.glVertexAttribLFormat(attribindex, size, type, relativeoffset);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexAttribLPointer( index, size, type, stride, pointer );

  _context->bv->orig.glVertexAttribLPointer(index, size, type, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexAttribPointer( index, size, type, normalized, stride, pointer );

  _context->bv->orig.glVertexAttribPointer(index, size, type, normalized, stride, pointer);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexBindingDivisor( bindingindex, divisor );

  _context->bv->orig.glVertexBindingDivisor(bindingindex, divisor);

}

static void REGAL_CALL emuProcInterceptBaseVertex_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  // prefix
  _context->bv->glVertexPointer( size, type, stride, pointer );

  _context->bv->orig.glVertexPointer(size, type, stride, pointer);

}

void EmuProcsInterceptBaseVertex( Dispatch::GL & dt ) {
  dt.glBindBuffer                                  = emuProcInterceptBaseVertex_glBindBuffer;
  dt.glBindVertexArray                             = emuProcInterceptBaseVertex_glBindVertexArray;
  dt.glBindVertexBuffer                            = emuProcInterceptBaseVertex_glBindVertexBuffer;
  dt.glClientActiveTexture                         = emuProcInterceptBaseVertex_glClientActiveTexture;
  dt.glClientActiveTextureARB                      = emuProcInterceptBaseVertex_glClientActiveTextureARB;
  dt.glColorPointer                                = emuProcInterceptBaseVertex_glColorPointer;
  dt.glDisable                                     = emuProcInterceptBaseVertex_glDisable;
  dt.glDisableClientState                          = emuProcInterceptBaseVertex_glDisableClientState;
  dt.glDisableClientStateIndexedEXT                = emuProcInterceptBaseVertex_glDisableClientStateIndexedEXT;
  dt.glDisableClientStateiEXT                      = emuProcInterceptBaseVertex_glDisableClientStateiEXT;
  dt.glDisableIndexedEXT                           = emuProcInterceptBaseVertex_glDisableIndexedEXT;
  dt.glDisableVertexArrayAttribEXT                 = emuProcInterceptBaseVertex_glDisableVertexArrayAttribEXT;
  dt.glDisableVertexArrayEXT                       = emuProcInterceptBaseVertex_glDisableVertexArrayEXT;
  dt.glDisableVertexAttribArray                    = emuProcInterceptBaseVertex_glDisableVertexAttribArray;
  dt.glDisablei                                    = emuProcInterceptBaseVertex_glDisablei;
  dt.glDrawElementsBaseVertex                      = emuProcInterceptBaseVertex_glDrawElementsBaseVertex;
  dt.glDrawElementsInstancedBaseVertex             = emuProcInterceptBaseVertex_glDrawElementsInstancedBaseVertex;
  dt.glDrawElementsInstancedBaseVertexBaseInstance = emuProcInterceptBaseVertex_glDrawElementsInstancedBaseVertexBaseInstance;
  dt.glDrawRangeElementsBaseVertex                 = emuProcInterceptBaseVertex_glDrawRangeElementsBaseVertex;
  dt.glEdgeFlagPointer                             = emuProcInterceptBaseVertex_glEdgeFlagPointer;
  dt.glEnable                                      = emuProcInterceptBaseVertex_glEnable;
  dt.glEnableClientState                           = emuProcInterceptBaseVertex_glEnableClientState;
  dt.glEnableClientStateIndexedEXT                 = emuProcInterceptBaseVertex_glEnableClientStateIndexedEXT;
  dt.glEnableClientStateiEXT                       = emuProcInterceptBaseVertex_glEnableClientStateiEXT;
  dt.glEnableIndexedEXT                            = emuProcInterceptBaseVertex_glEnableIndexedEXT;
  dt.glEnableVertexArrayAttribEXT                  = emuProcInterceptBaseVertex_glEnableVertexArrayAttribEXT;
  dt.glEnableVertexArrayEXT                        = emuProcInterceptBaseVertex_glEnableVertexArrayEXT;
  dt.glEnableVertexAttribArray                     = emuProcInterceptBaseVertex_glEnableVertexAttribArray;
  dt.glEnablei                                     = emuProcInterceptBaseVertex_glEnablei;
  dt.glFogCoordPointer                             = emuProcInterceptBaseVertex_glFogCoordPointer;
  dt.glIndexPointer                                = emuProcInterceptBaseVertex_glIndexPointer;
  dt.glInterleavedArrays                           = emuProcInterceptBaseVertex_glInterleavedArrays;
  dt.glMultiDrawElementsBaseVertex                 = emuProcInterceptBaseVertex_glMultiDrawElementsBaseVertex;
  dt.glMultiTexCoordPointerEXT                     = emuProcInterceptBaseVertex_glMultiTexCoordPointerEXT;
  dt.glNormalPointer                               = emuProcInterceptBaseVertex_glNormalPointer;
  dt.glPrimitiveRestartIndex                       = emuProcInterceptBaseVertex_glPrimitiveRestartIndex;
  dt.glSecondaryColorPointer                       = emuProcInterceptBaseVertex_glSecondaryColorPointer;
  dt.glTexCoordPointer                             = emuProcInterceptBaseVertex_glTexCoordPointer;
  dt.glVertexArrayColorOffsetEXT                   = emuProcInterceptBaseVertex_glVertexArrayColorOffsetEXT;
  dt.glVertexArrayEdgeFlagOffsetEXT                = emuProcInterceptBaseVertex_glVertexArrayEdgeFlagOffsetEXT;
  dt.glVertexArrayFogCoordOffsetEXT                = emuProcInterceptBaseVertex_glVertexArrayFogCoordOffsetEXT;
  dt.glVertexArrayIndexOffsetEXT                   = emuProcInterceptBaseVertex_glVertexArrayIndexOffsetEXT;
  dt.glVertexArrayMultiTexCoordOffsetEXT           = emuProcInterceptBaseVertex_glVertexArrayMultiTexCoordOffsetEXT;
  dt.glVertexArrayNormalOffsetEXT                  = emuProcInterceptBaseVertex_glVertexArrayNormalOffsetEXT;
  dt.glVertexArraySecondaryColorOffsetEXT          = emuProcInterceptBaseVertex_glVertexArraySecondaryColorOffsetEXT;
  dt.glVertexArrayTexCoordOffsetEXT                = emuProcInterceptBaseVertex_glVertexArrayTexCoordOffsetEXT;
  dt.glVertexArrayVertexAttribIOffsetEXT           = emuProcInterceptBaseVertex_glVertexArrayVertexAttribIOffsetEXT;
  dt.glVertexArrayVertexAttribOffsetEXT            = emuProcInterceptBaseVertex_glVertexArrayVertexAttribOffsetEXT;
  dt.glVertexArrayVertexOffsetEXT                  = emuProcInterceptBaseVertex_glVertexArrayVertexOffsetEXT;
  dt.glVertexAttribBinding                         = emuProcInterceptBaseVertex_glVertexAttribBinding;
  dt.glVertexAttribDivisor                         = emuProcInterceptBaseVertex_glVertexAttribDivisor;
  dt.glVertexAttribFormat                          = emuProcInterceptBaseVertex_glVertexAttribFormat;
  dt.glVertexAttribIFormat                         = emuProcInterceptBaseVertex_glVertexAttribIFormat;
  dt.glVertexAttribIPointer                        = emuProcInterceptBaseVertex_glVertexAttribIPointer;
  dt.glVertexAttribLFormat                         = emuProcInterceptBaseVertex_glVertexAttribLFormat;
  dt.glVertexAttribLPointer                        = emuProcInterceptBaseVertex_glVertexAttribLPointer;
  dt.glVertexAttribPointer                         = emuProcInterceptBaseVertex_glVertexAttribPointer;
  dt.glVertexBindingDivisor                        = emuProcInterceptBaseVertex_glVertexBindingDivisor;
  dt.glVertexPointer                               = emuProcInterceptBaseVertex_glVertexPointer;
}

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION
