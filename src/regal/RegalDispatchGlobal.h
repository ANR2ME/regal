/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#ifndef __REGAL_DISPATCH_GLOBAL_H__
#define __REGAL_DISPATCH_GLOBAL_H__

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include <vector>
#include <GL/Regal.h>
#include "RegalDispatch.h"

#if REGAL_SYS_OSX
#include <GL/RegalCGL.h>
#endif
#if REGAL_SYS_EGL
#include <GL/RegalEGL.h>
#endif
#if REGAL_SYS_GLX
#include <GL/RegalGLX.h>
#endif
#if REGAL_SYS_WGL
#include <GL/RegalWGL.h>
#endif

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

#if REGAL_SYS_WGL
    // WGL_3DL_stereo_control

typedef BOOL (REGAL_CALL *RWGLSETSTEREOEMITTERSTATE3DLPROC)(Layer *_layer, HDC hDC, UINT uState);
typedef RegalProc<RWGLSETSTEREOEMITTERSTATE3DLPROC> REGALWGLSETSTEREOEMITTERSTATE3DLPROC;

    // WGL_AMD_gpu_association

typedef VOID (REGAL_CALL *RWGLBLITCONTEXTFRAMEBUFFERAMDPROC)(Layer *_layer, HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef RegalProc<RWGLBLITCONTEXTFRAMEBUFFERAMDPROC> REGALWGLBLITCONTEXTFRAMEBUFFERAMDPROC;
typedef HGLRC (REGAL_CALL *RWGLCREATEASSOCIATEDCONTEXTAMDPROC)(Layer *_layer, UINT id);
typedef RegalProc<RWGLCREATEASSOCIATEDCONTEXTAMDPROC> REGALWGLCREATEASSOCIATEDCONTEXTAMDPROC;
typedef HGLRC (REGAL_CALL *RWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(Layer *_layer, UINT id, HGLRC hShareContext, const int *attribList);
typedef RegalProc<RWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC> REGALWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC;
typedef BOOL (REGAL_CALL *RWGLDELETEASSOCIATEDCONTEXTAMDPROC)(Layer *_layer, HGLRC hglrc);
typedef RegalProc<RWGLDELETEASSOCIATEDCONTEXTAMDPROC> REGALWGLDELETEASSOCIATEDCONTEXTAMDPROC;
typedef UINT (REGAL_CALL *RWGLGETCONTEXTGPUIDAMDPROC)(Layer *_layer, HGLRC hglrc);
typedef RegalProc<RWGLGETCONTEXTGPUIDAMDPROC> REGALWGLGETCONTEXTGPUIDAMDPROC;
typedef HGLRC (REGAL_CALL *RWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC)(Layer *_layer);
typedef RegalProc<RWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC> REGALWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC;
typedef UINT (REGAL_CALL *RWGLGETGPUIDSAMDPROC)(Layer *_layer, UINT maxCount, UINT *ids);
typedef RegalProc<RWGLGETGPUIDSAMDPROC> REGALWGLGETGPUIDSAMDPROC;
typedef INT (REGAL_CALL *RWGLGETGPUINFOAMDPROC)(Layer *_layer, UINT id, int property, GLenum dataType, UINT size, void *data);
typedef RegalProc<RWGLGETGPUINFOAMDPROC> REGALWGLGETGPUINFOAMDPROC;
typedef BOOL (REGAL_CALL *RWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(Layer *_layer, HGLRC hglrc);
typedef RegalProc<RWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC> REGALWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC;

    // WGL_ARB_buffer_region

typedef HANDLE (REGAL_CALL *RWGLCREATEBUFFERREGIONARBPROC)(Layer *_layer, HDC hDC, int iLayerPlane, UINT uType);
typedef RegalProc<RWGLCREATEBUFFERREGIONARBPROC> REGALWGLCREATEBUFFERREGIONARBPROC;
typedef VOID (REGAL_CALL *RWGLDELETEBUFFERREGIONARBPROC)(Layer *_layer, HANDLE hRegion);
typedef RegalProc<RWGLDELETEBUFFERREGIONARBPROC> REGALWGLDELETEBUFFERREGIONARBPROC;
typedef BOOL (REGAL_CALL *RWGLRESTOREBUFFERREGIONARBPROC)(Layer *_layer, HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
typedef RegalProc<RWGLRESTOREBUFFERREGIONARBPROC> REGALWGLRESTOREBUFFERREGIONARBPROC;
typedef BOOL (REGAL_CALL *RWGLSAVEBUFFERREGIONARBPROC)(Layer *_layer, HANDLE hRegion, int x, int y, int width, int height);
typedef RegalProc<RWGLSAVEBUFFERREGIONARBPROC> REGALWGLSAVEBUFFERREGIONARBPROC;

    // WGL_ARB_create_context

typedef HGLRC (REGAL_CALL *RWGLCREATECONTEXTATTRIBSARBPROC)(Layer *_layer, HDC hDC, HGLRC hShareContext, const int *piAttribList);
typedef RegalProc<RWGLCREATECONTEXTATTRIBSARBPROC> REGALWGLCREATECONTEXTATTRIBSARBPROC;

    // WGL_ARB_extensions_string

typedef const char *(REGAL_CALL *RWGLGETEXTENSIONSSTRINGARBPROC)(Layer *_layer, HDC hDC);
typedef RegalProc<RWGLGETEXTENSIONSSTRINGARBPROC> REGALWGLGETEXTENSIONSSTRINGARBPROC;

    // WGL_ARB_make_current_read

typedef HDC (REGAL_CALL *RWGLGETCURRENTREADDCARBPROC)(Layer *_layer);
typedef RegalProc<RWGLGETCURRENTREADDCARBPROC> REGALWGLGETCURRENTREADDCARBPROC;
typedef BOOL (REGAL_CALL *RWGLMAKECONTEXTCURRENTARBPROC)(Layer *_layer, HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
typedef RegalProc<RWGLMAKECONTEXTCURRENTARBPROC> REGALWGLMAKECONTEXTCURRENTARBPROC;

    // WGL_ARB_pbuffer

typedef HPBUFFERARB (REGAL_CALL *RWGLCREATEPBUFFERARBPROC)(Layer *_layer, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
typedef RegalProc<RWGLCREATEPBUFFERARBPROC> REGALWGLCREATEPBUFFERARBPROC;
typedef BOOL (REGAL_CALL *RWGLDESTROYPBUFFERARBPROC)(Layer *_layer, HPBUFFERARB hPbuffer);
typedef RegalProc<RWGLDESTROYPBUFFERARBPROC> REGALWGLDESTROYPBUFFERARBPROC;
typedef HDC (REGAL_CALL *RWGLGETPBUFFERDCARBPROC)(Layer *_layer, HPBUFFERARB hPbuffer);
typedef RegalProc<RWGLGETPBUFFERDCARBPROC> REGALWGLGETPBUFFERDCARBPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYPBUFFERARBPROC)(Layer *_layer, HPBUFFERARB hPbuffer, int iAttribute, int *piValue);
typedef RegalProc<RWGLQUERYPBUFFERARBPROC> REGALWGLQUERYPBUFFERARBPROC;
typedef int (REGAL_CALL *RWGLRELEASEPBUFFERDCARBPROC)(Layer *_layer, HPBUFFERARB hPbuffer, HDC hDC);
typedef RegalProc<RWGLRELEASEPBUFFERDCARBPROC> REGALWGLRELEASEPBUFFERDCARBPROC;

    // WGL_ARB_pixel_format

typedef BOOL (REGAL_CALL *RWGLCHOOSEPIXELFORMATARBPROC)(Layer *_layer, HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
typedef RegalProc<RWGLCHOOSEPIXELFORMATARBPROC> REGALWGLCHOOSEPIXELFORMATARBPROC;
typedef BOOL (REGAL_CALL *RWGLGETPIXELFORMATATTRIBFVARBPROC)(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);
typedef RegalProc<RWGLGETPIXELFORMATATTRIBFVARBPROC> REGALWGLGETPIXELFORMATATTRIBFVARBPROC;
typedef BOOL (REGAL_CALL *RWGLGETPIXELFORMATATTRIBIVARBPROC)(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);
typedef RegalProc<RWGLGETPIXELFORMATATTRIBIVARBPROC> REGALWGLGETPIXELFORMATATTRIBIVARBPROC;

    // WGL_ARB_render_texture

typedef BOOL (REGAL_CALL *RWGLBINDTEXIMAGEARBPROC)(Layer *_layer, HPBUFFERARB hPbuffer, int iBuffer);
typedef RegalProc<RWGLBINDTEXIMAGEARBPROC> REGALWGLBINDTEXIMAGEARBPROC;
typedef BOOL (REGAL_CALL *RWGLRELEASETEXIMAGEARBPROC)(Layer *_layer, HPBUFFERARB hPbuffer, int iBuffer);
typedef RegalProc<RWGLRELEASETEXIMAGEARBPROC> REGALWGLRELEASETEXIMAGEARBPROC;
typedef BOOL (REGAL_CALL *RWGLSETPBUFFERATTRIBARBPROC)(Layer *_layer, HPBUFFERARB hPbuffer, const int *piAttribList);
typedef RegalProc<RWGLSETPBUFFERATTRIBARBPROC> REGALWGLSETPBUFFERATTRIBARBPROC;

    // WGL_EXT_display_color_table

typedef GLboolean (REGAL_CALL *RWGLBINDDISPLAYCOLORTABLEEXTPROC)(Layer *_layer, GLushort id);
typedef RegalProc<RWGLBINDDISPLAYCOLORTABLEEXTPROC> REGALWGLBINDDISPLAYCOLORTABLEEXTPROC;
typedef GLboolean (REGAL_CALL *RWGLCREATEDISPLAYCOLORTABLEEXTPROC)(Layer *_layer, GLushort id);
typedef RegalProc<RWGLCREATEDISPLAYCOLORTABLEEXTPROC> REGALWGLCREATEDISPLAYCOLORTABLEEXTPROC;
typedef VOID (REGAL_CALL *RWGLDESTROYDISPLAYCOLORTABLEEXTPROC)(Layer *_layer, GLushort id);
typedef RegalProc<RWGLDESTROYDISPLAYCOLORTABLEEXTPROC> REGALWGLDESTROYDISPLAYCOLORTABLEEXTPROC;
typedef GLboolean (REGAL_CALL *RWGLLOADDISPLAYCOLORTABLEEXTPROC)(Layer *_layer, const GLushort *table, GLuint length);
typedef RegalProc<RWGLLOADDISPLAYCOLORTABLEEXTPROC> REGALWGLLOADDISPLAYCOLORTABLEEXTPROC;

    // WGL_EXT_extensions_string

typedef const char *(REGAL_CALL *RWGLGETEXTENSIONSSTRINGEXTPROC)(Layer *_layer);
typedef RegalProc<RWGLGETEXTENSIONSSTRINGEXTPROC> REGALWGLGETEXTENSIONSSTRINGEXTPROC;

    // WGL_EXT_make_current_read

typedef HDC (REGAL_CALL *RWGLGETCURRENTREADDCEXTPROC)(Layer *_layer);
typedef RegalProc<RWGLGETCURRENTREADDCEXTPROC> REGALWGLGETCURRENTREADDCEXTPROC;
typedef BOOL (REGAL_CALL *RWGLMAKECONTEXTCURRENTEXTPROC)(Layer *_layer, HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
typedef RegalProc<RWGLMAKECONTEXTCURRENTEXTPROC> REGALWGLMAKECONTEXTCURRENTEXTPROC;

    // WGL_EXT_pbuffer

typedef HPBUFFEREXT (REGAL_CALL *RWGLCREATEPBUFFEREXTPROC)(Layer *_layer, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
typedef RegalProc<RWGLCREATEPBUFFEREXTPROC> REGALWGLCREATEPBUFFEREXTPROC;
typedef BOOL (REGAL_CALL *RWGLDESTROYPBUFFEREXTPROC)(Layer *_layer, HPBUFFEREXT hPbuffer);
typedef RegalProc<RWGLDESTROYPBUFFEREXTPROC> REGALWGLDESTROYPBUFFEREXTPROC;
typedef HDC (REGAL_CALL *RWGLGETPBUFFERDCEXTPROC)(Layer *_layer, HPBUFFEREXT hPbuffer);
typedef RegalProc<RWGLGETPBUFFERDCEXTPROC> REGALWGLGETPBUFFERDCEXTPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYPBUFFEREXTPROC)(Layer *_layer, HPBUFFEREXT hPbuffer, int iAttribute, int *piValue);
typedef RegalProc<RWGLQUERYPBUFFEREXTPROC> REGALWGLQUERYPBUFFEREXTPROC;
typedef int (REGAL_CALL *RWGLRELEASEPBUFFERDCEXTPROC)(Layer *_layer, HPBUFFEREXT hPbuffer, HDC hDC);
typedef RegalProc<RWGLRELEASEPBUFFERDCEXTPROC> REGALWGLRELEASEPBUFFERDCEXTPROC;

    // WGL_EXT_pixel_format

typedef BOOL (REGAL_CALL *RWGLCHOOSEPIXELFORMATEXTPROC)(Layer *_layer, HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
typedef RegalProc<RWGLCHOOSEPIXELFORMATEXTPROC> REGALWGLCHOOSEPIXELFORMATEXTPROC;
typedef BOOL (REGAL_CALL *RWGLGETPIXELFORMATATTRIBFVEXTPROC)(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);
typedef RegalProc<RWGLGETPIXELFORMATATTRIBFVEXTPROC> REGALWGLGETPIXELFORMATATTRIBFVEXTPROC;
typedef BOOL (REGAL_CALL *RWGLGETPIXELFORMATATTRIBIVEXTPROC)(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);
typedef RegalProc<RWGLGETPIXELFORMATATTRIBIVEXTPROC> REGALWGLGETPIXELFORMATATTRIBIVEXTPROC;

    // WGL_EXT_swap_control

typedef int (REGAL_CALL *RWGLGETSWAPINTERVALEXTPROC)(Layer *_layer);
typedef RegalProc<RWGLGETSWAPINTERVALEXTPROC> REGALWGLGETSWAPINTERVALEXTPROC;
typedef BOOL (REGAL_CALL *RWGLSWAPINTERVALEXTPROC)(Layer *_layer, int interval);
typedef RegalProc<RWGLSWAPINTERVALEXTPROC> REGALWGLSWAPINTERVALEXTPROC;

    // WGL_GDI

typedef BOOL (REGAL_CALL *RSWAPBUFFERSPROC)(Layer *_layer, HDC hDC);
typedef RegalProc<RSWAPBUFFERSPROC> REGALSWAPBUFFERSPROC;
typedef int (REGAL_CALL *RWGLCHOOSEPIXELFORMATPROC)(Layer *_layer, HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd);
typedef RegalProc<RWGLCHOOSEPIXELFORMATPROC> REGALWGLCHOOSEPIXELFORMATPROC;
typedef int (REGAL_CALL *RWGLDESCRIBEPIXELFORMATPROC)(Layer *_layer, HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
typedef RegalProc<RWGLDESCRIBEPIXELFORMATPROC> REGALWGLDESCRIBEPIXELFORMATPROC;
typedef int (REGAL_CALL *RWGLGETPIXELFORMATPROC)(Layer *_layer, HDC hDC);
typedef RegalProc<RWGLGETPIXELFORMATPROC> REGALWGLGETPIXELFORMATPROC;
typedef BOOL (REGAL_CALL *RWGLSETPIXELFORMATPROC)(Layer *_layer, HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd);
typedef RegalProc<RWGLSETPIXELFORMATPROC> REGALWGLSETPIXELFORMATPROC;
typedef BOOL (REGAL_CALL *RWGLSWAPBUFFERSPROC)(Layer *_layer, HDC hDC);
typedef RegalProc<RWGLSWAPBUFFERSPROC> REGALWGLSWAPBUFFERSPROC;

    // WGL_I3D_digital_video_control

typedef BOOL (REGAL_CALL *RWGLGETDIGITALVIDEOPARAMETERSI3DPROC)(Layer *_layer, HDC hDC, int iAttribute, int *piValue);
typedef RegalProc<RWGLGETDIGITALVIDEOPARAMETERSI3DPROC> REGALWGLGETDIGITALVIDEOPARAMETERSI3DPROC;
typedef BOOL (REGAL_CALL *RWGLSETDIGITALVIDEOPARAMETERSI3DPROC)(Layer *_layer, HDC hDC, int iAttribute, const int *piValue);
typedef RegalProc<RWGLSETDIGITALVIDEOPARAMETERSI3DPROC> REGALWGLSETDIGITALVIDEOPARAMETERSI3DPROC;

    // WGL_I3D_gamma

typedef BOOL (REGAL_CALL *RWGLGETGAMMATABLEI3DPROC)(Layer *_layer, HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue);
typedef RegalProc<RWGLGETGAMMATABLEI3DPROC> REGALWGLGETGAMMATABLEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGETGAMMATABLEPARAMETERSI3DPROC)(Layer *_layer, HDC hDC, int iAttribute, int *piValue);
typedef RegalProc<RWGLGETGAMMATABLEPARAMETERSI3DPROC> REGALWGLGETGAMMATABLEPARAMETERSI3DPROC;
typedef BOOL (REGAL_CALL *RWGLSETGAMMATABLEI3DPROC)(Layer *_layer, HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue);
typedef RegalProc<RWGLSETGAMMATABLEI3DPROC> REGALWGLSETGAMMATABLEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLSETGAMMATABLEPARAMETERSI3DPROC)(Layer *_layer, HDC hDC, int iAttribute, const int *piValue);
typedef RegalProc<RWGLSETGAMMATABLEPARAMETERSI3DPROC> REGALWGLSETGAMMATABLEPARAMETERSI3DPROC;

    // WGL_I3D_genlock

typedef BOOL (REGAL_CALL *RWGLDISABLEGENLOCKI3DPROC)(Layer *_layer, HDC hDC);
typedef RegalProc<RWGLDISABLEGENLOCKI3DPROC> REGALWGLDISABLEGENLOCKI3DPROC;
typedef BOOL (REGAL_CALL *RWGLENABLEGENLOCKI3DPROC)(Layer *_layer, HDC hDC);
typedef RegalProc<RWGLENABLEGENLOCKI3DPROC> REGALWGLENABLEGENLOCKI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGENLOCKSAMPLERATEI3DPROC)(Layer *_layer, HDC hDC, UINT uRate);
typedef RegalProc<RWGLGENLOCKSAMPLERATEI3DPROC> REGALWGLGENLOCKSAMPLERATEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGENLOCKSOURCEDELAYI3DPROC)(Layer *_layer, HDC hDC, UINT uDelay);
typedef RegalProc<RWGLGENLOCKSOURCEDELAYI3DPROC> REGALWGLGENLOCKSOURCEDELAYI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGENLOCKSOURCEEDGEI3DPROC)(Layer *_layer, HDC hDC, UINT uEdge);
typedef RegalProc<RWGLGENLOCKSOURCEEDGEI3DPROC> REGALWGLGENLOCKSOURCEEDGEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGENLOCKSOURCEI3DPROC)(Layer *_layer, HDC hDC, UINT uSource);
typedef RegalProc<RWGLGENLOCKSOURCEI3DPROC> REGALWGLGENLOCKSOURCEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGETGENLOCKSAMPLERATEI3DPROC)(Layer *_layer, HDC hDC, UINT *uRate);
typedef RegalProc<RWGLGETGENLOCKSAMPLERATEI3DPROC> REGALWGLGETGENLOCKSAMPLERATEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGETGENLOCKSOURCEDELAYI3DPROC)(Layer *_layer, HDC hDC, UINT *uDelay);
typedef RegalProc<RWGLGETGENLOCKSOURCEDELAYI3DPROC> REGALWGLGETGENLOCKSOURCEDELAYI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGETGENLOCKSOURCEEDGEI3DPROC)(Layer *_layer, HDC hDC, UINT *uEdge);
typedef RegalProc<RWGLGETGENLOCKSOURCEEDGEI3DPROC> REGALWGLGETGENLOCKSOURCEEDGEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGETGENLOCKSOURCEI3DPROC)(Layer *_layer, HDC hDC, UINT *uSource);
typedef RegalProc<RWGLGETGENLOCKSOURCEI3DPROC> REGALWGLGETGENLOCKSOURCEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLISENABLEDGENLOCKI3DPROC)(Layer *_layer, HDC hDC, BOOL *pFlag);
typedef RegalProc<RWGLISENABLEDGENLOCKI3DPROC> REGALWGLISENABLEDGENLOCKI3DPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC)(Layer *_layer, HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay);
typedef RegalProc<RWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC> REGALWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC;

    // WGL_I3D_image_buffer

typedef BOOL (REGAL_CALL *RWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC)(Layer *_layer, HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count);
typedef RegalProc<RWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC> REGALWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC;
typedef LPVOID (REGAL_CALL *RWGLCREATEIMAGEBUFFERI3DPROC)(Layer *_layer, HDC hDC, DWORD dwSize, UINT uFlags);
typedef RegalProc<RWGLCREATEIMAGEBUFFERI3DPROC> REGALWGLCREATEIMAGEBUFFERI3DPROC;
typedef BOOL (REGAL_CALL *RWGLDESTROYIMAGEBUFFERI3DPROC)(Layer *_layer, HDC hDC, LPVOID pAddress);
typedef RegalProc<RWGLDESTROYIMAGEBUFFERI3DPROC> REGALWGLDESTROYIMAGEBUFFERI3DPROC;
typedef BOOL (REGAL_CALL *RWGLRELEASEIMAGEBUFFEREVENTSI3DPROC)(Layer *_layer, HDC hDC, const LPVOID *pAddress, UINT count);
typedef RegalProc<RWGLRELEASEIMAGEBUFFEREVENTSI3DPROC> REGALWGLRELEASEIMAGEBUFFEREVENTSI3DPROC;

    // WGL_I3D_swap_frame_lock

typedef BOOL (REGAL_CALL *RWGLDISABLEFRAMELOCKI3DPROC)(Layer *_layer);
typedef RegalProc<RWGLDISABLEFRAMELOCKI3DPROC> REGALWGLDISABLEFRAMELOCKI3DPROC;
typedef BOOL (REGAL_CALL *RWGLENABLEFRAMELOCKI3DPROC)(Layer *_layer);
typedef RegalProc<RWGLENABLEFRAMELOCKI3DPROC> REGALWGLENABLEFRAMELOCKI3DPROC;
typedef BOOL (REGAL_CALL *RWGLISENABLEDFRAMELOCKI3DPROC)(Layer *_layer, BOOL *pFlag);
typedef RegalProc<RWGLISENABLEDFRAMELOCKI3DPROC> REGALWGLISENABLEDFRAMELOCKI3DPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYFRAMELOCKMASTERI3DPROC)(Layer *_layer, BOOL *pFlag);
typedef RegalProc<RWGLQUERYFRAMELOCKMASTERI3DPROC> REGALWGLQUERYFRAMELOCKMASTERI3DPROC;

    // WGL_I3D_swap_frame_usage

typedef BOOL (REGAL_CALL *RWGLBEGINFRAMETRACKINGI3DPROC)(Layer *_layer);
typedef RegalProc<RWGLBEGINFRAMETRACKINGI3DPROC> REGALWGLBEGINFRAMETRACKINGI3DPROC;
typedef BOOL (REGAL_CALL *RWGLENDFRAMETRACKINGI3DPROC)(Layer *_layer);
typedef RegalProc<RWGLENDFRAMETRACKINGI3DPROC> REGALWGLENDFRAMETRACKINGI3DPROC;
typedef BOOL (REGAL_CALL *RWGLGETFRAMEUSAGEI3DPROC)(Layer *_layer, float *pUsage);
typedef RegalProc<RWGLGETFRAMEUSAGEI3DPROC> REGALWGLGETFRAMEUSAGEI3DPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYFRAMETRACKINGI3DPROC)(Layer *_layer, DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
typedef RegalProc<RWGLQUERYFRAMETRACKINGI3DPROC> REGALWGLQUERYFRAMETRACKINGI3DPROC;

    // WGL_NV_DX_interop

typedef BOOL (REGAL_CALL *RWGLDXCLOSEDEVICENVPROC)(Layer *_layer, HANDLE hDevice);
typedef RegalProc<RWGLDXCLOSEDEVICENVPROC> REGALWGLDXCLOSEDEVICENVPROC;
typedef BOOL (REGAL_CALL *RWGLDXLOCKOBJECTSNVPROC)(Layer *_layer, HANDLE hDevice, GLint count, HANDLE *hObjects);
typedef RegalProc<RWGLDXLOCKOBJECTSNVPROC> REGALWGLDXLOCKOBJECTSNVPROC;
typedef BOOL (REGAL_CALL *RWGLDXOBJECTACCESSNVPROC)(Layer *_layer, HANDLE hObject, GLenum access);
typedef RegalProc<RWGLDXOBJECTACCESSNVPROC> REGALWGLDXOBJECTACCESSNVPROC;
typedef HANDLE (REGAL_CALL *RWGLDXOPENDEVICENVPROC)(Layer *_layer, GLvoid *dxDevice);
typedef RegalProc<RWGLDXOPENDEVICENVPROC> REGALWGLDXOPENDEVICENVPROC;
typedef HANDLE (REGAL_CALL *RWGLDXREGISTEROBJECTNVPROC)(Layer *_layer, HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access);
typedef RegalProc<RWGLDXREGISTEROBJECTNVPROC> REGALWGLDXREGISTEROBJECTNVPROC;
typedef BOOL (REGAL_CALL *RWGLDXSETRESOURCESHAREHANDLENVPROC)(Layer *_layer, GLvoid *dxObject, HANDLE shareHandle);
typedef RegalProc<RWGLDXSETRESOURCESHAREHANDLENVPROC> REGALWGLDXSETRESOURCESHAREHANDLENVPROC;
typedef BOOL (REGAL_CALL *RWGLDXUNLOCKOBJECTSNVPROC)(Layer *_layer, HANDLE hDevice, GLint count, HANDLE *hObjects);
typedef RegalProc<RWGLDXUNLOCKOBJECTSNVPROC> REGALWGLDXUNLOCKOBJECTSNVPROC;
typedef BOOL (REGAL_CALL *RWGLDXUNREGISTEROBJECTNVPROC)(Layer *_layer, HANDLE hDevice, HANDLE hObject);
typedef RegalProc<RWGLDXUNREGISTEROBJECTNVPROC> REGALWGLDXUNREGISTEROBJECTNVPROC;

    // WGL_NV_copy_image

typedef BOOL (REGAL_CALL *RWGLCOPYIMAGESUBDATANVPROC)(Layer *_layer, HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef RegalProc<RWGLCOPYIMAGESUBDATANVPROC> REGALWGLCOPYIMAGESUBDATANVPROC;

    // WGL_NV_gpu_affinity

typedef HDC (REGAL_CALL *RWGLCREATEAFFINITYDCNVPROC)(Layer *_layer, const HGPUNV *phGpuList);
typedef RegalProc<RWGLCREATEAFFINITYDCNVPROC> REGALWGLCREATEAFFINITYDCNVPROC;
typedef BOOL (REGAL_CALL *RWGLDELETEDCNVPROC)(Layer *_layer, HDC hAffinityDC);
typedef RegalProc<RWGLDELETEDCNVPROC> REGALWGLDELETEDCNVPROC;
typedef BOOL (REGAL_CALL *RWGLENUMGPUDEVICESNVPROC)(Layer *_layer, HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
typedef RegalProc<RWGLENUMGPUDEVICESNVPROC> REGALWGLENUMGPUDEVICESNVPROC;
typedef BOOL (REGAL_CALL *RWGLENUMGPUSFROMAFFINITYDCNVPROC)(Layer *_layer, HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
typedef RegalProc<RWGLENUMGPUSFROMAFFINITYDCNVPROC> REGALWGLENUMGPUSFROMAFFINITYDCNVPROC;
typedef BOOL (REGAL_CALL *RWGLENUMGPUSNVPROC)(Layer *_layer, UINT iGpuIndex, HGPUNV *phGpu);
typedef RegalProc<RWGLENUMGPUSNVPROC> REGALWGLENUMGPUSNVPROC;

    // WGL_NV_present_video

typedef BOOL (REGAL_CALL *RWGLBINDVIDEODEVICENVPROC)(Layer *_layer, HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
typedef RegalProc<RWGLBINDVIDEODEVICENVPROC> REGALWGLBINDVIDEODEVICENVPROC;
typedef int (REGAL_CALL *RWGLENUMERATEVIDEODEVICESNVPROC)(Layer *_layer, HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList);
typedef RegalProc<RWGLENUMERATEVIDEODEVICESNVPROC> REGALWGLENUMERATEVIDEODEVICESNVPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYCURRENTCONTEXTNVPROC)(Layer *_layer, int iAttribute, int *piValue);
typedef RegalProc<RWGLQUERYCURRENTCONTEXTNVPROC> REGALWGLQUERYCURRENTCONTEXTNVPROC;

    // WGL_NV_swap_group

typedef BOOL (REGAL_CALL *RWGLBINDSWAPBARRIERNVPROC)(Layer *_layer, GLuint group, GLuint barrier);
typedef RegalProc<RWGLBINDSWAPBARRIERNVPROC> REGALWGLBINDSWAPBARRIERNVPROC;
typedef BOOL (REGAL_CALL *RWGLJOINSWAPGROUPNVPROC)(Layer *_layer, HDC hDC, GLuint group);
typedef RegalProc<RWGLJOINSWAPGROUPNVPROC> REGALWGLJOINSWAPGROUPNVPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYFRAMECOUNTNVPROC)(Layer *_layer, HDC hDC, GLuint *count);
typedef RegalProc<RWGLQUERYFRAMECOUNTNVPROC> REGALWGLQUERYFRAMECOUNTNVPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYMAXSWAPGROUPSNVPROC)(Layer *_layer, HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
typedef RegalProc<RWGLQUERYMAXSWAPGROUPSNVPROC> REGALWGLQUERYMAXSWAPGROUPSNVPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYSWAPGROUPNVPROC)(Layer *_layer, HDC hDC, GLuint *group, GLuint *barrier);
typedef RegalProc<RWGLQUERYSWAPGROUPNVPROC> REGALWGLQUERYSWAPGROUPNVPROC;
typedef BOOL (REGAL_CALL *RWGLRESETFRAMECOUNTNVPROC)(Layer *_layer, HDC hDC);
typedef RegalProc<RWGLRESETFRAMECOUNTNVPROC> REGALWGLRESETFRAMECOUNTNVPROC;

    // WGL_NV_vertex_array_range

typedef void *(REGAL_CALL *RWGLALLOCATEMEMORYNVPROC)(Layer *_layer, GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
typedef RegalProc<RWGLALLOCATEMEMORYNVPROC> REGALWGLALLOCATEMEMORYNVPROC;
typedef void (REGAL_CALL *RWGLFREEMEMORYNVPROC)(Layer *_layer, void *pointer);
typedef RegalProc<RWGLFREEMEMORYNVPROC> REGALWGLFREEMEMORYNVPROC;

    // WGL_NV_video_capture

typedef BOOL (REGAL_CALL *RWGLBINDVIDEOCAPTUREDEVICENVPROC)(Layer *_layer, UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
typedef RegalProc<RWGLBINDVIDEOCAPTUREDEVICENVPROC> REGALWGLBINDVIDEOCAPTUREDEVICENVPROC;
typedef UINT (REGAL_CALL *RWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC)(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList);
typedef RegalProc<RWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC> REGALWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC;
typedef BOOL (REGAL_CALL *RWGLLOCKVIDEOCAPTUREDEVICENVPROC)(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice);
typedef RegalProc<RWGLLOCKVIDEOCAPTUREDEVICENVPROC> REGALWGLLOCKVIDEOCAPTUREDEVICENVPROC;
typedef BOOL (REGAL_CALL *RWGLQUERYVIDEOCAPTUREDEVICENVPROC)(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
typedef RegalProc<RWGLQUERYVIDEOCAPTUREDEVICENVPROC> REGALWGLQUERYVIDEOCAPTUREDEVICENVPROC;
typedef BOOL (REGAL_CALL *RWGLRELEASEVIDEOCAPTUREDEVICENVPROC)(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice);
typedef RegalProc<RWGLRELEASEVIDEOCAPTUREDEVICENVPROC> REGALWGLRELEASEVIDEOCAPTUREDEVICENVPROC;

    // WGL_NV_video_output

typedef BOOL (REGAL_CALL *RWGLBINDVIDEOIMAGENVPROC)(Layer *_layer, HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
typedef RegalProc<RWGLBINDVIDEOIMAGENVPROC> REGALWGLBINDVIDEOIMAGENVPROC;
typedef BOOL (REGAL_CALL *RWGLGETVIDEODEVICENVPROC)(Layer *_layer, HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
typedef RegalProc<RWGLGETVIDEODEVICENVPROC> REGALWGLGETVIDEODEVICENVPROC;
typedef BOOL (REGAL_CALL *RWGLGETVIDEOINFONVPROC)(Layer *_layer, HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
typedef RegalProc<RWGLGETVIDEOINFONVPROC> REGALWGLGETVIDEOINFONVPROC;
typedef BOOL (REGAL_CALL *RWGLRELEASEVIDEODEVICENVPROC)(Layer *_layer, HPVIDEODEV hVideoDevice);
typedef RegalProc<RWGLRELEASEVIDEODEVICENVPROC> REGALWGLRELEASEVIDEODEVICENVPROC;
typedef BOOL (REGAL_CALL *RWGLRELEASEVIDEOIMAGENVPROC)(Layer *_layer, HPBUFFERARB hPbuffer, int iVideoBuffer);
typedef RegalProc<RWGLRELEASEVIDEOIMAGENVPROC> REGALWGLRELEASEVIDEOIMAGENVPROC;
typedef BOOL (REGAL_CALL *RWGLSENDPBUFFERTOVIDEONVPROC)(Layer *_layer, HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);
typedef RegalProc<RWGLSENDPBUFFERTOVIDEONVPROC> REGALWGLSENDPBUFFERTOVIDEONVPROC;

    // WGL_OML_sync_control

typedef BOOL (REGAL_CALL *RWGLGETMSCRATEOMLPROC)(Layer *_layer, HDC hDC, INT32 *numerator, INT32 *denominator);
typedef RegalProc<RWGLGETMSCRATEOMLPROC> REGALWGLGETMSCRATEOMLPROC;
typedef BOOL (REGAL_CALL *RWGLGETSYNCVALUESOMLPROC)(Layer *_layer, HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc);
typedef RegalProc<RWGLGETSYNCVALUESOMLPROC> REGALWGLGETSYNCVALUESOMLPROC;
typedef INT64 (REGAL_CALL *RWGLSWAPBUFFERSMSCOMLPROC)(Layer *_layer, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder);
typedef RegalProc<RWGLSWAPBUFFERSMSCOMLPROC> REGALWGLSWAPBUFFERSMSCOMLPROC;
typedef INT64 (REGAL_CALL *RWGLSWAPLAYERBUFFERSMSCOMLPROC)(Layer *_layer, HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
typedef RegalProc<RWGLSWAPLAYERBUFFERSMSCOMLPROC> REGALWGLSWAPLAYERBUFFERSMSCOMLPROC;
typedef BOOL (REGAL_CALL *RWGLWAITFORMSCOMLPROC)(Layer *_layer, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc);
typedef RegalProc<RWGLWAITFORMSCOMLPROC> REGALWGLWAITFORMSCOMLPROC;
typedef BOOL (REGAL_CALL *RWGLWAITFORSBCOMLPROC)(Layer *_layer, HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc);
typedef RegalProc<RWGLWAITFORSBCOMLPROC> REGALWGLWAITFORSBCOMLPROC;

    // WGL_core

typedef BOOL (REGAL_CALL *RWGLCOPYCONTEXTPROC)(Layer *_layer, HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask);
typedef RegalProc<RWGLCOPYCONTEXTPROC> REGALWGLCOPYCONTEXTPROC;
typedef HGLRC (REGAL_CALL *RWGLCREATECONTEXTPROC)(Layer *_layer, HDC hDC);
typedef RegalProc<RWGLCREATECONTEXTPROC> REGALWGLCREATECONTEXTPROC;
typedef HGLRC (REGAL_CALL *RWGLCREATELAYERCONTEXTPROC)(Layer *_layer, HDC hDC, int iLayerPlane);
typedef RegalProc<RWGLCREATELAYERCONTEXTPROC> REGALWGLCREATELAYERCONTEXTPROC;
typedef BOOL (REGAL_CALL *RWGLDELETECONTEXTPROC)(Layer *_layer, HGLRC hglrc);
typedef RegalProc<RWGLDELETECONTEXTPROC> REGALWGLDELETECONTEXTPROC;
typedef BOOL (REGAL_CALL *RWGLDESCRIBELAYERPLANEPROC)(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd);
typedef RegalProc<RWGLDESCRIBELAYERPLANEPROC> REGALWGLDESCRIBELAYERPLANEPROC;
typedef HGLRC (REGAL_CALL *RWGLGETCURRENTCONTEXTPROC)(Layer *_layer);
typedef RegalProc<RWGLGETCURRENTCONTEXTPROC> REGALWGLGETCURRENTCONTEXTPROC;
typedef HDC (REGAL_CALL *RWGLGETCURRENTDCPROC)(Layer *_layer);
typedef RegalProc<RWGLGETCURRENTDCPROC> REGALWGLGETCURRENTDCPROC;
typedef PROC (REGAL_CALL *RWGLGETDEFAULTPROCADDRESSPROC)(Layer *_layer, LPCSTR lpszProc);
typedef RegalProc<RWGLGETDEFAULTPROCADDRESSPROC> REGALWGLGETDEFAULTPROCADDRESSPROC;
typedef int (REGAL_CALL *RWGLGETLAYERPALETTEENTRIESPROC)(Layer *_layer, HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr);
typedef RegalProc<RWGLGETLAYERPALETTEENTRIESPROC> REGALWGLGETLAYERPALETTEENTRIESPROC;
typedef PROC (REGAL_CALL *RWGLGETPROCADDRESSPROC)(Layer *_layer, LPCSTR lpszProc);
typedef RegalProc<RWGLGETPROCADDRESSPROC> REGALWGLGETPROCADDRESSPROC;
typedef BOOL (REGAL_CALL *RWGLMAKECURRENTPROC)(Layer *_layer, HDC hDC, HGLRC hglrc);
typedef RegalProc<RWGLMAKECURRENTPROC> REGALWGLMAKECURRENTPROC;
typedef BOOL (REGAL_CALL *RWGLREALIZELAYERPALETTEPROC)(Layer *_layer, HDC hDC, int iLayerPlane, BOOL bRealize);
typedef RegalProc<RWGLREALIZELAYERPALETTEPROC> REGALWGLREALIZELAYERPALETTEPROC;
typedef int (REGAL_CALL *RWGLSETLAYERPALETTEENTRIESPROC)(Layer *_layer, HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr);
typedef RegalProc<RWGLSETLAYERPALETTEENTRIESPROC> REGALWGLSETLAYERPALETTEENTRIESPROC;
typedef BOOL (REGAL_CALL *RWGLSHARELISTSPROC)(Layer *_layer, HGLRC hglrcShare, HGLRC hglrcSrc);
typedef RegalProc<RWGLSHARELISTSPROC> REGALWGLSHARELISTSPROC;
typedef BOOL (REGAL_CALL *RWGLSWAPLAYERBUFFERSPROC)(Layer *_layer, HDC hDC, UINT fuPlanes);
typedef RegalProc<RWGLSWAPLAYERBUFFERSPROC> REGALWGLSWAPLAYERBUFFERSPROC;
typedef DWORD (REGAL_CALL *RWGLSWAPMULTIPLEBUFFERSPROC)(Layer *_layer, UINT n, const WGLSWAP *ps);
typedef RegalProc<RWGLSWAPMULTIPLEBUFFERSPROC> REGALWGLSWAPMULTIPLEBUFFERSPROC;
typedef BOOL (REGAL_CALL *RWGLUSEFONTBITMAPSAPROC)(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase);
typedef RegalProc<RWGLUSEFONTBITMAPSAPROC> REGALWGLUSEFONTBITMAPSAPROC;
typedef BOOL (REGAL_CALL *RWGLUSEFONTBITMAPSWPROC)(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase);
typedef RegalProc<RWGLUSEFONTBITMAPSWPROC> REGALWGLUSEFONTBITMAPSWPROC;
typedef BOOL (REGAL_CALL *RWGLUSEFONTOUTLINESAPROC)(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf);
typedef RegalProc<RWGLUSEFONTOUTLINESAPROC> REGALWGLUSEFONTOUTLINESAPROC;
typedef BOOL (REGAL_CALL *RWGLUSEFONTOUTLINESWPROC)(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf);
typedef RegalProc<RWGLUSEFONTOUTLINESWPROC> REGALWGLUSEFONTOUTLINESWPROC;
#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX
    // GLX_VERSION_1_0

typedef XVisualInfo *(REGAL_CALL *RGLXCHOOSEVISUALPROC)(Layer *_layer, Display *dpy, int screen, int *attribList);
typedef RegalProc<RGLXCHOOSEVISUALPROC> REGALGLXCHOOSEVISUALPROC;
typedef void (REGAL_CALL *RGLXCOPYCONTEXTPROC)(Layer *_layer, Display *dpy, GLXContext src, GLXContext dst, unsigned long mask);
typedef RegalProc<RGLXCOPYCONTEXTPROC> REGALGLXCOPYCONTEXTPROC;
typedef GLXContext (REGAL_CALL *RGLXCREATECONTEXTPROC)(Layer *_layer, Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct);
typedef RegalProc<RGLXCREATECONTEXTPROC> REGALGLXCREATECONTEXTPROC;
typedef GLXPixmap (REGAL_CALL *RGLXCREATEGLXPIXMAPPROC)(Layer *_layer, Display *dpy, XVisualInfo *vis, Pixmap pixmap);
typedef RegalProc<RGLXCREATEGLXPIXMAPPROC> REGALGLXCREATEGLXPIXMAPPROC;
typedef void (REGAL_CALL *RGLXDESTROYCONTEXTPROC)(Layer *_layer, Display *dpy, GLXContext ctx);
typedef RegalProc<RGLXDESTROYCONTEXTPROC> REGALGLXDESTROYCONTEXTPROC;
typedef void (REGAL_CALL *RGLXDESTROYGLXPIXMAPPROC)(Layer *_layer, Display *dpy, GLXPixmap pix);
typedef RegalProc<RGLXDESTROYGLXPIXMAPPROC> REGALGLXDESTROYGLXPIXMAPPROC;
typedef int (REGAL_CALL *RGLXGETCONFIGPROC)(Layer *_layer, Display *dpy, XVisualInfo *vis, int attrib, int *value);
typedef RegalProc<RGLXGETCONFIGPROC> REGALGLXGETCONFIGPROC;
typedef GLXContext (REGAL_CALL *RGLXGETCURRENTCONTEXTPROC)(Layer *_layer);
typedef RegalProc<RGLXGETCURRENTCONTEXTPROC> REGALGLXGETCURRENTCONTEXTPROC;
typedef GLXDrawable (REGAL_CALL *RGLXGETCURRENTDRAWABLEPROC)(Layer *_layer);
typedef RegalProc<RGLXGETCURRENTDRAWABLEPROC> REGALGLXGETCURRENTDRAWABLEPROC;
typedef Bool (REGAL_CALL *RGLXISDIRECTPROC)(Layer *_layer, Display *dpy, GLXContext ctx);
typedef RegalProc<RGLXISDIRECTPROC> REGALGLXISDIRECTPROC;
typedef Bool (REGAL_CALL *RGLXMAKECURRENTPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, GLXContext ctx);
typedef RegalProc<RGLXMAKECURRENTPROC> REGALGLXMAKECURRENTPROC;
typedef Bool (REGAL_CALL *RGLXQUERYEXTENSIONPROC)(Layer *_layer, Display *dpy, int *errorBase, int *eventBase);
typedef RegalProc<RGLXQUERYEXTENSIONPROC> REGALGLXQUERYEXTENSIONPROC;
typedef Bool (REGAL_CALL *RGLXQUERYVERSIONPROC)(Layer *_layer, Display *dpy, int *major, int *minor);
typedef RegalProc<RGLXQUERYVERSIONPROC> REGALGLXQUERYVERSIONPROC;
typedef void (REGAL_CALL *RGLXSWAPBUFFERSPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable);
typedef RegalProc<RGLXSWAPBUFFERSPROC> REGALGLXSWAPBUFFERSPROC;
typedef void (REGAL_CALL *RGLXUSEXFONTPROC)(Layer *_layer, Font font, int first, int count, int listBase);
typedef RegalProc<RGLXUSEXFONTPROC> REGALGLXUSEXFONTPROC;
typedef void (REGAL_CALL *RGLXWAITGLPROC)(Layer *_layer);
typedef RegalProc<RGLXWAITGLPROC> REGALGLXWAITGLPROC;
typedef void (REGAL_CALL *RGLXWAITXPROC)(Layer *_layer);
typedef RegalProc<RGLXWAITXPROC> REGALGLXWAITXPROC;

    // GLX_VERSION_1_1

typedef const char *(REGAL_CALL *RGLXGETCLIENTSTRINGPROC)(Layer *_layer, Display *dpy, int name);
typedef RegalProc<RGLXGETCLIENTSTRINGPROC> REGALGLXGETCLIENTSTRINGPROC;
typedef const char *(REGAL_CALL *RGLXQUERYEXTENSIONSSTRINGPROC)(Layer *_layer, Display *dpy, int screen);
typedef RegalProc<RGLXQUERYEXTENSIONSSTRINGPROC> REGALGLXQUERYEXTENSIONSSTRINGPROC;
typedef const char *(REGAL_CALL *RGLXQUERYSERVERSTRINGPROC)(Layer *_layer, Display *dpy, int screen, int name);
typedef RegalProc<RGLXQUERYSERVERSTRINGPROC> REGALGLXQUERYSERVERSTRINGPROC;

    // GLX_VERSION_1_2

typedef Display *(REGAL_CALL *RGLXGETCURRENTDISPLAYPROC)(Layer *_layer);
typedef RegalProc<RGLXGETCURRENTDISPLAYPROC> REGALGLXGETCURRENTDISPLAYPROC;

    // GLX_VERSION_1_3

typedef GLXFBConfig *(REGAL_CALL *RGLXCHOOSEFBCONFIGPROC)(Layer *_layer, Display *dpy, int screen, const int *attrib_list, int *nelements);
typedef RegalProc<RGLXCHOOSEFBCONFIGPROC> REGALGLXCHOOSEFBCONFIGPROC;
typedef GLXContext (REGAL_CALL *RGLXCREATENEWCONTEXTPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef RegalProc<RGLXCREATENEWCONTEXTPROC> REGALGLXCREATENEWCONTEXTPROC;
typedef GLXPbuffer (REGAL_CALL *RGLXCREATEPBUFFERPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, const int *attrib_list);
typedef RegalProc<RGLXCREATEPBUFFERPROC> REGALGLXCREATEPBUFFERPROC;
typedef GLXPixmap (REGAL_CALL *RGLXCREATEPIXMAPPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
typedef RegalProc<RGLXCREATEPIXMAPPROC> REGALGLXCREATEPIXMAPPROC;
typedef GLXWindow (REGAL_CALL *RGLXCREATEWINDOWPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
typedef RegalProc<RGLXCREATEWINDOWPROC> REGALGLXCREATEWINDOWPROC;
typedef void (REGAL_CALL *RGLXDESTROYPBUFFERPROC)(Layer *_layer, Display *dpy, GLXPbuffer pbuf);
typedef RegalProc<RGLXDESTROYPBUFFERPROC> REGALGLXDESTROYPBUFFERPROC;
typedef void (REGAL_CALL *RGLXDESTROYPIXMAPPROC)(Layer *_layer, Display *dpy, GLXPixmap pixmap);
typedef RegalProc<RGLXDESTROYPIXMAPPROC> REGALGLXDESTROYPIXMAPPROC;
typedef void (REGAL_CALL *RGLXDESTROYWINDOWPROC)(Layer *_layer, Display *dpy, GLXWindow win);
typedef RegalProc<RGLXDESTROYWINDOWPROC> REGALGLXDESTROYWINDOWPROC;
typedef GLXDrawable (REGAL_CALL *RGLXGETCURRENTREADDRAWABLEPROC)(Layer *_layer);
typedef RegalProc<RGLXGETCURRENTREADDRAWABLEPROC> REGALGLXGETCURRENTREADDRAWABLEPROC;
typedef int (REGAL_CALL *RGLXGETFBCONFIGATTRIBPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, int attribute, int *value);
typedef RegalProc<RGLXGETFBCONFIGATTRIBPROC> REGALGLXGETFBCONFIGATTRIBPROC;
typedef GLXFBConfig *(REGAL_CALL *RGLXGETFBCONFIGSPROC)(Layer *_layer, Display *dpy, int screen, int *nelements);
typedef RegalProc<RGLXGETFBCONFIGSPROC> REGALGLXGETFBCONFIGSPROC;
typedef void (REGAL_CALL *RGLXGETSELECTEDEVENTPROC)(Layer *_layer, Display *dpy, GLXDrawable draw, unsigned long *event_mask);
typedef RegalProc<RGLXGETSELECTEDEVENTPROC> REGALGLXGETSELECTEDEVENTPROC;
typedef XVisualInfo *(REGAL_CALL *RGLXGETVISUALFROMFBCONFIGPROC)(Layer *_layer, Display *dpy, GLXFBConfig config);
typedef RegalProc<RGLXGETVISUALFROMFBCONFIGPROC> REGALGLXGETVISUALFROMFBCONFIGPROC;
typedef Bool (REGAL_CALL *RGLXMAKECONTEXTCURRENTPROC)(Layer *_layer, Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef RegalProc<RGLXMAKECONTEXTCURRENTPROC> REGALGLXMAKECONTEXTCURRENTPROC;
typedef int (REGAL_CALL *RGLXQUERYCONTEXTPROC)(Layer *_layer, Display *dpy, GLXContext ctx, int attribute, int *value);
typedef RegalProc<RGLXQUERYCONTEXTPROC> REGALGLXQUERYCONTEXTPROC;
typedef void (REGAL_CALL *RGLXQUERYDRAWABLEPROC)(Layer *_layer, Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
typedef RegalProc<RGLXQUERYDRAWABLEPROC> REGALGLXQUERYDRAWABLEPROC;
typedef void (REGAL_CALL *RGLXSELECTEVENTPROC)(Layer *_layer, Display *dpy, GLXDrawable draw, unsigned long event_mask);
typedef RegalProc<RGLXSELECTEVENTPROC> REGALGLXSELECTEVENTPROC;

    // GLX_VERSION_1_4

typedef __GLXextFuncPtr (REGAL_CALL *RGLXGETPROCADDRESSPROC)(Layer *_layer, const GLubyte *procName);
typedef RegalProc<RGLXGETPROCADDRESSPROC> REGALGLXGETPROCADDRESSPROC;

    // GLX_AMD_gpu_association

typedef void (REGAL_CALL *RGLXBLITCONTEXTFRAMEBUFFERAMDPROC)(Layer *_layer, GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef RegalProc<RGLXBLITCONTEXTFRAMEBUFFERAMDPROC> REGALGLXBLITCONTEXTFRAMEBUFFERAMDPROC;
typedef GLXContext (REGAL_CALL *RGLXCREATEASSOCIATEDCONTEXTAMDPROC)(Layer *_layer, unsigned int id, GLXContext share_list);
typedef RegalProc<RGLXCREATEASSOCIATEDCONTEXTAMDPROC> REGALGLXCREATEASSOCIATEDCONTEXTAMDPROC;
typedef GLXContext (REGAL_CALL *RGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(Layer *_layer, unsigned int id, GLXContext share_context, const int *attribList);
typedef RegalProc<RGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC> REGALGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC;
typedef Bool (REGAL_CALL *RGLXDELETEASSOCIATEDCONTEXTAMDPROC)(Layer *_layer, GLXContext ctx);
typedef RegalProc<RGLXDELETEASSOCIATEDCONTEXTAMDPROC> REGALGLXDELETEASSOCIATEDCONTEXTAMDPROC;
typedef unsigned int (REGAL_CALL *RGLXGETCONTEXTGPUIDAMDPROC)(Layer *_layer, GLXContext ctx);
typedef RegalProc<RGLXGETCONTEXTGPUIDAMDPROC> REGALGLXGETCONTEXTGPUIDAMDPROC;
typedef GLXContext (REGAL_CALL *RGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC)(Layer *_layer);
typedef RegalProc<RGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC> REGALGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC;
typedef unsigned int (REGAL_CALL *RGLXGETGPUIDSAMDPROC)(Layer *_layer, unsigned int maxCount, unsigned int *ids);
typedef RegalProc<RGLXGETGPUIDSAMDPROC> REGALGLXGETGPUIDSAMDPROC;
typedef int (REGAL_CALL *RGLXGETGPUINFOAMDPROC)(Layer *_layer, unsigned int id, int property, GLenum dataType, unsigned int size, GLvoid *data);
typedef RegalProc<RGLXGETGPUINFOAMDPROC> REGALGLXGETGPUINFOAMDPROC;
typedef Bool (REGAL_CALL *RGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(Layer *_layer, GLXContext ctx);
typedef RegalProc<RGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC> REGALGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC;

    // GLX_ARB_create_context

typedef GLXContext (REGAL_CALL *RGLXCREATECONTEXTATTRIBSARBPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list);
typedef RegalProc<RGLXCREATECONTEXTATTRIBSARBPROC> REGALGLXCREATECONTEXTATTRIBSARBPROC;

    // GLX_ARB_get_proc_address

typedef __GLXextFuncPtr (REGAL_CALL *RGLXGETPROCADDRESSARBPROC)(Layer *_layer, const GLubyte *procName);
typedef RegalProc<RGLXGETPROCADDRESSARBPROC> REGALGLXGETPROCADDRESSARBPROC;

    // GLX_ATI_render_texture

typedef void (REGAL_CALL *RGLXBINDTEXIMAGEATIPROC)(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int buffer);
typedef RegalProc<RGLXBINDTEXIMAGEATIPROC> REGALGLXBINDTEXIMAGEATIPROC;
typedef void (REGAL_CALL *RGLXDRAWABLEATTRIBATIPROC)(Layer *_layer, Display *dpy, GLXDrawable draw, const int *attrib_list);
typedef RegalProc<RGLXDRAWABLEATTRIBATIPROC> REGALGLXDRAWABLEATTRIBATIPROC;
typedef void (REGAL_CALL *RGLXRELEASETEXIMAGEATIPROC)(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int buffer);
typedef RegalProc<RGLXRELEASETEXIMAGEATIPROC> REGALGLXRELEASETEXIMAGEATIPROC;

    // GLX_EXT_import_context

typedef void (REGAL_CALL *RGLXFREECONTEXTEXTPROC)(Layer *_layer, Display *dpy, GLXContext context);
typedef RegalProc<RGLXFREECONTEXTEXTPROC> REGALGLXFREECONTEXTEXTPROC;
typedef GLXContextID (REGAL_CALL *RGLXGETCONTEXTIDEXTPROC)(Layer *_layer, const GLXContext context);
typedef RegalProc<RGLXGETCONTEXTIDEXTPROC> REGALGLXGETCONTEXTIDEXTPROC;
typedef GLXContext (REGAL_CALL *RGLXIMPORTCONTEXTEXTPROC)(Layer *_layer, Display *dpy, GLXContextID contextID);
typedef RegalProc<RGLXIMPORTCONTEXTEXTPROC> REGALGLXIMPORTCONTEXTEXTPROC;
typedef int (REGAL_CALL *RGLXQUERYCONTEXTINFOEXTPROC)(Layer *_layer, Display *dpy, GLXContext context, int attribute, int *value);
typedef RegalProc<RGLXQUERYCONTEXTINFOEXTPROC> REGALGLXQUERYCONTEXTINFOEXTPROC;

    // GLX_EXT_swap_control

typedef void (REGAL_CALL *RGLXSWAPINTERVALEXTPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, int interval);
typedef RegalProc<RGLXSWAPINTERVALEXTPROC> REGALGLXSWAPINTERVALEXTPROC;

    // GLX_EXT_texture_from_pixmap

typedef void (REGAL_CALL *RGLXBINDTEXIMAGEEXTPROC)(Layer *_layer, Display *display, GLXDrawable drawable, int buffer, const int *attrib_list);
typedef RegalProc<RGLXBINDTEXIMAGEEXTPROC> REGALGLXBINDTEXIMAGEEXTPROC;
typedef void (REGAL_CALL *RGLXRELEASETEXIMAGEEXTPROC)(Layer *_layer, Display *display, GLXDrawable drawable, int buffer);
typedef RegalProc<RGLXRELEASETEXIMAGEEXTPROC> REGALGLXRELEASETEXIMAGEEXTPROC;

    // GLX_MESA_agp_offset

typedef unsigned int (REGAL_CALL *RGLXGETAGPOFFSETMESAPROC)(Layer *_layer, const void *pointer);
typedef RegalProc<RGLXGETAGPOFFSETMESAPROC> REGALGLXGETAGPOFFSETMESAPROC;

    // GLX_MESA_copy_sub_buffer

typedef void (REGAL_CALL *RGLXCOPYSUBBUFFERMESAPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, int x, int y, int width, int height);
typedef RegalProc<RGLXCOPYSUBBUFFERMESAPROC> REGALGLXCOPYSUBBUFFERMESAPROC;

    // GLX_MESA_pixmap_colormap

typedef GLXPixmap (REGAL_CALL *RGLXCREATEGLXPIXMAPMESAPROC)(Layer *_layer, Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);
typedef RegalProc<RGLXCREATEGLXPIXMAPMESAPROC> REGALGLXCREATEGLXPIXMAPMESAPROC;

    // GLX_MESA_release_buffers

typedef Bool (REGAL_CALL *RGLXRELEASEBUFFERSMESAPROC)(Layer *_layer, Display *dpy, GLXDrawable d);
typedef RegalProc<RGLXRELEASEBUFFERSMESAPROC> REGALGLXRELEASEBUFFERSMESAPROC;

    // GLX_MESA_set_3dfx_mode

typedef GLboolean (REGAL_CALL *RGLXSET3DFXMODEMESAPROC)(Layer *_layer, GLint mode);
typedef RegalProc<RGLXSET3DFXMODEMESAPROC> REGALGLXSET3DFXMODEMESAPROC;

    // GLX_MESA_swap_control

typedef int (REGAL_CALL *RGLXGETSWAPINTERVALMESAPROC)(Layer *_layer);
typedef RegalProc<RGLXGETSWAPINTERVALMESAPROC> REGALGLXGETSWAPINTERVALMESAPROC;
typedef int (REGAL_CALL *RGLXSWAPINTERVALMESAPROC)(Layer *_layer, unsigned int interval);
typedef RegalProc<RGLXSWAPINTERVALMESAPROC> REGALGLXSWAPINTERVALMESAPROC;

    // GLX_NV_copy_image

typedef void (REGAL_CALL *RGLXCOPYIMAGESUBDATANVPROC)(Layer *_layer, Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef RegalProc<RGLXCOPYIMAGESUBDATANVPROC> REGALGLXCOPYIMAGESUBDATANVPROC;

    // GLX_NV_present_video

typedef int (REGAL_CALL *RGLXBINDVIDEODEVICENVPROC)(Layer *_layer, Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list);
typedef RegalProc<RGLXBINDVIDEODEVICENVPROC> REGALGLXBINDVIDEODEVICENVPROC;
typedef unsigned int *(REGAL_CALL *RGLXENUMERATEVIDEODEVICESNVPROC)(Layer *_layer, Display *dpy, int screen, int *nelements);
typedef RegalProc<RGLXENUMERATEVIDEODEVICESNVPROC> REGALGLXENUMERATEVIDEODEVICESNVPROC;

    // GLX_NV_swap_group

typedef Bool (REGAL_CALL *RGLXBINDSWAPBARRIERNVPROC)(Layer *_layer, Display *dpy, GLuint group, GLuint barrier);
typedef RegalProc<RGLXBINDSWAPBARRIERNVPROC> REGALGLXBINDSWAPBARRIERNVPROC;
typedef Bool (REGAL_CALL *RGLXJOINSWAPGROUPNVPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, GLuint group);
typedef RegalProc<RGLXJOINSWAPGROUPNVPROC> REGALGLXJOINSWAPGROUPNVPROC;
typedef Bool (REGAL_CALL *RGLXQUERYFRAMECOUNTNVPROC)(Layer *_layer, Display *dpy, int screen, GLuint *count);
typedef RegalProc<RGLXQUERYFRAMECOUNTNVPROC> REGALGLXQUERYFRAMECOUNTNVPROC;
typedef Bool (REGAL_CALL *RGLXQUERYMAXSWAPGROUPSNVPROC)(Layer *_layer, Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers);
typedef RegalProc<RGLXQUERYMAXSWAPGROUPSNVPROC> REGALGLXQUERYMAXSWAPGROUPSNVPROC;
typedef Bool (REGAL_CALL *RGLXQUERYSWAPGROUPNVPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier);
typedef RegalProc<RGLXQUERYSWAPGROUPNVPROC> REGALGLXQUERYSWAPGROUPNVPROC;
typedef Bool (REGAL_CALL *RGLXRESETFRAMECOUNTNVPROC)(Layer *_layer, Display *dpy, int screen);
typedef RegalProc<RGLXRESETFRAMECOUNTNVPROC> REGALGLXRESETFRAMECOUNTNVPROC;

    // GLX_NV_vertex_array_range

typedef void *(REGAL_CALL *RGLXALLOCATEMEMORYNVPROC)(Layer *_layer, GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority);
typedef RegalProc<RGLXALLOCATEMEMORYNVPROC> REGALGLXALLOCATEMEMORYNVPROC;
typedef void (REGAL_CALL *RGLXFREEMEMORYNVPROC)(Layer *_layer, void *pointer);
typedef RegalProc<RGLXFREEMEMORYNVPROC> REGALGLXFREEMEMORYNVPROC;

    // GLX_NV_video_capture

typedef int (REGAL_CALL *RGLXBINDVIDEOCAPTUREDEVICENVPROC)(Layer *_layer, Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
typedef RegalProc<RGLXBINDVIDEOCAPTUREDEVICENVPROC> REGALGLXBINDVIDEOCAPTUREDEVICENVPROC;
typedef GLXVideoCaptureDeviceNV *(REGAL_CALL *RGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC)(Layer *_layer, Display *dpy, int screen, int *nelements);
typedef RegalProc<RGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC> REGALGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC;
typedef void (REGAL_CALL *RGLXLOCKVIDEOCAPTUREDEVICENVPROC)(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device);
typedef RegalProc<RGLXLOCKVIDEOCAPTUREDEVICENVPROC> REGALGLXLOCKVIDEOCAPTUREDEVICENVPROC;
typedef int (REGAL_CALL *RGLXQUERYVIDEOCAPTUREDEVICENVPROC)(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value);
typedef RegalProc<RGLXQUERYVIDEOCAPTUREDEVICENVPROC> REGALGLXQUERYVIDEOCAPTUREDEVICENVPROC;
typedef void (REGAL_CALL *RGLXRELEASEVIDEOCAPTUREDEVICENVPROC)(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device);
typedef RegalProc<RGLXRELEASEVIDEOCAPTUREDEVICENVPROC> REGALGLXRELEASEVIDEOCAPTUREDEVICENVPROC;

    // GLX_NV_video_output

typedef int (REGAL_CALL *RGLXBINDVIDEOIMAGENVPROC)(Layer *_layer, Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
typedef RegalProc<RGLXBINDVIDEOIMAGENVPROC> REGALGLXBINDVIDEOIMAGENVPROC;
typedef int (REGAL_CALL *RGLXGETVIDEODEVICENVPROC)(Layer *_layer, Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
typedef RegalProc<RGLXGETVIDEODEVICENVPROC> REGALGLXGETVIDEODEVICENVPROC;
typedef int (REGAL_CALL *RGLXGETVIDEOINFONVPROC)(Layer *_layer, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
typedef RegalProc<RGLXGETVIDEOINFONVPROC> REGALGLXGETVIDEOINFONVPROC;
typedef int (REGAL_CALL *RGLXRELEASEVIDEODEVICENVPROC)(Layer *_layer, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice);
typedef RegalProc<RGLXRELEASEVIDEODEVICENVPROC> REGALGLXRELEASEVIDEODEVICENVPROC;
typedef int (REGAL_CALL *RGLXRELEASEVIDEOIMAGENVPROC)(Layer *_layer, Display *dpy, GLXPbuffer pbuf);
typedef RegalProc<RGLXRELEASEVIDEOIMAGENVPROC> REGALGLXRELEASEVIDEOIMAGENVPROC;
typedef int (REGAL_CALL *RGLXSENDPBUFFERTOVIDEONVPROC)(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock);
typedef RegalProc<RGLXSENDPBUFFERTOVIDEONVPROC> REGALGLXSENDPBUFFERTOVIDEONVPROC;

    // GLX_OML_sync_control

typedef Bool (REGAL_CALL *RGLXGETMSCRATEOMLPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator);
typedef RegalProc<RGLXGETMSCRATEOMLPROC> REGALGLXGETMSCRATEOMLPROC;
typedef Bool (REGAL_CALL *RGLXGETSYNCVALUESOMLPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef RegalProc<RGLXGETSYNCVALUESOMLPROC> REGALGLXGETSYNCVALUESOMLPROC;
typedef int64_t (REGAL_CALL *RGLXSWAPBUFFERSMSCOMLPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
typedef RegalProc<RGLXSWAPBUFFERSMSCOMLPROC> REGALGLXSWAPBUFFERSMSCOMLPROC;
typedef Bool (REGAL_CALL *RGLXWAITFORMSCOMLPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef RegalProc<RGLXWAITFORMSCOMLPROC> REGALGLXWAITFORMSCOMLPROC;
typedef Bool (REGAL_CALL *RGLXWAITFORSBCOMLPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef RegalProc<RGLXWAITFORSBCOMLPROC> REGALGLXWAITFORSBCOMLPROC;

    // GLX_SGIX_fbconfig

typedef GLXFBConfigSGIX *(REGAL_CALL *RGLXCHOOSEFBCONFIGSGIXPROC)(Layer *_layer, Display *dpy, int screen, const int *attrib_list, int *nelements);
typedef RegalProc<RGLXCHOOSEFBCONFIGSGIXPROC> REGALGLXCHOOSEFBCONFIGSGIXPROC;
typedef GLXContext (REGAL_CALL *RGLXCREATECONTEXTWITHCONFIGSGIXPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef RegalProc<RGLXCREATECONTEXTWITHCONFIGSGIXPROC> REGALGLXCREATECONTEXTWITHCONFIGSGIXPROC;
typedef GLXPixmap (REGAL_CALL *RGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, Pixmap pixmap);
typedef RegalProc<RGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC> REGALGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC;
typedef int (REGAL_CALL *RGLXGETFBCONFIGATTRIBSGIXPROC)(Layer *_layer, Display *dpy, GLXFBConfigSGIX config, int attribute, int *value);
typedef RegalProc<RGLXGETFBCONFIGATTRIBSGIXPROC> REGALGLXGETFBCONFIGATTRIBSGIXPROC;
typedef GLXFBConfigSGIX (REGAL_CALL *RGLXGETFBCONFIGFROMVISUALSGIXPROC)(Layer *_layer, Display *dpy, XVisualInfo *vis);
typedef RegalProc<RGLXGETFBCONFIGFROMVISUALSGIXPROC> REGALGLXGETFBCONFIGFROMVISUALSGIXPROC;
typedef XVisualInfo *(REGAL_CALL *RGLXGETVISUALFROMFBCONFIGSGIXPROC)(Layer *_layer, Display *dpy, GLXFBConfig config);
typedef RegalProc<RGLXGETVISUALFROMFBCONFIGSGIXPROC> REGALGLXGETVISUALFROMFBCONFIGSGIXPROC;

    // GLX_SGIX_pbuffer

typedef GLXPbuffer (REGAL_CALL *RGLXCREATEGLXPBUFFERSGIXPROC)(Layer *_layer, Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list);
typedef RegalProc<RGLXCREATEGLXPBUFFERSGIXPROC> REGALGLXCREATEGLXPBUFFERSGIXPROC;
typedef void (REGAL_CALL *RGLXDESTROYGLXPBUFFERSGIXPROC)(Layer *_layer, Display *dpy, GLXPbuffer pbuf);
typedef RegalProc<RGLXDESTROYGLXPBUFFERSGIXPROC> REGALGLXDESTROYGLXPBUFFERSGIXPROC;
typedef void (REGAL_CALL *RGLXGETSELECTEDEVENTSGIXPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, unsigned long *mask);
typedef RegalProc<RGLXGETSELECTEDEVENTSGIXPROC> REGALGLXGETSELECTEDEVENTSGIXPROC;
typedef void (REGAL_CALL *RGLXQUERYGLXPBUFFERSGIXPROC)(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value);
typedef RegalProc<RGLXQUERYGLXPBUFFERSGIXPROC> REGALGLXQUERYGLXPBUFFERSGIXPROC;
typedef void (REGAL_CALL *RGLXSELECTEVENTSGIXPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, unsigned long mask);
typedef RegalProc<RGLXSELECTEVENTSGIXPROC> REGALGLXSELECTEVENTSGIXPROC;

    // GLX_SGIX_swap_barrier

typedef void (REGAL_CALL *RGLXBINDSWAPBARRIERSGIXPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, int barrier);
typedef RegalProc<RGLXBINDSWAPBARRIERSGIXPROC> REGALGLXBINDSWAPBARRIERSGIXPROC;
typedef Bool (REGAL_CALL *RGLXQUERYMAXSWAPBARRIERSSGIXPROC)(Layer *_layer, Display *dpy, int screen, int *max);
typedef RegalProc<RGLXQUERYMAXSWAPBARRIERSSGIXPROC> REGALGLXQUERYMAXSWAPBARRIERSSGIXPROC;

    // GLX_SGIX_swap_group

typedef void (REGAL_CALL *RGLXJOINSWAPGROUPSGIXPROC)(Layer *_layer, Display *dpy, GLXDrawable drawable, GLXDrawable member);
typedef RegalProc<RGLXJOINSWAPGROUPSGIXPROC> REGALGLXJOINSWAPGROUPSGIXPROC;

    // GLX_SGIX_video_resize

typedef int (REGAL_CALL *RGLXBINDCHANNELTOWINDOWSGIXPROC)(Layer *_layer, Display *display, int screen, int channel, Window window);
typedef RegalProc<RGLXBINDCHANNELTOWINDOWSGIXPROC> REGALGLXBINDCHANNELTOWINDOWSGIXPROC;
typedef int (REGAL_CALL *RGLXCHANNELRECTSGIXPROC)(Layer *_layer, Display *display, int screen, int channel, int x, int y, int w, int h);
typedef RegalProc<RGLXCHANNELRECTSGIXPROC> REGALGLXCHANNELRECTSGIXPROC;
typedef int (REGAL_CALL *RGLXCHANNELRECTSYNCSGIXPROC)(Layer *_layer, Display *display, int screen, int channel, GLenum synctype);
typedef RegalProc<RGLXCHANNELRECTSYNCSGIXPROC> REGALGLXCHANNELRECTSYNCSGIXPROC;
typedef int (REGAL_CALL *RGLXQUERYCHANNELDELTASSGIXPROC)(Layer *_layer, Display *display, int screen, int channel, int *x, int *y, int *w, int *h);
typedef RegalProc<RGLXQUERYCHANNELDELTASSGIXPROC> REGALGLXQUERYCHANNELDELTASSGIXPROC;
typedef int (REGAL_CALL *RGLXQUERYCHANNELRECTSGIXPROC)(Layer *_layer, Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
typedef RegalProc<RGLXQUERYCHANNELRECTSGIXPROC> REGALGLXQUERYCHANNELRECTSGIXPROC;

    // GLX_SGI_cushion

typedef void (REGAL_CALL *RGLXCUSHIONSGIPROC)(Layer *_layer, Display *dpy, Window window, float cushion);
typedef RegalProc<RGLXCUSHIONSGIPROC> REGALGLXCUSHIONSGIPROC;

    // GLX_SGI_make_current_read

typedef GLXDrawable (REGAL_CALL *RGLXGETCURRENTREADDRAWABLESGIPROC)(Layer *_layer);
typedef RegalProc<RGLXGETCURRENTREADDRAWABLESGIPROC> REGALGLXGETCURRENTREADDRAWABLESGIPROC;
typedef Bool (REGAL_CALL *RGLXMAKECURRENTREADSGIPROC)(Layer *_layer, Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef RegalProc<RGLXMAKECURRENTREADSGIPROC> REGALGLXMAKECURRENTREADSGIPROC;

    // GLX_SGI_swap_control

typedef int (REGAL_CALL *RGLXSWAPINTERVALSGIPROC)(Layer *_layer, int interval);
typedef RegalProc<RGLXSWAPINTERVALSGIPROC> REGALGLXSWAPINTERVALSGIPROC;

    // GLX_SGI_video_sync

typedef int (REGAL_CALL *RGLXGETVIDEOSYNCSGIPROC)(Layer *_layer, unsigned int *count);
typedef RegalProc<RGLXGETVIDEOSYNCSGIPROC> REGALGLXGETVIDEOSYNCSGIPROC;
typedef int (REGAL_CALL *RGLXWAITVIDEOSYNCSGIPROC)(Layer *_layer, int divisor, int remainder, unsigned int *count);
typedef RegalProc<RGLXWAITVIDEOSYNCSGIPROC> REGALGLXWAITVIDEOSYNCSGIPROC;

    // GLX_SUN_get_transparent_index

typedef Status (REGAL_CALL *RGLXGETTRANSPARENTINDEXSUNPROC)(Layer *_layer, Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex);
typedef RegalProc<RGLXGETTRANSPARENTINDEXSUNPROC> REGALGLXGETTRANSPARENTINDEXSUNPROC;

    // GLX_SUN_video_resize

typedef int (REGAL_CALL *RGLXGETVIDEORESIZESUNPROC)(Layer *_layer, Display *display, GLXDrawable window, float *factor);
typedef RegalProc<RGLXGETVIDEORESIZESUNPROC> REGALGLXGETVIDEORESIZESUNPROC;
typedef int (REGAL_CALL *RGLXVIDEORESIZESUNPROC)(Layer *_layer, Display *display, GLXDrawable window, float factor);
typedef RegalProc<RGLXVIDEORESIZESUNPROC> REGALGLXVIDEORESIZESUNPROC;
#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX
    // CGL_VERSION_1_0

typedef CGLError (REGAL_CALL *RCGLCHOOSEPIXELFORMATPROC)(Layer *_layer, const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix);
typedef RegalProc<RCGLCHOOSEPIXELFORMATPROC> REGALCGLCHOOSEPIXELFORMATPROC;
typedef CGLError (REGAL_CALL *RCGLCLEARDRAWABLEPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLCLEARDRAWABLEPROC> REGALCGLCLEARDRAWABLEPROC;
typedef CGLError (REGAL_CALL *RCGLCOPYCONTEXTPROC)(Layer *_layer, CGLContextObj src, CGLContextObj dst, GLbitfield mask);
typedef RegalProc<RCGLCOPYCONTEXTPROC> REGALCGLCOPYCONTEXTPROC;
typedef CGLError (REGAL_CALL *RCGLCREATECONTEXTPROC)(Layer *_layer, CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx);
typedef RegalProc<RCGLCREATECONTEXTPROC> REGALCGLCREATECONTEXTPROC;
typedef CGLError (REGAL_CALL *RCGLDESCRIBEPIXELFORMATPROC)(Layer *_layer, CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value);
typedef RegalProc<RCGLDESCRIBEPIXELFORMATPROC> REGALCGLDESCRIBEPIXELFORMATPROC;
typedef CGLError (REGAL_CALL *RCGLDESCRIBERENDERERPROC)(Layer *_layer, CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value);
typedef RegalProc<RCGLDESCRIBERENDERERPROC> REGALCGLDESCRIBERENDERERPROC;
typedef CGLError (REGAL_CALL *RCGLDESTROYCONTEXTPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLDESTROYCONTEXTPROC> REGALCGLDESTROYCONTEXTPROC;
typedef CGLError (REGAL_CALL *RCGLDESTROYPIXELFORMATPROC)(Layer *_layer, CGLPixelFormatObj pix);
typedef RegalProc<RCGLDESTROYPIXELFORMATPROC> REGALCGLDESTROYPIXELFORMATPROC;
typedef CGLError (REGAL_CALL *RCGLDESTROYRENDERERINFOPROC)(Layer *_layer, CGLRendererInfoObj rend);
typedef RegalProc<RCGLDESTROYRENDERERINFOPROC> REGALCGLDESTROYRENDERERINFOPROC;
typedef CGLError (REGAL_CALL *RCGLDISABLEPROC)(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname);
typedef RegalProc<RCGLDISABLEPROC> REGALCGLDISABLEPROC;
typedef CGLError (REGAL_CALL *RCGLENABLEPROC)(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname);
typedef RegalProc<RCGLENABLEPROC> REGALCGLENABLEPROC;
typedef const char *(REGAL_CALL *RCGLERRORSTRINGPROC)(Layer *_layer, CGLError error);
typedef RegalProc<RCGLERRORSTRINGPROC> REGALCGLERRORSTRINGPROC;
typedef CGLError (REGAL_CALL *RCGLFLUSHDRAWABLEPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLFLUSHDRAWABLEPROC> REGALCGLFLUSHDRAWABLEPROC;
typedef CGLError (REGAL_CALL *RCGLGETOFFSCREENPROC)(Layer *_layer, CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr);
typedef RegalProc<RCGLGETOFFSCREENPROC> REGALCGLGETOFFSCREENPROC;
typedef CGLError (REGAL_CALL *RCGLGETOPTIONPROC)(Layer *_layer, CGLGlobalOption pname, GLint *param);
typedef RegalProc<RCGLGETOPTIONPROC> REGALCGLGETOPTIONPROC;
typedef CGLError (REGAL_CALL *RCGLGETPARAMETERPROC)(Layer *_layer, CGLContextObj ctx, CGLContextParameter pname, GLint *params);
typedef RegalProc<RCGLGETPARAMETERPROC> REGALCGLGETPARAMETERPROC;
typedef void (REGAL_CALL *RCGLGETVERSIONPROC)(Layer *_layer, GLint *majorvers, GLint *minorvers);
typedef RegalProc<RCGLGETVERSIONPROC> REGALCGLGETVERSIONPROC;
typedef CGLError (REGAL_CALL *RCGLGETVIRTUALSCREENPROC)(Layer *_layer, CGLContextObj ctx, GLint *screen);
typedef RegalProc<RCGLGETVIRTUALSCREENPROC> REGALCGLGETVIRTUALSCREENPROC;
typedef CGLError (REGAL_CALL *RCGLISENABLEDPROC)(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname, GLint *enable);
typedef RegalProc<RCGLISENABLEDPROC> REGALCGLISENABLEDPROC;
typedef CGLError (REGAL_CALL *RCGLQUERYRENDERERINFOPROC)(Layer *_layer, GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend);
typedef RegalProc<RCGLQUERYRENDERERINFOPROC> REGALCGLQUERYRENDERERINFOPROC;
typedef CGLError (REGAL_CALL *RCGLSETFULLSCREENPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLSETFULLSCREENPROC> REGALCGLSETFULLSCREENPROC;
typedef CGLError (REGAL_CALL *RCGLSETOFFSCREENPROC)(Layer *_layer, CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr);
typedef RegalProc<RCGLSETOFFSCREENPROC> REGALCGLSETOFFSCREENPROC;
typedef CGLError (REGAL_CALL *RCGLSETOPTIONPROC)(Layer *_layer, CGLGlobalOption pname, GLint param);
typedef RegalProc<RCGLSETOPTIONPROC> REGALCGLSETOPTIONPROC;
typedef CGLError (REGAL_CALL *RCGLSETPARAMETERPROC)(Layer *_layer, CGLContextObj ctx, CGLContextParameter pname, const GLint *params);
typedef RegalProc<RCGLSETPARAMETERPROC> REGALCGLSETPARAMETERPROC;
typedef CGLError (REGAL_CALL *RCGLSETVIRTUALSCREENPROC)(Layer *_layer, CGLContextObj ctx, GLint screen);
typedef RegalProc<RCGLSETVIRTUALSCREENPROC> REGALCGLSETVIRTUALSCREENPROC;

    // CGL_VERSION_1_1

typedef CGLError (REGAL_CALL *RCGLCREATEPBUFFERPROC)(Layer *_layer, GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer);
typedef RegalProc<RCGLCREATEPBUFFERPROC> REGALCGLCREATEPBUFFERPROC;
typedef CGLError (REGAL_CALL *RCGLDESCRIBEPBUFFERPROC)(Layer *_layer, CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap);
typedef RegalProc<RCGLDESCRIBEPBUFFERPROC> REGALCGLDESCRIBEPBUFFERPROC;
typedef CGLError (REGAL_CALL *RCGLDESTROYPBUFFERPROC)(Layer *_layer, CGLPBufferObj pbuffer);
typedef RegalProc<RCGLDESTROYPBUFFERPROC> REGALCGLDESTROYPBUFFERPROC;
typedef CGLError (REGAL_CALL *RCGLGETPBUFFERPROC)(Layer *_layer, CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen);
typedef RegalProc<RCGLGETPBUFFERPROC> REGALCGLGETPBUFFERPROC;
typedef CGLError (REGAL_CALL *RCGLSETPBUFFERPROC)(Layer *_layer, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen);
typedef RegalProc<RCGLSETPBUFFERPROC> REGALCGLSETPBUFFERPROC;
typedef CGLError (REGAL_CALL *RCGLTEXIMAGEPBUFFERPROC)(Layer *_layer, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source);
typedef RegalProc<RCGLTEXIMAGEPBUFFERPROC> REGALCGLTEXIMAGEPBUFFERPROC;

    // CGL_VERSION_1_2

typedef GLuint (REGAL_CALL *RCGLGETCONTEXTRETAINCOUNTPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLGETCONTEXTRETAINCOUNTPROC> REGALCGLGETCONTEXTRETAINCOUNTPROC;
typedef CGLError (REGAL_CALL *RCGLGETGLOBALOPTIONPROC)(Layer *_layer, CGLGlobalOption pname, GLint *params);
typedef RegalProc<RCGLGETGLOBALOPTIONPROC> REGALCGLGETGLOBALOPTIONPROC;
typedef GLuint (REGAL_CALL *RCGLGETPBUFFERRETAINCOUNTPROC)(Layer *_layer, CGLPBufferObj pbuffer);
typedef RegalProc<RCGLGETPBUFFERRETAINCOUNTPROC> REGALCGLGETPBUFFERRETAINCOUNTPROC;
typedef CGLPixelFormatObj (REGAL_CALL *RCGLGETPIXELFORMATPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLGETPIXELFORMATPROC> REGALCGLGETPIXELFORMATPROC;
typedef GLuint (REGAL_CALL *RCGLGETPIXELFORMATRETAINCOUNTPROC)(Layer *_layer, CGLPixelFormatObj pix);
typedef RegalProc<RCGLGETPIXELFORMATRETAINCOUNTPROC> REGALCGLGETPIXELFORMATRETAINCOUNTPROC;
typedef CGLError (REGAL_CALL *RCGLLOCKCONTEXTPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLLOCKCONTEXTPROC> REGALCGLLOCKCONTEXTPROC;
typedef void (REGAL_CALL *RCGLRELEASECONTEXTPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLRELEASECONTEXTPROC> REGALCGLRELEASECONTEXTPROC;
typedef void (REGAL_CALL *RCGLRELEASEPBUFFERPROC)(Layer *_layer, CGLPBufferObj pbuffer);
typedef RegalProc<RCGLRELEASEPBUFFERPROC> REGALCGLRELEASEPBUFFERPROC;
typedef void (REGAL_CALL *RCGLRELEASEPIXELFORMATPROC)(Layer *_layer, CGLPixelFormatObj pix);
typedef RegalProc<RCGLRELEASEPIXELFORMATPROC> REGALCGLRELEASEPIXELFORMATPROC;
typedef CGLContextObj (REGAL_CALL *RCGLRETAINCONTEXTPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLRETAINCONTEXTPROC> REGALCGLRETAINCONTEXTPROC;
typedef CGLPBufferObj (REGAL_CALL *RCGLRETAINPBUFFERPROC)(Layer *_layer, CGLPBufferObj pbuffer);
typedef RegalProc<RCGLRETAINPBUFFERPROC> REGALCGLRETAINPBUFFERPROC;
typedef CGLPixelFormatObj (REGAL_CALL *RCGLRETAINPIXELFORMATPROC)(Layer *_layer, CGLPixelFormatObj pix);
typedef RegalProc<RCGLRETAINPIXELFORMATPROC> REGALCGLRETAINPIXELFORMATPROC;
typedef CGLError (REGAL_CALL *RCGLSETGLOBALOPTIONPROC)(Layer *_layer, CGLGlobalOption pname, const GLint *params);
typedef RegalProc<RCGLSETGLOBALOPTIONPROC> REGALCGLSETGLOBALOPTIONPROC;
typedef CGLError (REGAL_CALL *RCGLUNLOCKCONTEXTPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLUNLOCKCONTEXTPROC> REGALCGLUNLOCKCONTEXTPROC;

    // CGL_VERSION_1_3

typedef CGLContextObj (REGAL_CALL *RCGLGETCURRENTCONTEXTPROC)(Layer *_layer);
typedef RegalProc<RCGLGETCURRENTCONTEXTPROC> REGALCGLGETCURRENTCONTEXTPROC;
typedef CGLShareGroupObj (REGAL_CALL *RCGLGETSHAREGROUPPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLGETSHAREGROUPPROC> REGALCGLGETSHAREGROUPPROC;
typedef CGLError (REGAL_CALL *RCGLGETSURFACEPROC)(Layer *_layer, CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf);
typedef RegalProc<RCGLGETSURFACEPROC> REGALCGLGETSURFACEPROC;
typedef CGLError (REGAL_CALL *RCGLSETCURRENTCONTEXTPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLSETCURRENTCONTEXTPROC> REGALCGLSETCURRENTCONTEXTPROC;
typedef CGLError (REGAL_CALL *RCGLSETSURFACEPROC)(Layer *_layer, CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf);
typedef RegalProc<RCGLSETSURFACEPROC> REGALCGLSETSURFACEPROC;
typedef CGLError (REGAL_CALL *RCGLTEXIMAGEIOSURFACE2DPROC)(Layer *_layer, CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane);
typedef RegalProc<RCGLTEXIMAGEIOSURFACE2DPROC> REGALCGLTEXIMAGEIOSURFACE2DPROC;
typedef CGLError (REGAL_CALL *RCGLUPDATECONTEXTPROC)(Layer *_layer, CGLContextObj ctx);
typedef RegalProc<RCGLUPDATECONTEXTPROC> REGALCGLUPDATECONTEXTPROC;
#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL
    // EGL_ANGLE_query_surface_pointer

typedef EGLBoolean (REGAL_CALL *REGLQUERYSURFACEPOINTERANGLEPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value);
typedef RegalProc<REGLQUERYSURFACEPOINTERANGLEPROC> REGALEGLQUERYSURFACEPOINTERANGLEPROC;

    // EGL_KHR_fence_sync

typedef EGLint (REGAL_CALL *REGLCLIENTWAITSYNCKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout);
typedef RegalProc<REGLCLIENTWAITSYNCKHRPROC> REGALEGLCLIENTWAITSYNCKHRPROC;
typedef EGLSyncKHR (REGAL_CALL *REGLCREATESYNCKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLenum type, const EGLint *attrib_list);
typedef RegalProc<REGLCREATESYNCKHRPROC> REGALEGLCREATESYNCKHRPROC;
typedef EGLBoolean (REGAL_CALL *REGLDESTROYSYNCKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync);
typedef RegalProc<REGLDESTROYSYNCKHRPROC> REGALEGLDESTROYSYNCKHRPROC;
typedef EGLBoolean (REGAL_CALL *REGLGETSYNCATTRIBKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value);
typedef RegalProc<REGLGETSYNCATTRIBKHRPROC> REGALEGLGETSYNCATTRIBKHRPROC;

    // EGL_KHR_image_base

typedef EGLImageKHR (REGAL_CALL *REGLCREATEIMAGEKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list);
typedef RegalProc<REGLCREATEIMAGEKHRPROC> REGALEGLCREATEIMAGEKHRPROC;
typedef EGLBoolean (REGAL_CALL *REGLDESTROYIMAGEKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLImageKHR image);
typedef RegalProc<REGLDESTROYIMAGEKHRPROC> REGALEGLDESTROYIMAGEKHRPROC;

    // EGL_KHR_lock_surface

typedef EGLBoolean (REGAL_CALL *REGLLOCKSURFACEKHRPROC)(Layer *_layer, EGLDisplay display, EGLSurface surface, const EGLint *attrib_list);
typedef RegalProc<REGLLOCKSURFACEKHRPROC> REGALEGLLOCKSURFACEKHRPROC;
typedef EGLBoolean (REGAL_CALL *REGLUNLOCKSURFACEKHRPROC)(Layer *_layer, EGLDisplay display, EGLSurface surface);
typedef RegalProc<REGLUNLOCKSURFACEKHRPROC> REGALEGLUNLOCKSURFACEKHRPROC;

    // EGL_KHR_stream_consumer_gltexture

typedef EGLBoolean (REGAL_CALL *REGLSTREAMCONSUMERACQUIREKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream);
typedef RegalProc<REGLSTREAMCONSUMERACQUIREKHRPROC> REGALEGLSTREAMCONSUMERACQUIREKHRPROC;
typedef EGLBoolean (REGAL_CALL *REGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream);
typedef RegalProc<REGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC> REGALEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC;
typedef EGLBoolean (REGAL_CALL *REGLSTREAMCONSUMERRELEASEKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream);
typedef RegalProc<REGLSTREAMCONSUMERRELEASEKHRPROC> REGALEGLSTREAMCONSUMERRELEASEKHRPROC;

    // EGL_KHR_stream_cross_process_fd

typedef EGLStreamKHR (REGAL_CALL *REGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor);
typedef RegalProc<REGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC> REGALEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC;
typedef EGLNativeFileDescriptorKHR (REGAL_CALL *REGLGETSTREAMFILEDESCRIPTORKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream);
typedef RegalProc<REGLGETSTREAMFILEDESCRIPTORKHRPROC> REGALEGLGETSTREAMFILEDESCRIPTORKHRPROC;

    // EGL_KHR_stream_producer_eglsurface

typedef EGLSurface (REGAL_CALL *REGLCREATESTREAMPRODUCERSURFACEKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list);
typedef RegalProc<REGLCREATESTREAMPRODUCERSURFACEKHRPROC> REGALEGLCREATESTREAMPRODUCERSURFACEKHRPROC;

    // EGL_KHR_wait_sync

typedef EGLint (REGAL_CALL *REGLWAITSYNCKHRPROC)(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags);
typedef RegalProc<REGLWAITSYNCKHRPROC> REGALEGLWAITSYNCKHRPROC;

    // EGL_MESA_drm_image

typedef EGLImageKHR (REGAL_CALL *REGLCREATEDRMIMAGEMESAPROC)(Layer *_layer, EGLDisplay dpy, const EGLint *attrib_list);
typedef RegalProc<REGLCREATEDRMIMAGEMESAPROC> REGALEGLCREATEDRMIMAGEMESAPROC;
typedef EGLBoolean (REGAL_CALL *REGLEXPORTDRMIMAGEMESAPROC)(Layer *_layer, EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride);
typedef RegalProc<REGLEXPORTDRMIMAGEMESAPROC> REGALEGLEXPORTDRMIMAGEMESAPROC;

    // EGL_NV_coverage_sample

typedef void (REGAL_CALL *REGLCOVERAGEMASKNVPROC)(Layer *_layer, GLboolean mask);
typedef RegalProc<REGLCOVERAGEMASKNVPROC> REGALEGLCOVERAGEMASKNVPROC;
typedef void (REGAL_CALL *REGLCOVERAGEOPERATIONNVPROC)(Layer *_layer, GLenum operation);
typedef RegalProc<REGLCOVERAGEOPERATIONNVPROC> REGALEGLCOVERAGEOPERATIONNVPROC;

    // EGL_NV_post_sub_buffer

typedef EGLBoolean (REGAL_CALL *REGLPOSTSUBBUFFERNVPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height);
typedef RegalProc<REGLPOSTSUBBUFFERNVPROC> REGALEGLPOSTSUBBUFFERNVPROC;

    // EGL_NV_sync

typedef EGLint (REGAL_CALL *REGLCLIENTWAITSYNCNVPROC)(Layer *_layer, EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout);
typedef RegalProc<REGLCLIENTWAITSYNCNVPROC> REGALEGLCLIENTWAITSYNCNVPROC;
typedef EGLSyncNV (REGAL_CALL *REGLCREATEFENCESYNCNVPROC)(Layer *_layer, EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list);
typedef RegalProc<REGLCREATEFENCESYNCNVPROC> REGALEGLCREATEFENCESYNCNVPROC;
typedef EGLBoolean (REGAL_CALL *REGLDESTROYSYNCNVPROC)(Layer *_layer, EGLSyncNV GLsync);
typedef RegalProc<REGLDESTROYSYNCNVPROC> REGALEGLDESTROYSYNCNVPROC;
typedef EGLBoolean (REGAL_CALL *REGLFENCENVPROC)(Layer *_layer, EGLSyncNV GLsync);
typedef RegalProc<REGLFENCENVPROC> REGALEGLFENCENVPROC;
typedef EGLBoolean (REGAL_CALL *REGLGETSYNCATTRIBNVPROC)(Layer *_layer, EGLSyncNV GLsync, EGLint attribute, EGLint *value);
typedef RegalProc<REGLGETSYNCATTRIBNVPROC> REGALEGLGETSYNCATTRIBNVPROC;
typedef EGLBoolean (REGAL_CALL *REGLSIGNALSYNCNVPROC)(Layer *_layer, EGLSyncNV GLsync, EGLenum mode);
typedef RegalProc<REGLSIGNALSYNCNVPROC> REGALEGLSIGNALSYNCNVPROC;

    // EGL_NV_system_time

typedef EGLuint64NV (REGAL_CALL *REGLGETSYSTEMTIMEFREQUENCYNVPROC)(Layer *_layer);
typedef RegalProc<REGLGETSYSTEMTIMEFREQUENCYNVPROC> REGALEGLGETSYSTEMTIMEFREQUENCYNVPROC;
typedef EGLuint64NV (REGAL_CALL *REGLGETSYSTEMTIMENVPROC)(Layer *_layer);
typedef RegalProc<REGLGETSYSTEMTIMENVPROC> REGALEGLGETSYSTEMTIMENVPROC;

    // EGL_VERSION_1_0

typedef EGLBoolean (REGAL_CALL *REGLCHOOSECONFIGPROC)(Layer *_layer, EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config);
typedef RegalProc<REGLCHOOSECONFIGPROC> REGALEGLCHOOSECONFIGPROC;
typedef EGLBoolean (REGAL_CALL *REGLCOPYBUFFERSPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target);
typedef RegalProc<REGLCOPYBUFFERSPROC> REGALEGLCOPYBUFFERSPROC;
typedef EGLContext (REGAL_CALL *REGLCREATECONTEXTPROC)(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list);
typedef RegalProc<REGLCREATECONTEXTPROC> REGALEGLCREATECONTEXTPROC;
typedef EGLSurface (REGAL_CALL *REGLCREATEPBUFFERSURFACEPROC)(Layer *_layer, EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list);
typedef RegalProc<REGLCREATEPBUFFERSURFACEPROC> REGALEGLCREATEPBUFFERSURFACEPROC;
typedef EGLSurface (REGAL_CALL *REGLCREATEPIXMAPSURFACEPROC)(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list);
typedef RegalProc<REGLCREATEPIXMAPSURFACEPROC> REGALEGLCREATEPIXMAPSURFACEPROC;
typedef EGLSurface (REGAL_CALL *REGLCREATEWINDOWSURFACEPROC)(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list);
typedef RegalProc<REGLCREATEWINDOWSURFACEPROC> REGALEGLCREATEWINDOWSURFACEPROC;
typedef EGLBoolean (REGAL_CALL *REGLDESTROYCONTEXTPROC)(Layer *_layer, EGLDisplay dpy, EGLContext ctx);
typedef RegalProc<REGLDESTROYCONTEXTPROC> REGALEGLDESTROYCONTEXTPROC;
typedef EGLBoolean (REGAL_CALL *REGLDESTROYSURFACEPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface);
typedef RegalProc<REGLDESTROYSURFACEPROC> REGALEGLDESTROYSURFACEPROC;
typedef EGLBoolean (REGAL_CALL *REGLGETCONFIGATTRIBPROC)(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value);
typedef RegalProc<REGLGETCONFIGATTRIBPROC> REGALEGLGETCONFIGATTRIBPROC;
typedef EGLBoolean (REGAL_CALL *REGLGETCONFIGSPROC)(Layer *_layer, EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config);
typedef RegalProc<REGLGETCONFIGSPROC> REGALEGLGETCONFIGSPROC;
typedef EGLContext (REGAL_CALL *REGLGETCURRENTCONTEXTPROC)(Layer *_layer);
typedef RegalProc<REGLGETCURRENTCONTEXTPROC> REGALEGLGETCURRENTCONTEXTPROC;
typedef EGLDisplay (REGAL_CALL *REGLGETCURRENTDISPLAYPROC)(Layer *_layer);
typedef RegalProc<REGLGETCURRENTDISPLAYPROC> REGALEGLGETCURRENTDISPLAYPROC;
typedef EGLSurface (REGAL_CALL *REGLGETCURRENTSURFACEPROC)(Layer *_layer, EGLint readdraw);
typedef RegalProc<REGLGETCURRENTSURFACEPROC> REGALEGLGETCURRENTSURFACEPROC;
typedef EGLDisplay (REGAL_CALL *REGLGETDISPLAYPROC)(Layer *_layer, EGLNativeDisplayType display_id);
typedef RegalProc<REGLGETDISPLAYPROC> REGALEGLGETDISPLAYPROC;
typedef EGLint (REGAL_CALL *REGLGETERRORPROC)(Layer *_layer);
typedef RegalProc<REGLGETERRORPROC> REGALEGLGETERRORPROC;
typedef __eglMustCastToProperFunctionPointerType (REGAL_CALL *REGLGETPROCADDRESSPROC)(Layer *_layer, const char *procname);
typedef RegalProc<REGLGETPROCADDRESSPROC> REGALEGLGETPROCADDRESSPROC;
typedef EGLBoolean (REGAL_CALL *REGLINITIALIZEPROC)(Layer *_layer, EGLDisplay dpy, EGLint *major, EGLint *minor);
typedef RegalProc<REGLINITIALIZEPROC> REGALEGLINITIALIZEPROC;
typedef EGLBoolean (REGAL_CALL *REGLMAKECURRENTPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
typedef RegalProc<REGLMAKECURRENTPROC> REGALEGLMAKECURRENTPROC;
typedef EGLBoolean (REGAL_CALL *REGLQUERYCONTEXTPROC)(Layer *_layer, EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value);
typedef RegalProc<REGLQUERYCONTEXTPROC> REGALEGLQUERYCONTEXTPROC;
typedef const char *(REGAL_CALL *REGLQUERYSTRINGPROC)(Layer *_layer, EGLDisplay dpy, EGLint name);
typedef RegalProc<REGLQUERYSTRINGPROC> REGALEGLQUERYSTRINGPROC;
typedef EGLBoolean (REGAL_CALL *REGLQUERYSURFACEPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value);
typedef RegalProc<REGLQUERYSURFACEPROC> REGALEGLQUERYSURFACEPROC;
typedef EGLBoolean (REGAL_CALL *REGLSWAPBUFFERSPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface);
typedef RegalProc<REGLSWAPBUFFERSPROC> REGALEGLSWAPBUFFERSPROC;
typedef EGLBoolean (REGAL_CALL *REGLTERMINATEPROC)(Layer *_layer, EGLDisplay dpy);
typedef RegalProc<REGLTERMINATEPROC> REGALEGLTERMINATEPROC;
typedef EGLBoolean (REGAL_CALL *REGLWAITGLPROC)(Layer *_layer);
typedef RegalProc<REGLWAITGLPROC> REGALEGLWAITGLPROC;
typedef EGLBoolean (REGAL_CALL *REGLWAITNATIVEPROC)(Layer *_layer, EGLint engine);
typedef RegalProc<REGLWAITNATIVEPROC> REGALEGLWAITNATIVEPROC;

    // EGL_VERSION_1_1

typedef EGLBoolean (REGAL_CALL *REGLBINDTEXIMAGEPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint buffer);
typedef RegalProc<REGLBINDTEXIMAGEPROC> REGALEGLBINDTEXIMAGEPROC;
typedef EGLBoolean (REGAL_CALL *REGLRELEASETEXIMAGEPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint buffer);
typedef RegalProc<REGLRELEASETEXIMAGEPROC> REGALEGLRELEASETEXIMAGEPROC;

    // EGL_VERSION_1_2

typedef EGLBoolean (REGAL_CALL *REGLBINDAPIPROC)(Layer *_layer, EGLenum api);
typedef RegalProc<REGLBINDAPIPROC> REGALEGLBINDAPIPROC;
typedef EGLSurface (REGAL_CALL *REGLCREATEPBUFFERFROMCLIENTBUFFERPROC)(Layer *_layer, EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list);
typedef RegalProc<REGLCREATEPBUFFERFROMCLIENTBUFFERPROC> REGALEGLCREATEPBUFFERFROMCLIENTBUFFERPROC;
typedef EGLenum (REGAL_CALL *REGLQUERYAPIPROC)(Layer *_layer);
typedef RegalProc<REGLQUERYAPIPROC> REGALEGLQUERYAPIPROC;
typedef EGLBoolean (REGAL_CALL *REGLRELEASETHREADPROC)(Layer *_layer);
typedef RegalProc<REGLRELEASETHREADPROC> REGALEGLRELEASETHREADPROC;
typedef EGLBoolean (REGAL_CALL *REGLSURFACEATTRIBPROC)(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value);
typedef RegalProc<REGLSURFACEATTRIBPROC> REGALEGLSURFACEATTRIBPROC;
typedef EGLBoolean (REGAL_CALL *REGLSWAPINTERVALPROC)(Layer *_layer, EGLDisplay dpy, EGLint interval);
typedef RegalProc<REGLSWAPINTERVALPROC> REGALEGLSWAPINTERVALPROC;
typedef EGLBoolean (REGAL_CALL *REGLWAITCLIENTPROC)(Layer *_layer);
typedef RegalProc<REGLWAITCLIENTPROC> REGALEGLWAITCLIENTPROC;
#endif // REGAL_SYS_EGL

#if REGAL_SYS_WGL
    // WGL_3DL_stereo_control

#define RwglSetStereoEmitterState3DL( dt, _hDC, _uState ) dt.wglSetStereoEmitterState3DL.proc( dt.wglSetStereoEmitterState3DL.layer, _hDC, _uState )

    // WGL_AMD_gpu_association

#define RwglBlitContextFramebufferAMD( dt, _dstCtx, _srcX0, _srcY0, _srcX1, _srcY1, _dstX0, _dstY0, _dstX1, _dstY1, _mask, _filter ) dt.wglBlitContextFramebufferAMD.proc( dt.wglBlitContextFramebufferAMD.layer, _dstCtx, _srcX0, _srcY0, _srcX1, _srcY1, _dstX0, _dstY0, _dstX1, _dstY1, _mask, _filter )
#define RwglCreateAssociatedContextAMD( dt, _id ) dt.wglCreateAssociatedContextAMD.proc( dt.wglCreateAssociatedContextAMD.layer, _id )
#define RwglCreateAssociatedContextAttribsAMD( dt, _id, _hShareContext, _attribList ) dt.wglCreateAssociatedContextAttribsAMD.proc( dt.wglCreateAssociatedContextAttribsAMD.layer, _id, _hShareContext, _attribList )
#define RwglDeleteAssociatedContextAMD( dt, _hglrc ) dt.wglDeleteAssociatedContextAMD.proc( dt.wglDeleteAssociatedContextAMD.layer, _hglrc )
#define RwglGetContextGPUIDAMD( dt, _hglrc ) dt.wglGetContextGPUIDAMD.proc( dt.wglGetContextGPUIDAMD.layer, _hglrc )
#define RwglGetCurrentAssociatedContextAMD( dt ) dt.wglGetCurrentAssociatedContextAMD.proc( dt.wglGetCurrentAssociatedContextAMD.layer )
#define RwglGetGPUIDsAMD( dt, _maxCount, _ids ) dt.wglGetGPUIDsAMD.proc( dt.wglGetGPUIDsAMD.layer, _maxCount, _ids )
#define RwglGetGPUInfoAMD( dt, _id, _property, _dataType, _size, _data ) dt.wglGetGPUInfoAMD.proc( dt.wglGetGPUInfoAMD.layer, _id, _property, _dataType, _size, _data )
#define RwglMakeAssociatedContextCurrentAMD( dt, _hglrc ) dt.wglMakeAssociatedContextCurrentAMD.proc( dt.wglMakeAssociatedContextCurrentAMD.layer, _hglrc )

    // WGL_ARB_buffer_region

#define RwglCreateBufferRegionARB( dt, _hDC, _iLayerPlane, _uType ) dt.wglCreateBufferRegionARB.proc( dt.wglCreateBufferRegionARB.layer, _hDC, _iLayerPlane, _uType )
#define RwglDeleteBufferRegionARB( dt, _hRegion ) dt.wglDeleteBufferRegionARB.proc( dt.wglDeleteBufferRegionARB.layer, _hRegion )
#define RwglRestoreBufferRegionARB( dt, _hRegion, _x, _y, _width, _height, _xSrc, _ySrc ) dt.wglRestoreBufferRegionARB.proc( dt.wglRestoreBufferRegionARB.layer, _hRegion, _x, _y, _width, _height, _xSrc, _ySrc )
#define RwglSaveBufferRegionARB( dt, _hRegion, _x, _y, _width, _height ) dt.wglSaveBufferRegionARB.proc( dt.wglSaveBufferRegionARB.layer, _hRegion, _x, _y, _width, _height )

    // WGL_ARB_create_context

#define RwglCreateContextAttribsARB( dt, _hDC, _hShareContext, _piAttribList ) dt.wglCreateContextAttribsARB.proc( dt.wglCreateContextAttribsARB.layer, _hDC, _hShareContext, _piAttribList )

    // WGL_ARB_extensions_string

#define RwglGetExtensionsStringARB( dt, _hDC ) dt.wglGetExtensionsStringARB.proc( dt.wglGetExtensionsStringARB.layer, _hDC )

    // WGL_ARB_make_current_read

#define RwglGetCurrentReadDCARB( dt ) dt.wglGetCurrentReadDCARB.proc( dt.wglGetCurrentReadDCARB.layer )
#define RwglMakeContextCurrentARB( dt, _hDrawDC, _hReadDC, _hglrc ) dt.wglMakeContextCurrentARB.proc( dt.wglMakeContextCurrentARB.layer, _hDrawDC, _hReadDC, _hglrc )

    // WGL_ARB_pbuffer

#define RwglCreatePbufferARB( dt, _hDC, _iPixelFormat, _iWidth, _iHeight, _piAttribList ) dt.wglCreatePbufferARB.proc( dt.wglCreatePbufferARB.layer, _hDC, _iPixelFormat, _iWidth, _iHeight, _piAttribList )
#define RwglDestroyPbufferARB( dt, _hPbuffer ) dt.wglDestroyPbufferARB.proc( dt.wglDestroyPbufferARB.layer, _hPbuffer )
#define RwglGetPbufferDCARB( dt, _hPbuffer ) dt.wglGetPbufferDCARB.proc( dt.wglGetPbufferDCARB.layer, _hPbuffer )
#define RwglQueryPbufferARB( dt, _hPbuffer, _iAttribute, _piValue ) dt.wglQueryPbufferARB.proc( dt.wglQueryPbufferARB.layer, _hPbuffer, _iAttribute, _piValue )
#define RwglReleasePbufferDCARB( dt, _hPbuffer, _hDC ) dt.wglReleasePbufferDCARB.proc( dt.wglReleasePbufferDCARB.layer, _hPbuffer, _hDC )

    // WGL_ARB_pixel_format

#define RwglChoosePixelFormatARB( dt, _hDC, _piAttribIList, _pfAttribFList, _nMaxFormats, _piFormats, _nNumFormats ) dt.wglChoosePixelFormatARB.proc( dt.wglChoosePixelFormatARB.layer, _hDC, _piAttribIList, _pfAttribFList, _nMaxFormats, _piFormats, _nNumFormats )
#define RwglGetPixelFormatAttribfvARB( dt, _hDC, _iPixelFormat, _iLayerPlane, _nAttributes, _piAttributes, _pfValues ) dt.wglGetPixelFormatAttribfvARB.proc( dt.wglGetPixelFormatAttribfvARB.layer, _hDC, _iPixelFormat, _iLayerPlane, _nAttributes, _piAttributes, _pfValues )
#define RwglGetPixelFormatAttribivARB( dt, _hDC, _iPixelFormat, _iLayerPlane, _nAttributes, _piAttributes, _piValues ) dt.wglGetPixelFormatAttribivARB.proc( dt.wglGetPixelFormatAttribivARB.layer, _hDC, _iPixelFormat, _iLayerPlane, _nAttributes, _piAttributes, _piValues )

    // WGL_ARB_render_texture

#define RwglBindTexImageARB( dt, _hPbuffer, _iBuffer ) dt.wglBindTexImageARB.proc( dt.wglBindTexImageARB.layer, _hPbuffer, _iBuffer )
#define RwglReleaseTexImageARB( dt, _hPbuffer, _iBuffer ) dt.wglReleaseTexImageARB.proc( dt.wglReleaseTexImageARB.layer, _hPbuffer, _iBuffer )
#define RwglSetPbufferAttribARB( dt, _hPbuffer, _piAttribList ) dt.wglSetPbufferAttribARB.proc( dt.wglSetPbufferAttribARB.layer, _hPbuffer, _piAttribList )

    // WGL_EXT_display_color_table

#define RwglBindDisplayColorTableEXT( dt, _id ) dt.wglBindDisplayColorTableEXT.proc( dt.wglBindDisplayColorTableEXT.layer, _id )
#define RwglCreateDisplayColorTableEXT( dt, _id ) dt.wglCreateDisplayColorTableEXT.proc( dt.wglCreateDisplayColorTableEXT.layer, _id )
#define RwglDestroyDisplayColorTableEXT( dt, _id ) dt.wglDestroyDisplayColorTableEXT.proc( dt.wglDestroyDisplayColorTableEXT.layer, _id )
#define RwglLoadDisplayColorTableEXT( dt, _table, _length ) dt.wglLoadDisplayColorTableEXT.proc( dt.wglLoadDisplayColorTableEXT.layer, _table, _length )

    // WGL_EXT_extensions_string

#define RwglGetExtensionsStringEXT( dt ) dt.wglGetExtensionsStringEXT.proc( dt.wglGetExtensionsStringEXT.layer )

    // WGL_EXT_make_current_read

#define RwglGetCurrentReadDCEXT( dt ) dt.wglGetCurrentReadDCEXT.proc( dt.wglGetCurrentReadDCEXT.layer )
#define RwglMakeContextCurrentEXT( dt, _hDrawDC, _hReadDC, _hglrc ) dt.wglMakeContextCurrentEXT.proc( dt.wglMakeContextCurrentEXT.layer, _hDrawDC, _hReadDC, _hglrc )

    // WGL_EXT_pbuffer

#define RwglCreatePbufferEXT( dt, _hDC, _iPixelFormat, _iWidth, _iHeight, _piAttribList ) dt.wglCreatePbufferEXT.proc( dt.wglCreatePbufferEXT.layer, _hDC, _iPixelFormat, _iWidth, _iHeight, _piAttribList )
#define RwglDestroyPbufferEXT( dt, _hPbuffer ) dt.wglDestroyPbufferEXT.proc( dt.wglDestroyPbufferEXT.layer, _hPbuffer )
#define RwglGetPbufferDCEXT( dt, _hPbuffer ) dt.wglGetPbufferDCEXT.proc( dt.wglGetPbufferDCEXT.layer, _hPbuffer )
#define RwglQueryPbufferEXT( dt, _hPbuffer, _iAttribute, _piValue ) dt.wglQueryPbufferEXT.proc( dt.wglQueryPbufferEXT.layer, _hPbuffer, _iAttribute, _piValue )
#define RwglReleasePbufferDCEXT( dt, _hPbuffer, _hDC ) dt.wglReleasePbufferDCEXT.proc( dt.wglReleasePbufferDCEXT.layer, _hPbuffer, _hDC )

    // WGL_EXT_pixel_format

#define RwglChoosePixelFormatEXT( dt, _hDC, _piAttribIList, _pfAttribFList, _nMaxFormats, _piFormats, _nNumFormats ) dt.wglChoosePixelFormatEXT.proc( dt.wglChoosePixelFormatEXT.layer, _hDC, _piAttribIList, _pfAttribFList, _nMaxFormats, _piFormats, _nNumFormats )
#define RwglGetPixelFormatAttribfvEXT( dt, _hDC, _iPixelFormat, _iLayerPlane, _nAttributes, _piAttributes, _pfValues ) dt.wglGetPixelFormatAttribfvEXT.proc( dt.wglGetPixelFormatAttribfvEXT.layer, _hDC, _iPixelFormat, _iLayerPlane, _nAttributes, _piAttributes, _pfValues )
#define RwglGetPixelFormatAttribivEXT( dt, _hDC, _iPixelFormat, _iLayerPlane, _nAttributes, _piAttributes, _piValues ) dt.wglGetPixelFormatAttribivEXT.proc( dt.wglGetPixelFormatAttribivEXT.layer, _hDC, _iPixelFormat, _iLayerPlane, _nAttributes, _piAttributes, _piValues )

    // WGL_EXT_swap_control

#define RwglGetSwapIntervalEXT( dt ) dt.wglGetSwapIntervalEXT.proc( dt.wglGetSwapIntervalEXT.layer )
#define RwglSwapIntervalEXT( dt, _interval ) dt.wglSwapIntervalEXT.proc( dt.wglSwapIntervalEXT.layer, _interval )

    // WGL_GDI

#define RSwapBuffers( dt, _hDC ) dt.SwapBuffers.proc( dt.SwapBuffers.layer, _hDC )
#define RwglChoosePixelFormat( dt, _hDC, _ppfd ) dt.wglChoosePixelFormat.proc( dt.wglChoosePixelFormat.layer, _hDC, _ppfd )
#define RwglDescribePixelFormat( dt, _hDC, _iPixelFormat, _nBytes, _ppfd ) dt.wglDescribePixelFormat.proc( dt.wglDescribePixelFormat.layer, _hDC, _iPixelFormat, _nBytes, _ppfd )
#define RwglGetPixelFormat( dt, _hDC ) dt.wglGetPixelFormat.proc( dt.wglGetPixelFormat.layer, _hDC )
#define RwglSetPixelFormat( dt, _hDC, _iPixelFormat, _ppfd ) dt.wglSetPixelFormat.proc( dt.wglSetPixelFormat.layer, _hDC, _iPixelFormat, _ppfd )
#define RwglSwapBuffers( dt, _hDC ) dt.wglSwapBuffers.proc( dt.wglSwapBuffers.layer, _hDC )

    // WGL_I3D_digital_video_control

#define RwglGetDigitalVideoParametersI3D( dt, _hDC, _iAttribute, _piValue ) dt.wglGetDigitalVideoParametersI3D.proc( dt.wglGetDigitalVideoParametersI3D.layer, _hDC, _iAttribute, _piValue )
#define RwglSetDigitalVideoParametersI3D( dt, _hDC, _iAttribute, _piValue ) dt.wglSetDigitalVideoParametersI3D.proc( dt.wglSetDigitalVideoParametersI3D.layer, _hDC, _iAttribute, _piValue )

    // WGL_I3D_gamma

#define RwglGetGammaTableI3D( dt, _hDC, _iEntries, _puRed, _puGreen, _puBlue ) dt.wglGetGammaTableI3D.proc( dt.wglGetGammaTableI3D.layer, _hDC, _iEntries, _puRed, _puGreen, _puBlue )
#define RwglGetGammaTableParametersI3D( dt, _hDC, _iAttribute, _piValue ) dt.wglGetGammaTableParametersI3D.proc( dt.wglGetGammaTableParametersI3D.layer, _hDC, _iAttribute, _piValue )
#define RwglSetGammaTableI3D( dt, _hDC, _iEntries, _puRed, _puGreen, _puBlue ) dt.wglSetGammaTableI3D.proc( dt.wglSetGammaTableI3D.layer, _hDC, _iEntries, _puRed, _puGreen, _puBlue )
#define RwglSetGammaTableParametersI3D( dt, _hDC, _iAttribute, _piValue ) dt.wglSetGammaTableParametersI3D.proc( dt.wglSetGammaTableParametersI3D.layer, _hDC, _iAttribute, _piValue )

    // WGL_I3D_genlock

#define RwglDisableGenlockI3D( dt, _hDC ) dt.wglDisableGenlockI3D.proc( dt.wglDisableGenlockI3D.layer, _hDC )
#define RwglEnableGenlockI3D( dt, _hDC ) dt.wglEnableGenlockI3D.proc( dt.wglEnableGenlockI3D.layer, _hDC )
#define RwglGenlockSampleRateI3D( dt, _hDC, _uRate ) dt.wglGenlockSampleRateI3D.proc( dt.wglGenlockSampleRateI3D.layer, _hDC, _uRate )
#define RwglGenlockSourceDelayI3D( dt, _hDC, _uDelay ) dt.wglGenlockSourceDelayI3D.proc( dt.wglGenlockSourceDelayI3D.layer, _hDC, _uDelay )
#define RwglGenlockSourceEdgeI3D( dt, _hDC, _uEdge ) dt.wglGenlockSourceEdgeI3D.proc( dt.wglGenlockSourceEdgeI3D.layer, _hDC, _uEdge )
#define RwglGenlockSourceI3D( dt, _hDC, _uSource ) dt.wglGenlockSourceI3D.proc( dt.wglGenlockSourceI3D.layer, _hDC, _uSource )
#define RwglGetGenlockSampleRateI3D( dt, _hDC, _uRate ) dt.wglGetGenlockSampleRateI3D.proc( dt.wglGetGenlockSampleRateI3D.layer, _hDC, _uRate )
#define RwglGetGenlockSourceDelayI3D( dt, _hDC, _uDelay ) dt.wglGetGenlockSourceDelayI3D.proc( dt.wglGetGenlockSourceDelayI3D.layer, _hDC, _uDelay )
#define RwglGetGenlockSourceEdgeI3D( dt, _hDC, _uEdge ) dt.wglGetGenlockSourceEdgeI3D.proc( dt.wglGetGenlockSourceEdgeI3D.layer, _hDC, _uEdge )
#define RwglGetGenlockSourceI3D( dt, _hDC, _uSource ) dt.wglGetGenlockSourceI3D.proc( dt.wglGetGenlockSourceI3D.layer, _hDC, _uSource )
#define RwglIsEnabledGenlockI3D( dt, _hDC, _pFlag ) dt.wglIsEnabledGenlockI3D.proc( dt.wglIsEnabledGenlockI3D.layer, _hDC, _pFlag )
#define RwglQueryGenlockMaxSourceDelayI3D( dt, _hDC, _uMaxLineDelay, _uMaxPixelDelay ) dt.wglQueryGenlockMaxSourceDelayI3D.proc( dt.wglQueryGenlockMaxSourceDelayI3D.layer, _hDC, _uMaxLineDelay, _uMaxPixelDelay )

    // WGL_I3D_image_buffer

#define RwglAssociateImageBufferEventsI3D( dt, _hDC, _pEvent, _pAddress, _pSize, _count ) dt.wglAssociateImageBufferEventsI3D.proc( dt.wglAssociateImageBufferEventsI3D.layer, _hDC, _pEvent, _pAddress, _pSize, _count )
#define RwglCreateImageBufferI3D( dt, _hDC, _dwSize, _uFlags ) dt.wglCreateImageBufferI3D.proc( dt.wglCreateImageBufferI3D.layer, _hDC, _dwSize, _uFlags )
#define RwglDestroyImageBufferI3D( dt, _hDC, _pAddress ) dt.wglDestroyImageBufferI3D.proc( dt.wglDestroyImageBufferI3D.layer, _hDC, _pAddress )
#define RwglReleaseImageBufferEventsI3D( dt, _hDC, _pAddress, _count ) dt.wglReleaseImageBufferEventsI3D.proc( dt.wglReleaseImageBufferEventsI3D.layer, _hDC, _pAddress, _count )

    // WGL_I3D_swap_frame_lock

#define RwglDisableFrameLockI3D( dt ) dt.wglDisableFrameLockI3D.proc( dt.wglDisableFrameLockI3D.layer )
#define RwglEnableFrameLockI3D( dt ) dt.wglEnableFrameLockI3D.proc( dt.wglEnableFrameLockI3D.layer )
#define RwglIsEnabledFrameLockI3D( dt, _pFlag ) dt.wglIsEnabledFrameLockI3D.proc( dt.wglIsEnabledFrameLockI3D.layer, _pFlag )
#define RwglQueryFrameLockMasterI3D( dt, _pFlag ) dt.wglQueryFrameLockMasterI3D.proc( dt.wglQueryFrameLockMasterI3D.layer, _pFlag )

    // WGL_I3D_swap_frame_usage

#define RwglBeginFrameTrackingI3D( dt ) dt.wglBeginFrameTrackingI3D.proc( dt.wglBeginFrameTrackingI3D.layer )
#define RwglEndFrameTrackingI3D( dt ) dt.wglEndFrameTrackingI3D.proc( dt.wglEndFrameTrackingI3D.layer )
#define RwglGetFrameUsageI3D( dt, _pUsage ) dt.wglGetFrameUsageI3D.proc( dt.wglGetFrameUsageI3D.layer, _pUsage )
#define RwglQueryFrameTrackingI3D( dt, _pFrameCount, _pMissedFrames, _pLastMissedUsage ) dt.wglQueryFrameTrackingI3D.proc( dt.wglQueryFrameTrackingI3D.layer, _pFrameCount, _pMissedFrames, _pLastMissedUsage )

    // WGL_NV_DX_interop

#define RwglDXCloseDeviceNV( dt, _hDevice ) dt.wglDXCloseDeviceNV.proc( dt.wglDXCloseDeviceNV.layer, _hDevice )
#define RwglDXLockObjectsNV( dt, _hDevice, _count, _hObjects ) dt.wglDXLockObjectsNV.proc( dt.wglDXLockObjectsNV.layer, _hDevice, _count, _hObjects )
#define RwglDXObjectAccessNV( dt, _hObject, _access ) dt.wglDXObjectAccessNV.proc( dt.wglDXObjectAccessNV.layer, _hObject, _access )
#define RwglDXOpenDeviceNV( dt, _dxDevice ) dt.wglDXOpenDeviceNV.proc( dt.wglDXOpenDeviceNV.layer, _dxDevice )
#define RwglDXRegisterObjectNV( dt, _hDevice, _dxObject, _name, _type, _access ) dt.wglDXRegisterObjectNV.proc( dt.wglDXRegisterObjectNV.layer, _hDevice, _dxObject, _name, _type, _access )
#define RwglDXSetResourceShareHandleNV( dt, _dxObject, _shareHandle ) dt.wglDXSetResourceShareHandleNV.proc( dt.wglDXSetResourceShareHandleNV.layer, _dxObject, _shareHandle )
#define RwglDXUnlockObjectsNV( dt, _hDevice, _count, _hObjects ) dt.wglDXUnlockObjectsNV.proc( dt.wglDXUnlockObjectsNV.layer, _hDevice, _count, _hObjects )
#define RwglDXUnregisterObjectNV( dt, _hDevice, _hObject ) dt.wglDXUnregisterObjectNV.proc( dt.wglDXUnregisterObjectNV.layer, _hDevice, _hObject )

    // WGL_NV_copy_image

#define RwglCopyImageSubDataNV( dt, _hSrcRC, _srcName, _srcTarget, _srcLevel, _srcX, _srcY, _srcZ, _hDstRC, _dstName, _dstTarget, _dstLevel, _dstX, _dstY, _dstZ, _width, _height, _depth ) dt.wglCopyImageSubDataNV.proc( dt.wglCopyImageSubDataNV.layer, _hSrcRC, _srcName, _srcTarget, _srcLevel, _srcX, _srcY, _srcZ, _hDstRC, _dstName, _dstTarget, _dstLevel, _dstX, _dstY, _dstZ, _width, _height, _depth )

    // WGL_NV_gpu_affinity

#define RwglCreateAffinityDCNV( dt, _phGpuList ) dt.wglCreateAffinityDCNV.proc( dt.wglCreateAffinityDCNV.layer, _phGpuList )
#define RwglDeleteDCNV( dt, _hAffinityDC ) dt.wglDeleteDCNV.proc( dt.wglDeleteDCNV.layer, _hAffinityDC )
#define RwglEnumGpuDevicesNV( dt, _hGpu, _iDeviceIndex, _lpGpuDevice ) dt.wglEnumGpuDevicesNV.proc( dt.wglEnumGpuDevicesNV.layer, _hGpu, _iDeviceIndex, _lpGpuDevice )
#define RwglEnumGpusFromAffinityDCNV( dt, _hAffinityDC, _iGpuIndex, _hGpu ) dt.wglEnumGpusFromAffinityDCNV.proc( dt.wglEnumGpusFromAffinityDCNV.layer, _hAffinityDC, _iGpuIndex, _hGpu )
#define RwglEnumGpusNV( dt, _iGpuIndex, _phGpu ) dt.wglEnumGpusNV.proc( dt.wglEnumGpusNV.layer, _iGpuIndex, _phGpu )

    // WGL_NV_present_video

#define RwglBindVideoDeviceNV( dt, _hDC, _uVideoSlot, _hVideoDevice, _piAttribList ) dt.wglBindVideoDeviceNV.proc( dt.wglBindVideoDeviceNV.layer, _hDC, _uVideoSlot, _hVideoDevice, _piAttribList )
#define RwglEnumerateVideoDevicesNV( dt, _hDC, _phDeviceList ) dt.wglEnumerateVideoDevicesNV.proc( dt.wglEnumerateVideoDevicesNV.layer, _hDC, _phDeviceList )
#define RwglQueryCurrentContextNV( dt, _iAttribute, _piValue ) dt.wglQueryCurrentContextNV.proc( dt.wglQueryCurrentContextNV.layer, _iAttribute, _piValue )

    // WGL_NV_swap_group

#define RwglBindSwapBarrierNV( dt, _group, _barrier ) dt.wglBindSwapBarrierNV.proc( dt.wglBindSwapBarrierNV.layer, _group, _barrier )
#define RwglJoinSwapGroupNV( dt, _hDC, _group ) dt.wglJoinSwapGroupNV.proc( dt.wglJoinSwapGroupNV.layer, _hDC, _group )
#define RwglQueryFrameCountNV( dt, _hDC, _count ) dt.wglQueryFrameCountNV.proc( dt.wglQueryFrameCountNV.layer, _hDC, _count )
#define RwglQueryMaxSwapGroupsNV( dt, _hDC, _maxGroups, _maxBarriers ) dt.wglQueryMaxSwapGroupsNV.proc( dt.wglQueryMaxSwapGroupsNV.layer, _hDC, _maxGroups, _maxBarriers )
#define RwglQuerySwapGroupNV( dt, _hDC, _group, _barrier ) dt.wglQuerySwapGroupNV.proc( dt.wglQuerySwapGroupNV.layer, _hDC, _group, _barrier )
#define RwglResetFrameCountNV( dt, _hDC ) dt.wglResetFrameCountNV.proc( dt.wglResetFrameCountNV.layer, _hDC )

    // WGL_NV_vertex_array_range

#define RwglAllocateMemoryNV( dt, _size, _readfreq, _writefreq, _priority ) dt.wglAllocateMemoryNV.proc( dt.wglAllocateMemoryNV.layer, _size, _readfreq, _writefreq, _priority )
#define RwglFreeMemoryNV( dt, _pointer ) dt.wglFreeMemoryNV.proc( dt.wglFreeMemoryNV.layer, _pointer )

    // WGL_NV_video_capture

#define RwglBindVideoCaptureDeviceNV( dt, _uVideoSlot, _hDevice ) dt.wglBindVideoCaptureDeviceNV.proc( dt.wglBindVideoCaptureDeviceNV.layer, _uVideoSlot, _hDevice )
#define RwglEnumerateVideoCaptureDevicesNV( dt, _hDC, _phDeviceList ) dt.wglEnumerateVideoCaptureDevicesNV.proc( dt.wglEnumerateVideoCaptureDevicesNV.layer, _hDC, _phDeviceList )
#define RwglLockVideoCaptureDeviceNV( dt, _hDC, _hDevice ) dt.wglLockVideoCaptureDeviceNV.proc( dt.wglLockVideoCaptureDeviceNV.layer, _hDC, _hDevice )
#define RwglQueryVideoCaptureDeviceNV( dt, _hDC, _hDevice, _iAttribute, _piValue ) dt.wglQueryVideoCaptureDeviceNV.proc( dt.wglQueryVideoCaptureDeviceNV.layer, _hDC, _hDevice, _iAttribute, _piValue )
#define RwglReleaseVideoCaptureDeviceNV( dt, _hDC, _hDevice ) dt.wglReleaseVideoCaptureDeviceNV.proc( dt.wglReleaseVideoCaptureDeviceNV.layer, _hDC, _hDevice )

    // WGL_NV_video_output

#define RwglBindVideoImageNV( dt, _hVideoDevice, _hPbuffer, _iVideoBuffer ) dt.wglBindVideoImageNV.proc( dt.wglBindVideoImageNV.layer, _hVideoDevice, _hPbuffer, _iVideoBuffer )
#define RwglGetVideoDeviceNV( dt, _hDC, _numDevices, _hVideoDevice ) dt.wglGetVideoDeviceNV.proc( dt.wglGetVideoDeviceNV.layer, _hDC, _numDevices, _hVideoDevice )
#define RwglGetVideoInfoNV( dt, _hpVideoDevice, _pulCounterOutputPbuffer, _pulCounterOutputVideo ) dt.wglGetVideoInfoNV.proc( dt.wglGetVideoInfoNV.layer, _hpVideoDevice, _pulCounterOutputPbuffer, _pulCounterOutputVideo )
#define RwglReleaseVideoDeviceNV( dt, _hVideoDevice ) dt.wglReleaseVideoDeviceNV.proc( dt.wglReleaseVideoDeviceNV.layer, _hVideoDevice )
#define RwglReleaseVideoImageNV( dt, _hPbuffer, _iVideoBuffer ) dt.wglReleaseVideoImageNV.proc( dt.wglReleaseVideoImageNV.layer, _hPbuffer, _iVideoBuffer )
#define RwglSendPbufferToVideoNV( dt, _hPbuffer, _iBufferType, _pulCounterPbuffer, _bBlock ) dt.wglSendPbufferToVideoNV.proc( dt.wglSendPbufferToVideoNV.layer, _hPbuffer, _iBufferType, _pulCounterPbuffer, _bBlock )

    // WGL_OML_sync_control

#define RwglGetMscRateOML( dt, _hDC, _numerator, _denominator ) dt.wglGetMscRateOML.proc( dt.wglGetMscRateOML.layer, _hDC, _numerator, _denominator )
#define RwglGetSyncValuesOML( dt, _hDC, _ust, _msc, _sbc ) dt.wglGetSyncValuesOML.proc( dt.wglGetSyncValuesOML.layer, _hDC, _ust, _msc, _sbc )
#define RwglSwapBuffersMscOML( dt, _hDC, _target_msc, _divisor, _remainder ) dt.wglSwapBuffersMscOML.proc( dt.wglSwapBuffersMscOML.layer, _hDC, _target_msc, _divisor, _remainder )
#define RwglSwapLayerBuffersMscOML( dt, _hDC, _fuPlanes, _target_msc, _divisor, _remainder ) dt.wglSwapLayerBuffersMscOML.proc( dt.wglSwapLayerBuffersMscOML.layer, _hDC, _fuPlanes, _target_msc, _divisor, _remainder )
#define RwglWaitForMscOML( dt, _hDC, _target_msc, _divisor, _remainder, _ust, _msc, _sbc ) dt.wglWaitForMscOML.proc( dt.wglWaitForMscOML.layer, _hDC, _target_msc, _divisor, _remainder, _ust, _msc, _sbc )
#define RwglWaitForSbcOML( dt, _hDC, _target_sbc, _ust, _msc, _sbc ) dt.wglWaitForSbcOML.proc( dt.wglWaitForSbcOML.layer, _hDC, _target_sbc, _ust, _msc, _sbc )

    // WGL_core

#define RwglCopyContext( dt, _hglrcSrc, _hglrcDst, _mask ) dt.wglCopyContext.proc( dt.wglCopyContext.layer, _hglrcSrc, _hglrcDst, _mask )
#define RwglCreateContext( dt, _hDC ) dt.wglCreateContext.proc( dt.wglCreateContext.layer, _hDC )
#define RwglCreateLayerContext( dt, _hDC, _iLayerPlane ) dt.wglCreateLayerContext.proc( dt.wglCreateLayerContext.layer, _hDC, _iLayerPlane )
#define RwglDeleteContext( dt, _hglrc ) dt.wglDeleteContext.proc( dt.wglDeleteContext.layer, _hglrc )
#define RwglDescribeLayerPlane( dt, _hDC, _iPixelFormat, _iLayerPlane, _nBytes, _plpd ) dt.wglDescribeLayerPlane.proc( dt.wglDescribeLayerPlane.layer, _hDC, _iPixelFormat, _iLayerPlane, _nBytes, _plpd )
#define RwglGetCurrentContext( dt ) dt.wglGetCurrentContext.proc( dt.wglGetCurrentContext.layer )
#define RwglGetCurrentDC( dt ) dt.wglGetCurrentDC.proc( dt.wglGetCurrentDC.layer )
#define RwglGetDefaultProcAddress( dt, _lpszProc ) dt.wglGetDefaultProcAddress.proc( dt.wglGetDefaultProcAddress.layer, _lpszProc )
#define RwglGetLayerPaletteEntries( dt, _hDC, _iLayerPlane, _iStart, _nEntries, _pcr ) dt.wglGetLayerPaletteEntries.proc( dt.wglGetLayerPaletteEntries.layer, _hDC, _iLayerPlane, _iStart, _nEntries, _pcr )
#define RwglGetProcAddress( dt, _lpszProc ) dt.wglGetProcAddress.proc( dt.wglGetProcAddress.layer, _lpszProc )
#define RwglMakeCurrent( dt, _hDC, _hglrc ) dt.wglMakeCurrent.proc( dt.wglMakeCurrent.layer, _hDC, _hglrc )
#define RwglRealizeLayerPalette( dt, _hDC, _iLayerPlane, _bRealize ) dt.wglRealizeLayerPalette.proc( dt.wglRealizeLayerPalette.layer, _hDC, _iLayerPlane, _bRealize )
#define RwglSetLayerPaletteEntries( dt, _hDC, _iLayerPlane, _iStart, _nEntries, _pcr ) dt.wglSetLayerPaletteEntries.proc( dt.wglSetLayerPaletteEntries.layer, _hDC, _iLayerPlane, _iStart, _nEntries, _pcr )
#define RwglShareLists( dt, _hglrcShare, _hglrcSrc ) dt.wglShareLists.proc( dt.wglShareLists.layer, _hglrcShare, _hglrcSrc )
#define RwglSwapLayerBuffers( dt, _hDC, _fuPlanes ) dt.wglSwapLayerBuffers.proc( dt.wglSwapLayerBuffers.layer, _hDC, _fuPlanes )
#define RwglSwapMultipleBuffers( dt, _n, _ps ) dt.wglSwapMultipleBuffers.proc( dt.wglSwapMultipleBuffers.layer, _n, _ps )
#define RwglUseFontBitmapsA( dt, _hDC, _first, _count, _listBase ) dt.wglUseFontBitmapsA.proc( dt.wglUseFontBitmapsA.layer, _hDC, _first, _count, _listBase )
#define RwglUseFontBitmapsW( dt, _hDC, _first, _count, _listBase ) dt.wglUseFontBitmapsW.proc( dt.wglUseFontBitmapsW.layer, _hDC, _first, _count, _listBase )
#define RwglUseFontOutlinesA( dt, _hDC, _first, _count, _listBase, _deviation, _extrusion, _format, _lpgmf ) dt.wglUseFontOutlinesA.proc( dt.wglUseFontOutlinesA.layer, _hDC, _first, _count, _listBase, _deviation, _extrusion, _format, _lpgmf )
#define RwglUseFontOutlinesW( dt, _hDC, _first, _count, _listBase, _deviation, _extrusion, _format, _lpgmf ) dt.wglUseFontOutlinesW.proc( dt.wglUseFontOutlinesW.layer, _hDC, _first, _count, _listBase, _deviation, _extrusion, _format, _lpgmf )
#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX
    // GLX_VERSION_1_0

#define RglXChooseVisual( dt, _dpy, _screen, _attribList ) dt.glXChooseVisual.proc( dt.glXChooseVisual.layer, _dpy, _screen, _attribList )
#define RglXCopyContext( dt, _dpy, _src, _dst, _mask ) dt.glXCopyContext.proc( dt.glXCopyContext.layer, _dpy, _src, _dst, _mask )
#define RglXCreateContext( dt, _dpy, _vis, _shareList, _direct ) dt.glXCreateContext.proc( dt.glXCreateContext.layer, _dpy, _vis, _shareList, _direct )
#define RglXCreateGLXPixmap( dt, _dpy, _vis, _pixmap ) dt.glXCreateGLXPixmap.proc( dt.glXCreateGLXPixmap.layer, _dpy, _vis, _pixmap )
#define RglXDestroyContext( dt, _dpy, _ctx ) dt.glXDestroyContext.proc( dt.glXDestroyContext.layer, _dpy, _ctx )
#define RglXDestroyGLXPixmap( dt, _dpy, _pix ) dt.glXDestroyGLXPixmap.proc( dt.glXDestroyGLXPixmap.layer, _dpy, _pix )
#define RglXGetConfig( dt, _dpy, _vis, _attrib, _value ) dt.glXGetConfig.proc( dt.glXGetConfig.layer, _dpy, _vis, _attrib, _value )
#define RglXGetCurrentContext( dt ) dt.glXGetCurrentContext.proc( dt.glXGetCurrentContext.layer )
#define RglXGetCurrentDrawable( dt ) dt.glXGetCurrentDrawable.proc( dt.glXGetCurrentDrawable.layer )
#define RglXIsDirect( dt, _dpy, _ctx ) dt.glXIsDirect.proc( dt.glXIsDirect.layer, _dpy, _ctx )
#define RglXMakeCurrent( dt, _dpy, _drawable, _ctx ) dt.glXMakeCurrent.proc( dt.glXMakeCurrent.layer, _dpy, _drawable, _ctx )
#define RglXQueryExtension( dt, _dpy, _errorBase, _eventBase ) dt.glXQueryExtension.proc( dt.glXQueryExtension.layer, _dpy, _errorBase, _eventBase )
#define RglXQueryVersion( dt, _dpy, _major, _minor ) dt.glXQueryVersion.proc( dt.glXQueryVersion.layer, _dpy, _major, _minor )
#define RglXSwapBuffers( dt, _dpy, _drawable ) dt.glXSwapBuffers.proc( dt.glXSwapBuffers.layer, _dpy, _drawable )
#define RglXUseXFont( dt, _font, _first, _count, _listBase ) dt.glXUseXFont.proc( dt.glXUseXFont.layer, _font, _first, _count, _listBase )
#define RglXWaitGL( dt ) dt.glXWaitGL.proc( dt.glXWaitGL.layer )
#define RglXWaitX( dt ) dt.glXWaitX.proc( dt.glXWaitX.layer )

    // GLX_VERSION_1_1

#define RglXGetClientString( dt, _dpy, _name ) dt.glXGetClientString.proc( dt.glXGetClientString.layer, _dpy, _name )
#define RglXQueryExtensionsString( dt, _dpy, _screen ) dt.glXQueryExtensionsString.proc( dt.glXQueryExtensionsString.layer, _dpy, _screen )
#define RglXQueryServerString( dt, _dpy, _screen, _name ) dt.glXQueryServerString.proc( dt.glXQueryServerString.layer, _dpy, _screen, _name )

    // GLX_VERSION_1_2

#define RglXGetCurrentDisplay( dt ) dt.glXGetCurrentDisplay.proc( dt.glXGetCurrentDisplay.layer )

    // GLX_VERSION_1_3

#define RglXChooseFBConfig( dt, _dpy, _screen, _attrib_list, _nelements ) dt.glXChooseFBConfig.proc( dt.glXChooseFBConfig.layer, _dpy, _screen, _attrib_list, _nelements )
#define RglXCreateNewContext( dt, _dpy, _config, _render_type, _share_list, _direct ) dt.glXCreateNewContext.proc( dt.glXCreateNewContext.layer, _dpy, _config, _render_type, _share_list, _direct )
#define RglXCreatePbuffer( dt, _dpy, _config, _attrib_list ) dt.glXCreatePbuffer.proc( dt.glXCreatePbuffer.layer, _dpy, _config, _attrib_list )
#define RglXCreatePixmap( dt, _dpy, _config, _pixmap, _attrib_list ) dt.glXCreatePixmap.proc( dt.glXCreatePixmap.layer, _dpy, _config, _pixmap, _attrib_list )
#define RglXCreateWindow( dt, _dpy, _config, _win, _attrib_list ) dt.glXCreateWindow.proc( dt.glXCreateWindow.layer, _dpy, _config, _win, _attrib_list )
#define RglXDestroyPbuffer( dt, _dpy, _pbuf ) dt.glXDestroyPbuffer.proc( dt.glXDestroyPbuffer.layer, _dpy, _pbuf )
#define RglXDestroyPixmap( dt, _dpy, _pixmap ) dt.glXDestroyPixmap.proc( dt.glXDestroyPixmap.layer, _dpy, _pixmap )
#define RglXDestroyWindow( dt, _dpy, _win ) dt.glXDestroyWindow.proc( dt.glXDestroyWindow.layer, _dpy, _win )
#define RglXGetCurrentReadDrawable( dt ) dt.glXGetCurrentReadDrawable.proc( dt.glXGetCurrentReadDrawable.layer )
#define RglXGetFBConfigAttrib( dt, _dpy, _config, _attribute, _value ) dt.glXGetFBConfigAttrib.proc( dt.glXGetFBConfigAttrib.layer, _dpy, _config, _attribute, _value )
#define RglXGetFBConfigs( dt, _dpy, _screen, _nelements ) dt.glXGetFBConfigs.proc( dt.glXGetFBConfigs.layer, _dpy, _screen, _nelements )
#define RglXGetSelectedEvent( dt, _dpy, _draw, _event_mask ) dt.glXGetSelectedEvent.proc( dt.glXGetSelectedEvent.layer, _dpy, _draw, _event_mask )
#define RglXGetVisualFromFBConfig( dt, _dpy, _config ) dt.glXGetVisualFromFBConfig.proc( dt.glXGetVisualFromFBConfig.layer, _dpy, _config )
#define RglXMakeContextCurrent( dt, _display, _draw, _read, _ctx ) dt.glXMakeContextCurrent.proc( dt.glXMakeContextCurrent.layer, _display, _draw, _read, _ctx )
#define RglXQueryContext( dt, _dpy, _ctx, _attribute, _value ) dt.glXQueryContext.proc( dt.glXQueryContext.layer, _dpy, _ctx, _attribute, _value )
#define RglXQueryDrawable( dt, _dpy, _draw, _attribute, _value ) dt.glXQueryDrawable.proc( dt.glXQueryDrawable.layer, _dpy, _draw, _attribute, _value )
#define RglXSelectEvent( dt, _dpy, _draw, _event_mask ) dt.glXSelectEvent.proc( dt.glXSelectEvent.layer, _dpy, _draw, _event_mask )

    // GLX_VERSION_1_4

#define RglXGetProcAddress( dt, _procName ) dt.glXGetProcAddress.proc( dt.glXGetProcAddress.layer, _procName )

    // GLX_AMD_gpu_association

#define RglXBlitContextFramebufferAMD( dt, _dstCtx, _srcX0, _srcY0, _srcX1, _srcY1, _dstX0, _dstY0, _dstX1, _dstY1, _mask, _filter ) dt.glXBlitContextFramebufferAMD.proc( dt.glXBlitContextFramebufferAMD.layer, _dstCtx, _srcX0, _srcY0, _srcX1, _srcY1, _dstX0, _dstY0, _dstX1, _dstY1, _mask, _filter )
#define RglXCreateAssociatedContextAMD( dt, _id, _share_list ) dt.glXCreateAssociatedContextAMD.proc( dt.glXCreateAssociatedContextAMD.layer, _id, _share_list )
#define RglXCreateAssociatedContextAttribsAMD( dt, _id, _share_context, _attribList ) dt.glXCreateAssociatedContextAttribsAMD.proc( dt.glXCreateAssociatedContextAttribsAMD.layer, _id, _share_context, _attribList )
#define RglXDeleteAssociatedContextAMD( dt, _ctx ) dt.glXDeleteAssociatedContextAMD.proc( dt.glXDeleteAssociatedContextAMD.layer, _ctx )
#define RglXGetContextGPUIDAMD( dt, _ctx ) dt.glXGetContextGPUIDAMD.proc( dt.glXGetContextGPUIDAMD.layer, _ctx )
#define RglXGetCurrentAssociatedContextAMD( dt ) dt.glXGetCurrentAssociatedContextAMD.proc( dt.glXGetCurrentAssociatedContextAMD.layer )
#define RglXGetGPUIDsAMD( dt, _maxCount, _ids ) dt.glXGetGPUIDsAMD.proc( dt.glXGetGPUIDsAMD.layer, _maxCount, _ids )
#define RglXGetGPUInfoAMD( dt, _id, _property, _dataType, _size, _data ) dt.glXGetGPUInfoAMD.proc( dt.glXGetGPUInfoAMD.layer, _id, _property, _dataType, _size, _data )
#define RglXMakeAssociatedContextCurrentAMD( dt, _ctx ) dt.glXMakeAssociatedContextCurrentAMD.proc( dt.glXMakeAssociatedContextCurrentAMD.layer, _ctx )

    // GLX_ARB_create_context

#define RglXCreateContextAttribsARB( dt, _dpy, _config, _share_context, _direct, _attrib_list ) dt.glXCreateContextAttribsARB.proc( dt.glXCreateContextAttribsARB.layer, _dpy, _config, _share_context, _direct, _attrib_list )

    // GLX_ARB_get_proc_address

#define RglXGetProcAddressARB( dt, _procName ) dt.glXGetProcAddressARB.proc( dt.glXGetProcAddressARB.layer, _procName )

    // GLX_ATI_render_texture

#define RglXBindTexImageATI( dt, _dpy, _pbuf, _buffer ) dt.glXBindTexImageATI.proc( dt.glXBindTexImageATI.layer, _dpy, _pbuf, _buffer )
#define RglXDrawableAttribATI( dt, _dpy, _draw, _attrib_list ) dt.glXDrawableAttribATI.proc( dt.glXDrawableAttribATI.layer, _dpy, _draw, _attrib_list )
#define RglXReleaseTexImageATI( dt, _dpy, _pbuf, _buffer ) dt.glXReleaseTexImageATI.proc( dt.glXReleaseTexImageATI.layer, _dpy, _pbuf, _buffer )

    // GLX_EXT_import_context

#define RglXFreeContextEXT( dt, _dpy, _context ) dt.glXFreeContextEXT.proc( dt.glXFreeContextEXT.layer, _dpy, _context )
#define RglXGetContextIDEXT( dt, _context ) dt.glXGetContextIDEXT.proc( dt.glXGetContextIDEXT.layer, _context )
#define RglXImportContextEXT( dt, _dpy, _contextID ) dt.glXImportContextEXT.proc( dt.glXImportContextEXT.layer, _dpy, _contextID )
#define RglXQueryContextInfoEXT( dt, _dpy, _context, _attribute, _value ) dt.glXQueryContextInfoEXT.proc( dt.glXQueryContextInfoEXT.layer, _dpy, _context, _attribute, _value )

    // GLX_EXT_swap_control

#define RglXSwapIntervalEXT( dt, _dpy, _drawable, _interval ) dt.glXSwapIntervalEXT.proc( dt.glXSwapIntervalEXT.layer, _dpy, _drawable, _interval )

    // GLX_EXT_texture_from_pixmap

#define RglXBindTexImageEXT( dt, _display, _drawable, _buffer, _attrib_list ) dt.glXBindTexImageEXT.proc( dt.glXBindTexImageEXT.layer, _display, _drawable, _buffer, _attrib_list )
#define RglXReleaseTexImageEXT( dt, _display, _drawable, _buffer ) dt.glXReleaseTexImageEXT.proc( dt.glXReleaseTexImageEXT.layer, _display, _drawable, _buffer )

    // GLX_MESA_agp_offset

#define RglXGetAGPOffsetMESA( dt, _pointer ) dt.glXGetAGPOffsetMESA.proc( dt.glXGetAGPOffsetMESA.layer, _pointer )

    // GLX_MESA_copy_sub_buffer

#define RglXCopySubBufferMESA( dt, _dpy, _drawable, _x, _y, _width, _height ) dt.glXCopySubBufferMESA.proc( dt.glXCopySubBufferMESA.layer, _dpy, _drawable, _x, _y, _width, _height )

    // GLX_MESA_pixmap_colormap

#define RglXCreateGLXPixmapMESA( dt, _dpy, _visual, _pixmap, _cmap ) dt.glXCreateGLXPixmapMESA.proc( dt.glXCreateGLXPixmapMESA.layer, _dpy, _visual, _pixmap, _cmap )

    // GLX_MESA_release_buffers

#define RglXReleaseBuffersMESA( dt, _dpy, _d ) dt.glXReleaseBuffersMESA.proc( dt.glXReleaseBuffersMESA.layer, _dpy, _d )

    // GLX_MESA_set_3dfx_mode

#define RglXSet3DfxModeMESA( dt, _mode ) dt.glXSet3DfxModeMESA.proc( dt.glXSet3DfxModeMESA.layer, _mode )

    // GLX_MESA_swap_control

#define RglXGetSwapIntervalMESA( dt ) dt.glXGetSwapIntervalMESA.proc( dt.glXGetSwapIntervalMESA.layer )
#define RglXSwapIntervalMESA( dt, _interval ) dt.glXSwapIntervalMESA.proc( dt.glXSwapIntervalMESA.layer, _interval )

    // GLX_NV_copy_image

#define RglXCopyImageSubDataNV( dt, _dpy, _srcCtx, _srcName, _srcTarget, _srcLevel, _srcX, _srcY, _srcZ, _dstCtx, _dstName, _dstTarget, _dstLevel, _dstX, _dstY, _dstZ, _width, _height, _depth ) dt.glXCopyImageSubDataNV.proc( dt.glXCopyImageSubDataNV.layer, _dpy, _srcCtx, _srcName, _srcTarget, _srcLevel, _srcX, _srcY, _srcZ, _dstCtx, _dstName, _dstTarget, _dstLevel, _dstX, _dstY, _dstZ, _width, _height, _depth )

    // GLX_NV_present_video

#define RglXBindVideoDeviceNV( dt, _dpy, _video_slot, _video_device, _attrib_list ) dt.glXBindVideoDeviceNV.proc( dt.glXBindVideoDeviceNV.layer, _dpy, _video_slot, _video_device, _attrib_list )
#define RglXEnumerateVideoDevicesNV( dt, _dpy, _screen, _nelements ) dt.glXEnumerateVideoDevicesNV.proc( dt.glXEnumerateVideoDevicesNV.layer, _dpy, _screen, _nelements )

    // GLX_NV_swap_group

#define RglXBindSwapBarrierNV( dt, _dpy, _group, _barrier ) dt.glXBindSwapBarrierNV.proc( dt.glXBindSwapBarrierNV.layer, _dpy, _group, _barrier )
#define RglXJoinSwapGroupNV( dt, _dpy, _drawable, _group ) dt.glXJoinSwapGroupNV.proc( dt.glXJoinSwapGroupNV.layer, _dpy, _drawable, _group )
#define RglXQueryFrameCountNV( dt, _dpy, _screen, _count ) dt.glXQueryFrameCountNV.proc( dt.glXQueryFrameCountNV.layer, _dpy, _screen, _count )
#define RglXQueryMaxSwapGroupsNV( dt, _dpy, _screen, _maxGroups, _maxBarriers ) dt.glXQueryMaxSwapGroupsNV.proc( dt.glXQueryMaxSwapGroupsNV.layer, _dpy, _screen, _maxGroups, _maxBarriers )
#define RglXQuerySwapGroupNV( dt, _dpy, _drawable, _group, _barrier ) dt.glXQuerySwapGroupNV.proc( dt.glXQuerySwapGroupNV.layer, _dpy, _drawable, _group, _barrier )
#define RglXResetFrameCountNV( dt, _dpy, _screen ) dt.glXResetFrameCountNV.proc( dt.glXResetFrameCountNV.layer, _dpy, _screen )

    // GLX_NV_vertex_array_range

#define RglXAllocateMemoryNV( dt, _size, _readFrequency, _writeFrequency, _priority ) dt.glXAllocateMemoryNV.proc( dt.glXAllocateMemoryNV.layer, _size, _readFrequency, _writeFrequency, _priority )
#define RglXFreeMemoryNV( dt, _pointer ) dt.glXFreeMemoryNV.proc( dt.glXFreeMemoryNV.layer, _pointer )

    // GLX_NV_video_capture

#define RglXBindVideoCaptureDeviceNV( dt, _dpy, _video_capture_slot, _device ) dt.glXBindVideoCaptureDeviceNV.proc( dt.glXBindVideoCaptureDeviceNV.layer, _dpy, _video_capture_slot, _device )
#define RglXEnumerateVideoCaptureDevicesNV( dt, _dpy, _screen, _nelements ) dt.glXEnumerateVideoCaptureDevicesNV.proc( dt.glXEnumerateVideoCaptureDevicesNV.layer, _dpy, _screen, _nelements )
#define RglXLockVideoCaptureDeviceNV( dt, _dpy, _device ) dt.glXLockVideoCaptureDeviceNV.proc( dt.glXLockVideoCaptureDeviceNV.layer, _dpy, _device )
#define RglXQueryVideoCaptureDeviceNV( dt, _dpy, _device, _attribute, _value ) dt.glXQueryVideoCaptureDeviceNV.proc( dt.glXQueryVideoCaptureDeviceNV.layer, _dpy, _device, _attribute, _value )
#define RglXReleaseVideoCaptureDeviceNV( dt, _dpy, _device ) dt.glXReleaseVideoCaptureDeviceNV.proc( dt.glXReleaseVideoCaptureDeviceNV.layer, _dpy, _device )

    // GLX_NV_video_output

#define RglXBindVideoImageNV( dt, _dpy, _VideoDevice, _pbuf, _iVideoBuffer ) dt.glXBindVideoImageNV.proc( dt.glXBindVideoImageNV.layer, _dpy, _VideoDevice, _pbuf, _iVideoBuffer )
#define RglXGetVideoDeviceNV( dt, _dpy, _screen, _numVideoDevices, _pVideoDevice ) dt.glXGetVideoDeviceNV.proc( dt.glXGetVideoDeviceNV.layer, _dpy, _screen, _numVideoDevices, _pVideoDevice )
#define RglXGetVideoInfoNV( dt, _dpy, _screen, _VideoDevice, _pulCounterOutputPbuffer, _pulCounterOutputVideo ) dt.glXGetVideoInfoNV.proc( dt.glXGetVideoInfoNV.layer, _dpy, _screen, _VideoDevice, _pulCounterOutputPbuffer, _pulCounterOutputVideo )
#define RglXReleaseVideoDeviceNV( dt, _dpy, _screen, _VideoDevice ) dt.glXReleaseVideoDeviceNV.proc( dt.glXReleaseVideoDeviceNV.layer, _dpy, _screen, _VideoDevice )
#define RglXReleaseVideoImageNV( dt, _dpy, _pbuf ) dt.glXReleaseVideoImageNV.proc( dt.glXReleaseVideoImageNV.layer, _dpy, _pbuf )
#define RglXSendPbufferToVideoNV( dt, _dpy, _pbuf, _iBufferType, _pulCounterPbuffer, _bBlock ) dt.glXSendPbufferToVideoNV.proc( dt.glXSendPbufferToVideoNV.layer, _dpy, _pbuf, _iBufferType, _pulCounterPbuffer, _bBlock )

    // GLX_OML_sync_control

#define RglXGetMscRateOML( dt, _dpy, _drawable, _numerator, _denominator ) dt.glXGetMscRateOML.proc( dt.glXGetMscRateOML.layer, _dpy, _drawable, _numerator, _denominator )
#define RglXGetSyncValuesOML( dt, _dpy, _drawable, _ust, _msc, _sbc ) dt.glXGetSyncValuesOML.proc( dt.glXGetSyncValuesOML.layer, _dpy, _drawable, _ust, _msc, _sbc )
#define RglXSwapBuffersMscOML( dt, _dpy, _drawable, _target_msc, _divisor, _remainder ) dt.glXSwapBuffersMscOML.proc( dt.glXSwapBuffersMscOML.layer, _dpy, _drawable, _target_msc, _divisor, _remainder )
#define RglXWaitForMscOML( dt, _dpy, _drawable, _target_msc, _divisor, _remainder, _ust, _msc, _sbc ) dt.glXWaitForMscOML.proc( dt.glXWaitForMscOML.layer, _dpy, _drawable, _target_msc, _divisor, _remainder, _ust, _msc, _sbc )
#define RglXWaitForSbcOML( dt, _dpy, _drawable, _target_sbc, _ust, _msc, _sbc ) dt.glXWaitForSbcOML.proc( dt.glXWaitForSbcOML.layer, _dpy, _drawable, _target_sbc, _ust, _msc, _sbc )

    // GLX_SGIX_fbconfig

#define RglXChooseFBConfigSGIX( dt, _dpy, _screen, _attrib_list, _nelements ) dt.glXChooseFBConfigSGIX.proc( dt.glXChooseFBConfigSGIX.layer, _dpy, _screen, _attrib_list, _nelements )
#define RglXCreateContextWithConfigSGIX( dt, _dpy, _config, _render_type, _share_list, _direct ) dt.glXCreateContextWithConfigSGIX.proc( dt.glXCreateContextWithConfigSGIX.layer, _dpy, _config, _render_type, _share_list, _direct )
#define RglXCreateGLXPixmapWithConfigSGIX( dt, _dpy, _config, _pixmap ) dt.glXCreateGLXPixmapWithConfigSGIX.proc( dt.glXCreateGLXPixmapWithConfigSGIX.layer, _dpy, _config, _pixmap )
#define RglXGetFBConfigAttribSGIX( dt, _dpy, _config, _attribute, _value ) dt.glXGetFBConfigAttribSGIX.proc( dt.glXGetFBConfigAttribSGIX.layer, _dpy, _config, _attribute, _value )
#define RglXGetFBConfigFromVisualSGIX( dt, _dpy, _vis ) dt.glXGetFBConfigFromVisualSGIX.proc( dt.glXGetFBConfigFromVisualSGIX.layer, _dpy, _vis )
#define RglXGetVisualFromFBConfigSGIX( dt, _dpy, _config ) dt.glXGetVisualFromFBConfigSGIX.proc( dt.glXGetVisualFromFBConfigSGIX.layer, _dpy, _config )

    // GLX_SGIX_pbuffer

#define RglXCreateGLXPbufferSGIX( dt, _dpy, _config, _width, _height, _attrib_list ) dt.glXCreateGLXPbufferSGIX.proc( dt.glXCreateGLXPbufferSGIX.layer, _dpy, _config, _width, _height, _attrib_list )
#define RglXDestroyGLXPbufferSGIX( dt, _dpy, _pbuf ) dt.glXDestroyGLXPbufferSGIX.proc( dt.glXDestroyGLXPbufferSGIX.layer, _dpy, _pbuf )
#define RglXGetSelectedEventSGIX( dt, _dpy, _drawable, _mask ) dt.glXGetSelectedEventSGIX.proc( dt.glXGetSelectedEventSGIX.layer, _dpy, _drawable, _mask )
#define RglXQueryGLXPbufferSGIX( dt, _dpy, _pbuf, _attribute, _value ) dt.glXQueryGLXPbufferSGIX.proc( dt.glXQueryGLXPbufferSGIX.layer, _dpy, _pbuf, _attribute, _value )
#define RglXSelectEventSGIX( dt, _dpy, _drawable, _mask ) dt.glXSelectEventSGIX.proc( dt.glXSelectEventSGIX.layer, _dpy, _drawable, _mask )

    // GLX_SGIX_swap_barrier

#define RglXBindSwapBarrierSGIX( dt, _dpy, _drawable, _barrier ) dt.glXBindSwapBarrierSGIX.proc( dt.glXBindSwapBarrierSGIX.layer, _dpy, _drawable, _barrier )
#define RglXQueryMaxSwapBarriersSGIX( dt, _dpy, _screen, _max ) dt.glXQueryMaxSwapBarriersSGIX.proc( dt.glXQueryMaxSwapBarriersSGIX.layer, _dpy, _screen, _max )

    // GLX_SGIX_swap_group

#define RglXJoinSwapGroupSGIX( dt, _dpy, _drawable, _member ) dt.glXJoinSwapGroupSGIX.proc( dt.glXJoinSwapGroupSGIX.layer, _dpy, _drawable, _member )

    // GLX_SGIX_video_resize

#define RglXBindChannelToWindowSGIX( dt, _display, _screen, _channel, _window ) dt.glXBindChannelToWindowSGIX.proc( dt.glXBindChannelToWindowSGIX.layer, _display, _screen, _channel, _window )
#define RglXChannelRectSGIX( dt, _display, _screen, _channel, _x, _y, _w, _h ) dt.glXChannelRectSGIX.proc( dt.glXChannelRectSGIX.layer, _display, _screen, _channel, _x, _y, _w, _h )
#define RglXChannelRectSyncSGIX( dt, _display, _screen, _channel, _synctype ) dt.glXChannelRectSyncSGIX.proc( dt.glXChannelRectSyncSGIX.layer, _display, _screen, _channel, _synctype )
#define RglXQueryChannelDeltasSGIX( dt, _display, _screen, _channel, _x, _y, _w, _h ) dt.glXQueryChannelDeltasSGIX.proc( dt.glXQueryChannelDeltasSGIX.layer, _display, _screen, _channel, _x, _y, _w, _h )
#define RglXQueryChannelRectSGIX( dt, _display, _screen, _channel, _dx, _dy, _dw, _dh ) dt.glXQueryChannelRectSGIX.proc( dt.glXQueryChannelRectSGIX.layer, _display, _screen, _channel, _dx, _dy, _dw, _dh )

    // GLX_SGI_cushion

#define RglXCushionSGI( dt, _dpy, _window, _cushion ) dt.glXCushionSGI.proc( dt.glXCushionSGI.layer, _dpy, _window, _cushion )

    // GLX_SGI_make_current_read

#define RglXGetCurrentReadDrawableSGI( dt ) dt.glXGetCurrentReadDrawableSGI.proc( dt.glXGetCurrentReadDrawableSGI.layer )
#define RglXMakeCurrentReadSGI( dt, _dpy, _draw, _read, _ctx ) dt.glXMakeCurrentReadSGI.proc( dt.glXMakeCurrentReadSGI.layer, _dpy, _draw, _read, _ctx )

    // GLX_SGI_swap_control

#define RglXSwapIntervalSGI( dt, _interval ) dt.glXSwapIntervalSGI.proc( dt.glXSwapIntervalSGI.layer, _interval )

    // GLX_SGI_video_sync

#define RglXGetVideoSyncSGI( dt, _count ) dt.glXGetVideoSyncSGI.proc( dt.glXGetVideoSyncSGI.layer, _count )
#define RglXWaitVideoSyncSGI( dt, _divisor, _remainder, _count ) dt.glXWaitVideoSyncSGI.proc( dt.glXWaitVideoSyncSGI.layer, _divisor, _remainder, _count )

    // GLX_SUN_get_transparent_index

#define RglXGetTransparentIndexSUN( dt, _dpy, _overlay, _underlay, _pTransparentIndex ) dt.glXGetTransparentIndexSUN.proc( dt.glXGetTransparentIndexSUN.layer, _dpy, _overlay, _underlay, _pTransparentIndex )

    // GLX_SUN_video_resize

#define RglXGetVideoResizeSUN( dt, _display, _window, _factor ) dt.glXGetVideoResizeSUN.proc( dt.glXGetVideoResizeSUN.layer, _display, _window, _factor )
#define RglXVideoResizeSUN( dt, _display, _window, _factor ) dt.glXVideoResizeSUN.proc( dt.glXVideoResizeSUN.layer, _display, _window, _factor )
#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX
    // CGL_VERSION_1_0

#define RCGLChoosePixelFormat( dt, _attribs, _pix, _npix ) dt.CGLChoosePixelFormat.proc( dt.CGLChoosePixelFormat.layer, _attribs, _pix, _npix )
#define RCGLClearDrawable( dt, _ctx ) dt.CGLClearDrawable.proc( dt.CGLClearDrawable.layer, _ctx )
#define RCGLCopyContext( dt, _src, _dst, _mask ) dt.CGLCopyContext.proc( dt.CGLCopyContext.layer, _src, _dst, _mask )
#define RCGLCreateContext( dt, _pix, _share, _ctx ) dt.CGLCreateContext.proc( dt.CGLCreateContext.layer, _pix, _share, _ctx )
#define RCGLDescribePixelFormat( dt, _pix, _pix_num, _attrib, _value ) dt.CGLDescribePixelFormat.proc( dt.CGLDescribePixelFormat.layer, _pix, _pix_num, _attrib, _value )
#define RCGLDescribeRenderer( dt, _rend, _rend_num, _prop, _value ) dt.CGLDescribeRenderer.proc( dt.CGLDescribeRenderer.layer, _rend, _rend_num, _prop, _value )
#define RCGLDestroyContext( dt, _ctx ) dt.CGLDestroyContext.proc( dt.CGLDestroyContext.layer, _ctx )
#define RCGLDestroyPixelFormat( dt, _pix ) dt.CGLDestroyPixelFormat.proc( dt.CGLDestroyPixelFormat.layer, _pix )
#define RCGLDestroyRendererInfo( dt, _rend ) dt.CGLDestroyRendererInfo.proc( dt.CGLDestroyRendererInfo.layer, _rend )
#define RCGLDisable( dt, _ctx, _pname ) dt.CGLDisable.proc( dt.CGLDisable.layer, _ctx, _pname )
#define RCGLEnable( dt, _ctx, _pname ) dt.CGLEnable.proc( dt.CGLEnable.layer, _ctx, _pname )
#define RCGLErrorString( dt, _error ) dt.CGLErrorString.proc( dt.CGLErrorString.layer, _error )
#define RCGLFlushDrawable( dt, _ctx ) dt.CGLFlushDrawable.proc( dt.CGLFlushDrawable.layer, _ctx )
#define RCGLGetOffScreen( dt, _ctx, _width, _height, _rowbytes, _baseaddr ) dt.CGLGetOffScreen.proc( dt.CGLGetOffScreen.layer, _ctx, _width, _height, _rowbytes, _baseaddr )
#define RCGLGetOption( dt, _pname, _param ) dt.CGLGetOption.proc( dt.CGLGetOption.layer, _pname, _param )
#define RCGLGetParameter( dt, _ctx, _pname, _params ) dt.CGLGetParameter.proc( dt.CGLGetParameter.layer, _ctx, _pname, _params )
#define RCGLGetVersion( dt, _majorvers, _minorvers ) dt.CGLGetVersion.proc( dt.CGLGetVersion.layer, _majorvers, _minorvers )
#define RCGLGetVirtualScreen( dt, _ctx, _screen ) dt.CGLGetVirtualScreen.proc( dt.CGLGetVirtualScreen.layer, _ctx, _screen )
#define RCGLIsEnabled( dt, _ctx, _pname, _enable ) dt.CGLIsEnabled.proc( dt.CGLIsEnabled.layer, _ctx, _pname, _enable )
#define RCGLQueryRendererInfo( dt, _display_mask, _rend, _nrend ) dt.CGLQueryRendererInfo.proc( dt.CGLQueryRendererInfo.layer, _display_mask, _rend, _nrend )
#define RCGLSetFullScreen( dt, _ctx ) dt.CGLSetFullScreen.proc( dt.CGLSetFullScreen.layer, _ctx )
#define RCGLSetOffScreen( dt, _ctx, _width, _height, _rowbytes, _baseaddr ) dt.CGLSetOffScreen.proc( dt.CGLSetOffScreen.layer, _ctx, _width, _height, _rowbytes, _baseaddr )
#define RCGLSetOption( dt, _pname, _param ) dt.CGLSetOption.proc( dt.CGLSetOption.layer, _pname, _param )
#define RCGLSetParameter( dt, _ctx, _pname, _params ) dt.CGLSetParameter.proc( dt.CGLSetParameter.layer, _ctx, _pname, _params )
#define RCGLSetVirtualScreen( dt, _ctx, _screen ) dt.CGLSetVirtualScreen.proc( dt.CGLSetVirtualScreen.layer, _ctx, _screen )

    // CGL_VERSION_1_1

#define RCGLCreatePBuffer( dt, _width, _height, _target, _internalFormat, _max_level, _pbuffer ) dt.CGLCreatePBuffer.proc( dt.CGLCreatePBuffer.layer, _width, _height, _target, _internalFormat, _max_level, _pbuffer )
#define RCGLDescribePBuffer( dt, _pbuffer, _width, _height, _target, _internalFormat, _mipmap ) dt.CGLDescribePBuffer.proc( dt.CGLDescribePBuffer.layer, _pbuffer, _width, _height, _target, _internalFormat, _mipmap )
#define RCGLDestroyPBuffer( dt, _pbuffer ) dt.CGLDestroyPBuffer.proc( dt.CGLDestroyPBuffer.layer, _pbuffer )
#define RCGLGetPBuffer( dt, _ctx, _pbuffer, _face, _level, _screen ) dt.CGLGetPBuffer.proc( dt.CGLGetPBuffer.layer, _ctx, _pbuffer, _face, _level, _screen )
#define RCGLSetPBuffer( dt, _ctx, _pbuffer, _face, _level, _screen ) dt.CGLSetPBuffer.proc( dt.CGLSetPBuffer.layer, _ctx, _pbuffer, _face, _level, _screen )
#define RCGLTexImagePBuffer( dt, _ctx, _pbuffer, _source ) dt.CGLTexImagePBuffer.proc( dt.CGLTexImagePBuffer.layer, _ctx, _pbuffer, _source )

    // CGL_VERSION_1_2

#define RCGLGetContextRetainCount( dt, _ctx ) dt.CGLGetContextRetainCount.proc( dt.CGLGetContextRetainCount.layer, _ctx )
#define RCGLGetGlobalOption( dt, _pname, _params ) dt.CGLGetGlobalOption.proc( dt.CGLGetGlobalOption.layer, _pname, _params )
#define RCGLGetPBufferRetainCount( dt, _pbuffer ) dt.CGLGetPBufferRetainCount.proc( dt.CGLGetPBufferRetainCount.layer, _pbuffer )
#define RCGLGetPixelFormat( dt, _ctx ) dt.CGLGetPixelFormat.proc( dt.CGLGetPixelFormat.layer, _ctx )
#define RCGLGetPixelFormatRetainCount( dt, _pix ) dt.CGLGetPixelFormatRetainCount.proc( dt.CGLGetPixelFormatRetainCount.layer, _pix )
#define RCGLLockContext( dt, _ctx ) dt.CGLLockContext.proc( dt.CGLLockContext.layer, _ctx )
#define RCGLReleaseContext( dt, _ctx ) dt.CGLReleaseContext.proc( dt.CGLReleaseContext.layer, _ctx )
#define RCGLReleasePBuffer( dt, _pbuffer ) dt.CGLReleasePBuffer.proc( dt.CGLReleasePBuffer.layer, _pbuffer )
#define RCGLReleasePixelFormat( dt, _pix ) dt.CGLReleasePixelFormat.proc( dt.CGLReleasePixelFormat.layer, _pix )
#define RCGLRetainContext( dt, _ctx ) dt.CGLRetainContext.proc( dt.CGLRetainContext.layer, _ctx )
#define RCGLRetainPBuffer( dt, _pbuffer ) dt.CGLRetainPBuffer.proc( dt.CGLRetainPBuffer.layer, _pbuffer )
#define RCGLRetainPixelFormat( dt, _pix ) dt.CGLRetainPixelFormat.proc( dt.CGLRetainPixelFormat.layer, _pix )
#define RCGLSetGlobalOption( dt, _pname, _params ) dt.CGLSetGlobalOption.proc( dt.CGLSetGlobalOption.layer, _pname, _params )
#define RCGLUnlockContext( dt, _ctx ) dt.CGLUnlockContext.proc( dt.CGLUnlockContext.layer, _ctx )

    // CGL_VERSION_1_3

#define RCGLGetCurrentContext( dt ) dt.CGLGetCurrentContext.proc( dt.CGLGetCurrentContext.layer )
#define RCGLGetShareGroup( dt, _ctx ) dt.CGLGetShareGroup.proc( dt.CGLGetShareGroup.layer, _ctx )
#define RCGLGetSurface( dt, _ctx, _conn, _win, _srf ) dt.CGLGetSurface.proc( dt.CGLGetSurface.layer, _ctx, _conn, _win, _srf )
#define RCGLSetCurrentContext( dt, _ctx ) dt.CGLSetCurrentContext.proc( dt.CGLSetCurrentContext.layer, _ctx )
#define RCGLSetSurface( dt, _ctx, _conn, _win, _srf ) dt.CGLSetSurface.proc( dt.CGLSetSurface.layer, _ctx, _conn, _win, _srf )
#define RCGLTexImageIOSurface2D( dt, _ctx, _target, _internal_format, _width, _height, _format, _type, _ioSurface, _plane ) dt.CGLTexImageIOSurface2D.proc( dt.CGLTexImageIOSurface2D.layer, _ctx, _target, _internal_format, _width, _height, _format, _type, _ioSurface, _plane )
#define RCGLUpdateContext( dt, _ctx ) dt.CGLUpdateContext.proc( dt.CGLUpdateContext.layer, _ctx )
#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL
    // EGL_ANGLE_query_surface_pointer

#define ReglQuerySurfacePointerANGLE( dt, _dpy, _surface, _attribute, _value ) dt.eglQuerySurfacePointerANGLE.proc( dt.eglQuerySurfacePointerANGLE.layer, _dpy, _surface, _attribute, _value )

    // EGL_KHR_fence_sync

#define ReglClientWaitSyncKHR( dt, _dpy, _GLsync, _flags, _timeout ) dt.eglClientWaitSyncKHR.proc( dt.eglClientWaitSyncKHR.layer, _dpy, _GLsync, _flags, _timeout )
#define ReglCreateSyncKHR( dt, _dpy, _type, _attrib_list ) dt.eglCreateSyncKHR.proc( dt.eglCreateSyncKHR.layer, _dpy, _type, _attrib_list )
#define ReglDestroySyncKHR( dt, _dpy, _GLsync ) dt.eglDestroySyncKHR.proc( dt.eglDestroySyncKHR.layer, _dpy, _GLsync )
#define ReglGetSyncAttribKHR( dt, _dpy, _GLsync, _attribute, _value ) dt.eglGetSyncAttribKHR.proc( dt.eglGetSyncAttribKHR.layer, _dpy, _GLsync, _attribute, _value )

    // EGL_KHR_image_base

#define ReglCreateImageKHR( dt, _dpy, _ctx, _target, _buffer, _attrib_list ) dt.eglCreateImageKHR.proc( dt.eglCreateImageKHR.layer, _dpy, _ctx, _target, _buffer, _attrib_list )
#define ReglDestroyImageKHR( dt, _dpy, _image ) dt.eglDestroyImageKHR.proc( dt.eglDestroyImageKHR.layer, _dpy, _image )

    // EGL_KHR_lock_surface

#define ReglLockSurfaceKHR( dt, _display, _surface, _attrib_list ) dt.eglLockSurfaceKHR.proc( dt.eglLockSurfaceKHR.layer, _display, _surface, _attrib_list )
#define ReglUnlockSurfaceKHR( dt, _display, _surface ) dt.eglUnlockSurfaceKHR.proc( dt.eglUnlockSurfaceKHR.layer, _display, _surface )

    // EGL_KHR_stream_consumer_gltexture

#define ReglStreamConsumerAcquireKHR( dt, _dpy, _stream ) dt.eglStreamConsumerAcquireKHR.proc( dt.eglStreamConsumerAcquireKHR.layer, _dpy, _stream )
#define ReglStreamConsumerGLTextureExternalKHR( dt, _dpy, _stream ) dt.eglStreamConsumerGLTextureExternalKHR.proc( dt.eglStreamConsumerGLTextureExternalKHR.layer, _dpy, _stream )
#define ReglStreamConsumerReleaseKHR( dt, _dpy, _stream ) dt.eglStreamConsumerReleaseKHR.proc( dt.eglStreamConsumerReleaseKHR.layer, _dpy, _stream )

    // EGL_KHR_stream_cross_process_fd

#define ReglCreateStreamFromFileDescriptorKHR( dt, _dpy, _file_descriptor ) dt.eglCreateStreamFromFileDescriptorKHR.proc( dt.eglCreateStreamFromFileDescriptorKHR.layer, _dpy, _file_descriptor )
#define ReglGetStreamFileDescriptorKHR( dt, _dpy, _stream ) dt.eglGetStreamFileDescriptorKHR.proc( dt.eglGetStreamFileDescriptorKHR.layer, _dpy, _stream )

    // EGL_KHR_stream_producer_eglsurface

#define ReglCreateStreamProducerSurfaceKHR( dt, _dpy, _config, _stream, _attrib_list ) dt.eglCreateStreamProducerSurfaceKHR.proc( dt.eglCreateStreamProducerSurfaceKHR.layer, _dpy, _config, _stream, _attrib_list )

    // EGL_KHR_wait_sync

#define ReglWaitSyncKHR( dt, _dpy, _GLsync, _flags ) dt.eglWaitSyncKHR.proc( dt.eglWaitSyncKHR.layer, _dpy, _GLsync, _flags )

    // EGL_MESA_drm_image

#define ReglCreateDRMImageMESA( dt, _dpy, _attrib_list ) dt.eglCreateDRMImageMESA.proc( dt.eglCreateDRMImageMESA.layer, _dpy, _attrib_list )
#define ReglExportDRMImageMESA( dt, _dpy, _image, _name, _handle, _stride ) dt.eglExportDRMImageMESA.proc( dt.eglExportDRMImageMESA.layer, _dpy, _image, _name, _handle, _stride )

    // EGL_NV_coverage_sample

#define ReglCoverageMaskNV( dt, _mask ) dt.eglCoverageMaskNV.proc( dt.eglCoverageMaskNV.layer, _mask )
#define ReglCoverageOperationNV( dt, _operation ) dt.eglCoverageOperationNV.proc( dt.eglCoverageOperationNV.layer, _operation )

    // EGL_NV_post_sub_buffer

#define ReglPostSubBufferNV( dt, _dpy, _surface, _x, _y, _width, _height ) dt.eglPostSubBufferNV.proc( dt.eglPostSubBufferNV.layer, _dpy, _surface, _x, _y, _width, _height )

    // EGL_NV_sync

#define ReglClientWaitSyncNV( dt, _GLsync, _flags, _timeout ) dt.eglClientWaitSyncNV.proc( dt.eglClientWaitSyncNV.layer, _GLsync, _flags, _timeout )
#define ReglCreateFenceSyncNV( dt, _dpy, _condition, _attrib_list ) dt.eglCreateFenceSyncNV.proc( dt.eglCreateFenceSyncNV.layer, _dpy, _condition, _attrib_list )
#define ReglDestroySyncNV( dt, _GLsync ) dt.eglDestroySyncNV.proc( dt.eglDestroySyncNV.layer, _GLsync )
#define ReglFenceNV( dt, _GLsync ) dt.eglFenceNV.proc( dt.eglFenceNV.layer, _GLsync )
#define ReglGetSyncAttribNV( dt, _GLsync, _attribute, _value ) dt.eglGetSyncAttribNV.proc( dt.eglGetSyncAttribNV.layer, _GLsync, _attribute, _value )
#define ReglSignalSyncNV( dt, _GLsync, _mode ) dt.eglSignalSyncNV.proc( dt.eglSignalSyncNV.layer, _GLsync, _mode )

    // EGL_NV_system_time

#define ReglGetSystemTimeFrequencyNV( dt ) dt.eglGetSystemTimeFrequencyNV.proc( dt.eglGetSystemTimeFrequencyNV.layer )
#define ReglGetSystemTimeNV( dt ) dt.eglGetSystemTimeNV.proc( dt.eglGetSystemTimeNV.layer )

    // EGL_VERSION_1_0

#define ReglChooseConfig( dt, _dpy, _attrib_list, _configs, _config_size, _num_config ) dt.eglChooseConfig.proc( dt.eglChooseConfig.layer, _dpy, _attrib_list, _configs, _config_size, _num_config )
#define ReglCopyBuffers( dt, _dpy, _surface, _target ) dt.eglCopyBuffers.proc( dt.eglCopyBuffers.layer, _dpy, _surface, _target )
#define ReglCreateContext( dt, _dpy, _config, _share_context, _attrib_list ) dt.eglCreateContext.proc( dt.eglCreateContext.layer, _dpy, _config, _share_context, _attrib_list )
#define ReglCreatePbufferSurface( dt, _dpy, _config, _attrib_list ) dt.eglCreatePbufferSurface.proc( dt.eglCreatePbufferSurface.layer, _dpy, _config, _attrib_list )
#define ReglCreatePixmapSurface( dt, _dpy, _config, _pixmap, _attrib_list ) dt.eglCreatePixmapSurface.proc( dt.eglCreatePixmapSurface.layer, _dpy, _config, _pixmap, _attrib_list )
#define ReglCreateWindowSurface( dt, _dpy, _config, _win, _attrib_list ) dt.eglCreateWindowSurface.proc( dt.eglCreateWindowSurface.layer, _dpy, _config, _win, _attrib_list )
#define ReglDestroyContext( dt, _dpy, _ctx ) dt.eglDestroyContext.proc( dt.eglDestroyContext.layer, _dpy, _ctx )
#define ReglDestroySurface( dt, _dpy, _surface ) dt.eglDestroySurface.proc( dt.eglDestroySurface.layer, _dpy, _surface )
#define ReglGetConfigAttrib( dt, _dpy, _config, _attribute, _value ) dt.eglGetConfigAttrib.proc( dt.eglGetConfigAttrib.layer, _dpy, _config, _attribute, _value )
#define ReglGetConfigs( dt, _dpy, _configs, _config_size, _num_config ) dt.eglGetConfigs.proc( dt.eglGetConfigs.layer, _dpy, _configs, _config_size, _num_config )
#define ReglGetCurrentContext( dt ) dt.eglGetCurrentContext.proc( dt.eglGetCurrentContext.layer )
#define ReglGetCurrentDisplay( dt ) dt.eglGetCurrentDisplay.proc( dt.eglGetCurrentDisplay.layer )
#define ReglGetCurrentSurface( dt, _readdraw ) dt.eglGetCurrentSurface.proc( dt.eglGetCurrentSurface.layer, _readdraw )
#define ReglGetDisplay( dt, _display_id ) dt.eglGetDisplay.proc( dt.eglGetDisplay.layer, _display_id )
#define ReglGetError( dt ) dt.eglGetError.proc( dt.eglGetError.layer )
#define ReglGetProcAddress( dt, _procname ) dt.eglGetProcAddress.proc( dt.eglGetProcAddress.layer, _procname )
#define ReglInitialize( dt, _dpy, _major, _minor ) dt.eglInitialize.proc( dt.eglInitialize.layer, _dpy, _major, _minor )
#define ReglMakeCurrent( dt, _dpy, _draw, _read, _ctx ) dt.eglMakeCurrent.proc( dt.eglMakeCurrent.layer, _dpy, _draw, _read, _ctx )
#define ReglQueryContext( dt, _dpy, _ctx, _attribute, _value ) dt.eglQueryContext.proc( dt.eglQueryContext.layer, _dpy, _ctx, _attribute, _value )
#define ReglQueryString( dt, _dpy, _name ) dt.eglQueryString.proc( dt.eglQueryString.layer, _dpy, _name )
#define ReglQuerySurface( dt, _dpy, _surface, _attribute, _value ) dt.eglQuerySurface.proc( dt.eglQuerySurface.layer, _dpy, _surface, _attribute, _value )
#define ReglSwapBuffers( dt, _dpy, _surface ) dt.eglSwapBuffers.proc( dt.eglSwapBuffers.layer, _dpy, _surface )
#define ReglTerminate( dt, _dpy ) dt.eglTerminate.proc( dt.eglTerminate.layer, _dpy )
#define ReglWaitGL( dt ) dt.eglWaitGL.proc( dt.eglWaitGL.layer )
#define ReglWaitNative( dt, _engine ) dt.eglWaitNative.proc( dt.eglWaitNative.layer, _engine )

    // EGL_VERSION_1_1

#define ReglBindTexImage( dt, _dpy, _surface, _buffer ) dt.eglBindTexImage.proc( dt.eglBindTexImage.layer, _dpy, _surface, _buffer )
#define ReglReleaseTexImage( dt, _dpy, _surface, _buffer ) dt.eglReleaseTexImage.proc( dt.eglReleaseTexImage.layer, _dpy, _surface, _buffer )

    // EGL_VERSION_1_2

#define ReglBindAPI( dt, _api ) dt.eglBindAPI.proc( dt.eglBindAPI.layer, _api )
#define ReglCreatePbufferFromClientBuffer( dt, _dpy, _buftype, _buffer, _config, _attrib_list ) dt.eglCreatePbufferFromClientBuffer.proc( dt.eglCreatePbufferFromClientBuffer.layer, _dpy, _buftype, _buffer, _config, _attrib_list )
#define ReglQueryAPI( dt ) dt.eglQueryAPI.proc( dt.eglQueryAPI.layer )
#define ReglReleaseThread( dt ) dt.eglReleaseThread.proc( dt.eglReleaseThread.layer )
#define ReglSurfaceAttrib( dt, _dpy, _surface, _attribute, _value ) dt.eglSurfaceAttrib.proc( dt.eglSurfaceAttrib.layer, _dpy, _surface, _attribute, _value )
#define ReglSwapInterval( dt, _dpy, _interval ) dt.eglSwapInterval.proc( dt.eglSwapInterval.layer, _dpy, _interval )
#define ReglWaitClient( dt ) dt.eglWaitClient.proc( dt.eglWaitClient.layer )
#endif // REGAL_SYS_EGL

namespace Dispatch
{
  struct Global {

#if REGAL_SYS_WGL
    // WGL_3DL_stereo_control

    REGALWGLSETSTEREOEMITTERSTATE3DLPROC wglSetStereoEmitterState3DL;

    // WGL_AMD_gpu_association

    REGALWGLBLITCONTEXTFRAMEBUFFERAMDPROC wglBlitContextFramebufferAMD;

    REGALWGLCREATEASSOCIATEDCONTEXTAMDPROC wglCreateAssociatedContextAMD;

    REGALWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC wglCreateAssociatedContextAttribsAMD;

    REGALWGLDELETEASSOCIATEDCONTEXTAMDPROC wglDeleteAssociatedContextAMD;

    REGALWGLGETCONTEXTGPUIDAMDPROC wglGetContextGPUIDAMD;

    REGALWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC wglGetCurrentAssociatedContextAMD;

    REGALWGLGETGPUIDSAMDPROC wglGetGPUIDsAMD;

    REGALWGLGETGPUINFOAMDPROC wglGetGPUInfoAMD;

    REGALWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC wglMakeAssociatedContextCurrentAMD;

    // WGL_ARB_buffer_region

    REGALWGLCREATEBUFFERREGIONARBPROC wglCreateBufferRegionARB;

    REGALWGLDELETEBUFFERREGIONARBPROC wglDeleteBufferRegionARB;

    REGALWGLRESTOREBUFFERREGIONARBPROC wglRestoreBufferRegionARB;

    REGALWGLSAVEBUFFERREGIONARBPROC wglSaveBufferRegionARB;

    // WGL_ARB_create_context

    REGALWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB;

    // WGL_ARB_extensions_string

    REGALWGLGETEXTENSIONSSTRINGARBPROC wglGetExtensionsStringARB;

    // WGL_ARB_make_current_read

    REGALWGLGETCURRENTREADDCARBPROC wglGetCurrentReadDCARB;

    REGALWGLMAKECONTEXTCURRENTARBPROC wglMakeContextCurrentARB;

    // WGL_ARB_pbuffer

    REGALWGLCREATEPBUFFERARBPROC wglCreatePbufferARB;

    REGALWGLDESTROYPBUFFERARBPROC wglDestroyPbufferARB;

    REGALWGLGETPBUFFERDCARBPROC wglGetPbufferDCARB;

    REGALWGLQUERYPBUFFERARBPROC wglQueryPbufferARB;

    REGALWGLRELEASEPBUFFERDCARBPROC wglReleasePbufferDCARB;

    // WGL_ARB_pixel_format

    REGALWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB;

    REGALWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB;

    REGALWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB;

    // WGL_ARB_render_texture

    REGALWGLBINDTEXIMAGEARBPROC wglBindTexImageARB;

    REGALWGLRELEASETEXIMAGEARBPROC wglReleaseTexImageARB;

    REGALWGLSETPBUFFERATTRIBARBPROC wglSetPbufferAttribARB;

    // WGL_EXT_display_color_table

    REGALWGLBINDDISPLAYCOLORTABLEEXTPROC wglBindDisplayColorTableEXT;

    REGALWGLCREATEDISPLAYCOLORTABLEEXTPROC wglCreateDisplayColorTableEXT;

    REGALWGLDESTROYDISPLAYCOLORTABLEEXTPROC wglDestroyDisplayColorTableEXT;

    REGALWGLLOADDISPLAYCOLORTABLEEXTPROC wglLoadDisplayColorTableEXT;

    // WGL_EXT_extensions_string

    REGALWGLGETEXTENSIONSSTRINGEXTPROC wglGetExtensionsStringEXT;

    // WGL_EXT_make_current_read

    REGALWGLGETCURRENTREADDCEXTPROC wglGetCurrentReadDCEXT;

    REGALWGLMAKECONTEXTCURRENTEXTPROC wglMakeContextCurrentEXT;

    // WGL_EXT_pbuffer

    REGALWGLCREATEPBUFFEREXTPROC wglCreatePbufferEXT;

    REGALWGLDESTROYPBUFFEREXTPROC wglDestroyPbufferEXT;

    REGALWGLGETPBUFFERDCEXTPROC wglGetPbufferDCEXT;

    REGALWGLQUERYPBUFFEREXTPROC wglQueryPbufferEXT;

    REGALWGLRELEASEPBUFFERDCEXTPROC wglReleasePbufferDCEXT;

    // WGL_EXT_pixel_format

    REGALWGLCHOOSEPIXELFORMATEXTPROC wglChoosePixelFormatEXT;

    REGALWGLGETPIXELFORMATATTRIBFVEXTPROC wglGetPixelFormatAttribfvEXT;

    REGALWGLGETPIXELFORMATATTRIBIVEXTPROC wglGetPixelFormatAttribivEXT;

    // WGL_EXT_swap_control

    REGALWGLGETSWAPINTERVALEXTPROC wglGetSwapIntervalEXT;

    REGALWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT;

    // WGL_GDI

    REGALSWAPBUFFERSPROC SwapBuffers;

    REGALWGLCHOOSEPIXELFORMATPROC wglChoosePixelFormat;

    REGALWGLDESCRIBEPIXELFORMATPROC wglDescribePixelFormat;

    REGALWGLGETPIXELFORMATPROC wglGetPixelFormat;

    REGALWGLSETPIXELFORMATPROC wglSetPixelFormat;

    REGALWGLSWAPBUFFERSPROC wglSwapBuffers;

    // WGL_I3D_digital_video_control

    REGALWGLGETDIGITALVIDEOPARAMETERSI3DPROC wglGetDigitalVideoParametersI3D;

    REGALWGLSETDIGITALVIDEOPARAMETERSI3DPROC wglSetDigitalVideoParametersI3D;

    // WGL_I3D_gamma

    REGALWGLGETGAMMATABLEI3DPROC wglGetGammaTableI3D;

    REGALWGLGETGAMMATABLEPARAMETERSI3DPROC wglGetGammaTableParametersI3D;

    REGALWGLSETGAMMATABLEI3DPROC wglSetGammaTableI3D;

    REGALWGLSETGAMMATABLEPARAMETERSI3DPROC wglSetGammaTableParametersI3D;

    // WGL_I3D_genlock

    REGALWGLDISABLEGENLOCKI3DPROC wglDisableGenlockI3D;

    REGALWGLENABLEGENLOCKI3DPROC wglEnableGenlockI3D;

    REGALWGLGENLOCKSAMPLERATEI3DPROC wglGenlockSampleRateI3D;

    REGALWGLGENLOCKSOURCEDELAYI3DPROC wglGenlockSourceDelayI3D;

    REGALWGLGENLOCKSOURCEEDGEI3DPROC wglGenlockSourceEdgeI3D;

    REGALWGLGENLOCKSOURCEI3DPROC wglGenlockSourceI3D;

    REGALWGLGETGENLOCKSAMPLERATEI3DPROC wglGetGenlockSampleRateI3D;

    REGALWGLGETGENLOCKSOURCEDELAYI3DPROC wglGetGenlockSourceDelayI3D;

    REGALWGLGETGENLOCKSOURCEEDGEI3DPROC wglGetGenlockSourceEdgeI3D;

    REGALWGLGETGENLOCKSOURCEI3DPROC wglGetGenlockSourceI3D;

    REGALWGLISENABLEDGENLOCKI3DPROC wglIsEnabledGenlockI3D;

    REGALWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC wglQueryGenlockMaxSourceDelayI3D;

    // WGL_I3D_image_buffer

    REGALWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC wglAssociateImageBufferEventsI3D;

    REGALWGLCREATEIMAGEBUFFERI3DPROC wglCreateImageBufferI3D;

    REGALWGLDESTROYIMAGEBUFFERI3DPROC wglDestroyImageBufferI3D;

    REGALWGLRELEASEIMAGEBUFFEREVENTSI3DPROC wglReleaseImageBufferEventsI3D;

    // WGL_I3D_swap_frame_lock

    REGALWGLDISABLEFRAMELOCKI3DPROC wglDisableFrameLockI3D;

    REGALWGLENABLEFRAMELOCKI3DPROC wglEnableFrameLockI3D;

    REGALWGLISENABLEDFRAMELOCKI3DPROC wglIsEnabledFrameLockI3D;

    REGALWGLQUERYFRAMELOCKMASTERI3DPROC wglQueryFrameLockMasterI3D;

    // WGL_I3D_swap_frame_usage

    REGALWGLBEGINFRAMETRACKINGI3DPROC wglBeginFrameTrackingI3D;

    REGALWGLENDFRAMETRACKINGI3DPROC wglEndFrameTrackingI3D;

    REGALWGLGETFRAMEUSAGEI3DPROC wglGetFrameUsageI3D;

    REGALWGLQUERYFRAMETRACKINGI3DPROC wglQueryFrameTrackingI3D;

    // WGL_NV_DX_interop

    REGALWGLDXCLOSEDEVICENVPROC wglDXCloseDeviceNV;

    REGALWGLDXLOCKOBJECTSNVPROC wglDXLockObjectsNV;

    REGALWGLDXOBJECTACCESSNVPROC wglDXObjectAccessNV;

    REGALWGLDXOPENDEVICENVPROC wglDXOpenDeviceNV;

    REGALWGLDXREGISTEROBJECTNVPROC wglDXRegisterObjectNV;

    REGALWGLDXSETRESOURCESHAREHANDLENVPROC wglDXSetResourceShareHandleNV;

    REGALWGLDXUNLOCKOBJECTSNVPROC wglDXUnlockObjectsNV;

    REGALWGLDXUNREGISTEROBJECTNVPROC wglDXUnregisterObjectNV;

    // WGL_NV_copy_image

    REGALWGLCOPYIMAGESUBDATANVPROC wglCopyImageSubDataNV;

    // WGL_NV_gpu_affinity

    REGALWGLCREATEAFFINITYDCNVPROC wglCreateAffinityDCNV;

    REGALWGLDELETEDCNVPROC wglDeleteDCNV;

    REGALWGLENUMGPUDEVICESNVPROC wglEnumGpuDevicesNV;

    REGALWGLENUMGPUSFROMAFFINITYDCNVPROC wglEnumGpusFromAffinityDCNV;

    REGALWGLENUMGPUSNVPROC wglEnumGpusNV;

    // WGL_NV_present_video

    REGALWGLBINDVIDEODEVICENVPROC wglBindVideoDeviceNV;

    REGALWGLENUMERATEVIDEODEVICESNVPROC wglEnumerateVideoDevicesNV;

    REGALWGLQUERYCURRENTCONTEXTNVPROC wglQueryCurrentContextNV;

    // WGL_NV_swap_group

    REGALWGLBINDSWAPBARRIERNVPROC wglBindSwapBarrierNV;

    REGALWGLJOINSWAPGROUPNVPROC wglJoinSwapGroupNV;

    REGALWGLQUERYFRAMECOUNTNVPROC wglQueryFrameCountNV;

    REGALWGLQUERYMAXSWAPGROUPSNVPROC wglQueryMaxSwapGroupsNV;

    REGALWGLQUERYSWAPGROUPNVPROC wglQuerySwapGroupNV;

    REGALWGLRESETFRAMECOUNTNVPROC wglResetFrameCountNV;

    // WGL_NV_vertex_array_range

    REGALWGLALLOCATEMEMORYNVPROC wglAllocateMemoryNV;

    REGALWGLFREEMEMORYNVPROC wglFreeMemoryNV;

    // WGL_NV_video_capture

    REGALWGLBINDVIDEOCAPTUREDEVICENVPROC wglBindVideoCaptureDeviceNV;

    REGALWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC wglEnumerateVideoCaptureDevicesNV;

    REGALWGLLOCKVIDEOCAPTUREDEVICENVPROC wglLockVideoCaptureDeviceNV;

    REGALWGLQUERYVIDEOCAPTUREDEVICENVPROC wglQueryVideoCaptureDeviceNV;

    REGALWGLRELEASEVIDEOCAPTUREDEVICENVPROC wglReleaseVideoCaptureDeviceNV;

    // WGL_NV_video_output

    REGALWGLBINDVIDEOIMAGENVPROC wglBindVideoImageNV;

    REGALWGLGETVIDEODEVICENVPROC wglGetVideoDeviceNV;

    REGALWGLGETVIDEOINFONVPROC wglGetVideoInfoNV;

    REGALWGLRELEASEVIDEODEVICENVPROC wglReleaseVideoDeviceNV;

    REGALWGLRELEASEVIDEOIMAGENVPROC wglReleaseVideoImageNV;

    REGALWGLSENDPBUFFERTOVIDEONVPROC wglSendPbufferToVideoNV;

    // WGL_OML_sync_control

    REGALWGLGETMSCRATEOMLPROC wglGetMscRateOML;

    REGALWGLGETSYNCVALUESOMLPROC wglGetSyncValuesOML;

    REGALWGLSWAPBUFFERSMSCOMLPROC wglSwapBuffersMscOML;

    REGALWGLSWAPLAYERBUFFERSMSCOMLPROC wglSwapLayerBuffersMscOML;

    REGALWGLWAITFORMSCOMLPROC wglWaitForMscOML;

    REGALWGLWAITFORSBCOMLPROC wglWaitForSbcOML;

    // WGL_core

    REGALWGLCOPYCONTEXTPROC wglCopyContext;

    REGALWGLCREATECONTEXTPROC wglCreateContext;

    REGALWGLCREATELAYERCONTEXTPROC wglCreateLayerContext;

    REGALWGLDELETECONTEXTPROC wglDeleteContext;

    REGALWGLDESCRIBELAYERPLANEPROC wglDescribeLayerPlane;

    REGALWGLGETCURRENTCONTEXTPROC wglGetCurrentContext;

    REGALWGLGETCURRENTDCPROC wglGetCurrentDC;

    REGALWGLGETDEFAULTPROCADDRESSPROC wglGetDefaultProcAddress;

    REGALWGLGETLAYERPALETTEENTRIESPROC wglGetLayerPaletteEntries;

    REGALWGLGETPROCADDRESSPROC wglGetProcAddress;

    REGALWGLMAKECURRENTPROC wglMakeCurrent;

    REGALWGLREALIZELAYERPALETTEPROC wglRealizeLayerPalette;

    REGALWGLSETLAYERPALETTEENTRIESPROC wglSetLayerPaletteEntries;

    REGALWGLSHARELISTSPROC wglShareLists;

    REGALWGLSWAPLAYERBUFFERSPROC wglSwapLayerBuffers;

    REGALWGLSWAPMULTIPLEBUFFERSPROC wglSwapMultipleBuffers;

    REGALWGLUSEFONTBITMAPSAPROC wglUseFontBitmapsA;

    REGALWGLUSEFONTBITMAPSWPROC wglUseFontBitmapsW;

    REGALWGLUSEFONTOUTLINESAPROC wglUseFontOutlinesA;

    REGALWGLUSEFONTOUTLINESWPROC wglUseFontOutlinesW;

#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX
    // GLX_VERSION_1_0

    REGALGLXCHOOSEVISUALPROC glXChooseVisual;

    REGALGLXCOPYCONTEXTPROC glXCopyContext;

    REGALGLXCREATECONTEXTPROC glXCreateContext;

    REGALGLXCREATEGLXPIXMAPPROC glXCreateGLXPixmap;

    REGALGLXDESTROYCONTEXTPROC glXDestroyContext;

    REGALGLXDESTROYGLXPIXMAPPROC glXDestroyGLXPixmap;

    REGALGLXGETCONFIGPROC glXGetConfig;

    REGALGLXGETCURRENTCONTEXTPROC glXGetCurrentContext;

    REGALGLXGETCURRENTDRAWABLEPROC glXGetCurrentDrawable;

    REGALGLXISDIRECTPROC glXIsDirect;

    REGALGLXMAKECURRENTPROC glXMakeCurrent;

    REGALGLXQUERYEXTENSIONPROC glXQueryExtension;

    REGALGLXQUERYVERSIONPROC glXQueryVersion;

    REGALGLXSWAPBUFFERSPROC glXSwapBuffers;

    REGALGLXUSEXFONTPROC glXUseXFont;

    REGALGLXWAITGLPROC glXWaitGL;

    REGALGLXWAITXPROC glXWaitX;

    // GLX_VERSION_1_1

    REGALGLXGETCLIENTSTRINGPROC glXGetClientString;

    REGALGLXQUERYEXTENSIONSSTRINGPROC glXQueryExtensionsString;

    REGALGLXQUERYSERVERSTRINGPROC glXQueryServerString;

    // GLX_VERSION_1_2

    REGALGLXGETCURRENTDISPLAYPROC glXGetCurrentDisplay;

    // GLX_VERSION_1_3

    REGALGLXCHOOSEFBCONFIGPROC glXChooseFBConfig;

    REGALGLXCREATENEWCONTEXTPROC glXCreateNewContext;

    REGALGLXCREATEPBUFFERPROC glXCreatePbuffer;

    REGALGLXCREATEPIXMAPPROC glXCreatePixmap;

    REGALGLXCREATEWINDOWPROC glXCreateWindow;

    REGALGLXDESTROYPBUFFERPROC glXDestroyPbuffer;

    REGALGLXDESTROYPIXMAPPROC glXDestroyPixmap;

    REGALGLXDESTROYWINDOWPROC glXDestroyWindow;

    REGALGLXGETCURRENTREADDRAWABLEPROC glXGetCurrentReadDrawable;

    REGALGLXGETFBCONFIGATTRIBPROC glXGetFBConfigAttrib;

    REGALGLXGETFBCONFIGSPROC glXGetFBConfigs;

    REGALGLXGETSELECTEDEVENTPROC glXGetSelectedEvent;

    REGALGLXGETVISUALFROMFBCONFIGPROC glXGetVisualFromFBConfig;

    REGALGLXMAKECONTEXTCURRENTPROC glXMakeContextCurrent;

    REGALGLXQUERYCONTEXTPROC glXQueryContext;

    REGALGLXQUERYDRAWABLEPROC glXQueryDrawable;

    REGALGLXSELECTEVENTPROC glXSelectEvent;

    // GLX_VERSION_1_4

    REGALGLXGETPROCADDRESSPROC glXGetProcAddress;

    // GLX_AMD_gpu_association

    REGALGLXBLITCONTEXTFRAMEBUFFERAMDPROC glXBlitContextFramebufferAMD;

    REGALGLXCREATEASSOCIATEDCONTEXTAMDPROC glXCreateAssociatedContextAMD;

    REGALGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC glXCreateAssociatedContextAttribsAMD;

    REGALGLXDELETEASSOCIATEDCONTEXTAMDPROC glXDeleteAssociatedContextAMD;

    REGALGLXGETCONTEXTGPUIDAMDPROC glXGetContextGPUIDAMD;

    REGALGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC glXGetCurrentAssociatedContextAMD;

    REGALGLXGETGPUIDSAMDPROC glXGetGPUIDsAMD;

    REGALGLXGETGPUINFOAMDPROC glXGetGPUInfoAMD;

    REGALGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC glXMakeAssociatedContextCurrentAMD;

    // GLX_ARB_create_context

    REGALGLXCREATECONTEXTATTRIBSARBPROC glXCreateContextAttribsARB;

    // GLX_ARB_get_proc_address

    REGALGLXGETPROCADDRESSARBPROC glXGetProcAddressARB;

    // GLX_ATI_render_texture

    REGALGLXBINDTEXIMAGEATIPROC glXBindTexImageATI;

    REGALGLXDRAWABLEATTRIBATIPROC glXDrawableAttribATI;

    REGALGLXRELEASETEXIMAGEATIPROC glXReleaseTexImageATI;

    // GLX_EXT_import_context

    REGALGLXFREECONTEXTEXTPROC glXFreeContextEXT;

    REGALGLXGETCONTEXTIDEXTPROC glXGetContextIDEXT;

    REGALGLXIMPORTCONTEXTEXTPROC glXImportContextEXT;

    REGALGLXQUERYCONTEXTINFOEXTPROC glXQueryContextInfoEXT;

    // GLX_EXT_swap_control

    REGALGLXSWAPINTERVALEXTPROC glXSwapIntervalEXT;

    // GLX_EXT_texture_from_pixmap

    REGALGLXBINDTEXIMAGEEXTPROC glXBindTexImageEXT;

    REGALGLXRELEASETEXIMAGEEXTPROC glXReleaseTexImageEXT;

    // GLX_MESA_agp_offset

    REGALGLXGETAGPOFFSETMESAPROC glXGetAGPOffsetMESA;

    // GLX_MESA_copy_sub_buffer

    REGALGLXCOPYSUBBUFFERMESAPROC glXCopySubBufferMESA;

    // GLX_MESA_pixmap_colormap

    REGALGLXCREATEGLXPIXMAPMESAPROC glXCreateGLXPixmapMESA;

    // GLX_MESA_release_buffers

    REGALGLXRELEASEBUFFERSMESAPROC glXReleaseBuffersMESA;

    // GLX_MESA_set_3dfx_mode

    REGALGLXSET3DFXMODEMESAPROC glXSet3DfxModeMESA;

    // GLX_MESA_swap_control

    REGALGLXGETSWAPINTERVALMESAPROC glXGetSwapIntervalMESA;

    REGALGLXSWAPINTERVALMESAPROC glXSwapIntervalMESA;

    // GLX_NV_copy_image

    REGALGLXCOPYIMAGESUBDATANVPROC glXCopyImageSubDataNV;

    // GLX_NV_present_video

    REGALGLXBINDVIDEODEVICENVPROC glXBindVideoDeviceNV;

    REGALGLXENUMERATEVIDEODEVICESNVPROC glXEnumerateVideoDevicesNV;

    // GLX_NV_swap_group

    REGALGLXBINDSWAPBARRIERNVPROC glXBindSwapBarrierNV;

    REGALGLXJOINSWAPGROUPNVPROC glXJoinSwapGroupNV;

    REGALGLXQUERYFRAMECOUNTNVPROC glXQueryFrameCountNV;

    REGALGLXQUERYMAXSWAPGROUPSNVPROC glXQueryMaxSwapGroupsNV;

    REGALGLXQUERYSWAPGROUPNVPROC glXQuerySwapGroupNV;

    REGALGLXRESETFRAMECOUNTNVPROC glXResetFrameCountNV;

    // GLX_NV_vertex_array_range

    REGALGLXALLOCATEMEMORYNVPROC glXAllocateMemoryNV;

    REGALGLXFREEMEMORYNVPROC glXFreeMemoryNV;

    // GLX_NV_video_capture

    REGALGLXBINDVIDEOCAPTUREDEVICENVPROC glXBindVideoCaptureDeviceNV;

    REGALGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC glXEnumerateVideoCaptureDevicesNV;

    REGALGLXLOCKVIDEOCAPTUREDEVICENVPROC glXLockVideoCaptureDeviceNV;

    REGALGLXQUERYVIDEOCAPTUREDEVICENVPROC glXQueryVideoCaptureDeviceNV;

    REGALGLXRELEASEVIDEOCAPTUREDEVICENVPROC glXReleaseVideoCaptureDeviceNV;

    // GLX_NV_video_output

    REGALGLXBINDVIDEOIMAGENVPROC glXBindVideoImageNV;

    REGALGLXGETVIDEODEVICENVPROC glXGetVideoDeviceNV;

    REGALGLXGETVIDEOINFONVPROC glXGetVideoInfoNV;

    REGALGLXRELEASEVIDEODEVICENVPROC glXReleaseVideoDeviceNV;

    REGALGLXRELEASEVIDEOIMAGENVPROC glXReleaseVideoImageNV;

    REGALGLXSENDPBUFFERTOVIDEONVPROC glXSendPbufferToVideoNV;

    // GLX_OML_sync_control

    REGALGLXGETMSCRATEOMLPROC glXGetMscRateOML;

    REGALGLXGETSYNCVALUESOMLPROC glXGetSyncValuesOML;

    REGALGLXSWAPBUFFERSMSCOMLPROC glXSwapBuffersMscOML;

    REGALGLXWAITFORMSCOMLPROC glXWaitForMscOML;

    REGALGLXWAITFORSBCOMLPROC glXWaitForSbcOML;

    // GLX_SGIX_fbconfig

    REGALGLXCHOOSEFBCONFIGSGIXPROC glXChooseFBConfigSGIX;

    REGALGLXCREATECONTEXTWITHCONFIGSGIXPROC glXCreateContextWithConfigSGIX;

    REGALGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC glXCreateGLXPixmapWithConfigSGIX;

    REGALGLXGETFBCONFIGATTRIBSGIXPROC glXGetFBConfigAttribSGIX;

    REGALGLXGETFBCONFIGFROMVISUALSGIXPROC glXGetFBConfigFromVisualSGIX;

    REGALGLXGETVISUALFROMFBCONFIGSGIXPROC glXGetVisualFromFBConfigSGIX;

    // GLX_SGIX_pbuffer

    REGALGLXCREATEGLXPBUFFERSGIXPROC glXCreateGLXPbufferSGIX;

    REGALGLXDESTROYGLXPBUFFERSGIXPROC glXDestroyGLXPbufferSGIX;

    REGALGLXGETSELECTEDEVENTSGIXPROC glXGetSelectedEventSGIX;

    REGALGLXQUERYGLXPBUFFERSGIXPROC glXQueryGLXPbufferSGIX;

    REGALGLXSELECTEVENTSGIXPROC glXSelectEventSGIX;

    // GLX_SGIX_swap_barrier

    REGALGLXBINDSWAPBARRIERSGIXPROC glXBindSwapBarrierSGIX;

    REGALGLXQUERYMAXSWAPBARRIERSSGIXPROC glXQueryMaxSwapBarriersSGIX;

    // GLX_SGIX_swap_group

    REGALGLXJOINSWAPGROUPSGIXPROC glXJoinSwapGroupSGIX;

    // GLX_SGIX_video_resize

    REGALGLXBINDCHANNELTOWINDOWSGIXPROC glXBindChannelToWindowSGIX;

    REGALGLXCHANNELRECTSGIXPROC glXChannelRectSGIX;

    REGALGLXCHANNELRECTSYNCSGIXPROC glXChannelRectSyncSGIX;

    REGALGLXQUERYCHANNELDELTASSGIXPROC glXQueryChannelDeltasSGIX;

    REGALGLXQUERYCHANNELRECTSGIXPROC glXQueryChannelRectSGIX;

    // GLX_SGI_cushion

    REGALGLXCUSHIONSGIPROC glXCushionSGI;

    // GLX_SGI_make_current_read

    REGALGLXGETCURRENTREADDRAWABLESGIPROC glXGetCurrentReadDrawableSGI;

    REGALGLXMAKECURRENTREADSGIPROC glXMakeCurrentReadSGI;

    // GLX_SGI_swap_control

    REGALGLXSWAPINTERVALSGIPROC glXSwapIntervalSGI;

    // GLX_SGI_video_sync

    REGALGLXGETVIDEOSYNCSGIPROC glXGetVideoSyncSGI;

    REGALGLXWAITVIDEOSYNCSGIPROC glXWaitVideoSyncSGI;

    // GLX_SUN_get_transparent_index

    REGALGLXGETTRANSPARENTINDEXSUNPROC glXGetTransparentIndexSUN;

    // GLX_SUN_video_resize

    REGALGLXGETVIDEORESIZESUNPROC glXGetVideoResizeSUN;

    REGALGLXVIDEORESIZESUNPROC glXVideoResizeSUN;

#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX
    // CGL_VERSION_1_0

    REGALCGLCHOOSEPIXELFORMATPROC CGLChoosePixelFormat;

    REGALCGLCLEARDRAWABLEPROC CGLClearDrawable;

    REGALCGLCOPYCONTEXTPROC CGLCopyContext;

    REGALCGLCREATECONTEXTPROC CGLCreateContext;

    REGALCGLDESCRIBEPIXELFORMATPROC CGLDescribePixelFormat;

    REGALCGLDESCRIBERENDERERPROC CGLDescribeRenderer;

    REGALCGLDESTROYCONTEXTPROC CGLDestroyContext;

    REGALCGLDESTROYPIXELFORMATPROC CGLDestroyPixelFormat;

    REGALCGLDESTROYRENDERERINFOPROC CGLDestroyRendererInfo;

    REGALCGLDISABLEPROC CGLDisable;

    REGALCGLENABLEPROC CGLEnable;

    REGALCGLERRORSTRINGPROC CGLErrorString;

    REGALCGLFLUSHDRAWABLEPROC CGLFlushDrawable;

    REGALCGLGETOFFSCREENPROC CGLGetOffScreen;

    REGALCGLGETOPTIONPROC CGLGetOption;

    REGALCGLGETPARAMETERPROC CGLGetParameter;

    REGALCGLGETVERSIONPROC CGLGetVersion;

    REGALCGLGETVIRTUALSCREENPROC CGLGetVirtualScreen;

    REGALCGLISENABLEDPROC CGLIsEnabled;

    REGALCGLQUERYRENDERERINFOPROC CGLQueryRendererInfo;

    REGALCGLSETFULLSCREENPROC CGLSetFullScreen;

    REGALCGLSETOFFSCREENPROC CGLSetOffScreen;

    REGALCGLSETOPTIONPROC CGLSetOption;

    REGALCGLSETPARAMETERPROC CGLSetParameter;

    REGALCGLSETVIRTUALSCREENPROC CGLSetVirtualScreen;

    // CGL_VERSION_1_1

    REGALCGLCREATEPBUFFERPROC CGLCreatePBuffer;

    REGALCGLDESCRIBEPBUFFERPROC CGLDescribePBuffer;

    REGALCGLDESTROYPBUFFERPROC CGLDestroyPBuffer;

    REGALCGLGETPBUFFERPROC CGLGetPBuffer;

    REGALCGLSETPBUFFERPROC CGLSetPBuffer;

    REGALCGLTEXIMAGEPBUFFERPROC CGLTexImagePBuffer;

    // CGL_VERSION_1_2

    REGALCGLGETCONTEXTRETAINCOUNTPROC CGLGetContextRetainCount;

    REGALCGLGETGLOBALOPTIONPROC CGLGetGlobalOption;

    REGALCGLGETPBUFFERRETAINCOUNTPROC CGLGetPBufferRetainCount;

    REGALCGLGETPIXELFORMATPROC CGLGetPixelFormat;

    REGALCGLGETPIXELFORMATRETAINCOUNTPROC CGLGetPixelFormatRetainCount;

    REGALCGLLOCKCONTEXTPROC CGLLockContext;

    REGALCGLRELEASECONTEXTPROC CGLReleaseContext;

    REGALCGLRELEASEPBUFFERPROC CGLReleasePBuffer;

    REGALCGLRELEASEPIXELFORMATPROC CGLReleasePixelFormat;

    REGALCGLRETAINCONTEXTPROC CGLRetainContext;

    REGALCGLRETAINPBUFFERPROC CGLRetainPBuffer;

    REGALCGLRETAINPIXELFORMATPROC CGLRetainPixelFormat;

    REGALCGLSETGLOBALOPTIONPROC CGLSetGlobalOption;

    REGALCGLUNLOCKCONTEXTPROC CGLUnlockContext;

    // CGL_VERSION_1_3

    REGALCGLGETCURRENTCONTEXTPROC CGLGetCurrentContext;

    REGALCGLGETSHAREGROUPPROC CGLGetShareGroup;

    REGALCGLGETSURFACEPROC CGLGetSurface;

    REGALCGLSETCURRENTCONTEXTPROC CGLSetCurrentContext;

    REGALCGLSETSURFACEPROC CGLSetSurface;

    REGALCGLTEXIMAGEIOSURFACE2DPROC CGLTexImageIOSurface2D;

    REGALCGLUPDATECONTEXTPROC CGLUpdateContext;

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL
    // EGL_ANGLE_query_surface_pointer

    REGALEGLQUERYSURFACEPOINTERANGLEPROC eglQuerySurfacePointerANGLE;

    // EGL_KHR_fence_sync

    REGALEGLCLIENTWAITSYNCKHRPROC eglClientWaitSyncKHR;

    REGALEGLCREATESYNCKHRPROC eglCreateSyncKHR;

    REGALEGLDESTROYSYNCKHRPROC eglDestroySyncKHR;

    REGALEGLGETSYNCATTRIBKHRPROC eglGetSyncAttribKHR;

    // EGL_KHR_image_base

    REGALEGLCREATEIMAGEKHRPROC eglCreateImageKHR;

    REGALEGLDESTROYIMAGEKHRPROC eglDestroyImageKHR;

    // EGL_KHR_lock_surface

    REGALEGLLOCKSURFACEKHRPROC eglLockSurfaceKHR;

    REGALEGLUNLOCKSURFACEKHRPROC eglUnlockSurfaceKHR;

    // EGL_KHR_stream_consumer_gltexture

    REGALEGLSTREAMCONSUMERACQUIREKHRPROC eglStreamConsumerAcquireKHR;

    REGALEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC eglStreamConsumerGLTextureExternalKHR;

    REGALEGLSTREAMCONSUMERRELEASEKHRPROC eglStreamConsumerReleaseKHR;

    // EGL_KHR_stream_cross_process_fd

    REGALEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC eglCreateStreamFromFileDescriptorKHR;

    REGALEGLGETSTREAMFILEDESCRIPTORKHRPROC eglGetStreamFileDescriptorKHR;

    // EGL_KHR_stream_producer_eglsurface

    REGALEGLCREATESTREAMPRODUCERSURFACEKHRPROC eglCreateStreamProducerSurfaceKHR;

    // EGL_KHR_wait_sync

    REGALEGLWAITSYNCKHRPROC eglWaitSyncKHR;

    // EGL_MESA_drm_image

    REGALEGLCREATEDRMIMAGEMESAPROC eglCreateDRMImageMESA;

    REGALEGLEXPORTDRMIMAGEMESAPROC eglExportDRMImageMESA;

    // EGL_NV_coverage_sample

    REGALEGLCOVERAGEMASKNVPROC eglCoverageMaskNV;

    REGALEGLCOVERAGEOPERATIONNVPROC eglCoverageOperationNV;

    // EGL_NV_post_sub_buffer

    REGALEGLPOSTSUBBUFFERNVPROC eglPostSubBufferNV;

    // EGL_NV_sync

    REGALEGLCLIENTWAITSYNCNVPROC eglClientWaitSyncNV;

    REGALEGLCREATEFENCESYNCNVPROC eglCreateFenceSyncNV;

    REGALEGLDESTROYSYNCNVPROC eglDestroySyncNV;

    REGALEGLFENCENVPROC eglFenceNV;

    REGALEGLGETSYNCATTRIBNVPROC eglGetSyncAttribNV;

    REGALEGLSIGNALSYNCNVPROC eglSignalSyncNV;

    // EGL_NV_system_time

    REGALEGLGETSYSTEMTIMEFREQUENCYNVPROC eglGetSystemTimeFrequencyNV;

    REGALEGLGETSYSTEMTIMENVPROC eglGetSystemTimeNV;

    // EGL_VERSION_1_0

    REGALEGLCHOOSECONFIGPROC eglChooseConfig;

    REGALEGLCOPYBUFFERSPROC eglCopyBuffers;

    REGALEGLCREATECONTEXTPROC eglCreateContext;

    REGALEGLCREATEPBUFFERSURFACEPROC eglCreatePbufferSurface;

    REGALEGLCREATEPIXMAPSURFACEPROC eglCreatePixmapSurface;

    REGALEGLCREATEWINDOWSURFACEPROC eglCreateWindowSurface;

    REGALEGLDESTROYCONTEXTPROC eglDestroyContext;

    REGALEGLDESTROYSURFACEPROC eglDestroySurface;

    REGALEGLGETCONFIGATTRIBPROC eglGetConfigAttrib;

    REGALEGLGETCONFIGSPROC eglGetConfigs;

    REGALEGLGETCURRENTCONTEXTPROC eglGetCurrentContext;

    REGALEGLGETCURRENTDISPLAYPROC eglGetCurrentDisplay;

    REGALEGLGETCURRENTSURFACEPROC eglGetCurrentSurface;

    REGALEGLGETDISPLAYPROC eglGetDisplay;

    REGALEGLGETERRORPROC eglGetError;

    REGALEGLGETPROCADDRESSPROC eglGetProcAddress;

    REGALEGLINITIALIZEPROC eglInitialize;

    REGALEGLMAKECURRENTPROC eglMakeCurrent;

    REGALEGLQUERYCONTEXTPROC eglQueryContext;

    REGALEGLQUERYSTRINGPROC eglQueryString;

    REGALEGLQUERYSURFACEPROC eglQuerySurface;

    REGALEGLSWAPBUFFERSPROC eglSwapBuffers;

    REGALEGLTERMINATEPROC eglTerminate;

    REGALEGLWAITGLPROC eglWaitGL;

    REGALEGLWAITNATIVEPROC eglWaitNative;

    // EGL_VERSION_1_1

    REGALEGLBINDTEXIMAGEPROC eglBindTexImage;

    REGALEGLRELEASETEXIMAGEPROC eglReleaseTexImage;

    // EGL_VERSION_1_2

    REGALEGLBINDAPIPROC eglBindAPI;

    REGALEGLCREATEPBUFFERFROMCLIENTBUFFERPROC eglCreatePbufferFromClientBuffer;

    REGALEGLQUERYAPIPROC eglQueryAPI;

    REGALEGLRELEASETHREADPROC eglReleaseThread;

    REGALEGLSURFACEATTRIBPROC eglSurfaceAttrib;

    REGALEGLSWAPINTERVALPROC eglSwapInterval;

    REGALEGLWAITCLIENTPROC eglWaitClient;

#endif // REGAL_SYS_EGL

  };

}

extern Dispatch::Global dispatchGlobal;

REGAL_NAMESPACE_END

#endif // __REGAL_DISPATCH_GLOBAL_H__
