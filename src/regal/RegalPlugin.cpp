/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#define REGAL_PLUGIN_MODE 1

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#if REGAL_PLUGIN

#include "RegalContext.h"
#include "RegalDispatch.h"
#include "RegalDispatcher.h"

extern "C" {

  /* GL_VERSION_1_0 */

  void REGAL_CALL plugin_glAccum(GLenum op, GLfloat value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAccum)(op, value);
  }

  void REGAL_CALL plugin_glAlphaFunc(GLenum func, GLclampf ref)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFunc)(func, ref);
  }

  void REGAL_CALL plugin_glBegin(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBegin)(mode);
  }

  void REGAL_CALL plugin_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBitmap)(width, height, xorig, yorig, xmove, ymove, bitmap);
  }

  void REGAL_CALL plugin_glBlendFunc(GLenum sfactor, GLenum dfactor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFunc)(sfactor, dfactor);
  }

  void REGAL_CALL plugin_glCallList(GLuint list)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCallList)(list);
  }

  void REGAL_CALL plugin_glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCallLists)(n, type, lists);
  }

  void REGAL_CALL plugin_glClear(GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClear)(mask);
  }

  void REGAL_CALL plugin_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearAccum)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearColor)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glClearDepth(GLclampd depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearDepth)(depth);
  }

  void REGAL_CALL plugin_glClearIndex(GLfloat c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearIndex)(c);
  }

  void REGAL_CALL plugin_glClearStencil(GLint s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearStencil)(s);
  }

  void REGAL_CALL plugin_glClipPlane(GLenum plane, const GLdouble *equation)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClipPlane)(plane, equation);
  }

  void REGAL_CALL plugin_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3b)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3bv(const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3bv)(v);
  }

  void REGAL_CALL plugin_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3d)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3dv)(v);
  }

  void REGAL_CALL plugin_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3f)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3fv)(v);
  }

  void REGAL_CALL plugin_glColor3i(GLint red, GLint green, GLint blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3i)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3iv)(v);
  }

  void REGAL_CALL plugin_glColor3s(GLshort red, GLshort green, GLshort blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3s)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3sv)(v);
  }

  void REGAL_CALL plugin_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3ub)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3ubv(const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3ubv)(v);
  }

  void REGAL_CALL plugin_glColor3ui(GLuint red, GLuint green, GLuint blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3ui)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3uiv(const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3uiv)(v);
  }

  void REGAL_CALL plugin_glColor3us(GLushort red, GLushort green, GLushort blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3us)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3usv(const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3usv)(v);
  }

  void REGAL_CALL plugin_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4b)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4bv(const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4bv)(v);
  }

  void REGAL_CALL plugin_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4d)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4dv)(v);
  }

  void REGAL_CALL plugin_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4f)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4fv)(v);
  }

  void REGAL_CALL plugin_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4i)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4iv)(v);
  }

  void REGAL_CALL plugin_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4s)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4sv)(v);
  }

  void REGAL_CALL plugin_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4ub)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4ubv(const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubv)(v);
  }

  void REGAL_CALL plugin_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4ui)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4uiv(const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4uiv)(v);
  }

  void REGAL_CALL plugin_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4us)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4usv(const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4usv)(v);
  }

  void REGAL_CALL plugin_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorMask)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColorMaterial(GLenum face, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorMaterial)(face, mode);
  }

  void REGAL_CALL plugin_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyPixels)(x, y, width, height, type);
  }

  void REGAL_CALL plugin_glCullFace(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCullFace)(mode);
  }

  void REGAL_CALL plugin_glDeleteLists(GLuint list, GLsizei range)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteLists)(list, range);
  }

  void REGAL_CALL plugin_glDepthFunc(GLenum func)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthFunc)(func);
  }

  void REGAL_CALL plugin_glDepthMask(GLboolean flag)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthMask)(flag);
  }

  void REGAL_CALL plugin_glDepthRange(GLclampd zNear, GLclampd zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthRange)(zNear, zFar);
  }

  void REGAL_CALL plugin_glDisable(GLenum cap)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisable)(cap);
  }

  void REGAL_CALL plugin_glDrawBuffer(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffer)(mode);
  }

  void REGAL_CALL plugin_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawPixels)(width, height, format, type, pixels);
  }

  void REGAL_CALL plugin_glEdgeFlag(GLboolean flag)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlag)(flag);
  }

  void REGAL_CALL plugin_glEdgeFlagv(const GLboolean *flag)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagv)(flag);
  }

  void REGAL_CALL plugin_glEnable(GLenum cap)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnable)(cap);
  }

  void REGAL_CALL plugin_glEnd(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnd)();
  }

  void REGAL_CALL plugin_glEndList(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndList)();
  }

  void REGAL_CALL plugin_glEvalCoord1d(GLdouble u)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1d)(u);
  }

  void REGAL_CALL plugin_glEvalCoord1dv(const GLdouble *u)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1dv)(u);
  }

  void REGAL_CALL plugin_glEvalCoord1f(GLfloat u)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1f)(u);
  }

  void REGAL_CALL plugin_glEvalCoord1fv(const GLfloat *u)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1fv)(u);
  }

  void REGAL_CALL plugin_glEvalCoord2d(GLdouble u, GLdouble v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2d)(u, v);
  }

  void REGAL_CALL plugin_glEvalCoord2dv(const GLdouble *u)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2dv)(u);
  }

  void REGAL_CALL plugin_glEvalCoord2f(GLfloat u, GLfloat v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2f)(u, v);
  }

  void REGAL_CALL plugin_glEvalCoord2fv(const GLfloat *u)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2fv)(u);
  }

  void REGAL_CALL plugin_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalMesh1)(mode, i1, i2);
  }

  void REGAL_CALL plugin_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalMesh2)(mode, i1, i2, j1, j2);
  }

  void REGAL_CALL plugin_glEvalPoint1(GLint i)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalPoint1)(i);
  }

  void REGAL_CALL plugin_glEvalPoint2(GLint i, GLint j)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalPoint2)(i, j);
  }

  void REGAL_CALL plugin_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFeedbackBuffer)(size, type, buffer);
  }

  void REGAL_CALL plugin_glFinish(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFinish)();
  }

  void REGAL_CALL plugin_glFlush(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlush)();
  }

  void REGAL_CALL plugin_glFogf(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogf)(pname, param);
  }

  void REGAL_CALL plugin_glFogfv(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogfv)(pname, params);
  }

  void REGAL_CALL plugin_glFogi(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogi)(pname, param);
  }

  void REGAL_CALL plugin_glFogiv(GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogiv)(pname, params);
  }

  void REGAL_CALL plugin_glFrontFace(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFrontFace)(mode);
  }

  void REGAL_CALL plugin_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFrustum)(left, right, bottom, top, zNear, zFar);
  }

  GLuint REGAL_CALL plugin_glGenLists(GLsizei range)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGenLists)(range);
  }

  void REGAL_CALL plugin_glGetBooleanv(GLenum pname, GLboolean *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBooleanv)(pname, params);
  }

  void REGAL_CALL plugin_glGetClipPlane(GLenum plane, GLdouble *equation)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlane)(plane, equation);
  }

  void REGAL_CALL plugin_glGetDoublev(GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetDoublev)(pname, params);
  }

  GLenum REGAL_CALL plugin_glGetError(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetError)();
  }

  void REGAL_CALL plugin_glGetFloatv(GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFloatv)(pname, params);
  }

  void REGAL_CALL plugin_glGetIntegerv(GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerv)(pname, params);
  }

  void REGAL_CALL plugin_glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetLightfv)(light, pname, params);
  }

  void REGAL_CALL plugin_glGetLightiv(GLenum light, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetLightiv)(light, pname, params);
  }

  void REGAL_CALL plugin_glGetMapdv(GLenum target, GLenum query, GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMapdv)(target, query, v);
  }

  void REGAL_CALL plugin_glGetMapfv(GLenum target, GLenum query, GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMapfv)(target, query, v);
  }

  void REGAL_CALL plugin_glGetMapiv(GLenum target, GLenum query, GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMapiv)(target, query, v);
  }

  void REGAL_CALL plugin_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMaterialfv)(face, pname, params);
  }

  void REGAL_CALL plugin_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMaterialiv)(face, pname, params);
  }

  void REGAL_CALL plugin_glGetPixelMapfv(GLenum map, GLfloat *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapfv)(map, values);
  }

  void REGAL_CALL plugin_glGetPixelMapuiv(GLenum map, GLuint *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapuiv)(map, values);
  }

  void REGAL_CALL plugin_glGetPixelMapusv(GLenum map, GLushort *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapusv)(map, values);
  }

  void REGAL_CALL plugin_glGetPolygonStipple(GLubyte *mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPolygonStipple)(mask);
  }

  const GLubyte *REGAL_CALL plugin_glGetString(GLenum name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetString)(name);
  }

  void REGAL_CALL plugin_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexEnvfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexEnviv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGendv)(coord, pname, params);
  }

  void REGAL_CALL plugin_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenfv)(coord, pname, params);
  }

  void REGAL_CALL plugin_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGeniv)(coord, pname, params);
  }

  void REGAL_CALL plugin_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexImage)(target, level, format, type, pixels);
  }

  void REGAL_CALL plugin_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexLevelParameterfv)(target, level, pname, params);
  }

  void REGAL_CALL plugin_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexLevelParameteriv)(target, level, pname, params);
  }

  void REGAL_CALL plugin_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glHint(GLenum target, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glHint)(target, mode);
  }

  void REGAL_CALL plugin_glIndexMask(GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexMask)(mask);
  }

  void REGAL_CALL plugin_glIndexd(GLdouble c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexd)(c);
  }

  void REGAL_CALL plugin_glIndexdv(const GLdouble *c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexdv)(c);
  }

  void REGAL_CALL plugin_glIndexf(GLfloat c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexf)(c);
  }

  void REGAL_CALL plugin_glIndexfv(const GLfloat *c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexfv)(c);
  }

  void REGAL_CALL plugin_glIndexi(GLint c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexi)(c);
  }

  void REGAL_CALL plugin_glIndexiv(const GLint *c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexiv)(c);
  }

  void REGAL_CALL plugin_glIndexs(GLshort c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexs)(c);
  }

  void REGAL_CALL plugin_glIndexsv(const GLshort *c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexsv)(c);
  }

  void REGAL_CALL plugin_glInitNames(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInitNames)();
  }

  GLboolean REGAL_CALL plugin_glIsEnabled(GLenum cap)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsEnabled)(cap);
  }

  GLboolean REGAL_CALL plugin_glIsList(GLuint list)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsList)(list);
  }

  void REGAL_CALL plugin_glLightModelf(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightModelf)(pname, param);
  }

  void REGAL_CALL plugin_glLightModelfv(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightModelfv)(pname, params);
  }

  void REGAL_CALL plugin_glLightModeli(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightModeli)(pname, param);
  }

  void REGAL_CALL plugin_glLightModeliv(GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightModeliv)(pname, params);
  }

  void REGAL_CALL plugin_glLightf(GLenum light, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightf)(light, pname, param);
  }

  void REGAL_CALL plugin_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightfv)(light, pname, params);
  }

  void REGAL_CALL plugin_glLighti(GLenum light, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLighti)(light, pname, param);
  }

  void REGAL_CALL plugin_glLightiv(GLenum light, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightiv)(light, pname, params);
  }

  void REGAL_CALL plugin_glLineStipple(GLint factor, GLushort pattern)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLineStipple)(factor, pattern);
  }

  void REGAL_CALL plugin_glLineWidth(GLfloat width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLineWidth)(width);
  }

  void REGAL_CALL plugin_glListBase(GLuint base)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glListBase)(base);
  }

  void REGAL_CALL plugin_glLoadIdentity(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadIdentity)();
  }

  void REGAL_CALL plugin_glLoadMatrixd(const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadMatrixd)(m);
  }

  void REGAL_CALL plugin_glLoadMatrixf(const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadMatrixf)(m);
  }

  void REGAL_CALL plugin_glLoadName(GLuint name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadName)(name);
  }

  void REGAL_CALL plugin_glLogicOp(GLenum opcode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLogicOp)(opcode);
  }

  void REGAL_CALL plugin_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMap1d)(target, u1, u2, stride, order, points);
  }

  void REGAL_CALL plugin_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMap1f)(target, u1, u2, stride, order, points);
  }

  void REGAL_CALL plugin_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMap2d)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }

  void REGAL_CALL plugin_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMap2f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }

  void REGAL_CALL plugin_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapGrid1d)(un, u1, u2);
  }

  void REGAL_CALL plugin_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapGrid1f)(un, u1, u2);
  }

  void REGAL_CALL plugin_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapGrid2d)(un, u1, u2, vn, v1, v2);
  }

  void REGAL_CALL plugin_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapGrid2f)(un, u1, u2, vn, v1, v2);
  }

  void REGAL_CALL plugin_glMaterialf(GLenum face, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMaterialf)(face, pname, param);
  }

  void REGAL_CALL plugin_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMaterialfv)(face, pname, params);
  }

  void REGAL_CALL plugin_glMateriali(GLenum face, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMateriali)(face, pname, param);
  }

  void REGAL_CALL plugin_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMaterialiv)(face, pname, params);
  }

  void REGAL_CALL plugin_glMatrixMode(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMode)(mode);
  }

  void REGAL_CALL plugin_glMultMatrixd(const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultMatrixd)(m);
  }

  void REGAL_CALL plugin_glMultMatrixf(const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultMatrixf)(m);
  }

  void REGAL_CALL plugin_glNewList(GLuint list, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNewList)(list, mode);
  }

  void REGAL_CALL plugin_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3b)(nx, ny, nz);
  }

  void REGAL_CALL plugin_glNormal3bv(const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3bv)(v);
  }

  void REGAL_CALL plugin_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3d)(nx, ny, nz);
  }

  void REGAL_CALL plugin_glNormal3dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3dv)(v);
  }

  void REGAL_CALL plugin_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3f)(nx, ny, nz);
  }

  void REGAL_CALL plugin_glNormal3fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3fv)(v);
  }

  void REGAL_CALL plugin_glNormal3i(GLint nx, GLint ny, GLint nz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3i)(nx, ny, nz);
  }

  void REGAL_CALL plugin_glNormal3iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3iv)(v);
  }

  void REGAL_CALL plugin_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3s)(nx, ny, nz);
  }

  void REGAL_CALL plugin_glNormal3sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3sv)(v);
  }

  void REGAL_CALL plugin_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glOrtho)(left, right, bottom, top, zNear, zFar);
  }

  void REGAL_CALL plugin_glPassThrough(GLfloat token)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPassThrough)(token);
  }

  void REGAL_CALL plugin_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelMapfv)(map, mapsize, values);
  }

  void REGAL_CALL plugin_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelMapuiv)(map, mapsize, values);
  }

  void REGAL_CALL plugin_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelMapusv)(map, mapsize, values);
  }

  void REGAL_CALL plugin_glPixelStoref(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelStoref)(pname, param);
  }

  void REGAL_CALL plugin_glPixelStorei(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelStorei)(pname, param);
  }

  void REGAL_CALL plugin_glPixelTransferf(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransferf)(pname, param);
  }

  void REGAL_CALL plugin_glPixelTransferi(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransferi)(pname, param);
  }

  void REGAL_CALL plugin_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelZoom)(xfactor, yfactor);
  }

  void REGAL_CALL plugin_glPointSize(GLfloat size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointSize)(size);
  }

  void REGAL_CALL plugin_glPolygonMode(GLenum face, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPolygonMode)(face, mode);
  }

  void REGAL_CALL plugin_glPolygonStipple(const GLubyte *mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPolygonStipple)(mask);
  }

  void REGAL_CALL plugin_glPopAttrib(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPopAttrib)();
  }

  void REGAL_CALL plugin_glPopMatrix(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPopMatrix)();
  }

  void REGAL_CALL plugin_glPopName(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPopName)();
  }

  void REGAL_CALL plugin_glPushAttrib(GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPushAttrib)(mask);
  }

  void REGAL_CALL plugin_glPushMatrix(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPushMatrix)();
  }

  void REGAL_CALL plugin_glPushName(GLuint name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPushName)(name);
  }

  void REGAL_CALL plugin_glRasterPos2d(GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2d)(x, y);
  }

  void REGAL_CALL plugin_glRasterPos2dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2dv)(v);
  }

  void REGAL_CALL plugin_glRasterPos2f(GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2f)(x, y);
  }

  void REGAL_CALL plugin_glRasterPos2fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2fv)(v);
  }

  void REGAL_CALL plugin_glRasterPos2i(GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2i)(x, y);
  }

  void REGAL_CALL plugin_glRasterPos2iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2iv)(v);
  }

  void REGAL_CALL plugin_glRasterPos2s(GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2s)(x, y);
  }

  void REGAL_CALL plugin_glRasterPos2sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2sv)(v);
  }

  void REGAL_CALL plugin_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3d)(x, y, z);
  }

  void REGAL_CALL plugin_glRasterPos3dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3dv)(v);
  }

  void REGAL_CALL plugin_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3f)(x, y, z);
  }

  void REGAL_CALL plugin_glRasterPos3fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3fv)(v);
  }

  void REGAL_CALL plugin_glRasterPos3i(GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3i)(x, y, z);
  }

  void REGAL_CALL plugin_glRasterPos3iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3iv)(v);
  }

  void REGAL_CALL plugin_glRasterPos3s(GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3s)(x, y, z);
  }

  void REGAL_CALL plugin_glRasterPos3sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3sv)(v);
  }

  void REGAL_CALL plugin_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4d)(x, y, z, w);
  }

  void REGAL_CALL plugin_glRasterPos4dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4dv)(v);
  }

  void REGAL_CALL plugin_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4f)(x, y, z, w);
  }

  void REGAL_CALL plugin_glRasterPos4fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4fv)(v);
  }

  void REGAL_CALL plugin_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4i)(x, y, z, w);
  }

  void REGAL_CALL plugin_glRasterPos4iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4iv)(v);
  }

  void REGAL_CALL plugin_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4s)(x, y, z, w);
  }

  void REGAL_CALL plugin_glRasterPos4sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4sv)(v);
  }

  void REGAL_CALL plugin_glReadBuffer(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadBuffer)(mode);
  }

  void REGAL_CALL plugin_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadPixels)(x, y, width, height, format, type, pixels);
  }

  void REGAL_CALL plugin_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRectd)(x1, y1, x2, y2);
  }

  void REGAL_CALL plugin_glRectdv(const GLdouble *v1, const GLdouble *v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRectdv)(v1, v2);
  }

  void REGAL_CALL plugin_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRectf)(x1, y1, x2, y2);
  }

  void REGAL_CALL plugin_glRectfv(const GLfloat *v1, const GLfloat *v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRectfv)(v1, v2);
  }

  void REGAL_CALL plugin_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRecti)(x1, y1, x2, y2);
  }

  void REGAL_CALL plugin_glRectiv(const GLint *v1, const GLint *v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRectiv)(v1, v2);
  }

  void REGAL_CALL plugin_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRects)(x1, y1, x2, y2);
  }

  void REGAL_CALL plugin_glRectsv(const GLshort *v1, const GLshort *v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRectsv)(v1, v2);
  }

  GLint REGAL_CALL plugin_glRenderMode(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glRenderMode)(mode);
  }

  void REGAL_CALL plugin_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRotated)(angle, x, y, z);
  }

  void REGAL_CALL plugin_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRotatef)(angle, x, y, z);
  }

  void REGAL_CALL plugin_glScaled(GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glScaled)(x, y, z);
  }

  void REGAL_CALL plugin_glScalef(GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glScalef)(x, y, z);
  }

  void REGAL_CALL plugin_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glScissor)(x, y, width, height);
  }

  void REGAL_CALL plugin_glSelectBuffer(GLsizei size, GLuint *buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSelectBuffer)(size, buffer);
  }

  void REGAL_CALL plugin_glShadeModel(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glShadeModel)(mode);
  }

  void REGAL_CALL plugin_glStencilFunc(GLenum func, GLint ref, GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilFunc)(func, ref, mask);
  }

  void REGAL_CALL plugin_glStencilMask(GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilMask)(mask);
  }

  void REGAL_CALL plugin_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilOp)(fail, zfail, zpass);
  }

  void REGAL_CALL plugin_glTexCoord1d(GLdouble s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1d)(s);
  }

  void REGAL_CALL plugin_glTexCoord1dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1dv)(v);
  }

  void REGAL_CALL plugin_glTexCoord1f(GLfloat s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1f)(s);
  }

  void REGAL_CALL plugin_glTexCoord1fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1fv)(v);
  }

  void REGAL_CALL plugin_glTexCoord1i(GLint s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1i)(s);
  }

  void REGAL_CALL plugin_glTexCoord1iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1iv)(v);
  }

  void REGAL_CALL plugin_glTexCoord1s(GLshort s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1s)(s);
  }

  void REGAL_CALL plugin_glTexCoord1sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1sv)(v);
  }

  void REGAL_CALL plugin_glTexCoord2d(GLdouble s, GLdouble t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2d)(s, t);
  }

  void REGAL_CALL plugin_glTexCoord2dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2dv)(v);
  }

  void REGAL_CALL plugin_glTexCoord2f(GLfloat s, GLfloat t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2f)(s, t);
  }

  void REGAL_CALL plugin_glTexCoord2fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fv)(v);
  }

  void REGAL_CALL plugin_glTexCoord2i(GLint s, GLint t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2i)(s, t);
  }

  void REGAL_CALL plugin_glTexCoord2iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2iv)(v);
  }

  void REGAL_CALL plugin_glTexCoord2s(GLshort s, GLshort t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2s)(s, t);
  }

  void REGAL_CALL plugin_glTexCoord2sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2sv)(v);
  }

  void REGAL_CALL plugin_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3d)(s, t, r);
  }

  void REGAL_CALL plugin_glTexCoord3dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3dv)(v);
  }

  void REGAL_CALL plugin_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3f)(s, t, r);
  }

  void REGAL_CALL plugin_glTexCoord3fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3fv)(v);
  }

  void REGAL_CALL plugin_glTexCoord3i(GLint s, GLint t, GLint r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3i)(s, t, r);
  }

  void REGAL_CALL plugin_glTexCoord3iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3iv)(v);
  }

  void REGAL_CALL plugin_glTexCoord3s(GLshort s, GLshort t, GLshort r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3s)(s, t, r);
  }

  void REGAL_CALL plugin_glTexCoord3sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3sv)(v);
  }

  void REGAL_CALL plugin_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4d)(s, t, r, q);
  }

  void REGAL_CALL plugin_glTexCoord4dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4dv)(v);
  }

  void REGAL_CALL plugin_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4f)(s, t, r, q);
  }

  void REGAL_CALL plugin_glTexCoord4fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fv)(v);
  }

  void REGAL_CALL plugin_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4i)(s, t, r, q);
  }

  void REGAL_CALL plugin_glTexCoord4iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4iv)(v);
  }

  void REGAL_CALL plugin_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4s)(s, t, r, q);
  }

  void REGAL_CALL plugin_glTexCoord4sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4sv)(v);
  }

  void REGAL_CALL plugin_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexEnvf)(target, pname, param);
  }

  void REGAL_CALL plugin_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexEnvfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glTexEnvi(GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexEnvi)(target, pname, param);
  }

  void REGAL_CALL plugin_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexEnviv)(target, pname, params);
  }

  void REGAL_CALL plugin_glTexGend(GLenum coord, GLenum pname, GLdouble param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGend)(coord, pname, param);
  }

  void REGAL_CALL plugin_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGendv)(coord, pname, params);
  }

  void REGAL_CALL plugin_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGenf)(coord, pname, param);
  }

  void REGAL_CALL plugin_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGenfv)(coord, pname, params);
  }

  void REGAL_CALL plugin_glTexGeni(GLenum coord, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGeni)(coord, pname, param);
  }

  void REGAL_CALL plugin_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGeniv)(coord, pname, params);
  }

  void REGAL_CALL plugin_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage1D)(target, level, internalformat, width, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage2D)(target, level, internalformat, width, height, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterf)(target, pname, param);
  }

  void REGAL_CALL plugin_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glTexParameteri(GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameteri)(target, pname, param);
  }

  void REGAL_CALL plugin_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glTranslated(GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTranslated)(x, y, z);
  }

  void REGAL_CALL plugin_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTranslatef)(x, y, z);
  }

  void REGAL_CALL plugin_glVertex2d(GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2d)(x, y);
  }

  void REGAL_CALL plugin_glVertex2dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2dv)(v);
  }

  void REGAL_CALL plugin_glVertex2f(GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2f)(x, y);
  }

  void REGAL_CALL plugin_glVertex2fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2fv)(v);
  }

  void REGAL_CALL plugin_glVertex2i(GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2i)(x, y);
  }

  void REGAL_CALL plugin_glVertex2iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2iv)(v);
  }

  void REGAL_CALL plugin_glVertex2s(GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2s)(x, y);
  }

  void REGAL_CALL plugin_glVertex2sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2sv)(v);
  }

  void REGAL_CALL plugin_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3d)(x, y, z);
  }

  void REGAL_CALL plugin_glVertex3dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3dv)(v);
  }

  void REGAL_CALL plugin_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3f)(x, y, z);
  }

  void REGAL_CALL plugin_glVertex3fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3fv)(v);
  }

  void REGAL_CALL plugin_glVertex3i(GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3i)(x, y, z);
  }

  void REGAL_CALL plugin_glVertex3iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3iv)(v);
  }

  void REGAL_CALL plugin_glVertex3s(GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3s)(x, y, z);
  }

  void REGAL_CALL plugin_glVertex3sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3sv)(v);
  }

  void REGAL_CALL plugin_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4d)(x, y, z, w);
  }

  void REGAL_CALL plugin_glVertex4dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4dv)(v);
  }

  void REGAL_CALL plugin_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4f)(x, y, z, w);
  }

  void REGAL_CALL plugin_glVertex4fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4fv)(v);
  }

  void REGAL_CALL plugin_glVertex4i(GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4i)(x, y, z, w);
  }

  void REGAL_CALL plugin_glVertex4iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4iv)(v);
  }

  void REGAL_CALL plugin_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4s)(x, y, z, w);
  }

  void REGAL_CALL plugin_glVertex4sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4sv)(v);
  }

  void REGAL_CALL plugin_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glViewport)(x, y, width, height);
  }

  /* GL_VERSION_1_1 */

  GLboolean REGAL_CALL plugin_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glAreTexturesResident)(n, textures, residences);
  }

  void REGAL_CALL plugin_glArrayElement(GLint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glArrayElement)(index);
  }

  void REGAL_CALL plugin_glBindTexture(GLenum target, GLuint texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindTexture)(target, texture);
  }

  void REGAL_CALL plugin_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorPointer)(size, type, stride, pointer);
  }

  void REGAL_CALL plugin_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage1D)(target, level, internalformat, x, y, width, border);
  }

  void REGAL_CALL plugin_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage2D)(target, level, internalformat, x, y, width, height, border);
  }

  void REGAL_CALL plugin_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage1D)(target, level, xoffset, x, y, width);
  }

  void REGAL_CALL plugin_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage2D)(target, level, xoffset, yoffset, x, y, width, height);
  }

  void REGAL_CALL plugin_glDeleteTextures(GLsizei n, const GLuint *textures)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteTextures)(n, textures);
  }

  void REGAL_CALL plugin_glDisableClientState(GLenum cap)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableClientState)(cap);
  }

  void REGAL_CALL plugin_glDrawArrays(GLenum mode, GLint first, GLsizei count)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawArrays)(mode, first, count);
  }

  void REGAL_CALL plugin_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElements)(mode, count, type, indices);
  }

  void REGAL_CALL plugin_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointer)(stride, pointer);
  }

  void REGAL_CALL plugin_glEnableClientState(GLenum cap)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableClientState)(cap);
  }

  void REGAL_CALL plugin_glGenTextures(GLsizei n, GLuint *textures)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenTextures)(n, textures);
  }

  void REGAL_CALL plugin_glGetPointerv(GLenum pname, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPointerv)(pname, params);
  }

  void REGAL_CALL plugin_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexPointer)(type, stride, pointer);
  }

  void REGAL_CALL plugin_glIndexub(GLubyte c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexub)(c);
  }

  void REGAL_CALL plugin_glIndexubv(const GLubyte *c)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexubv)(c);
  }

  void REGAL_CALL plugin_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInterleavedArrays)(format, stride, pointer);
  }

  GLboolean REGAL_CALL plugin_glIsTexture(GLuint texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsTexture)(texture);
  }

  void REGAL_CALL plugin_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalPointer)(type, stride, pointer);
  }

  void REGAL_CALL plugin_glPolygonOffset(GLfloat factor, GLfloat units)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPolygonOffset)(factor, units);
  }

  void REGAL_CALL plugin_glPopClientAttrib(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPopClientAttrib)();
  }

  void REGAL_CALL plugin_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPrioritizeTextures)(n, textures, priorities);
  }

  void REGAL_CALL plugin_glPushClientAttrib(GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPushClientAttrib)(mask);
  }

  void REGAL_CALL plugin_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointer)(size, type, stride, pointer);
  }

  void REGAL_CALL plugin_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage1D)(target, level, xoffset, width, format, type, pixels);
  }

  void REGAL_CALL plugin_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, type, pixels);
  }

  void REGAL_CALL plugin_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexPointer)(size, type, stride, pointer);
  }

  /* GL_VERSION_1_2 */

  void REGAL_CALL plugin_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendColor)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glBlendEquation(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquation)(mode);
  }

  void REGAL_CALL plugin_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  void REGAL_CALL plugin_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElements)(mode, start, end, count, type, indices);
  }

  void REGAL_CALL plugin_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

  /* GL_VERSION_1_3 */

  void REGAL_CALL plugin_glActiveTexture(GLenum texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glActiveTexture)(texture);
  }

  void REGAL_CALL plugin_glClientActiveTexture(GLenum texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClientActiveTexture)(texture);
  }

  void REGAL_CALL plugin_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }

  void REGAL_CALL plugin_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTexImage)(target, lod, img);
  }

  void REGAL_CALL plugin_glLoadTransposeMatrixd(const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixd)(m);
  }

  void REGAL_CALL plugin_glLoadTransposeMatrixf(const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixf)(m);
  }

  void REGAL_CALL plugin_glMultTransposeMatrixd(const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixd)(m);
  }

  void REGAL_CALL plugin_glMultTransposeMatrixf(const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixf)(m);
  }

  void REGAL_CALL plugin_glMultiTexCoord1d(GLenum target, GLdouble s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1d)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord1f(GLenum target, GLfloat s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1f)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord1i(GLenum target, GLint s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1i)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1iv(GLenum target, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1iv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord1s(GLenum target, GLshort s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1s)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1sv(GLenum target, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1sv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2d)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2f)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2i)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2iv(GLenum target, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2iv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2s)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2sv(GLenum target, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2sv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3d)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3f)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3i)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3iv(GLenum target, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3iv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3s)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3sv(GLenum target, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3sv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4d)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4f)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4i)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4iv(GLenum target, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4iv)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4s)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4sv(GLenum target, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4sv)(target, v);
  }

  void REGAL_CALL plugin_glSampleCoverage(GLclampf value, GLboolean invert)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSampleCoverage)(value, invert);
  }

  /* GL_VERSION_1_4 */

  void REGAL_CALL plugin_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }

  void REGAL_CALL plugin_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointer)(type, stride, pointer);
  }

  void REGAL_CALL plugin_glFogCoordd(GLdouble coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordd)(coord);
  }

  void REGAL_CALL plugin_glFogCoorddv(const GLdouble *coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddv)(coord);
  }

  void REGAL_CALL plugin_glFogCoordf(GLfloat coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordf)(coord);
  }

  void REGAL_CALL plugin_glFogCoordfv(const GLfloat *coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfv)(coord);
  }

  void REGAL_CALL plugin_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArrays)(mode, first, count, primcount);
  }

  void REGAL_CALL plugin_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElements)(mode, count, type, indices, primcount);
  }

  void REGAL_CALL plugin_glPointParameterf(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterf)(pname, param);
  }

  void REGAL_CALL plugin_glPointParameterfv(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfv)(pname, params);
  }

  void REGAL_CALL plugin_glPointParameteri(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameteri)(pname, param);
  }

  void REGAL_CALL plugin_glPointParameteriv(GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameteriv)(pname, params);
  }

  void REGAL_CALL plugin_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3b)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3bv(const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bv)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3d)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3dv(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dv)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3f)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3fv(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fv)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3i(GLint red, GLint green, GLint blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3i)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3iv(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3iv)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3s)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3sv(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3sv)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ub)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3ubv(const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubv)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ui)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3uiv(const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uiv)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3us)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3usv(const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usv)(v);
  }

  void REGAL_CALL plugin_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointer)(size, type, stride, pointer);
  }

  void REGAL_CALL plugin_glWindowPos2d(GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2d)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2dv(const GLdouble *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dv)(p);
  }

  void REGAL_CALL plugin_glWindowPos2f(GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2f)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2fv(const GLfloat *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fv)(p);
  }

  void REGAL_CALL plugin_glWindowPos2i(GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2i)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2iv(const GLint *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iv)(p);
  }

  void REGAL_CALL plugin_glWindowPos2s(GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2s)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2sv(const GLshort *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sv)(p);
  }

  void REGAL_CALL plugin_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3d)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3dv(const GLdouble *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dv)(p);
  }

  void REGAL_CALL plugin_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3f)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3fv(const GLfloat *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fv)(p);
  }

  void REGAL_CALL plugin_glWindowPos3i(GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3i)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3iv(const GLint *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iv)(p);
  }

  void REGAL_CALL plugin_glWindowPos3s(GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3s)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3sv(const GLshort *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sv)(p);
  }

  /* GL_VERSION_1_5 */

  void REGAL_CALL plugin_glBeginQuery(GLenum target, GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginQuery)(target, id);
  }

  void REGAL_CALL plugin_glBindBuffer(GLenum target, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBuffer)(target, buffer);
  }

  void REGAL_CALL plugin_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBufferData)(target, size, data, usage);
  }

  void REGAL_CALL plugin_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBufferSubData)(target, offset, size, data);
  }

  void REGAL_CALL plugin_glDeleteBuffers(GLsizei n, const GLuint *buffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteBuffers)(n, buffers);
  }

  void REGAL_CALL plugin_glDeleteQueries(GLsizei n, const GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueries)(n, ids);
  }

  void REGAL_CALL plugin_glEndQuery(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndQuery)(target);
  }

  void REGAL_CALL plugin_glGenBuffers(GLsizei n, GLuint *buffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenBuffers)(n, buffers);
  }

  void REGAL_CALL plugin_glGenQueries(GLsizei n, GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenQueries)(n, ids);
  }

  void REGAL_CALL plugin_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointerv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferSubData)(target, offset, size, data);
  }

  void REGAL_CALL plugin_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectiv)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuiv)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetQueryiv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryiv)(target, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsBuffer(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsBuffer)(buffer);
  }

  GLboolean REGAL_CALL plugin_glIsQuery(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsQuery)(id);
  }

  GLvoid *REGAL_CALL plugin_glMapBuffer(GLenum target, GLenum access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glMapBuffer)(target, access);
  }

  GLboolean REGAL_CALL plugin_glUnmapBuffer(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glUnmapBuffer)(target);
  }

  /* GL_VERSION_2_0 */

  void REGAL_CALL plugin_glAttachShader(GLuint program, GLuint shader)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAttachShader)(program, shader);
  }

  void REGAL_CALL plugin_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindAttribLocation)(program, index, name);
  }

  void REGAL_CALL plugin_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparate)(modeRGB, modeAlpha);
  }

  void REGAL_CALL plugin_glCompileShader(GLuint shader)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompileShader)(shader);
  }

  GLuint REGAL_CALL plugin_glCreateProgram(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCreateProgram)();
  }

  GLuint REGAL_CALL plugin_glCreateShader(GLenum type)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCreateShader)(type);
  }

  void REGAL_CALL plugin_glDeleteProgram(GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgram)(program);
  }

  void REGAL_CALL plugin_glDeleteShader(GLuint shader)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteShader)(shader);
  }

  void REGAL_CALL plugin_glDetachShader(GLuint program, GLuint shader)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDetachShader)(program, shader);
  }

  void REGAL_CALL plugin_glDisableVertexAttribArray(GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribArray)(index);
  }

  void REGAL_CALL plugin_glDrawBuffers(GLsizei n, const GLenum *bufs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffers)(n, bufs);
  }

  void REGAL_CALL plugin_glEnableVertexAttribArray(GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribArray)(index);
  }

  void REGAL_CALL plugin_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAttrib)(program, index, bufSize, length, size, type, name);
  }

  void REGAL_CALL plugin_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniform)(program, index, bufSize, length, size, type, name);
  }

  void REGAL_CALL plugin_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetAttachedShaders)(program, maxCount, count, shaders);
  }

  GLint REGAL_CALL plugin_glGetAttribLocation(GLuint program, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetAttribLocation)(program, name);
  }

  void REGAL_CALL plugin_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramInfoLog)(program, bufSize, length, infoLog);
  }

  void REGAL_CALL plugin_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramiv)(program, pname, params);
  }

  void REGAL_CALL plugin_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderInfoLog)(shader, bufSize, length, infoLog);
  }

  void REGAL_CALL plugin_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderSource)(shader, bufSize, length, source);
  }

  void REGAL_CALL plugin_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderiv)(shader, pname, params);
  }

  GLint REGAL_CALL plugin_glGetUniformLocation(GLuint program, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetUniformLocation)(program, name);
  }

  void REGAL_CALL plugin_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformfv)(program, location, params);
  }

  void REGAL_CALL plugin_glGetUniformiv(GLuint program, GLint location, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformiv)(program, location, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointerv)(index, pname, pointer);
  }

  void REGAL_CALL plugin_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdv)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfv)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribiv)(index, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsProgram(GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsProgram)(program);
  }

  GLboolean REGAL_CALL plugin_glIsShader(GLuint shader)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsShader)(shader);
  }

  void REGAL_CALL plugin_glLinkProgram(GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLinkProgram)(program);
  }

  void REGAL_CALL plugin_glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glShaderSource)(shader, count, string, length);
  }

  void REGAL_CALL plugin_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilFuncSeparate)(face, func, ref, mask);
  }

  void REGAL_CALL plugin_glStencilMaskSeparate(GLenum face, GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilMaskSeparate)(face, mask);
  }

  void REGAL_CALL plugin_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilOpSeparate)(face, fail, zfail, zpass);
  }

  void REGAL_CALL plugin_glUniform1f(GLint location, GLfloat v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1f)(location, v0);
  }

  void REGAL_CALL plugin_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1fv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform1i(GLint location, GLint v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1i)(location, v0);
  }

  void REGAL_CALL plugin_glUniform1iv(GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1iv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2f)(location, v0, v1);
  }

  void REGAL_CALL plugin_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2fv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2i(GLint location, GLint v0, GLint v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2i)(location, v0, v1);
  }

  void REGAL_CALL plugin_glUniform2iv(GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2iv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3f)(location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3fv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3i)(location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glUniform3iv(GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3iv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4f)(location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4fv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4i)(location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glUniform4iv(GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4iv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2fv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3fv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4fv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUseProgram(GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUseProgram)(program);
  }

  void REGAL_CALL plugin_glValidateProgram(GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glValidateProgram)(program);
  }

  void REGAL_CALL plugin_glVertexAttrib1d(GLuint index, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1d)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1dv(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib1f(GLuint index, GLfloat x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1f)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1fv(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib1s(GLuint index, GLshort x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1s)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1sv(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2d)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2dv(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2f)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2fv(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2s)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2sv(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3d)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3dv(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3f)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3fv(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3s)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3sv(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nbv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4Niv(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Niv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nsv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nub)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nubv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nuiv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nusv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4bv(GLuint index, const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4bv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4d)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4dv(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4f)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4fv(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4iv(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4iv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4s)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4sv(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4uiv(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4uiv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4usv(GLuint index, const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4usv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointer)(index, size, type, normalized, stride, pointer);
  }

  /* GL_VERSION_2_1 */

  void REGAL_CALL plugin_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x3fv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x4fv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x2fv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x4fv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x2fv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x3fv)(location, count, transpose, value);
  }

  /* GL_VERSION_3_0 */

  void REGAL_CALL plugin_glBeginConditionalRender(GLuint id, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRender)(id, mode);
  }

  void REGAL_CALL plugin_glBeginTransformFeedback(GLenum primitiveMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedback)(primitiveMode);
  }

  void REGAL_CALL plugin_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocation)(program, color, name);
  }

  void REGAL_CALL plugin_glClampColor(GLenum target, GLenum clamp)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClampColor)(target, clamp);
  }

  void REGAL_CALL plugin_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferfi)(buffer, drawbuffer, depth, stencil);
  }

  void REGAL_CALL plugin_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferfv)(buffer, drawbuffer, value);
  }

  void REGAL_CALL plugin_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferiv)(buffer, drawbuffer, value);
  }

  void REGAL_CALL plugin_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferuiv)(buffer, drawbuffer, value);
  }

  void REGAL_CALL plugin_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorMaski)(index, r, g, b, a);
  }

  void REGAL_CALL plugin_glDisablei(GLenum cap, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisablei)(cap, index);
  }

  void REGAL_CALL plugin_glEnablei(GLenum cap, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnablei)(cap, index);
  }

  void REGAL_CALL plugin_glEndConditionalRender(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRender)();
  }

  void REGAL_CALL plugin_glEndTransformFeedback(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedback)();
  }

  void REGAL_CALL plugin_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBooleani_v)(target, index, data);
  }

  GLint REGAL_CALL plugin_glGetFragDataLocation(GLuint program, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetFragDataLocation)(program, name);
  }

  const GLubyte *REGAL_CALL plugin_glGetStringi(GLenum name, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetStringi)(name, index);
  }

  void REGAL_CALL plugin_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIiv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIuiv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name);
  }

  void REGAL_CALL plugin_glGetUniformuiv(GLuint program, GLint location, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformuiv)(program, location, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIiv)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIuiv)(index, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsEnabledi(GLenum target, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsEnabledi)(target, index);
  }

  void REGAL_CALL plugin_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIiv)(target, pname, params);
  }

  void REGAL_CALL plugin_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIuiv)(target, pname, params);
  }

  void REGAL_CALL plugin_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryings)(program, count, varyings, bufferMode);
  }

  void REGAL_CALL plugin_glUniform1ui(GLint location, GLuint v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui)(location, v0);
  }

  void REGAL_CALL plugin_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1uiv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2ui(GLint location, GLuint v0, GLuint v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui)(location, v0, v1);
  }

  void REGAL_CALL plugin_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2uiv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui)(location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3uiv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui)(location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4uiv)(location, count, value);
  }

  void REGAL_CALL plugin_glVertexAttribI1i(GLuint index, GLint x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1i)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttribI1iv(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1iv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI1ui(GLuint index, GLuint x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1ui)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttribI1uiv(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uiv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI2i(GLuint index, GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2i)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttribI2iv(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2iv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2ui)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttribI2uiv(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uiv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3i)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttribI3iv(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3iv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3ui)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttribI3uiv(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uiv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4bv(GLuint index, const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4bv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4i)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttribI4iv(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4iv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4sv(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4sv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4ubv(GLuint index, const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ubv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ui)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttribI4uiv(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uiv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4usv(GLuint index, const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4usv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIPointer)(index, size, type, stride, pointer);
  }

  /* GL_VERSION_3_1 */

  void REGAL_CALL plugin_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstanced)(mode, start, count, primcount);
  }

  void REGAL_CALL plugin_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstanced)(mode, count, type, indices, primcount);
  }

  void REGAL_CALL plugin_glPrimitiveRestartIndex(GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartIndex)(index);
  }

  void REGAL_CALL plugin_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexBuffer)(target, internalformat, buffer);
  }

  /* GL_VERSION_3_2 */

  void REGAL_CALL plugin_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture)(target, attachment, texture, level);
  }

  void REGAL_CALL plugin_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFace)(target, attachment, texture, level, face);
  }

  void REGAL_CALL plugin_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameteri64v)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64i_v)(target, index, data);
  }

  /* GL_VERSION_3_3 */

  void REGAL_CALL plugin_glVertexAttribDivisor(GLuint index, GLuint divisor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisor)(index, divisor);
  }

  /* GL_VERSION_4_0 */

  void REGAL_CALL plugin_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparatei)(buf, modeRGB, modeAlpha);
  }

  void REGAL_CALL plugin_glBlendEquationi(GLuint buf, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationi)(buf, mode);
  }

  void REGAL_CALL plugin_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }

  void REGAL_CALL plugin_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFunci)(buf, src, dst);
  }

  /* GL_3DFX_tbuffer */

  void REGAL_CALL plugin_glTbufferMask3DFX(GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTbufferMask3DFX)(mask);
  }

  /* GL_AMD_debug_output */

  void REGAL_CALL plugin_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallbackAMD)(callback, userParam);
  }

  void REGAL_CALL plugin_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageEnableAMD)(category, severity, count, ids, enabled);
  }

  void REGAL_CALL plugin_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsertAMD)(category, severity, id, length, buf);
  }

  GLuint REGAL_CALL plugin_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetDebugMessageLogAMD)(count, bufsize, categories, severities, ids, lengths, message);
  }

  /* GL_AMD_draw_buffers_blend */

  void REGAL_CALL plugin_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationIndexedAMD)(buf, mode);
  }

  void REGAL_CALL plugin_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateIndexedAMD)(buf, modeRGB, modeAlpha);
  }

  void REGAL_CALL plugin_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncIndexedAMD)(buf, src, dst);
  }

  void REGAL_CALL plugin_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateIndexedAMD)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }

  /* GL_AMD_multi_draw_indirect */

  void REGAL_CALL plugin_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysIndirectAMD)(mode, indirect, primcount, stride);
  }

  void REGAL_CALL plugin_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsIndirectAMD)(mode, type, indirect, primcount, stride);
  }

  /* GL_AMD_name_gen_delete */

  void REGAL_CALL plugin_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteNamesAMD)(identifier, num, names);
  }

  void REGAL_CALL plugin_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenNamesAMD)(identifier, num, names);
  }

  GLboolean REGAL_CALL plugin_glIsNameAMD(GLenum identifier, GLuint name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsNameAMD)(identifier, name);
  }

  /* GL_AMD_performance_monitor */

  void REGAL_CALL plugin_glBeginPerfMonitorAMD(GLuint monitor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginPerfMonitorAMD)(monitor);
  }

  void REGAL_CALL plugin_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeletePerfMonitorsAMD)(n, monitors);
  }

  void REGAL_CALL plugin_glEndPerfMonitorAMD(GLuint monitor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndPerfMonitorAMD)(monitor);
  }

  void REGAL_CALL plugin_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenPerfMonitorsAMD)(n, monitors);
  }

  void REGAL_CALL plugin_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterDataAMD)(monitor, pname, dataSize, data, bytesWritten);
  }

  void REGAL_CALL plugin_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterInfoAMD)(group, counter, pname, data);
  }

  void REGAL_CALL plugin_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterStringAMD)(group, counter, bufSize, length, counterString);
  }

  void REGAL_CALL plugin_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCountersAMD)(group, numCounters, maxActiveCounters, countersSize, counters);
  }

  void REGAL_CALL plugin_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorGroupStringAMD)(group, bufSize, length, groupString);
  }

  void REGAL_CALL plugin_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorGroupsAMD)(numGroups, groupsSize, groups);
  }

  void REGAL_CALL plugin_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSelectPerfMonitorCountersAMD)(monitor, enable, group, numCounters, counterList);
  }

  /* GL_AMD_sample_positions */

  void REGAL_CALL plugin_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSetMultisamplefvAMD)(pname, index, val);
  }

  /* GL_AMD_stencil_operation_extended */

  void REGAL_CALL plugin_glStencilOpValueAMD(GLenum face, GLuint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilOpValueAMD)(face, value);
  }

  /* GL_AMD_vertex_shader_tessellator */

  void REGAL_CALL plugin_glTessellationFactorAMD(GLfloat factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTessellationFactorAMD)(factor);
  }

  void REGAL_CALL plugin_glTessellationModeAMD(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTessellationModeAMD)(mode);
  }

  /* GL_ANGLE_framebuffer_blit */

  void REGAL_CALL plugin_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebufferANGLE)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  /* GL_ANGLE_framebuffer_multisample */

  void REGAL_CALL plugin_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleANGLE)(target, samples, internalformat, width, height);
  }

  /* GL_ANGLE_instanced_arrays */

  void REGAL_CALL plugin_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedANGLE)(mode, first, count, primcount);
  }

  void REGAL_CALL plugin_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedANGLE)(mode, count, type, indices, primcount);
  }

  void REGAL_CALL plugin_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisorANGLE)(index, divisor);
  }

  /* GL_ANGLE_translated_shader_source */

  void REGAL_CALL plugin_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTranslatedShaderSourceANGLE)(shader, bufsize, length, source);
  }

  /* GL_APPLE_copy_texture_levels */

  void REGAL_CALL plugin_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureLevelsAPPLE)(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
  }

  /* GL_APPLE_element_array */

  void REGAL_CALL plugin_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementArrayAPPLE)(mode, first, count);
  }

  void REGAL_CALL plugin_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementArrayAPPLE)(mode, start, end, first, count);
  }

  void REGAL_CALL plugin_glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glElementPointerAPPLE)(type, pointer);
  }

  void REGAL_CALL plugin_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementArrayAPPLE)(mode, first, count, primcount);
  }

  void REGAL_CALL plugin_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawRangeElementArrayAPPLE)(mode, start, end, first, count, primcount);
  }

  /* GL_APPLE_fence */

  void REGAL_CALL plugin_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFencesAPPLE)(n, fences);
  }

  void REGAL_CALL plugin_glFinishFenceAPPLE(GLuint fence)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFinishFenceAPPLE)(fence);
  }

  void REGAL_CALL plugin_glFinishObjectAPPLE(GLenum object, GLint name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFinishObjectAPPLE)(object, name);
  }

  void REGAL_CALL plugin_glGenFencesAPPLE(GLsizei n, GLuint *fences)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenFencesAPPLE)(n, fences);
  }

  GLboolean REGAL_CALL plugin_glIsFenceAPPLE(GLuint fence)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsFenceAPPLE)(fence);
  }

  void REGAL_CALL plugin_glSetFenceAPPLE(GLuint fence)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSetFenceAPPLE)(fence);
  }

  GLboolean REGAL_CALL plugin_glTestFenceAPPLE(GLuint fence)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glTestFenceAPPLE)(fence);
  }

  GLboolean REGAL_CALL plugin_glTestObjectAPPLE(GLenum object, GLuint name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glTestObjectAPPLE)(object, name);
  }

  /* GL_APPLE_flush_buffer_range */

  void REGAL_CALL plugin_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBufferParameteriAPPLE)(target, pname, param);
  }

  void REGAL_CALL plugin_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRangeAPPLE)(target, offset, size);
  }

  /* GL_APPLE_flush_render */

  void REGAL_CALL plugin_glFinishRenderAPPLE(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFinishRenderAPPLE)();
  }

  void REGAL_CALL plugin_glFlushRenderAPPLE(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushRenderAPPLE)();
  }

  void REGAL_CALL plugin_glSwapAPPLE(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSwapAPPLE)();
  }

  /* GL_APPLE_framebuffer_multisample */

  void REGAL_CALL plugin_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleAPPLE)(target, samples, internalformat, width, height);
  }

  void REGAL_CALL plugin_glResolveMultisampleFramebufferAPPLE(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glResolveMultisampleFramebufferAPPLE)();
  }

  /* GL_APPLE_object_purgeable */

  void REGAL_CALL plugin_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterivAPPLE)(objectType, name, pname, params);
  }

  GLenum REGAL_CALL plugin_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glObjectPurgeableAPPLE)(objectType, name, option);
  }

  GLenum REGAL_CALL plugin_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glObjectUnpurgeableAPPLE)(objectType, name, option);
  }

  /* GL_APPLE_sync */

  GLenum REGAL_CALL plugin_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glClientWaitSyncAPPLE)(sync, flags, timeout);
  }

  void REGAL_CALL plugin_glDeleteSyncAPPLE(GLsync sync)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteSyncAPPLE)(sync);
  }

  GLsync REGAL_CALL plugin_glFenceSyncAPPLE(GLenum condition, GLbitfield flags)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glFenceSyncAPPLE)(condition, flags);
  }

  void REGAL_CALL plugin_glGetInteger64vAPPLE(GLenum pname, GLint64 *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64vAPPLE)(pname, params);
  }

  void REGAL_CALL plugin_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSyncivAPPLE)(sync, pname, bufSize, length, values);
  }

  GLboolean REGAL_CALL plugin_glIsSyncAPPLE(GLsync sync)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsSyncAPPLE)(sync);
  }

  void REGAL_CALL plugin_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWaitSyncAPPLE)(sync, flags, timeout);
  }

  /* GL_APPLE_texture_range */

  void REGAL_CALL plugin_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterPointervAPPLE)(target, pname, params);
  }

  void REGAL_CALL plugin_glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureRangeAPPLE)(target, length, pointer);
  }

  /* GL_APPLE_vertex_array_object */

  void REGAL_CALL plugin_glBindVertexArrayAPPLE(GLuint array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArrayAPPLE)(array);
  }

  void REGAL_CALL plugin_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArraysAPPLE)(n, arrays);
  }

  void REGAL_CALL plugin_glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArraysAPPLE)(n, arrays);
  }

  GLboolean REGAL_CALL plugin_glIsVertexArrayAPPLE(GLuint array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsVertexArrayAPPLE)(array);
  }

  /* GL_APPLE_vertex_array_range */

  void REGAL_CALL plugin_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushVertexArrayRangeAPPLE)(length, pointer);
  }

  void REGAL_CALL plugin_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayParameteriAPPLE)(pname, param);
  }

  void REGAL_CALL plugin_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayRangeAPPLE)(length, pointer);
  }

  /* GL_APPLE_vertex_program_evaluators */

  void REGAL_CALL plugin_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribAPPLE)(index, pname);
  }

  void REGAL_CALL plugin_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribAPPLE)(index, pname);
  }

  GLboolean REGAL_CALL plugin_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsVertexAttribEnabledAPPLE)(index, pname);
  }

  void REGAL_CALL plugin_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib1dAPPLE)(index, size, u1, u2, stride, order, points);
  }

  void REGAL_CALL plugin_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib1fAPPLE)(index, size, u1, u2, stride, order, points);
  }

  void REGAL_CALL plugin_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib2dAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }

  void REGAL_CALL plugin_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib2fAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }

  /* GL_ARB_ES2_compatibility */

  void REGAL_CALL plugin_glClearDepthf(GLclampf d)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearDepthf)(d);
  }

  void REGAL_CALL plugin_glDepthRangef(GLclampf n, GLclampf f)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangef)(n, f);
  }

  void REGAL_CALL plugin_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderPrecisionFormat)(shadertype, precisiontype, range, precision);
  }

  void REGAL_CALL plugin_glReleaseShaderCompiler(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReleaseShaderCompiler)();
  }

  void REGAL_CALL plugin_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glShaderBinary)(count, shaders, binaryformat, binary, length);
  }

  /* GL_ARB_base_instance */

  void REGAL_CALL plugin_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedBaseInstance)(mode, first, count, primcount, baseinstance);
  }

  void REGAL_CALL plugin_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseInstance)(mode, count, type, indices, primcount, baseinstance);
  }

  void REGAL_CALL plugin_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, primcount, basevertex, baseinstance);
  }

  /* GL_ARB_blend_func_extended */

  void REGAL_CALL plugin_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocationIndexed)(program, colorNumber, index, name);
  }

  GLint REGAL_CALL plugin_glGetFragDataIndex(GLuint program, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetFragDataIndex)(program, name);
  }

  /* GL_ARB_cl_event */

  GLsync REGAL_CALL plugin_glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCreateSyncFromCLeventARB)(context, event, flags);
  }

  /* GL_ARB_clear_buffer_object */

  void REGAL_CALL plugin_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferData)(target, internalformat, format, type, data);
  }

  void REGAL_CALL plugin_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferSubData)(target, internalformat, offset, size, format, type, data);
  }

  void REGAL_CALL plugin_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearNamedBufferDataEXT)(buffer, internalformat, format, type, data);
  }

  void REGAL_CALL plugin_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearNamedBufferSubDataEXT)(buffer, internalformat, offset, size, format, type, data);
  }

  /* GL_ARB_color_buffer_float */

  void REGAL_CALL plugin_glClampColorARB(GLenum target, GLenum clamp)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClampColorARB)(target, clamp);
  }

  /* GL_ARB_compute_shader */

  void REGAL_CALL plugin_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDispatchCompute)(num_groups_x, num_groups_y, num_groups_z);
  }

  void REGAL_CALL plugin_glDispatchComputeIndirect(GLintptr indirect)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDispatchComputeIndirect)(indirect);
  }

  /* GL_ARB_copy_buffer */

  void REGAL_CALL plugin_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyBufferSubData)(readtarget, writetarget, readoffset, writeoffset, size);
  }

  /* GL_ARB_copy_image */

  void REGAL_CALL plugin_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }

  /* GL_ARB_debug_output */

  void REGAL_CALL plugin_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallbackARB)(callback, userParam);
  }

  void REGAL_CALL plugin_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageControlARB)(source, type, severity, count, ids, enabled);
  }

  void REGAL_CALL plugin_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsertARB)(source, type, id, severity, length, buf);
  }

  GLuint REGAL_CALL plugin_glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetDebugMessageLogARB)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
  }

  /* GL_ARB_draw_buffers */

  void REGAL_CALL plugin_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersARB)(n, bufs);
  }

  /* GL_ARB_draw_buffers_blend */

  void REGAL_CALL plugin_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateiARB)(buf, modeRGB, modeAlpha);
  }

  void REGAL_CALL plugin_glBlendEquationiARB(GLuint buf, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationiARB)(buf, mode);
  }

  void REGAL_CALL plugin_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateiARB)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }

  void REGAL_CALL plugin_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFunciARB)(buf, src, dst);
  }

  /* GL_ARB_draw_elements_base_vertex */

  void REGAL_CALL plugin_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsBaseVertex)(mode, count, type, indices, basevertex);
  }

  void REGAL_CALL plugin_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseVertex)(mode, count, type, indices, primcount, basevertex);
  }

  void REGAL_CALL plugin_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex);
  }

  void REGAL_CALL plugin_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsBaseVertex)(mode, count, type, indices, primcount, basevertex);
  }

  /* GL_ARB_draw_indirect */

  void REGAL_CALL plugin_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysIndirect)(mode, indirect);
  }

  void REGAL_CALL plugin_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsIndirect)(mode, type, indirect);
  }

  /* GL_ARB_draw_instanced */

  void REGAL_CALL plugin_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedARB)(mode, start, count, primcount);
  }

  void REGAL_CALL plugin_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedARB)(mode, count, type, indices, primcount);
  }

  /* GL_ARB_framebuffer_no_attachments */

  void REGAL_CALL plugin_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferParameteri)(target, pname, param);
  }

  void REGAL_CALL plugin_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedFramebufferParameterivEXT)(framebuffer, pname, params);
  }

  void REGAL_CALL plugin_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferParameteriEXT)(framebuffer, pname, param);
  }

  /* GL_ARB_framebuffer_object */

  void REGAL_CALL plugin_glBindFramebuffer(GLenum target, GLuint framebuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindFramebuffer)(target, framebuffer);
  }

  void REGAL_CALL plugin_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbuffer)(target, renderbuffer);
  }

  void REGAL_CALL plugin_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  GLenum REGAL_CALL plugin_glCheckFramebufferStatus(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCheckFramebufferStatus)(target);
  }

  void REGAL_CALL plugin_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffers)(n, framebuffers);
  }

  void REGAL_CALL plugin_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffers)(n, renderbuffers);
  }

  void REGAL_CALL plugin_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer);
  }

  void REGAL_CALL plugin_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture1D)(target, attachment, textarget, texture, level);
  }

  void REGAL_CALL plugin_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2D)(target, attachment, textarget, texture, level);
  }

  void REGAL_CALL plugin_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3D)(target, attachment, textarget, texture, level, layer);
  }

  void REGAL_CALL plugin_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayer)(target, attachment, texture, level, layer);
  }

  void REGAL_CALL plugin_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffers)(n, framebuffers);
  }

  void REGAL_CALL plugin_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffers)(n, renderbuffers);
  }

  void REGAL_CALL plugin_glGenerateMipmap(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmap)(target);
  }

  void REGAL_CALL plugin_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameteriv)(target, attachment, pname, params);
  }

  void REGAL_CALL plugin_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameteriv)(target, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsFramebuffer(GLuint framebuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsFramebuffer)(framebuffer);
  }

  GLboolean REGAL_CALL plugin_glIsRenderbuffer(GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsRenderbuffer)(renderbuffer);
  }

  void REGAL_CALL plugin_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorage)(target, internalformat, width, height);
  }

  void REGAL_CALL plugin_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisample)(target, samples, internalformat, width, height);
  }

  /* GL_ARB_geometry_shader4 */

  void REGAL_CALL plugin_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureARB)(target, attachment, texture, level);
  }

  void REGAL_CALL plugin_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFaceARB)(target, attachment, texture, level, face);
  }

  void REGAL_CALL plugin_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayerARB)(target, attachment, texture, level, layer);
  }

  void REGAL_CALL plugin_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteriARB)(program, pname, value);
  }

  /* GL_ARB_get_program_binary */

  void REGAL_CALL plugin_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramBinary)(program, bufSize, length, binaryFormat, binary);
  }

  void REGAL_CALL plugin_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramBinary)(program, binaryFormat, binary, length);
  }

  void REGAL_CALL plugin_glProgramParameteri(GLuint program, GLenum pname, GLint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteri)(program, pname, value);
  }

  /* GL_ARB_gpu_shader_fp64 */

  void REGAL_CALL plugin_glGetUniformdv(GLuint program, GLint location, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformdv)(program, location, params);
  }

  void REGAL_CALL plugin_glUniform1d(GLint location, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1d)(location, x);
  }

  void REGAL_CALL plugin_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1dv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2d(GLint location, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2d)(location, x, y);
  }

  void REGAL_CALL plugin_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2dv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3d)(location, x, y, z);
  }

  void REGAL_CALL plugin_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3dv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4d)(location, x, y, z, w);
  }

  void REGAL_CALL plugin_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4dv)(location, count, value);
  }

  void REGAL_CALL plugin_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2dv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x3dv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x4dv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3dv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x2dv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x4dv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4dv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x2dv)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x3dv)(location, count, transpose, value);
  }

  /* GL_ARB_imaging */

  void REGAL_CALL plugin_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorSubTable)(target, start, count, format, type, data);
  }

  void REGAL_CALL plugin_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorTable)(target, internalformat, width, format, type, table);
  }

  void REGAL_CALL plugin_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter1D)(target, internalformat, width, format, type, image);
  }

  void REGAL_CALL plugin_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter2D)(target, internalformat, width, height, format, type, image);
  }

  void REGAL_CALL plugin_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterf)(target, pname, params);
  }

  void REGAL_CALL plugin_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteri)(target, pname, params);
  }

  void REGAL_CALL plugin_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyColorSubTable)(target, start, x, y, width);
  }

  void REGAL_CALL plugin_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyColorTable)(target, internalformat, x, y, width);
  }

  void REGAL_CALL plugin_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter1D)(target, internalformat, x, y, width);
  }

  void REGAL_CALL plugin_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter2D)(target, internalformat, x, y, width, height);
  }

  void REGAL_CALL plugin_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTable)(target, format, type, table);
  }

  void REGAL_CALL plugin_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionFilter)(target, format, type, image);
  }

  void REGAL_CALL plugin_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogram)(target, reset, format, type, values);
  }

  void REGAL_CALL plugin_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmax)(target, reset, format, types, values);
  }

  void REGAL_CALL plugin_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterfv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameteriv)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSeparableFilter)(target, format, type, row, column, span);
  }

  void REGAL_CALL plugin_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glHistogram)(target, width, internalformat, sink);
  }

  void REGAL_CALL plugin_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMinmax)(target, internalformat, sink);
  }

  void REGAL_CALL plugin_glResetHistogram(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glResetHistogram)(target);
  }

  void REGAL_CALL plugin_glResetMinmax(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glResetMinmax)(target);
  }

  void REGAL_CALL plugin_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSeparableFilter2D)(target, internalformat, width, height, format, type, row, column);
  }

  /* GL_ARB_instanced_arrays */

  void REGAL_CALL plugin_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisorARB)(index, divisor);
  }

  /* GL_ARB_internalformat_query */

  void REGAL_CALL plugin_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInternalformativ)(target, internalformat, pname, bufSize, params);
  }

  /* GL_ARB_internalformat_query2 */

  void REGAL_CALL plugin_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInternalformati64v)(target, internalformat, pname, bufSize, params);
  }

  /* GL_ARB_invalidate_subdata */

  void REGAL_CALL plugin_glInvalidateBufferData(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateBufferData)(buffer);
  }

  void REGAL_CALL plugin_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateBufferSubData)(buffer, offset, length);
  }

  void REGAL_CALL plugin_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateFramebuffer)(target, numAttachments, attachments);
  }

  void REGAL_CALL plugin_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateSubFramebuffer)(target, numAttachments, attachments, x, y, width, height);
  }

  void REGAL_CALL plugin_glInvalidateTexImage(GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateTexImage)(texture, level);
  }

  void REGAL_CALL plugin_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
  }

  /* GL_ARB_map_buffer_range */

  void REGAL_CALL plugin_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRange)(target, offset, length);
  }

  GLvoid *REGAL_CALL plugin_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glMapBufferRange)(target, offset, length, access);
  }

  /* GL_ARB_matrix_palette */

  void REGAL_CALL plugin_glCurrentPaletteMatrixARB(GLint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCurrentPaletteMatrixARB)(index);
  }

  void REGAL_CALL plugin_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexPointerARB)(size, type, stride, pointer);
  }

  void REGAL_CALL plugin_glMatrixIndexubvARB(GLint size, const GLubyte *indices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexubvARB)(size, indices);
  }

  void REGAL_CALL plugin_glMatrixIndexuivARB(GLint size, const GLuint *indices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexuivARB)(size, indices);
  }

  void REGAL_CALL plugin_glMatrixIndexusvARB(GLint size, const GLushort *indices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexusvARB)(size, indices);
  }

  /* GL_ARB_multi_draw_indirect */

  void REGAL_CALL plugin_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysIndirect)(mode, indirect, primcount, stride);
  }

  void REGAL_CALL plugin_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsIndirect)(mode, type, indirect, primcount, stride);
  }

  /* GL_ARB_multisample */

  void REGAL_CALL plugin_glSampleCoverageARB(GLclampf value, GLboolean invert)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSampleCoverageARB)(value, invert);
  }

  /* GL_ARB_multitexture */

  void REGAL_CALL plugin_glActiveTextureARB(GLenum texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glActiveTextureARB)(texture);
  }

  void REGAL_CALL plugin_glClientActiveTextureARB(GLenum texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClientActiveTextureARB)(texture);
  }

  void REGAL_CALL plugin_glMultiTexCoord1dARB(GLenum target, GLdouble s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dARB)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dvARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord1fARB(GLenum target, GLfloat s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fARB)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fvARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord1iARB(GLenum target, GLint s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1iARB)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1ivARB(GLenum target, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1ivARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord1sARB(GLenum target, GLshort s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1sARB)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1svARB(GLenum target, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1svARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dARB)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dvARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fARB)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fvARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2iARB)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2ivARB(GLenum target, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2ivARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2sARB)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2svARB(GLenum target, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2svARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dARB)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dvARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fARB)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fvARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3iARB)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3ivARB(GLenum target, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3ivARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3sARB)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3svARB(GLenum target, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3svARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dARB)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dvARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fARB)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fvARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4iARB)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4ivARB(GLenum target, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4ivARB)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4sARB)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4svARB(GLenum target, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4svARB)(target, v);
  }

  /* GL_ARB_occlusion_query */

  void REGAL_CALL plugin_glBeginQueryARB(GLenum target, GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryARB)(target, id);
  }

  void REGAL_CALL plugin_glDeleteQueriesARB(GLsizei n, const GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueriesARB)(n, ids);
  }

  void REGAL_CALL plugin_glEndQueryARB(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndQueryARB)(target);
  }

  void REGAL_CALL plugin_glGenQueriesARB(GLsizei n, GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenQueriesARB)(n, ids);
  }

  void REGAL_CALL plugin_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectivARB)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuivARB)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryivARB)(target, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsQueryARB(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsQueryARB)(id);
  }

  /* GL_ARB_point_parameters */

  void REGAL_CALL plugin_glPointParameterfARB(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfARB)(pname, param);
  }

  void REGAL_CALL plugin_glPointParameterfvARB(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvARB)(pname, params);
  }

  /* GL_ARB_program_interface_query */

  void REGAL_CALL plugin_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramInterfaceiv)(program, programInterface, pname, params);
  }

  GLuint REGAL_CALL plugin_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetProgramResourceIndex)(program, programInterface, name);
  }

  GLint REGAL_CALL plugin_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetProgramResourceLocation)(program, programInterface, name);
  }

  GLint REGAL_CALL plugin_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetProgramResourceLocationIndex)(program, programInterface, name);
  }

  void REGAL_CALL plugin_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramResourceName)(program, programInterface, index, bufSize, length, name);
  }

  void REGAL_CALL plugin_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramResourceiv)(program, programInterface, index, propCount, props, bufSize, length, params);
  }

  /* GL_ARB_provoking_vertex */

  void REGAL_CALL plugin_glProvokingVertex(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProvokingVertex)(mode);
  }

  /* GL_ARB_robustness */

  GLenum REGAL_CALL plugin_glGetGraphicsResetStatusARB(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetGraphicsResetStatusARB)();
  }

  void REGAL_CALL plugin_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnColorTableARB)(target, format, type, bufSize, table);
  }

  void REGAL_CALL plugin_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnCompressedTexImageARB)(target, lod, bufSize, img);
  }

  void REGAL_CALL plugin_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnConvolutionFilterARB)(target, format, type, bufSize, image);
  }

  void REGAL_CALL plugin_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnHistogramARB)(target, reset, format, type, bufSize, values);
  }

  void REGAL_CALL plugin_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnMapdvARB)(target, query, bufSize, v);
  }

  void REGAL_CALL plugin_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnMapfvARB)(target, query, bufSize, v);
  }

  void REGAL_CALL plugin_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnMapivARB)(target, query, bufSize, v);
  }

  void REGAL_CALL plugin_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnMinmaxARB)(target, reset, format, type, bufSize, values);
  }

  void REGAL_CALL plugin_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapfvARB)(map, bufSize, values);
  }

  void REGAL_CALL plugin_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapuivARB)(map, bufSize, values);
  }

  void REGAL_CALL plugin_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapusvARB)(map, bufSize, values);
  }

  void REGAL_CALL plugin_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnPolygonStippleARB)(bufSize, pattern);
  }

  void REGAL_CALL plugin_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnSeparableFilterARB)(target, format, type, rowBufSize, row, columnBufSize, column, span);
  }

  void REGAL_CALL plugin_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnTexImageARB)(target, level, format, type, bufSize, img);
  }

  void REGAL_CALL plugin_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformdvARB)(program, location, bufSize, params);
  }

  void REGAL_CALL plugin_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformfvARB)(program, location, bufSize, params);
  }

  void REGAL_CALL plugin_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformivARB)(program, location, bufSize, params);
  }

  void REGAL_CALL plugin_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformuivARB)(program, location, bufSize, params);
  }

  void REGAL_CALL plugin_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadnPixelsARB)(x, y, width, height, format, type, bufSize, data);
  }

  /* GL_ARB_sample_shading */

  void REGAL_CALL plugin_glMinSampleShading(GLclampf value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMinSampleShading)(value);
  }

  void REGAL_CALL plugin_glMinSampleShadingARB(GLclampf value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMinSampleShadingARB)(value);
  }

  /* GL_ARB_sampler_objects */

  void REGAL_CALL plugin_glBindSampler(GLuint unit, GLuint sampler)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindSampler)(unit, sampler);
  }

  void REGAL_CALL plugin_glDeleteSamplers(GLsizei count, const GLuint *samplers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteSamplers)(count, samplers);
  }

  void REGAL_CALL plugin_glGenSamplers(GLsizei count, GLuint *samplers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenSamplers)(count, samplers);
  }

  void REGAL_CALL plugin_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterIiv)(sampler, pname, params);
  }

  void REGAL_CALL plugin_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterIuiv)(sampler, pname, params);
  }

  void REGAL_CALL plugin_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterfv)(sampler, pname, params);
  }

  void REGAL_CALL plugin_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameteriv)(sampler, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsSampler(GLuint sampler)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsSampler)(sampler);
  }

  void REGAL_CALL plugin_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterIiv)(sampler, pname, params);
  }

  void REGAL_CALL plugin_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterIuiv)(sampler, pname, params);
  }

  void REGAL_CALL plugin_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterf)(sampler, pname, param);
  }

  void REGAL_CALL plugin_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterfv)(sampler, pname, params);
  }

  void REGAL_CALL plugin_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameteri)(sampler, pname, param);
  }

  void REGAL_CALL plugin_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameteriv)(sampler, pname, params);
  }

  /* GL_ARB_separate_shader_objects */

  void REGAL_CALL plugin_glActiveShaderProgram(GLuint pipeline, GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glActiveShaderProgram)(pipeline, program);
  }

  void REGAL_CALL plugin_glBindProgramPipeline(GLuint pipeline)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindProgramPipeline)(pipeline);
  }

  GLuint REGAL_CALL plugin_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const *strings)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCreateShaderProgramv)(type, count, strings);
  }

  void REGAL_CALL plugin_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramPipelines)(n, pipelines);
  }

  void REGAL_CALL plugin_glGenProgramPipelines(GLsizei n, GLuint *pipelines)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenProgramPipelines)(n, pipelines);
  }

  void REGAL_CALL plugin_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramPipelineInfoLog)(pipeline, bufSize, length, infoLog);
  }

  void REGAL_CALL plugin_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramPipelineiv)(pipeline, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsProgramPipeline(GLuint pipeline)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsProgramPipeline)(pipeline);
  }

  void REGAL_CALL plugin_glProgramUniform1d(GLuint program, GLint location, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1d)(program, location, x);
  }

  void REGAL_CALL plugin_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform1f(GLuint program, GLint location, GLfloat x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1f)(program, location, x);
  }

  void REGAL_CALL plugin_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform1i(GLuint program, GLint location, GLint x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i)(program, location, x);
  }

  void REGAL_CALL plugin_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1iv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui)(program, location, v0);
  }

  void REGAL_CALL plugin_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uiv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2d)(program, location, x, y);
  }

  void REGAL_CALL plugin_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2f)(program, location, x, y);
  }

  void REGAL_CALL plugin_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i)(program, location, x, y);
  }

  void REGAL_CALL plugin_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2iv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui)(program, location, x, y);
  }

  void REGAL_CALL plugin_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uiv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3d)(program, location, x, y, z);
  }

  void REGAL_CALL plugin_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3f)(program, location, x, y, z);
  }

  void REGAL_CALL plugin_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i)(program, location, x, y, z);
  }

  void REGAL_CALL plugin_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3iv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui)(program, location, x, y, z);
  }

  void REGAL_CALL plugin_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uiv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4d)(program, location, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4f)(program, location, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i)(program, location, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4iv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui)(program, location, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uiv)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3dv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3fv)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUseProgramStages)(pipeline, stages, program);
  }

  void REGAL_CALL plugin_glValidateProgramPipeline(GLuint pipeline)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glValidateProgramPipeline)(pipeline);
  }

  /* GL_ARB_shader_atomic_counters */

  void REGAL_CALL plugin_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAtomicCounterBufferiv)(program, bufferIndex, pname, params);
  }

  /* GL_ARB_shader_image_load_store */

  void REGAL_CALL plugin_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindImageTexture)(unit, texture, level, layered, layer, access, format);
  }

  void REGAL_CALL plugin_glMemoryBarrier(GLbitfield barriers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMemoryBarrier)(barriers);
  }

  /* GL_ARB_shader_objects */

  void REGAL_CALL plugin_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAttachObjectARB)(containerObj, obj);
  }

  void REGAL_CALL plugin_glCompileShaderARB(GLhandleARB shaderObj)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompileShaderARB)(shaderObj);
  }

  GLhandleARB REGAL_CALL plugin_glCreateProgramObjectARB(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCreateProgramObjectARB)();
  }

  GLhandleARB REGAL_CALL plugin_glCreateShaderObjectARB(GLenum shaderType)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCreateShaderObjectARB)(shaderType);
  }

  void REGAL_CALL plugin_glDeleteObjectARB(GLhandleARB obj)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteObjectARB)(obj);
  }

  void REGAL_CALL plugin_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDetachObjectARB)(containerObj, attachedObj);
  }

  void REGAL_CALL plugin_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformARB)(programObj, index, maxLength, length, size, type, name);
  }

  void REGAL_CALL plugin_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetAttachedObjectsARB)(containerObj, maxCount, count, obj);
  }

  GLhandleARB REGAL_CALL plugin_glGetHandleARB(GLenum pname)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetHandleARB)(pname);
  }

  void REGAL_CALL plugin_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInfoLogARB)(obj, maxLength, length, infoLog);
  }

  void REGAL_CALL plugin_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterfvARB)(obj, pname, params);
  }

  void REGAL_CALL plugin_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterivARB)(obj, pname, params);
  }

  void REGAL_CALL plugin_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderSourceARB)(obj, maxLength, length, source);
  }

  GLint REGAL_CALL plugin_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetUniformLocationARB)(programObj, name);
  }

  void REGAL_CALL plugin_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformfvARB)(programObj, location, params);
  }

  void REGAL_CALL plugin_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformivARB)(programObj, location, params);
  }

  void REGAL_CALL plugin_glLinkProgramARB(GLhandleARB programObj)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLinkProgramARB)(programObj);
  }

  void REGAL_CALL plugin_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glShaderSourceARB)(shaderObj, count, string, length);
  }

  void REGAL_CALL plugin_glUniform1fARB(GLint location, GLfloat v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1fARB)(location, v0);
  }

  void REGAL_CALL plugin_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1fvARB)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform1iARB(GLint location, GLint v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1iARB)(location, v0);
  }

  void REGAL_CALL plugin_glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1ivARB)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2fARB)(location, v0, v1);
  }

  void REGAL_CALL plugin_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2fvARB)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2iARB(GLint location, GLint v0, GLint v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2iARB)(location, v0, v1);
  }

  void REGAL_CALL plugin_glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2ivARB)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3fARB)(location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3fvARB)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3iARB)(location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3ivARB)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4fARB)(location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4fvARB)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4iARB)(location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4ivARB)(location, count, value);
  }

  void REGAL_CALL plugin_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2fvARB)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3fvARB)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4fvARB)(location, count, transpose, value);
  }

  void REGAL_CALL plugin_glUseProgramObjectARB(GLhandleARB programObj)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUseProgramObjectARB)(programObj);
  }

  void REGAL_CALL plugin_glValidateProgramARB(GLhandleARB programObj)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glValidateProgramARB)(programObj);
  }

  /* GL_ARB_shader_storage_buffer_object */

  void REGAL_CALL plugin_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glShaderStorageBlockBinding)(program, storageBlockIndex, storageBlockBinding);
  }

  /* GL_ARB_shader_subroutine */

  void REGAL_CALL plugin_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineName)(program, shaderType, index, bufSize, length, name);
  }

  void REGAL_CALL plugin_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineUniformName)(program, shaderType, index, bufSize, length, name);
  }

  void REGAL_CALL plugin_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineUniformiv)(program, shaderType, index, pname, values);
  }

  void REGAL_CALL plugin_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStageiv)(program, shaderType, pname, values);
  }

  void REGAL_CALL plugin_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramSubroutineParameteruivNV)(target, index, params);
  }

  GLuint REGAL_CALL plugin_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetSubroutineIndex)(program, shaderType, name);
  }

  GLint REGAL_CALL plugin_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetSubroutineUniformLocation)(program, shaderType, name);
  }

  void REGAL_CALL plugin_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformSubroutineuiv)(shaderType, location, params);
  }

  void REGAL_CALL plugin_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramSubroutineParametersuivNV)(target, count, params);
  }

  void REGAL_CALL plugin_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformSubroutinesuiv)(shaderType, count, indices);
  }

  /* GL_ARB_shading_language_include */

  void REGAL_CALL plugin_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompileShaderIncludeARB)(shader, count, path, length);
  }

  void REGAL_CALL plugin_glDeleteNamedStringARB(GLint namelen, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteNamedStringARB)(namelen, name);
  }

  void REGAL_CALL plugin_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedStringARB)(namelen, name, bufSize, stringlen, string);
  }

  void REGAL_CALL plugin_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedStringivARB)(namelen, name, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsNamedStringARB(GLint namelen, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsNamedStringARB)(namelen, name);
  }

  void REGAL_CALL plugin_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedStringARB)(type, namelen, name, stringlen, string);
  }

  /* GL_ARB_sync */

  GLenum REGAL_CALL plugin_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glClientWaitSync)(sync, flags, timeout);
  }

  void REGAL_CALL plugin_glDeleteSync(GLsync sync)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteSync)(sync);
  }

  GLsync REGAL_CALL plugin_glFenceSync(GLenum condition, GLbitfield flags)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glFenceSync)(condition, flags);
  }

  void REGAL_CALL plugin_glGetInteger64v(GLenum pname, GLint64 *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64v)(pname, params);
  }

  void REGAL_CALL plugin_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSynciv)(sync, pname, bufSize, length, values);
  }

  GLboolean REGAL_CALL plugin_glIsSync(GLsync sync)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsSync)(sync);
  }

  void REGAL_CALL plugin_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWaitSync)(sync, flags, timeout);
  }

  /* GL_ARB_tessellation_shader */

  void REGAL_CALL plugin_glPatchParameterfv(GLenum pname, const GLfloat *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPatchParameterfv)(pname, values);
  }

  void REGAL_CALL plugin_glPatchParameteri(GLenum pname, GLint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPatchParameteri)(pname, value);
  }

  /* GL_ARB_texture_buffer_object */

  void REGAL_CALL plugin_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexBufferARB)(target, internalformat, buffer);
  }

  /* GL_ARB_texture_buffer_range */

  void REGAL_CALL plugin_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexBufferRange)(target, internalformat, buffer, offset, size);
  }

  void REGAL_CALL plugin_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureBufferRangeEXT)(texture, target, internalformat, buffer, offset, size);
  }

  /* GL_ARB_texture_compression */

  void REGAL_CALL plugin_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage1DARB)(target, level, internalformat, width, border, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage2DARB)(target, level, internalformat, width, height, border, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3DARB)(target, level, internalformat, width, height, depth, border, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage1DARB)(target, level, xoffset, width, format, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage2DARB)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3DARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }

  void REGAL_CALL plugin_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTexImageARB)(target, lod, img);
  }

  /* GL_ARB_texture_multisample */

  void REGAL_CALL plugin_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultisamplefv)(pname, index, val);
  }

  void REGAL_CALL plugin_glSampleMaski(GLuint index, GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSampleMaski)(index, mask);
  }

  void REGAL_CALL plugin_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
  }

  void REGAL_CALL plugin_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }

  /* GL_ARB_texture_storage */

  void REGAL_CALL plugin_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage1D)(target, levels, internalformat, width);
  }

  void REGAL_CALL plugin_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2D)(target, levels, internalformat, width, height);
  }

  void REGAL_CALL plugin_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3D)(target, levels, internalformat, width, height, depth);
  }

  void REGAL_CALL plugin_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage1DEXT)(texture, target, levels, internalformat, width);
  }

  void REGAL_CALL plugin_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage2DEXT)(texture, target, levels, internalformat, width, height);
  }

  void REGAL_CALL plugin_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage3DEXT)(texture, target, levels, internalformat, width, height, depth);
  }

  /* GL_ARB_texture_storage_multisample */

  void REGAL_CALL plugin_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
  }

  void REGAL_CALL plugin_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }

  void REGAL_CALL plugin_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage2DMultisampleEXT)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
  }

  void REGAL_CALL plugin_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage3DMultisampleEXT)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }

  /* GL_ARB_texture_view */

  void REGAL_CALL plugin_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }

  /* GL_ARB_timer_query */

  void REGAL_CALL plugin_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjecti64v)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectui64v)(id, pname, params);
  }

  void REGAL_CALL plugin_glQueryCounter(GLuint id, GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glQueryCounter)(id, target);
  }

  /* GL_ARB_transform_feedback2 */

  void REGAL_CALL plugin_glBindTransformFeedback(GLenum target, GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindTransformFeedback)(target, id);
  }

  void REGAL_CALL plugin_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteTransformFeedbacks)(n, ids);
  }

  void REGAL_CALL plugin_glDrawTransformFeedback(GLenum mode, GLuint name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedback)(mode, name);
  }

  void REGAL_CALL plugin_glGenTransformFeedbacks(GLsizei n, GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenTransformFeedbacks)(n, ids);
  }

  GLboolean REGAL_CALL plugin_glIsTransformFeedback(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsTransformFeedback)(id);
  }

  void REGAL_CALL plugin_glPauseTransformFeedback(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPauseTransformFeedback)();
  }

  void REGAL_CALL plugin_glResumeTransformFeedback(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glResumeTransformFeedback)();
  }

  /* GL_ARB_transform_feedback3 */

  void REGAL_CALL plugin_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryIndexed)(target, index, id);
  }

  void REGAL_CALL plugin_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackStream)(mode, id, stream);
  }

  void REGAL_CALL plugin_glEndQueryIndexed(GLenum target, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndQueryIndexed)(target, index);
  }

  void REGAL_CALL plugin_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryIndexediv)(target, index, pname, params);
  }

  /* GL_ARB_transform_feedback_instanced */

  void REGAL_CALL plugin_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackInstanced)(mode, id, primcount);
  }

  void REGAL_CALL plugin_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackStreamInstanced)(mode, id, stream, primcount);
  }

  /* GL_ARB_transpose_matrix */

  void REGAL_CALL plugin_glLoadTransposeMatrixdARB(const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixdARB)(m);
  }

  void REGAL_CALL plugin_glLoadTransposeMatrixfARB(const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixfARB)(m);
  }

  void REGAL_CALL plugin_glMultTransposeMatrixdARB(const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixdARB)(m);
  }

  void REGAL_CALL plugin_glMultTransposeMatrixfARB(const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixfARB)(m);
  }

  /* GL_ARB_uniform_buffer_object */

  void REGAL_CALL plugin_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBase)(target, index, buffer);
  }

  void REGAL_CALL plugin_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRange)(target, index, buffer, offset, size);
  }

  void REGAL_CALL plugin_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformBlockName)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }

  void REGAL_CALL plugin_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformBlockiv)(program, uniformBlockIndex, pname, params);
  }

  void REGAL_CALL plugin_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformName)(program, uniformIndex, bufSize, length, uniformName);
  }

  void REGAL_CALL plugin_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformsiv)(program, uniformCount, uniformIndices, pname, params);
  }

  void REGAL_CALL plugin_glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegeri_v)(target, index, data);
  }

  GLuint REGAL_CALL plugin_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetUniformBlockIndex)(program, uniformBlockName);
  }

  void REGAL_CALL plugin_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformIndices)(program, uniformCount, uniformNames, uniformIndices);
  }

  void REGAL_CALL plugin_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformBlockBinding)(program, uniformBlockIndex, uniformBlockBinding);
  }

  /* GL_ARB_vertex_array_object */

  void REGAL_CALL plugin_glBindVertexArray(GLuint array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArray)(array);
  }

  void REGAL_CALL plugin_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArrays)(n, arrays);
  }

  void REGAL_CALL plugin_glGenVertexArrays(GLsizei n, GLuint *arrays)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArrays)(n, arrays);
  }

  GLboolean REGAL_CALL plugin_glIsVertexArray(GLuint array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsVertexArray)(array);
  }

  /* GL_ARB_vertex_attrib_64bit */

  void REGAL_CALL plugin_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLdv)(index, pname, params);
  }

  void REGAL_CALL plugin_glVertexAttribL1d(GLuint index, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1d)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttribL1dv(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2d)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttribL2dv(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3d)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttribL3dv(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4d)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttribL4dv(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dv)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLPointer)(index, size, type, stride, pointer);
  }

  /* GL_ARB_vertex_attrib_binding */

  void REGAL_CALL plugin_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexBuffer)(bindingindex, buffer, offset, stride);
  }

  void REGAL_CALL plugin_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribBinding)(attribindex, bindingindex);
  }

  void REGAL_CALL plugin_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribFormat)(attribindex, size, type, normalized, relativeoffset);
  }

  void REGAL_CALL plugin_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIFormat)(attribindex, size, type, relativeoffset);
  }

  void REGAL_CALL plugin_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLFormat)(attribindex, size, type, relativeoffset);
  }

  void REGAL_CALL plugin_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexBindingDivisor)(bindingindex, divisor);
  }

  /* GL_ARB_vertex_blend */

  void REGAL_CALL plugin_glVertexBlendARB(GLint count)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendARB)(count);
  }

  void REGAL_CALL plugin_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightPointerARB)(size, type, stride, pointer);
  }

  void REGAL_CALL plugin_glWeightbvARB(GLint size, const GLbyte *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightbvARB)(size, weights);
  }

  void REGAL_CALL plugin_glWeightdvARB(GLint size, const GLdouble *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightdvARB)(size, weights);
  }

  void REGAL_CALL plugin_glWeightfvARB(GLint size, const GLfloat *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightfvARB)(size, weights);
  }

  void REGAL_CALL plugin_glWeightivARB(GLint size, const GLint *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightivARB)(size, weights);
  }

  void REGAL_CALL plugin_glWeightsvARB(GLint size, const GLshort *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightsvARB)(size, weights);
  }

  void REGAL_CALL plugin_glWeightubvARB(GLint size, const GLubyte *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightubvARB)(size, weights);
  }

  void REGAL_CALL plugin_glWeightuivARB(GLint size, const GLuint *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightuivARB)(size, weights);
  }

  void REGAL_CALL plugin_glWeightusvARB(GLint size, const GLushort *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightusvARB)(size, weights);
  }

  /* GL_ARB_vertex_buffer_object */

  void REGAL_CALL plugin_glBindBufferARB(GLenum target, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferARB)(target, buffer);
  }

  void REGAL_CALL plugin_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBufferDataARB)(target, size, data, usage);
  }

  void REGAL_CALL plugin_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBufferSubDataARB)(target, offset, size, data);
  }

  void REGAL_CALL plugin_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteBuffersARB)(n, buffers);
  }

  void REGAL_CALL plugin_glGenBuffersARB(GLsizei n, GLuint *buffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenBuffersARB)(n, buffers);
  }

  void REGAL_CALL plugin_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameterivARB)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointervARB)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferSubDataARB)(target, offset, size, data);
  }

  GLboolean REGAL_CALL plugin_glIsBufferARB(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsBufferARB)(buffer);
  }

  GLvoid *REGAL_CALL plugin_glMapBufferARB(GLenum target, GLenum access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glMapBufferARB)(target, access);
  }

  GLboolean REGAL_CALL plugin_glUnmapBufferARB(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glUnmapBufferARB)(target);
  }

  /* GL_ARB_vertex_program */

  void REGAL_CALL plugin_glBindProgramARB(GLenum target, GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindProgramARB)(target, program);
  }

  void REGAL_CALL plugin_glDeleteProgramsARB(GLsizei n, const GLuint *programs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramsARB)(n, programs);
  }

  void REGAL_CALL plugin_glDisableVertexAttribArrayARB(GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribArrayARB)(index);
  }

  void REGAL_CALL plugin_glEnableVertexAttribArrayARB(GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribArrayARB)(index);
  }

  void REGAL_CALL plugin_glGenProgramsARB(GLsizei n, GLuint *programs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenProgramsARB)(n, programs);
  }

  void REGAL_CALL plugin_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterdvARB)(target, index, params);
  }

  void REGAL_CALL plugin_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterfvARB)(target, index, params);
  }

  void REGAL_CALL plugin_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterdvARB)(target, index, params);
  }

  void REGAL_CALL plugin_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterfvARB)(target, index, params);
  }

  void REGAL_CALL plugin_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStringARB)(target, pname, string);
  }

  void REGAL_CALL plugin_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramivARB)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointervARB)(index, pname, pointer);
  }

  void REGAL_CALL plugin_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdvARB)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfvARB)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribivARB)(index, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsProgramARB(GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsProgramARB)(program);
  }

  void REGAL_CALL plugin_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4dARB)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4dvARB)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4fARB)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4fvARB)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4dARB)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4dvARB)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4fARB)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4fvARB)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramStringARB)(target, format, len, string);
  }

  void REGAL_CALL plugin_glVertexAttrib1dARB(GLuint index, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dARB)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib1fARB(GLuint index, GLfloat x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fARB)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib1sARB(GLuint index, GLshort x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sARB)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1svARB(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1svARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dARB)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fARB)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sARB)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2svARB(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2svARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dARB)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fARB)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sARB)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3svARB(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3svARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NbvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4NivARB(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NivARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NsvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NubARB)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NubvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NuivARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NusvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4bvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dARB)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fARB)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4ivARB(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ivARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sARB)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4svARB(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4svARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4uivARB(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4uivARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4usvARB(GLuint index, const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4usvARB)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointerARB)(index, size, type, normalized, stride, pointer);
  }

  /* GL_ARB_vertex_shader */

  void REGAL_CALL plugin_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindAttribLocationARB)(programObj, index, name);
  }

  void REGAL_CALL plugin_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAttribARB)(programObj, index, maxLength, length, size, type, name);
  }

  GLint REGAL_CALL plugin_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetAttribLocationARB)(programObj, name);
  }

  /* GL_ARB_vertex_type_2_10_10_10_rev */

  void REGAL_CALL plugin_glColorP3ui(GLenum type, GLuint color)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorP3ui)(type, color);
  }

  void REGAL_CALL plugin_glColorP3uiv(GLenum type, const GLuint *color)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorP3uiv)(type, color);
  }

  void REGAL_CALL plugin_glColorP4ui(GLenum type, GLuint color)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorP4ui)(type, color);
  }

  void REGAL_CALL plugin_glColorP4uiv(GLenum type, const GLuint *color)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorP4uiv)(type, color);
  }

  void REGAL_CALL plugin_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP1ui)(texture, type, coords);
  }

  void REGAL_CALL plugin_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP1uiv)(texture, type, coords);
  }

  void REGAL_CALL plugin_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP2ui)(texture, type, coords);
  }

  void REGAL_CALL plugin_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP2uiv)(texture, type, coords);
  }

  void REGAL_CALL plugin_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP3ui)(texture, type, coords);
  }

  void REGAL_CALL plugin_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP3uiv)(texture, type, coords);
  }

  void REGAL_CALL plugin_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP4ui)(texture, type, coords);
  }

  void REGAL_CALL plugin_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP4uiv)(texture, type, coords);
  }

  void REGAL_CALL plugin_glNormalP3ui(GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalP3ui)(type, coords);
  }

  void REGAL_CALL plugin_glNormalP3uiv(GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalP3uiv)(type, coords);
  }

  void REGAL_CALL plugin_glSecondaryColorP3ui(GLenum type, GLuint color)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorP3ui)(type, color);
  }

  void REGAL_CALL plugin_glSecondaryColorP3uiv(GLenum type, const GLuint *color)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorP3uiv)(type, color);
  }

  void REGAL_CALL plugin_glTexCoordP1ui(GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP1ui)(type, coords);
  }

  void REGAL_CALL plugin_glTexCoordP1uiv(GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP1uiv)(type, coords);
  }

  void REGAL_CALL plugin_glTexCoordP2ui(GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP2ui)(type, coords);
  }

  void REGAL_CALL plugin_glTexCoordP2uiv(GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP2uiv)(type, coords);
  }

  void REGAL_CALL plugin_glTexCoordP3ui(GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP3ui)(type, coords);
  }

  void REGAL_CALL plugin_glTexCoordP3uiv(GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP3uiv)(type, coords);
  }

  void REGAL_CALL plugin_glTexCoordP4ui(GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP4ui)(type, coords);
  }

  void REGAL_CALL plugin_glTexCoordP4uiv(GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP4uiv)(type, coords);
  }

  void REGAL_CALL plugin_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP1ui)(index, type, normalized, value);
  }

  void REGAL_CALL plugin_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP1uiv)(index, type, normalized, value);
  }

  void REGAL_CALL plugin_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP2ui)(index, type, normalized, value);
  }

  void REGAL_CALL plugin_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP2uiv)(index, type, normalized, value);
  }

  void REGAL_CALL plugin_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP3ui)(index, type, normalized, value);
  }

  void REGAL_CALL plugin_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP3uiv)(index, type, normalized, value);
  }

  void REGAL_CALL plugin_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP4ui)(index, type, normalized, value);
  }

  void REGAL_CALL plugin_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP4uiv)(index, type, normalized, value);
  }

  void REGAL_CALL plugin_glVertexP2ui(GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexP2ui)(type, coords);
  }

  void REGAL_CALL plugin_glVertexP2uiv(GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexP2uiv)(type, coords);
  }

  void REGAL_CALL plugin_glVertexP3ui(GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexP3ui)(type, coords);
  }

  void REGAL_CALL plugin_glVertexP3uiv(GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexP3uiv)(type, coords);
  }

  void REGAL_CALL plugin_glVertexP4ui(GLenum type, GLuint coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexP4ui)(type, coords);
  }

  void REGAL_CALL plugin_glVertexP4uiv(GLenum type, const GLuint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexP4uiv)(type, coords);
  }

  /* GL_ARB_viewport_array */

  void REGAL_CALL plugin_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangeArrayv)(first, count, v);
  }

  void REGAL_CALL plugin_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangeIndexed)(index, n, f);
  }

  void REGAL_CALL plugin_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetDoublei_v)(target, index, v);
  }

  void REGAL_CALL plugin_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFloati_v)(target, index, v);
  }

  void REGAL_CALL plugin_glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glScissorArrayv)(first, count, v);
  }

  void REGAL_CALL plugin_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glScissorIndexed)(index, left, bottom, width, height);
  }

  void REGAL_CALL plugin_glScissorIndexedv(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glScissorIndexedv)(index, v);
  }

  void REGAL_CALL plugin_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glViewportArrayv)(first, count, v);
  }

  void REGAL_CALL plugin_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glViewportIndexedf)(index, x, y, w, h);
  }

  void REGAL_CALL plugin_glViewportIndexedfv(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glViewportIndexedfv)(index, v);
  }

  /* GL_ARB_window_pos */

  void REGAL_CALL plugin_glWindowPos2dARB(GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dARB)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2dvARB(const GLdouble *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dvARB)(p);
  }

  void REGAL_CALL plugin_glWindowPos2fARB(GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fARB)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2fvARB(const GLfloat *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fvARB)(p);
  }

  void REGAL_CALL plugin_glWindowPos2iARB(GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iARB)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2ivARB(const GLint *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2ivARB)(p);
  }

  void REGAL_CALL plugin_glWindowPos2sARB(GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sARB)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2svARB(const GLshort *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2svARB)(p);
  }

  void REGAL_CALL plugin_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dARB)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3dvARB(const GLdouble *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dvARB)(p);
  }

  void REGAL_CALL plugin_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fARB)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3fvARB(const GLfloat *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fvARB)(p);
  }

  void REGAL_CALL plugin_glWindowPos3iARB(GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iARB)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3ivARB(const GLint *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3ivARB)(p);
  }

  void REGAL_CALL plugin_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sARB)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3svARB(const GLshort *p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3svARB)(p);
  }

  /* GL_ATI_draw_buffers */

  void REGAL_CALL plugin_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersATI)(n, bufs);
  }

  /* GL_ATI_element_array */

  void REGAL_CALL plugin_glDrawElementArrayATI(GLenum mode, GLsizei count)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementArrayATI)(mode, count);
  }

  void REGAL_CALL plugin_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementArrayATI)(mode, start, end, count);
  }

  void REGAL_CALL plugin_glElementPointerATI(GLenum type, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glElementPointerATI)(type, pointer);
  }

  /* GL_ATI_envmap_bumpmap */

  void REGAL_CALL plugin_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexBumpParameterfvATI)(pname, param);
  }

  void REGAL_CALL plugin_glGetTexBumpParameterivATI(GLenum pname, GLint *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexBumpParameterivATI)(pname, param);
  }

  void REGAL_CALL plugin_glTexBumpParameterfvATI(GLenum pname, const GLfloat *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexBumpParameterfvATI)(pname, param);
  }

  void REGAL_CALL plugin_glTexBumpParameterivATI(GLenum pname, const GLint *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexBumpParameterivATI)(pname, param);
  }

  /* GL_ATI_fragment_shader */

  void REGAL_CALL plugin_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp1ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
  }

  void REGAL_CALL plugin_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp2ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  }

  void REGAL_CALL plugin_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp3ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  }

  void REGAL_CALL plugin_glBeginFragmentShaderATI(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginFragmentShaderATI)();
  }

  void REGAL_CALL plugin_glBindFragmentShaderATI(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindFragmentShaderATI)(id);
  }

  void REGAL_CALL plugin_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp1ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
  }

  void REGAL_CALL plugin_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp2ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  }

  void REGAL_CALL plugin_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp3ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  }

  void REGAL_CALL plugin_glDeleteFragmentShaderATI(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFragmentShaderATI)(id);
  }

  void REGAL_CALL plugin_glEndFragmentShaderATI(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndFragmentShaderATI)();
  }

  GLuint REGAL_CALL plugin_glGenFragmentShadersATI(GLuint range)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGenFragmentShadersATI)(range);
  }

  void REGAL_CALL plugin_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPassTexCoordATI)(dst, coord, swizzle);
  }

  void REGAL_CALL plugin_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSampleMapATI)(dst, interp, swizzle);
  }

  void REGAL_CALL plugin_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSetFragmentShaderConstantATI)(dst, value);
  }

  /* GL_ATI_map_object_buffer */

  GLvoid *REGAL_CALL plugin_glMapObjectBufferATI(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glMapObjectBufferATI)(buffer);
  }

  void REGAL_CALL plugin_glUnmapObjectBufferATI(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUnmapObjectBufferATI)(buffer);
  }

  /* GL_ATI_pn_triangles */

  void REGAL_CALL plugin_glPNTrianglesfATI(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPNTrianglesfATI)(pname, param);
  }

  void REGAL_CALL plugin_glPNTrianglesiATI(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPNTrianglesiATI)(pname, param);
  }

  /* GL_ATI_separate_stencil */

  void REGAL_CALL plugin_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilFuncSeparateATI)(frontfunc, backfunc, ref, mask);
  }

  void REGAL_CALL plugin_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilOpSeparateATI)(face, sfail, dpfail, dppass);
  }

  /* GL_ATI_vertex_array_object */

  void REGAL_CALL plugin_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glArrayObjectATI)(array, size, type, stride, buffer, offset);
  }

  void REGAL_CALL plugin_glFreeObjectBufferATI(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFreeObjectBufferATI)(buffer);
  }

  void REGAL_CALL plugin_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetArrayObjectfvATI)(array, pname, params);
  }

  void REGAL_CALL plugin_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetArrayObjectivATI)(array, pname, params);
  }

  void REGAL_CALL plugin_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectBufferfvATI)(buffer, pname, params);
  }

  void REGAL_CALL plugin_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectBufferivATI)(buffer, pname, params);
  }

  void REGAL_CALL plugin_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantArrayObjectfvATI)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantArrayObjectivATI)(id, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsObjectBufferATI(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsObjectBufferATI)(buffer);
  }

  GLuint REGAL_CALL plugin_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glNewObjectBufferATI)(size, pointer, usage);
  }

  void REGAL_CALL plugin_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUpdateObjectBufferATI)(buffer, offset, size, pointer, preserve);
  }

  void REGAL_CALL plugin_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantArrayObjectATI)(id, type, stride, buffer, offset);
  }

  /* GL_ATI_vertex_attrib_array_object */

  void REGAL_CALL plugin_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribArrayObjectfvATI)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribArrayObjectivATI)(index, pname, params);
  }

  void REGAL_CALL plugin_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribArrayObjectATI)(index, size, type, normalized, stride, buffer, offset);
  }

  /* GL_ATI_vertex_streams */

  void REGAL_CALL plugin_glClientActiveVertexStreamATI(GLenum stream)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClientActiveVertexStreamATI)(stream);
  }

  void REGAL_CALL plugin_glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3bATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3bvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3dATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3dvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3fATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3fvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3iATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glNormalStream3ivATI(GLenum stream, const GLint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3ivATI)(stream, coords);
  }

  void REGAL_CALL plugin_glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3sATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glNormalStream3svATI(GLenum stream, const GLshort *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3svATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendEnvfATI)(pname, param);
  }

  void REGAL_CALL plugin_glVertexBlendEnviATI(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendEnviATI)(pname, param);
  }

  void REGAL_CALL plugin_glVertexStream1dATI(GLenum stream, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1dATI)(stream, x);
  }

  void REGAL_CALL plugin_glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1dvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream1fATI(GLenum stream, GLfloat x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1fATI)(stream, x);
  }

  void REGAL_CALL plugin_glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1fvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream1iATI(GLenum stream, GLint x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1iATI)(stream, x);
  }

  void REGAL_CALL plugin_glVertexStream1ivATI(GLenum stream, const GLint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1ivATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream1sATI(GLenum stream, GLshort x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1sATI)(stream, x);
  }

  void REGAL_CALL plugin_glVertexStream1svATI(GLenum stream, const GLshort *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1svATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2dATI)(stream, x, y);
  }

  void REGAL_CALL plugin_glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2dvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2fATI)(stream, x, y);
  }

  void REGAL_CALL plugin_glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2fvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2iATI)(stream, x, y);
  }

  void REGAL_CALL plugin_glVertexStream2ivATI(GLenum stream, const GLint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2ivATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2sATI)(stream, x, y);
  }

  void REGAL_CALL plugin_glVertexStream2svATI(GLenum stream, const GLshort *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2svATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3dATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3dvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3fATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3fvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3iATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glVertexStream3ivATI(GLenum stream, const GLint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3ivATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3sATI)(stream, x, y, z);
  }

  void REGAL_CALL plugin_glVertexStream3svATI(GLenum stream, const GLshort *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3svATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4dATI)(stream, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4dvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4fATI)(stream, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4fvATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4iATI)(stream, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexStream4ivATI(GLenum stream, const GLint *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4ivATI)(stream, coords);
  }

  void REGAL_CALL plugin_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4sATI)(stream, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexStream4svATI(GLenum stream, const GLshort *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4svATI)(stream, coords);
  }

  /* GL_EXT_bindable_uniform */

  GLint REGAL_CALL plugin_glGetUniformBufferSizeEXT(GLuint program, GLint location)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetUniformBufferSizeEXT)(program, location);
  }

  GLintptr REGAL_CALL plugin_glGetUniformOffsetEXT(GLuint program, GLint location)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetUniformOffsetEXT)(program, location);
  }

  void REGAL_CALL plugin_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformBufferEXT)(program, location, buffer);
  }

  /* GL_EXT_blend_color */

  void REGAL_CALL plugin_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendColorEXT)(red, green, blue, alpha);
  }

  /* GL_EXT_blend_equation_separate */

  void REGAL_CALL plugin_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateEXT)(modeRGB, modeAlpha);
  }

  /* GL_EXT_blend_func_separate */

  void REGAL_CALL plugin_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateEXT)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }

  /* GL_EXT_blend_minmax */

  void REGAL_CALL plugin_glBlendEquationEXT(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationEXT)(mode);
  }

  /* GL_EXT_color_subtable */

  void REGAL_CALL plugin_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorSubTableEXT)(target, start, count, format, type, table);
  }

  void REGAL_CALL plugin_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyColorSubTableEXT)(target, start, x, y, width);
  }

  /* GL_EXT_compiled_vertex_array */

  void REGAL_CALL plugin_glLockArraysEXT(GLint first, GLsizei count)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLockArraysEXT)(first, count);
  }

  void REGAL_CALL plugin_glUnlockArraysEXT(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUnlockArraysEXT)();
  }

  /* GL_EXT_convolution */

  void REGAL_CALL plugin_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter1DEXT)(target, internalformat, width, format, type, image);
  }

  void REGAL_CALL plugin_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter2DEXT)(target, internalformat, width, height, format, type, image);
  }

  void REGAL_CALL plugin_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfEXT)(target, pname, param);
  }

  void REGAL_CALL plugin_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfvEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteriEXT)(target, pname, param);
  }

  void REGAL_CALL plugin_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterivEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter1DEXT)(target, internalformat, x, y, width);
  }

  void REGAL_CALL plugin_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter2DEXT)(target, internalformat, x, y, width, height);
  }

  void REGAL_CALL plugin_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionFilterEXT)(target, format, type, image);
  }

  void REGAL_CALL plugin_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterfvEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterivEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSeparableFilterEXT)(target, format, type, row, column, span);
  }

  void REGAL_CALL plugin_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSeparableFilter2DEXT)(target, internalformat, width, height, format, type, row, column);
  }

  /* GL_EXT_coordinate_frame */

  void REGAL_CALL plugin_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3bEXT)(bx, by, bz);
  }

  void REGAL_CALL plugin_glBinormal3bvEXT(const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3bvEXT)(v);
  }

  void REGAL_CALL plugin_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3dEXT)(bx, by, bz);
  }

  void REGAL_CALL plugin_glBinormal3dvEXT(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3dvEXT)(v);
  }

  void REGAL_CALL plugin_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3fEXT)(bx, by, bz);
  }

  void REGAL_CALL plugin_glBinormal3fvEXT(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3fvEXT)(v);
  }

  void REGAL_CALL plugin_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3iEXT)(bx, by, bz);
  }

  void REGAL_CALL plugin_glBinormal3ivEXT(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3ivEXT)(v);
  }

  void REGAL_CALL plugin_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3sEXT)(bx, by, bz);
  }

  void REGAL_CALL plugin_glBinormal3svEXT(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3svEXT)(v);
  }

  void REGAL_CALL plugin_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBinormalPointerEXT)(type, stride, pointer);
  }

  void REGAL_CALL plugin_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3bEXT)(tx, ty, tz);
  }

  void REGAL_CALL plugin_glTangent3bvEXT(const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3bvEXT)(v);
  }

  void REGAL_CALL plugin_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3dEXT)(tx, ty, tz);
  }

  void REGAL_CALL plugin_glTangent3dvEXT(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3dvEXT)(v);
  }

  void REGAL_CALL plugin_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3fEXT)(tx, ty, tz);
  }

  void REGAL_CALL plugin_glTangent3fvEXT(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3fvEXT)(v);
  }

  void REGAL_CALL plugin_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3iEXT)(tx, ty, tz);
  }

  void REGAL_CALL plugin_glTangent3ivEXT(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3ivEXT)(v);
  }

  void REGAL_CALL plugin_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3sEXT)(tx, ty, tz);
  }

  void REGAL_CALL plugin_glTangent3svEXT(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangent3svEXT)(v);
  }

  void REGAL_CALL plugin_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTangentPointerEXT)(type, stride, pointer);
  }

  /* GL_EXT_copy_texture */

  void REGAL_CALL plugin_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage1DEXT)(target, level, internalformat, x, y, width, border);
  }

  void REGAL_CALL plugin_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage2DEXT)(target, level, internalformat, x, y, width, height, border);
  }

  void REGAL_CALL plugin_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage1DEXT)(target, level, xoffset, x, y, width);
  }

  void REGAL_CALL plugin_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage2DEXT)(target, level, xoffset, yoffset, x, y, width, height);
  }

  void REGAL_CALL plugin_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  /* GL_EXT_cull_vertex */

  void REGAL_CALL plugin_glCullParameterdvEXT(GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCullParameterdvEXT)(pname, params);
  }

  void REGAL_CALL plugin_glCullParameterfvEXT(GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCullParameterfvEXT)(pname, params);
  }

  /* GL_EXT_debug_label */

  void REGAL_CALL plugin_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectLabelEXT)(type, object, bufSize, length, label);
  }

  void REGAL_CALL plugin_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLabelObjectEXT)(type, object, length, label);
  }

  /* GL_EXT_debug_marker */

  void REGAL_CALL plugin_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInsertEventMarkerEXT)(length, marker);
  }

  void REGAL_CALL plugin_glPopGroupMarkerEXT(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPopGroupMarkerEXT)();
  }

  void REGAL_CALL plugin_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPushGroupMarkerEXT)(length, marker);
  }

  /* GL_EXT_depth_bounds_test */

  void REGAL_CALL plugin_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthBoundsEXT)(zmin, zmax);
  }

  /* GL_EXT_direct_state_access */

  void REGAL_CALL plugin_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindMultiTextureEXT)(texunit, target, texture);
  }

  GLenum REGAL_CALL plugin_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCheckNamedFramebufferStatusEXT)(framebuffer, target);
  }

  void REGAL_CALL plugin_glClientAttribDefaultEXT(GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClientAttribDefaultEXT)(mask);
  }

  void REGAL_CALL plugin_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
  }

  void REGAL_CALL plugin_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
  }

  void REGAL_CALL plugin_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage1DEXT)(texture, target, level, internalformat, width, border, imageSize, bits);
  }

  void REGAL_CALL plugin_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, imageSize, bits);
  }

  void REGAL_CALL plugin_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
  }

  void REGAL_CALL plugin_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, imageSize, bits);
  }

  void REGAL_CALL plugin_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  }

  void REGAL_CALL plugin_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  }

  void REGAL_CALL plugin_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexImage1DEXT)(texunit, target, level, internalformat, x, y, width, border);
  }

  void REGAL_CALL plugin_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexImage2DEXT)(texunit, target, level, internalformat, x, y, width, height, border);
  }

  void REGAL_CALL plugin_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage1DEXT)(texunit, target, level, xoffset, x, y, width);
  }

  void REGAL_CALL plugin_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, x, y, width, height);
  }

  void REGAL_CALL plugin_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  void REGAL_CALL plugin_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureImage1DEXT)(texture, target, level, internalformat, x, y, width, border);
  }

  void REGAL_CALL plugin_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureImage2DEXT)(texture, target, level, internalformat, x, y, width, height, border);
  }

  void REGAL_CALL plugin_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage1DEXT)(texture, target, level, xoffset, x, y, width);
  }

  void REGAL_CALL plugin_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, x, y, width, height);
  }

  void REGAL_CALL plugin_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  void REGAL_CALL plugin_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableClientStateIndexedEXT)(array, index);
  }

  void REGAL_CALL plugin_glDisableClientStateiEXT(GLenum array, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableClientStateiEXT)(array, index);
  }

  void REGAL_CALL plugin_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexArrayAttribEXT)(vaobj, array);
  }

  void REGAL_CALL plugin_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexArrayEXT)(vaobj, array);
  }

  void REGAL_CALL plugin_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableClientStateIndexedEXT)(array, index);
  }

  void REGAL_CALL plugin_glEnableClientStateiEXT(GLenum array, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableClientStateiEXT)(array, index);
  }

  void REGAL_CALL plugin_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexArrayAttribEXT)(vaobj, array);
  }

  void REGAL_CALL plugin_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexArrayEXT)(vaobj, array);
  }

  void REGAL_CALL plugin_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedNamedBufferRangeEXT)(buffer, offset, length);
  }

  void REGAL_CALL plugin_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferDrawBufferEXT)(framebuffer, mode);
  }

  void REGAL_CALL plugin_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferDrawBuffersEXT)(framebuffer, n, bufs);
  }

  void REGAL_CALL plugin_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferReadBufferEXT)(framebuffer, mode);
  }

  void REGAL_CALL plugin_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenerateMultiTexMipmapEXT)(texunit, target);
  }

  void REGAL_CALL plugin_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenerateTextureMipmapEXT)(texture, target);
  }

  void REGAL_CALL plugin_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedMultiTexImageEXT)(texunit, target, lod, img);
  }

  void REGAL_CALL plugin_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTextureImageEXT)(texture, target, lod, img);
  }

  void REGAL_CALL plugin_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetDoubleIndexedvEXT)(target, index, data);
  }

  void REGAL_CALL plugin_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetDoublei_vEXT)(target, index, data);
  }

  void REGAL_CALL plugin_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFloatIndexedvEXT)(target, index, data);
  }

  void REGAL_CALL plugin_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFloati_vEXT)(target, index, data);
  }

  void REGAL_CALL plugin_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferParameterivEXT)(framebuffer, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexEnvfvEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexEnvivEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGendvEXT)(texunit, coord, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGenfvEXT)(texunit, coord, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGenivEXT)(texunit, coord, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexImageEXT)(texunit, target, level, format, type, pixels);
  }

  void REGAL_CALL plugin_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexLevelParameterfvEXT)(texunit, target, level, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexLevelParameterivEXT)(texunit, target, level, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterIivEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterIuivEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterfvEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterivEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferParameterivEXT)(buffer, pname, params);
  }

  void REGAL_CALL plugin_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferPointervEXT)(buffer, pname, params);
  }

  void REGAL_CALL plugin_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferSubDataEXT)(buffer, offset, size, data);
  }

  void REGAL_CALL plugin_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedFramebufferAttachmentParameterivEXT)(framebuffer, attachment, pname, params);
  }

  void REGAL_CALL plugin_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterIivEXT)(program, target, index, params);
  }

  void REGAL_CALL plugin_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterIuivEXT)(program, target, index, params);
  }

  void REGAL_CALL plugin_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterdvEXT)(program, target, index, params);
  }

  void REGAL_CALL plugin_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterfvEXT)(program, target, index, params);
  }

  void REGAL_CALL plugin_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramStringEXT)(program, target, pname, string);
  }

  void REGAL_CALL plugin_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramivEXT)(program, target, pname, params);
  }

  void REGAL_CALL plugin_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedRenderbufferParameterivEXT)(renderbuffer, pname, params);
  }

  void REGAL_CALL plugin_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPointerIndexedvEXT)(target, index, data);
  }

  void REGAL_CALL plugin_glGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPointeri_vEXT)(pname, index, params);
  }

  void REGAL_CALL plugin_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureImageEXT)(texture, target, level, format, type, pixels);
  }

  void REGAL_CALL plugin_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureLevelParameterfvEXT)(texture, target, level, pname, params);
  }

  void REGAL_CALL plugin_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureLevelParameterivEXT)(texture, target, level, pname, params);
  }

  void REGAL_CALL plugin_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterIivEXT)(texture, target, pname, params);
  }

  void REGAL_CALL plugin_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterIuivEXT)(texture, target, pname, params);
  }

  void REGAL_CALL plugin_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterfvEXT)(texture, target, pname, params);
  }

  void REGAL_CALL plugin_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterivEXT)(texture, target, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayIntegeri_vEXT)(vaobj, index, pname, param);
  }

  void REGAL_CALL plugin_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayIntegervEXT)(vaobj, pname, param);
  }

  void REGAL_CALL plugin_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayPointeri_vEXT)(vaobj, index, pname, param);
  }

  void REGAL_CALL plugin_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid **param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayPointervEXT)(vaobj, pname, param);
  }

  GLvoid *REGAL_CALL plugin_glMapNamedBufferEXT(GLuint buffer, GLenum access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glMapNamedBufferEXT)(buffer, access);
  }

  GLvoid *REGAL_CALL plugin_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glMapNamedBufferRangeEXT)(buffer, offset, length, access);
  }

  void REGAL_CALL plugin_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar);
  }

  void REGAL_CALL plugin_glMatrixLoadIdentityEXT(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadIdentityEXT)(mode);
  }

  void REGAL_CALL plugin_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadTransposedEXT)(mode, m);
  }

  void REGAL_CALL plugin_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadTransposefEXT)(mode, m);
  }

  void REGAL_CALL plugin_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoaddEXT)(mode, m);
  }

  void REGAL_CALL plugin_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadfEXT)(mode, m);
  }

  void REGAL_CALL plugin_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultTransposedEXT)(mode, m);
  }

  void REGAL_CALL plugin_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultTransposefEXT)(mode, m);
  }

  void REGAL_CALL plugin_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultdEXT)(mode, m);
  }

  void REGAL_CALL plugin_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultfEXT)(mode, m);
  }

  void REGAL_CALL plugin_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar);
  }

  void REGAL_CALL plugin_glMatrixPopEXT(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixPopEXT)(mode);
  }

  void REGAL_CALL plugin_glMatrixPushEXT(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixPushEXT)(mode);
  }

  void REGAL_CALL plugin_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixRotatedEXT)(mode, angle, x, y, z);
  }

  void REGAL_CALL plugin_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixRotatefEXT)(mode, angle, x, y, z);
  }

  void REGAL_CALL plugin_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixScaledEXT)(mode, x, y, z);
  }

  void REGAL_CALL plugin_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixScalefEXT)(mode, x, y, z);
  }

  void REGAL_CALL plugin_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixTranslatedEXT)(mode, x, y, z);
  }

  void REGAL_CALL plugin_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixTranslatefEXT)(mode, x, y, z);
  }

  void REGAL_CALL plugin_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexBufferEXT)(texunit, target, internalformat, buffer);
  }

  void REGAL_CALL plugin_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordPointerEXT)(texunit, size, type, stride, pointer);
  }

  void REGAL_CALL plugin_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvfEXT)(texunit, target, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvfvEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnviEXT)(texunit, target, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvivEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGendEXT)(texunit, coord, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGendvEXT)(texunit, coord, pname, params);
  }

  void REGAL_CALL plugin_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenfEXT)(texunit, coord, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenfvEXT)(texunit, coord, pname, params);
  }

  void REGAL_CALL plugin_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGeniEXT)(texunit, coord, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenivEXT)(texunit, coord, pname, params);
  }

  void REGAL_CALL plugin_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterIivEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterIuivEXT)(texunit, target, pname, params);
  }

  void REGAL_CALL plugin_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterfEXT)(texunit, target, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterfvEXT)(texunit, target, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameteriEXT)(texunit, target, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterivEXT)(texunit, target, pname, param);
  }

  void REGAL_CALL plugin_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexRenderbufferEXT)(texunit, target, renderbuffer);
  }

  void REGAL_CALL plugin_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, type, pixels);
  }

  void REGAL_CALL plugin_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
  }

  void REGAL_CALL plugin_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

  void REGAL_CALL plugin_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedBufferDataEXT)(buffer, size, data, usage);
  }

  void REGAL_CALL plugin_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedBufferSubDataEXT)(buffer, offset, size, data);
  }

  void REGAL_CALL plugin_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedCopyBufferSubDataEXT)(readBuffer, writeBuffer, readOffset, writeOffset, size);
  }

  void REGAL_CALL plugin_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferRenderbufferEXT)(framebuffer, attachment, renderbuffertarget, renderbuffer);
  }

  void REGAL_CALL plugin_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture1DEXT)(framebuffer, attachment, textarget, texture, level);
  }

  void REGAL_CALL plugin_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture2DEXT)(framebuffer, attachment, textarget, texture, level);
  }

  void REGAL_CALL plugin_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture3DEXT)(framebuffer, attachment, textarget, texture, level, zoffset);
  }

  void REGAL_CALL plugin_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureEXT)(framebuffer, attachment, texture, level);
  }

  void REGAL_CALL plugin_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureFaceEXT)(framebuffer, attachment, texture, level, face);
  }

  void REGAL_CALL plugin_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureLayerEXT)(framebuffer, attachment, texture, level, layer);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4dEXT)(program, target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4dvEXT)(program, target, index, params);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4fEXT)(program, target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4fvEXT)(program, target, index, params);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4iEXT)(program, target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4ivEXT)(program, target, index, params);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4uiEXT)(program, target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4uivEXT)(program, target, index, params);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameters4fvEXT)(program, target, index, count, params);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParametersI4ivEXT)(program, target, index, count, params);
  }

  void REGAL_CALL plugin_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParametersI4uivEXT)(program, target, index, count, params);
  }

  void REGAL_CALL plugin_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramStringEXT)(program, target, format, len, string);
  }

  void REGAL_CALL plugin_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageEXT)(renderbuffer, internalformat, width, height);
  }

  void REGAL_CALL plugin_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageMultisampleCoverageEXT)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
  }

  void REGAL_CALL plugin_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageMultisampleEXT)(renderbuffer, samples, internalformat, width, height);
  }

  void REGAL_CALL plugin_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dEXT)(program, location, x);
  }

  void REGAL_CALL plugin_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dvEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fEXT)(program, location, v0);
  }

  void REGAL_CALL plugin_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fvEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1iEXT)(program, location, v0);
  }

  void REGAL_CALL plugin_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ivEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uiEXT)(program, location, v0);
  }

  void REGAL_CALL plugin_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uivEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dEXT)(program, location, x, y);
  }

  void REGAL_CALL plugin_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dvEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fEXT)(program, location, v0, v1);
  }

  void REGAL_CALL plugin_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fvEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2iEXT)(program, location, v0, v1);
  }

  void REGAL_CALL plugin_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ivEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uiEXT)(program, location, v0, v1);
  }

  void REGAL_CALL plugin_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uivEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dEXT)(program, location, x, y, z);
  }

  void REGAL_CALL plugin_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dvEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fEXT)(program, location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fvEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3iEXT)(program, location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ivEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uiEXT)(program, location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uivEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dEXT)(program, location, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dvEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fEXT)(program, location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fvEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4iEXT)(program, location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ivEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uiEXT)(program, location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uivEXT)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3dvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3fvEXT)(program, location, count, transpose, value);
  }

  void REGAL_CALL plugin_glPushClientAttribDefaultEXT(GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPushClientAttribDefaultEXT)(mask);
  }

  void REGAL_CALL plugin_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureBufferEXT)(texture, target, internalformat, buffer);
  }

  void REGAL_CALL plugin_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage1DEXT)(texture, target, level, internalformat, width, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterIivEXT)(texture, target, pname, params);
  }

  void REGAL_CALL plugin_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterIuivEXT)(texture, target, pname, params);
  }

  void REGAL_CALL plugin_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterfEXT)(texture, target, pname, param);
  }

  void REGAL_CALL plugin_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterfvEXT)(texture, target, pname, param);
  }

  void REGAL_CALL plugin_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameteriEXT)(texture, target, pname, param);
  }

  void REGAL_CALL plugin_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterivEXT)(texture, target, pname, param);
  }

  void REGAL_CALL plugin_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureRenderbufferEXT)(texture, target, renderbuffer);
  }

  void REGAL_CALL plugin_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, type, pixels);
  }

  void REGAL_CALL plugin_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
  }

  void REGAL_CALL plugin_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

  GLboolean REGAL_CALL plugin_glUnmapNamedBufferEXT(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glUnmapNamedBufferEXT)(buffer);
  }

  void REGAL_CALL plugin_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayEdgeFlagOffsetEXT)(vaobj, buffer, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayFogCoordOffsetEXT)(vaobj, buffer, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayIndexOffsetEXT)(vaobj, buffer, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayMultiTexCoordOffsetEXT)(vaobj, buffer, texunit, size, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayNormalOffsetEXT)(vaobj, buffer, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArraySecondaryColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayTexCoordOffsetEXT)(vaobj, buffer, size, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribIOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribOffsetEXT)(vaobj, buffer, index, size, type, normalized, stride, offset);
  }

  void REGAL_CALL plugin_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexOffsetEXT)(vaobj, buffer, size, type, stride, offset);
  }

  /* GL_EXT_discard_framebuffer */

  void REGAL_CALL plugin_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDiscardFramebufferEXT)(target, numAttachments, attachments);
  }

  /* GL_EXT_disjoint_timer_query */

  void REGAL_CALL plugin_glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectivEXT)(id, pname, params);
  }

  void REGAL_CALL plugin_glQueryCounterEXT(GLuint id, GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glQueryCounterEXT)(id, target);
  }

  /* GL_EXT_draw_buffers2 */

  void REGAL_CALL plugin_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorMaskIndexedEXT)(buf, r, g, b, a);
  }

  void REGAL_CALL plugin_glDisableIndexedEXT(GLenum target, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableIndexedEXT)(target, index);
  }

  void REGAL_CALL plugin_glEnableIndexedEXT(GLenum target, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableIndexedEXT)(target, index);
  }

  void REGAL_CALL plugin_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBooleanIndexedvEXT)(value, index, data);
  }

  void REGAL_CALL plugin_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerIndexedvEXT)(value, index, data);
  }

  GLboolean REGAL_CALL plugin_glIsEnabledIndexedEXT(GLenum target, GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsEnabledIndexedEXT)(target, index);
  }

  /* GL_EXT_draw_instanced */

  void REGAL_CALL plugin_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedEXT)(mode, start, count, primcount);
  }

  void REGAL_CALL plugin_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedEXT)(mode, count, type, indices, primcount);
  }

  /* GL_EXT_draw_range_elements */

  void REGAL_CALL plugin_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementsEXT)(mode, start, end, count, type, indices);
  }

  /* GL_EXT_fog_coord */

  void REGAL_CALL plugin_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointerEXT)(type, stride, pointer);
  }

  void REGAL_CALL plugin_glFogCoorddEXT(GLdouble coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddEXT)(coord);
  }

  void REGAL_CALL plugin_glFogCoorddvEXT(const GLdouble *coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddvEXT)(coord);
  }

  void REGAL_CALL plugin_glFogCoordfEXT(GLfloat coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfEXT)(coord);
  }

  void REGAL_CALL plugin_glFogCoordfvEXT(const GLfloat *coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfvEXT)(coord);
  }

  /* GL_EXT_fragment_lighting */

  void REGAL_CALL plugin_glFragmentColorMaterialEXT(GLenum face, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentColorMaterialEXT)(face, mode);
  }

  void REGAL_CALL plugin_glFragmentLightModelfEXT(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfEXT)(pname, param);
  }

  void REGAL_CALL plugin_glFragmentLightModelfvEXT(GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfvEXT)(pname, params);
  }

  void REGAL_CALL plugin_glFragmentLightModeliEXT(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModeliEXT)(pname, param);
  }

  void REGAL_CALL plugin_glFragmentLightModelivEXT(GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelivEXT)(pname, params);
  }

  void REGAL_CALL plugin_glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfEXT)(light, pname, param);
  }

  void REGAL_CALL plugin_glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfvEXT)(light, pname, params);
  }

  void REGAL_CALL plugin_glFragmentLightiEXT(GLenum light, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightiEXT)(light, pname, param);
  }

  void REGAL_CALL plugin_glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightivEXT)(light, pname, params);
  }

  void REGAL_CALL plugin_glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfEXT)(face, pname, param);
  }

  void REGAL_CALL plugin_glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfvEXT)(face, pname, params);
  }

  void REGAL_CALL plugin_glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialiEXT)(face, pname, param);
  }

  void REGAL_CALL plugin_glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialivEXT)(face, pname, params);
  }

  void REGAL_CALL plugin_glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightfvEXT)(light, pname, params);
  }

  void REGAL_CALL plugin_glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightivEXT)(light, pname, params);
  }

  void REGAL_CALL plugin_glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialfvEXT)(face, pname, params);
  }

  void REGAL_CALL plugin_glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialivEXT)(face, pname, params);
  }

  void REGAL_CALL plugin_glLightEnviEXT(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightEnviEXT)(pname, param);
  }

  /* GL_EXT_framebuffer_blit */

  void REGAL_CALL plugin_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebufferEXT)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  /* GL_EXT_framebuffer_multisample */

  void REGAL_CALL plugin_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleEXT)(target, samples, internalformat, width, height);
  }

  /* GL_EXT_framebuffer_object */

  void REGAL_CALL plugin_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindFramebufferEXT)(target, framebuffer);
  }

  void REGAL_CALL plugin_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbufferEXT)(target, renderbuffer);
  }

  GLenum REGAL_CALL plugin_glCheckFramebufferStatusEXT(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCheckFramebufferStatusEXT)(target);
  }

  void REGAL_CALL plugin_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffersEXT)(n, framebuffers);
  }

  void REGAL_CALL plugin_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffersEXT)(n, renderbuffers);
  }

  void REGAL_CALL plugin_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbufferEXT)(target, attachment, renderbuffertarget, renderbuffer);
  }

  void REGAL_CALL plugin_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture1DEXT)(target, attachment, textarget, texture, level);
  }

  void REGAL_CALL plugin_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DEXT)(target, attachment, textarget, texture, level);
  }

  void REGAL_CALL plugin_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3DEXT)(target, attachment, textarget, texture, level, zoffset);
  }

  void REGAL_CALL plugin_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffersEXT)(n, framebuffers);
  }

  void REGAL_CALL plugin_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffersEXT)(n, renderbuffers);
  }

  void REGAL_CALL plugin_glGenerateMipmapEXT(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmapEXT)(target);
  }

  void REGAL_CALL plugin_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameterivEXT)(target, attachment, pname, params);
  }

  void REGAL_CALL plugin_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameterivEXT)(target, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsFramebufferEXT(GLuint framebuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsFramebufferEXT)(framebuffer);
  }

  GLboolean REGAL_CALL plugin_glIsRenderbufferEXT(GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsRenderbufferEXT)(renderbuffer);
  }

  void REGAL_CALL plugin_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageEXT)(target, internalformat, width, height);
  }

  /* GL_EXT_geometry_shader4 */

  void REGAL_CALL plugin_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureEXT)(target, attachment, texture, level);
  }

  void REGAL_CALL plugin_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFaceEXT)(target, attachment, texture, level, face);
  }

  void REGAL_CALL plugin_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteriEXT)(program, pname, value);
  }

  /* GL_EXT_gpu_program_parameters */

  void REGAL_CALL plugin_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameters4fvEXT)(target, index, count, params);
  }

  void REGAL_CALL plugin_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameters4fvEXT)(target, index, count, params);
  }

  /* GL_EXT_gpu_shader4 */

  void REGAL_CALL plugin_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocationEXT)(program, color, name);
  }

  GLint REGAL_CALL plugin_glGetFragDataLocationEXT(GLuint program, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetFragDataLocationEXT)(program, name);
  }

  void REGAL_CALL plugin_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformuivEXT)(program, location, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIivEXT)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIuivEXT)(index, pname, params);
  }

  void REGAL_CALL plugin_glUniform1uiEXT(GLint location, GLuint v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1uiEXT)(location, v0);
  }

  void REGAL_CALL plugin_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1uivEXT)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2uiEXT)(location, v0, v1);
  }

  void REGAL_CALL plugin_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2uivEXT)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3uiEXT)(location, v0, v1, v2);
  }

  void REGAL_CALL plugin_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3uivEXT)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4uiEXT)(location, v0, v1, v2, v3);
  }

  void REGAL_CALL plugin_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4uivEXT)(location, count, value);
  }

  void REGAL_CALL plugin_glVertexAttribI1iEXT(GLuint index, GLint x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1iEXT)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttribI1ivEXT(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1ivEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI1uiEXT(GLuint index, GLuint x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uiEXT)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uivEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2iEXT)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttribI2ivEXT(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2ivEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uiEXT)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uivEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3iEXT)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttribI3ivEXT(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3ivEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uiEXT)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uivEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4bvEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4iEXT)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttribI4ivEXT(GLuint index, const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ivEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4svEXT(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4svEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ubvEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uiEXT)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uivEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4usvEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIPointerEXT)(index, size, type, stride, pointer);
  }

  /* GL_EXT_histogram */

  void REGAL_CALL plugin_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramEXT)(target, reset, format, type, values);
  }

  void REGAL_CALL plugin_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterfvEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterivEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxEXT)(target, reset, format, type, values);
  }

  void REGAL_CALL plugin_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterfvEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterivEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glHistogramEXT)(target, width, internalformat, sink);
  }

  void REGAL_CALL plugin_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMinmaxEXT)(target, internalformat, sink);
  }

  void REGAL_CALL plugin_glResetHistogramEXT(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glResetHistogramEXT)(target);
  }

  void REGAL_CALL plugin_glResetMinmaxEXT(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glResetMinmaxEXT)(target);
  }

  /* GL_EXT_index_func */

  void REGAL_CALL plugin_glIndexFuncEXT(GLenum func, GLfloat ref)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexFuncEXT)(func, ref);
  }

  /* GL_EXT_index_material */

  void REGAL_CALL plugin_glIndexMaterialEXT(GLenum face, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexMaterialEXT)(face, mode);
  }

  /* GL_EXT_light_texture */

  void REGAL_CALL plugin_glApplyTextureEXT(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glApplyTextureEXT)(mode);
  }

  void REGAL_CALL plugin_glTextureLightEXT(GLenum pname)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureLightEXT)(pname);
  }

  void REGAL_CALL plugin_glTextureMaterialEXT(GLenum face, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureMaterialEXT)(face, mode);
  }

  /* GL_EXT_map_buffer_range */

  void REGAL_CALL plugin_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRangeEXT)(target, offset, length);
  }

  GLvoid *REGAL_CALL plugin_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glMapBufferRangeEXT)(target, offset, length, access);
  }

  /* GL_EXT_multi_draw_arrays */

  void REGAL_CALL plugin_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysEXT)(mode, first, count, primcount);
  }

  void REGAL_CALL plugin_glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsEXT)(mode, count, type, indices, primcount);
  }

  /* GL_EXT_multisample */

  void REGAL_CALL plugin_glSampleMaskEXT(GLclampf value, GLboolean invert)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskEXT)(value, invert);
  }

  void REGAL_CALL plugin_glSamplePatternEXT(GLenum pattern)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSamplePatternEXT)(pattern);
  }

  /* GL_EXT_multisampled_render_to_texture */

  void REGAL_CALL plugin_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DMultisampleEXT)(target, attachment, textarget, texture, level, samples);
  }

  /* GL_EXT_multiview_draw_buffers */

  void REGAL_CALL plugin_glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersIndexedEXT)(n, location, indices);
  }

  void REGAL_CALL plugin_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegeri_vEXT)(target, index, data);
  }

  void REGAL_CALL plugin_glReadBufferIndexedEXT(GLenum src, GLint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadBufferIndexedEXT)(src, index);
  }

  /* GL_EXT_occlusion_query_boolean */

  void REGAL_CALL plugin_glBeginQueryEXT(GLenum target, GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryEXT)(target, id);
  }

  void REGAL_CALL plugin_glDeleteQueriesEXT(GLsizei n, const GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueriesEXT)(n, ids);
  }

  void REGAL_CALL plugin_glEndQueryEXT(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndQueryEXT)(target);
  }

  void REGAL_CALL plugin_glGenQueriesEXT(GLsizei n, GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenQueriesEXT)(n, ids);
  }

  void REGAL_CALL plugin_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuivEXT)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetQueryivEXT(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryivEXT)(target, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsQueryEXT(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsQueryEXT)(id);
  }

  /* GL_EXT_paletted_texture */

  void REGAL_CALL plugin_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorTableEXT)(target, internalFormat, width, format, type, table);
  }

  void REGAL_CALL plugin_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableEXT)(target, format, type, data);
  }

  void REGAL_CALL plugin_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfvEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterivEXT)(target, pname, params);
  }

  /* GL_EXT_pixel_transform */

  void REGAL_CALL plugin_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTransformParameterfvEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTransformParameterivEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterfEXT)(target, pname, param);
  }

  void REGAL_CALL plugin_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterfvEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameteriEXT)(target, pname, param);
  }

  void REGAL_CALL plugin_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterivEXT)(target, pname, params);
  }

  /* GL_EXT_point_parameters */

  void REGAL_CALL plugin_glPointParameterfEXT(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfEXT)(pname, param);
  }

  void REGAL_CALL plugin_glPointParameterfvEXT(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvEXT)(pname, params);
  }

  /* GL_EXT_polygon_offset */

  void REGAL_CALL plugin_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPolygonOffsetEXT)(factor, bias);
  }

  /* GL_EXT_provoking_vertex */

  void REGAL_CALL plugin_glProvokingVertexEXT(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProvokingVertexEXT)(mode);
  }

  /* GL_EXT_robustness */

  void REGAL_CALL plugin_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformfvEXT)(program, location, bufSize, params);
  }

  void REGAL_CALL plugin_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformivEXT)(program, location, bufSize, params);
  }

  void REGAL_CALL plugin_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadnPixelsEXT)(x, y, width, height, format, type, bufSize, data);
  }

  /* GL_EXT_scene_marker */

  void REGAL_CALL plugin_glBeginSceneEXT(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginSceneEXT)();
  }

  void REGAL_CALL plugin_glEndSceneEXT(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndSceneEXT)();
  }

  /* GL_EXT_secondary_color */

  void REGAL_CALL plugin_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bEXT)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3bvEXT(const GLbyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bvEXT)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dEXT)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3dvEXT(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dvEXT)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fEXT)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3fvEXT(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fvEXT)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3iEXT)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3ivEXT(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ivEXT)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3sEXT)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3svEXT(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3svEXT)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubEXT)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3ubvEXT(const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubvEXT)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uiEXT)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3uivEXT(const GLuint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uivEXT)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usEXT)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3usvEXT(const GLushort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usvEXT)(v);
  }

  void REGAL_CALL plugin_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointerEXT)(size, type, stride, pointer);
  }

  /* GL_EXT_separate_shader_objects */

  void REGAL_CALL plugin_glActiveProgramEXT(GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glActiveProgramEXT)(program);
  }

  GLuint REGAL_CALL plugin_glCreateShaderProgramEXT(GLenum type, const GLchar *string)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCreateShaderProgramEXT)(type, string);
  }

  void REGAL_CALL plugin_glUseShaderProgramEXT(GLenum type, GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUseShaderProgramEXT)(type, program);
  }

  /* GL_EXT_shader_image_load_store */

  void REGAL_CALL plugin_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindImageTextureEXT)(index, texture, level, layered, layer, access, format);
  }

  void REGAL_CALL plugin_glMemoryBarrierEXT(GLbitfield barriers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMemoryBarrierEXT)(barriers);
  }

  /* GL_EXT_stencil_clear_tag */

  void REGAL_CALL plugin_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilClearTagEXT)(stencilTagBits, stencilClearTag);
  }

  /* GL_EXT_stencil_two_side */

  void REGAL_CALL plugin_glActiveStencilFaceEXT(GLenum face)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glActiveStencilFaceEXT)(face);
  }

  /* GL_EXT_subtexture */

  void REGAL_CALL plugin_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage1DEXT)(target, level, xoffset, width, format, type, pixels);
  }

  void REGAL_CALL plugin_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage2DEXT)(target, level, xoffset, yoffset, width, height, format, type, pixels);
  }

  void REGAL_CALL plugin_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

  /* GL_EXT_texture3D */

  void REGAL_CALL plugin_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DEXT)(target, level, internalformat, width, height, depth, border, format, type, pixels);
  }

  /* GL_EXT_texture_array */

  void REGAL_CALL plugin_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayerEXT)(target, attachment, texture, level, layer);
  }

  /* GL_EXT_texture_buffer_object */

  void REGAL_CALL plugin_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexBufferEXT)(target, internalformat, buffer);
  }

  /* GL_EXT_texture_integer */

  void REGAL_CALL plugin_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearColorIiEXT)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearColorIuiEXT)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIivEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIuivEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIivEXT)(target, pname, params);
  }

  void REGAL_CALL plugin_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIuivEXT)(target, pname, params);
  }

  /* GL_EXT_texture_object */

  GLboolean REGAL_CALL plugin_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glAreTexturesResidentEXT)(n, textures, residences);
  }

  void REGAL_CALL plugin_glBindTextureEXT(GLenum target, GLuint texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindTextureEXT)(target, texture);
  }

  void REGAL_CALL plugin_glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteTexturesEXT)(n, textures);
  }

  void REGAL_CALL plugin_glGenTexturesEXT(GLsizei n, GLuint *textures)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenTexturesEXT)(n, textures);
  }

  GLboolean REGAL_CALL plugin_glIsTextureEXT(GLuint texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsTextureEXT)(texture);
  }

  void REGAL_CALL plugin_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPrioritizeTexturesEXT)(n, textures, priorities);
  }

  /* GL_EXT_texture_perturb_normal */

  void REGAL_CALL plugin_glTextureNormalEXT(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureNormalEXT)(mode);
  }

  /* GL_EXT_texture_storage */

  void REGAL_CALL plugin_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage1DEXT)(target, levels, internalformat, width);
  }

  void REGAL_CALL plugin_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2DEXT)(target, levels, internalformat, width, height);
  }

  void REGAL_CALL plugin_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3DEXT)(target, levels, internalformat, width, height, depth);
  }

  /* GL_EXT_timer_query */

  void REGAL_CALL plugin_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjecti64vEXT)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectui64vEXT)(id, pname, params);
  }

  /* GL_EXT_transform_feedback */

  void REGAL_CALL plugin_glBeginTransformFeedbackEXT(GLenum primitiveMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedbackEXT)(primitiveMode);
  }

  void REGAL_CALL plugin_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBaseEXT)(target, index, buffer);
  }

  void REGAL_CALL plugin_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferOffsetEXT)(target, index, buffer, offset);
  }

  void REGAL_CALL plugin_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRangeEXT)(target, index, buffer, offset, size);
  }

  void REGAL_CALL plugin_glEndTransformFeedbackEXT(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedbackEXT)();
  }

  void REGAL_CALL plugin_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVaryingEXT)(program, index, bufSize, length, size, type, name);
  }

  void REGAL_CALL plugin_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryingsEXT)(program, count, varyings, bufferMode);
  }

  /* GL_EXT_vertex_array */

  void REGAL_CALL plugin_glArrayElementEXT(GLint i)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glArrayElementEXT)(i);
  }

  void REGAL_CALL plugin_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorPointerEXT)(size, type, stride, count, pointer);
  }

  void REGAL_CALL plugin_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysEXT)(mode, first, count);
  }

  void REGAL_CALL plugin_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointerEXT)(stride, count, pointer);
  }

  void REGAL_CALL plugin_glGetPointervEXT(GLenum pname, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPointervEXT)(pname, params);
  }

  void REGAL_CALL plugin_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexPointerEXT)(type, stride, count, pointer);
  }

  void REGAL_CALL plugin_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalPointerEXT)(type, stride, count, pointer);
  }

  void REGAL_CALL plugin_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointerEXT)(size, type, stride, count, pointer);
  }

  void REGAL_CALL plugin_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexPointerEXT)(size, type, stride, count, pointer);
  }

  /* GL_EXT_vertex_attrib_64bit */

  void REGAL_CALL plugin_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLdvEXT)(index, pname, params);
  }

  void REGAL_CALL plugin_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribLOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
  }

  void REGAL_CALL plugin_glVertexAttribL1dEXT(GLuint index, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dEXT)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dvEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dEXT)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dvEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dEXT)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dvEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dEXT)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dvEXT)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLPointerEXT)(index, size, type, stride, pointer);
  }

  /* GL_EXT_vertex_shader */

  void REGAL_CALL plugin_glBeginVertexShaderEXT(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginVertexShaderEXT)();
  }

  GLuint REGAL_CALL plugin_glBindLightParameterEXT(GLenum light, GLenum value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glBindLightParameterEXT)(light, value);
  }

  GLuint REGAL_CALL plugin_glBindMaterialParameterEXT(GLenum face, GLenum value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glBindMaterialParameterEXT)(face, value);
  }

  GLuint REGAL_CALL plugin_glBindParameterEXT(GLenum value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glBindParameterEXT)(value);
  }

  GLuint REGAL_CALL plugin_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glBindTexGenParameterEXT)(unit, coord, value);
  }

  GLuint REGAL_CALL plugin_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glBindTextureUnitParameterEXT)(unit, value);
  }

  void REGAL_CALL plugin_glBindVertexShaderEXT(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexShaderEXT)(id);
  }

  void REGAL_CALL plugin_glDeleteVertexShaderEXT(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexShaderEXT)(id);
  }

  void REGAL_CALL plugin_glDisableVariantClientStateEXT(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableVariantClientStateEXT)(id);
  }

  void REGAL_CALL plugin_glEnableVariantClientStateEXT(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableVariantClientStateEXT)(id);
  }

  void REGAL_CALL plugin_glEndVertexShaderEXT(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndVertexShaderEXT)();
  }

  void REGAL_CALL plugin_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtractComponentEXT)(res, src, num);
  }

  GLuint REGAL_CALL plugin_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGenSymbolsEXT)(datatype, storagetype, range, components);
  }

  GLuint REGAL_CALL plugin_glGenVertexShadersEXT(GLuint range)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGenVertexShadersEXT)(range);
  }

  void REGAL_CALL plugin_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantBooleanvEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantFloatvEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantIntegervEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantBooleanvEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantFloatvEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantIntegervEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantBooleanvEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantFloatvEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantIntegervEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantPointervEXT)(id, value, data);
  }

  void REGAL_CALL plugin_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInsertComponentEXT)(res, src, num);
  }

  GLboolean REGAL_CALL plugin_glIsVariantEnabledEXT(GLuint id, GLenum cap)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsVariantEnabledEXT)(id, cap);
  }

  void REGAL_CALL plugin_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSetInvariantEXT)(id, type, addr);
  }

  void REGAL_CALL plugin_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSetLocalConstantEXT)(id, type, addr);
  }

  void REGAL_CALL plugin_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glShaderOp1EXT)(op, res, arg1);
  }

  void REGAL_CALL plugin_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glShaderOp2EXT)(op, res, arg1, arg2);
  }

  void REGAL_CALL plugin_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glShaderOp3EXT)(op, res, arg1, arg2, arg3);
  }

  void REGAL_CALL plugin_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSwizzleEXT)(res, in, outX, outY, outZ, outW);
  }

  void REGAL_CALL plugin_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantPointerEXT)(id, type, stride, addr);
  }

  void REGAL_CALL plugin_glVariantbvEXT(GLuint id, const GLbyte *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantbvEXT)(id, addr);
  }

  void REGAL_CALL plugin_glVariantdvEXT(GLuint id, const GLdouble *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantdvEXT)(id, addr);
  }

  void REGAL_CALL plugin_glVariantfvEXT(GLuint id, const GLfloat *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantfvEXT)(id, addr);
  }

  void REGAL_CALL plugin_glVariantivEXT(GLuint id, const GLint *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantivEXT)(id, addr);
  }

  void REGAL_CALL plugin_glVariantsvEXT(GLuint id, const GLshort *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantsvEXT)(id, addr);
  }

  void REGAL_CALL plugin_glVariantubvEXT(GLuint id, const GLubyte *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantubvEXT)(id, addr);
  }

  void REGAL_CALL plugin_glVariantuivEXT(GLuint id, const GLuint *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantuivEXT)(id, addr);
  }

  void REGAL_CALL plugin_glVariantusvEXT(GLuint id, const GLushort *addr)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVariantusvEXT)(id, addr);
  }

  void REGAL_CALL plugin_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWriteMaskEXT)(res, in, outX, outY, outZ, outW);
  }

  /* GL_EXT_vertex_weighting */

  void REGAL_CALL plugin_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightPointerEXT)(size, type, stride, pointer);
  }

  void REGAL_CALL plugin_glVertexWeightfEXT(GLfloat weight)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightfEXT)(weight);
  }

  void REGAL_CALL plugin_glVertexWeightfvEXT(const GLfloat *weight)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightfvEXT)(weight);
  }

  /* GL_EXT_x11_sync_object */

  GLsync REGAL_CALL plugin_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glImportSyncEXT)(external_sync_type, external_sync, flags);
  }

  /* GL_GREMEDY_frame_terminator */

  void REGAL_CALL plugin_glFrameTerminatorGREMEDY(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFrameTerminatorGREMEDY)();
  }

  /* GL_GREMEDY_string_marker */

  void REGAL_CALL plugin_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStringMarkerGREMEDY)(len, string);
  }

  /* GL_HP_image_transform */

  void REGAL_CALL plugin_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetImageTransformParameterfvHP)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetImageTransformParameterivHP)(target, pname, params);
  }

  void REGAL_CALL plugin_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterfHP)(target, pname, param);
  }

  void REGAL_CALL plugin_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterfvHP)(target, pname, params);
  }

  void REGAL_CALL plugin_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameteriHP)(target, pname, param);
  }

  void REGAL_CALL plugin_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterivHP)(target, pname, params);
  }

  /* GL_IBM_multimode_draw_arrays */

  void REGAL_CALL plugin_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiModeDrawArraysIBM)(mode, first, count, primcount, modestride);
  }

  void REGAL_CALL plugin_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiModeDrawElementsIBM)(mode, count, type, indices, primcount, modestride);
  }

  /* GL_IBM_vertex_array_lists */

  void REGAL_CALL plugin_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorPointerListIBM)(size, type, stride, pointer, ptrstride);
  }

  void REGAL_CALL plugin_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointerListIBM)(stride, pointer, ptrstride);
  }

  void REGAL_CALL plugin_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointerListIBM)(type, stride, pointer, ptrstride);
  }

  void REGAL_CALL plugin_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexPointerListIBM)(type, stride, pointer, ptrstride);
  }

  void REGAL_CALL plugin_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalPointerListIBM)(type, stride, pointer, ptrstride);
  }

  void REGAL_CALL plugin_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointerListIBM)(size, type, stride, pointer, ptrstride);
  }

  void REGAL_CALL plugin_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointerListIBM)(size, type, stride, pointer, ptrstride);
  }

  void REGAL_CALL plugin_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexPointerListIBM)(size, type, stride, pointer, ptrstride);
  }

  /* GL_IMG_multisampled_render_to_texture */

  void REGAL_CALL plugin_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DMultisampleIMG)(target, attachment, textarget, texture, level, samples);
  }

  void REGAL_CALL plugin_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleIMG)(target, samples, internalformat, width, height);
  }

  /* GL_INGR_blend_func_separate */

  void REGAL_CALL plugin_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateINGR)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }

  /* GL_INTEL_parallel_arrays */

  void REGAL_CALL plugin_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorPointervINTEL)(size, type, pointer);
  }

  void REGAL_CALL plugin_glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalPointervINTEL)(type, pointer);
  }

  void REGAL_CALL plugin_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointervINTEL)(size, type, pointer);
  }

  void REGAL_CALL plugin_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexPointervINTEL)(size, type, pointer);
  }

  /* GL_INTEL_texture_scissor */

  void REGAL_CALL plugin_glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexScissorFuncINTEL)(target, lfunc, hfunc);
  }

  void REGAL_CALL plugin_glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexScissorINTEL)(target, tlow, thigh);
  }

  /* GL_KHR_debug */

  void REGAL_CALL plugin_glDebugMessageCallback(GLDEBUGPROC callback, const GLvoid *userParam)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallback)(callback, userParam);
  }

  void REGAL_CALL plugin_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageControl)(source, type, severity, count, ids, enabled);
  }

  void REGAL_CALL plugin_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsert)(source, type, id, severity, length, buf);
  }

  GLuint REGAL_CALL plugin_glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetDebugMessageLog)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
  }

  void REGAL_CALL plugin_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectLabel)(identifier, name, bufSize, length, label);
  }

  void REGAL_CALL plugin_glGetObjectPtrLabel(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectPtrLabel)(ptr, bufSize, length, label);
  }

  void REGAL_CALL plugin_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glObjectLabel)(identifier, name, length, label);
  }

  void REGAL_CALL plugin_glObjectPtrLabel(const GLvoid *ptr, GLsizei length, const GLchar *label)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glObjectPtrLabel)(ptr, length, label);
  }

  void REGAL_CALL plugin_glPopDebugGroup(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPopDebugGroup)();
  }

  void REGAL_CALL plugin_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPushDebugGroup)(source, id, length, message);
  }

  /* GL_KTX_buffer_region */

  GLuint REGAL_CALL plugin_glBufferRegionEnabled(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glBufferRegionEnabled)();
  }

  void REGAL_CALL plugin_glDeleteBufferRegion(GLenum region)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteBufferRegion)(region);
  }

  void REGAL_CALL plugin_glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawBufferRegion)(region, x, y, width, height, xDest, yDest);
  }

  GLuint REGAL_CALL plugin_glNewBufferRegion(GLenum region)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glNewBufferRegion)(region);
  }

  void REGAL_CALL plugin_glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadBufferRegion)(region, x, y, width, height);
  }

  /* GL_MESA_resize_buffers */

  void REGAL_CALL plugin_glResizeBuffersMESA(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glResizeBuffersMESA)();
  }

  /* GL_MESA_window_pos */

  void REGAL_CALL plugin_glWindowPos2dMESA(GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dMESA)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2dvMESA(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dvMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos2fMESA(GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fMESA)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2fvMESA(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fvMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos2iMESA(GLint x, GLint y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iMESA)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2ivMESA(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2ivMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos2sMESA(GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sMESA)(x, y);
  }

  void REGAL_CALL plugin_glWindowPos2svMESA(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2svMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dMESA)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3dvMESA(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dvMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fMESA)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3fvMESA(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fvMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos3iMESA(GLint x, GLint y, GLint z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iMESA)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3ivMESA(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3ivMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sMESA)(x, y, z);
  }

  void REGAL_CALL plugin_glWindowPos3svMESA(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3svMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4dMESA)(x, y, z, w);
  }

  void REGAL_CALL plugin_glWindowPos4dvMESA(const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4dvMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4fMESA)(x, y, z, w);
  }

  void REGAL_CALL plugin_glWindowPos4fvMESA(const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4fvMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4iMESA)(x, y, z, w);
  }

  void REGAL_CALL plugin_glWindowPos4ivMESA(const GLint *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4ivMESA)(v);
  }

  void REGAL_CALL plugin_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4sMESA)(x, y, z, w);
  }

  void REGAL_CALL plugin_glWindowPos4svMESA(const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4svMESA)(v);
  }

  /* GL_NVX_conditional_render */

  void REGAL_CALL plugin_glBeginConditionalRenderNVX(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRenderNVX)(id);
  }

  void REGAL_CALL plugin_glEndConditionalRenderNVX(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRenderNVX)();
  }

  /* GL_NV_bindless_texture */

  GLuint64 REGAL_CALL plugin_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetImageHandleNV)(texture, level, layered, layer, format);
  }

  GLuint64 REGAL_CALL plugin_glGetTextureHandleNV(GLuint texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetTextureHandleNV)(texture);
  }

  GLuint64 REGAL_CALL plugin_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetTextureSamplerHandleNV)(texture, sampler);
  }

  GLboolean REGAL_CALL plugin_glIsImageHandleResidentNV(GLuint64 handle)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsImageHandleResidentNV)(handle);
  }

  GLboolean REGAL_CALL plugin_glIsTextureHandleResidentNV(GLuint64 handle)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsTextureHandleResidentNV)(handle);
  }

  void REGAL_CALL plugin_glMakeImageHandleNonResidentNV(GLuint64 handle)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMakeImageHandleNonResidentNV)(handle);
  }

  void REGAL_CALL plugin_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMakeImageHandleResidentNV)(handle, access);
  }

  void REGAL_CALL plugin_glMakeTextureHandleNonResidentNV(GLuint64 handle)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMakeTextureHandleNonResidentNV)(handle);
  }

  void REGAL_CALL plugin_glMakeTextureHandleResidentNV(GLuint64 handle)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMakeTextureHandleResidentNV)(handle);
  }

  void REGAL_CALL plugin_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformHandleui64NV)(program, location, value);
  }

  void REGAL_CALL plugin_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformHandleui64vNV)(program, location, count, values);
  }

  void REGAL_CALL plugin_glUniformHandleui64NV(GLint location, GLuint64 value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformHandleui64NV)(location, value);
  }

  void REGAL_CALL plugin_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformHandleui64vNV)(location, count, value);
  }

  /* GL_NV_conditional_render */

  void REGAL_CALL plugin_glBeginConditionalRenderNV(GLuint id, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRenderNV)(id, mode);
  }

  void REGAL_CALL plugin_glEndConditionalRenderNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRenderNV)();
  }

  /* GL_NV_copy_image */

  void REGAL_CALL plugin_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyImageSubDataNV)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }

  /* GL_NV_coverage_sample */

  void REGAL_CALL plugin_glCoverageMaskNV(GLboolean mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCoverageMaskNV)(mask);
  }

  void REGAL_CALL plugin_glCoverageOperationNV(GLenum operation)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCoverageOperationNV)(operation);
  }

  /* GL_NV_depth_buffer_float */

  void REGAL_CALL plugin_glClearDepthdNV(GLdouble depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearDepthdNV)(depth);
  }

  void REGAL_CALL plugin_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthBoundsdNV)(zmin, zmax);
  }

  void REGAL_CALL plugin_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangedNV)(zNear, zFar);
  }

  /* GL_NV_draw_buffers */

  void REGAL_CALL plugin_glDrawBuffersNV(GLsizei n, const GLenum *bufs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersNV)(n, bufs);
  }

  /* GL_NV_draw_texture */

  void REGAL_CALL plugin_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawTextureNV)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  }

  /* GL_NV_evaluators */

  void REGAL_CALL plugin_glEvalMapsNV(GLenum target, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEvalMapsNV)(target, mode);
  }

  void REGAL_CALL plugin_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMapAttribParameterfvNV)(target, index, pname, params);
  }

  void REGAL_CALL plugin_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMapAttribParameterivNV)(target, index, pname, params);
  }

  void REGAL_CALL plugin_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMapControlPointsNV)(target, index, type, ustride, vstride, packed, points);
  }

  void REGAL_CALL plugin_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMapParameterfvNV)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMapParameterivNV)(target, pname, params);
  }

  void REGAL_CALL plugin_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapControlPointsNV)(target, index, type, ustride, vstride, uorder, vorder, packed, points);
  }

  void REGAL_CALL plugin_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapParameterfvNV)(target, pname, params);
  }

  void REGAL_CALL plugin_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMapParameterivNV)(target, pname, params);
  }

  /* GL_NV_explicit_multisample */

  void REGAL_CALL plugin_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMultisamplefvNV)(pname, index, val);
  }

  void REGAL_CALL plugin_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskIndexedNV)(index, mask);
  }

  void REGAL_CALL plugin_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexRenderbufferNV)(target, renderbuffer);
  }

  /* GL_NV_fence */

  void REGAL_CALL plugin_glDeleteFencesNV(GLsizei n, const GLuint *fences)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFencesNV)(n, fences);
  }

  void REGAL_CALL plugin_glFinishFenceNV(GLuint fence)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFinishFenceNV)(fence);
  }

  void REGAL_CALL plugin_glGenFencesNV(GLsizei n, GLuint *fences)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenFencesNV)(n, fences);
  }

  void REGAL_CALL plugin_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFenceivNV)(fence, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsFenceNV(GLuint fence)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsFenceNV)(fence);
  }

  void REGAL_CALL plugin_glSetFenceNV(GLuint fence, GLenum condition)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSetFenceNV)(fence, condition);
  }

  GLboolean REGAL_CALL plugin_glTestFenceNV(GLuint fence)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glTestFenceNV)(fence);
  }

  /* GL_NV_fragment_program */

  void REGAL_CALL plugin_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramNamedParameterdvNV)(id, len, name, params);
  }

  void REGAL_CALL plugin_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramNamedParameterfvNV)(id, len, name, params);
  }

  void REGAL_CALL plugin_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4dNV)(id, len, name, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4dvNV)(id, len, name, v);
  }

  void REGAL_CALL plugin_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4fNV)(id, len, name, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4fvNV)(id, len, name, v);
  }

  /* GL_NV_framebuffer_blit */

  void REGAL_CALL plugin_glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebufferNV)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  /* GL_NV_framebuffer_multisample_coverage */

  void REGAL_CALL plugin_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalformat, width, height);
  }

  /* GL_NV_geometry_program4 */

  void REGAL_CALL plugin_glProgramVertexLimitNV(GLenum target, GLint limit)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramVertexLimitNV)(target, limit);
  }

  /* GL_NV_gpu_program4 */

  void REGAL_CALL plugin_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterIivNV)(target, index, params);
  }

  void REGAL_CALL plugin_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterIuivNV)(target, index, params);
  }

  void REGAL_CALL plugin_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterIivNV)(target, index, params);
  }

  void REGAL_CALL plugin_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterIuivNV)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4iNV)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4ivNV)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4uiNV)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4uivNV)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParametersI4ivNV)(target, index, count, params);
  }

  void REGAL_CALL plugin_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParametersI4uivNV)(target, index, count, params);
  }

  void REGAL_CALL plugin_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4iNV)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4ivNV)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4uiNV)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4uivNV)(target, index, params);
  }

  void REGAL_CALL plugin_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParametersI4ivNV)(target, index, count, params);
  }

  void REGAL_CALL plugin_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParametersI4uivNV)(target, index, count, params);
  }

  /* GL_NV_gpu_shader5 */

  void REGAL_CALL plugin_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformi64vNV)(program, location, params);
  }

  void REGAL_CALL plugin_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i64NV)(program, location, x);
  }

  void REGAL_CALL plugin_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui64NV)(program, location, x);
  }

  void REGAL_CALL plugin_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i64NV)(program, location, x, y);
  }

  void REGAL_CALL plugin_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui64NV)(program, location, x, y);
  }

  void REGAL_CALL plugin_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i64NV)(program, location, x, y, z);
  }

  void REGAL_CALL plugin_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui64NV)(program, location, x, y, z);
  }

  void REGAL_CALL plugin_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i64NV)(program, location, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui64NV)(program, location, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glUniform1i64NV(GLint location, GLint64EXT x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1i64NV)(location, x);
  }

  void REGAL_CALL plugin_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1i64vNV)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform1ui64NV(GLint location, GLuint64EXT x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui64NV)(location, x);
  }

  void REGAL_CALL plugin_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui64vNV)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2i64NV)(location, x, y);
  }

  void REGAL_CALL plugin_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2i64vNV)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui64NV)(location, x, y);
  }

  void REGAL_CALL plugin_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui64vNV)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3i64NV)(location, x, y, z);
  }

  void REGAL_CALL plugin_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3i64vNV)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui64NV)(location, x, y, z);
  }

  void REGAL_CALL plugin_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui64vNV)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4i64NV)(location, x, y, z, w);
  }

  void REGAL_CALL plugin_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4i64vNV)(location, count, value);
  }

  void REGAL_CALL plugin_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui64NV)(location, x, y, z, w);
  }

  void REGAL_CALL plugin_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui64vNV)(location, count, value);
  }

  /* GL_NV_half_float */

  void REGAL_CALL plugin_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3hNV)(red, green, blue);
  }

  void REGAL_CALL plugin_glColor3hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3hvNV)(v);
  }

  void REGAL_CALL plugin_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4hNV)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glColor4hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4hvNV)(v);
  }

  void REGAL_CALL plugin_glFogCoordhNV(GLhalfNV coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordhNV)(coord);
  }

  void REGAL_CALL plugin_glFogCoordhvNV(const GLhalfNV *coord)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordhvNV)(coord);
  }

  void REGAL_CALL plugin_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1hNV)(target, s);
  }

  void REGAL_CALL plugin_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1hvNV)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2hNV)(target, s, t);
  }

  void REGAL_CALL plugin_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2hvNV)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3hNV)(target, s, t, r);
  }

  void REGAL_CALL plugin_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3hvNV)(target, v);
  }

  void REGAL_CALL plugin_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4hNV)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4hvNV)(target, v);
  }

  void REGAL_CALL plugin_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3hNV)(nx, ny, nz);
  }

  void REGAL_CALL plugin_glNormal3hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3hvNV)(v);
  }

  void REGAL_CALL plugin_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3hNV)(red, green, blue);
  }

  void REGAL_CALL plugin_glSecondaryColor3hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3hvNV)(v);
  }

  void REGAL_CALL plugin_glTexCoord1hNV(GLhalfNV s)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1hNV)(s);
  }

  void REGAL_CALL plugin_glTexCoord1hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1hvNV)(v);
  }

  void REGAL_CALL plugin_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2hNV)(s, t);
  }

  void REGAL_CALL plugin_glTexCoord2hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2hvNV)(v);
  }

  void REGAL_CALL plugin_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3hNV)(s, t, r);
  }

  void REGAL_CALL plugin_glTexCoord3hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3hvNV)(v);
  }

  void REGAL_CALL plugin_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4hNV)(s, t, r, q);
  }

  void REGAL_CALL plugin_glTexCoord4hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4hvNV)(v);
  }

  void REGAL_CALL plugin_glVertex2hNV(GLhalfNV x, GLhalfNV y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2hNV)(x, y);
  }

  void REGAL_CALL plugin_glVertex2hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex2hvNV)(v);
  }

  void REGAL_CALL plugin_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3hNV)(x, y, z);
  }

  void REGAL_CALL plugin_glVertex3hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex3hvNV)(v);
  }

  void REGAL_CALL plugin_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4hNV)(x, y, z, w);
  }

  void REGAL_CALL plugin_glVertex4hvNV(const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertex4hvNV)(v);
  }

  void REGAL_CALL plugin_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1hNV)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1hvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2hNV)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2hvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3hNV)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3hvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4hNV)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4hvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1hvNV)(index, count, v);
  }

  void REGAL_CALL plugin_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2hvNV)(index, count, v);
  }

  void REGAL_CALL plugin_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3hvNV)(index, count, v);
  }

  void REGAL_CALL plugin_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4hvNV)(index, count, v);
  }

  void REGAL_CALL plugin_glVertexWeighthNV(GLhalfNV weight)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeighthNV)(weight);
  }

  void REGAL_CALL plugin_glVertexWeighthvNV(const GLhalfNV *weight)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeighthvNV)(weight);
  }

  /* GL_NV_occlusion_query */

  void REGAL_CALL plugin_glBeginOcclusionQueryNV(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginOcclusionQueryNV)(id);
  }

  void REGAL_CALL plugin_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteOcclusionQueriesNV)(n, ids);
  }

  void REGAL_CALL plugin_glEndOcclusionQueryNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndOcclusionQueryNV)();
  }

  void REGAL_CALL plugin_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenOcclusionQueriesNV)(n, ids);
  }

  void REGAL_CALL plugin_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetOcclusionQueryivNV)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetOcclusionQueryuivNV)(id, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsOcclusionQueryNV(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsOcclusionQueryNV)(id);
  }

  /* GL_NV_parameter_buffer_object */

  void REGAL_CALL plugin_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersIivNV)(target, buffer, index, count, params);
  }

  void REGAL_CALL plugin_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersIuivNV)(target, buffer, index, count, params);
  }

  void REGAL_CALL plugin_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersfvNV)(target, buffer, index, count, params);
  }

  /* GL_NV_path_rendering */

  void REGAL_CALL plugin_glCopyPathNV(GLuint resultPath, GLuint srcPath)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyPathNV)(resultPath, srcPath);
  }

  void REGAL_CALL plugin_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }

  void REGAL_CALL plugin_glCoverFillPathNV(GLuint path, GLenum coverMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCoverFillPathNV)(path, coverMode);
  }

  void REGAL_CALL plugin_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }

  void REGAL_CALL plugin_glCoverStrokePathNV(GLuint name, GLenum coverMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCoverStrokePathNV)(name, coverMode);
  }

  void REGAL_CALL plugin_glDeletePathsNV(GLuint path, GLsizei range)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeletePathsNV)(path, range);
  }

  GLuint REGAL_CALL plugin_glGenPathsNV(GLsizei range)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGenPathsNV)(range);
  }

  void REGAL_CALL plugin_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathColorGenfvNV)(color, pname, value);
  }

  void REGAL_CALL plugin_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathColorGenivNV)(color, pname, value);
  }

  void REGAL_CALL plugin_glGetPathCommandsNV(GLuint name, GLubyte *commands)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathCommandsNV)(name, commands);
  }

  void REGAL_CALL plugin_glGetPathCoordsNV(GLuint name, GLfloat *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathCoordsNV)(name, coords);
  }

  void REGAL_CALL plugin_glGetPathDashArrayNV(GLuint name, GLfloat *dashArray)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathDashArrayNV)(name, dashArray);
  }

  GLfloat REGAL_CALL plugin_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetPathLengthNV)(path, startSegment, numSegments);
  }

  void REGAL_CALL plugin_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathMetricRangeNV)(metricQueryMask, fistPathName, numPaths, stride, metrics);
  }

  void REGAL_CALL plugin_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathMetricsNV)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  }

  void REGAL_CALL plugin_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathParameterfvNV)(name, param, value);
  }

  void REGAL_CALL plugin_glGetPathParameterivNV(GLuint name, GLenum param, GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathParameterivNV)(name, param, value);
  }

  void REGAL_CALL plugin_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathSpacingNV)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  }

  void REGAL_CALL plugin_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathTexGenfvNV)(texCoordSet, pname, value);
  }

  void REGAL_CALL plugin_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPathTexGenivNV)(texCoordSet, pname, value);
  }

  void REGAL_CALL plugin_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInterpolatePathsNV)(resultPath, pathA, pathB, weight);
  }

  GLboolean REGAL_CALL plugin_glIsPathNV(GLuint path)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsPathNV)(path);
  }

  GLboolean REGAL_CALL plugin_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsPointInFillPathNV)(path, mask, x, y);
  }

  GLboolean REGAL_CALL plugin_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsPointInStrokePathNV)(path, x, y);
  }

  void REGAL_CALL plugin_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathColorGenNV)(color, genMode, colorFormat, coeffs);
  }

  void REGAL_CALL plugin_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathCommandsNV)(path, numCommands, commands, numCoords, coordType, coords);
  }

  void REGAL_CALL plugin_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathCoordsNV)(path, numCoords, coordType, coords);
  }

  void REGAL_CALL plugin_glPathCoverDepthFuncNV(GLenum zfunc)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathCoverDepthFuncNV)(zfunc);
  }

  void REGAL_CALL plugin_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathDashArrayNV)(path, dashCount, dashArray);
  }

  void REGAL_CALL plugin_glPathFogGenNV(GLenum genMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathFogGenNV)(genMode);
  }

  void REGAL_CALL plugin_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathGlyphRangeNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  }

  void REGAL_CALL plugin_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathGlyphsNV)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  }

  void REGAL_CALL plugin_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathParameterfNV)(path, pname, value);
  }

  void REGAL_CALL plugin_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathParameterfvNV)(path, pname, value);
  }

  void REGAL_CALL plugin_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathParameteriNV)(path, pname, value);
  }

  void REGAL_CALL plugin_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathParameterivNV)(path, pname, value);
  }

  void REGAL_CALL plugin_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathStencilDepthOffsetNV)(factor, units);
  }

  void REGAL_CALL plugin_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathStencilFuncNV)(func, ref, mask);
  }

  void REGAL_CALL plugin_glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathStringNV)(path, format, length, pathString);
  }

  void REGAL_CALL plugin_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathSubCommandsNV)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  }

  void REGAL_CALL plugin_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathSubCoordsNV)(path, coordStart, numCoords, coordType, coords);
  }

  void REGAL_CALL plugin_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPathTexGenNV)(texCoordSet, genMode, components, coeffs);
  }

  GLboolean REGAL_CALL plugin_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glPointAlongPathNV)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  }

  void REGAL_CALL plugin_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  }

  void REGAL_CALL plugin_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilFillPathNV)(path, fillMode, mask);
  }

  void REGAL_CALL plugin_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  }

  void REGAL_CALL plugin_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStencilStrokePathNV)(path, reference, mask);
  }

  void REGAL_CALL plugin_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTransformPathNV)(resultPath, srcPath, transformType, transformValues);
  }

  void REGAL_CALL plugin_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightPathsNV)(resultPath, numPaths, paths, weights);
  }

  /* GL_NV_pixel_data_range */

  void REGAL_CALL plugin_glFlushPixelDataRangeNV(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushPixelDataRangeNV)(target);
  }

  void REGAL_CALL plugin_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelDataRangeNV)(target, size, pointer);
  }

  /* GL_NV_point_sprite */

  void REGAL_CALL plugin_glPointParameteriNV(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameteriNV)(pname, param);
  }

  void REGAL_CALL plugin_glPointParameterivNV(GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterivNV)(pname, params);
  }

  /* GL_NV_present_video */

  void REGAL_CALL plugin_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoi64vNV)(video_slot, pname, params);
  }

  void REGAL_CALL plugin_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoivNV)(video_slot, pname, params);
  }

  void REGAL_CALL plugin_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoui64vNV)(video_slot, pname, params);
  }

  void REGAL_CALL plugin_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVideouivNV)(video_slot, pname, params);
  }

  void REGAL_CALL plugin_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPresentFrameDualFillNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
  }

  void REGAL_CALL plugin_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPresentFrameKeyedNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
  }

  /* GL_NV_primitive_restart */

  void REGAL_CALL plugin_glPrimitiveRestartIndexNV(GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartIndexNV)(index);
  }

  void REGAL_CALL plugin_glPrimitiveRestartNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartNV)();
  }

  /* GL_NV_read_buffer */

  void REGAL_CALL plugin_glReadBufferNV(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadBufferNV)(mode);
  }

  /* GL_NV_register_combiners */

  void REGAL_CALL plugin_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCombinerInputNV)(stage, portion, variable, input, mapping, componentUsage);
  }

  void REGAL_CALL plugin_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCombinerOutputNV)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
  }

  void REGAL_CALL plugin_glCombinerParameterfNV(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterfNV)(pname, param);
  }

  void REGAL_CALL plugin_glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterfvNV)(pname, params);
  }

  void REGAL_CALL plugin_glCombinerParameteriNV(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameteriNV)(pname, param);
  }

  void REGAL_CALL plugin_glCombinerParameterivNV(GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterivNV)(pname, params);
  }

  void REGAL_CALL plugin_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFinalCombinerInputNV)(variable, input, mapping, componentUsage);
  }

  void REGAL_CALL plugin_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerInputParameterfvNV)(stage, portion, variable, pname, params);
  }

  void REGAL_CALL plugin_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerInputParameterivNV)(stage, portion, variable, pname, params);
  }

  void REGAL_CALL plugin_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerOutputParameterfvNV)(stage, portion, pname, params);
  }

  void REGAL_CALL plugin_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerOutputParameterivNV)(stage, portion, pname, params);
  }

  void REGAL_CALL plugin_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFinalCombinerInputParameterfvNV)(variable, pname, params);
  }

  void REGAL_CALL plugin_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFinalCombinerInputParameterivNV)(variable, pname, params);
  }

  /* GL_NV_register_combiners2 */

  void REGAL_CALL plugin_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCombinerStageParameterfvNV)(stage, pname, params);
  }

  void REGAL_CALL plugin_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerStageParameterfvNV)(stage, pname, params);
  }

  /* GL_NV_shader_buffer_load */

  void REGAL_CALL plugin_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameterui64vNV)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerui64vNV)(target, data);
  }

  void REGAL_CALL plugin_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferParameterui64vNV)(buffer, pname, params);
  }

  void REGAL_CALL plugin_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformui64vNV)(program, location, params);
  }

  GLboolean REGAL_CALL plugin_glIsBufferResidentNV(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsBufferResidentNV)(target);
  }

  GLboolean REGAL_CALL plugin_glIsNamedBufferResidentNV(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsNamedBufferResidentNV)(buffer);
  }

  void REGAL_CALL plugin_glMakeBufferNonResidentNV(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMakeBufferNonResidentNV)(target);
  }

  void REGAL_CALL plugin_glMakeBufferResidentNV(GLenum target, GLenum access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMakeBufferResidentNV)(target, access);
  }

  void REGAL_CALL plugin_glMakeNamedBufferNonResidentNV(GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMakeNamedBufferNonResidentNV)(buffer);
  }

  void REGAL_CALL plugin_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMakeNamedBufferResidentNV)(buffer, access);
  }

  void REGAL_CALL plugin_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformui64NV)(program, location, v0);
  }

  void REGAL_CALL plugin_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformui64vNV)(program, location, count, value);
  }

  void REGAL_CALL plugin_glUniformui64NV(GLint location, GLuint64EXT v0)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformui64NV)(location, v0);
  }

  void REGAL_CALL plugin_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glUniformui64vNV)(location, count, value);
  }

  /* GL_NV_texture_barrier */

  void REGAL_CALL plugin_glTextureBarrierNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureBarrierNV)();
  }

  /* GL_NV_texture_multisample */

  void REGAL_CALL plugin_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage2DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  }

  void REGAL_CALL plugin_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  }

  void REGAL_CALL plugin_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  }

  void REGAL_CALL plugin_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DMultisampleNV)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
  }

  void REGAL_CALL plugin_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  }

  void REGAL_CALL plugin_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DMultisampleNV)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
  }

  /* GL_NV_transform_feedback */

  void REGAL_CALL plugin_glActiveVaryingNV(GLuint program, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glActiveVaryingNV)(program, name);
  }

  void REGAL_CALL plugin_glBeginTransformFeedbackNV(GLenum primitiveMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedbackNV)(primitiveMode);
  }

  void REGAL_CALL plugin_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBaseNV)(target, index, buffer);
  }

  void REGAL_CALL plugin_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferOffsetNV)(target, index, buffer, offset);
  }

  void REGAL_CALL plugin_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRangeNV)(target, index, buffer, offset, size);
  }

  void REGAL_CALL plugin_glEndTransformFeedbackNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedbackNV)();
  }

  void REGAL_CALL plugin_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveVaryingNV)(program, index, bufSize, length, size, type, name);
  }

  void REGAL_CALL plugin_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVaryingNV)(program, index, location);
  }

  GLint REGAL_CALL plugin_glGetVaryingLocationNV(GLuint program, const GLchar *name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetVaryingLocationNV)(program, name);
  }

  void REGAL_CALL plugin_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackAttribsNV)(count, attribs, bufferMode);
  }

  void REGAL_CALL plugin_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryingsNV)(program, count, locations, bufferMode);
  }

  /* GL_NV_transform_feedback2 */

  void REGAL_CALL plugin_glBindTransformFeedbackNV(GLenum target, GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindTransformFeedbackNV)(target, id);
  }

  void REGAL_CALL plugin_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteTransformFeedbacksNV)(n, ids);
  }

  void REGAL_CALL plugin_glDrawTransformFeedbackNV(GLenum mode, GLuint name)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackNV)(mode, name);
  }

  void REGAL_CALL plugin_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenTransformFeedbacksNV)(n, ids);
  }

  GLboolean REGAL_CALL plugin_glIsTransformFeedbackNV(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsTransformFeedbackNV)(id);
  }

  void REGAL_CALL plugin_glPauseTransformFeedbackNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPauseTransformFeedbackNV)();
  }

  void REGAL_CALL plugin_glResumeTransformFeedbackNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glResumeTransformFeedbackNV)();
  }

  /* GL_NV_vdpau_interop */

  void REGAL_CALL plugin_glVDPAUFiniNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUFiniNV)();
  }

  void REGAL_CALL plugin_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUGetSurfaceivNV)(surface, pname, bufSize, length, values);
  }

  void REGAL_CALL plugin_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUInitNV)(vdpDevice, getProcAddress);
  }

  GLboolean REGAL_CALL plugin_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glVDPAUIsSurfaceNV)(surface);
  }

  void REGAL_CALL plugin_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUMapSurfacesNV)(numSurfaces, surfaces);
  }

  GLvdpauSurfaceNV REGAL_CALL plugin_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glVDPAURegisterOutputSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
  }

  GLvdpauSurfaceNV REGAL_CALL plugin_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glVDPAURegisterVideoSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
  }

  void REGAL_CALL plugin_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUSurfaceAccessNV)(surface, access);
  }

  void REGAL_CALL plugin_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUUnmapSurfacesNV)(numSurfaces, surfaces);
  }

  void REGAL_CALL plugin_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUUnregisterSurfaceNV)(surface);
  }

  /* GL_NV_vertex_array_range */

  void REGAL_CALL plugin_glFlushVertexArrayRangeNV(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushVertexArrayRangeNV)();
  }

  void REGAL_CALL plugin_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayRangeNV)(size, pointer);
  }

  /* GL_NV_vertex_attrib_integer_64bit */

  void REGAL_CALL plugin_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLi64vNV)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLui64vNV)(index, pname, params);
  }

  void REGAL_CALL plugin_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1i64NV)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1i64vNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1ui64NV)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1ui64vNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2i64NV)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2i64vNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2ui64NV)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2ui64vNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3i64NV)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3i64vNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3ui64NV)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3ui64vNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4i64NV)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4i64vNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4ui64NV)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4ui64vNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLFormatNV)(index, size, type, stride);
  }

  /* GL_NV_vertex_buffer_unified_memory */

  void REGAL_CALL plugin_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBufferAddressRangeNV)(pname, index, address, length);
  }

  void REGAL_CALL plugin_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorFormatNV)(size, type, stride);
  }

  void REGAL_CALL plugin_glEdgeFlagFormatNV(GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagFormatNV)(stride);
  }

  void REGAL_CALL plugin_glFogCoordFormatNV(GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordFormatNV)(type, stride);
  }

  void REGAL_CALL plugin_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerui64i_vNV)(target, index, data);
  }

  void REGAL_CALL plugin_glIndexFormatNV(GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIndexFormatNV)(type, stride);
  }

  void REGAL_CALL plugin_glNormalFormatNV(GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormalFormatNV)(type, stride);
  }

  void REGAL_CALL plugin_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorFormatNV)(size, type, stride);
  }

  void REGAL_CALL plugin_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordFormatNV)(size, type, stride);
  }

  void REGAL_CALL plugin_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribFormatNV)(index, size, type, normalized, stride);
  }

  void REGAL_CALL plugin_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIFormatNV)(index, size, type, stride);
  }

  void REGAL_CALL plugin_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexFormatNV)(size, type, stride);
  }

  /* GL_NV_vertex_program */

  GLboolean REGAL_CALL plugin_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glAreProgramsResidentNV)(n, programs, residences);
  }

  void REGAL_CALL plugin_glBindProgramNV(GLenum target, GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindProgramNV)(target, id);
  }

  void REGAL_CALL plugin_glDeleteProgramsNV(GLsizei n, const GLuint *programs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramsNV)(n, programs);
  }

  void REGAL_CALL plugin_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExecuteProgramNV)(target, id, params);
  }

  void REGAL_CALL plugin_glGenProgramsNV(GLsizei n, GLuint *programs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenProgramsNV)(n, programs);
  }

  void REGAL_CALL plugin_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramParameterdvNV)(target, index, pname, params);
  }

  void REGAL_CALL plugin_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramParameterfvNV)(target, index, pname, params);
  }

  void REGAL_CALL plugin_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStringNV)(id, pname, program);
  }

  void REGAL_CALL plugin_glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramivNV)(id, pname, params);
  }

  void REGAL_CALL plugin_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTrackMatrixivNV)(target, address, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointervNV)(index, pname, pointer);
  }

  void REGAL_CALL plugin_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdvNV)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfvNV)(index, pname, params);
  }

  void REGAL_CALL plugin_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribivNV)(index, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsProgramNV(GLuint id)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsProgramNV)(id);
  }

  void REGAL_CALL plugin_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadProgramNV)(target, id, len, program);
  }

  void REGAL_CALL plugin_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4dNV)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4dvNV)(target, index, v);
  }

  void REGAL_CALL plugin_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4fNV)(target, index, x, y, z, w);
  }

  void REGAL_CALL plugin_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4fvNV)(target, index, v);
  }

  void REGAL_CALL plugin_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameters4dvNV)(target, index, count, v);
  }

  void REGAL_CALL plugin_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameters4fvNV)(target, index, count, v);
  }

  void REGAL_CALL plugin_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRequestResidentProgramsNV)(n, programs);
  }

  void REGAL_CALL plugin_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTrackMatrixNV)(target, address, matrix, transform);
  }

  void REGAL_CALL plugin_glVertexAttrib1dNV(GLuint index, GLdouble x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dNV)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib1fNV(GLuint index, GLfloat x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fNV)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib1sNV(GLuint index, GLshort x)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sNV)(index, x);
  }

  void REGAL_CALL plugin_glVertexAttrib1svNV(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1svNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dNV)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fNV)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sNV)(index, x, y);
  }

  void REGAL_CALL plugin_glVertexAttrib2svNV(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2svNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dNV)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fNV)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sNV)(index, x, y, z);
  }

  void REGAL_CALL plugin_glVertexAttrib3svNV(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3svNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dNV)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fNV)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sNV)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4svNV(GLuint index, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4svNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubNV)(index, x, y, z, w);
  }

  void REGAL_CALL plugin_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubvNV)(index, v);
  }

  void REGAL_CALL plugin_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointerNV)(index, fsize, type, stride, pointer);
  }

  void REGAL_CALL plugin_glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1dvNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1fvNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1svNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2dvNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2fvNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2svNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3dvNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3fvNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3svNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4dvNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4fvNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4svNV)(index, n, v);
  }

  void REGAL_CALL plugin_glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4ubvNV)(index, n, v);
  }

  /* GL_NV_video_capture */

  void REGAL_CALL plugin_glBeginVideoCaptureNV(GLuint video_capture_slot)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBeginVideoCaptureNV)(video_capture_slot);
  }

  void REGAL_CALL plugin_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindVideoCaptureStreamBufferNV)(video_capture_slot, stream, frame_region, offset);
  }

  void REGAL_CALL plugin_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindVideoCaptureStreamTextureNV)(video_capture_slot, stream, frame_region, target, texture);
  }

  void REGAL_CALL plugin_glEndVideoCaptureNV(GLuint video_capture_slot)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndVideoCaptureNV)(video_capture_slot);
  }

  void REGAL_CALL plugin_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamdvNV)(video_capture_slot, stream, pname, params);
  }

  void REGAL_CALL plugin_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamfvNV)(video_capture_slot, stream, pname, params);
  }

  void REGAL_CALL plugin_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamivNV)(video_capture_slot, stream, pname, params);
  }

  void REGAL_CALL plugin_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureivNV)(video_capture_slot, pname, params);
  }

  GLenum REGAL_CALL plugin_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glVideoCaptureNV)(video_capture_slot, sequence_num, capture_time);
  }

  void REGAL_CALL plugin_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterdvNV)(video_capture_slot, stream, pname, params);
  }

  void REGAL_CALL plugin_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterfvNV)(video_capture_slot, stream, pname, params);
  }

  void REGAL_CALL plugin_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterivNV)(video_capture_slot, stream, pname, params);
  }

  /* GL_OES_blend_equation_separate */

  void REGAL_CALL plugin_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateOES)(modeRGB, modeAlpha);
  }

  /* GL_OES_blend_func_separate */

  void REGAL_CALL plugin_glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateOES)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }

  /* GL_OES_blend_subtract */

  void REGAL_CALL plugin_glBlendEquationOES(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationOES)(mode);
  }

  /* GL_OES_framebuffer_object */

  void REGAL_CALL plugin_glBindFramebufferOES(GLenum target, GLuint framebuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindFramebufferOES)(target, framebuffer);
  }

  void REGAL_CALL plugin_glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbufferOES)(target, renderbuffer);
  }

  GLenum REGAL_CALL plugin_glCheckFramebufferStatusOES(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glCheckFramebufferStatusOES)(target);
  }

  void REGAL_CALL plugin_glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffersOES)(n, framebuffers);
  }

  void REGAL_CALL plugin_glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffersOES)(n, renderbuffers);
  }

  void REGAL_CALL plugin_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbufferOES)(target, attachment, renderbuffertarget, renderbuffer);
  }

  void REGAL_CALL plugin_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DOES)(target, attachment, textarget, texture, level);
  }

  void REGAL_CALL plugin_glGenFramebuffersOES(GLsizei n, GLuint *framebuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffersOES)(n, framebuffers);
  }

  void REGAL_CALL plugin_glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffersOES)(n, renderbuffers);
  }

  void REGAL_CALL plugin_glGenerateMipmapOES(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmapOES)(target);
  }

  void REGAL_CALL plugin_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameterivOES)(target, attachment, pname, params);
  }

  void REGAL_CALL plugin_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameterivOES)(target, pname, params);
  }

  GLboolean REGAL_CALL plugin_glIsFramebufferOES(GLuint framebuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsFramebufferOES)(framebuffer);
  }

  GLboolean REGAL_CALL plugin_glIsRenderbufferOES(GLuint renderbuffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsRenderbufferOES)(renderbuffer);
  }

  void REGAL_CALL plugin_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageOES)(target, internalformat, width, height);
  }

  /* GL_OES_get_program_binary */

  void REGAL_CALL plugin_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramBinaryOES)(program, bufSize, length, binaryFormat, binary);
  }

  void REGAL_CALL plugin_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glProgramBinaryOES)(program, binaryFormat, binary, length);
  }

  /* GL_OES_mapbuffer */

  void REGAL_CALL plugin_glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointervOES)(target, pname, params);
  }

  GLvoid *REGAL_CALL plugin_glMapBufferOES(GLenum target, GLenum access)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glMapBufferOES)(target, access);
  }

  GLboolean REGAL_CALL plugin_glUnmapBufferOES(GLenum target)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glUnmapBufferOES)(target);
  }

  /* GL_OES_matrix_palette */

  void REGAL_CALL plugin_glCurrentPaletteMatrixOES(GLuint index)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCurrentPaletteMatrixOES)(index);
  }

  void REGAL_CALL plugin_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexPointerOES)(size, type, stride, pointer);
  }

  void REGAL_CALL plugin_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glWeightPointerOES)(size, type, stride, pointer);
  }

  /* GL_OES_single_precision */

  void REGAL_CALL plugin_glClearDepthfOES(GLclampd depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearDepthfOES)(depth);
  }

  void REGAL_CALL plugin_glClipPlanefOES(GLenum plane, const GLfloat *equation)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClipPlanefOES)(plane, equation);
  }

  void REGAL_CALL plugin_glDepthRangefOES(GLclampf n, GLclampf f)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangefOES)(n, f);
  }

  void REGAL_CALL plugin_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFrustumfOES)(l, r, b, t, n, f);
  }

  void REGAL_CALL plugin_glGetClipPlanefOES(GLenum plane, GLfloat *equation)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlanefOES)(plane, equation);
  }

  void REGAL_CALL plugin_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glOrthofOES)(l, r, b, t, n, f);
  }

  /* GL_OES_texture_3D */

  void REGAL_CALL plugin_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3DOES)(target, level, internalformat, width, height, depth, border, imageSize, data);
  }

  void REGAL_CALL plugin_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }

  void REGAL_CALL plugin_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  void REGAL_CALL plugin_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3DOES)(target, attachment, textarget, texture, level, zoffset);
  }

  void REGAL_CALL plugin_glTexImage3DOES(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DOES)(target, level, internalFormat, width, height, depth, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

  /* GL_OES_texture_cube_map */

  void REGAL_CALL plugin_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenfvOES)(coord, pname, params);
  }

  void REGAL_CALL plugin_glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenivOES)(coord, pname, params);
  }

  void REGAL_CALL plugin_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenxvOES)(coord, pname, params);
  }

  void REGAL_CALL plugin_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGenfOES)(coord, pname, param);
  }

  void REGAL_CALL plugin_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGenfvOES)(coord, pname, params);
  }

  void REGAL_CALL plugin_glTexGeniOES(GLenum coord, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGeniOES)(coord, pname, param);
  }

  void REGAL_CALL plugin_glTexGenivOES(GLenum coord, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGenivOES)(coord, pname, params);
  }

  void REGAL_CALL plugin_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGenxOES)(coord, pname, param);
  }

  void REGAL_CALL plugin_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexGenxvOES)(coord, pname, params);
  }

  /* GL_OES_vertex_array_object */

  void REGAL_CALL plugin_glBindVertexArrayOES(GLuint array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArrayOES)(array);
  }

  void REGAL_CALL plugin_glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArraysOES)(n, arrays);
  }

  void REGAL_CALL plugin_glGenVertexArraysOES(GLsizei n, GLuint *arrays)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArraysOES)(n, arrays);
  }

  GLboolean REGAL_CALL plugin_glIsVertexArrayOES(GLuint array)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsVertexArrayOES)(array);
  }

  /* GL_PGI_misc_hints */

  void REGAL_CALL plugin_glHintPGI(GLenum target, GLint mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glHintPGI)(target, mode);
  }

  /* GL_QCOM_alpha_test */

  void REGAL_CALL plugin_glAlphaFuncQCOM(GLenum func, GLclampf ref)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFuncQCOM)(func, ref);
  }

  /* GL_QCOM_driver_control */

  void REGAL_CALL plugin_glDisableDriverControlQCOM(GLuint driverControl)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDisableDriverControlQCOM)(driverControl);
  }

  void REGAL_CALL plugin_glEnableDriverControlQCOM(GLuint driverControl)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEnableDriverControlQCOM)(driverControl);
  }

  void REGAL_CALL plugin_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetDriverControlStringQCOM)(driverControl, bufSize, length, driverControlString);
  }

  void REGAL_CALL plugin_glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetDriverControlsQCOM)(num, size, driverControls);
  }

  /* GL_QCOM_extended_get */

  void REGAL_CALL plugin_glExtGetBufferPointervQCOM(GLenum target, GLvoid **params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetBufferPointervQCOM)(target, params);
  }

  void REGAL_CALL plugin_glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetBuffersQCOM)(buffers, maxBuffers, numBuffers);
  }

  void REGAL_CALL plugin_glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetFramebuffersQCOM)(framebuffers, maxFramebuffers, numFramebuffers);
  }

  void REGAL_CALL plugin_glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetRenderbuffersQCOM)(renderbuffers, maxRenderbuffers, numRenderbuffers);
  }

  void REGAL_CALL plugin_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexLevelParameterivQCOM)(texture, face, level, pname, params);
  }

  void REGAL_CALL plugin_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexSubImageQCOM)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
  }

  void REGAL_CALL plugin_glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexturesQCOM)(textures, maxTextures, numTextures);
  }

  void REGAL_CALL plugin_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtTexObjectStateOverrideiQCOM)(target, pname, param);
  }

  /* GL_QCOM_extended_get2 */

  void REGAL_CALL plugin_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetProgramBinarySourceQCOM)(program, shadertype, source, length);
  }

  void REGAL_CALL plugin_glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetProgramsQCOM)(programs, maxPrograms, numPrograms);
  }

  void REGAL_CALL plugin_glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glExtGetShadersQCOM)(shaders, maxShaders, numShaders);
  }

  GLboolean REGAL_CALL plugin_glExtIsProgramBinaryQCOM(GLuint program)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glExtIsProgramBinaryQCOM)(program);
  }

  /* GL_QCOM_tiled_rendering */

  void REGAL_CALL plugin_glEndTilingQCOM(GLbitfield preserveMask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glEndTilingQCOM)(preserveMask);
  }

  void REGAL_CALL plugin_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStartTilingQCOM)(x, y, width, height, preserveMask);
  }

  /* GL_REGAL_ES1_0_compatibility */

  void REGAL_CALL plugin_glAlphaFuncx(GLenum func, GLclampx ref)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFuncx)(func, ref);
  }

  void REGAL_CALL plugin_glClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearColorx)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glClearDepthx(GLclampx depth)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClearDepthx)(depth);
  }

  void REGAL_CALL plugin_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4x)(red, green, blue, alpha);
  }

  void REGAL_CALL plugin_glDepthRangex(GLclampx zNear, GLclampx zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangex)(zNear, zFar);
  }

  void REGAL_CALL plugin_glFogx(GLenum pname, GLfixed param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogx)(pname, param);
  }

  void REGAL_CALL plugin_glFogxv(GLenum pname, const GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogxv)(pname, params);
  }

  void REGAL_CALL plugin_glFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFrustumf)(left, right, bottom, top, zNear, zFar);
  }

  void REGAL_CALL plugin_glFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFrustumx)(left, right, bottom, top, zNear, zFar);
  }

  void REGAL_CALL plugin_glLightModelx(GLenum pname, GLfixed param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightModelx)(pname, param);
  }

  void REGAL_CALL plugin_glLightModelxv(GLenum pname, const GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightModelxv)(pname, params);
  }

  void REGAL_CALL plugin_glLightx(GLenum light, GLenum pname, GLfixed param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightx)(light, pname, param);
  }

  void REGAL_CALL plugin_glLightxv(GLenum light, GLenum pname, const GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightxv)(light, pname, params);
  }

  void REGAL_CALL plugin_glLineWidthx(GLfixed width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLineWidthx)(width);
  }

  void REGAL_CALL plugin_glLoadMatrixx(const GLfixed *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadMatrixx)(m);
  }

  void REGAL_CALL plugin_glMaterialx(GLenum face, GLenum pname, GLfixed param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMaterialx)(face, pname, param);
  }

  void REGAL_CALL plugin_glMaterialxv(GLenum face, GLenum pname, const GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMaterialxv)(face, pname, params);
  }

  void REGAL_CALL plugin_glMultMatrixx(const GLfixed *m)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultMatrixx)(m);
  }

  void REGAL_CALL plugin_glMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4x)(target, s, t, r, q);
  }

  void REGAL_CALL plugin_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3x)(nx, ny, nz);
  }

  void REGAL_CALL plugin_glOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glOrthof)(left, right, bottom, top, zNear, zFar);
  }

  void REGAL_CALL plugin_glOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glOrthox)(left, right, bottom, top, zNear, zFar);
  }

  void REGAL_CALL plugin_glPointSizex(GLfixed size)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointSizex)(size);
  }

  void REGAL_CALL plugin_glPolygonOffsetx(GLfixed factor, GLfixed units)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPolygonOffsetx)(factor, units);
  }

  void REGAL_CALL plugin_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glRotatex)(angle, x, y, z);
  }

  void REGAL_CALL plugin_glSampleCoveragex(GLclampx value, GLboolean invert)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSampleCoveragex)(value, invert);
  }

  void REGAL_CALL plugin_glScalex(GLfixed x, GLfixed y, GLfixed z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glScalex)(x, y, z);
  }

  void REGAL_CALL plugin_glTexEnvx(GLenum target, GLenum pname, GLfixed param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexEnvx)(target, pname, param);
  }

  void REGAL_CALL plugin_glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexEnvxv)(target, pname, params);
  }

  void REGAL_CALL plugin_glTexParameterx(GLenum target, GLenum pname, GLfixed param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterx)(target, pname, param);
  }

  void REGAL_CALL plugin_glTranslatex(GLfixed x, GLfixed y, GLfixed z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTranslatex)(x, y, z);
  }

  /* GL_REGAL_ES1_1_compatibility */

  void REGAL_CALL plugin_glClipPlanef(GLenum plane, const GLfloat *equation)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClipPlanef)(plane, equation);
  }

  void REGAL_CALL plugin_glClipPlanex(GLenum plane, const GLfixed *equation)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glClipPlanex)(plane, equation);
  }

  void REGAL_CALL plugin_glGetClipPlanef(GLenum pname, GLfloat *eqn)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlanef)(pname, eqn);
  }

  void REGAL_CALL plugin_glGetClipPlanex(GLenum pname, GLfixed *eqn)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlanex)(pname, eqn);
  }

  void REGAL_CALL plugin_glGetFixedv(GLenum pname, GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFixedv)(pname, params);
  }

  void REGAL_CALL plugin_glGetLightxv(GLenum light, GLenum pname, GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetLightxv)(light, pname, params);
  }

  void REGAL_CALL plugin_glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetMaterialxv)(face, pname, params);
  }

  void REGAL_CALL plugin_glGetTexEnvxv(GLenum env, GLenum pname, GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexEnvxv)(env, pname, params);
  }

  void REGAL_CALL plugin_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterxv)(target, pname, params);
  }

  void REGAL_CALL plugin_glPointParameterx(GLenum pname, GLfixed param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterx)(pname, param);
  }

  void REGAL_CALL plugin_glPointParameterxv(GLenum pname, const GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterxv)(pname, params);
  }

  void REGAL_CALL plugin_glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointSizePointerOES)(type, stride, pointer);
  }

  void REGAL_CALL plugin_glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterxv)(target, pname, params);
  }

  /* GL_REGAL_log */

  void REGAL_CALL plugin_glLogMessageCallbackREGAL(GLLOGPROCREGAL callback)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLogMessageCallbackREGAL)(callback);
  }

  /* GL_SGIS_detail_texture */

  void REGAL_CALL plugin_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDetailTexFuncSGIS)(target, n, points);
  }

  void REGAL_CALL plugin_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetDetailTexFuncSGIS)(target, points);
  }

  /* GL_SGIS_fog_function */

  void REGAL_CALL plugin_glFogFuncSGIS(GLsizei n, const GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFogFuncSGIS)(n, points);
  }

  void REGAL_CALL plugin_glGetFogFuncSGIS(GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFogFuncSGIS)(points);
  }

  /* GL_SGIS_multisample */

  void REGAL_CALL plugin_glSampleMaskSGIS(GLclampf value, GLboolean invert)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskSGIS)(value, invert);
  }

  void REGAL_CALL plugin_glSamplePatternSGIS(GLenum pattern)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSamplePatternSGIS)(pattern);
  }

  /* GL_SGIS_pixel_texture */

  void REGAL_CALL plugin_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTexGenParameterfvSGIS)(pname, params);
  }

  void REGAL_CALL plugin_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTexGenParameterivSGIS)(pname, params);
  }

  void REGAL_CALL plugin_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterfSGIS)(pname, param);
  }

  void REGAL_CALL plugin_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterfvSGIS)(pname, params);
  }

  void REGAL_CALL plugin_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameteriSGIS)(pname, param);
  }

  void REGAL_CALL plugin_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterivSGIS)(pname, params);
  }

  /* GL_SGIS_point_parameters */

  void REGAL_CALL plugin_glPointParameterfSGIS(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfSGIS)(pname, param);
  }

  void REGAL_CALL plugin_glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvSGIS)(pname, params);
  }

  /* GL_SGIS_sharpen_texture */

  void REGAL_CALL plugin_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetSharpenTexFuncSGIS)(target, points);
  }

  void REGAL_CALL plugin_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSharpenTexFuncSGIS)(target, n, points);
  }

  /* GL_SGIS_texture4D */

  void REGAL_CALL plugin_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexImage4DSGIS)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
  }

  void REGAL_CALL plugin_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage4DSGIS)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
  }

  /* GL_SGIS_texture_color_mask */

  void REGAL_CALL plugin_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureColorMaskSGIS)(red, green, blue, alpha);
  }

  /* GL_SGIS_texture_filter4 */

  void REGAL_CALL plugin_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetTexFilterFuncSGIS)(target, filter, weights);
  }

  void REGAL_CALL plugin_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexFilterFuncSGIS)(target, filter, n, weights);
  }

  /* GL_SGIX_async */

  void REGAL_CALL plugin_glAsyncMarkerSGIX(GLuint marker)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAsyncMarkerSGIX)(marker);
  }

  void REGAL_CALL plugin_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeleteAsyncMarkersSGIX)(marker, range);
  }

  GLint REGAL_CALL plugin_glFinishAsyncSGIX(GLuint *markerp)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glFinishAsyncSGIX)(markerp);
  }

  GLuint REGAL_CALL plugin_glGenAsyncMarkersSGIX(GLsizei range)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGenAsyncMarkersSGIX)(range);
  }

  GLboolean REGAL_CALL plugin_glIsAsyncMarkerSGIX(GLuint marker)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glIsAsyncMarkerSGIX)(marker);
  }

  GLint REGAL_CALL plugin_glPollAsyncSGIX(GLuint *markerp)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glPollAsyncSGIX)(markerp);
  }

  /* GL_SGIX_flush_raster */

  void REGAL_CALL plugin_glFlushRasterSGIX(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFlushRasterSGIX)();
  }

  /* GL_SGIX_fog_texture */

  void REGAL_CALL plugin_glTextureFogSGIX(GLenum pname)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTextureFogSGIX)(pname);
  }

  /* GL_SGIX_fragment_lighting */

  void REGAL_CALL plugin_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentColorMaterialSGIX)(face, mode);
  }

  void REGAL_CALL plugin_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfSGIX)(pname, param);
  }

  void REGAL_CALL plugin_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfvSGIX)(pname, params);
  }

  void REGAL_CALL plugin_glFragmentLightModeliSGIX(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModeliSGIX)(pname, param);
  }

  void REGAL_CALL plugin_glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelivSGIX)(pname, params);
  }

  void REGAL_CALL plugin_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfSGIX)(light, pname, param);
  }

  void REGAL_CALL plugin_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfvSGIX)(light, pname, params);
  }

  void REGAL_CALL plugin_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightiSGIX)(light, pname, param);
  }

  void REGAL_CALL plugin_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightivSGIX)(light, pname, params);
  }

  void REGAL_CALL plugin_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfSGIX)(face, pname, param);
  }

  void REGAL_CALL plugin_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfvSGIX)(face, pname, params);
  }

  void REGAL_CALL plugin_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialiSGIX)(face, pname, param);
  }

  void REGAL_CALL plugin_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialivSGIX)(face, pname, params);
  }

  void REGAL_CALL plugin_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightfvSGIX)(light, pname, params);
  }

  void REGAL_CALL plugin_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightivSGIX)(light, pname, params);
  }

  void REGAL_CALL plugin_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialfvSGIX)(face, pname, params);
  }

  void REGAL_CALL plugin_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialivSGIX)(face, pname, params);
  }

  void REGAL_CALL plugin_glLightEnviSGIX(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLightEnviSGIX)(pname, param);
  }

  /* GL_SGIX_framezoom */

  void REGAL_CALL plugin_glFrameZoomSGIX(GLint factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFrameZoomSGIX)(factor);
  }

  /* GL_SGIX_igloo_interface */

  void REGAL_CALL plugin_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glIglooInterfaceSGIX)(pname, params);
  }

  /* GL_SGIX_instruments */

  GLint REGAL_CALL plugin_glGetInstrumentsSGIX(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glGetInstrumentsSGIX)();
  }

  void REGAL_CALL plugin_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glInstrumentsBufferSGIX)(size, buffer);
  }

  GLint REGAL_CALL plugin_glPollInstrumentsSGIX(GLint *marker_p)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    return _next->call(&_next->glPollInstrumentsSGIX)(marker_p);
  }

  void REGAL_CALL plugin_glReadInstrumentsSGIX(GLint marker)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadInstrumentsSGIX)(marker);
  }

  void REGAL_CALL plugin_glStartInstrumentsSGIX(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStartInstrumentsSGIX)();
  }

  void REGAL_CALL plugin_glStopInstrumentsSGIX(GLint marker)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glStopInstrumentsSGIX)(marker);
  }

  /* GL_SGIX_list_priority */

  void REGAL_CALL plugin_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetListParameterfvSGIX)(list, pname, params);
  }

  void REGAL_CALL plugin_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetListParameterivSGIX)(list, pname, params);
  }

  void REGAL_CALL plugin_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glListParameterfSGIX)(list, pname, param);
  }

  void REGAL_CALL plugin_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glListParameterfvSGIX)(list, pname, params);
  }

  void REGAL_CALL plugin_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glListParameteriSGIX)(list, pname, param);
  }

  void REGAL_CALL plugin_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glListParameterivSGIX)(list, pname, params);
  }

  /* GL_SGIX_pixel_texture */

  void REGAL_CALL plugin_glPixelTexGenSGIX(GLenum mode)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenSGIX)(mode);
  }

  /* GL_SGIX_polynomial_ffd */

  void REGAL_CALL plugin_glDeformSGIX(GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeformSGIX)(mask);
  }

  void REGAL_CALL plugin_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeformationMap3dSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  }

  void REGAL_CALL plugin_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDeformationMap3fSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  }

  void REGAL_CALL plugin_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glLoadIdentityDeformationMapSGIX)(mask);
  }

  /* GL_SGIX_reference_plane */

  void REGAL_CALL plugin_glReferencePlaneSGIX(const GLdouble *equation)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReferencePlaneSGIX)(equation);
  }

  /* GL_SGIX_sprite */

  void REGAL_CALL plugin_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterfSGIX)(pname, param);
  }

  void REGAL_CALL plugin_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterfvSGIX)(pname, params);
  }

  void REGAL_CALL plugin_glSpriteParameteriSGIX(GLenum pname, GLint param)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameteriSGIX)(pname, param);
  }

  void REGAL_CALL plugin_glSpriteParameterivSGIX(GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterivSGIX)(pname, params);
  }

  /* GL_SGIX_tag_sample_buffer */

  void REGAL_CALL plugin_glTagSampleBufferSGIX(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTagSampleBufferSGIX)();
  }

  /* GL_SGI_color_table */

  void REGAL_CALL plugin_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterfvSGI)(target, pname, params);
  }

  void REGAL_CALL plugin_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterivSGI)(target, pname, params);
  }

  void REGAL_CALL plugin_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColorTableSGI)(target, internalformat, width, format, type, table);
  }

  void REGAL_CALL plugin_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glCopyColorTableSGI)(target, internalformat, x, y, width);
  }

  void REGAL_CALL plugin_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfvSGI)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterivSGI)(target, pname, params);
  }

  void REGAL_CALL plugin_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableSGI)(target, format, type, table);
  }

  /* GL_SUNX_constant_data */

  void REGAL_CALL plugin_glFinishTextureSUNX(void)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glFinishTextureSUNX)();
  }

  /* GL_SUN_global_alpha */

  void REGAL_CALL plugin_glGlobalAlphaFactorbSUN(GLbyte factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorbSUN)(factor);
  }

  void REGAL_CALL plugin_glGlobalAlphaFactordSUN(GLdouble factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactordSUN)(factor);
  }

  void REGAL_CALL plugin_glGlobalAlphaFactorfSUN(GLfloat factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorfSUN)(factor);
  }

  void REGAL_CALL plugin_glGlobalAlphaFactoriSUN(GLint factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactoriSUN)(factor);
  }

  void REGAL_CALL plugin_glGlobalAlphaFactorsSUN(GLshort factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorsSUN)(factor);
  }

  void REGAL_CALL plugin_glGlobalAlphaFactorubSUN(GLubyte factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorubSUN)(factor);
  }

  void REGAL_CALL plugin_glGlobalAlphaFactoruiSUN(GLuint factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactoruiSUN)(factor);
  }

  void REGAL_CALL plugin_glGlobalAlphaFactorusSUN(GLushort factor)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorusSUN)(factor);
  }

  /* GL_SUN_mesh_array */

  void REGAL_CALL plugin_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glDrawMeshArraysSUN)(mode, first, count, width);
  }

  /* GL_SUN_read_video_pixels */

  void REGAL_CALL plugin_glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReadVideoPixelsSUN)(x, y, width, height, format, type, pixels);
  }

  /* GL_SUN_triangle_list */

  void REGAL_CALL plugin_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodePointerSUN)(type, stride, pointer);
  }

  void REGAL_CALL plugin_glReplacementCodeubSUN(GLubyte code)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeubSUN)(code);
  }

  void REGAL_CALL plugin_glReplacementCodeubvSUN(const GLubyte *code)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeubvSUN)(code);
  }

  void REGAL_CALL plugin_glReplacementCodeuiSUN(GLuint code)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiSUN)(code);
  }

  void REGAL_CALL plugin_glReplacementCodeuivSUN(const GLuint *code)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuivSUN)(code);
  }

  void REGAL_CALL plugin_glReplacementCodeusSUN(GLushort code)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeusSUN)(code);
  }

  void REGAL_CALL plugin_glReplacementCodeusvSUN(const GLushort *code)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeusvSUN)(code);
  }

  /* GL_SUN_vertex */

  void REGAL_CALL plugin_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3fVertex3fSUN)(r, g, b, x, y, z);
  }

  void REGAL_CALL plugin_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor3fVertex3fvSUN)(c, v);
  }

  void REGAL_CALL plugin_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4fNormal3fVertex3fSUN)(r, g, b, a, nx, ny, nz, x, y, z);
  }

  void REGAL_CALL plugin_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4fNormal3fVertex3fvSUN)(c, n, v);
  }

  void REGAL_CALL plugin_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex2fSUN)(r, g, b, a, x, y);
  }

  void REGAL_CALL plugin_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex2fvSUN)(c, v);
  }

  void REGAL_CALL plugin_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex3fSUN)(r, g, b, a, x, y, z);
  }

  void REGAL_CALL plugin_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex3fvSUN)(c, v);
  }

  void REGAL_CALL plugin_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3fVertex3fSUN)(nx, ny, nz, x, y, z);
  }

  void REGAL_CALL plugin_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glNormal3fVertex3fvSUN)(n, v);
  }

  void REGAL_CALL plugin_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor3fVertex3fSUN)(rc, r, g, b, x, y, z);
  }

  void REGAL_CALL plugin_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor3fVertex3fvSUN)(rc, c, v);
  }

  void REGAL_CALL plugin_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4fNormal3fVertex3fSUN)(rc, r, g, b, a, nx, ny, nz, x, y, z);
  }

  void REGAL_CALL plugin_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4fNormal3fVertex3fvSUN)(rc, c, n, v);
  }

  void REGAL_CALL plugin_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4ubVertex3fSUN)(rc, r, g, b, a, x, y, z);
  }

  void REGAL_CALL plugin_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4ubVertex3fvSUN)(rc, c, v);
  }

  void REGAL_CALL plugin_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiNormal3fVertex3fSUN)(rc, nx, ny, nz, x, y, z);
  }

  void REGAL_CALL plugin_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiNormal3fVertex3fvSUN)(rc, n, v);
  }

  void REGAL_CALL plugin_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
  }

  void REGAL_CALL plugin_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(rc, tc, c, n, v);
  }

  void REGAL_CALL plugin_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(rc, s, t, nx, ny, nz, x, y, z);
  }

  void REGAL_CALL plugin_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(rc, tc, n, v);
  }

  void REGAL_CALL plugin_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fVertex3fSUN)(rc, s, t, x, y, z);
  }

  void REGAL_CALL plugin_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fVertex3fvSUN)(rc, tc, v);
  }

  void REGAL_CALL plugin_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiVertex3fSUN)(rc, x, y, z);
  }

  void REGAL_CALL plugin_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiVertex3fvSUN)(rc, v);
  }

  void REGAL_CALL plugin_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor3fVertex3fSUN)(s, t, r, g, b, x, y, z);
  }

  void REGAL_CALL plugin_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor3fVertex3fvSUN)(tc, c, v);
  }

  void REGAL_CALL plugin_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4fNormal3fVertex3fSUN)(s, t, r, g, b, a, nx, ny, nz, x, y, z);
  }

  void REGAL_CALL plugin_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4fNormal3fVertex3fvSUN)(tc, c, n, v);
  }

  void REGAL_CALL plugin_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4ubVertex3fSUN)(s, t, r, g, b, a, x, y, z);
  }

  void REGAL_CALL plugin_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4ubVertex3fvSUN)(tc, c, v);
  }

  void REGAL_CALL plugin_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fNormal3fVertex3fSUN)(s, t, nx, ny, nz, x, y, z);
  }

  void REGAL_CALL plugin_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fNormal3fVertex3fvSUN)(tc, n, v);
  }

  void REGAL_CALL plugin_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fVertex3fSUN)(s, t, x, y, z);
  }

  void REGAL_CALL plugin_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fVertex3fvSUN)(tc, v);
  }

  void REGAL_CALL plugin_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fColor4fNormal3fVertex4fSUN)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
  }

  void REGAL_CALL plugin_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fColor4fNormal3fVertex4fvSUN)(tc, c, n, v);
  }

  void REGAL_CALL plugin_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fVertex4fSUN)(s, t, p, q, x, y, z, w);
  }

  void REGAL_CALL plugin_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fVertex4fvSUN)(tc, v);
  }

  /* GL_WIN_swap_hint */

  void REGAL_CALL plugin_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal &_instance = ::REGAL_NAMESPACE_INTERNAL::Thread::ThreadLocal::instance();
    ::REGAL_NAMESPACE_INTERNAL::DispatchTable *_next = _instance.nextDispatchTable;
    RegalAssert(_next);
    _next->call(&_next->glAddSwapHintRectWIN)(x, y, width, height);
  }

#if REGAL_SYS_WGL

  /* WGL_3DL_stereo_control */

  BOOL REGAL_CALL plugin_wglSetStereoEmitterState3DL(HDC hDC, UINT uState)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSetStereoEmitterState3DL(hDC, uState);
  }

  /* WGL_AMD_gpu_association */

  VOID REGAL_CALL plugin_wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  HGLRC REGAL_CALL plugin_wglCreateAssociatedContextAMD(UINT id)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateAssociatedContextAMD(id);
  }

  HGLRC REGAL_CALL plugin_wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int *attribList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList);
  }

  BOOL REGAL_CALL plugin_wglDeleteAssociatedContextAMD(HGLRC hglrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDeleteAssociatedContextAMD(hglrc);
  }

  UINT REGAL_CALL plugin_wglGetContextGPUIDAMD(HGLRC hglrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetContextGPUIDAMD(hglrc);
  }

  HGLRC REGAL_CALL plugin_wglGetCurrentAssociatedContextAMD(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetCurrentAssociatedContextAMD();
  }

  UINT REGAL_CALL plugin_wglGetGPUIDsAMD(UINT maxCount, UINT *ids)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetGPUIDsAMD(maxCount, ids);
  }

  INT REGAL_CALL plugin_wglGetGPUInfoAMD(UINT id, int property, GLenum dataType, UINT size, void *data)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetGPUInfoAMD(id, property, dataType, size, data);
  }

  BOOL REGAL_CALL plugin_wglMakeAssociatedContextCurrentAMD(HGLRC hglrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglMakeAssociatedContextCurrentAMD(hglrc);
  }

  /* WGL_ARB_buffer_region */

  HANDLE REGAL_CALL plugin_wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateBufferRegionARB(hDC, iLayerPlane, uType);
  }

  VOID REGAL_CALL plugin_wglDeleteBufferRegionARB(HANDLE hRegion)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDeleteBufferRegionARB(hRegion);
  }

  BOOL REGAL_CALL plugin_wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc);
  }

  BOOL REGAL_CALL plugin_wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSaveBufferRegionARB(hRegion, x, y, width, height);
  }

  /* WGL_ARB_create_context */

  HGLRC REGAL_CALL plugin_wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *piAttribList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateContextAttribsARB(hDC, hShareContext, piAttribList);
  }

  /* WGL_ARB_extensions_string */

  const char *REGAL_CALL plugin_wglGetExtensionsStringARB(HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetExtensionsStringARB(hDC);
  }

  /* WGL_ARB_make_current_read */

  HDC REGAL_CALL plugin_wglGetCurrentReadDCARB(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetCurrentReadDCARB();
  }

  BOOL REGAL_CALL plugin_wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc);
  }

  /* WGL_ARB_pbuffer */

  HPBUFFERARB REGAL_CALL plugin_wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }

  BOOL REGAL_CALL plugin_wglDestroyPbufferARB(HPBUFFERARB hPbuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDestroyPbufferARB(hPbuffer);
  }

  HDC REGAL_CALL plugin_wglGetPbufferDCARB(HPBUFFERARB hPbuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetPbufferDCARB(hPbuffer);
  }

  BOOL REGAL_CALL plugin_wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int *piValue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryPbufferARB(hPbuffer, iAttribute, piValue);
  }

  int REGAL_CALL plugin_wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglReleasePbufferDCARB(hPbuffer, hDC);
  }

  /* WGL_ARB_pixel_format */

  BOOL REGAL_CALL plugin_wglChoosePixelFormatARB(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglChoosePixelFormatARB(hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }

  BOOL REGAL_CALL plugin_wglGetPixelFormatAttribfvARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetPixelFormatAttribfvARB(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }

  BOOL REGAL_CALL plugin_wglGetPixelFormatAttribivARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetPixelFormatAttribivARB(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }

  /* WGL_ARB_render_texture */

  BOOL REGAL_CALL plugin_wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglBindTexImageARB(hPbuffer, iBuffer);
  }

  BOOL REGAL_CALL plugin_wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglReleaseTexImageARB(hPbuffer, iBuffer);
  }

  BOOL REGAL_CALL plugin_wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int *piAttribList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSetPbufferAttribARB(hPbuffer, piAttribList);
  }

  /* WGL_EXT_display_color_table */

  GLboolean REGAL_CALL plugin_wglBindDisplayColorTableEXT(GLushort id)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglBindDisplayColorTableEXT(id);
  }

  GLboolean REGAL_CALL plugin_wglCreateDisplayColorTableEXT(GLushort id)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateDisplayColorTableEXT(id);
  }

  VOID REGAL_CALL plugin_wglDestroyDisplayColorTableEXT(GLushort id)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDestroyDisplayColorTableEXT(id);
  }

  GLboolean REGAL_CALL plugin_wglLoadDisplayColorTableEXT(const GLushort *table, GLuint length)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglLoadDisplayColorTableEXT(table, length);
  }

  /* WGL_EXT_extensions_string */

  const char *REGAL_CALL plugin_wglGetExtensionsStringEXT(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetExtensionsStringEXT();
  }

  /* WGL_EXT_make_current_read */

  HDC REGAL_CALL plugin_wglGetCurrentReadDCEXT(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetCurrentReadDCEXT();
  }

  BOOL REGAL_CALL plugin_wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc);
  }

  /* WGL_EXT_pbuffer */

  HPBUFFEREXT REGAL_CALL plugin_wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }

  BOOL REGAL_CALL plugin_wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDestroyPbufferEXT(hPbuffer);
  }

  HDC REGAL_CALL plugin_wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetPbufferDCEXT(hPbuffer);
  }

  BOOL REGAL_CALL plugin_wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryPbufferEXT(hPbuffer, iAttribute, piValue);
  }

  int REGAL_CALL plugin_wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglReleasePbufferDCEXT(hPbuffer, hDC);
  }

  /* WGL_EXT_pixel_format */

  BOOL REGAL_CALL plugin_wglChoosePixelFormatEXT(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglChoosePixelFormatEXT(hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }

  BOOL REGAL_CALL plugin_wglGetPixelFormatAttribfvEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetPixelFormatAttribfvEXT(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }

  BOOL REGAL_CALL plugin_wglGetPixelFormatAttribivEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetPixelFormatAttribivEXT(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }

  /* WGL_EXT_swap_control */

  int REGAL_CALL plugin_wglGetSwapIntervalEXT(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetSwapIntervalEXT();
  }

  BOOL REGAL_CALL plugin_wglSwapIntervalEXT(int interval)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSwapIntervalEXT(interval);
  }

  /* WGL_GDI */

  int REGAL_CALL plugin_wglChoosePixelFormat(HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglChoosePixelFormat(hDC, ppfd);
  }

  int REGAL_CALL plugin_wglDescribePixelFormat(HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDescribePixelFormat(hDC, iPixelFormat, nBytes, ppfd);
  }

  int REGAL_CALL plugin_wglGetPixelFormat(HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetPixelFormat(hDC);
  }

  BOOL REGAL_CALL plugin_wglSetPixelFormat(HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSetPixelFormat(hDC, iPixelFormat, ppfd);
  }

  BOOL REGAL_CALL plugin_wglSwapBuffers(HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSwapBuffers(hDC);
  }

  /* WGL_I3D_digital_video_control */

  BOOL REGAL_CALL plugin_wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int *piValue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
  }

  BOOL REGAL_CALL plugin_wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int *piValue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
  }

  /* WGL_I3D_gamma */

  BOOL REGAL_CALL plugin_wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
  }

  BOOL REGAL_CALL plugin_wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int *piValue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetGammaTableParametersI3D(hDC, iAttribute, piValue);
  }

  BOOL REGAL_CALL plugin_wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
  }

  BOOL REGAL_CALL plugin_wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int *piValue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSetGammaTableParametersI3D(hDC, iAttribute, piValue);
  }

  /* WGL_I3D_genlock */

  BOOL REGAL_CALL plugin_wglDisableGenlockI3D(HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDisableGenlockI3D(hDC);
  }

  BOOL REGAL_CALL plugin_wglEnableGenlockI3D(HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglEnableGenlockI3D(hDC);
  }

  BOOL REGAL_CALL plugin_wglGenlockSampleRateI3D(HDC hDC, UINT uRate)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGenlockSampleRateI3D(hDC, uRate);
  }

  BOOL REGAL_CALL plugin_wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGenlockSourceDelayI3D(hDC, uDelay);
  }

  BOOL REGAL_CALL plugin_wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGenlockSourceEdgeI3D(hDC, uEdge);
  }

  BOOL REGAL_CALL plugin_wglGenlockSourceI3D(HDC hDC, UINT uSource)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGenlockSourceI3D(hDC, uSource);
  }

  BOOL REGAL_CALL plugin_wglGetGenlockSampleRateI3D(HDC hDC, UINT *uRate)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetGenlockSampleRateI3D(hDC, uRate);
  }

  BOOL REGAL_CALL plugin_wglGetGenlockSourceDelayI3D(HDC hDC, UINT *uDelay)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetGenlockSourceDelayI3D(hDC, uDelay);
  }

  BOOL REGAL_CALL plugin_wglGetGenlockSourceEdgeI3D(HDC hDC, UINT *uEdge)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetGenlockSourceEdgeI3D(hDC, uEdge);
  }

  BOOL REGAL_CALL plugin_wglGetGenlockSourceI3D(HDC hDC, UINT *uSource)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetGenlockSourceI3D(hDC, uSource);
  }

  BOOL REGAL_CALL plugin_wglIsEnabledGenlockI3D(HDC hDC, BOOL *pFlag)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglIsEnabledGenlockI3D(hDC, pFlag);
  }

  BOOL REGAL_CALL plugin_wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay);
  }

  /* WGL_I3D_image_buffer */

  BOOL REGAL_CALL plugin_wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count);
  }

  LPVOID REGAL_CALL plugin_wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateImageBufferI3D(hDC, dwSize, uFlags);
  }

  BOOL REGAL_CALL plugin_wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDestroyImageBufferI3D(hDC, pAddress);
  }

  BOOL REGAL_CALL plugin_wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID *pAddress, UINT count)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglReleaseImageBufferEventsI3D(hDC, pAddress, count);
  }

  /* WGL_I3D_swap_frame_lock */

  BOOL REGAL_CALL plugin_wglDisableFrameLockI3D(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDisableFrameLockI3D();
  }

  BOOL REGAL_CALL plugin_wglEnableFrameLockI3D(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglEnableFrameLockI3D();
  }

  BOOL REGAL_CALL plugin_wglIsEnabledFrameLockI3D(BOOL *pFlag)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglIsEnabledFrameLockI3D(pFlag);
  }

  BOOL REGAL_CALL plugin_wglQueryFrameLockMasterI3D(BOOL *pFlag)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryFrameLockMasterI3D(pFlag);
  }

  /* WGL_I3D_swap_frame_usage */

  BOOL REGAL_CALL plugin_wglBeginFrameTrackingI3D(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglBeginFrameTrackingI3D();
  }

  BOOL REGAL_CALL plugin_wglEndFrameTrackingI3D(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglEndFrameTrackingI3D();
  }

  BOOL REGAL_CALL plugin_wglGetFrameUsageI3D(float *pUsage)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetFrameUsageI3D(pUsage);
  }

  BOOL REGAL_CALL plugin_wglQueryFrameTrackingI3D(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage);
  }

  /* WGL_NV_DX_interop */

  BOOL REGAL_CALL plugin_wglDXCloseDeviceNV(HANDLE hDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDXCloseDeviceNV(hDevice);
  }

  BOOL REGAL_CALL plugin_wglDXLockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDXLockObjectsNV(hDevice, count, hObjects);
  }

  BOOL REGAL_CALL plugin_wglDXObjectAccessNV(HANDLE hObject, GLenum access)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDXObjectAccessNV(hObject, access);
  }

  HANDLE REGAL_CALL plugin_wglDXOpenDeviceNV(GLvoid *dxDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDXOpenDeviceNV(dxDevice);
  }

  HANDLE REGAL_CALL plugin_wglDXRegisterObjectNV(HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDXRegisterObjectNV(hDevice, dxObject, name, type, access);
  }

  BOOL REGAL_CALL plugin_wglDXSetResourceShareHandleNV(GLvoid *dxObject, HANDLE shareHandle)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDXSetResourceShareHandleNV(dxObject, shareHandle);
  }

  BOOL REGAL_CALL plugin_wglDXUnlockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDXUnlockObjectsNV(hDevice, count, hObjects);
  }

  BOOL REGAL_CALL plugin_wglDXUnregisterObjectNV(HANDLE hDevice, HANDLE hObject)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDXUnregisterObjectNV(hDevice, hObject);
  }

  /* WGL_NV_copy_image */

  BOOL REGAL_CALL plugin_wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }

  /* WGL_NV_gpu_affinity */

  HDC REGAL_CALL plugin_wglCreateAffinityDCNV(const HGPUNV *phGpuList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateAffinityDCNV(phGpuList);
  }

  BOOL REGAL_CALL plugin_wglDeleteDCNV(HDC hAffinityDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDeleteDCNV(hAffinityDC);
  }

  BOOL REGAL_CALL plugin_wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice);
  }

  BOOL REGAL_CALL plugin_wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu);
  }

  BOOL REGAL_CALL plugin_wglEnumGpusNV(UINT iGpuIndex, HGPUNV *phGpu)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglEnumGpusNV(iGpuIndex, phGpu);
  }

  /* WGL_NV_present_video */

  BOOL REGAL_CALL plugin_wglBindVideoDeviceNV(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList);
  }

  int REGAL_CALL plugin_wglEnumerateVideoDevicesNV(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglEnumerateVideoDevicesNV(hDC, phDeviceList);
  }

  BOOL REGAL_CALL plugin_wglQueryCurrentContextNV(int iAttribute, int *piValue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryCurrentContextNV(iAttribute, piValue);
  }

  /* WGL_NV_swap_group */

  BOOL REGAL_CALL plugin_wglBindSwapBarrierNV(GLuint group, GLuint barrier)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglBindSwapBarrierNV(group, barrier);
  }

  BOOL REGAL_CALL plugin_wglJoinSwapGroupNV(HDC hDC, GLuint group)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglJoinSwapGroupNV(hDC, group);
  }

  BOOL REGAL_CALL plugin_wglQueryFrameCountNV(HDC hDC, GLuint *count)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryFrameCountNV(hDC, count);
  }

  BOOL REGAL_CALL plugin_wglQueryMaxSwapGroupsNV(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers);
  }

  BOOL REGAL_CALL plugin_wglQuerySwapGroupNV(HDC hDC, GLuint *group, GLuint *barrier)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQuerySwapGroupNV(hDC, group, barrier);
  }

  BOOL REGAL_CALL plugin_wglResetFrameCountNV(HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglResetFrameCountNV(hDC);
  }

  /* WGL_NV_vertex_array_range */

  void *REGAL_CALL plugin_wglAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglAllocateMemoryNV(size, readfreq, writefreq, priority);
  }

  void REGAL_CALL plugin_wglFreeMemoryNV(void *pointer)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglFreeMemoryNV(pointer);
  }

  /* WGL_NV_video_capture */

  BOOL REGAL_CALL plugin_wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice);
  }

  UINT REGAL_CALL plugin_wglEnumerateVideoCaptureDevicesNV(HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglEnumerateVideoCaptureDevicesNV(hDC, phDeviceList);
  }

  BOOL REGAL_CALL plugin_wglLockVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglLockVideoCaptureDeviceNV(hDC, hDevice);
  }

  BOOL REGAL_CALL plugin_wglQueryVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglQueryVideoCaptureDeviceNV(hDC, hDevice, iAttribute, piValue);
  }

  BOOL REGAL_CALL plugin_wglReleaseVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglReleaseVideoCaptureDeviceNV(hDC, hDevice);
  }

  /* WGL_NV_video_output */

  BOOL REGAL_CALL plugin_wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer);
  }

  BOOL REGAL_CALL plugin_wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice);
  }

  BOOL REGAL_CALL plugin_wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }

  BOOL REGAL_CALL plugin_wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglReleaseVideoDeviceNV(hVideoDevice);
  }

  BOOL REGAL_CALL plugin_wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglReleaseVideoImageNV(hPbuffer, iVideoBuffer);
  }

  BOOL REGAL_CALL plugin_wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  }

  /* WGL_OML_sync_control */

  BOOL REGAL_CALL plugin_wglGetMscRateOML(HDC hDC, INT32 *numerator, INT32 *denominator)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetMscRateOML(hDC, numerator, denominator);
  }

  BOOL REGAL_CALL plugin_wglGetSyncValuesOML(HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetSyncValuesOML(hDC, ust, msc, sbc);
  }

  INT64 REGAL_CALL plugin_wglSwapBuffersMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSwapBuffersMscOML(hDC, target_msc, divisor, remainder);
  }

  INT64 REGAL_CALL plugin_wglSwapLayerBuffersMscOML(HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSwapLayerBuffersMscOML(hDC, fuPlanes, target_msc, divisor, remainder);
  }

  BOOL REGAL_CALL plugin_wglWaitForMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglWaitForMscOML(hDC, target_msc, divisor, remainder, ust, msc, sbc);
  }

  BOOL REGAL_CALL plugin_wglWaitForSbcOML(HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglWaitForSbcOML(hDC, target_sbc, ust, msc, sbc);
  }

  /* WGL_core */

  BOOL REGAL_CALL plugin_wglCopyContext(HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCopyContext(hglrcSrc, hglrcDst, mask);
  }

  HGLRC REGAL_CALL plugin_wglCreateContext(HDC hDC)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateContext(hDC);
  }

  HGLRC REGAL_CALL plugin_wglCreateLayerContext(HDC hDC, int iLayerPlane)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglCreateLayerContext(hDC, iLayerPlane);
  }

  BOOL REGAL_CALL plugin_wglDeleteContext(HGLRC hglrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDeleteContext(hglrc);
  }

  BOOL REGAL_CALL plugin_wglDescribeLayerPlane(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglDescribeLayerPlane(hDC, iPixelFormat, iLayerPlane, nBytes, plpd);
  }

  HGLRC REGAL_CALL plugin_wglGetCurrentContext(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetCurrentContext();
  }

  HDC REGAL_CALL plugin_wglGetCurrentDC(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetCurrentDC();
  }

  PROC REGAL_CALL plugin_wglGetDefaultProcAddress(LPCSTR lpszProc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetDefaultProcAddress(lpszProc);
  }

  int REGAL_CALL plugin_wglGetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetLayerPaletteEntries(hDC, iLayerPlane, iStart, nEntries, pcr);
  }

  PROC REGAL_CALL plugin_wglGetProcAddress(LPCSTR lpszProc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglGetProcAddress(lpszProc);
  }

  BOOL REGAL_CALL plugin_wglMakeCurrent(HDC hDC, HGLRC hglrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglMakeCurrent(hDC, hglrc);
  }

  BOOL REGAL_CALL plugin_wglRealizeLayerPalette(HDC hDC, int iLayerPlane, BOOL bRealize)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglRealizeLayerPalette(hDC, iLayerPlane, bRealize);
  }

  int REGAL_CALL plugin_wglSetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSetLayerPaletteEntries(hDC, iLayerPlane, iStart, nEntries, pcr);
  }

  BOOL REGAL_CALL plugin_wglShareLists(HGLRC hglrcShare, HGLRC hglrcSrc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglShareLists(hglrcShare, hglrcSrc);
  }

  BOOL REGAL_CALL plugin_wglSwapLayerBuffers(HDC hDC, UINT fuPlanes)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSwapLayerBuffers(hDC, fuPlanes);
  }

  DWORD REGAL_CALL plugin_wglSwapMultipleBuffers(UINT n, const WGLSWAP *ps)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglSwapMultipleBuffers(n, ps);
  }

  BOOL REGAL_CALL plugin_wglUseFontBitmapsA(HDC hDC, DWORD first, DWORD count, DWORD listBase)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglUseFontBitmapsA(hDC, first, count, listBase);
  }

  BOOL REGAL_CALL plugin_wglUseFontBitmapsW(HDC hDC, DWORD first, DWORD count, DWORD listBase)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglUseFontBitmapsW(hDC, first, count, listBase);
  }

  BOOL REGAL_CALL plugin_wglUseFontOutlinesA(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglUseFontOutlinesA(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }

  BOOL REGAL_CALL plugin_wglUseFontOutlinesW(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.wglUseFontOutlinesW(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }

#endif /* REGAL_SYS_WGL */
#if REGAL_SYS_GLX

  /* GLX_VERSION_1_0 */

  XVisualInfo *REGAL_CALL plugin_glXChooseVisual(Display *dpy, int screen, int *attribList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXChooseVisual(dpy, screen, attribList);
  }

  void REGAL_CALL plugin_glXCopyContext(Display *dpy, GLXContext src, GLXContext dst, unsigned long mask)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCopyContext(dpy, src, dst, mask);
  }

  GLXContext REGAL_CALL plugin_glXCreateContext(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateContext(dpy, vis, shareList, direct);
  }

  GLXPixmap REGAL_CALL plugin_glXCreateGLXPixmap(Display *dpy, XVisualInfo *vis, Pixmap pixmap)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateGLXPixmap(dpy, vis, pixmap);
  }

  void REGAL_CALL plugin_glXDestroyContext(Display *dpy, GLXContext ctx)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXDestroyContext(dpy, ctx);
  }

  void REGAL_CALL plugin_glXDestroyGLXPixmap(Display *dpy, GLXPixmap pix)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXDestroyGLXPixmap(dpy, pix);
  }

  int REGAL_CALL plugin_glXGetConfig(Display *dpy, XVisualInfo *vis, int attrib, int *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetConfig(dpy, vis, attrib, value);
  }

  GLXContext REGAL_CALL plugin_glXGetCurrentContext(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetCurrentContext();
  }

  GLXDrawable REGAL_CALL plugin_glXGetCurrentDrawable(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetCurrentDrawable();
  }

  Bool REGAL_CALL plugin_glXIsDirect(Display *dpy, GLXContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXIsDirect(dpy, ctx);
  }

  Bool REGAL_CALL plugin_glXMakeCurrent(Display *dpy, GLXDrawable drawable, GLXContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXMakeCurrent(dpy, drawable, ctx);
  }

  Bool REGAL_CALL plugin_glXQueryExtension(Display *dpy, int *errorBase, int *eventBase)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryExtension(dpy, errorBase, eventBase);
  }

  Bool REGAL_CALL plugin_glXQueryVersion(Display *dpy, int *major, int *minor)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryVersion(dpy, major, minor);
  }

  void REGAL_CALL plugin_glXSwapBuffers(Display *dpy, GLXDrawable drawable)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSwapBuffers(dpy, drawable);
  }

  void REGAL_CALL plugin_glXUseXFont(Font font, int first, int count, int listBase)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXUseXFont(font, first, count, listBase);
  }

  void REGAL_CALL plugin_glXWaitGL(void)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXWaitGL();
  }

  void REGAL_CALL plugin_glXWaitX(void)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXWaitX();
  }

  /* GLX_VERSION_1_1 */

  const char *REGAL_CALL plugin_glXGetClientString(Display *dpy, int name)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetClientString(dpy, name);
  }

  const char *REGAL_CALL plugin_glXQueryExtensionsString(Display *dpy, int screen)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryExtensionsString(dpy, screen);
  }

  const char *REGAL_CALL plugin_glXQueryServerString(Display *dpy, int screen, int name)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryServerString(dpy, screen, name);
  }

  /* GLX_VERSION_1_2 */

  Display *REGAL_CALL plugin_glXGetCurrentDisplay(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetCurrentDisplay();
  }

  /* GLX_VERSION_1_3 */

  GLXFBConfig *REGAL_CALL plugin_glXChooseFBConfig(Display *dpy, int screen, const int *attrib_list, int *nelements)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXChooseFBConfig(dpy, screen, attrib_list, nelements);
  }

  GLXContext REGAL_CALL plugin_glXCreateNewContext(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateNewContext(dpy, config, render_type, share_list, direct);
  }

  GLXPbuffer REGAL_CALL plugin_glXCreatePbuffer(Display *dpy, GLXFBConfig config, const int *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreatePbuffer(dpy, config, attrib_list);
  }

  GLXPixmap REGAL_CALL plugin_glXCreatePixmap(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreatePixmap(dpy, config, pixmap, attrib_list);
  }

  GLXWindow REGAL_CALL plugin_glXCreateWindow(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateWindow(dpy, config, win, attrib_list);
  }

  void REGAL_CALL plugin_glXDestroyPbuffer(Display *dpy, GLXPbuffer pbuf)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXDestroyPbuffer(dpy, pbuf);
  }

  void REGAL_CALL plugin_glXDestroyPixmap(Display *dpy, GLXPixmap pixmap)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXDestroyPixmap(dpy, pixmap);
  }

  void REGAL_CALL plugin_glXDestroyWindow(Display *dpy, GLXWindow win)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXDestroyWindow(dpy, win);
  }

  GLXDrawable REGAL_CALL plugin_glXGetCurrentReadDrawable(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetCurrentReadDrawable();
  }

  int REGAL_CALL plugin_glXGetFBConfigAttrib(Display *dpy, GLXFBConfig config, int attribute, int *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetFBConfigAttrib(dpy, config, attribute, value);
  }

  GLXFBConfig *REGAL_CALL plugin_glXGetFBConfigs(Display *dpy, int screen, int *nelements)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetFBConfigs(dpy, screen, nelements);
  }

  void REGAL_CALL plugin_glXGetSelectedEvent(Display *dpy, GLXDrawable draw, unsigned long *event_mask)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetSelectedEvent(dpy, draw, event_mask);
  }

  XVisualInfo *REGAL_CALL plugin_glXGetVisualFromFBConfig(Display *dpy, GLXFBConfig config)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetVisualFromFBConfig(dpy, config);
  }

  Bool REGAL_CALL plugin_glXMakeContextCurrent(Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXMakeContextCurrent(display, draw, read, ctx);
  }

  int REGAL_CALL plugin_glXQueryContext(Display *dpy, GLXContext ctx, int attribute, int *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryContext(dpy, ctx, attribute, value);
  }

  void REGAL_CALL plugin_glXQueryDrawable(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryDrawable(dpy, draw, attribute, value);
  }

  void REGAL_CALL plugin_glXSelectEvent(Display *dpy, GLXDrawable draw, unsigned long event_mask)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSelectEvent(dpy, draw, event_mask);
  }

  /* GLX_VERSION_1_4 */

  __GLXextFuncPtr REGAL_CALL plugin_glXGetProcAddress(const GLubyte *procName)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetProcAddress(procName);
  }

  /* GLX_AMD_gpu_association */

  void REGAL_CALL plugin_glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  GLXContext REGAL_CALL plugin_glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateAssociatedContextAMD(id, share_list);
  }

  GLXContext REGAL_CALL plugin_glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int *attribList)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateAssociatedContextAttribsAMD(id, share_context, attribList);
  }

  Bool REGAL_CALL plugin_glXDeleteAssociatedContextAMD(GLXContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXDeleteAssociatedContextAMD(ctx);
  }

  unsigned int REGAL_CALL plugin_glXGetContextGPUIDAMD(GLXContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetContextGPUIDAMD(ctx);
  }

  GLXContext REGAL_CALL plugin_glXGetCurrentAssociatedContextAMD(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetCurrentAssociatedContextAMD();
  }

  unsigned int REGAL_CALL plugin_glXGetGPUIDsAMD(unsigned int maxCount, unsigned int *ids)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetGPUIDsAMD(maxCount, ids);
  }

  int REGAL_CALL plugin_glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, GLvoid *data)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetGPUInfoAMD(id, property, dataType, size, data);
  }

  Bool REGAL_CALL plugin_glXMakeAssociatedContextCurrentAMD(GLXContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXMakeAssociatedContextCurrentAMD(ctx);
  }

  /* GLX_ARB_create_context */

  GLXContext REGAL_CALL plugin_glXCreateContextAttribsARB(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
  }

  /* GLX_ARB_get_proc_address */

  __GLXextFuncPtr REGAL_CALL plugin_glXGetProcAddressARB(const GLubyte *procName)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetProcAddressARB(procName);
  }

  /* GLX_ATI_render_texture */

  void REGAL_CALL plugin_glXBindTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBindTexImageATI(dpy, pbuf, buffer);
  }

  void REGAL_CALL plugin_glXDrawableAttribATI(Display *dpy, GLXDrawable draw, const int *attrib_list)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXDrawableAttribATI(dpy, draw, attrib_list);
  }

  void REGAL_CALL plugin_glXReleaseTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXReleaseTexImageATI(dpy, pbuf, buffer);
  }

  /* GLX_EXT_import_context */

  void REGAL_CALL plugin_glXFreeContextEXT(Display *dpy, GLXContext context)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXFreeContextEXT(dpy, context);
  }

  GLXContextID REGAL_CALL plugin_glXGetContextIDEXT(const GLXContext context)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetContextIDEXT(context);
  }

  GLXContext REGAL_CALL plugin_glXImportContextEXT(Display *dpy, GLXContextID contextID)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXImportContextEXT(dpy, contextID);
  }

  int REGAL_CALL plugin_glXQueryContextInfoEXT(Display *dpy, GLXContext context, int attribute, int *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryContextInfoEXT(dpy, context, attribute, value);
  }

  /* GLX_EXT_swap_control */

  void REGAL_CALL plugin_glXSwapIntervalEXT(Display *dpy, GLXDrawable drawable, int interval)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSwapIntervalEXT(dpy, drawable, interval);
  }

  /* GLX_EXT_texture_from_pixmap */

  void REGAL_CALL plugin_glXBindTexImageEXT(Display *display, GLXDrawable drawable, int buffer, const int *attrib_list)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBindTexImageEXT(display, drawable, buffer, attrib_list);
  }

  void REGAL_CALL plugin_glXReleaseTexImageEXT(Display *display, GLXDrawable drawable, int buffer)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXReleaseTexImageEXT(display, drawable, buffer);
  }

  /* GLX_MESA_agp_offset */

  unsigned int REGAL_CALL plugin_glXGetAGPOffsetMESA(const void *pointer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetAGPOffsetMESA(pointer);
  }

  /* GLX_MESA_copy_sub_buffer */

  void REGAL_CALL plugin_glXCopySubBufferMESA(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCopySubBufferMESA(dpy, drawable, x, y, width, height);
  }

  /* GLX_MESA_pixmap_colormap */

  GLXPixmap REGAL_CALL plugin_glXCreateGLXPixmapMESA(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap);
  }

  /* GLX_MESA_release_buffers */

  Bool REGAL_CALL plugin_glXReleaseBuffersMESA(Display *dpy, GLXDrawable d)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXReleaseBuffersMESA(dpy, d);
  }

  /* GLX_MESA_set_3dfx_mode */

  GLboolean REGAL_CALL plugin_glXSet3DfxModeMESA(GLint mode)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSet3DfxModeMESA(mode);
  }

  /* GLX_MESA_swap_control */

  int REGAL_CALL plugin_glXGetSwapIntervalMESA(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetSwapIntervalMESA();
  }

  int REGAL_CALL plugin_glXSwapIntervalMESA(unsigned int interval)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSwapIntervalMESA(interval);
  }

  /* GLX_NV_copy_image */

  void REGAL_CALL plugin_glXCopyImageSubDataNV(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }

  /* GLX_NV_present_video */

  int REGAL_CALL plugin_glXBindVideoDeviceNV(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list);
  }

  unsigned int *REGAL_CALL plugin_glXEnumerateVideoDevicesNV(Display *dpy, int screen, int *nelements)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXEnumerateVideoDevicesNV(dpy, screen, nelements);
  }

  /* GLX_NV_swap_group */

  Bool REGAL_CALL plugin_glXBindSwapBarrierNV(Display *dpy, GLuint group, GLuint barrier)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBindSwapBarrierNV(dpy, group, barrier);
  }

  Bool REGAL_CALL plugin_glXJoinSwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint group)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXJoinSwapGroupNV(dpy, drawable, group);
  }

  Bool REGAL_CALL plugin_glXQueryFrameCountNV(Display *dpy, int screen, GLuint *count)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryFrameCountNV(dpy, screen, count);
  }

  Bool REGAL_CALL plugin_glXQueryMaxSwapGroupsNV(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers);
  }

  Bool REGAL_CALL plugin_glXQuerySwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQuerySwapGroupNV(dpy, drawable, group, barrier);
  }

  Bool REGAL_CALL plugin_glXResetFrameCountNV(Display *dpy, int screen)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXResetFrameCountNV(dpy, screen);
  }

  /* GLX_NV_vertex_array_range */

  void *REGAL_CALL plugin_glXAllocateMemoryNV(GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXAllocateMemoryNV(size, readFrequency, writeFrequency, priority);
  }

  void REGAL_CALL plugin_glXFreeMemoryNV(void *pointer)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXFreeMemoryNV(pointer);
  }

  /* GLX_NV_video_capture */

  int REGAL_CALL plugin_glXBindVideoCaptureDeviceNV(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device);
  }

  GLXVideoCaptureDeviceNV *REGAL_CALL plugin_glXEnumerateVideoCaptureDevicesNV(Display *dpy, int screen, int *nelements)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements);
  }

  void REGAL_CALL plugin_glXLockVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXLockVideoCaptureDeviceNV(dpy, device);
  }

  int REGAL_CALL plugin_glXQueryVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value);
  }

  void REGAL_CALL plugin_glXReleaseVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXReleaseVideoCaptureDeviceNV(dpy, device);
  }

  /* GLX_NV_video_output */

  int REGAL_CALL plugin_glXBindVideoImageNV(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer);
  }

  int REGAL_CALL plugin_glXGetVideoDeviceNV(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice);
  }

  int REGAL_CALL plugin_glXGetVideoInfoNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }

  int REGAL_CALL plugin_glXReleaseVideoDeviceNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXReleaseVideoDeviceNV(dpy, screen, VideoDevice);
  }

  int REGAL_CALL plugin_glXReleaseVideoImageNV(Display *dpy, GLXPbuffer pbuf)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXReleaseVideoImageNV(dpy, pbuf);
  }

  int REGAL_CALL plugin_glXSendPbufferToVideoNV(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
  }

  /* GLX_OML_sync_control */

  Bool REGAL_CALL plugin_glXGetMscRateOML(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetMscRateOML(dpy, drawable, numerator, denominator);
  }

  Bool REGAL_CALL plugin_glXGetSyncValuesOML(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc);
  }

  int64_t REGAL_CALL plugin_glXSwapBuffersMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder);
  }

  Bool REGAL_CALL plugin_glXWaitForMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
  }

  Bool REGAL_CALL plugin_glXWaitForSbcOML(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc);
  }

  /* GLX_SGIX_fbconfig */

  GLXFBConfigSGIX *REGAL_CALL plugin_glXChooseFBConfigSGIX(Display *dpy, int screen, const int *attrib_list, int *nelements)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements);
  }

  GLXContext REGAL_CALL plugin_glXCreateContextWithConfigSGIX(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct);
  }

  GLXPixmap REGAL_CALL plugin_glXCreateGLXPixmapWithConfigSGIX(Display *dpy, GLXFBConfig config, Pixmap pixmap)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap);
  }

  int REGAL_CALL plugin_glXGetFBConfigAttribSGIX(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetFBConfigAttribSGIX(dpy, config, attribute, value);
  }

  GLXFBConfigSGIX REGAL_CALL plugin_glXGetFBConfigFromVisualSGIX(Display *dpy, XVisualInfo *vis)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetFBConfigFromVisualSGIX(dpy, vis);
  }

  XVisualInfo *REGAL_CALL plugin_glXGetVisualFromFBConfigSGIX(Display *dpy, GLXFBConfig config)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetVisualFromFBConfigSGIX(dpy, config);
  }

  /* GLX_SGIX_pbuffer */

  GLXPbuffer REGAL_CALL plugin_glXCreateGLXPbufferSGIX(Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list);
  }

  void REGAL_CALL plugin_glXDestroyGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXDestroyGLXPbufferSGIX(dpy, pbuf);
  }

  void REGAL_CALL plugin_glXGetSelectedEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long *mask)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetSelectedEventSGIX(dpy, drawable, mask);
  }

  void REGAL_CALL plugin_glXQueryGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value);
  }

  void REGAL_CALL plugin_glXSelectEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long mask)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSelectEventSGIX(dpy, drawable, mask);
  }

  /* GLX_SGIX_swap_barrier */

  void REGAL_CALL plugin_glXBindSwapBarrierSGIX(Display *dpy, GLXDrawable drawable, int barrier)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBindSwapBarrierSGIX(dpy, drawable, barrier);
  }

  Bool REGAL_CALL plugin_glXQueryMaxSwapBarriersSGIX(Display *dpy, int screen, int *max)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryMaxSwapBarriersSGIX(dpy, screen, max);
  }

  /* GLX_SGIX_swap_group */

  void REGAL_CALL plugin_glXJoinSwapGroupSGIX(Display *dpy, GLXDrawable drawable, GLXDrawable member)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXJoinSwapGroupSGIX(dpy, drawable, member);
  }

  /* GLX_SGIX_video_resize */

  int REGAL_CALL plugin_glXBindChannelToWindowSGIX(Display *display, int screen, int channel, Window window)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXBindChannelToWindowSGIX(display, screen, channel, window);
  }

  int REGAL_CALL plugin_glXChannelRectSGIX(Display *display, int screen, int channel, int x, int y, int w, int h)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXChannelRectSGIX(display, screen, channel, x, y, w, h);
  }

  int REGAL_CALL plugin_glXChannelRectSyncSGIX(Display *display, int screen, int channel, GLenum synctype)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXChannelRectSyncSGIX(display, screen, channel, synctype);
  }

  int REGAL_CALL plugin_glXQueryChannelDeltasSGIX(Display *display, int screen, int channel, int *x, int *y, int *w, int *h)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h);
  }

  int REGAL_CALL plugin_glXQueryChannelRectSGIX(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh);
  }

  /* GLX_SGI_cushion */

  void REGAL_CALL plugin_glXCushionSGI(Display *dpy, Window window, float cushion)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXCushionSGI(dpy, window, cushion);
  }

  /* GLX_SGI_make_current_read */

  GLXDrawable REGAL_CALL plugin_glXGetCurrentReadDrawableSGI(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetCurrentReadDrawableSGI();
  }

  Bool REGAL_CALL plugin_glXMakeCurrentReadSGI(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXMakeCurrentReadSGI(dpy, draw, read, ctx);
  }

  /* GLX_SGI_swap_control */

  int REGAL_CALL plugin_glXSwapIntervalSGI(int interval)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXSwapIntervalSGI(interval);
  }

  /* GLX_SGI_video_sync */

  int REGAL_CALL plugin_glXGetVideoSyncSGI(unsigned int *count)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetVideoSyncSGI(count);
  }

  int REGAL_CALL plugin_glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *count)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXWaitVideoSyncSGI(divisor, remainder, count);
  }

  /* GLX_SUN_get_transparent_index */

  Status REGAL_CALL plugin_glXGetTransparentIndexSUN(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex);
  }

  /* GLX_SUN_video_resize */

  int REGAL_CALL plugin_glXGetVideoResizeSUN(Display *display, GLXDrawable window, float *factor)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXGetVideoResizeSUN(display, window, factor);
  }

  int REGAL_CALL plugin_glXVideoResizeSUN(Display *display, GLXDrawable window, float factor)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.glXVideoResizeSUN(display, window, factor);
  }

#endif /* REGAL_SYS_GLX */
#if REGAL_SYS_OSX

  /* CGL_VERSION_1_0 */

  CGLError REGAL_CALL plugin_CGLChoosePixelFormat(const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLChoosePixelFormat(attribs, pix, npix);
  }

  CGLError REGAL_CALL plugin_CGLClearDrawable(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLClearDrawable(ctx);
  }

  CGLError REGAL_CALL plugin_CGLCopyContext(CGLContextObj src, CGLContextObj dst, GLbitfield mask)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLCopyContext(src, dst, mask);
  }

  CGLError REGAL_CALL plugin_CGLCreateContext(CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLCreateContext(pix, share, ctx);
  }

  CGLError REGAL_CALL plugin_CGLDescribePixelFormat(CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLDescribePixelFormat(pix, pix_num, attrib, value);
  }

  CGLError REGAL_CALL plugin_CGLDescribeRenderer(CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLDescribeRenderer(rend, rend_num, prop, value);
  }

  CGLError REGAL_CALL plugin_CGLDestroyContext(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLDestroyContext(ctx);
  }

  CGLError REGAL_CALL plugin_CGLDestroyPixelFormat(CGLPixelFormatObj pix)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLDestroyPixelFormat(pix);
  }

  CGLError REGAL_CALL plugin_CGLDestroyRendererInfo(CGLRendererInfoObj rend)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLDestroyRendererInfo(rend);
  }

  CGLError REGAL_CALL plugin_CGLDisable(CGLContextObj ctx, CGLContextEnable pname)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLDisable(ctx, pname);
  }

  CGLError REGAL_CALL plugin_CGLEnable(CGLContextObj ctx, CGLContextEnable pname)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLEnable(ctx, pname);
  }

  const char *REGAL_CALL plugin_CGLErrorString(CGLError error)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLErrorString(error);
  }

  CGLError REGAL_CALL plugin_CGLFlushDrawable(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLFlushDrawable(ctx);
  }

  CGLError REGAL_CALL plugin_CGLGetOffScreen(CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetOffScreen(ctx, width, height, rowbytes, baseaddr);
  }

  CGLError REGAL_CALL plugin_CGLGetOption(CGLGlobalOption pname, GLint *param)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetOption(pname, param);
  }

  CGLError REGAL_CALL plugin_CGLGetParameter(CGLContextObj ctx, CGLContextParameter pname, GLint *params)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetParameter(ctx, pname, params);
  }

  void REGAL_CALL plugin_CGLGetVersion(GLint *majorvers, GLint *minorvers)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetVersion(majorvers, minorvers);
  }

  CGLError REGAL_CALL plugin_CGLGetVirtualScreen(CGLContextObj ctx, GLint *screen)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetVirtualScreen(ctx, screen);
  }

  CGLError REGAL_CALL plugin_CGLIsEnabled(CGLContextObj ctx, CGLContextEnable pname, GLint *enable)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLIsEnabled(ctx, pname, enable);
  }

  CGLError REGAL_CALL plugin_CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLQueryRendererInfo(display_mask, rend, nrend);
  }

  CGLError REGAL_CALL plugin_CGLSetFullScreen(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetFullScreen(ctx);
  }

  CGLError REGAL_CALL plugin_CGLSetOffScreen(CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetOffScreen(ctx, width, height, rowbytes, baseaddr);
  }

  CGLError REGAL_CALL plugin_CGLSetOption(CGLGlobalOption pname, GLint param)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetOption(pname, param);
  }

  CGLError REGAL_CALL plugin_CGLSetParameter(CGLContextObj ctx, CGLContextParameter pname, const GLint *params)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetParameter(ctx, pname, params);
  }

  CGLError REGAL_CALL plugin_CGLSetVirtualScreen(CGLContextObj ctx, GLint screen)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetVirtualScreen(ctx, screen);
  }

  /* CGL_VERSION_1_1 */

  CGLError REGAL_CALL plugin_CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLCreatePBuffer(width, height, target, internalFormat, max_level, pbuffer);
  }

  CGLError REGAL_CALL plugin_CGLDescribePBuffer(CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLDescribePBuffer(pbuffer, width, height, target, internalFormat, mipmap);
  }

  CGLError REGAL_CALL plugin_CGLDestroyPBuffer(CGLPBufferObj pbuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLDestroyPBuffer(pbuffer);
  }

  CGLError REGAL_CALL plugin_CGLGetPBuffer(CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetPBuffer(ctx, pbuffer, face, level, screen);
  }

  CGLError REGAL_CALL plugin_CGLSetPBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetPBuffer(ctx, pbuffer, face, level, screen);
  }

  CGLError REGAL_CALL plugin_CGLTexImagePBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLTexImagePBuffer(ctx, pbuffer, source);
  }

  /* CGL_VERSION_1_2 */

  GLuint REGAL_CALL plugin_CGLGetContextRetainCount(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetContextRetainCount(ctx);
  }

  CGLError REGAL_CALL plugin_CGLGetGlobalOption(CGLGlobalOption pname, GLint *params)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetGlobalOption(pname, params);
  }

  GLuint REGAL_CALL plugin_CGLGetPBufferRetainCount(CGLPBufferObj pbuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetPBufferRetainCount(pbuffer);
  }

  CGLPixelFormatObj REGAL_CALL plugin_CGLGetPixelFormat(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetPixelFormat(ctx);
  }

  GLuint REGAL_CALL plugin_CGLGetPixelFormatRetainCount(CGLPixelFormatObj pix)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetPixelFormatRetainCount(pix);
  }

  CGLError REGAL_CALL plugin_CGLLockContext(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLLockContext(ctx);
  }

  void REGAL_CALL plugin_CGLReleaseContext(CGLContextObj ctx)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLReleaseContext(ctx);
  }

  void REGAL_CALL plugin_CGLReleasePBuffer(CGLPBufferObj pbuffer)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLReleasePBuffer(pbuffer);
  }

  void REGAL_CALL plugin_CGLReleasePixelFormat(CGLPixelFormatObj pix)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLReleasePixelFormat(pix);
  }

  CGLContextObj REGAL_CALL plugin_CGLRetainContext(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLRetainContext(ctx);
  }

  CGLPBufferObj REGAL_CALL plugin_CGLRetainPBuffer(CGLPBufferObj pbuffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLRetainPBuffer(pbuffer);
  }

  CGLPixelFormatObj REGAL_CALL plugin_CGLRetainPixelFormat(CGLPixelFormatObj pix)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLRetainPixelFormat(pix);
  }

  CGLError REGAL_CALL plugin_CGLSetGlobalOption(CGLGlobalOption pname, const GLint *params)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetGlobalOption(pname, params);
  }

  CGLError REGAL_CALL plugin_CGLUnlockContext(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLUnlockContext(ctx);
  }

  /* CGL_VERSION_1_3 */

  CGLContextObj REGAL_CALL plugin_CGLGetCurrentContext(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetCurrentContext();
  }

  CGLShareGroupObj REGAL_CALL plugin_CGLGetShareGroup(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetShareGroup(ctx);
  }

  CGLError REGAL_CALL plugin_CGLGetSurface(CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLGetSurface(ctx, conn, win, srf);
  }

  CGLError REGAL_CALL plugin_CGLSetCurrentContext(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetCurrentContext(ctx);
  }

  CGLError REGAL_CALL plugin_CGLSetSurface(CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLSetSurface(ctx, conn, win, srf);
  }

  CGLError REGAL_CALL plugin_CGLTexImageIOSurface2D(CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLTexImageIOSurface2D(ctx, target, internal_format, width, height, format, type, ioSurface, plane);
  }

  CGLError REGAL_CALL plugin_CGLUpdateContext(CGLContextObj ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.CGLUpdateContext(ctx);
  }

#endif /* REGAL_SYS_OSX */
#if REGAL_SYS_EGL

  /* EGL_ANGLE_query_surface_pointer */

  EGLBoolean REGAL_CALL plugin_eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglQuerySurfacePointerANGLE(dpy, surface, attribute, value);
  }

  /* EGL_KHR_fence_sync */

  EGLint REGAL_CALL plugin_eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglClientWaitSyncKHR(dpy, GLsync, flags, timeout);
  }

  EGLSyncKHR REGAL_CALL plugin_eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreateSyncKHR(dpy, type, attrib_list);
  }

  EGLBoolean REGAL_CALL plugin_eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglDestroySyncKHR(dpy, GLsync);
  }

  EGLBoolean REGAL_CALL plugin_eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetSyncAttribKHR(dpy, GLsync, attribute, value);
  }

  /* EGL_KHR_image_base */

  EGLImageKHR REGAL_CALL plugin_eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list);
  }

  EGLBoolean REGAL_CALL plugin_eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglDestroyImageKHR(dpy, image);
  }

  /* EGL_KHR_lock_surface */

  EGLBoolean REGAL_CALL plugin_eglLockSurfaceKHR(EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglLockSurfaceKHR(display, surface, attrib_list);
  }

  EGLBoolean REGAL_CALL plugin_eglUnlockSurfaceKHR(EGLDisplay display, EGLSurface surface)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglUnlockSurfaceKHR(display, surface);
  }

  /* EGL_KHR_stream_consumer_gltexture */

  EGLBoolean REGAL_CALL plugin_eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglStreamConsumerAcquireKHR(dpy, stream);
  }

  EGLBoolean REGAL_CALL plugin_eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglStreamConsumerGLTextureExternalKHR(dpy, stream);
  }

  EGLBoolean REGAL_CALL plugin_eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglStreamConsumerReleaseKHR(dpy, stream);
  }

  /* EGL_KHR_stream_cross_process_fd */

  EGLStreamKHR REGAL_CALL plugin_eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreateStreamFromFileDescriptorKHR(dpy, file_descriptor);
  }

  EGLNativeFileDescriptorKHR REGAL_CALL plugin_eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetStreamFileDescriptorKHR(dpy, stream);
  }

  /* EGL_KHR_stream_producer_eglsurface */

  EGLSurface REGAL_CALL plugin_eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreateStreamProducerSurfaceKHR(dpy, config, stream, attrib_list);
  }

  /* EGL_KHR_wait_sync */

  EGLint REGAL_CALL plugin_eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglWaitSyncKHR(dpy, GLsync, flags);
  }

  /* EGL_MESA_drm_image */

  EGLImageKHR REGAL_CALL plugin_eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreateDRMImageMESA(dpy, attrib_list);
  }

  EGLBoolean REGAL_CALL plugin_eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglExportDRMImageMESA(dpy, image, name, handle, stride);
  }

  /* EGL_NV_coverage_sample */

  void REGAL_CALL plugin_eglCoverageMaskNV(GLboolean mask)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCoverageMaskNV(mask);
  }

  void REGAL_CALL plugin_eglCoverageOperationNV(GLenum operation)
  {
   ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCoverageOperationNV(operation);
  }

  /* EGL_NV_post_sub_buffer */

  EGLBoolean REGAL_CALL plugin_eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglPostSubBufferNV(dpy, surface, x, y, width, height);
  }

  /* EGL_NV_sync */

  EGLint REGAL_CALL plugin_eglClientWaitSyncNV(EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglClientWaitSyncNV(GLsync, flags, timeout);
  }

  EGLSyncNV REGAL_CALL plugin_eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreateFenceSyncNV(dpy, condition, attrib_list);
  }

  EGLBoolean REGAL_CALL plugin_eglDestroySyncNV(EGLSyncNV GLsync)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglDestroySyncNV(GLsync);
  }

  EGLBoolean REGAL_CALL plugin_eglFenceNV(EGLSyncNV GLsync)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglFenceNV(GLsync);
  }

  EGLBoolean REGAL_CALL plugin_eglGetSyncAttribNV(EGLSyncNV GLsync, EGLint attribute, EGLint *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetSyncAttribNV(GLsync, attribute, value);
  }

  EGLBoolean REGAL_CALL plugin_eglSignalSyncNV(EGLSyncNV GLsync, EGLenum mode)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglSignalSyncNV(GLsync, mode);
  }

  /* EGL_NV_system_time */

  EGLuint64NV REGAL_CALL plugin_eglGetSystemTimeFrequencyNV(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetSystemTimeFrequencyNV();
  }

  EGLuint64NV REGAL_CALL plugin_eglGetSystemTimeNV(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetSystemTimeNV();
  }

  /* EGL_VERSION_1_0 */

  EGLBoolean REGAL_CALL plugin_eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglChooseConfig(dpy, attrib_list, configs, config_size, num_config);
  }

  EGLBoolean REGAL_CALL plugin_eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCopyBuffers(dpy, surface, target);
  }

  EGLContext REGAL_CALL plugin_eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreateContext(dpy, config, share_context, attrib_list);
  }

  EGLSurface REGAL_CALL plugin_eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreatePbufferSurface(dpy, config, attrib_list);
  }

  EGLSurface REGAL_CALL plugin_eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreatePixmapSurface(dpy, config, pixmap, attrib_list);
  }

  EGLSurface REGAL_CALL plugin_eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreateWindowSurface(dpy, config, win, attrib_list);
  }

  EGLBoolean REGAL_CALL plugin_eglDestroyContext(EGLDisplay dpy, EGLContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglDestroyContext(dpy, ctx);
  }

  EGLBoolean REGAL_CALL plugin_eglDestroySurface(EGLDisplay dpy, EGLSurface surface)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglDestroySurface(dpy, surface);
  }

  EGLBoolean REGAL_CALL plugin_eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetConfigAttrib(dpy, config, attribute, value);
  }

  EGLBoolean REGAL_CALL plugin_eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetConfigs(dpy, configs, config_size, num_config);
  }

  EGLContext REGAL_CALL plugin_eglGetCurrentContext(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetCurrentContext();
  }

  EGLDisplay REGAL_CALL plugin_eglGetCurrentDisplay(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetCurrentDisplay();
  }

  EGLSurface REGAL_CALL plugin_eglGetCurrentSurface(EGLint readdraw)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetCurrentSurface(readdraw);
  }

  EGLDisplay REGAL_CALL plugin_eglGetDisplay(EGLNativeDisplayType display_id)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetDisplay(display_id);
  }

  EGLint REGAL_CALL plugin_eglGetError(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetError();
  }

  __eglMustCastToProperFunctionPointerType REGAL_CALL plugin_eglGetProcAddress(const char *procname)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglGetProcAddress(procname);
  }

  EGLBoolean REGAL_CALL plugin_eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglInitialize(dpy, major, minor);
  }

  EGLBoolean REGAL_CALL plugin_eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglMakeCurrent(dpy, draw, read, ctx);
  }

  EGLBoolean REGAL_CALL plugin_eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglQueryContext(dpy, ctx, attribute, value);
  }

  const char *REGAL_CALL plugin_eglQueryString(EGLDisplay dpy, EGLint name)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglQueryString(dpy, name);
  }

  EGLBoolean REGAL_CALL plugin_eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglQuerySurface(dpy, surface, attribute, value);
  }

  EGLBoolean REGAL_CALL plugin_eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglSwapBuffers(dpy, surface);
  }

  EGLBoolean REGAL_CALL plugin_eglTerminate(EGLDisplay dpy)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglTerminate(dpy);
  }

  EGLBoolean REGAL_CALL plugin_eglWaitGL(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglWaitGL();
  }

  EGLBoolean REGAL_CALL plugin_eglWaitNative(EGLint engine)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglWaitNative(engine);
  }

  /* EGL_VERSION_1_1 */

  EGLBoolean REGAL_CALL plugin_eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglBindTexImage(dpy, surface, buffer);
  }

  EGLBoolean REGAL_CALL plugin_eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglReleaseTexImage(dpy, surface, buffer);
  }

  /* EGL_VERSION_1_2 */

  EGLBoolean REGAL_CALL plugin_eglBindAPI(EGLenum api)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglBindAPI(api);
  }

  EGLSurface REGAL_CALL plugin_eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list);
  }

  EGLenum REGAL_CALL plugin_eglQueryAPI(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglQueryAPI();
  }

  EGLBoolean REGAL_CALL plugin_eglReleaseThread(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglReleaseThread();
  }

  EGLBoolean REGAL_CALL plugin_eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglSurfaceAttrib(dpy, surface, attribute, value);
  }

  EGLBoolean REGAL_CALL plugin_eglSwapInterval(EGLDisplay dpy, EGLint interval)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglSwapInterval(dpy, interval);
  }

  EGLBoolean REGAL_CALL plugin_eglWaitClient(void)
  {
    return ::REGAL_NAMESPACE_INTERNAL::dispatchTableGlobal.eglWaitClient();
  }

#endif /* REGAL_SYS_EGL */

}

#endif // REGAL_PLUGIN

REGAL_GLOBAL_END
