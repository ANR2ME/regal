

/*
  file generated by scripts/initLayers.py, edit at your peril
*/
#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if ! REGAL_SYS_WGL
#include <dlfcn.h>
#else
#error "Implement me!"
#endif

REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalContext.h"
#include "RegalDispatch.h"

extern "C" {

Regal::Layer * createLog(Regal::RegalContext *);
Regal::Layer * createFilt(Regal::RegalContext *);
Regal::Layer * createTexC(Regal::RegalContext *);
Regal::Layer * createVao(Regal::RegalContext *);
Regal::Layer * createDsa(Regal::RegalContext *);
Regal::Layer * createSo(Regal::RegalContext *);
Regal::Layer * createQuads(Regal::RegalContext *);
Regal::Layer * createIff(Regal::RegalContext *);
Regal::Layer * createTexSto(Regal::RegalContext *);
Regal::Layer * createBaseVertex(Regal::RegalContext *);
Regal::Layer * createPpca(Regal::RegalContext *);
Regal::Layer * createPpa(Regal::RegalContext *);
Regal::Layer * createHint(Regal::RegalContext *);
Regal::Layer * createObj(Regal::RegalContext *);
Regal::Layer * createHttp(Regal::RegalContext *);

}

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

typedef Layer *(*Constructor)( RegalContext * ctx );

void * mod = NULL;
Constructor GetConstructor( const char * constructorName ) {
  if( mod == NULL ) {
     mod = dlopen( NULL, RTLD_LAZY );
  }
  Constructor c = reinterpret_cast<Constructor>( dlsym( mod, constructorName ) );
  return c;
}

void InitLayers( RegalContext * ctx ) {
  Constructor constr = NULL;
  Layer * layer = NULL;
  constr = createLog;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createLog initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createLog initialization failed.");
      delete layer;
    }
  }
  constr = createFilt;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createFilt initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createFilt initialization failed.");
      delete layer;
    }
  }
  constr = createTexC;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createTexC initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createTexC initialization failed.");
      delete layer;
    }
  }
  constr = createVao;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createVao initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createVao initialization failed.");
      delete layer;
    }
  }
  constr = createDsa;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createDsa initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createDsa initialization failed.");
      delete layer;
    }
  }
  constr = createSo;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createSo initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createSo initialization failed.");
      delete layer;
    }
  }
  constr = createQuads;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createQuads initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createQuads initialization failed.");
      delete layer;
    }
  }
  constr = createIff;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createIff initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createIff initialization failed.");
      delete layer;
    }
  }
  constr = createTexSto;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createTexSto initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createTexSto initialization failed.");
      delete layer;
    }
  }
  constr = createBaseVertex;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createBaseVertex initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createBaseVertex initialization failed.");
      delete layer;
    }
  }
  constr = createPpca;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createPpca initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createPpca initialization failed.");
      delete layer;
    }
  }
  constr = createPpa;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createPpa initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createPpa initialization failed.");
      delete layer;
    }
  }
  constr = createHint;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createHint initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createHint initialization failed.");
      delete layer;
    }
  }
  constr = createObj;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createObj initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createObj initialization failed.");
      delete layer;
    }
  }
  constr = createHttp;
  if( constr ) {
    layer = constr( ctx );
    bool success = layer->Initialize( "" );
    if( success ) {
      Info("createHttp initialization succeeded.");
      ctx->layer.push_back( layer );
    } else {
      Info("createHttp initialization failed.");
      delete layer;
    }
  }

}

REGAL_NAMESPACE_END

