/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#ifndef REGAL_EMU_PROCS_PPA_H
#define REGAL_EMU_PROCS_PPA_H

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

void EmuProcsInterceptPpa( Dispatch::GL & dt );

struct EmuProcsOriginatePpa {

  EmuProcsOriginatePpa() {
    memset(this, 0, sizeof( *this ) );
  }

  PFNGLALPHAFUNCPROC glAlphaFunc;
  PFNGLBLENDCOLORPROC glBlendColor;
  PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
  PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
  PFNGLCLAMPCOLORPROC glClampColor;
  PFNGLCLEARACCUMPROC glClearAccum;
  PFNGLCLEARCOLORPROC glClearColor;
  PFNGLCLEARDEPTHPROC glClearDepth;
  PFNGLCLEARINDEXPROC glClearIndex;
  PFNGLCLEARSTENCILPROC glClearStencil;
  PFNGLCLIPPLANEPROC glClipPlane;
  PFNGLCOLORMASKIPROC glColorMaski;
  PFNGLCOLORMATERIALPROC glColorMaterial;
  PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
  PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
  PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
  PFNGLCULLFACEPROC glCullFace;
  PFNGLDEPTHFUNCPROC glDepthFunc;
  PFNGLDEPTHMASKPROC glDepthMask;
  PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
  PFNGLDISABLEPROC glDisable;
  PFNGLDISABLEIPROC glDisablei;
  PFNGLDRAWBUFFERSPROC glDrawBuffers;
  PFNGLENABLEPROC glEnable;
  PFNGLENABLEIPROC glEnablei;
  PFNGLFOGFPROC glFogf;
  PFNGLFOGFVPROC glFogfv;
  PFNGLFOGIPROC glFogi;
  PFNGLFRONTFACEPROC glFrontFace;
  PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
  PFNGLGETBOOLEANVPROC glGetBooleanv;
  PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
  PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
  PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
  PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
  PFNGLGETDOUBLEVPROC glGetDoublev;
  PFNGLGETFLOATI_VPROC glGetFloati_v;
  PFNGLGETFLOATVPROC glGetFloatv;
  PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
  PFNGLGETINTEGERVPROC glGetIntegerv;
  PFNGLGETLIGHTFVPROC glGetLightfv;
  PFNGLGETMATERIALFVPROC glGetMaterialfv;
  PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
  PFNGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple;
  PFNGLHINTPROC glHint;
  PFNGLINDEXMASKPROC glIndexMask;
  PFNGLISENABLEDPROC glIsEnabled;
  PFNGLISENABLEDIPROC glIsEnabledi;
  PFNGLLIGHTMODELFVPROC glLightModelfv;
  PFNGLLIGHTMODELIPROC glLightModeli;
  PFNGLLIGHTFPROC glLightf;
  PFNGLLIGHTFVPROC glLightfv;
  PFNGLLINESTIPPLEPROC glLineStipple;
  PFNGLLINEWIDTHPROC glLineWidth;
  PFNGLLISTBASEPROC glListBase;
  PFNGLLOGICOPPROC glLogicOp;
  PFNGLMAPGRID1DPROC glMapGrid1d;
  PFNGLMAPGRID2DPROC glMapGrid2d;
  PFNGLMATERIALFPROC glMaterialf;
  PFNGLMATERIALFVPROC glMaterialfv;
  PFNGLMATRIXMODEPROC glMatrixMode;
  PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
  PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
  PFNGLPIXELTRANSFERFPROC glPixelTransferf;
  PFNGLPIXELTRANSFERIPROC glPixelTransferi;
  PFNGLPIXELZOOMPROC glPixelZoom;
  PFNGLPOINTPARAMETERFPROC glPointParameterf;
  PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
  PFNGLPOINTPARAMETERIPROC glPointParameteri;
  PFNGLPOINTSIZEPROC glPointSize;
  PFNGLPOLYGONMODEPROC glPolygonMode;
  PFNGLPOLYGONOFFSETPROC glPolygonOffset;
  PFNGLPOLYGONSTIPPLEPROC glPolygonStipple;
  PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
  PFNGLREADBUFFERPROC glReadBuffer;
  PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
  PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
  PFNGLSHADEMODELPROC glShadeModel;
  PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
  PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
  PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
  PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
  PFNGLBLENDFUNCPROC glBlendFunc;
  PFNGLCOLORMASKPROC glColorMask;
  PFNGLDEPTHRANGEPROC glDepthRange;
  PFNGLDRAWBUFFERPROC glDrawBuffer;
  PFNGLGETLIGHTIVPROC glGetLightiv;
  PFNGLGETMATERIALIVPROC glGetMaterialiv;
  PFNGLGETTEXENVFVPROC glGetTexEnvfv;
  PFNGLGETTEXENVIVPROC glGetTexEnviv;
  PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
  PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
  PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
  PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
  PFNGLLIGHTMODELFPROC glLightModelf;
  PFNGLLIGHTMODELIVPROC glLightModeliv;
  PFNGLLIGHTIPROC glLighti;
  PFNGLLIGHTIVPROC glLightiv;
  PFNGLMAPGRID1FPROC glMapGrid1f;
  PFNGLMAPGRID2FPROC glMapGrid2f;
  PFNGLMATERIALIPROC glMateriali;
  PFNGLMATERIALIVPROC glMaterialiv;
  PFNGLPOPATTRIBPROC glPopAttrib;
  PFNGLPUSHATTRIBPROC glPushAttrib;
  PFNGLSCISSORPROC glScissor;
  PFNGLSTENCILFUNCPROC glStencilFunc;
  PFNGLSTENCILMASKPROC glStencilMask;
  PFNGLSTENCILOPPROC glStencilOp;
  PFNGLTEXENVFPROC glTexEnvf;
  PFNGLTEXENVFVPROC glTexEnvfv;
  PFNGLTEXENVIPROC glTexEnvi;
  PFNGLTEXENVIVPROC glTexEnviv;
  PFNGLVIEWPORTPROC glViewport;
  PFNGLBLENDEQUATIONPROC glBlendEquation;
  PFNGLACTIVETEXTUREPROC glActiveTexture;
  PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
  PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
  PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
  PFNGLBLENDEQUATIONIPROC glBlendEquationi;
  PFNGLBLENDFUNCIPROC glBlendFunci;
  PFNGLCLEARDEPTHFPROC glClearDepthf;
  PFNGLDEPTHRANGEFPROC glDepthRangef;
  PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
  PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
  PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
  PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
  PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
  PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
  PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
  PFNGLSCISSORARRAYVPROC glScissorArrayv;
  PFNGLSCISSORINDEXEDPROC glScissorIndexed;
  PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
  PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
  PFNGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
  PFNGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
  PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
  PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
  PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
  PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
  PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
  PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
  PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
  PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
  PFNGLGETINTEGERI_VEXTPROC glGetIntegeri_vEXT;
  PFNGLDRAWBUFFERSNVPROC glDrawBuffersNV;
  PFNGLGETLIGHTXVPROC glGetLightxv;
  PFNGLGETMATERIALXVPROC glGetMaterialxv;

  void Initialize( Dispatch::GL & dt ) {
    glAlphaFunc = dt.glAlphaFunc;
    glBlendColor = dt.glBlendColor;
    glBlendEquationSeparatei = dt.glBlendEquationSeparatei;
    glBlendFuncSeparatei = dt.glBlendFuncSeparatei;
    glClampColor = dt.glClampColor;
    glClearAccum = dt.glClearAccum;
    glClearColor = dt.glClearColor;
    glClearDepth = dt.glClearDepth;
    glClearIndex = dt.glClearIndex;
    glClearStencil = dt.glClearStencil;
    glClipPlane = dt.glClipPlane;
    glColorMaski = dt.glColorMaski;
    glColorMaterial = dt.glColorMaterial;
    glColorTableParameterfv = dt.glColorTableParameterfv;
    glConvolutionParameterfv = dt.glConvolutionParameterfv;
    glConvolutionParameteri = dt.glConvolutionParameteri;
    glCullFace = dt.glCullFace;
    glDepthFunc = dt.glDepthFunc;
    glDepthMask = dt.glDepthMask;
    glDepthRangeArrayv = dt.glDepthRangeArrayv;
    glDisable = dt.glDisable;
    glDisablei = dt.glDisablei;
    glDrawBuffers = dt.glDrawBuffers;
    glEnable = dt.glEnable;
    glEnablei = dt.glEnablei;
    glFogf = dt.glFogf;
    glFogfv = dt.glFogfv;
    glFogi = dt.glFogi;
    glFrontFace = dt.glFrontFace;
    glGetBooleani_v = dt.glGetBooleani_v;
    glGetBooleanv = dt.glGetBooleanv;
    glGetColorTableParameterfv = dt.glGetColorTableParameterfv;
    glGetConvolutionParameterfv = dt.glGetConvolutionParameterfv;
    glGetConvolutionParameteriv = dt.glGetConvolutionParameteriv;
    glGetDoublei_v = dt.glGetDoublei_v;
    glGetDoublev = dt.glGetDoublev;
    glGetFloati_v = dt.glGetFloati_v;
    glGetFloatv = dt.glGetFloatv;
    glGetIntegeri_v = dt.glGetIntegeri_v;
    glGetIntegerv = dt.glGetIntegerv;
    glGetLightfv = dt.glGetLightfv;
    glGetMaterialfv = dt.glGetMaterialfv;
    glGetMultiTexEnvivEXT = dt.glGetMultiTexEnvivEXT;
    glGetPolygonStipple = dt.glGetPolygonStipple;
    glHint = dt.glHint;
    glIndexMask = dt.glIndexMask;
    glIsEnabled = dt.glIsEnabled;
    glIsEnabledi = dt.glIsEnabledi;
    glLightModelfv = dt.glLightModelfv;
    glLightModeli = dt.glLightModeli;
    glLightf = dt.glLightf;
    glLightfv = dt.glLightfv;
    glLineStipple = dt.glLineStipple;
    glLineWidth = dt.glLineWidth;
    glListBase = dt.glListBase;
    glLogicOp = dt.glLogicOp;
    glMapGrid1d = dt.glMapGrid1d;
    glMapGrid2d = dt.glMapGrid2d;
    glMaterialf = dt.glMaterialf;
    glMaterialfv = dt.glMaterialfv;
    glMatrixMode = dt.glMatrixMode;
    glMinSampleShading = dt.glMinSampleShading;
    glMultiTexEnviEXT = dt.glMultiTexEnviEXT;
    glPixelTransferf = dt.glPixelTransferf;
    glPixelTransferi = dt.glPixelTransferi;
    glPixelZoom = dt.glPixelZoom;
    glPointParameterf = dt.glPointParameterf;
    glPointParameterfv = dt.glPointParameterfv;
    glPointParameteri = dt.glPointParameteri;
    glPointSize = dt.glPointSize;
    glPolygonMode = dt.glPolygonMode;
    glPolygonOffset = dt.glPolygonOffset;
    glPolygonStipple = dt.glPolygonStipple;
    glProvokingVertex = dt.glProvokingVertex;
    glReadBuffer = dt.glReadBuffer;
    glSampleCoverage = dt.glSampleCoverage;
    glScissorIndexedv = dt.glScissorIndexedv;
    glShadeModel = dt.glShadeModel;
    glStencilFuncSeparate = dt.glStencilFuncSeparate;
    glStencilMaskSeparate = dt.glStencilMaskSeparate;
    glStencilOpSeparate = dt.glStencilOpSeparate;
    glViewportIndexedfv = dt.glViewportIndexedfv;
    glBlendFunc = dt.glBlendFunc;
    glColorMask = dt.glColorMask;
    glDepthRange = dt.glDepthRange;
    glDrawBuffer = dt.glDrawBuffer;
    glGetLightiv = dt.glGetLightiv;
    glGetMaterialiv = dt.glGetMaterialiv;
    glGetTexEnvfv = dt.glGetTexEnvfv;
    glGetTexEnviv = dt.glGetTexEnviv;
    glGetTexLevelParameterfv = dt.glGetTexLevelParameterfv;
    glGetTexLevelParameteriv = dt.glGetTexLevelParameteriv;
    glGetTexParameterfv = dt.glGetTexParameterfv;
    glGetTexParameteriv = dt.glGetTexParameteriv;
    glLightModelf = dt.glLightModelf;
    glLightModeliv = dt.glLightModeliv;
    glLighti = dt.glLighti;
    glLightiv = dt.glLightiv;
    glMapGrid1f = dt.glMapGrid1f;
    glMapGrid2f = dt.glMapGrid2f;
    glMateriali = dt.glMateriali;
    glMaterialiv = dt.glMaterialiv;
    glPopAttrib = dt.glPopAttrib;
    glPushAttrib = dt.glPushAttrib;
    glScissor = dt.glScissor;
    glStencilFunc = dt.glStencilFunc;
    glStencilMask = dt.glStencilMask;
    glStencilOp = dt.glStencilOp;
    glTexEnvf = dt.glTexEnvf;
    glTexEnvfv = dt.glTexEnvfv;
    glTexEnvi = dt.glTexEnvi;
    glTexEnviv = dt.glTexEnviv;
    glViewport = dt.glViewport;
    glBlendEquation = dt.glBlendEquation;
    glActiveTexture = dt.glActiveTexture;
    glBlendFuncSeparate = dt.glBlendFuncSeparate;
    glPointParameteriv = dt.glPointParameteriv;
    glBlendEquationSeparate = dt.glBlendEquationSeparate;
    glBlendEquationi = dt.glBlendEquationi;
    glBlendFunci = dt.glBlendFunci;
    glClearDepthf = dt.glClearDepthf;
    glDepthRangef = dt.glDepthRangef;
    glDrawBuffersARB = dt.glDrawBuffersARB;
    glColorTableParameteriv = dt.glColorTableParameteriv;
    glConvolutionParameterf = dt.glConvolutionParameterf;
    glConvolutionParameteriv = dt.glConvolutionParameteriv;
    glGetColorTableParameteriv = dt.glGetColorTableParameteriv;
    glActiveTextureARB = dt.glActiveTextureARB;
    glDepthRangeIndexed = dt.glDepthRangeIndexed;
    glScissorArrayv = dt.glScissorArrayv;
    glScissorIndexed = dt.glScissorIndexed;
    glViewportArrayv = dt.glViewportArrayv;
    glViewportIndexedf = dt.glViewportIndexedf;
    glGetDoublei_vEXT = dt.glGetDoublei_vEXT;
    glGetFloati_vEXT = dt.glGetFloati_vEXT;
    glGetMultiTexEnvfvEXT = dt.glGetMultiTexEnvfvEXT;
    glGetTextureLevelParameterfvEXT = dt.glGetTextureLevelParameterfvEXT;
    glGetTextureLevelParameterivEXT = dt.glGetTextureLevelParameterivEXT;
    glGetTextureParameterfvEXT = dt.glGetTextureParameterfvEXT;
    glGetTextureParameterivEXT = dt.glGetTextureParameterivEXT;
    glMultiTexEnvfEXT = dt.glMultiTexEnvfEXT;
    glMultiTexEnvfvEXT = dt.glMultiTexEnvfvEXT;
    glMultiTexEnvivEXT = dt.glMultiTexEnvivEXT;
    glGetIntegeri_vEXT = dt.glGetIntegeri_vEXT;
    glDrawBuffersNV = dt.glDrawBuffersNV;
    glGetLightxv = dt.glGetLightxv;
    glGetMaterialxv = dt.glGetMaterialxv;
  }
};

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION

#endif // REGAL_EMU_PROCS_PPA_H
