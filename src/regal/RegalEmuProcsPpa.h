/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#ifndef REGAL_EMU_PROCS_PPA_H
#define REGAL_EMU_PROCS_PPA_H

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

void EmuProcsInterceptPpa( Dispatch::GL & dt );

struct EmuProcsOriginatePpa {

  EmuProcsOriginatePpa() {
    memset(this, 0, sizeof( *this ) );
  }

  PFNGLACTIVETEXTUREPROC glActiveTexture;
  PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
  PFNGLALPHAFUNCPROC glAlphaFunc;
  PFNGLBLENDCOLORPROC glBlendColor;
  PFNGLBLENDEQUATIONPROC glBlendEquation;
  PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
  PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
  PFNGLBLENDEQUATIONIPROC glBlendEquationi;
  PFNGLBLENDFUNCPROC glBlendFunc;
  PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
  PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
  PFNGLBLENDFUNCIPROC glBlendFunci;
  PFNGLCLAMPCOLORPROC glClampColor;
  PFNGLCLEARACCUMPROC glClearAccum;
  PFNGLCLEARCOLORPROC glClearColor;
  PFNGLCLEARDEPTHPROC glClearDepth;
  PFNGLCLEARDEPTHFPROC glClearDepthf;
  PFNGLCLEARINDEXPROC glClearIndex;
  PFNGLCLEARSTENCILPROC glClearStencil;
  PFNGLCLIPPLANEPROC glClipPlane;
  PFNGLCOLORMASKPROC glColorMask;
  PFNGLCOLORMASKIPROC glColorMaski;
  PFNGLCOLORMATERIALPROC glColorMaterial;
  PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
  PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
  PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
  PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
  PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
  PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
  PFNGLCULLFACEPROC glCullFace;
  PFNGLDEPTHFUNCPROC glDepthFunc;
  PFNGLDEPTHMASKPROC glDepthMask;
  PFNGLDEPTHRANGEPROC glDepthRange;
  PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
  PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
  PFNGLDEPTHRANGEFPROC glDepthRangef;
  PFNGLDISABLEPROC glDisable;
  PFNGLDISABLEIPROC glDisablei;
  PFNGLDRAWBUFFERPROC glDrawBuffer;
  PFNGLDRAWBUFFERSPROC glDrawBuffers;
  PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
  PFNGLDRAWBUFFERSNVPROC glDrawBuffersNV;
  PFNGLENABLEPROC glEnable;
  PFNGLENABLEIPROC glEnablei;
  PFNGLFOGFPROC glFogf;
  PFNGLFOGFVPROC glFogfv;
  PFNGLFOGIPROC glFogi;
  PFNGLFRONTFACEPROC glFrontFace;
  PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
  PFNGLGETBOOLEANVPROC glGetBooleanv;
  PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
  PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
  PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
  PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
  PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
  PFNGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
  PFNGLGETDOUBLEVPROC glGetDoublev;
  PFNGLGETFLOATI_VPROC glGetFloati_v;
  PFNGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
  PFNGLGETFLOATVPROC glGetFloatv;
  PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
  PFNGLGETINTEGERI_VEXTPROC glGetIntegeri_vEXT;
  PFNGLGETINTEGERVPROC glGetIntegerv;
  PFNGLGETLIGHTFVPROC glGetLightfv;
  PFNGLGETLIGHTIVPROC glGetLightiv;
  PFNGLGETLIGHTXVPROC glGetLightxv;
  PFNGLGETMATERIALFVPROC glGetMaterialfv;
  PFNGLGETMATERIALIVPROC glGetMaterialiv;
  PFNGLGETMATERIALXVPROC glGetMaterialxv;
  PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
  PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
  PFNGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple;
  PFNGLGETTEXENVFVPROC glGetTexEnvfv;
  PFNGLGETTEXENVIVPROC glGetTexEnviv;
  PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
  PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
  PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
  PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
  PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
  PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
  PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
  PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
  PFNGLHINTPROC glHint;
  PFNGLINDEXMASKPROC glIndexMask;
  PFNGLISENABLEDPROC glIsEnabled;
  PFNGLISENABLEDIPROC glIsEnabledi;
  PFNGLLIGHTMODELFPROC glLightModelf;
  PFNGLLIGHTMODELFVPROC glLightModelfv;
  PFNGLLIGHTMODELIPROC glLightModeli;
  PFNGLLIGHTMODELIVPROC glLightModeliv;
  PFNGLLIGHTFPROC glLightf;
  PFNGLLIGHTFVPROC glLightfv;
  PFNGLLIGHTIPROC glLighti;
  PFNGLLIGHTIVPROC glLightiv;
  PFNGLLINESTIPPLEPROC glLineStipple;
  PFNGLLINEWIDTHPROC glLineWidth;
  PFNGLLISTBASEPROC glListBase;
  PFNGLLOGICOPPROC glLogicOp;
  PFNGLMAPGRID1DPROC glMapGrid1d;
  PFNGLMAPGRID1FPROC glMapGrid1f;
  PFNGLMAPGRID2DPROC glMapGrid2d;
  PFNGLMAPGRID2FPROC glMapGrid2f;
  PFNGLMATERIALFPROC glMaterialf;
  PFNGLMATERIALFVPROC glMaterialfv;
  PFNGLMATERIALIPROC glMateriali;
  PFNGLMATERIALIVPROC glMaterialiv;
  PFNGLMATRIXMODEPROC glMatrixMode;
  PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
  PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
  PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
  PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
  PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
  PFNGLPIXELTRANSFERFPROC glPixelTransferf;
  PFNGLPIXELTRANSFERIPROC glPixelTransferi;
  PFNGLPIXELZOOMPROC glPixelZoom;
  PFNGLPOINTPARAMETERFPROC glPointParameterf;
  PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
  PFNGLPOINTPARAMETERIPROC glPointParameteri;
  PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
  PFNGLPOINTSIZEPROC glPointSize;
  PFNGLPOLYGONMODEPROC glPolygonMode;
  PFNGLPOLYGONOFFSETPROC glPolygonOffset;
  PFNGLPOLYGONSTIPPLEPROC glPolygonStipple;
  PFNGLPOPATTRIBPROC glPopAttrib;
  PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
  PFNGLPUSHATTRIBPROC glPushAttrib;
  PFNGLREADBUFFERPROC glReadBuffer;
  PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
  PFNGLSCISSORPROC glScissor;
  PFNGLSCISSORARRAYVPROC glScissorArrayv;
  PFNGLSCISSORINDEXEDPROC glScissorIndexed;
  PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
  PFNGLSHADEMODELPROC glShadeModel;
  PFNGLSTENCILFUNCPROC glStencilFunc;
  PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
  PFNGLSTENCILMASKPROC glStencilMask;
  PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
  PFNGLSTENCILOPPROC glStencilOp;
  PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
  PFNGLTEXENVFPROC glTexEnvf;
  PFNGLTEXENVFVPROC glTexEnvfv;
  PFNGLTEXENVIPROC glTexEnvi;
  PFNGLTEXENVIVPROC glTexEnviv;
  PFNGLVIEWPORTPROC glViewport;
  PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
  PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
  PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;

  void Initialize( Dispatch::GL & dt ) {
    glActiveTexture = dt.glActiveTexture;
    glActiveTextureARB = dt.glActiveTextureARB;
    glAlphaFunc = dt.glAlphaFunc;
    glBlendColor = dt.glBlendColor;
    glBlendEquation = dt.glBlendEquation;
    glBlendEquationSeparate = dt.glBlendEquationSeparate;
    glBlendEquationSeparatei = dt.glBlendEquationSeparatei;
    glBlendEquationi = dt.glBlendEquationi;
    glBlendFunc = dt.glBlendFunc;
    glBlendFuncSeparate = dt.glBlendFuncSeparate;
    glBlendFuncSeparatei = dt.glBlendFuncSeparatei;
    glBlendFunci = dt.glBlendFunci;
    glClampColor = dt.glClampColor;
    glClearAccum = dt.glClearAccum;
    glClearColor = dt.glClearColor;
    glClearDepth = dt.glClearDepth;
    glClearDepthf = dt.glClearDepthf;
    glClearIndex = dt.glClearIndex;
    glClearStencil = dt.glClearStencil;
    glClipPlane = dt.glClipPlane;
    glColorMask = dt.glColorMask;
    glColorMaski = dt.glColorMaski;
    glColorMaterial = dt.glColorMaterial;
    glColorTableParameterfv = dt.glColorTableParameterfv;
    glColorTableParameteriv = dt.glColorTableParameteriv;
    glConvolutionParameterf = dt.glConvolutionParameterf;
    glConvolutionParameterfv = dt.glConvolutionParameterfv;
    glConvolutionParameteri = dt.glConvolutionParameteri;
    glConvolutionParameteriv = dt.glConvolutionParameteriv;
    glCullFace = dt.glCullFace;
    glDepthFunc = dt.glDepthFunc;
    glDepthMask = dt.glDepthMask;
    glDepthRange = dt.glDepthRange;
    glDepthRangeArrayv = dt.glDepthRangeArrayv;
    glDepthRangeIndexed = dt.glDepthRangeIndexed;
    glDepthRangef = dt.glDepthRangef;
    glDisable = dt.glDisable;
    glDisablei = dt.glDisablei;
    glDrawBuffer = dt.glDrawBuffer;
    glDrawBuffers = dt.glDrawBuffers;
    glDrawBuffersARB = dt.glDrawBuffersARB;
    glDrawBuffersNV = dt.glDrawBuffersNV;
    glEnable = dt.glEnable;
    glEnablei = dt.glEnablei;
    glFogf = dt.glFogf;
    glFogfv = dt.glFogfv;
    glFogi = dt.glFogi;
    glFrontFace = dt.glFrontFace;
    glGetBooleani_v = dt.glGetBooleani_v;
    glGetBooleanv = dt.glGetBooleanv;
    glGetColorTableParameterfv = dt.glGetColorTableParameterfv;
    glGetColorTableParameteriv = dt.glGetColorTableParameteriv;
    glGetConvolutionParameterfv = dt.glGetConvolutionParameterfv;
    glGetConvolutionParameteriv = dt.glGetConvolutionParameteriv;
    glGetDoublei_v = dt.glGetDoublei_v;
    glGetDoublei_vEXT = dt.glGetDoublei_vEXT;
    glGetDoublev = dt.glGetDoublev;
    glGetFloati_v = dt.glGetFloati_v;
    glGetFloati_vEXT = dt.glGetFloati_vEXT;
    glGetFloatv = dt.glGetFloatv;
    glGetIntegeri_v = dt.glGetIntegeri_v;
    glGetIntegeri_vEXT = dt.glGetIntegeri_vEXT;
    glGetIntegerv = dt.glGetIntegerv;
    glGetLightfv = dt.glGetLightfv;
    glGetLightiv = dt.glGetLightiv;
    glGetLightxv = dt.glGetLightxv;
    glGetMaterialfv = dt.glGetMaterialfv;
    glGetMaterialiv = dt.glGetMaterialiv;
    glGetMaterialxv = dt.glGetMaterialxv;
    glGetMultiTexEnvfvEXT = dt.glGetMultiTexEnvfvEXT;
    glGetMultiTexEnvivEXT = dt.glGetMultiTexEnvivEXT;
    glGetPolygonStipple = dt.glGetPolygonStipple;
    glGetTexEnvfv = dt.glGetTexEnvfv;
    glGetTexEnviv = dt.glGetTexEnviv;
    glGetTexLevelParameterfv = dt.glGetTexLevelParameterfv;
    glGetTexLevelParameteriv = dt.glGetTexLevelParameteriv;
    glGetTexParameterfv = dt.glGetTexParameterfv;
    glGetTexParameteriv = dt.glGetTexParameteriv;
    glGetTextureLevelParameterfvEXT = dt.glGetTextureLevelParameterfvEXT;
    glGetTextureLevelParameterivEXT = dt.glGetTextureLevelParameterivEXT;
    glGetTextureParameterfvEXT = dt.glGetTextureParameterfvEXT;
    glGetTextureParameterivEXT = dt.glGetTextureParameterivEXT;
    glHint = dt.glHint;
    glIndexMask = dt.glIndexMask;
    glIsEnabled = dt.glIsEnabled;
    glIsEnabledi = dt.glIsEnabledi;
    glLightModelf = dt.glLightModelf;
    glLightModelfv = dt.glLightModelfv;
    glLightModeli = dt.glLightModeli;
    glLightModeliv = dt.glLightModeliv;
    glLightf = dt.glLightf;
    glLightfv = dt.glLightfv;
    glLighti = dt.glLighti;
    glLightiv = dt.glLightiv;
    glLineStipple = dt.glLineStipple;
    glLineWidth = dt.glLineWidth;
    glListBase = dt.glListBase;
    glLogicOp = dt.glLogicOp;
    glMapGrid1d = dt.glMapGrid1d;
    glMapGrid1f = dt.glMapGrid1f;
    glMapGrid2d = dt.glMapGrid2d;
    glMapGrid2f = dt.glMapGrid2f;
    glMaterialf = dt.glMaterialf;
    glMaterialfv = dt.glMaterialfv;
    glMateriali = dt.glMateriali;
    glMaterialiv = dt.glMaterialiv;
    glMatrixMode = dt.glMatrixMode;
    glMinSampleShading = dt.glMinSampleShading;
    glMultiTexEnvfEXT = dt.glMultiTexEnvfEXT;
    glMultiTexEnvfvEXT = dt.glMultiTexEnvfvEXT;
    glMultiTexEnviEXT = dt.glMultiTexEnviEXT;
    glMultiTexEnvivEXT = dt.glMultiTexEnvivEXT;
    glPixelTransferf = dt.glPixelTransferf;
    glPixelTransferi = dt.glPixelTransferi;
    glPixelZoom = dt.glPixelZoom;
    glPointParameterf = dt.glPointParameterf;
    glPointParameterfv = dt.glPointParameterfv;
    glPointParameteri = dt.glPointParameteri;
    glPointParameteriv = dt.glPointParameteriv;
    glPointSize = dt.glPointSize;
    glPolygonMode = dt.glPolygonMode;
    glPolygonOffset = dt.glPolygonOffset;
    glPolygonStipple = dt.glPolygonStipple;
    glPopAttrib = dt.glPopAttrib;
    glProvokingVertex = dt.glProvokingVertex;
    glPushAttrib = dt.glPushAttrib;
    glReadBuffer = dt.glReadBuffer;
    glSampleCoverage = dt.glSampleCoverage;
    glScissor = dt.glScissor;
    glScissorArrayv = dt.glScissorArrayv;
    glScissorIndexed = dt.glScissorIndexed;
    glScissorIndexedv = dt.glScissorIndexedv;
    glShadeModel = dt.glShadeModel;
    glStencilFunc = dt.glStencilFunc;
    glStencilFuncSeparate = dt.glStencilFuncSeparate;
    glStencilMask = dt.glStencilMask;
    glStencilMaskSeparate = dt.glStencilMaskSeparate;
    glStencilOp = dt.glStencilOp;
    glStencilOpSeparate = dt.glStencilOpSeparate;
    glTexEnvf = dt.glTexEnvf;
    glTexEnvfv = dt.glTexEnvfv;
    glTexEnvi = dt.glTexEnvi;
    glTexEnviv = dt.glTexEnviv;
    glViewport = dt.glViewport;
    glViewportArrayv = dt.glViewportArrayv;
    glViewportIndexedf = dt.glViewportIndexedf;
    glViewportIndexedfv = dt.glViewportIndexedfv;
  }
};

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION

#endif // REGAL_EMU_PROCS_PPA_H
