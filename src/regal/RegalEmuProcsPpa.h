/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#ifndef REGAL_EMU_PROCS_PPA_H
#define REGAL_EMU_PROCS_PPA_H

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

void EmuProcsInterceptPpa( Dispatch::GL & dt );

struct EmuProcsOriginatePpa {

  EmuProcsOriginatePpa() {
    memset(this, 0, sizeof( *this ) );
  }

  PFNGLALPHAFUNCPROC glAlphaFunc;
  PFNGLBLENDFUNCPROC glBlendFunc;
  PFNGLCLEARACCUMPROC glClearAccum;
  PFNGLCLEARCOLORPROC glClearColor;
  PFNGLCLEARDEPTHPROC glClearDepth;
  PFNGLCLEARINDEXPROC glClearIndex;
  PFNGLCLEARSTENCILPROC glClearStencil;
  PFNGLCLIPPLANEPROC glClipPlane;
  PFNGLCOLORMASKPROC glColorMask;
  PFNGLCOLORMATERIALPROC glColorMaterial;
  PFNGLCULLFACEPROC glCullFace;
  PFNGLDEPTHFUNCPROC glDepthFunc;
  PFNGLDEPTHMASKPROC glDepthMask;
  PFNGLDEPTHRANGEPROC glDepthRange;
  PFNGLDISABLEPROC glDisable;
  PFNGLDRAWBUFFERPROC glDrawBuffer;
  PFNGLENABLEPROC glEnable;
  PFNGLFRONTFACEPROC glFrontFace;
  PFNGLGETBOOLEANVPROC glGetBooleanv;
  PFNGLGETDOUBLEVPROC glGetDoublev;
  PFNGLGETFLOATVPROC glGetFloatv;
  PFNGLGETINTEGERVPROC glGetIntegerv;
  PFNGLGETLIGHTFVPROC glGetLightfv;
  PFNGLGETLIGHTIVPROC glGetLightiv;
  PFNGLGETMATERIALFVPROC glGetMaterialfv;
  PFNGLGETMATERIALIVPROC glGetMaterialiv;
  PFNGLGETPOLYGONSTIPPLEPROC glGetPolygonStipple;
  PFNGLGETTEXENVFVPROC glGetTexEnvfv;
  PFNGLGETTEXENVIVPROC glGetTexEnviv;
  PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
  PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
  PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
  PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
  PFNGLHINTPROC glHint;
  PFNGLINDEXMASKPROC glIndexMask;
  PFNGLISENABLEDPROC glIsEnabled;
  PFNGLLIGHTMODELFPROC glLightModelf;
  PFNGLLIGHTMODELFVPROC glLightModelfv;
  PFNGLLIGHTMODELIPROC glLightModeli;
  PFNGLLIGHTMODELIVPROC glLightModeliv;
  PFNGLLIGHTFPROC glLightf;
  PFNGLLIGHTFVPROC glLightfv;
  PFNGLLIGHTIPROC glLighti;
  PFNGLLIGHTIVPROC glLightiv;
  PFNGLLINESTIPPLEPROC glLineStipple;
  PFNGLLINEWIDTHPROC glLineWidth;
  PFNGLLISTBASEPROC glListBase;
  PFNGLLOGICOPPROC glLogicOp;
  PFNGLMAPGRID1DPROC glMapGrid1d;
  PFNGLMAPGRID1FPROC glMapGrid1f;
  PFNGLMAPGRID2DPROC glMapGrid2d;
  PFNGLMAPGRID2FPROC glMapGrid2f;
  PFNGLMATERIALFPROC glMaterialf;
  PFNGLMATERIALFVPROC glMaterialfv;
  PFNGLMATERIALIPROC glMateriali;
  PFNGLMATERIALIVPROC glMaterialiv;
  PFNGLMATRIXMODEPROC glMatrixMode;
  PFNGLPIXELTRANSFERFPROC glPixelTransferf;
  PFNGLPIXELTRANSFERIPROC glPixelTransferi;
  PFNGLPIXELZOOMPROC glPixelZoom;
  PFNGLPOINTSIZEPROC glPointSize;
  PFNGLPOLYGONMODEPROC glPolygonMode;
  PFNGLPOLYGONSTIPPLEPROC glPolygonStipple;
  PFNGLPOPATTRIBPROC glPopAttrib;
  PFNGLPUSHATTRIBPROC glPushAttrib;
  PFNGLREADBUFFERPROC glReadBuffer;
  PFNGLSCISSORPROC glScissor;
  PFNGLSHADEMODELPROC glShadeModel;
  PFNGLSTENCILFUNCPROC glStencilFunc;
  PFNGLSTENCILMASKPROC glStencilMask;
  PFNGLSTENCILOPPROC glStencilOp;
  PFNGLTEXENVFPROC glTexEnvf;
  PFNGLTEXENVFVPROC glTexEnvfv;
  PFNGLTEXENVIPROC glTexEnvi;
  PFNGLTEXENVIVPROC glTexEnviv;
  PFNGLVIEWPORTPROC glViewport;
  PFNGLPOLYGONOFFSETPROC glPolygonOffset;
  PFNGLBLENDCOLORPROC glBlendColor;
  PFNGLBLENDEQUATIONPROC glBlendEquation;
  PFNGLACTIVETEXTUREPROC glActiveTexture;
  PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
  PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
  PFNGLPOINTPARAMETERFPROC glPointParameterf;
  PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
  PFNGLPOINTPARAMETERIPROC glPointParameteri;
  PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
  PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
  PFNGLDRAWBUFFERSPROC glDrawBuffers;
  PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
  PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
  PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
  PFNGLCLAMPCOLORPROC glClampColor;
  PFNGLCOLORMASKIPROC glColorMaski;
  PFNGLDISABLEIPROC glDisablei;
  PFNGLENABLEIPROC glEnablei;
  PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
  PFNGLISENABLEDIPROC glIsEnabledi;
  PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
  PFNGLBLENDEQUATIONIPROC glBlendEquationi;
  PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
  PFNGLBLENDFUNCIPROC glBlendFunci;
  PFNGLCLEARDEPTHFPROC glClearDepthf;
  PFNGLDEPTHRANGEFPROC glDepthRangef;
  PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
  PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
  PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
  PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
  PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
  PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
  PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
  PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
  PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
  PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
  PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
  PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
  PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
  PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
  PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
  PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
  PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
  PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
  PFNGLGETFLOATI_VPROC glGetFloati_v;
  PFNGLSCISSORARRAYVPROC glScissorArrayv;
  PFNGLSCISSORINDEXEDPROC glScissorIndexed;
  PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
  PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
  PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
  PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
  PFNGLGETDOUBLEI_VEXTPROC glGetDoublei_vEXT;
  PFNGLGETFLOATI_VEXTPROC glGetFloati_vEXT;
  PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
  PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
  PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
  PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
  PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
  PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
  PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
  PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
  PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
  PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
  PFNGLGETINTEGERI_VEXTPROC glGetIntegeri_vEXT;
  PFNGLDRAWBUFFERSNVPROC glDrawBuffersNV;
  PFNGLGETLIGHTXVPROC glGetLightxv;
  PFNGLGETMATERIALXVPROC glGetMaterialxv;

  void Initialize( Dispatch::GL & dt ) {
    glAlphaFunc = dt.glAlphaFunc;
    glBlendFunc = dt.glBlendFunc;
    glClearAccum = dt.glClearAccum;
    glClearColor = dt.glClearColor;
    glClearDepth = dt.glClearDepth;
    glClearIndex = dt.glClearIndex;
    glClearStencil = dt.glClearStencil;
    glClipPlane = dt.glClipPlane;
    glColorMask = dt.glColorMask;
    glColorMaterial = dt.glColorMaterial;
    glCullFace = dt.glCullFace;
    glDepthFunc = dt.glDepthFunc;
    glDepthMask = dt.glDepthMask;
    glDepthRange = dt.glDepthRange;
    glDisable = dt.glDisable;
    glDrawBuffer = dt.glDrawBuffer;
    glEnable = dt.glEnable;
    glFrontFace = dt.glFrontFace;
    glGetBooleanv = dt.glGetBooleanv;
    glGetDoublev = dt.glGetDoublev;
    glGetFloatv = dt.glGetFloatv;
    glGetIntegerv = dt.glGetIntegerv;
    glGetLightfv = dt.glGetLightfv;
    glGetLightiv = dt.glGetLightiv;
    glGetMaterialfv = dt.glGetMaterialfv;
    glGetMaterialiv = dt.glGetMaterialiv;
    glGetPolygonStipple = dt.glGetPolygonStipple;
    glGetTexEnvfv = dt.glGetTexEnvfv;
    glGetTexEnviv = dt.glGetTexEnviv;
    glGetTexLevelParameterfv = dt.glGetTexLevelParameterfv;
    glGetTexLevelParameteriv = dt.glGetTexLevelParameteriv;
    glGetTexParameterfv = dt.glGetTexParameterfv;
    glGetTexParameteriv = dt.glGetTexParameteriv;
    glHint = dt.glHint;
    glIndexMask = dt.glIndexMask;
    glIsEnabled = dt.glIsEnabled;
    glLightModelf = dt.glLightModelf;
    glLightModelfv = dt.glLightModelfv;
    glLightModeli = dt.glLightModeli;
    glLightModeliv = dt.glLightModeliv;
    glLightf = dt.glLightf;
    glLightfv = dt.glLightfv;
    glLighti = dt.glLighti;
    glLightiv = dt.glLightiv;
    glLineStipple = dt.glLineStipple;
    glLineWidth = dt.glLineWidth;
    glListBase = dt.glListBase;
    glLogicOp = dt.glLogicOp;
    glMapGrid1d = dt.glMapGrid1d;
    glMapGrid1f = dt.glMapGrid1f;
    glMapGrid2d = dt.glMapGrid2d;
    glMapGrid2f = dt.glMapGrid2f;
    glMaterialf = dt.glMaterialf;
    glMaterialfv = dt.glMaterialfv;
    glMateriali = dt.glMateriali;
    glMaterialiv = dt.glMaterialiv;
    glMatrixMode = dt.glMatrixMode;
    glPixelTransferf = dt.glPixelTransferf;
    glPixelTransferi = dt.glPixelTransferi;
    glPixelZoom = dt.glPixelZoom;
    glPointSize = dt.glPointSize;
    glPolygonMode = dt.glPolygonMode;
    glPolygonStipple = dt.glPolygonStipple;
    glPopAttrib = dt.glPopAttrib;
    glPushAttrib = dt.glPushAttrib;
    glReadBuffer = dt.glReadBuffer;
    glScissor = dt.glScissor;
    glShadeModel = dt.glShadeModel;
    glStencilFunc = dt.glStencilFunc;
    glStencilMask = dt.glStencilMask;
    glStencilOp = dt.glStencilOp;
    glTexEnvf = dt.glTexEnvf;
    glTexEnvfv = dt.glTexEnvfv;
    glTexEnvi = dt.glTexEnvi;
    glTexEnviv = dt.glTexEnviv;
    glViewport = dt.glViewport;
    glPolygonOffset = dt.glPolygonOffset;
    glBlendColor = dt.glBlendColor;
    glBlendEquation = dt.glBlendEquation;
    glActiveTexture = dt.glActiveTexture;
    glSampleCoverage = dt.glSampleCoverage;
    glBlendFuncSeparate = dt.glBlendFuncSeparate;
    glPointParameterf = dt.glPointParameterf;
    glPointParameterfv = dt.glPointParameterfv;
    glPointParameteri = dt.glPointParameteri;
    glPointParameteriv = dt.glPointParameteriv;
    glBlendEquationSeparate = dt.glBlendEquationSeparate;
    glDrawBuffers = dt.glDrawBuffers;
    glStencilFuncSeparate = dt.glStencilFuncSeparate;
    glStencilMaskSeparate = dt.glStencilMaskSeparate;
    glStencilOpSeparate = dt.glStencilOpSeparate;
    glClampColor = dt.glClampColor;
    glColorMaski = dt.glColorMaski;
    glDisablei = dt.glDisablei;
    glEnablei = dt.glEnablei;
    glGetBooleani_v = dt.glGetBooleani_v;
    glIsEnabledi = dt.glIsEnabledi;
    glBlendEquationSeparatei = dt.glBlendEquationSeparatei;
    glBlendEquationi = dt.glBlendEquationi;
    glBlendFuncSeparatei = dt.glBlendFuncSeparatei;
    glBlendFunci = dt.glBlendFunci;
    glClearDepthf = dt.glClearDepthf;
    glDepthRangef = dt.glDepthRangef;
    glDrawBuffersARB = dt.glDrawBuffersARB;
    glColorTableParameterfv = dt.glColorTableParameterfv;
    glColorTableParameteriv = dt.glColorTableParameteriv;
    glConvolutionParameterf = dt.glConvolutionParameterf;
    glConvolutionParameterfv = dt.glConvolutionParameterfv;
    glConvolutionParameteri = dt.glConvolutionParameteri;
    glConvolutionParameteriv = dt.glConvolutionParameteriv;
    glGetColorTableParameterfv = dt.glGetColorTableParameterfv;
    glGetColorTableParameteriv = dt.glGetColorTableParameteriv;
    glGetConvolutionParameterfv = dt.glGetConvolutionParameterfv;
    glGetConvolutionParameteriv = dt.glGetConvolutionParameteriv;
    glActiveTextureARB = dt.glActiveTextureARB;
    glProvokingVertex = dt.glProvokingVertex;
    glMinSampleShading = dt.glMinSampleShading;
    glGetIntegeri_v = dt.glGetIntegeri_v;
    glDepthRangeArrayv = dt.glDepthRangeArrayv;
    glDepthRangeIndexed = dt.glDepthRangeIndexed;
    glGetDoublei_v = dt.glGetDoublei_v;
    glGetFloati_v = dt.glGetFloati_v;
    glScissorArrayv = dt.glScissorArrayv;
    glScissorIndexed = dt.glScissorIndexed;
    glScissorIndexedv = dt.glScissorIndexedv;
    glViewportArrayv = dt.glViewportArrayv;
    glViewportIndexedf = dt.glViewportIndexedf;
    glViewportIndexedfv = dt.glViewportIndexedfv;
    glGetDoublei_vEXT = dt.glGetDoublei_vEXT;
    glGetFloati_vEXT = dt.glGetFloati_vEXT;
    glGetMultiTexEnvfvEXT = dt.glGetMultiTexEnvfvEXT;
    glGetMultiTexEnvivEXT = dt.glGetMultiTexEnvivEXT;
    glGetTextureLevelParameterfvEXT = dt.glGetTextureLevelParameterfvEXT;
    glGetTextureLevelParameterivEXT = dt.glGetTextureLevelParameterivEXT;
    glGetTextureParameterfvEXT = dt.glGetTextureParameterfvEXT;
    glGetTextureParameterivEXT = dt.glGetTextureParameterivEXT;
    glMultiTexEnvfEXT = dt.glMultiTexEnvfEXT;
    glMultiTexEnvfvEXT = dt.glMultiTexEnvfvEXT;
    glMultiTexEnviEXT = dt.glMultiTexEnviEXT;
    glMultiTexEnvivEXT = dt.glMultiTexEnvivEXT;
    glGetIntegeri_vEXT = dt.glGetIntegeri_vEXT;
    glDrawBuffersNV = dt.glDrawBuffersNV;
    glGetLightxv = dt.glGetLightxv;
    glGetMaterialxv = dt.glGetMaterialxv;
  }
};

REGAL_NAMESPACE_END

#endif // REGAL_EMULATION

#endif // REGAL_EMU_PROCS_PPA_H
