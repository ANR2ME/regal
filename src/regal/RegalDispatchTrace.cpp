/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_TRACE

#ifdef REGAL_NAMESPACE
#undef REGAL_NAMESPACE
#endif

REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalBreak.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalPrivate.h"
#include "RegalContext.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

namespace Trace
{

// GL_VERSION_1_0

  void  glAccum(RegalContext *_context, GLenum op, GLfloat value);
  void  glAlphaFunc(RegalContext *_context, GLenum func, GLclampf ref);
  void  glBegin(RegalContext *_context, GLenum mode);
  void  glBitmap(RegalContext *_context, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
  void  glBlendFunc(RegalContext *_context, GLenum sfactor, GLenum dfactor);
  void  glCallList(RegalContext *_context, GLuint list);
  void  glCallLists(RegalContext *_context, GLsizei n, GLenum type, const GLvoid *lists);
  void  glClear(RegalContext *_context, GLbitfield mask);
  void  glClearAccum(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
  void  glClearColor(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
  void  glClearDepth(RegalContext *_context, GLclampd depth);
  void  glClearIndex(RegalContext *_context, GLfloat c);
  void  glClearStencil(RegalContext *_context, GLint s);
  void  glClipPlane(RegalContext *_context, GLenum plane, const GLdouble *equation);
  void  glColor3b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue);
  void  glColor3bv(RegalContext *_context, const GLbyte *v);
  void  glColor3d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue);
  void  glColor3dv(RegalContext *_context, const GLdouble *v);
  void  glColor3f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue);
  void  glColor3fv(RegalContext *_context, const GLfloat *v);
  void  glColor3i(RegalContext *_context, GLint red, GLint green, GLint blue);
  void  glColor3iv(RegalContext *_context, const GLint *v);
  void  glColor3s(RegalContext *_context, GLshort red, GLshort green, GLshort blue);
  void  glColor3sv(RegalContext *_context, const GLshort *v);
  void  glColor3ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue);
  void  glColor3ubv(RegalContext *_context, const GLubyte *v);
  void  glColor3ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue);
  void  glColor3uiv(RegalContext *_context, const GLuint *v);
  void  glColor3us(RegalContext *_context, GLushort red, GLushort green, GLushort blue);
  void  glColor3usv(RegalContext *_context, const GLushort *v);
  void  glColor4b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
  void  glColor4bv(RegalContext *_context, const GLbyte *v);
  void  glColor4d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
  void  glColor4dv(RegalContext *_context, const GLdouble *v);
  void  glColor4f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
  void  glColor4fv(RegalContext *_context, const GLfloat *v);
  void  glColor4i(RegalContext *_context, GLint red, GLint green, GLint blue, GLint alpha);
  void  glColor4iv(RegalContext *_context, const GLint *v);
  void  glColor4s(RegalContext *_context, GLshort red, GLshort green, GLshort blue, GLshort alpha);
  void  glColor4sv(RegalContext *_context, const GLshort *v);
  void  glColor4ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
  void  glColor4ubv(RegalContext *_context, const GLubyte *v);
  void  glColor4ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue, GLuint alpha);
  void  glColor4uiv(RegalContext *_context, const GLuint *v);
  void  glColor4us(RegalContext *_context, GLushort red, GLushort green, GLushort blue, GLushort alpha);
  void  glColor4usv(RegalContext *_context, const GLushort *v);
  void  glColorMask(RegalContext *_context, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
  void  glColorMaterial(RegalContext *_context, GLenum face, GLenum mode);
  void  glCopyPixels(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
  void  glCullFace(RegalContext *_context, GLenum mode);
  void  glDeleteLists(RegalContext *_context, GLuint list, GLsizei range);
  void  glDepthFunc(RegalContext *_context, GLenum func);
  void  glDepthMask(RegalContext *_context, GLboolean flag);
  void  glDepthRange(RegalContext *_context, GLclampd zNear, GLclampd zFar);
  void  glDisable(RegalContext *_context, GLenum cap);
  void  glDrawBuffer(RegalContext *_context, GLenum mode);
  void  glDrawPixels(RegalContext *_context, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
  void  glEdgeFlag(RegalContext *_context, GLboolean flag);
  void  glEdgeFlagv(RegalContext *_context, const GLboolean *flag);
  void  glEnable(RegalContext *_context, GLenum cap);
  void  glEnd(RegalContext *_context);
  void  glEndList(RegalContext *_context);
  void  glEvalCoord1d(RegalContext *_context, GLdouble u);
  void  glEvalCoord1dv(RegalContext *_context, const GLdouble *u);
  void  glEvalCoord1f(RegalContext *_context, GLfloat u);
  void  glEvalCoord1fv(RegalContext *_context, const GLfloat *u);
  void  glEvalCoord2d(RegalContext *_context, GLdouble u, GLdouble v);
  void  glEvalCoord2dv(RegalContext *_context, const GLdouble *u);
  void  glEvalCoord2f(RegalContext *_context, GLfloat u, GLfloat v);
  void  glEvalCoord2fv(RegalContext *_context, const GLfloat *u);
  void  glEvalMesh1(RegalContext *_context, GLenum mode, GLint i1, GLint i2);
  void  glEvalMesh2(RegalContext *_context, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
  void  glEvalPoint1(RegalContext *_context, GLint i);
  void  glEvalPoint2(RegalContext *_context, GLint i, GLint j);
  void  glFeedbackBuffer(RegalContext *_context, GLsizei size, GLenum type, GLfloat *buffer);
  void  glFinish(RegalContext *_context);
  void  glFlush(RegalContext *_context);
  void  glFogf(RegalContext *_context, GLenum pname, GLfloat param);
  void  glFogfv(RegalContext *_context, GLenum pname, const GLfloat *params);
  void  glFogi(RegalContext *_context, GLenum pname, GLint param);
  void  glFogiv(RegalContext *_context, GLenum pname, const GLint *params);
  void  glFrontFace(RegalContext *_context, GLenum mode);
  void  glFrustum(RegalContext *_context, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
  GLuint  glGenLists(RegalContext *_context, GLsizei range);
  void  glGetBooleanv(RegalContext *_context, GLenum pname, GLboolean *params);
  void  glGetClipPlane(RegalContext *_context, GLenum plane, GLdouble *equation);
  void  glGetDoublev(RegalContext *_context, GLenum pname, GLdouble *params);
  GLenum  glGetError(RegalContext *_context);
  void  glGetFloatv(RegalContext *_context, GLenum pname, GLfloat *params);
  void  glGetIntegerv(RegalContext *_context, GLenum pname, GLint *params);
  void  glGetLightfv(RegalContext *_context, GLenum light, GLenum pname, GLfloat *params);
  void  glGetLightiv(RegalContext *_context, GLenum light, GLenum pname, GLint *params);
  void  glGetMapdv(RegalContext *_context, GLenum target, GLenum query, GLdouble *v);
  void  glGetMapfv(RegalContext *_context, GLenum target, GLenum query, GLfloat *v);
  void  glGetMapiv(RegalContext *_context, GLenum target, GLenum query, GLint *v);
  void  glGetMaterialfv(RegalContext *_context, GLenum face, GLenum pname, GLfloat *params);
  void  glGetMaterialiv(RegalContext *_context, GLenum face, GLenum pname, GLint *params);
  void  glGetPixelMapfv(RegalContext *_context, GLenum map, GLfloat *values);
  void  glGetPixelMapuiv(RegalContext *_context, GLenum map, GLuint *values);
  void  glGetPixelMapusv(RegalContext *_context, GLenum map, GLushort *values);
  void  glGetPolygonStipple(RegalContext *_context, GLubyte *mask);
  const GLubyte * glGetString(RegalContext *_context, GLenum name);
  void  glGetTexEnvfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetTexEnviv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetTexGendv(RegalContext *_context, GLenum coord, GLenum pname, GLdouble *params);
  void  glGetTexGenfv(RegalContext *_context, GLenum coord, GLenum pname, GLfloat *params);
  void  glGetTexGeniv(RegalContext *_context, GLenum coord, GLenum pname, GLint *params);
  void  glGetTexImage(RegalContext *_context, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
  void  glGetTexLevelParameterfv(RegalContext *_context, GLenum target, GLint level, GLenum pname, GLfloat *params);
  void  glGetTexLevelParameteriv(RegalContext *_context, GLenum target, GLint level, GLenum pname, GLint *params);
  void  glGetTexParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetTexParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glHint(RegalContext *_context, GLenum target, GLenum mode);
  void  glIndexMask(RegalContext *_context, GLuint mask);
  void  glIndexd(RegalContext *_context, GLdouble c);
  void  glIndexdv(RegalContext *_context, const GLdouble *c);
  void  glIndexf(RegalContext *_context, GLfloat c);
  void  glIndexfv(RegalContext *_context, const GLfloat *c);
  void  glIndexi(RegalContext *_context, GLint c);
  void  glIndexiv(RegalContext *_context, const GLint *c);
  void  glIndexs(RegalContext *_context, GLshort c);
  void  glIndexsv(RegalContext *_context, const GLshort *c);
  void  glInitNames(RegalContext *_context);
  GLboolean  glIsEnabled(RegalContext *_context, GLenum cap);
  GLboolean  glIsList(RegalContext *_context, GLuint list);
  void  glLightModelf(RegalContext *_context, GLenum pname, GLfloat param);
  void  glLightModelfv(RegalContext *_context, GLenum pname, const GLfloat *params);
  void  glLightModeli(RegalContext *_context, GLenum pname, GLint param);
  void  glLightModeliv(RegalContext *_context, GLenum pname, const GLint *params);
  void  glLightf(RegalContext *_context, GLenum light, GLenum pname, GLfloat param);
  void  glLightfv(RegalContext *_context, GLenum light, GLenum pname, const GLfloat *params);
  void  glLighti(RegalContext *_context, GLenum light, GLenum pname, GLint param);
  void  glLightiv(RegalContext *_context, GLenum light, GLenum pname, const GLint *params);
  void  glLineStipple(RegalContext *_context, GLint factor, GLushort pattern);
  void  glLineWidth(RegalContext *_context, GLfloat width);
  void  glListBase(RegalContext *_context, GLuint base);
  void  glLoadIdentity(RegalContext *_context);
  void  glLoadMatrixd(RegalContext *_context, const GLdouble *m);
  void  glLoadMatrixf(RegalContext *_context, const GLfloat *m);
  void  glLoadName(RegalContext *_context, GLuint name);
  void  glLogicOp(RegalContext *_context, GLenum opcode);
  void  glMap1d(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
  void  glMap1f(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
  void  glMap2d(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
  void  glMap2f(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
  void  glMapGrid1d(RegalContext *_context, GLint un, GLdouble u1, GLdouble u2);
  void  glMapGrid1f(RegalContext *_context, GLint un, GLfloat u1, GLfloat u2);
  void  glMapGrid2d(RegalContext *_context, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
  void  glMapGrid2f(RegalContext *_context, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
  void  glMaterialf(RegalContext *_context, GLenum face, GLenum pname, GLfloat param);
  void  glMaterialfv(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params);
  void  glMateriali(RegalContext *_context, GLenum face, GLenum pname, GLint param);
  void  glMaterialiv(RegalContext *_context, GLenum face, GLenum pname, const GLint *params);
  void  glMatrixMode(RegalContext *_context, GLenum mode);
  void  glMultMatrixd(RegalContext *_context, const GLdouble *m);
  void  glMultMatrixf(RegalContext *_context, const GLfloat *m);
  void  glNewList(RegalContext *_context, GLuint list, GLenum mode);
  void  glNormal3b(RegalContext *_context, GLbyte nx, GLbyte ny, GLbyte nz);
  void  glNormal3bv(RegalContext *_context, const GLbyte *v);
  void  glNormal3d(RegalContext *_context, GLdouble nx, GLdouble ny, GLdouble nz);
  void  glNormal3dv(RegalContext *_context, const GLdouble *v);
  void  glNormal3f(RegalContext *_context, GLfloat nx, GLfloat ny, GLfloat nz);
  void  glNormal3fv(RegalContext *_context, const GLfloat *v);
  void  glNormal3i(RegalContext *_context, GLint nx, GLint ny, GLint nz);
  void  glNormal3iv(RegalContext *_context, const GLint *v);
  void  glNormal3s(RegalContext *_context, GLshort nx, GLshort ny, GLshort nz);
  void  glNormal3sv(RegalContext *_context, const GLshort *v);
  void  glOrtho(RegalContext *_context, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
  void  glPassThrough(RegalContext *_context, GLfloat token);
  void  glPixelMapfv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLfloat *values);
  void  glPixelMapuiv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLuint *values);
  void  glPixelMapusv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLushort *values);
  void  glPixelStoref(RegalContext *_context, GLenum pname, GLfloat param);
  void  glPixelStorei(RegalContext *_context, GLenum pname, GLint param);
  void  glPixelTransferf(RegalContext *_context, GLenum pname, GLfloat param);
  void  glPixelTransferi(RegalContext *_context, GLenum pname, GLint param);
  void  glPixelZoom(RegalContext *_context, GLfloat xfactor, GLfloat yfactor);
  void  glPointSize(RegalContext *_context, GLfloat size);
  void  glPolygonMode(RegalContext *_context, GLenum face, GLenum mode);
  void  glPolygonStipple(RegalContext *_context, const GLubyte *mask);
  void  glPopAttrib(RegalContext *_context);
  void  glPopMatrix(RegalContext *_context);
  void  glPopName(RegalContext *_context);
  void  glPushAttrib(RegalContext *_context, GLbitfield mask);
  void  glPushMatrix(RegalContext *_context);
  void  glPushName(RegalContext *_context, GLuint name);
  void  glRasterPos2d(RegalContext *_context, GLdouble x, GLdouble y);
  void  glRasterPos2dv(RegalContext *_context, const GLdouble *v);
  void  glRasterPos2f(RegalContext *_context, GLfloat x, GLfloat y);
  void  glRasterPos2fv(RegalContext *_context, const GLfloat *v);
  void  glRasterPos2i(RegalContext *_context, GLint x, GLint y);
  void  glRasterPos2iv(RegalContext *_context, const GLint *v);
  void  glRasterPos2s(RegalContext *_context, GLshort x, GLshort y);
  void  glRasterPos2sv(RegalContext *_context, const GLshort *v);
  void  glRasterPos3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z);
  void  glRasterPos3dv(RegalContext *_context, const GLdouble *v);
  void  glRasterPos3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z);
  void  glRasterPos3fv(RegalContext *_context, const GLfloat *v);
  void  glRasterPos3i(RegalContext *_context, GLint x, GLint y, GLint z);
  void  glRasterPos3iv(RegalContext *_context, const GLint *v);
  void  glRasterPos3s(RegalContext *_context, GLshort x, GLshort y, GLshort z);
  void  glRasterPos3sv(RegalContext *_context, const GLshort *v);
  void  glRasterPos4d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glRasterPos4dv(RegalContext *_context, const GLdouble *v);
  void  glRasterPos4f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glRasterPos4fv(RegalContext *_context, const GLfloat *v);
  void  glRasterPos4i(RegalContext *_context, GLint x, GLint y, GLint z, GLint w);
  void  glRasterPos4iv(RegalContext *_context, const GLint *v);
  void  glRasterPos4s(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w);
  void  glRasterPos4sv(RegalContext *_context, const GLshort *v);
  void  glReadBuffer(RegalContext *_context, GLenum mode);
  void  glReadPixels(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
  void  glRectd(RegalContext *_context, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
  void  glRectdv(RegalContext *_context, const GLdouble *v1, const GLdouble *v2);
  void  glRectf(RegalContext *_context, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
  void  glRectfv(RegalContext *_context, const GLfloat *v1, const GLfloat *v2);
  void  glRecti(RegalContext *_context, GLint x1, GLint y1, GLint x2, GLint y2);
  void  glRectiv(RegalContext *_context, const GLint *v1, const GLint *v2);
  void  glRects(RegalContext *_context, GLshort x1, GLshort y1, GLshort x2, GLshort y2);
  void  glRectsv(RegalContext *_context, const GLshort *v1, const GLshort *v2);
  GLint  glRenderMode(RegalContext *_context, GLenum mode);
  void  glRotated(RegalContext *_context, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
  void  glRotatef(RegalContext *_context, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
  void  glScaled(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z);
  void  glScalef(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z);
  void  glScissor(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glSelectBuffer(RegalContext *_context, GLsizei size, GLuint *buffer);
  void  glShadeModel(RegalContext *_context, GLenum mode);
  void  glStencilFunc(RegalContext *_context, GLenum func, GLint ref, GLuint mask);
  void  glStencilMask(RegalContext *_context, GLuint mask);
  void  glStencilOp(RegalContext *_context, GLenum fail, GLenum zfail, GLenum zpass);
  void  glTexCoord1d(RegalContext *_context, GLdouble s);
  void  glTexCoord1dv(RegalContext *_context, const GLdouble *v);
  void  glTexCoord1f(RegalContext *_context, GLfloat s);
  void  glTexCoord1fv(RegalContext *_context, const GLfloat *v);
  void  glTexCoord1i(RegalContext *_context, GLint s);
  void  glTexCoord1iv(RegalContext *_context, const GLint *v);
  void  glTexCoord1s(RegalContext *_context, GLshort s);
  void  glTexCoord1sv(RegalContext *_context, const GLshort *v);
  void  glTexCoord2d(RegalContext *_context, GLdouble s, GLdouble t);
  void  glTexCoord2dv(RegalContext *_context, const GLdouble *v);
  void  glTexCoord2f(RegalContext *_context, GLfloat s, GLfloat t);
  void  glTexCoord2fv(RegalContext *_context, const GLfloat *v);
  void  glTexCoord2i(RegalContext *_context, GLint s, GLint t);
  void  glTexCoord2iv(RegalContext *_context, const GLint *v);
  void  glTexCoord2s(RegalContext *_context, GLshort s, GLshort t);
  void  glTexCoord2sv(RegalContext *_context, const GLshort *v);
  void  glTexCoord3d(RegalContext *_context, GLdouble s, GLdouble t, GLdouble r);
  void  glTexCoord3dv(RegalContext *_context, const GLdouble *v);
  void  glTexCoord3f(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r);
  void  glTexCoord3fv(RegalContext *_context, const GLfloat *v);
  void  glTexCoord3i(RegalContext *_context, GLint s, GLint t, GLint r);
  void  glTexCoord3iv(RegalContext *_context, const GLint *v);
  void  glTexCoord3s(RegalContext *_context, GLshort s, GLshort t, GLshort r);
  void  glTexCoord3sv(RegalContext *_context, const GLshort *v);
  void  glTexCoord4d(RegalContext *_context, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
  void  glTexCoord4dv(RegalContext *_context, const GLdouble *v);
  void  glTexCoord4f(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
  void  glTexCoord4fv(RegalContext *_context, const GLfloat *v);
  void  glTexCoord4i(RegalContext *_context, GLint s, GLint t, GLint r, GLint q);
  void  glTexCoord4iv(RegalContext *_context, const GLint *v);
  void  glTexCoord4s(RegalContext *_context, GLshort s, GLshort t, GLshort r, GLshort q);
  void  glTexCoord4sv(RegalContext *_context, const GLshort *v);
  void  glTexEnvf(RegalContext *_context, GLenum target, GLenum pname, GLfloat param);
  void  glTexEnvfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glTexEnvi(RegalContext *_context, GLenum target, GLenum pname, GLint param);
  void  glTexEnviv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);
  void  glTexGend(RegalContext *_context, GLenum coord, GLenum pname, GLdouble param);
  void  glTexGendv(RegalContext *_context, GLenum coord, GLenum pname, const GLdouble *params);
  void  glTexGenf(RegalContext *_context, GLenum coord, GLenum pname, GLfloat param);
  void  glTexGenfv(RegalContext *_context, GLenum coord, GLenum pname, const GLfloat *params);
  void  glTexGeni(RegalContext *_context, GLenum coord, GLenum pname, GLint param);
  void  glTexGeniv(RegalContext *_context, GLenum coord, GLenum pname, const GLint *params);
  void  glTexImage1D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTexImage2D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTexParameterf(RegalContext *_context, GLenum target, GLenum pname, GLfloat param);
  void  glTexParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glTexParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint param);
  void  glTexParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);
  void  glTranslated(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z);
  void  glTranslatef(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z);
  void  glVertex2d(RegalContext *_context, GLdouble x, GLdouble y);
  void  glVertex2dv(RegalContext *_context, const GLdouble *v);
  void  glVertex2f(RegalContext *_context, GLfloat x, GLfloat y);
  void  glVertex2fv(RegalContext *_context, const GLfloat *v);
  void  glVertex2i(RegalContext *_context, GLint x, GLint y);
  void  glVertex2iv(RegalContext *_context, const GLint *v);
  void  glVertex2s(RegalContext *_context, GLshort x, GLshort y);
  void  glVertex2sv(RegalContext *_context, const GLshort *v);
  void  glVertex3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z);
  void  glVertex3dv(RegalContext *_context, const GLdouble *v);
  void  glVertex3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z);
  void  glVertex3fv(RegalContext *_context, const GLfloat *v);
  void  glVertex3i(RegalContext *_context, GLint x, GLint y, GLint z);
  void  glVertex3iv(RegalContext *_context, const GLint *v);
  void  glVertex3s(RegalContext *_context, GLshort x, GLshort y, GLshort z);
  void  glVertex3sv(RegalContext *_context, const GLshort *v);
  void  glVertex4d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glVertex4dv(RegalContext *_context, const GLdouble *v);
  void  glVertex4f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glVertex4fv(RegalContext *_context, const GLfloat *v);
  void  glVertex4i(RegalContext *_context, GLint x, GLint y, GLint z, GLint w);
  void  glVertex4iv(RegalContext *_context, const GLint *v);
  void  glVertex4s(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w);
  void  glVertex4sv(RegalContext *_context, const GLshort *v);
  void  glViewport(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height);

// GL_VERSION_1_1

  GLboolean  glAreTexturesResident(RegalContext *_context, GLsizei n, const GLuint *textures, GLboolean *residences);
  void  glArrayElement(RegalContext *_context, GLint index);
  void  glBindTexture(RegalContext *_context, GLenum target, GLuint texture);
  void  glColorPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glCopyTexImage1D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
  void  glCopyTexImage2D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
  void  glCopyTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
  void  glCopyTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glDeleteTextures(RegalContext *_context, GLsizei n, const GLuint *textures);
  void  glDisableClientState(RegalContext *_context, GLenum cap);
  void  glDrawArrays(RegalContext *_context, GLenum mode, GLint first, GLsizei count);
  void  glDrawElements(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
  void  glEdgeFlagPointer(RegalContext *_context, GLsizei stride, const GLvoid *pointer);
  void  glEnableClientState(RegalContext *_context, GLenum cap);
  void  glGenTextures(RegalContext *_context, GLsizei n, GLuint *textures);
  void  glGetPointerv(RegalContext *_context, GLenum pname, GLvoid **params);
  void  glIndexPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glIndexub(RegalContext *_context, GLubyte c);
  void  glIndexubv(RegalContext *_context, const GLubyte *c);
  void  glInterleavedArrays(RegalContext *_context, GLenum format, GLsizei stride, const GLvoid *pointer);
  GLboolean  glIsTexture(RegalContext *_context, GLuint texture);
  void  glNormalPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glPolygonOffset(RegalContext *_context, GLfloat factor, GLfloat units);
  void  glPopClientAttrib(RegalContext *_context);
  void  glPrioritizeTextures(RegalContext *_context, GLsizei n, const GLuint *textures, const GLclampf *priorities);
  void  glPushClientAttrib(RegalContext *_context, GLbitfield mask);
  void  glTexCoordPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
  void  glVertexPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);

// GL_VERSION_1_2

  void  glBlendColor(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
  void  glBlendEquation(RegalContext *_context, GLenum mode);
  void  glCopyTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glDrawRangeElements(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
  void  glTexImage3D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);

// GL_VERSION_1_3

  void  glActiveTexture(RegalContext *_context, GLenum texture);
  void  glClientActiveTexture(RegalContext *_context, GLenum texture);
  void  glCompressedTexImage1D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexImage2D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexImage3D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glGetCompressedTexImage(RegalContext *_context, GLenum target, GLint lod, GLvoid *img);
  void  glLoadTransposeMatrixd(RegalContext *_context, const GLdouble *m);
  void  glLoadTransposeMatrixf(RegalContext *_context, const GLfloat *m);
  void  glMultTransposeMatrixd(RegalContext *_context, const GLdouble *m);
  void  glMultTransposeMatrixf(RegalContext *_context, const GLfloat *m);
  void  glMultiTexCoord1d(RegalContext *_context, GLenum target, GLdouble s);
  void  glMultiTexCoord1dv(RegalContext *_context, GLenum target, const GLdouble *v);
  void  glMultiTexCoord1f(RegalContext *_context, GLenum target, GLfloat s);
  void  glMultiTexCoord1fv(RegalContext *_context, GLenum target, const GLfloat *v);
  void  glMultiTexCoord1i(RegalContext *_context, GLenum target, GLint s);
  void  glMultiTexCoord1iv(RegalContext *_context, GLenum target, const GLint *v);
  void  glMultiTexCoord1s(RegalContext *_context, GLenum target, GLshort s);
  void  glMultiTexCoord1sv(RegalContext *_context, GLenum target, const GLshort *v);
  void  glMultiTexCoord2d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t);
  void  glMultiTexCoord2dv(RegalContext *_context, GLenum target, const GLdouble *v);
  void  glMultiTexCoord2f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t);
  void  glMultiTexCoord2fv(RegalContext *_context, GLenum target, const GLfloat *v);
  void  glMultiTexCoord2i(RegalContext *_context, GLenum target, GLint s, GLint t);
  void  glMultiTexCoord2iv(RegalContext *_context, GLenum target, const GLint *v);
  void  glMultiTexCoord2s(RegalContext *_context, GLenum target, GLshort s, GLshort t);
  void  glMultiTexCoord2sv(RegalContext *_context, GLenum target, const GLshort *v);
  void  glMultiTexCoord3d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r);
  void  glMultiTexCoord3dv(RegalContext *_context, GLenum target, const GLdouble *v);
  void  glMultiTexCoord3f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r);
  void  glMultiTexCoord3fv(RegalContext *_context, GLenum target, const GLfloat *v);
  void  glMultiTexCoord3i(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r);
  void  glMultiTexCoord3iv(RegalContext *_context, GLenum target, const GLint *v);
  void  glMultiTexCoord3s(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r);
  void  glMultiTexCoord3sv(RegalContext *_context, GLenum target, const GLshort *v);
  void  glMultiTexCoord4d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
  void  glMultiTexCoord4dv(RegalContext *_context, GLenum target, const GLdouble *v);
  void  glMultiTexCoord4f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
  void  glMultiTexCoord4fv(RegalContext *_context, GLenum target, const GLfloat *v);
  void  glMultiTexCoord4i(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r, GLint q);
  void  glMultiTexCoord4iv(RegalContext *_context, GLenum target, const GLint *v);
  void  glMultiTexCoord4s(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
  void  glMultiTexCoord4sv(RegalContext *_context, GLenum target, const GLshort *v);
  void  glSampleCoverage(RegalContext *_context, GLclampf value, GLboolean invert);

// GL_VERSION_1_4

  void  glBlendFuncSeparate(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  void  glFogCoordPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glFogCoordd(RegalContext *_context, GLdouble coord);
  void  glFogCoorddv(RegalContext *_context, const GLdouble *coord);
  void  glFogCoordf(RegalContext *_context, GLfloat coord);
  void  glFogCoordfv(RegalContext *_context, const GLfloat *coord);
  void  glMultiDrawArrays(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
  void  glMultiDrawElements(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount);
  void  glPointParameterf(RegalContext *_context, GLenum pname, GLfloat param);
  void  glPointParameterfv(RegalContext *_context, GLenum pname, const GLfloat *params);
  void  glPointParameteri(RegalContext *_context, GLenum pname, GLint param);
  void  glPointParameteriv(RegalContext *_context, GLenum pname, const GLint *params);
  void  glSecondaryColor3b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue);
  void  glSecondaryColor3bv(RegalContext *_context, const GLbyte *v);
  void  glSecondaryColor3d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue);
  void  glSecondaryColor3dv(RegalContext *_context, const GLdouble *v);
  void  glSecondaryColor3f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue);
  void  glSecondaryColor3fv(RegalContext *_context, const GLfloat *v);
  void  glSecondaryColor3i(RegalContext *_context, GLint red, GLint green, GLint blue);
  void  glSecondaryColor3iv(RegalContext *_context, const GLint *v);
  void  glSecondaryColor3s(RegalContext *_context, GLshort red, GLshort green, GLshort blue);
  void  glSecondaryColor3sv(RegalContext *_context, const GLshort *v);
  void  glSecondaryColor3ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue);
  void  glSecondaryColor3ubv(RegalContext *_context, const GLubyte *v);
  void  glSecondaryColor3ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue);
  void  glSecondaryColor3uiv(RegalContext *_context, const GLuint *v);
  void  glSecondaryColor3us(RegalContext *_context, GLushort red, GLushort green, GLushort blue);
  void  glSecondaryColor3usv(RegalContext *_context, const GLushort *v);
  void  glSecondaryColorPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glWindowPos2d(RegalContext *_context, GLdouble x, GLdouble y);
  void  glWindowPos2dv(RegalContext *_context, const GLdouble *p);
  void  glWindowPos2f(RegalContext *_context, GLfloat x, GLfloat y);
  void  glWindowPos2fv(RegalContext *_context, const GLfloat *p);
  void  glWindowPos2i(RegalContext *_context, GLint x, GLint y);
  void  glWindowPos2iv(RegalContext *_context, const GLint *p);
  void  glWindowPos2s(RegalContext *_context, GLshort x, GLshort y);
  void  glWindowPos2sv(RegalContext *_context, const GLshort *p);
  void  glWindowPos3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z);
  void  glWindowPos3dv(RegalContext *_context, const GLdouble *p);
  void  glWindowPos3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z);
  void  glWindowPos3fv(RegalContext *_context, const GLfloat *p);
  void  glWindowPos3i(RegalContext *_context, GLint x, GLint y, GLint z);
  void  glWindowPos3iv(RegalContext *_context, const GLint *p);
  void  glWindowPos3s(RegalContext *_context, GLshort x, GLshort y, GLshort z);
  void  glWindowPos3sv(RegalContext *_context, const GLshort *p);

// GL_VERSION_1_5

  void  glBeginQuery(RegalContext *_context, GLenum target, GLuint id);
  void  glBindBuffer(RegalContext *_context, GLenum target, GLuint buffer);
  void  glBufferData(RegalContext *_context, GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
  void  glBufferSubData(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
  void  glDeleteBuffers(RegalContext *_context, GLsizei n, const GLuint *buffers);
  void  glDeleteQueries(RegalContext *_context, GLsizei n, const GLuint *ids);
  void  glEndQuery(RegalContext *_context, GLenum target);
  void  glGenBuffers(RegalContext *_context, GLsizei n, GLuint *buffers);
  void  glGenQueries(RegalContext *_context, GLsizei n, GLuint *ids);
  void  glGetBufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetBufferPointerv(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params);
  void  glGetBufferSubData(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
  void  glGetQueryObjectiv(RegalContext *_context, GLuint id, GLenum pname, GLint *params);
  void  glGetQueryObjectuiv(RegalContext *_context, GLuint id, GLenum pname, GLuint *params);
  void  glGetQueryiv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  GLboolean  glIsBuffer(RegalContext *_context, GLuint buffer);
  GLboolean  glIsQuery(RegalContext *_context, GLuint id);
  GLvoid * glMapBuffer(RegalContext *_context, GLenum target, GLenum access);
  GLboolean  glUnmapBuffer(RegalContext *_context, GLenum target);

// GL_VERSION_2_0

  void  glAttachShader(RegalContext *_context, GLuint program, GLuint shader);
  void  glBindAttribLocation(RegalContext *_context, GLuint program, GLuint index, const GLchar *name);
  void  glBlendEquationSeparate(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha);
  void  glCompileShader(RegalContext *_context, GLuint shader);
  GLuint  glCreateProgram(RegalContext *_context);
  GLuint  glCreateShader(RegalContext *_context, GLenum type);
  void  glDeleteProgram(RegalContext *_context, GLuint program);
  void  glDeleteShader(RegalContext *_context, GLuint shader);
  void  glDetachShader(RegalContext *_context, GLuint program, GLuint shader);
  void  glDisableVertexAttribArray(RegalContext *_context, GLuint index);
  void  glDrawBuffers(RegalContext *_context, GLsizei n, const GLenum *bufs);
  void  glEnableVertexAttribArray(RegalContext *_context, GLuint index);
  void  glGetActiveAttrib(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
  void  glGetActiveUniform(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
  void  glGetAttachedShaders(RegalContext *_context, GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
  GLint  glGetAttribLocation(RegalContext *_context, GLuint program, const GLchar *name);
  void  glGetProgramInfoLog(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  void  glGetProgramiv(RegalContext *_context, GLuint program, GLenum pname, GLint *params);
  void  glGetShaderInfoLog(RegalContext *_context, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  void  glGetShaderSource(RegalContext *_context, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
  void  glGetShaderiv(RegalContext *_context, GLuint shader, GLenum pname, GLint *params);
  GLint  glGetUniformLocation(RegalContext *_context, GLuint program, const GLchar *name);
  void  glGetUniformfv(RegalContext *_context, GLuint program, GLint location, GLfloat *params);
  void  glGetUniformiv(RegalContext *_context, GLuint program, GLint location, GLint *params);
  void  glGetVertexAttribPointerv(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer);
  void  glGetVertexAttribdv(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params);
  void  glGetVertexAttribfv(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params);
  void  glGetVertexAttribiv(RegalContext *_context, GLuint index, GLenum pname, GLint *params);
  GLboolean  glIsProgram(RegalContext *_context, GLuint program);
  GLboolean  glIsShader(RegalContext *_context, GLuint shader);
  void  glLinkProgram(RegalContext *_context, GLuint program);
  void  glShaderSource(RegalContext *_context, GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length);
  void  glStencilFuncSeparate(RegalContext *_context, GLenum face, GLenum func, GLint ref, GLuint mask);
  void  glStencilMaskSeparate(RegalContext *_context, GLenum face, GLuint mask);
  void  glStencilOpSeparate(RegalContext *_context, GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
  void  glUniform1f(RegalContext *_context, GLint location, GLfloat v0);
  void  glUniform1fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value);
  void  glUniform1i(RegalContext *_context, GLint location, GLint v0);
  void  glUniform1iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value);
  void  glUniform2f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1);
  void  glUniform2fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value);
  void  glUniform2i(RegalContext *_context, GLint location, GLint v0, GLint v1);
  void  glUniform2iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value);
  void  glUniform3f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
  void  glUniform3fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value);
  void  glUniform3i(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2);
  void  glUniform3iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value);
  void  glUniform4f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  void  glUniform4fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value);
  void  glUniform4i(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
  void  glUniform4iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value);
  void  glUniformMatrix2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUseProgram(RegalContext *_context, GLuint program);
  void  glValidateProgram(RegalContext *_context, GLuint program);
  void  glVertexAttrib1d(RegalContext *_context, GLuint index, GLdouble x);
  void  glVertexAttrib1dv(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib1f(RegalContext *_context, GLuint index, GLfloat x);
  void  glVertexAttrib1fv(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib1s(RegalContext *_context, GLuint index, GLshort x);
  void  glVertexAttrib1sv(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib2d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y);
  void  glVertexAttrib2dv(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib2f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y);
  void  glVertexAttrib2fv(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib2s(RegalContext *_context, GLuint index, GLshort x, GLshort y);
  void  glVertexAttrib2sv(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib3d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z);
  void  glVertexAttrib3dv(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib3f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z);
  void  glVertexAttrib3fv(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib3s(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z);
  void  glVertexAttrib3sv(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib4Nbv(RegalContext *_context, GLuint index, const GLbyte *v);
  void  glVertexAttrib4Niv(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttrib4Nsv(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib4Nub(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
  void  glVertexAttrib4Nubv(RegalContext *_context, GLuint index, const GLubyte *v);
  void  glVertexAttrib4Nuiv(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttrib4Nusv(RegalContext *_context, GLuint index, const GLushort *v);
  void  glVertexAttrib4bv(RegalContext *_context, GLuint index, const GLbyte *v);
  void  glVertexAttrib4d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glVertexAttrib4dv(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib4f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glVertexAttrib4fv(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib4iv(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttrib4s(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
  void  glVertexAttrib4sv(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib4ubv(RegalContext *_context, GLuint index, const GLubyte *v);
  void  glVertexAttrib4uiv(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttrib4usv(RegalContext *_context, GLuint index, const GLushort *v);
  void  glVertexAttribPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);

// GL_VERSION_2_1

  void  glUniformMatrix2x3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix2x4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix3x2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix3x4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix4x2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix4x3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);

// GL_VERSION_3_0

  void  glBeginConditionalRender(RegalContext *_context, GLuint id, GLenum mode);
  void  glBeginTransformFeedback(RegalContext *_context, GLenum primitiveMode);
  void  glBindFragDataLocation(RegalContext *_context, GLuint program, GLuint color, const GLchar *name);
  void  glClampColor(RegalContext *_context, GLenum target, GLenum clamp);
  void  glClearBufferfi(RegalContext *_context, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
  void  glClearBufferfv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLfloat *value);
  void  glClearBufferiv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLint *value);
  void  glClearBufferuiv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLuint *value);
  void  glColorMaski(RegalContext *_context, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
  void  glDisablei(RegalContext *_context, GLenum cap, GLuint index);
  void  glEnablei(RegalContext *_context, GLenum cap, GLuint index);
  void  glEndConditionalRender(RegalContext *_context);
  void  glEndTransformFeedback(RegalContext *_context);
  void  glGetBooleani_v(RegalContext *_context, GLenum target, GLuint index, GLboolean *data);
  GLint  glGetFragDataLocation(RegalContext *_context, GLuint program, const GLchar *name);
  const GLubyte * glGetStringi(RegalContext *_context, GLenum name, GLuint index);
  void  glGetTexParameterIiv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetTexParameterIuiv(RegalContext *_context, GLenum target, GLenum pname, GLuint *params);
  void  glGetTransformFeedbackVarying(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
  void  glGetUniformuiv(RegalContext *_context, GLuint program, GLint location, GLuint *params);
  void  glGetVertexAttribIiv(RegalContext *_context, GLuint index, GLenum pname, GLint *params);
  void  glGetVertexAttribIuiv(RegalContext *_context, GLuint index, GLenum pname, GLuint *params);
  GLboolean  glIsEnabledi(RegalContext *_context, GLenum target, GLuint index);
  void  glTexParameterIiv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);
  void  glTexParameterIuiv(RegalContext *_context, GLenum target, GLenum pname, const GLuint *params);
  void  glTransformFeedbackVaryings(RegalContext *_context, GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode);
  void  glUniform1ui(RegalContext *_context, GLint location, GLuint v0);
  void  glUniform1uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value);
  void  glUniform2ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1);
  void  glUniform2uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value);
  void  glUniform3ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2);
  void  glUniform3uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value);
  void  glUniform4ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  void  glUniform4uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value);
  void  glVertexAttribI1i(RegalContext *_context, GLuint index, GLint x);
  void  glVertexAttribI1iv(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttribI1ui(RegalContext *_context, GLuint index, GLuint x);
  void  glVertexAttribI1uiv(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttribI2i(RegalContext *_context, GLuint index, GLint x, GLint y);
  void  glVertexAttribI2iv(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttribI2ui(RegalContext *_context, GLuint index, GLuint x, GLuint y);
  void  glVertexAttribI2uiv(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttribI3i(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z);
  void  glVertexAttribI3iv(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttribI3ui(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z);
  void  glVertexAttribI3uiv(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttribI4bv(RegalContext *_context, GLuint index, const GLbyte *v);
  void  glVertexAttribI4i(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z, GLint w);
  void  glVertexAttribI4iv(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttribI4sv(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttribI4ubv(RegalContext *_context, GLuint index, const GLubyte *v);
  void  glVertexAttribI4ui(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  void  glVertexAttribI4uiv(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttribI4usv(RegalContext *_context, GLuint index, const GLushort *v);
  void  glVertexAttribIPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);

// GL_VERSION_3_1

  void  glDrawArraysInstanced(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount);
  void  glDrawElementsInstanced(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
  void  glPrimitiveRestartIndex(RegalContext *_context, GLuint index);
  void  glTexBuffer(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer);

// GL_VERSION_3_2

  void  glFramebufferTexture(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level);
  void  glGetBufferParameteri64v(RegalContext *_context, GLenum target, GLenum pname, GLint64 *params);
  void  glGetInteger64i_v(RegalContext *_context, GLenum target, GLuint index, GLint64 *data);

// GL_VERSION_3_3

  void  glVertexAttribDivisor(RegalContext *_context, GLuint index, GLuint divisor);

// GL_VERSION_4_0

  void  glBlendEquationSeparatei(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha);
  void  glBlendEquationi(RegalContext *_context, GLuint buf, GLenum mode);
  void  glBlendFuncSeparatei(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  void  glBlendFunci(RegalContext *_context, GLuint buf, GLenum src, GLenum dst);

// GL_3DFX_tbuffer

  void  glTbufferMask3DFX(RegalContext *_context, GLuint mask);

// GL_AMD_debug_output

  void  glDebugMessageCallbackAMD(RegalContext *_context, GLDEBUGPROCAMD callback, GLvoid *userParam);
  void  glDebugMessageEnableAMD(RegalContext *_context, GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
  void  glDebugMessageInsertAMD(RegalContext *_context, GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
  GLuint  glGetDebugMessageLogAMD(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);

// GL_AMD_draw_buffers_blend

  void  glBlendEquationIndexedAMD(RegalContext *_context, GLuint buf, GLenum mode);
  void  glBlendEquationSeparateIndexedAMD(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha);
  void  glBlendFuncIndexedAMD(RegalContext *_context, GLuint buf, GLenum src, GLenum dst);
  void  glBlendFuncSeparateIndexedAMD(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);

// GL_AMD_multi_draw_indirect

  void  glMultiDrawArraysIndirectAMD(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
  void  glMultiDrawElementsIndirectAMD(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride);

// GL_AMD_name_gen_delete

  void  glDeleteNamesAMD(RegalContext *_context, GLenum identifier, GLuint num, const GLuint *names);
  void  glGenNamesAMD(RegalContext *_context, GLenum identifier, GLuint num, GLuint *names);
  GLboolean  glIsNameAMD(RegalContext *_context, GLenum identifier, GLuint name);

// GL_AMD_performance_monitor

  void  glBeginPerfMonitorAMD(RegalContext *_context, GLuint monitor);
  void  glDeletePerfMonitorsAMD(RegalContext *_context, GLsizei n, GLuint *monitors);
  void  glEndPerfMonitorAMD(RegalContext *_context, GLuint monitor);
  void  glGenPerfMonitorsAMD(RegalContext *_context, GLsizei n, GLuint *monitors);
  void  glGetPerfMonitorCounterDataAMD(RegalContext *_context, GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
  void  glGetPerfMonitorCounterInfoAMD(RegalContext *_context, GLuint group, GLuint counter, GLenum pname, GLvoid *data);
  void  glGetPerfMonitorCounterStringAMD(RegalContext *_context, GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
  void  glGetPerfMonitorCountersAMD(RegalContext *_context, GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters);
  void  glGetPerfMonitorGroupStringAMD(RegalContext *_context, GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
  void  glGetPerfMonitorGroupsAMD(RegalContext *_context, GLint *numGroups, GLsizei groupsSize, GLuint *groups);
  void  glSelectPerfMonitorCountersAMD(RegalContext *_context, GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);

// GL_AMD_sample_positions

  void  glSetMultisamplefvAMD(RegalContext *_context, GLenum pname, GLuint index, const GLfloat *val);

// GL_AMD_vertex_shader_tessellator

  void  glTessellationFactorAMD(RegalContext *_context, GLfloat factor);
  void  glTessellationModeAMD(RegalContext *_context, GLenum mode);

// GL_ANGLE_framebuffer_blit

  void  glBlitFramebufferANGLE(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);

// GL_ANGLE_framebuffer_multisample

  void  glRenderbufferStorageMultisampleANGLE(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);

// GL_APPLE_element_array

  void  glDrawElementArrayAPPLE(RegalContext *_context, GLenum mode, GLint first, GLsizei count);
  void  glDrawRangeElementArrayAPPLE(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
  void  glElementPointerAPPLE(RegalContext *_context, GLenum type, const GLvoid *pointer);
  void  glMultiDrawElementArrayAPPLE(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
  void  glMultiDrawRangeElementArrayAPPLE(RegalContext *_context, GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);

// GL_APPLE_fence

  void  glDeleteFencesAPPLE(RegalContext *_context, GLsizei n, const GLuint *fences);
  void  glFinishFenceAPPLE(RegalContext *_context, GLuint fence);
  void  glFinishObjectAPPLE(RegalContext *_context, GLenum object, GLint name);
  void  glGenFencesAPPLE(RegalContext *_context, GLsizei n, GLuint *fences);
  GLboolean  glIsFenceAPPLE(RegalContext *_context, GLuint fence);
  void  glSetFenceAPPLE(RegalContext *_context, GLuint fence);
  GLboolean  glTestFenceAPPLE(RegalContext *_context, GLuint fence);
  GLboolean  glTestObjectAPPLE(RegalContext *_context, GLenum object, GLuint name);

// GL_APPLE_flush_buffer_range

  void  glBufferParameteriAPPLE(RegalContext *_context, GLenum target, GLenum pname, GLint param);
  void  glFlushMappedBufferRangeAPPLE(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size);

// GL_APPLE_flush_render

  void  glFinishRenderAPPLE(RegalContext *_context);
  void  glFlushRenderAPPLE(RegalContext *_context);
  void  glSwapAPPLE(RegalContext *_context);

// GL_APPLE_framebuffer_multisample

  void  glRenderbufferStorageMultisampleAPPLE(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
  void  glResolveMultisampleFramebufferAPPLE(RegalContext *_context);

// GL_APPLE_object_purgeable

  void  glGetObjectParameterivAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum pname, GLint *params);
  GLenum  glObjectPurgeableAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum option);
  GLenum  glObjectUnpurgeableAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum option);

// GL_APPLE_texture_range

  void  glGetTexParameterPointervAPPLE(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params);
  void  glTextureRangeAPPLE(RegalContext *_context, GLenum target, GLsizei length, const GLvoid *pointer);

// GL_APPLE_vertex_array_object

  void  glBindVertexArrayAPPLE(RegalContext *_context, GLuint array);
  void  glDeleteVertexArraysAPPLE(RegalContext *_context, GLsizei n, const GLuint *arrays);
  void  glGenVertexArraysAPPLE(RegalContext *_context, GLsizei n, GLuint *arrays);
  GLboolean  glIsVertexArrayAPPLE(RegalContext *_context, GLuint array);

// GL_APPLE_vertex_array_range

  void  glFlushVertexArrayRangeAPPLE(RegalContext *_context, GLsizei length, GLvoid *pointer);
  void  glVertexArrayParameteriAPPLE(RegalContext *_context, GLenum pname, GLint param);
  void  glVertexArrayRangeAPPLE(RegalContext *_context, GLsizei length, GLvoid *pointer);

// GL_APPLE_vertex_program_evaluators

  void  glDisableVertexAttribAPPLE(RegalContext *_context, GLuint index, GLenum pname);
  void  glEnableVertexAttribAPPLE(RegalContext *_context, GLuint index, GLenum pname);
  GLboolean  glIsVertexAttribEnabledAPPLE(RegalContext *_context, GLuint index, GLenum pname);
  void  glMapVertexAttrib1dAPPLE(RegalContext *_context, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
  void  glMapVertexAttrib1fAPPLE(RegalContext *_context, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
  void  glMapVertexAttrib2dAPPLE(RegalContext *_context, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
  void  glMapVertexAttrib2fAPPLE(RegalContext *_context, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);

// GL_ARB_ES2_compatibility

  void  glClearDepthf(RegalContext *_context, GLclampf d);
  void  glDepthRangef(RegalContext *_context, GLclampf n, GLclampf f);
  void  glGetShaderPrecisionFormat(RegalContext *_context, GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
  void  glReleaseShaderCompiler(RegalContext *_context);
  void  glShaderBinary(RegalContext *_context, GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);

// GL_ARB_base_instance

  void  glDrawArraysInstancedBaseInstance(RegalContext *_context, GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
  void  glDrawElementsInstancedBaseInstance(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance);
  void  glDrawElementsInstancedBaseVertexBaseInstance(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);

// GL_ARB_blend_func_extended

  void  glBindFragDataLocationIndexed(RegalContext *_context, GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
  GLint  glGetFragDataIndex(RegalContext *_context, GLuint program, const GLchar *name);

// GL_ARB_buffer_storage

  void  glBufferStorage(RegalContext *_context, GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags);
  void  glNamedBufferStorageEXT(RegalContext *_context, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags);

// GL_ARB_clear_buffer_object

  void  glClearBufferData(RegalContext *_context, GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data);
  void  glClearBufferSubData(RegalContext *_context, GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data);
  void  glClearNamedBufferDataEXT(RegalContext *_context, GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data);

// GL_ARB_clear_texture

  void  glClearTexImage(RegalContext *_context, GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data);
  void  glClearTexSubImage(RegalContext *_context, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data);

// GL_ARB_color_buffer_float

  void  glClampColorARB(RegalContext *_context, GLenum target, GLenum clamp);

// GL_ARB_compute_shader

  void  glDispatchCompute(RegalContext *_context, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
  void  glDispatchComputeIndirect(RegalContext *_context, GLintptr indirect);

// GL_ARB_copy_buffer

  void  glCopyBufferSubData(RegalContext *_context, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size);

// GL_ARB_copy_image

  void  glCopyImageSubData(RegalContext *_context, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);

// GL_ARB_debug_output

  void  glDebugMessageCallbackARB(RegalContext *_context, GLDEBUGPROCARB callback, const GLvoid *userParam);
  void  glDebugMessageControlARB(RegalContext *_context, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
  void  glDebugMessageInsertARB(RegalContext *_context, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
  GLuint  glGetDebugMessageLogARB(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);

// GL_ARB_draw_buffers

  void  glDrawBuffersARB(RegalContext *_context, GLsizei n, const GLenum *bufs);

// GL_ARB_draw_buffers_blend

  void  glBlendEquationSeparateiARB(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha);
  void  glBlendEquationiARB(RegalContext *_context, GLuint buf, GLenum mode);
  void  glBlendFuncSeparateiARB(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
  void  glBlendFunciARB(RegalContext *_context, GLuint buf, GLenum src, GLenum dst);

// GL_ARB_draw_elements_base_vertex

  void  glDrawElementsBaseVertex(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
  void  glDrawElementsInstancedBaseVertex(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
  void  glDrawRangeElementsBaseVertex(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
  void  glMultiDrawElementsBaseVertex(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex);

// GL_ARB_draw_indirect

  void  glDrawArraysIndirect(RegalContext *_context, GLenum mode, const GLvoid *indirect);
  void  glDrawElementsIndirect(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect);

// GL_ARB_draw_instanced

  void  glDrawArraysInstancedARB(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount);
  void  glDrawElementsInstancedARB(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);

// GL_ARB_framebuffer_no_attachments

  void  glFramebufferParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint param);
  void  glGetFramebufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetNamedFramebufferParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint *params);
  void  glNamedFramebufferParameteriEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint param);

// GL_ARB_framebuffer_object

  void  glBindFramebuffer(RegalContext *_context, GLenum target, GLuint framebuffer);
  void  glBindRenderbuffer(RegalContext *_context, GLenum target, GLuint renderbuffer);
  void  glBlitFramebuffer(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
  GLenum  glCheckFramebufferStatus(RegalContext *_context, GLenum target);
  void  glDeleteFramebuffers(RegalContext *_context, GLsizei n, const GLuint *framebuffers);
  void  glDeleteRenderbuffers(RegalContext *_context, GLsizei n, const GLuint *renderbuffers);
  void  glFramebufferRenderbuffer(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  void  glFramebufferTexture1D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  void  glFramebufferTexture2D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  void  glFramebufferTexture3D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
  void  glFramebufferTextureLayer(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
  void  glGenFramebuffers(RegalContext *_context, GLsizei n, GLuint *framebuffers);
  void  glGenRenderbuffers(RegalContext *_context, GLsizei n, GLuint *renderbuffers);
  void  glGenerateMipmap(RegalContext *_context, GLenum target);
  void  glGetFramebufferAttachmentParameteriv(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params);
  void  glGetRenderbufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  GLboolean  glIsFramebuffer(RegalContext *_context, GLuint framebuffer);
  GLboolean  glIsRenderbuffer(RegalContext *_context, GLuint renderbuffer);
  void  glRenderbufferStorage(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
  void  glRenderbufferStorageMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);

// GL_ARB_geometry_shader4

  void  glFramebufferTextureARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level);
  void  glFramebufferTextureFaceARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
  void  glFramebufferTextureLayerARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
  void  glProgramParameteriARB(RegalContext *_context, GLuint program, GLenum pname, GLint value);

// GL_ARB_get_program_binary

  void  glGetProgramBinary(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
  void  glProgramBinary(RegalContext *_context, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
  void  glProgramParameteri(RegalContext *_context, GLuint program, GLenum pname, GLint value);

// GL_ARB_gpu_shader_fp64

  void  glGetUniformdv(RegalContext *_context, GLuint program, GLint location, GLdouble *params);
  void  glUniform1d(RegalContext *_context, GLint location, GLdouble x);
  void  glUniform1dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value);
  void  glUniform2d(RegalContext *_context, GLint location, GLdouble x, GLdouble y);
  void  glUniform2dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value);
  void  glUniform3d(RegalContext *_context, GLint location, GLdouble x, GLdouble y, GLdouble z);
  void  glUniform3dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value);
  void  glUniform4d(RegalContext *_context, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glUniform4dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value);
  void  glUniformMatrix2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glUniformMatrix2x3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glUniformMatrix2x4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glUniformMatrix3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glUniformMatrix3x2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glUniformMatrix3x4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glUniformMatrix4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glUniformMatrix4x2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glUniformMatrix4x3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);

// GL_ARB_imaging

  void  glColorSubTable(RegalContext *_context, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
  void  glColorTable(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
  void  glColorTableParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glColorTableParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);
  void  glConvolutionFilter1D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
  void  glConvolutionFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
  void  glConvolutionParameterf(RegalContext *_context, GLenum target, GLenum pname, GLfloat params);
  void  glConvolutionParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glConvolutionParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint params);
  void  glConvolutionParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);
  void  glCopyColorSubTable(RegalContext *_context, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
  void  glCopyColorTable(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
  void  glCopyConvolutionFilter1D(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
  void  glCopyConvolutionFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glGetColorTable(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *table);
  void  glGetColorTableParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetColorTableParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetConvolutionFilter(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *image);
  void  glGetConvolutionParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetConvolutionParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetHistogram(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
  void  glGetHistogramParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetHistogramParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetMinmax(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values);
  void  glGetMinmaxParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetMinmaxParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetSeparableFilter(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
  void  glHistogram(RegalContext *_context, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
  void  glMinmax(RegalContext *_context, GLenum target, GLenum internalformat, GLboolean sink);
  void  glResetHistogram(RegalContext *_context, GLenum target);
  void  glResetMinmax(RegalContext *_context, GLenum target);
  void  glSeparableFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);

// GL_ARB_instanced_arrays

  void  glVertexAttribDivisorARB(RegalContext *_context, GLuint index, GLuint divisor);

// GL_ARB_internalformat_query

  void  glGetInternalformativ(RegalContext *_context, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);

// GL_ARB_internalformat_query2

  void  glGetInternalformati64v(RegalContext *_context, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);

// GL_ARB_invalidate_subdata

  void  glInvalidateBufferData(RegalContext *_context, GLuint buffer);
  void  glInvalidateBufferSubData(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length);
  void  glInvalidateFramebuffer(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments);
  void  glInvalidateSubFramebuffer(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glInvalidateTexImage(RegalContext *_context, GLuint texture, GLint level);
  void  glInvalidateTexSubImage(RegalContext *_context, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);

// GL_ARB_map_buffer_range

  void  glFlushMappedBufferRange(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr length);
  GLvoid * glMapBufferRange(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);

// GL_ARB_matrix_palette

  void  glCurrentPaletteMatrixARB(RegalContext *_context, GLint index);
  void  glMatrixIndexPointerARB(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glMatrixIndexubvARB(RegalContext *_context, GLint size, const GLubyte *indices);
  void  glMatrixIndexuivARB(RegalContext *_context, GLint size, const GLuint *indices);
  void  glMatrixIndexusvARB(RegalContext *_context, GLint size, const GLushort *indices);

// GL_ARB_multi_bind

  void  glBindBuffersBase(RegalContext *_context, GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
  void  glBindBuffersRange(RegalContext *_context, GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
  void  glBindImageTextures(RegalContext *_context, GLuint first, GLsizei count, const GLuint *textures);
  void  glBindSamplers(RegalContext *_context, GLuint first, GLsizei count, const GLuint *samplers);
  void  glBindTextures(RegalContext *_context, GLuint first, GLsizei count, const GLuint *textures);
  void  glBindVertexBuffers(RegalContext *_context, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);

// GL_ARB_multi_draw_indirect

  void  glMultiDrawArraysIndirect(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
  void  glMultiDrawElementsIndirect(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride);

// GL_ARB_multisample

  void  glSampleCoverageARB(RegalContext *_context, GLclampf value, GLboolean invert);

// GL_ARB_multitexture

  void  glActiveTextureARB(RegalContext *_context, GLenum texture);
  void  glClientActiveTextureARB(RegalContext *_context, GLenum texture);
  void  glMultiTexCoord1dARB(RegalContext *_context, GLenum target, GLdouble s);
  void  glMultiTexCoord1dvARB(RegalContext *_context, GLenum target, const GLdouble *v);
  void  glMultiTexCoord1fARB(RegalContext *_context, GLenum target, GLfloat s);
  void  glMultiTexCoord1fvARB(RegalContext *_context, GLenum target, const GLfloat *v);
  void  glMultiTexCoord1iARB(RegalContext *_context, GLenum target, GLint s);
  void  glMultiTexCoord1ivARB(RegalContext *_context, GLenum target, const GLint *v);
  void  glMultiTexCoord1sARB(RegalContext *_context, GLenum target, GLshort s);
  void  glMultiTexCoord1svARB(RegalContext *_context, GLenum target, const GLshort *v);
  void  glMultiTexCoord2dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t);
  void  glMultiTexCoord2dvARB(RegalContext *_context, GLenum target, const GLdouble *v);
  void  glMultiTexCoord2fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t);
  void  glMultiTexCoord2fvARB(RegalContext *_context, GLenum target, const GLfloat *v);
  void  glMultiTexCoord2iARB(RegalContext *_context, GLenum target, GLint s, GLint t);
  void  glMultiTexCoord2ivARB(RegalContext *_context, GLenum target, const GLint *v);
  void  glMultiTexCoord2sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t);
  void  glMultiTexCoord2svARB(RegalContext *_context, GLenum target, const GLshort *v);
  void  glMultiTexCoord3dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r);
  void  glMultiTexCoord3dvARB(RegalContext *_context, GLenum target, const GLdouble *v);
  void  glMultiTexCoord3fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r);
  void  glMultiTexCoord3fvARB(RegalContext *_context, GLenum target, const GLfloat *v);
  void  glMultiTexCoord3iARB(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r);
  void  glMultiTexCoord3ivARB(RegalContext *_context, GLenum target, const GLint *v);
  void  glMultiTexCoord3sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r);
  void  glMultiTexCoord3svARB(RegalContext *_context, GLenum target, const GLshort *v);
  void  glMultiTexCoord4dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
  void  glMultiTexCoord4dvARB(RegalContext *_context, GLenum target, const GLdouble *v);
  void  glMultiTexCoord4fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
  void  glMultiTexCoord4fvARB(RegalContext *_context, GLenum target, const GLfloat *v);
  void  glMultiTexCoord4iARB(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r, GLint q);
  void  glMultiTexCoord4ivARB(RegalContext *_context, GLenum target, const GLint *v);
  void  glMultiTexCoord4sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
  void  glMultiTexCoord4svARB(RegalContext *_context, GLenum target, const GLshort *v);

// GL_ARB_occlusion_query

  void  glBeginQueryARB(RegalContext *_context, GLenum target, GLuint id);
  void  glDeleteQueriesARB(RegalContext *_context, GLsizei n, const GLuint *ids);
  void  glEndQueryARB(RegalContext *_context, GLenum target);
  void  glGenQueriesARB(RegalContext *_context, GLsizei n, GLuint *ids);
  void  glGetQueryObjectivARB(RegalContext *_context, GLuint id, GLenum pname, GLint *params);
  void  glGetQueryObjectuivARB(RegalContext *_context, GLuint id, GLenum pname, GLuint *params);
  void  glGetQueryivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  GLboolean  glIsQueryARB(RegalContext *_context, GLuint id);

// GL_ARB_point_parameters

  void  glPointParameterfARB(RegalContext *_context, GLenum pname, GLfloat param);
  void  glPointParameterfvARB(RegalContext *_context, GLenum pname, const GLfloat *params);

// GL_ARB_program_interface_query

  void  glGetProgramInterfaceiv(RegalContext *_context, GLuint program, GLenum programInterface, GLenum pname, GLint *params);
  GLuint  glGetProgramResourceIndex(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name);
  GLint  glGetProgramResourceLocation(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name);
  GLint  glGetProgramResourceLocationIndex(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name);
  void  glGetProgramResourceName(RegalContext *_context, GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
  void  glGetProgramResourceiv(RegalContext *_context, GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);

// GL_ARB_provoking_vertex

  void  glProvokingVertex(RegalContext *_context, GLenum mode);

// GL_ARB_robustness

  GLenum  glGetGraphicsResetStatusARB(RegalContext *_context);
  void  glGetnColorTableARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
  void  glGetnCompressedTexImageARB(RegalContext *_context, GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
  void  glGetnConvolutionFilterARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
  void  glGetnHistogramARB(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
  void  glGetnMapdvARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
  void  glGetnMapfvARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
  void  glGetnMapivARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLint *v);
  void  glGetnMinmaxARB(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
  void  glGetnPixelMapfvARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLfloat *values);
  void  glGetnPixelMapuivARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLuint *values);
  void  glGetnPixelMapusvARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLushort *values);
  void  glGetnPolygonStippleARB(RegalContext *_context, GLsizei bufSize, GLubyte *pattern);
  void  glGetnSeparableFilterARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
  void  glGetnTexImageARB(RegalContext *_context, GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
  void  glGetnUniformdvARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
  void  glGetnUniformfvARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
  void  glGetnUniformivARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLint *params);
  void  glGetnUniformuivARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLuint *params);
  void  glReadnPixelsARB(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);

// GL_ARB_sample_shading

  void  glMinSampleShading(RegalContext *_context, GLclampf value);
  void  glMinSampleShadingARB(RegalContext *_context, GLclampf value);

// GL_ARB_sampler_objects

  void  glBindSampler(RegalContext *_context, GLuint unit, GLuint sampler);
  void  glDeleteSamplers(RegalContext *_context, GLsizei count, const GLuint *samplers);
  void  glGenSamplers(RegalContext *_context, GLsizei count, GLuint *samplers);
  void  glGetSamplerParameterIiv(RegalContext *_context, GLuint sampler, GLenum pname, GLint *params);
  void  glGetSamplerParameterIuiv(RegalContext *_context, GLuint sampler, GLenum pname, GLuint *params);
  void  glGetSamplerParameterfv(RegalContext *_context, GLuint sampler, GLenum pname, GLfloat *params);
  void  glGetSamplerParameteriv(RegalContext *_context, GLuint sampler, GLenum pname, GLint *params);
  GLboolean  glIsSampler(RegalContext *_context, GLuint sampler);
  void  glSamplerParameterIiv(RegalContext *_context, GLuint sampler, GLenum pname, const GLint *params);
  void  glSamplerParameterIuiv(RegalContext *_context, GLuint sampler, GLenum pname, const GLuint *params);
  void  glSamplerParameterf(RegalContext *_context, GLuint sampler, GLenum pname, GLfloat param);
  void  glSamplerParameterfv(RegalContext *_context, GLuint sampler, GLenum pname, const GLfloat *params);
  void  glSamplerParameteri(RegalContext *_context, GLuint sampler, GLenum pname, GLint param);
  void  glSamplerParameteriv(RegalContext *_context, GLuint sampler, GLenum pname, const GLint *params);

// GL_ARB_separate_shader_objects

  void  glActiveShaderProgram(RegalContext *_context, GLuint pipeline, GLuint program);
  void  glBindProgramPipeline(RegalContext *_context, GLuint pipeline);
  GLuint  glCreateShaderProgramv(RegalContext *_context, GLenum type, GLsizei count, const GLchar * const *strings);
  void  glDeleteProgramPipelines(RegalContext *_context, GLsizei n, const GLuint *pipelines);
  void  glGenProgramPipelines(RegalContext *_context, GLsizei n, GLuint *pipelines);
  void  glGetProgramPipelineInfoLog(RegalContext *_context, GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  void  glGetProgramPipelineiv(RegalContext *_context, GLuint pipeline, GLenum pname, GLint *params);
  GLboolean  glIsProgramPipeline(RegalContext *_context, GLuint pipeline);
  void  glProgramUniform1d(RegalContext *_context, GLuint program, GLint location, GLdouble x);
  void  glProgramUniform1dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value);
  void  glProgramUniform1f(RegalContext *_context, GLuint program, GLint location, GLfloat x);
  void  glProgramUniform1fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value);
  void  glProgramUniform1i(RegalContext *_context, GLuint program, GLint location, GLint x);
  void  glProgramUniform1iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value);
  void  glProgramUniform1ui(RegalContext *_context, GLuint program, GLint location, GLuint v0);
  void  glProgramUniform1uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value);
  void  glProgramUniform2d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y);
  void  glProgramUniform2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value);
  void  glProgramUniform2f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y);
  void  glProgramUniform2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value);
  void  glProgramUniform2i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y);
  void  glProgramUniform2iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value);
  void  glProgramUniform2ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y);
  void  glProgramUniform2uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value);
  void  glProgramUniform3d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
  void  glProgramUniform3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value);
  void  glProgramUniform3f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z);
  void  glProgramUniform3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value);
  void  glProgramUniform3i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y, GLint z);
  void  glProgramUniform3iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value);
  void  glProgramUniform3ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y, GLuint z);
  void  glProgramUniform3uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value);
  void  glProgramUniform4d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glProgramUniform4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value);
  void  glProgramUniform4f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glProgramUniform4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value);
  void  glProgramUniform4i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w);
  void  glProgramUniform4iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value);
  void  glProgramUniform4ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
  void  glProgramUniform4uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value);
  void  glProgramUniformMatrix2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix2x3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix2x3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix2x4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix2x4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix3x2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix3x2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix3x4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix3x4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix4x2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix4x2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix4x3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix4x3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUseProgramStages(RegalContext *_context, GLuint pipeline, GLbitfield stages, GLuint program);
  void  glValidateProgramPipeline(RegalContext *_context, GLuint pipeline);

// GL_ARB_shader_atomic_counters

  void  glGetActiveAtomicCounterBufferiv(RegalContext *_context, GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);

// GL_ARB_shader_image_load_store

  void  glBindImageTexture(RegalContext *_context, GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
  void  glMemoryBarrier(RegalContext *_context, GLbitfield barriers);

// GL_ARB_shader_objects

  void  glAttachObjectARB(RegalContext *_context, GLhandleARB containerObj, GLhandleARB obj);
  void  glCompileShaderARB(RegalContext *_context, GLhandleARB shaderObj);
  GLhandleARB  glCreateProgramObjectARB(RegalContext *_context);
  GLhandleARB  glCreateShaderObjectARB(RegalContext *_context, GLenum shaderType);
  void  glDeleteObjectARB(RegalContext *_context, GLhandleARB obj);
  void  glDetachObjectARB(RegalContext *_context, GLhandleARB containerObj, GLhandleARB attachedObj);
  void  glGetActiveUniformARB(RegalContext *_context, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
  void  glGetAttachedObjectsARB(RegalContext *_context, GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
  GLhandleARB  glGetHandleARB(RegalContext *_context, GLenum pname);
  void  glGetInfoLogARB(RegalContext *_context, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
  void  glGetObjectParameterfvARB(RegalContext *_context, GLhandleARB obj, GLenum pname, GLfloat *params);
  void  glGetObjectParameterivARB(RegalContext *_context, GLhandleARB obj, GLenum pname, GLint *params);
  void  glGetShaderSourceARB(RegalContext *_context, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
  GLint  glGetUniformLocationARB(RegalContext *_context, GLhandleARB programObj, const GLcharARB *name);
  void  glGetUniformfvARB(RegalContext *_context, GLhandleARB programObj, GLint location, GLfloat *params);
  void  glGetUniformivARB(RegalContext *_context, GLhandleARB programObj, GLint location, GLint *params);
  void  glLinkProgramARB(RegalContext *_context, GLhandleARB programObj);
  void  glShaderSourceARB(RegalContext *_context, GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length);
  void  glUniform1fARB(RegalContext *_context, GLint location, GLfloat v0);
  void  glUniform1fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value);
  void  glUniform1iARB(RegalContext *_context, GLint location, GLint v0);
  void  glUniform1ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value);
  void  glUniform2fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1);
  void  glUniform2fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value);
  void  glUniform2iARB(RegalContext *_context, GLint location, GLint v0, GLint v1);
  void  glUniform2ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value);
  void  glUniform3fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
  void  glUniform3fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value);
  void  glUniform3iARB(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2);
  void  glUniform3ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value);
  void  glUniform4fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  void  glUniform4fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value);
  void  glUniform4iARB(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
  void  glUniform4ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value);
  void  glUniformMatrix2fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix3fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUniformMatrix4fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glUseProgramObjectARB(RegalContext *_context, GLhandleARB programObj);
  void  glValidateProgramARB(RegalContext *_context, GLhandleARB programObj);

// GL_ARB_shader_storage_buffer_object

  void  glShaderStorageBlockBinding(RegalContext *_context, GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);

// GL_ARB_shader_subroutine

  void  glGetActiveSubroutineName(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
  void  glGetActiveSubroutineUniformName(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
  void  glGetActiveSubroutineUniformiv(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values);
  void  glGetProgramStageiv(RegalContext *_context, GLuint program, GLenum shaderType, GLenum pname, GLint *values);
  void  glGetProgramSubroutineParameteruivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params);
  GLuint  glGetSubroutineIndex(RegalContext *_context, GLuint program, GLenum shaderType, const GLchar *name);
  GLint  glGetSubroutineUniformLocation(RegalContext *_context, GLuint program, GLenum shaderType, const GLchar *name);
  void  glGetUniformSubroutineuiv(RegalContext *_context, GLenum shaderType, GLint location, GLuint *params);
  void  glProgramSubroutineParametersuivNV(RegalContext *_context, GLenum target, GLsizei count, const GLuint *params);
  void  glUniformSubroutinesuiv(RegalContext *_context, GLenum shaderType, GLsizei count, const GLuint *indices);

// GL_ARB_shading_language_include

  void  glCompileShaderIncludeARB(RegalContext *_context, GLuint shader, GLsizei count, const GLchar **path, const GLint *length);
  void  glDeleteNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name);
  void  glGetNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
  void  glGetNamedStringivARB(RegalContext *_context, GLint namelen, const GLchar *name, GLenum pname, GLint *params);
  GLboolean  glIsNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name);
  void  glNamedStringARB(RegalContext *_context, GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);

// GL_ARB_sync

  GLenum  glClientWaitSync(RegalContext *_context, GLsync sync, GLbitfield flags, GLuint64 timeout);
  void  glDeleteSync(RegalContext *_context, GLsync sync);
  GLsync  glFenceSync(RegalContext *_context, GLenum condition, GLbitfield flags);
  void  glGetInteger64v(RegalContext *_context, GLenum pname, GLint64 *params);
  void  glGetSynciv(RegalContext *_context, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
  GLboolean  glIsSync(RegalContext *_context, GLsync sync);
  void  glWaitSync(RegalContext *_context, GLsync sync, GLbitfield flags, GLuint64 timeout);

// GL_ARB_tessellation_shader

  void  glPatchParameterfv(RegalContext *_context, GLenum pname, const GLfloat *values);
  void  glPatchParameteri(RegalContext *_context, GLenum pname, GLint value);

// GL_ARB_texture_buffer_object

  void  glTexBufferARB(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer);

// GL_ARB_texture_buffer_range

  void  glTexBufferRange(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
  void  glTextureBufferRangeEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);

// GL_ARB_texture_compression

  void  glCompressedTexImage1DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexImage2DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexImage3DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexSubImage1DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexSubImage2DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexSubImage3DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glGetCompressedTexImageARB(RegalContext *_context, GLenum target, GLint lod, GLvoid *img);

// GL_ARB_texture_multisample

  void  glGetMultisamplefv(RegalContext *_context, GLenum pname, GLuint index, GLfloat *val);
  void  glSampleMaski(RegalContext *_context, GLuint index, GLbitfield mask);
  void  glTexImage2DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
  void  glTexImage3DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);

// GL_ARB_texture_storage

  void  glTexStorage1D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
  void  glTexStorage2D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
  void  glTexStorage3D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
  void  glTextureStorage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
  void  glTextureStorage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
  void  glTextureStorage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);

// GL_ARB_texture_storage_multisample

  void  glTexStorage2DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
  void  glTexStorage3DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
  void  glTextureStorage2DMultisampleEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
  void  glTextureStorage3DMultisampleEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);

// GL_ARB_texture_view

  void  glTextureView(RegalContext *_context, GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);

// GL_ARB_timer_query

  void  glGetQueryObjecti64v(RegalContext *_context, GLuint id, GLenum pname, GLint64 *params);
  void  glGetQueryObjectui64v(RegalContext *_context, GLuint id, GLenum pname, GLuint64 *params);
  void  glQueryCounter(RegalContext *_context, GLuint id, GLenum target);

// GL_ARB_transform_feedback2

  void  glBindTransformFeedback(RegalContext *_context, GLenum target, GLuint id);
  void  glDeleteTransformFeedbacks(RegalContext *_context, GLsizei n, const GLuint *ids);
  void  glDrawTransformFeedback(RegalContext *_context, GLenum mode, GLuint name);
  void  glGenTransformFeedbacks(RegalContext *_context, GLsizei n, GLuint *ids);
  GLboolean  glIsTransformFeedback(RegalContext *_context, GLuint id);
  void  glPauseTransformFeedback(RegalContext *_context);
  void  glResumeTransformFeedback(RegalContext *_context);

// GL_ARB_transform_feedback3

  void  glBeginQueryIndexed(RegalContext *_context, GLenum target, GLuint index, GLuint id);
  void  glDrawTransformFeedbackStream(RegalContext *_context, GLenum mode, GLuint id, GLuint stream);
  void  glEndQueryIndexed(RegalContext *_context, GLenum target, GLuint index);
  void  glGetQueryIndexediv(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLint *params);

// GL_ARB_transform_feedback_instanced

  void  glDrawTransformFeedbackInstanced(RegalContext *_context, GLenum mode, GLuint id, GLsizei primcount);
  void  glDrawTransformFeedbackStreamInstanced(RegalContext *_context, GLenum mode, GLuint id, GLuint stream, GLsizei primcount);

// GL_ARB_transpose_matrix

  void  glLoadTransposeMatrixdARB(RegalContext *_context, const GLdouble *m);
  void  glLoadTransposeMatrixfARB(RegalContext *_context, const GLfloat *m);
  void  glMultTransposeMatrixdARB(RegalContext *_context, const GLdouble *m);
  void  glMultTransposeMatrixfARB(RegalContext *_context, const GLfloat *m);

// GL_ARB_uniform_buffer_object

  void  glBindBufferBase(RegalContext *_context, GLenum target, GLuint index, GLuint buffer);
  void  glBindBufferRange(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
  void  glGetActiveUniformBlockName(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
  void  glGetActiveUniformBlockiv(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
  void  glGetActiveUniformName(RegalContext *_context, GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
  void  glGetActiveUniformsiv(RegalContext *_context, GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
  void  glGetIntegeri_v(RegalContext *_context, GLenum target, GLuint index, GLint *data);
  GLuint  glGetUniformBlockIndex(RegalContext *_context, GLuint program, const GLchar *uniformBlockName);
  void  glGetUniformIndices(RegalContext *_context, GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices);
  void  glUniformBlockBinding(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);

// GL_ARB_vertex_array_object

  void  glBindVertexArray(RegalContext *_context, GLuint array);
  void  glDeleteVertexArrays(RegalContext *_context, GLsizei n, const GLuint *arrays);
  void  glGenVertexArrays(RegalContext *_context, GLsizei n, GLuint *arrays);
  GLboolean  glIsVertexArray(RegalContext *_context, GLuint array);

// GL_ARB_vertex_attrib_64bit

  void  glGetVertexAttribLdv(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params);
  void  glVertexAttribL1d(RegalContext *_context, GLuint index, GLdouble x);
  void  glVertexAttribL1dv(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttribL2d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y);
  void  glVertexAttribL2dv(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttribL3d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z);
  void  glVertexAttribL3dv(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttribL4d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glVertexAttribL4dv(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttribLPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);

// GL_ARB_vertex_attrib_binding

  void  glBindVertexBuffer(RegalContext *_context, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
  void  glVertexArrayBindVertexBufferEXT(RegalContext *_context, GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
  void  glVertexArrayVertexAttribBindingEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLuint bindingindex);
  void  glVertexArrayVertexAttribFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
  void  glVertexArrayVertexAttribIFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  void  glVertexArrayVertexAttribLFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  void  glVertexArrayVertexBindingDivisorEXT(RegalContext *_context, GLuint vaobj, GLuint bindingindex, GLuint divisor);
  void  glVertexAttribBinding(RegalContext *_context, GLuint attribindex, GLuint bindingindex);
  void  glVertexAttribFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
  void  glVertexAttribIFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  void  glVertexAttribLFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
  void  glVertexBindingDivisor(RegalContext *_context, GLuint bindingindex, GLuint divisor);

// GL_ARB_vertex_blend

  void  glVertexBlendARB(RegalContext *_context, GLint count);
  void  glWeightPointerARB(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glWeightbvARB(RegalContext *_context, GLint size, const GLbyte *weights);
  void  glWeightdvARB(RegalContext *_context, GLint size, const GLdouble *weights);
  void  glWeightfvARB(RegalContext *_context, GLint size, const GLfloat *weights);
  void  glWeightivARB(RegalContext *_context, GLint size, const GLint *weights);
  void  glWeightsvARB(RegalContext *_context, GLint size, const GLshort *weights);
  void  glWeightubvARB(RegalContext *_context, GLint size, const GLubyte *weights);
  void  glWeightuivARB(RegalContext *_context, GLint size, const GLuint *weights);
  void  glWeightusvARB(RegalContext *_context, GLint size, const GLushort *weights);

// GL_ARB_vertex_buffer_object

  void  glBindBufferARB(RegalContext *_context, GLenum target, GLuint buffer);
  void  glBufferDataARB(RegalContext *_context, GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
  void  glBufferSubDataARB(RegalContext *_context, GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
  void  glDeleteBuffersARB(RegalContext *_context, GLsizei n, const GLuint *buffers);
  void  glGenBuffersARB(RegalContext *_context, GLsizei n, GLuint *buffers);
  void  glGetBufferParameterivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetBufferPointervARB(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params);
  void  glGetBufferSubDataARB(RegalContext *_context, GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
  GLboolean  glIsBufferARB(RegalContext *_context, GLuint buffer);
  GLvoid * glMapBufferARB(RegalContext *_context, GLenum target, GLenum access);
  GLboolean  glUnmapBufferARB(RegalContext *_context, GLenum target);

// GL_ARB_vertex_program

  void  glBindProgramARB(RegalContext *_context, GLenum target, GLuint program);
  void  glDeleteProgramsARB(RegalContext *_context, GLsizei n, const GLuint *programs);
  void  glDisableVertexAttribArrayARB(RegalContext *_context, GLuint index);
  void  glEnableVertexAttribArrayARB(RegalContext *_context, GLuint index);
  void  glGenProgramsARB(RegalContext *_context, GLsizei n, GLuint *programs);
  void  glGetProgramEnvParameterdvARB(RegalContext *_context, GLenum target, GLuint index, GLdouble *params);
  void  glGetProgramEnvParameterfvARB(RegalContext *_context, GLenum target, GLuint index, GLfloat *params);
  void  glGetProgramLocalParameterdvARB(RegalContext *_context, GLenum target, GLuint index, GLdouble *params);
  void  glGetProgramLocalParameterfvARB(RegalContext *_context, GLenum target, GLuint index, GLfloat *params);
  void  glGetProgramStringARB(RegalContext *_context, GLenum target, GLenum pname, GLvoid *string);
  void  glGetProgramivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetVertexAttribPointervARB(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer);
  void  glGetVertexAttribdvARB(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params);
  void  glGetVertexAttribfvARB(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params);
  void  glGetVertexAttribivARB(RegalContext *_context, GLuint index, GLenum pname, GLint *params);
  GLboolean  glIsProgramARB(RegalContext *_context, GLuint program);
  void  glProgramEnvParameter4dARB(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glProgramEnvParameter4dvARB(RegalContext *_context, GLenum target, GLuint index, const GLdouble *params);
  void  glProgramEnvParameter4fARB(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glProgramEnvParameter4fvARB(RegalContext *_context, GLenum target, GLuint index, const GLfloat *params);
  void  glProgramLocalParameter4dARB(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glProgramLocalParameter4dvARB(RegalContext *_context, GLenum target, GLuint index, const GLdouble *params);
  void  glProgramLocalParameter4fARB(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glProgramLocalParameter4fvARB(RegalContext *_context, GLenum target, GLuint index, const GLfloat *params);
  void  glProgramStringARB(RegalContext *_context, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
  void  glVertexAttrib1dARB(RegalContext *_context, GLuint index, GLdouble x);
  void  glVertexAttrib1dvARB(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib1fARB(RegalContext *_context, GLuint index, GLfloat x);
  void  glVertexAttrib1fvARB(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib1sARB(RegalContext *_context, GLuint index, GLshort x);
  void  glVertexAttrib1svARB(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib2dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y);
  void  glVertexAttrib2dvARB(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib2fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y);
  void  glVertexAttrib2fvARB(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib2sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y);
  void  glVertexAttrib2svARB(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib3dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z);
  void  glVertexAttrib3dvARB(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib3fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z);
  void  glVertexAttrib3fvARB(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib3sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z);
  void  glVertexAttrib3svARB(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib4NbvARB(RegalContext *_context, GLuint index, const GLbyte *v);
  void  glVertexAttrib4NivARB(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttrib4NsvARB(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib4NubARB(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
  void  glVertexAttrib4NubvARB(RegalContext *_context, GLuint index, const GLubyte *v);
  void  glVertexAttrib4NuivARB(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttrib4NusvARB(RegalContext *_context, GLuint index, const GLushort *v);
  void  glVertexAttrib4bvARB(RegalContext *_context, GLuint index, const GLbyte *v);
  void  glVertexAttrib4dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glVertexAttrib4dvARB(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib4fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glVertexAttrib4fvARB(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib4ivARB(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttrib4sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
  void  glVertexAttrib4svARB(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib4ubvARB(RegalContext *_context, GLuint index, const GLubyte *v);
  void  glVertexAttrib4uivARB(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttrib4usvARB(RegalContext *_context, GLuint index, const GLushort *v);
  void  glVertexAttribPointerARB(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);

// GL_ARB_vertex_shader

  void  glBindAttribLocationARB(RegalContext *_context, GLhandleARB programObj, GLuint index, const GLcharARB *name);
  void  glGetActiveAttribARB(RegalContext *_context, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
  GLint  glGetAttribLocationARB(RegalContext *_context, GLhandleARB programObj, const GLcharARB *name);

// GL_ARB_vertex_type_2_10_10_10_rev

  void  glColorP3ui(RegalContext *_context, GLenum type, GLuint color);
  void  glColorP3uiv(RegalContext *_context, GLenum type, const GLuint *color);
  void  glColorP4ui(RegalContext *_context, GLenum type, GLuint color);
  void  glColorP4uiv(RegalContext *_context, GLenum type, const GLuint *color);
  void  glMultiTexCoordP1ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords);
  void  glMultiTexCoordP1uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords);
  void  glMultiTexCoordP2ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords);
  void  glMultiTexCoordP2uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords);
  void  glMultiTexCoordP3ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords);
  void  glMultiTexCoordP3uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords);
  void  glMultiTexCoordP4ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords);
  void  glMultiTexCoordP4uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords);
  void  glNormalP3ui(RegalContext *_context, GLenum type, GLuint coords);
  void  glNormalP3uiv(RegalContext *_context, GLenum type, const GLuint *coords);
  void  glSecondaryColorP3ui(RegalContext *_context, GLenum type, GLuint color);
  void  glSecondaryColorP3uiv(RegalContext *_context, GLenum type, const GLuint *color);
  void  glTexCoordP1ui(RegalContext *_context, GLenum type, GLuint coords);
  void  glTexCoordP1uiv(RegalContext *_context, GLenum type, const GLuint *coords);
  void  glTexCoordP2ui(RegalContext *_context, GLenum type, GLuint coords);
  void  glTexCoordP2uiv(RegalContext *_context, GLenum type, const GLuint *coords);
  void  glTexCoordP3ui(RegalContext *_context, GLenum type, GLuint coords);
  void  glTexCoordP3uiv(RegalContext *_context, GLenum type, const GLuint *coords);
  void  glTexCoordP4ui(RegalContext *_context, GLenum type, GLuint coords);
  void  glTexCoordP4uiv(RegalContext *_context, GLenum type, const GLuint *coords);
  void  glVertexAttribP1ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value);
  void  glVertexAttribP1uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
  void  glVertexAttribP2ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value);
  void  glVertexAttribP2uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
  void  glVertexAttribP3ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value);
  void  glVertexAttribP3uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
  void  glVertexAttribP4ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value);
  void  glVertexAttribP4uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
  void  glVertexP2ui(RegalContext *_context, GLenum type, GLuint coords);
  void  glVertexP2uiv(RegalContext *_context, GLenum type, const GLuint *coords);
  void  glVertexP3ui(RegalContext *_context, GLenum type, GLuint coords);
  void  glVertexP3uiv(RegalContext *_context, GLenum type, const GLuint *coords);
  void  glVertexP4ui(RegalContext *_context, GLenum type, GLuint coords);
  void  glVertexP4uiv(RegalContext *_context, GLenum type, const GLuint *coords);

// GL_ARB_viewport_array

  void  glDepthRangeArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLclampd *v);
  void  glDepthRangeIndexed(RegalContext *_context, GLuint index, GLclampd n, GLclampd f);
  void  glGetDoublei_v(RegalContext *_context, GLenum target, GLuint index, GLdouble *v);
  void  glGetFloati_v(RegalContext *_context, GLenum target, GLuint index, GLfloat *v);
  void  glScissorArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLint *v);
  void  glScissorIndexed(RegalContext *_context, GLuint index, GLint left, GLint bottom, GLint width, GLint height);
  void  glScissorIndexedv(RegalContext *_context, GLuint index, const GLint *v);
  void  glViewportArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLfloat *v);
  void  glViewportIndexedf(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
  void  glViewportIndexedfv(RegalContext *_context, GLuint index, const GLfloat *v);

// GL_ARB_window_pos

  void  glWindowPos2dARB(RegalContext *_context, GLdouble x, GLdouble y);
  void  glWindowPos2dvARB(RegalContext *_context, const GLdouble *p);
  void  glWindowPos2fARB(RegalContext *_context, GLfloat x, GLfloat y);
  void  glWindowPos2fvARB(RegalContext *_context, const GLfloat *p);
  void  glWindowPos2iARB(RegalContext *_context, GLint x, GLint y);
  void  glWindowPos2ivARB(RegalContext *_context, const GLint *p);
  void  glWindowPos2sARB(RegalContext *_context, GLshort x, GLshort y);
  void  glWindowPos2svARB(RegalContext *_context, const GLshort *p);
  void  glWindowPos3dARB(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z);
  void  glWindowPos3dvARB(RegalContext *_context, const GLdouble *p);
  void  glWindowPos3fARB(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z);
  void  glWindowPos3fvARB(RegalContext *_context, const GLfloat *p);
  void  glWindowPos3iARB(RegalContext *_context, GLint x, GLint y, GLint z);
  void  glWindowPos3ivARB(RegalContext *_context, const GLint *p);
  void  glWindowPos3sARB(RegalContext *_context, GLshort x, GLshort y, GLshort z);
  void  glWindowPos3svARB(RegalContext *_context, const GLshort *p);

// GL_ATI_draw_buffers

  void  glDrawBuffersATI(RegalContext *_context, GLsizei n, const GLenum *bufs);

// GL_ATI_element_array

  void  glDrawElementArrayATI(RegalContext *_context, GLenum mode, GLsizei count);
  void  glDrawRangeElementArrayATI(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count);
  void  glElementPointerATI(RegalContext *_context, GLenum type, const GLvoid *pointer);

// GL_ATI_envmap_bumpmap

  void  glGetTexBumpParameterfvATI(RegalContext *_context, GLenum pname, GLfloat *param);
  void  glGetTexBumpParameterivATI(RegalContext *_context, GLenum pname, GLint *param);
  void  glTexBumpParameterfvATI(RegalContext *_context, GLenum pname, const GLfloat *param);
  void  glTexBumpParameterivATI(RegalContext *_context, GLenum pname, const GLint *param);

// GL_ATI_fragment_shader

  void  glAlphaFragmentOp1ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
  void  glAlphaFragmentOp2ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
  void  glAlphaFragmentOp3ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
  void  glBeginFragmentShaderATI(RegalContext *_context);
  void  glBindFragmentShaderATI(RegalContext *_context, GLuint id);
  void  glColorFragmentOp1ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
  void  glColorFragmentOp2ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
  void  glColorFragmentOp3ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
  void  glDeleteFragmentShaderATI(RegalContext *_context, GLuint id);
  void  glEndFragmentShaderATI(RegalContext *_context);
  GLuint  glGenFragmentShadersATI(RegalContext *_context, GLuint range);
  void  glPassTexCoordATI(RegalContext *_context, GLuint dst, GLuint coord, GLenum swizzle);
  void  glSampleMapATI(RegalContext *_context, GLuint dst, GLuint interp, GLenum swizzle);
  void  glSetFragmentShaderConstantATI(RegalContext *_context, GLuint dst, const GLfloat *value);

// GL_ATI_map_object_buffer

  GLvoid * glMapObjectBufferATI(RegalContext *_context, GLuint buffer);
  void  glUnmapObjectBufferATI(RegalContext *_context, GLuint buffer);

// GL_ATI_pn_triangles

  void  glPNTrianglesfATI(RegalContext *_context, GLenum pname, GLfloat param);
  void  glPNTrianglesiATI(RegalContext *_context, GLenum pname, GLint param);

// GL_ATI_separate_stencil

  void  glStencilFuncSeparateATI(RegalContext *_context, GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
  void  glStencilOpSeparateATI(RegalContext *_context, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);

// GL_ATI_vertex_array_object

  void  glArrayObjectATI(RegalContext *_context, GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
  void  glFreeObjectBufferATI(RegalContext *_context, GLuint buffer);
  void  glGetArrayObjectfvATI(RegalContext *_context, GLenum array, GLenum pname, GLfloat *params);
  void  glGetArrayObjectivATI(RegalContext *_context, GLenum array, GLenum pname, GLint *params);
  void  glGetObjectBufferfvATI(RegalContext *_context, GLuint buffer, GLenum pname, GLfloat *params);
  void  glGetObjectBufferivATI(RegalContext *_context, GLuint buffer, GLenum pname, GLint *params);
  void  glGetVariantArrayObjectfvATI(RegalContext *_context, GLuint id, GLenum pname, GLfloat *params);
  void  glGetVariantArrayObjectivATI(RegalContext *_context, GLuint id, GLenum pname, GLint *params);
  GLboolean  glIsObjectBufferATI(RegalContext *_context, GLuint buffer);
  GLuint  glNewObjectBufferATI(RegalContext *_context, GLsizei size, const GLvoid *pointer, GLenum usage);
  void  glUpdateObjectBufferATI(RegalContext *_context, GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
  void  glVariantArrayObjectATI(RegalContext *_context, GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);

// GL_ATI_vertex_attrib_array_object

  void  glGetVertexAttribArrayObjectfvATI(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params);
  void  glGetVertexAttribArrayObjectivATI(RegalContext *_context, GLuint index, GLenum pname, GLint *params);
  void  glVertexAttribArrayObjectATI(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);

// GL_ATI_vertex_streams

  void  glClientActiveVertexStreamATI(RegalContext *_context, GLenum stream);
  void  glNormalStream3bATI(RegalContext *_context, GLenum stream, GLbyte x, GLbyte y, GLbyte z);
  void  glNormalStream3bvATI(RegalContext *_context, GLenum stream, const GLbyte *coords);
  void  glNormalStream3dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z);
  void  glNormalStream3dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords);
  void  glNormalStream3fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z);
  void  glNormalStream3fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords);
  void  glNormalStream3iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z);
  void  glNormalStream3ivATI(RegalContext *_context, GLenum stream, const GLint *coords);
  void  glNormalStream3sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z);
  void  glNormalStream3svATI(RegalContext *_context, GLenum stream, const GLshort *coords);
  void  glVertexBlendEnvfATI(RegalContext *_context, GLenum pname, GLfloat param);
  void  glVertexBlendEnviATI(RegalContext *_context, GLenum pname, GLint param);
  void  glVertexStream1dATI(RegalContext *_context, GLenum stream, GLdouble x);
  void  glVertexStream1dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords);
  void  glVertexStream1fATI(RegalContext *_context, GLenum stream, GLfloat x);
  void  glVertexStream1fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords);
  void  glVertexStream1iATI(RegalContext *_context, GLenum stream, GLint x);
  void  glVertexStream1ivATI(RegalContext *_context, GLenum stream, const GLint *coords);
  void  glVertexStream1sATI(RegalContext *_context, GLenum stream, GLshort x);
  void  glVertexStream1svATI(RegalContext *_context, GLenum stream, const GLshort *coords);
  void  glVertexStream2dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y);
  void  glVertexStream2dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords);
  void  glVertexStream2fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y);
  void  glVertexStream2fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords);
  void  glVertexStream2iATI(RegalContext *_context, GLenum stream, GLint x, GLint y);
  void  glVertexStream2ivATI(RegalContext *_context, GLenum stream, const GLint *coords);
  void  glVertexStream2sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y);
  void  glVertexStream2svATI(RegalContext *_context, GLenum stream, const GLshort *coords);
  void  glVertexStream3dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z);
  void  glVertexStream3dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords);
  void  glVertexStream3fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z);
  void  glVertexStream3fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords);
  void  glVertexStream3iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z);
  void  glVertexStream3ivATI(RegalContext *_context, GLenum stream, const GLint *coords);
  void  glVertexStream3sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z);
  void  glVertexStream3svATI(RegalContext *_context, GLenum stream, const GLshort *coords);
  void  glVertexStream4dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glVertexStream4dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords);
  void  glVertexStream4fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glVertexStream4fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords);
  void  glVertexStream4iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z, GLint w);
  void  glVertexStream4ivATI(RegalContext *_context, GLenum stream, const GLint *coords);
  void  glVertexStream4sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
  void  glVertexStream4svATI(RegalContext *_context, GLenum stream, const GLshort *coords);

// GL_EXT_bindable_uniform

  GLint  glGetUniformBufferSizeEXT(RegalContext *_context, GLuint program, GLint location);
  GLintptr  glGetUniformOffsetEXT(RegalContext *_context, GLuint program, GLint location);
  void  glUniformBufferEXT(RegalContext *_context, GLuint program, GLint location, GLuint buffer);

// GL_EXT_blend_color

  void  glBlendColorEXT(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);

// GL_EXT_blend_equation_separate

  void  glBlendEquationSeparateEXT(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha);

// GL_EXT_blend_func_separate

  void  glBlendFuncSeparateEXT(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

// GL_EXT_blend_minmax

  void  glBlendEquationEXT(RegalContext *_context, GLenum mode);

// GL_EXT_color_subtable

  void  glColorSubTableEXT(RegalContext *_context, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table);
  void  glCopyColorSubTableEXT(RegalContext *_context, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);

// GL_EXT_compiled_vertex_array

  void  glLockArraysEXT(RegalContext *_context, GLint first, GLsizei count);
  void  glUnlockArraysEXT(RegalContext *_context);

// GL_EXT_convolution

  void  glConvolutionFilter1DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
  void  glConvolutionFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
  void  glConvolutionParameterfEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat param);
  void  glConvolutionParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glConvolutionParameteriEXT(RegalContext *_context, GLenum target, GLenum pname, GLint param);
  void  glConvolutionParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);
  void  glCopyConvolutionFilter1DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
  void  glCopyConvolutionFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glGetConvolutionFilterEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *image);
  void  glGetConvolutionParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetConvolutionParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetSeparableFilterEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
  void  glSeparableFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);

// GL_EXT_coordinate_frame

  void  glBinormal3bEXT(RegalContext *_context, GLbyte bx, GLbyte by, GLbyte bz);
  void  glBinormal3bvEXT(RegalContext *_context, const GLbyte *v);
  void  glBinormal3dEXT(RegalContext *_context, GLdouble bx, GLdouble by, GLdouble bz);
  void  glBinormal3dvEXT(RegalContext *_context, const GLdouble *v);
  void  glBinormal3fEXT(RegalContext *_context, GLfloat bx, GLfloat by, GLfloat bz);
  void  glBinormal3fvEXT(RegalContext *_context, const GLfloat *v);
  void  glBinormal3iEXT(RegalContext *_context, GLint bx, GLint by, GLint bz);
  void  glBinormal3ivEXT(RegalContext *_context, const GLint *v);
  void  glBinormal3sEXT(RegalContext *_context, GLshort bx, GLshort by, GLshort bz);
  void  glBinormal3svEXT(RegalContext *_context, const GLshort *v);
  void  glBinormalPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glTangent3bEXT(RegalContext *_context, GLbyte tx, GLbyte ty, GLbyte tz);
  void  glTangent3bvEXT(RegalContext *_context, const GLbyte *v);
  void  glTangent3dEXT(RegalContext *_context, GLdouble tx, GLdouble ty, GLdouble tz);
  void  glTangent3dvEXT(RegalContext *_context, const GLdouble *v);
  void  glTangent3fEXT(RegalContext *_context, GLfloat tx, GLfloat ty, GLfloat tz);
  void  glTangent3fvEXT(RegalContext *_context, const GLfloat *v);
  void  glTangent3iEXT(RegalContext *_context, GLint tx, GLint ty, GLint tz);
  void  glTangent3ivEXT(RegalContext *_context, const GLint *v);
  void  glTangent3sEXT(RegalContext *_context, GLshort tx, GLshort ty, GLshort tz);
  void  glTangent3svEXT(RegalContext *_context, const GLshort *v);
  void  glTangentPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer);

// GL_EXT_copy_texture

  void  glCopyTexImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
  void  glCopyTexImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
  void  glCopyTexSubImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
  void  glCopyTexSubImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glCopyTexSubImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

// GL_EXT_cull_vertex

  void  glCullParameterdvEXT(RegalContext *_context, GLenum pname, GLdouble *params);
  void  glCullParameterfvEXT(RegalContext *_context, GLenum pname, GLfloat *params);

// GL_EXT_debug_label

  void  glGetObjectLabelEXT(RegalContext *_context, GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
  void  glLabelObjectEXT(RegalContext *_context, GLenum type, GLuint object, GLsizei length, const GLchar *label);

// GL_EXT_debug_marker

  void  glInsertEventMarkerEXT(RegalContext *_context, GLsizei length, const GLchar *marker);
  void  glPopGroupMarkerEXT(RegalContext *_context);
  void  glPushGroupMarkerEXT(RegalContext *_context, GLsizei length, const GLchar *marker);

// GL_EXT_depth_bounds_test

  void  glDepthBoundsEXT(RegalContext *_context, GLclampd zmin, GLclampd zmax);

// GL_EXT_direct_state_access

  void  glBindMultiTextureEXT(RegalContext *_context, GLenum texunit, GLenum target, GLuint texture);
  GLenum  glCheckNamedFramebufferStatusEXT(RegalContext *_context, GLuint framebuffer, GLenum target);
  void  glClientAttribDefaultEXT(RegalContext *_context, GLbitfield mask);
  void  glCompressedMultiTexImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
  void  glCompressedMultiTexImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
  void  glCompressedMultiTexImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
  void  glCompressedMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glCompressedMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glCompressedMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTextureImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
  void  glCompressedTextureImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
  void  glCompressedTextureImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
  void  glCompressedTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
  void  glCompressedTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
  void  glCompressedTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
  void  glCopyMultiTexImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
  void  glCopyMultiTexImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
  void  glCopyMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
  void  glCopyMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glCopyMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glCopyTextureImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
  void  glCopyTextureImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
  void  glCopyTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
  void  glCopyTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glCopyTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glDisableClientStateIndexedEXT(RegalContext *_context, GLenum array, GLuint index);
  void  glDisableVertexArrayAttribEXT(RegalContext *_context, GLuint vaobj, GLenum array);
  void  glDisableVertexArrayEXT(RegalContext *_context, GLuint vaobj, GLenum array);
  void  glEnableClientStateIndexedEXT(RegalContext *_context, GLenum array, GLuint index);
  void  glEnableVertexArrayAttribEXT(RegalContext *_context, GLuint vaobj, GLenum array);
  void  glEnableVertexArrayEXT(RegalContext *_context, GLuint vaobj, GLenum array);
  void  glFlushMappedNamedBufferRangeEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length);
  void  glFramebufferDrawBufferEXT(RegalContext *_context, GLuint framebuffer, GLenum mode);
  void  glFramebufferDrawBuffersEXT(RegalContext *_context, GLuint framebuffer, GLsizei n, const GLenum *bufs);
  void  glFramebufferReadBufferEXT(RegalContext *_context, GLuint framebuffer, GLenum mode);
  void  glGenerateMultiTexMipmapEXT(RegalContext *_context, GLenum texunit, GLenum target);
  void  glGenerateTextureMipmapEXT(RegalContext *_context, GLuint texture, GLenum target);
  void  glGetCompressedMultiTexImageEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint lod, GLvoid *img);
  void  glGetCompressedTextureImageEXT(RegalContext *_context, GLuint texture, GLenum target, GLint lod, GLvoid *img);
  void  glGetDoubleIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLdouble *data);
  void  glGetFloatIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLfloat *data);
  void  glGetFramebufferParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint *params);
  void  glGetMultiTexEnvfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
  void  glGetMultiTexEnvivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params);
  void  glGetMultiTexGendvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
  void  glGetMultiTexGenfvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
  void  glGetMultiTexGenivEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLint *params);
  void  glGetMultiTexImageEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
  void  glGetMultiTexLevelParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
  void  glGetMultiTexLevelParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
  void  glGetMultiTexParameterIivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params);
  void  glGetMultiTexParameterIuivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLuint *params);
  void  glGetMultiTexParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
  void  glGetMultiTexParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params);
  void  glGetNamedBufferParameterivEXT(RegalContext *_context, GLuint buffer, GLenum pname, GLint *params);
  void  glGetNamedBufferPointervEXT(RegalContext *_context, GLuint buffer, GLenum pname, GLvoid **params);
  void  glGetNamedBufferSubDataEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
  void  glGetNamedFramebufferAttachmentParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
  void  glGetNamedProgramLocalParameterIivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLint *params);
  void  glGetNamedProgramLocalParameterIuivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLuint *params);
  void  glGetNamedProgramLocalParameterdvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLdouble *params);
  void  glGetNamedProgramLocalParameterfvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLfloat *params);
  void  glGetNamedProgramStringEXT(RegalContext *_context, GLuint program, GLenum target, GLenum pname, GLvoid *string);
  void  glGetNamedProgramivEXT(RegalContext *_context, GLuint program, GLenum target, GLenum pname, GLint *params);
  void  glGetNamedRenderbufferParameterivEXT(RegalContext *_context, GLuint renderbuffer, GLenum pname, GLint *params);
  void  glGetPointerIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLvoid **data);
  void  glGetTextureImageEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
  void  glGetTextureLevelParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
  void  glGetTextureLevelParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
  void  glGetTextureParameterIivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint *params);
  void  glGetTextureParameterIuivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLuint *params);
  void  glGetTextureParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLfloat *params);
  void  glGetTextureParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint *params);
  void  glGetVertexArrayIntegeri_vEXT(RegalContext *_context, GLuint vaobj, GLuint index, GLenum pname, GLint *param);
  void  glGetVertexArrayIntegervEXT(RegalContext *_context, GLuint vaobj, GLenum pname, GLint *param);
  void  glGetVertexArrayPointeri_vEXT(RegalContext *_context, GLuint vaobj, GLuint index, GLenum pname, GLvoid **param);
  void  glGetVertexArrayPointervEXT(RegalContext *_context, GLuint vaobj, GLenum pname, GLvoid **param);
  GLvoid * glMapNamedBufferEXT(RegalContext *_context, GLuint buffer, GLenum access);
  GLvoid * glMapNamedBufferRangeEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
  void  glMatrixFrustumEXT(RegalContext *_context, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
  void  glMatrixLoadIdentityEXT(RegalContext *_context, GLenum mode);
  void  glMatrixLoadTransposedEXT(RegalContext *_context, GLenum mode, const GLdouble *m);
  void  glMatrixLoadTransposefEXT(RegalContext *_context, GLenum mode, const GLfloat *m);
  void  glMatrixLoaddEXT(RegalContext *_context, GLenum mode, const GLdouble *m);
  void  glMatrixLoadfEXT(RegalContext *_context, GLenum mode, const GLfloat *m);
  void  glMatrixMultTransposedEXT(RegalContext *_context, GLenum mode, const GLdouble *m);
  void  glMatrixMultTransposefEXT(RegalContext *_context, GLenum mode, const GLfloat *m);
  void  glMatrixMultdEXT(RegalContext *_context, GLenum mode, const GLdouble *m);
  void  glMatrixMultfEXT(RegalContext *_context, GLenum mode, const GLfloat *m);
  void  glMatrixOrthoEXT(RegalContext *_context, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
  void  glMatrixPopEXT(RegalContext *_context, GLenum mode);
  void  glMatrixPushEXT(RegalContext *_context, GLenum mode);
  void  glMatrixRotatedEXT(RegalContext *_context, GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
  void  glMatrixRotatefEXT(RegalContext *_context, GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
  void  glMatrixScaledEXT(RegalContext *_context, GLenum mode, GLdouble x, GLdouble y, GLdouble z);
  void  glMatrixScalefEXT(RegalContext *_context, GLenum mode, GLfloat x, GLfloat y, GLfloat z);
  void  glMatrixTranslatedEXT(RegalContext *_context, GLenum mode, GLdouble x, GLdouble y, GLdouble z);
  void  glMatrixTranslatefEXT(RegalContext *_context, GLenum mode, GLfloat x, GLfloat y, GLfloat z);
  void  glMultiTexBufferEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
  void  glMultiTexCoordPointerEXT(RegalContext *_context, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glMultiTexEnvfEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat param);
  void  glMultiTexEnvfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
  void  glMultiTexEnviEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint param);
  void  glMultiTexEnvivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *params);
  void  glMultiTexGendEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
  void  glMultiTexGendvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
  void  glMultiTexGenfEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
  void  glMultiTexGenfvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
  void  glMultiTexGeniEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLint param);
  void  glMultiTexGenivEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
  void  glMultiTexParameterIivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *params);
  void  glMultiTexParameterIuivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
  void  glMultiTexParameterfEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat param);
  void  glMultiTexParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLfloat *param);
  void  glMultiTexParameteriEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint param);
  void  glMultiTexParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *param);
  void  glMultiTexRenderbufferEXT(RegalContext *_context, GLenum texunit, GLenum target, GLuint renderbuffer);
  void  glMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
  void  glMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
  void  glMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
  void  glNamedBufferDataEXT(RegalContext *_context, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
  void  glNamedBufferSubDataEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
  void  glNamedCopyBufferSubDataEXT(RegalContext *_context, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
  void  glNamedFramebufferRenderbufferEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  void  glNamedFramebufferTexture1DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  void  glNamedFramebufferTexture2DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  void  glNamedFramebufferTexture3DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
  void  glNamedFramebufferTextureEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
  void  glNamedFramebufferTextureFaceEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
  void  glNamedFramebufferTextureLayerEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
  void  glNamedProgramLocalParameter4dEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glNamedProgramLocalParameter4dvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLdouble *params);
  void  glNamedProgramLocalParameter4fEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glNamedProgramLocalParameter4fvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLfloat *params);
  void  glNamedProgramLocalParameterI4iEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
  void  glNamedProgramLocalParameterI4ivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLint *params);
  void  glNamedProgramLocalParameterI4uiEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  void  glNamedProgramLocalParameterI4uivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLuint *params);
  void  glNamedProgramLocalParameters4fvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
  void  glNamedProgramLocalParametersI4ivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
  void  glNamedProgramLocalParametersI4uivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
  void  glNamedProgramStringEXT(RegalContext *_context, GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
  void  glNamedRenderbufferStorageEXT(RegalContext *_context, GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
  void  glNamedRenderbufferStorageMultisampleCoverageEXT(RegalContext *_context, GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
  void  glNamedRenderbufferStorageMultisampleEXT(RegalContext *_context, GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
  void  glProgramUniform1dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x);
  void  glProgramUniform1dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value);
  void  glProgramUniform1fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0);
  void  glProgramUniform1fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value);
  void  glProgramUniform1iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0);
  void  glProgramUniform1ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value);
  void  glProgramUniform1uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0);
  void  glProgramUniform1uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value);
  void  glProgramUniform2dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y);
  void  glProgramUniform2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value);
  void  glProgramUniform2fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1);
  void  glProgramUniform2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value);
  void  glProgramUniform2iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1);
  void  glProgramUniform2ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value);
  void  glProgramUniform2uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1);
  void  glProgramUniform2uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value);
  void  glProgramUniform3dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
  void  glProgramUniform3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value);
  void  glProgramUniform3fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
  void  glProgramUniform3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value);
  void  glProgramUniform3iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
  void  glProgramUniform3ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value);
  void  glProgramUniform3uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
  void  glProgramUniform3uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value);
  void  glProgramUniform4dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glProgramUniform4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value);
  void  glProgramUniform4fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  void  glProgramUniform4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value);
  void  glProgramUniform4iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
  void  glProgramUniform4ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value);
  void  glProgramUniform4uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  void  glProgramUniform4uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value);
  void  glProgramUniformMatrix2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix2x3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix2x3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix2x4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix2x4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix3x2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix3x2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix3x4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix3x4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix4x2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix4x2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glProgramUniformMatrix4x3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
  void  glProgramUniformMatrix4x3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  void  glPushClientAttribDefaultEXT(RegalContext *_context, GLbitfield mask);
  void  glTextureBufferEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
  void  glTextureParameterIivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLint *params);
  void  glTextureParameterIuivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLuint *params);
  void  glTextureParameterfEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLfloat param);
  void  glTextureParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLfloat *param);
  void  glTextureParameteriEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint param);
  void  glTextureParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLint *param);
  void  glTextureRenderbufferEXT(RegalContext *_context, GLuint texture, GLenum target, GLuint renderbuffer);
  void  glTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
  GLboolean  glUnmapNamedBufferEXT(RegalContext *_context, GLuint buffer);
  void  glVertexArrayColorOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset);
  void  glVertexArrayEdgeFlagOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset);
  void  glVertexArrayFogCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset);
  void  glVertexArrayIndexOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset);
  void  glVertexArrayMultiTexCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset);
  void  glVertexArrayNormalOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset);
  void  glVertexArraySecondaryColorOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset);
  void  glVertexArrayTexCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset);
  void  glVertexArrayVertexAttribIOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset);
  void  glVertexArrayVertexAttribOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset);
  void  glVertexArrayVertexOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset);

// GL_EXT_discard_framebuffer

  void  glDiscardFramebufferEXT(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments);

// GL_EXT_draw_buffers2

  void  glColorMaskIndexedEXT(RegalContext *_context, GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
  void  glDisableIndexedEXT(RegalContext *_context, GLenum target, GLuint index);
  void  glEnableIndexedEXT(RegalContext *_context, GLenum target, GLuint index);
  void  glGetBooleanIndexedvEXT(RegalContext *_context, GLenum value, GLuint index, GLboolean *data);
  void  glGetIntegerIndexedvEXT(RegalContext *_context, GLenum value, GLuint index, GLint *data);
  GLboolean  glIsEnabledIndexedEXT(RegalContext *_context, GLenum target, GLuint index);

// GL_EXT_draw_instanced

  void  glDrawArraysInstancedEXT(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount);
  void  glDrawElementsInstancedEXT(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);

// GL_EXT_draw_range_elements

  void  glDrawRangeElementsEXT(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);

// GL_EXT_fog_coord

  void  glFogCoordPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glFogCoorddEXT(RegalContext *_context, GLdouble coord);
  void  glFogCoorddvEXT(RegalContext *_context, const GLdouble *coord);
  void  glFogCoordfEXT(RegalContext *_context, GLfloat coord);
  void  glFogCoordfvEXT(RegalContext *_context, const GLfloat *coord);

// GL_EXT_framebuffer_blit

  void  glBlitFramebufferEXT(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);

// GL_EXT_framebuffer_multisample

  void  glRenderbufferStorageMultisampleEXT(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);

// GL_EXT_framebuffer_object

  void  glBindFramebufferEXT(RegalContext *_context, GLenum target, GLuint framebuffer);
  void  glBindRenderbufferEXT(RegalContext *_context, GLenum target, GLuint renderbuffer);
  GLenum  glCheckFramebufferStatusEXT(RegalContext *_context, GLenum target);
  void  glDeleteFramebuffersEXT(RegalContext *_context, GLsizei n, const GLuint *framebuffers);
  void  glDeleteRenderbuffersEXT(RegalContext *_context, GLsizei n, const GLuint *renderbuffers);
  void  glFramebufferRenderbufferEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  void  glFramebufferTexture1DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  void  glFramebufferTexture2DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  void  glFramebufferTexture3DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
  void  glGenFramebuffersEXT(RegalContext *_context, GLsizei n, GLuint *framebuffers);
  void  glGenRenderbuffersEXT(RegalContext *_context, GLsizei n, GLuint *renderbuffers);
  void  glGenerateMipmapEXT(RegalContext *_context, GLenum target);
  void  glGetFramebufferAttachmentParameterivEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params);
  void  glGetRenderbufferParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  GLboolean  glIsFramebufferEXT(RegalContext *_context, GLuint framebuffer);
  GLboolean  glIsRenderbufferEXT(RegalContext *_context, GLuint renderbuffer);
  void  glRenderbufferStorageEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height);

// GL_EXT_geometry_shader4

  void  glFramebufferTextureEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level);
  void  glFramebufferTextureFaceEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
  void  glProgramParameteriEXT(RegalContext *_context, GLuint program, GLenum pname, GLint value);

// GL_EXT_gpu_program_parameters

  void  glProgramEnvParameters4fvEXT(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
  void  glProgramLocalParameters4fvEXT(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *params);

// GL_EXT_gpu_shader4

  void  glBindFragDataLocationEXT(RegalContext *_context, GLuint program, GLuint color, const GLchar *name);
  GLint  glGetFragDataLocationEXT(RegalContext *_context, GLuint program, const GLchar *name);
  void  glGetUniformuivEXT(RegalContext *_context, GLuint program, GLint location, GLuint *params);
  void  glGetVertexAttribIivEXT(RegalContext *_context, GLuint index, GLenum pname, GLint *params);
  void  glGetVertexAttribIuivEXT(RegalContext *_context, GLuint index, GLenum pname, GLuint *params);
  void  glUniform1uiEXT(RegalContext *_context, GLint location, GLuint v0);
  void  glUniform1uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value);
  void  glUniform2uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1);
  void  glUniform2uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value);
  void  glUniform3uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2);
  void  glUniform3uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value);
  void  glUniform4uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
  void  glUniform4uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value);
  void  glVertexAttribI1iEXT(RegalContext *_context, GLuint index, GLint x);
  void  glVertexAttribI1ivEXT(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttribI1uiEXT(RegalContext *_context, GLuint index, GLuint x);
  void  glVertexAttribI1uivEXT(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttribI2iEXT(RegalContext *_context, GLuint index, GLint x, GLint y);
  void  glVertexAttribI2ivEXT(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttribI2uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y);
  void  glVertexAttribI2uivEXT(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttribI3iEXT(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z);
  void  glVertexAttribI3ivEXT(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttribI3uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z);
  void  glVertexAttribI3uivEXT(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttribI4bvEXT(RegalContext *_context, GLuint index, const GLbyte *v);
  void  glVertexAttribI4iEXT(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z, GLint w);
  void  glVertexAttribI4ivEXT(RegalContext *_context, GLuint index, const GLint *v);
  void  glVertexAttribI4svEXT(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttribI4ubvEXT(RegalContext *_context, GLuint index, const GLubyte *v);
  void  glVertexAttribI4uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  void  glVertexAttribI4uivEXT(RegalContext *_context, GLuint index, const GLuint *v);
  void  glVertexAttribI4usvEXT(RegalContext *_context, GLuint index, const GLushort *v);
  void  glVertexAttribIPointerEXT(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);

// GL_EXT_histogram

  void  glGetHistogramEXT(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
  void  glGetHistogramParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetHistogramParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetMinmaxEXT(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
  void  glGetMinmaxParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetMinmaxParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glHistogramEXT(RegalContext *_context, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
  void  glMinmaxEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLboolean sink);
  void  glResetHistogramEXT(RegalContext *_context, GLenum target);
  void  glResetMinmaxEXT(RegalContext *_context, GLenum target);

// GL_EXT_index_func

  void  glIndexFuncEXT(RegalContext *_context, GLenum func, GLfloat ref);

// GL_EXT_index_material

  void  glIndexMaterialEXT(RegalContext *_context, GLenum face, GLenum mode);

// GL_EXT_light_texture

  void  glApplyTextureEXT(RegalContext *_context, GLenum mode);
  void  glTextureLightEXT(RegalContext *_context, GLenum pname);
  void  glTextureMaterialEXT(RegalContext *_context, GLenum face, GLenum mode);

// GL_EXT_multi_draw_arrays

  void  glMultiDrawArraysEXT(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
  void  glMultiDrawElementsEXT(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount);

// GL_EXT_multisample

  void  glSampleMaskEXT(RegalContext *_context, GLclampf value, GLboolean invert);
  void  glSamplePatternEXT(RegalContext *_context, GLenum pattern);

// GL_EXT_occlusion_query_boolean

  void  glBeginQueryEXT(RegalContext *_context, GLenum target, GLuint id);
  void  glDeleteQueriesEXT(RegalContext *_context, GLsizei n, const GLuint *ids);
  void  glEndQueryEXT(RegalContext *_context, GLenum target);
  void  glGenQueriesEXT(RegalContext *_context, GLsizei n, GLuint *ids);
  void  glGetQueryObjectuivEXT(RegalContext *_context, GLuint id, GLenum pname, GLuint *params);
  void  glGetQueryivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  GLboolean  glIsQueryEXT(RegalContext *_context, GLuint id);

// GL_EXT_paletted_texture

  void  glColorTableEXT(RegalContext *_context, GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
  void  glGetColorTableEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *data);
  void  glGetColorTableParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetColorTableParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params);

// GL_EXT_pixel_transform

  void  glPixelTransformParameterfEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat param);
  void  glPixelTransformParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glPixelTransformParameteriEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint param);
  void  glPixelTransformParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);

// GL_EXT_point_parameters

  void  glPointParameterfEXT(RegalContext *_context, GLenum pname, GLfloat param);
  void  glPointParameterfvEXT(RegalContext *_context, GLenum pname, const GLfloat *params);

// GL_EXT_polygon_offset

  void  glPolygonOffsetEXT(RegalContext *_context, GLfloat factor, GLfloat bias);

// GL_EXT_provoking_vertex

  void  glProvokingVertexEXT(RegalContext *_context, GLenum mode);

// GL_EXT_secondary_color

  void  glSecondaryColor3bEXT(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue);
  void  glSecondaryColor3bvEXT(RegalContext *_context, const GLbyte *v);
  void  glSecondaryColor3dEXT(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue);
  void  glSecondaryColor3dvEXT(RegalContext *_context, const GLdouble *v);
  void  glSecondaryColor3fEXT(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue);
  void  glSecondaryColor3fvEXT(RegalContext *_context, const GLfloat *v);
  void  glSecondaryColor3iEXT(RegalContext *_context, GLint red, GLint green, GLint blue);
  void  glSecondaryColor3ivEXT(RegalContext *_context, const GLint *v);
  void  glSecondaryColor3sEXT(RegalContext *_context, GLshort red, GLshort green, GLshort blue);
  void  glSecondaryColor3svEXT(RegalContext *_context, const GLshort *v);
  void  glSecondaryColor3ubEXT(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue);
  void  glSecondaryColor3ubvEXT(RegalContext *_context, const GLubyte *v);
  void  glSecondaryColor3uiEXT(RegalContext *_context, GLuint red, GLuint green, GLuint blue);
  void  glSecondaryColor3uivEXT(RegalContext *_context, const GLuint *v);
  void  glSecondaryColor3usEXT(RegalContext *_context, GLushort red, GLushort green, GLushort blue);
  void  glSecondaryColor3usvEXT(RegalContext *_context, const GLushort *v);
  void  glSecondaryColorPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);

// GL_EXT_separate_shader_objects

  void  glActiveProgramEXT(RegalContext *_context, GLuint program);
  GLuint  glCreateShaderProgramEXT(RegalContext *_context, GLenum type, const GLchar *string);
  void  glUseShaderProgramEXT(RegalContext *_context, GLenum type, GLuint program);

// GL_EXT_shader_image_load_store

  void  glBindImageTextureEXT(RegalContext *_context, GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
  void  glMemoryBarrierEXT(RegalContext *_context, GLbitfield barriers);

// GL_EXT_stencil_clear_tag

  void  glStencilClearTagEXT(RegalContext *_context, GLsizei stencilTagBits, GLuint stencilClearTag);

// GL_EXT_stencil_two_side

  void  glActiveStencilFaceEXT(RegalContext *_context, GLenum face);

// GL_EXT_subtexture

  void  glTexSubImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTexSubImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTexSubImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);

// GL_EXT_texture3D

  void  glTexImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);

// GL_EXT_texture_array

  void  glFramebufferTextureLayerEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);

// GL_EXT_texture_buffer_object

  void  glTexBufferEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer);

// GL_EXT_texture_integer

  void  glClearColorIiEXT(RegalContext *_context, GLint red, GLint green, GLint blue, GLint alpha);
  void  glClearColorIuiEXT(RegalContext *_context, GLuint red, GLuint green, GLuint blue, GLuint alpha);
  void  glGetTexParameterIivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetTexParameterIuivEXT(RegalContext *_context, GLenum target, GLenum pname, GLuint *params);
  void  glTexParameterIivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);
  void  glTexParameterIuivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLuint *params);

// GL_EXT_texture_object

  GLboolean  glAreTexturesResidentEXT(RegalContext *_context, GLsizei n, const GLuint *textures, GLboolean *residences);
  void  glBindTextureEXT(RegalContext *_context, GLenum target, GLuint texture);
  void  glDeleteTexturesEXT(RegalContext *_context, GLsizei n, const GLuint *textures);
  void  glGenTexturesEXT(RegalContext *_context, GLsizei n, GLuint *textures);
  GLboolean  glIsTextureEXT(RegalContext *_context, GLuint texture);
  void  glPrioritizeTexturesEXT(RegalContext *_context, GLsizei n, const GLuint *textures, const GLclampf *priorities);

// GL_EXT_texture_perturb_normal

  void  glTextureNormalEXT(RegalContext *_context, GLenum mode);

// GL_EXT_timer_query

  void  glGetQueryObjecti64vEXT(RegalContext *_context, GLuint id, GLenum pname, GLint64EXT *params);
  void  glGetQueryObjectui64vEXT(RegalContext *_context, GLuint id, GLenum pname, GLuint64EXT *params);

// GL_EXT_transform_feedback

  void  glBeginTransformFeedbackEXT(RegalContext *_context, GLenum primitiveMode);
  void  glBindBufferBaseEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer);
  void  glBindBufferOffsetEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset);
  void  glBindBufferRangeEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
  void  glEndTransformFeedbackEXT(RegalContext *_context);
  void  glGetTransformFeedbackVaryingEXT(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
  void  glTransformFeedbackVaryingsEXT(RegalContext *_context, GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode);

// GL_EXT_vertex_array

  void  glArrayElementEXT(RegalContext *_context, GLint i);
  void  glColorPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  void  glDrawArraysEXT(RegalContext *_context, GLenum mode, GLint first, GLsizei count);
  void  glEdgeFlagPointerEXT(RegalContext *_context, GLsizei stride, GLsizei count, const GLboolean *pointer);
  void  glGetPointervEXT(RegalContext *_context, GLenum pname, GLvoid **params);
  void  glIndexPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  void  glNormalPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  void  glTexCoordPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  void  glVertexPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);

// GL_EXT_vertex_attrib_64bit

  void  glGetVertexAttribLdvEXT(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params);
  void  glVertexArrayVertexAttribLOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
  void  glVertexAttribL1dEXT(RegalContext *_context, GLuint index, GLdouble x);
  void  glVertexAttribL1dvEXT(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttribL2dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y);
  void  glVertexAttribL2dvEXT(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttribL3dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z);
  void  glVertexAttribL3dvEXT(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttribL4dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glVertexAttribL4dvEXT(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttribLPointerEXT(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);

// GL_EXT_vertex_shader

  void  glBeginVertexShaderEXT(RegalContext *_context);
  GLuint  glBindLightParameterEXT(RegalContext *_context, GLenum light, GLenum value);
  GLuint  glBindMaterialParameterEXT(RegalContext *_context, GLenum face, GLenum value);
  GLuint  glBindParameterEXT(RegalContext *_context, GLenum value);
  GLuint  glBindTexGenParameterEXT(RegalContext *_context, GLenum unit, GLenum coord, GLenum value);
  GLuint  glBindTextureUnitParameterEXT(RegalContext *_context, GLenum unit, GLenum value);
  void  glBindVertexShaderEXT(RegalContext *_context, GLuint id);
  void  glDeleteVertexShaderEXT(RegalContext *_context, GLuint id);
  void  glDisableVariantClientStateEXT(RegalContext *_context, GLuint id);
  void  glEnableVariantClientStateEXT(RegalContext *_context, GLuint id);
  void  glEndVertexShaderEXT(RegalContext *_context);
  void  glExtractComponentEXT(RegalContext *_context, GLuint res, GLuint src, GLuint num);
  GLuint  glGenSymbolsEXT(RegalContext *_context, GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
  GLuint  glGenVertexShadersEXT(RegalContext *_context, GLuint range);
  void  glGetInvariantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data);
  void  glGetInvariantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data);
  void  glGetInvariantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data);
  void  glGetLocalConstantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data);
  void  glGetLocalConstantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data);
  void  glGetLocalConstantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data);
  void  glGetVariantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data);
  void  glGetVariantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data);
  void  glGetVariantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data);
  void  glGetVariantPointervEXT(RegalContext *_context, GLuint id, GLenum value, GLvoid **data);
  void  glInsertComponentEXT(RegalContext *_context, GLuint res, GLuint src, GLuint num);
  GLboolean  glIsVariantEnabledEXT(RegalContext *_context, GLuint id, GLenum cap);
  void  glSetInvariantEXT(RegalContext *_context, GLuint id, GLenum type, const GLvoid *addr);
  void  glSetLocalConstantEXT(RegalContext *_context, GLuint id, GLenum type, const GLvoid *addr);
  void  glShaderOp1EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1);
  void  glShaderOp2EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1, GLuint arg2);
  void  glShaderOp3EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
  void  glSwizzleEXT(RegalContext *_context, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
  void  glVariantPointerEXT(RegalContext *_context, GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
  void  glVariantbvEXT(RegalContext *_context, GLuint id, const GLbyte *addr);
  void  glVariantdvEXT(RegalContext *_context, GLuint id, const GLdouble *addr);
  void  glVariantfvEXT(RegalContext *_context, GLuint id, const GLfloat *addr);
  void  glVariantivEXT(RegalContext *_context, GLuint id, const GLint *addr);
  void  glVariantsvEXT(RegalContext *_context, GLuint id, const GLshort *addr);
  void  glVariantubvEXT(RegalContext *_context, GLuint id, const GLubyte *addr);
  void  glVariantuivEXT(RegalContext *_context, GLuint id, const GLuint *addr);
  void  glVariantusvEXT(RegalContext *_context, GLuint id, const GLushort *addr);
  void  glWriteMaskEXT(RegalContext *_context, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);

// GL_EXT_vertex_weighting

  void  glVertexWeightPointerEXT(RegalContext *_context, GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glVertexWeightfEXT(RegalContext *_context, GLfloat weight);
  void  glVertexWeightfvEXT(RegalContext *_context, const GLfloat *weight);

// GL_EXT_x11_sync_object

  GLsync  glImportSyncEXT(RegalContext *_context, GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);

// GL_GREMEDY_frame_terminator

  void  glFrameTerminatorGREMEDY(RegalContext *_context);

// GL_GREMEDY_string_marker

  void  glStringMarkerGREMEDY(RegalContext *_context, GLsizei len, const GLvoid *string);

// GL_HP_image_transform

  void  glGetImageTransformParameterfvHP(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetImageTransformParameterivHP(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glImageTransformParameterfHP(RegalContext *_context, GLenum target, GLenum pname, GLfloat param);
  void  glImageTransformParameterfvHP(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glImageTransformParameteriHP(RegalContext *_context, GLenum target, GLenum pname, GLint param);
  void  glImageTransformParameterivHP(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);

// GL_IBM_multimode_draw_arrays

  void  glMultiModeDrawArraysIBM(RegalContext *_context, const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
  void  glMultiModeDrawElementsIBM(RegalContext *_context, const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride);

// GL_IBM_vertex_array_lists

  void  glColorPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride);
  void  glEdgeFlagPointerListIBM(RegalContext *_context, GLint stride, const GLboolean **pointer, GLint ptrstride);
  void  glFogCoordPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride);
  void  glIndexPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride);
  void  glNormalPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride);
  void  glSecondaryColorPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride);
  void  glTexCoordPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride);
  void  glVertexPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride);

// GL_IMG_multisampled_render_to_texture

  void  glFramebufferTexture2DMultisampleIMG(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
  void  glRenderbufferStorageMultisampleIMG(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);

// GL_INGR_blend_func_separate

  void  glBlendFuncSeparateINGR(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

// GL_INTEL_parallel_arrays

  void  glColorPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer);
  void  glNormalPointervINTEL(RegalContext *_context, GLenum type, const GLvoid **pointer);
  void  glTexCoordPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer);
  void  glVertexPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer);

// GL_KHR_debug

  void  glDebugMessageCallback(RegalContext *_context, GLDEBUGPROC callback, const GLvoid *userParam);
  void  glDebugMessageControl(RegalContext *_context, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
  void  glDebugMessageInsert(RegalContext *_context, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
  GLuint  glGetDebugMessageLog(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
  void  glGetObjectLabel(RegalContext *_context, GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
  void  glGetObjectPtrLabel(RegalContext *_context, const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
  void  glObjectLabel(RegalContext *_context, GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
  void  glObjectPtrLabel(RegalContext *_context, const GLvoid *ptr, GLsizei length, const GLchar *label);
  void  glPopDebugGroup(RegalContext *_context);
  void  glPushDebugGroup(RegalContext *_context, GLenum source, GLuint id, GLsizei length, const GLchar *message);

// GL_KTX_buffer_region

  GLuint  glBufferRegionEnabled(RegalContext *_context);
  void  glDeleteBufferRegion(RegalContext *_context, GLenum region);
  void  glDrawBufferRegion(RegalContext *_context, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest);
  GLuint  glNewBufferRegion(RegalContext *_context, GLenum region);
  void  glReadBufferRegion(RegalContext *_context, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height);

// GL_MESA_resize_buffers

  void  glResizeBuffersMESA(RegalContext *_context);

// GL_MESA_window_pos

  void  glWindowPos2dMESA(RegalContext *_context, GLdouble x, GLdouble y);
  void  glWindowPos2dvMESA(RegalContext *_context, const GLdouble *v);
  void  glWindowPos2fMESA(RegalContext *_context, GLfloat x, GLfloat y);
  void  glWindowPos2fvMESA(RegalContext *_context, const GLfloat *v);
  void  glWindowPos2iMESA(RegalContext *_context, GLint x, GLint y);
  void  glWindowPos2ivMESA(RegalContext *_context, const GLint *v);
  void  glWindowPos2sMESA(RegalContext *_context, GLshort x, GLshort y);
  void  glWindowPos2svMESA(RegalContext *_context, const GLshort *v);
  void  glWindowPos3dMESA(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z);
  void  glWindowPos3dvMESA(RegalContext *_context, const GLdouble *v);
  void  glWindowPos3fMESA(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z);
  void  glWindowPos3fvMESA(RegalContext *_context, const GLfloat *v);
  void  glWindowPos3iMESA(RegalContext *_context, GLint x, GLint y, GLint z);
  void  glWindowPos3ivMESA(RegalContext *_context, const GLint *v);
  void  glWindowPos3sMESA(RegalContext *_context, GLshort x, GLshort y, GLshort z);
  void  glWindowPos3svMESA(RegalContext *_context, const GLshort *v);
  void  glWindowPos4dMESA(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glWindowPos4dvMESA(RegalContext *_context, const GLdouble *v);
  void  glWindowPos4fMESA(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glWindowPos4fvMESA(RegalContext *_context, const GLfloat *v);
  void  glWindowPos4iMESA(RegalContext *_context, GLint x, GLint y, GLint z, GLint w);
  void  glWindowPos4ivMESA(RegalContext *_context, const GLint *v);
  void  glWindowPos4sMESA(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w);
  void  glWindowPos4svMESA(RegalContext *_context, const GLshort *v);

// GL_NV_conditional_render

  void  glBeginConditionalRenderNV(RegalContext *_context, GLuint id, GLenum mode);
  void  glEndConditionalRenderNV(RegalContext *_context);

// GL_NV_copy_image

  void  glCopyImageSubDataNV(RegalContext *_context, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);

// GL_NV_coverage_sample

  void  glCoverageMaskNV(RegalContext *_context, GLboolean mask);
  void  glCoverageOperationNV(RegalContext *_context, GLenum operation);

// GL_NV_depth_buffer_float

  void  glClearDepthdNV(RegalContext *_context, GLdouble depth);
  void  glDepthBoundsdNV(RegalContext *_context, GLdouble zmin, GLdouble zmax);
  void  glDepthRangedNV(RegalContext *_context, GLdouble zNear, GLdouble zFar);

// GL_NV_draw_buffers

  void  glDrawBuffersNV(RegalContext *_context, GLsizei n, const GLenum *bufs);

// GL_NV_evaluators

  void  glEvalMapsNV(RegalContext *_context, GLenum target, GLenum mode);
  void  glGetMapAttribParameterfvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLfloat *params);
  void  glGetMapAttribParameterivNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLint *params);
  void  glGetMapControlPointsNV(RegalContext *_context, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
  void  glGetMapParameterfvNV(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetMapParameterivNV(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glMapControlPointsNV(RegalContext *_context, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
  void  glMapParameterfvNV(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glMapParameterivNV(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);

// GL_NV_explicit_multisample

  void  glGetMultisamplefvNV(RegalContext *_context, GLenum pname, GLuint index, GLfloat *val);
  void  glSampleMaskIndexedNV(RegalContext *_context, GLuint index, GLbitfield mask);
  void  glTexRenderbufferNV(RegalContext *_context, GLenum target, GLuint renderbuffer);

// GL_NV_fence

  void  glDeleteFencesNV(RegalContext *_context, GLsizei n, const GLuint *fences);
  void  glFinishFenceNV(RegalContext *_context, GLuint fence);
  void  glGenFencesNV(RegalContext *_context, GLsizei n, GLuint *fences);
  void  glGetFenceivNV(RegalContext *_context, GLuint fence, GLenum pname, GLint *params);
  GLboolean  glIsFenceNV(RegalContext *_context, GLuint fence);
  void  glSetFenceNV(RegalContext *_context, GLuint fence, GLenum condition);
  GLboolean  glTestFenceNV(RegalContext *_context, GLuint fence);

// GL_NV_fragment_program

  void  glGetProgramNamedParameterdvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
  void  glGetProgramNamedParameterfvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
  void  glProgramNamedParameter4dNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glProgramNamedParameter4dvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
  void  glProgramNamedParameter4fNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glProgramNamedParameter4fvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);

// GL_NV_framebuffer_multisample_coverage

  void  glRenderbufferStorageMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);

// GL_NV_geometry_program4

  void  glProgramVertexLimitNV(RegalContext *_context, GLenum target, GLint limit);

// GL_NV_gpu_program4

  void  glGetProgramEnvParameterIivNV(RegalContext *_context, GLenum target, GLuint index, GLint *params);
  void  glGetProgramEnvParameterIuivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params);
  void  glGetProgramLocalParameterIivNV(RegalContext *_context, GLenum target, GLuint index, GLint *params);
  void  glGetProgramLocalParameterIuivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params);
  void  glProgramEnvParameterI4iNV(RegalContext *_context, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
  void  glProgramEnvParameterI4ivNV(RegalContext *_context, GLenum target, GLuint index, const GLint *params);
  void  glProgramEnvParameterI4uiNV(RegalContext *_context, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  void  glProgramEnvParameterI4uivNV(RegalContext *_context, GLenum target, GLuint index, const GLuint *params);
  void  glProgramEnvParametersI4ivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLint *params);
  void  glProgramEnvParametersI4uivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLuint *params);
  void  glProgramLocalParameterI4iNV(RegalContext *_context, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
  void  glProgramLocalParameterI4ivNV(RegalContext *_context, GLenum target, GLuint index, const GLint *params);
  void  glProgramLocalParameterI4uiNV(RegalContext *_context, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
  void  glProgramLocalParameterI4uivNV(RegalContext *_context, GLenum target, GLuint index, const GLuint *params);
  void  glProgramLocalParametersI4ivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLint *params);
  void  glProgramLocalParametersI4uivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLuint *params);

// GL_NV_gpu_shader5

  void  glGetUniformi64vNV(RegalContext *_context, GLuint program, GLint location, GLint64EXT *params);
  void  glProgramUniform1i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x);
  void  glProgramUniform1i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
  void  glProgramUniform1ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x);
  void  glProgramUniform1ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
  void  glProgramUniform2i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
  void  glProgramUniform2i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
  void  glProgramUniform2ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
  void  glProgramUniform2ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
  void  glProgramUniform3i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
  void  glProgramUniform3i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
  void  glProgramUniform3ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
  void  glProgramUniform3ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
  void  glProgramUniform4i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
  void  glProgramUniform4i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
  void  glProgramUniform4ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
  void  glProgramUniform4ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
  void  glUniform1i64NV(RegalContext *_context, GLint location, GLint64EXT x);
  void  glUniform1i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value);
  void  glUniform1ui64NV(RegalContext *_context, GLint location, GLuint64EXT x);
  void  glUniform1ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value);
  void  glUniform2i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y);
  void  glUniform2i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value);
  void  glUniform2ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y);
  void  glUniform2ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value);
  void  glUniform3i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
  void  glUniform3i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value);
  void  glUniform3ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
  void  glUniform3ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value);
  void  glUniform4i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
  void  glUniform4i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value);
  void  glUniform4ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
  void  glUniform4ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value);

// GL_NV_half_float

  void  glColor3hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue);
  void  glColor3hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glColor4hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
  void  glColor4hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glFogCoordhNV(RegalContext *_context, GLhalfNV coord);
  void  glFogCoordhvNV(RegalContext *_context, const GLhalfNV *coord);
  void  glMultiTexCoord1hNV(RegalContext *_context, GLenum target, GLhalfNV s);
  void  glMultiTexCoord1hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v);
  void  glMultiTexCoord2hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t);
  void  glMultiTexCoord2hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v);
  void  glMultiTexCoord3hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
  void  glMultiTexCoord3hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v);
  void  glMultiTexCoord4hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
  void  glMultiTexCoord4hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v);
  void  glNormal3hNV(RegalContext *_context, GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
  void  glNormal3hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glSecondaryColor3hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue);
  void  glSecondaryColor3hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glTexCoord1hNV(RegalContext *_context, GLhalfNV s);
  void  glTexCoord1hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glTexCoord2hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t);
  void  glTexCoord2hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glTexCoord3hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t, GLhalfNV r);
  void  glTexCoord3hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glTexCoord4hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
  void  glTexCoord4hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glVertex2hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y);
  void  glVertex2hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glVertex3hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y, GLhalfNV z);
  void  glVertex3hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glVertex4hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
  void  glVertex4hvNV(RegalContext *_context, const GLhalfNV *v);
  void  glVertexAttrib1hNV(RegalContext *_context, GLuint index, GLhalfNV x);
  void  glVertexAttrib1hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v);
  void  glVertexAttrib2hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y);
  void  glVertexAttrib2hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v);
  void  glVertexAttrib3hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
  void  glVertexAttrib3hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v);
  void  glVertexAttrib4hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
  void  glVertexAttrib4hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v);
  void  glVertexAttribs1hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v);
  void  glVertexAttribs2hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v);
  void  glVertexAttribs3hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v);
  void  glVertexAttribs4hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v);
  void  glVertexWeighthNV(RegalContext *_context, GLhalfNV weight);
  void  glVertexWeighthvNV(RegalContext *_context, const GLhalfNV *weight);

// GL_NV_occlusion_query

  void  glBeginOcclusionQueryNV(RegalContext *_context, GLuint id);
  void  glDeleteOcclusionQueriesNV(RegalContext *_context, GLsizei n, const GLuint *ids);
  void  glEndOcclusionQueryNV(RegalContext *_context);
  void  glGenOcclusionQueriesNV(RegalContext *_context, GLsizei n, GLuint *ids);
  void  glGetOcclusionQueryivNV(RegalContext *_context, GLuint id, GLenum pname, GLint *params);
  void  glGetOcclusionQueryuivNV(RegalContext *_context, GLuint id, GLenum pname, GLuint *params);
  GLboolean  glIsOcclusionQueryNV(RegalContext *_context, GLuint id);

// GL_NV_parameter_buffer_object

  void  glProgramBufferParametersIivNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
  void  glProgramBufferParametersIuivNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
  void  glProgramBufferParametersfvNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);

// GL_NV_path_rendering

  void  glCopyPathNV(RegalContext *_context, GLuint resultPath, GLuint srcPath);
  void  glCoverFillPathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
  void  glCoverFillPathNV(RegalContext *_context, GLuint path, GLenum coverMode);
  void  glCoverStrokePathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
  void  glCoverStrokePathNV(RegalContext *_context, GLuint name, GLenum coverMode);
  void  glDeletePathsNV(RegalContext *_context, GLuint path, GLsizei range);
  GLuint  glGenPathsNV(RegalContext *_context, GLsizei range);
  void  glGetPathColorGenfvNV(RegalContext *_context, GLenum color, GLenum pname, GLfloat *value);
  void  glGetPathColorGenivNV(RegalContext *_context, GLenum color, GLenum pname, GLint *value);
  void  glGetPathCommandsNV(RegalContext *_context, GLuint name, GLubyte *commands);
  void  glGetPathCoordsNV(RegalContext *_context, GLuint name, GLfloat *coords);
  void  glGetPathDashArrayNV(RegalContext *_context, GLuint name, GLfloat *dashArray);
  GLfloat  glGetPathLengthNV(RegalContext *_context, GLuint path, GLsizei startSegment, GLsizei numSegments);
  void  glGetPathMetricRangeNV(RegalContext *_context, GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
  void  glGetPathMetricsNV(RegalContext *_context, GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
  void  glGetPathParameterfvNV(RegalContext *_context, GLuint name, GLenum param, GLfloat *value);
  void  glGetPathParameterivNV(RegalContext *_context, GLuint name, GLenum param, GLint *value);
  void  glGetPathSpacingNV(RegalContext *_context, GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
  void  glGetPathTexGenfvNV(RegalContext *_context, GLenum texCoordSet, GLenum pname, GLfloat *value);
  void  glGetPathTexGenivNV(RegalContext *_context, GLenum texCoordSet, GLenum pname, GLint *value);
  void  glInterpolatePathsNV(RegalContext *_context, GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
  GLboolean  glIsPathNV(RegalContext *_context, GLuint path);
  GLboolean  glIsPointInFillPathNV(RegalContext *_context, GLuint path, GLuint mask, GLfloat x, GLfloat y);
  GLboolean  glIsPointInStrokePathNV(RegalContext *_context, GLuint path, GLfloat x, GLfloat y);
  void  glPathColorGenNV(RegalContext *_context, GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
  void  glPathCommandsNV(RegalContext *_context, GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
  void  glPathCoordsNV(RegalContext *_context, GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
  void  glPathCoverDepthFuncNV(RegalContext *_context, GLenum zfunc);
  void  glPathDashArrayNV(RegalContext *_context, GLuint path, GLsizei dashCount, const GLfloat *dashArray);
  void  glPathFogGenNV(RegalContext *_context, GLenum genMode);
  void  glPathGlyphRangeNV(RegalContext *_context, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
  void  glPathGlyphsNV(RegalContext *_context, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
  void  glPathParameterfNV(RegalContext *_context, GLuint path, GLenum pname, GLfloat value);
  void  glPathParameterfvNV(RegalContext *_context, GLuint path, GLenum pname, const GLfloat *value);
  void  glPathParameteriNV(RegalContext *_context, GLuint path, GLenum pname, GLint value);
  void  glPathParameterivNV(RegalContext *_context, GLuint path, GLenum pname, const GLint *value);
  void  glPathStencilDepthOffsetNV(RegalContext *_context, GLfloat factor, GLfloat units);
  void  glPathStencilFuncNV(RegalContext *_context, GLenum func, GLint ref, GLuint mask);
  void  glPathStringNV(RegalContext *_context, GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
  void  glPathSubCommandsNV(RegalContext *_context, GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
  void  glPathSubCoordsNV(RegalContext *_context, GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
  void  glPathTexGenNV(RegalContext *_context, GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
  GLboolean  glPointAlongPathNV(RegalContext *_context, GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
  void  glStencilFillPathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
  void  glStencilFillPathNV(RegalContext *_context, GLuint path, GLenum fillMode, GLuint mask);
  void  glStencilStrokePathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
  void  glStencilStrokePathNV(RegalContext *_context, GLuint path, GLint reference, GLuint mask);
  void  glTransformPathNV(RegalContext *_context, GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
  void  glWeightPathsNV(RegalContext *_context, GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);

// GL_NV_pixel_data_range

  void  glFlushPixelDataRangeNV(RegalContext *_context, GLenum target);
  void  glPixelDataRangeNV(RegalContext *_context, GLenum target, GLsizei size, const GLvoid *pointer);

// GL_NV_point_sprite

  void  glPointParameteriNV(RegalContext *_context, GLenum pname, GLint param);
  void  glPointParameterivNV(RegalContext *_context, GLenum pname, const GLint *params);

// GL_NV_present_video

  void  glGetVideoi64vNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLint64EXT *params);
  void  glGetVideoivNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLint *params);
  void  glGetVideoui64vNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLuint64EXT *params);
  void  glGetVideouivNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLuint *params);
  void  glPresentFrameDualFillNV(RegalContext *_context, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
  void  glPresentFrameKeyedNV(RegalContext *_context, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);

// GL_NV_primitive_restart

  void  glPrimitiveRestartIndexNV(RegalContext *_context, GLuint index);
  void  glPrimitiveRestartNV(RegalContext *_context);

// GL_NV_read_buffer

  void  glReadBufferNV(RegalContext *_context, GLenum mode);

// GL_NV_register_combiners

  void  glCombinerInputNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
  void  glCombinerOutputNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
  void  glCombinerParameterfNV(RegalContext *_context, GLenum pname, GLfloat param);
  void  glCombinerParameterfvNV(RegalContext *_context, GLenum pname, const GLfloat *params);
  void  glCombinerParameteriNV(RegalContext *_context, GLenum pname, GLint param);
  void  glCombinerParameterivNV(RegalContext *_context, GLenum pname, const GLint *params);
  void  glFinalCombinerInputNV(RegalContext *_context, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
  void  glGetCombinerInputParameterfvNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
  void  glGetCombinerInputParameterivNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
  void  glGetCombinerOutputParameterfvNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
  void  glGetCombinerOutputParameterivNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum pname, GLint *params);
  void  glGetFinalCombinerInputParameterfvNV(RegalContext *_context, GLenum variable, GLenum pname, GLfloat *params);
  void  glGetFinalCombinerInputParameterivNV(RegalContext *_context, GLenum variable, GLenum pname, GLint *params);

// GL_NV_register_combiners2

  void  glCombinerStageParameterfvNV(RegalContext *_context, GLenum stage, GLenum pname, const GLfloat *params);
  void  glGetCombinerStageParameterfvNV(RegalContext *_context, GLenum stage, GLenum pname, GLfloat *params);

// GL_NV_shader_buffer_load

  void  glGetBufferParameterui64vNV(RegalContext *_context, GLenum target, GLenum pname, GLuint64EXT *params);
  void  glGetIntegerui64vNV(RegalContext *_context, GLenum target, GLuint64EXT *data);
  void  glGetNamedBufferParameterui64vNV(RegalContext *_context, GLuint buffer, GLenum pname, GLuint64EXT *params);
  void  glGetUniformui64vNV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT *params);
  GLboolean  glIsBufferResidentNV(RegalContext *_context, GLenum target);
  GLboolean  glIsNamedBufferResidentNV(RegalContext *_context, GLuint buffer);
  void  glMakeBufferNonResidentNV(RegalContext *_context, GLenum target);
  void  glMakeBufferResidentNV(RegalContext *_context, GLenum target, GLenum access);
  void  glMakeNamedBufferNonResidentNV(RegalContext *_context, GLuint buffer);
  void  glMakeNamedBufferResidentNV(RegalContext *_context, GLuint buffer, GLenum access);
  void  glProgramUniformui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT v0);
  void  glProgramUniformui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
  void  glUniformui64NV(RegalContext *_context, GLint location, GLuint64EXT v0);
  void  glUniformui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value);

// GL_NV_texture_barrier

  void  glTextureBarrierNV(RegalContext *_context);

// GL_NV_texture_multisample

  void  glTexImage2DMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
  void  glTexImage3DMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
  void  glTextureImage2DMultisampleCoverageNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
  void  glTextureImage2DMultisampleNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
  void  glTextureImage3DMultisampleCoverageNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
  void  glTextureImage3DMultisampleNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);

// GL_NV_transform_feedback

  void  glActiveVaryingNV(RegalContext *_context, GLuint program, const GLchar *name);
  void  glBeginTransformFeedbackNV(RegalContext *_context, GLenum primitiveMode);
  void  glBindBufferBaseNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer);
  void  glBindBufferOffsetNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset);
  void  glBindBufferRangeNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
  void  glEndTransformFeedbackNV(RegalContext *_context);
  void  glGetActiveVaryingNV(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
  void  glGetTransformFeedbackVaryingNV(RegalContext *_context, GLuint program, GLuint index, GLint *location);
  GLint  glGetVaryingLocationNV(RegalContext *_context, GLuint program, const GLchar *name);
  void  glTransformFeedbackAttribsNV(RegalContext *_context, GLuint count, const GLint *attribs, GLenum bufferMode);
  void  glTransformFeedbackVaryingsNV(RegalContext *_context, GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);

// GL_NV_transform_feedback2

  void  glBindTransformFeedbackNV(RegalContext *_context, GLenum target, GLuint id);
  void  glDeleteTransformFeedbacksNV(RegalContext *_context, GLsizei n, const GLuint *ids);
  void  glDrawTransformFeedbackNV(RegalContext *_context, GLenum mode, GLuint name);
  void  glGenTransformFeedbacksNV(RegalContext *_context, GLsizei n, GLuint *ids);
  GLboolean  glIsTransformFeedbackNV(RegalContext *_context, GLuint id);
  void  glPauseTransformFeedbackNV(RegalContext *_context);
  void  glResumeTransformFeedbackNV(RegalContext *_context);

// GL_NV_vertex_array_range

  void  glFlushVertexArrayRangeNV(RegalContext *_context);
  void  glVertexArrayRangeNV(RegalContext *_context, GLsizei size, const GLvoid *pointer);

// GL_NV_vertex_attrib_integer_64bit

  void  glGetVertexAttribLi64vNV(RegalContext *_context, GLuint index, GLenum pname, GLint64EXT *params);
  void  glGetVertexAttribLui64vNV(RegalContext *_context, GLuint index, GLenum pname, GLuint64EXT *params);
  void  glVertexAttribL1i64NV(RegalContext *_context, GLuint index, GLint64EXT x);
  void  glVertexAttribL1i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v);
  void  glVertexAttribL1ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x);
  void  glVertexAttribL1ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v);
  void  glVertexAttribL2i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y);
  void  glVertexAttribL2i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v);
  void  glVertexAttribL2ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y);
  void  glVertexAttribL2ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v);
  void  glVertexAttribL3i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
  void  glVertexAttribL3i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v);
  void  glVertexAttribL3ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
  void  glVertexAttribL3ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v);
  void  glVertexAttribL4i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
  void  glVertexAttribL4i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v);
  void  glVertexAttribL4ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
  void  glVertexAttribL4ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v);
  void  glVertexAttribLFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride);

// GL_NV_vertex_buffer_unified_memory

  void  glBufferAddressRangeNV(RegalContext *_context, GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
  void  glColorFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride);
  void  glEdgeFlagFormatNV(RegalContext *_context, GLsizei stride);
  void  glFogCoordFormatNV(RegalContext *_context, GLenum type, GLsizei stride);
  void  glGetIntegerui64i_vNV(RegalContext *_context, GLenum target, GLuint index, GLuint64EXT *data);
  void  glIndexFormatNV(RegalContext *_context, GLenum type, GLsizei stride);
  void  glNormalFormatNV(RegalContext *_context, GLenum type, GLsizei stride);
  void  glSecondaryColorFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride);
  void  glTexCoordFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride);
  void  glVertexAttribFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
  void  glVertexAttribIFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride);
  void  glVertexFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride);

// GL_NV_vertex_program

  GLboolean  glAreProgramsResidentNV(RegalContext *_context, GLsizei n, const GLuint *programs, GLboolean *residences);
  void  glBindProgramNV(RegalContext *_context, GLenum target, GLuint id);
  void  glDeleteProgramsNV(RegalContext *_context, GLsizei n, const GLuint *programs);
  void  glExecuteProgramNV(RegalContext *_context, GLenum target, GLuint id, const GLfloat *params);
  void  glGenProgramsNV(RegalContext *_context, GLsizei n, GLuint *programs);
  void  glGetProgramParameterdvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLdouble *params);
  void  glGetProgramParameterfvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLfloat *params);
  void  glGetProgramStringNV(RegalContext *_context, GLuint id, GLenum pname, GLubyte *program);
  void  glGetProgramivNV(RegalContext *_context, GLuint id, GLenum pname, GLint *params);
  void  glGetTrackMatrixivNV(RegalContext *_context, GLenum target, GLuint address, GLenum pname, GLint *params);
  void  glGetVertexAttribPointervNV(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer);
  void  glGetVertexAttribdvNV(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params);
  void  glGetVertexAttribfvNV(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params);
  void  glGetVertexAttribivNV(RegalContext *_context, GLuint index, GLenum pname, GLint *params);
  GLboolean  glIsProgramNV(RegalContext *_context, GLuint id);
  void  glLoadProgramNV(RegalContext *_context, GLenum target, GLuint id, GLsizei len, const GLubyte *program);
  void  glProgramParameter4dNV(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glProgramParameter4dvNV(RegalContext *_context, GLenum target, GLuint index, const GLdouble *v);
  void  glProgramParameter4fNV(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glProgramParameter4fvNV(RegalContext *_context, GLenum target, GLuint index, const GLfloat *v);
  void  glProgramParameters4dvNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLdouble *v);
  void  glProgramParameters4fvNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *v);
  void  glRequestResidentProgramsNV(RegalContext *_context, GLsizei n, const GLuint *programs);
  void  glTrackMatrixNV(RegalContext *_context, GLenum target, GLuint address, GLenum matrix, GLenum transform);
  void  glVertexAttrib1dNV(RegalContext *_context, GLuint index, GLdouble x);
  void  glVertexAttrib1dvNV(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib1fNV(RegalContext *_context, GLuint index, GLfloat x);
  void  glVertexAttrib1fvNV(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib1sNV(RegalContext *_context, GLuint index, GLshort x);
  void  glVertexAttrib1svNV(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib2dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y);
  void  glVertexAttrib2dvNV(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib2fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y);
  void  glVertexAttrib2fvNV(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib2sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y);
  void  glVertexAttrib2svNV(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib3dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z);
  void  glVertexAttrib3dvNV(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib3fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z);
  void  glVertexAttrib3fvNV(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib3sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z);
  void  glVertexAttrib3svNV(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib4dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  void  glVertexAttrib4dvNV(RegalContext *_context, GLuint index, const GLdouble *v);
  void  glVertexAttrib4fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glVertexAttrib4fvNV(RegalContext *_context, GLuint index, const GLfloat *v);
  void  glVertexAttrib4sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
  void  glVertexAttrib4svNV(RegalContext *_context, GLuint index, const GLshort *v);
  void  glVertexAttrib4ubNV(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
  void  glVertexAttrib4ubvNV(RegalContext *_context, GLuint index, const GLubyte *v);
  void  glVertexAttribPointerNV(RegalContext *_context, GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glVertexAttribs1dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v);
  void  glVertexAttribs1fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v);
  void  glVertexAttribs1svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v);
  void  glVertexAttribs2dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v);
  void  glVertexAttribs2fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v);
  void  glVertexAttribs2svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v);
  void  glVertexAttribs3dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v);
  void  glVertexAttribs3fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v);
  void  glVertexAttribs3svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v);
  void  glVertexAttribs4dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v);
  void  glVertexAttribs4fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v);
  void  glVertexAttribs4svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v);
  void  glVertexAttribs4ubvNV(RegalContext *_context, GLuint index, GLsizei n, const GLubyte *v);

// GL_NV_video_capture

  void  glBeginVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot);
  void  glBindVideoCaptureStreamBufferNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset);
  void  glBindVideoCaptureStreamTextureNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
  void  glEndVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot);
  void  glGetVideoCaptureStreamdvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
  void  glGetVideoCaptureStreamfvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
  void  glGetVideoCaptureStreamivNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
  void  glGetVideoCaptureivNV(RegalContext *_context, GLuint video_capture_slot, GLenum pname, GLint *params);
  GLenum  glVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
  void  glVideoCaptureStreamParameterdvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
  void  glVideoCaptureStreamParameterfvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
  void  glVideoCaptureStreamParameterivNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);

// GL_OES_blend_equation_separate

  void  glBlendEquationSeparateOES(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha);

// GL_OES_blend_func_separate

  void  glBlendFuncSeparateOES(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

// GL_OES_blend_subtract

  void  glBlendEquationOES(RegalContext *_context, GLenum mode);

// GL_OES_framebuffer_object

  void  glBindFramebufferOES(RegalContext *_context, GLenum target, GLuint framebuffer);
  void  glBindRenderbufferOES(RegalContext *_context, GLenum target, GLuint renderbuffer);
  GLenum  glCheckFramebufferStatusOES(RegalContext *_context, GLenum target);
  void  glDeleteFramebuffersOES(RegalContext *_context, GLsizei n, const GLuint *framebuffers);
  void  glDeleteRenderbuffersOES(RegalContext *_context, GLsizei n, const GLuint *renderbuffers);
  void  glFramebufferRenderbufferOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
  void  glFramebufferTexture2DOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
  void  glGenFramebuffersOES(RegalContext *_context, GLsizei n, GLuint *framebuffers);
  void  glGenRenderbuffersOES(RegalContext *_context, GLsizei n, GLuint *renderbuffers);
  void  glGenerateMipmapOES(RegalContext *_context, GLenum target);
  void  glGetFramebufferAttachmentParameterivOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params);
  void  glGetRenderbufferParameterivOES(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  GLboolean  glIsFramebufferOES(RegalContext *_context, GLuint framebuffer);
  GLboolean  glIsRenderbufferOES(RegalContext *_context, GLuint renderbuffer);
  void  glRenderbufferStorageOES(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height);

// GL_OES_get_program_binary

  void  glGetProgramBinaryOES(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
  void  glProgramBinaryOES(RegalContext *_context, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length);

// GL_OES_mapbuffer

  void  glGetBufferPointervOES(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params);
  GLvoid * glMapBufferOES(RegalContext *_context, GLenum target, GLenum access);
  GLboolean  glUnmapBufferOES(RegalContext *_context, GLenum target);

// GL_OES_matrix_palette

  void  glCurrentPaletteMatrixOES(RegalContext *_context, GLuint index);

// GL_OES_texture_3D

  void  glCompressedTexImage3DOES(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
  void  glCompressedTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
  void  glCopyTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  void  glFramebufferTexture3DOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
  void  glTexImage3DOES(RegalContext *_context, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);

// GL_OES_texture_cube_map

  void  glGetTexGenfvOES(RegalContext *_context, GLenum coord, GLenum pname, GLfloat *params);
  void  glGetTexGenivOES(RegalContext *_context, GLenum coord, GLenum pname, GLint *params);
  void  glGetTexGenxvOES(RegalContext *_context, GLenum coord, GLenum pname, GLfixed *params);
  void  glTexGenfOES(RegalContext *_context, GLenum coord, GLenum pname, GLfloat param);
  void  glTexGenfvOES(RegalContext *_context, GLenum coord, GLenum pname, const GLfloat *params);
  void  glTexGeniOES(RegalContext *_context, GLenum coord, GLenum pname, GLint param);
  void  glTexGenivOES(RegalContext *_context, GLenum coord, GLenum pname, const GLint *params);
  void  glTexGenxOES(RegalContext *_context, GLenum coord, GLenum pname, GLfixed param);
  void  glTexGenxvOES(RegalContext *_context, GLenum coord, GLenum pname, const GLfixed *params);

// GL_OES_vertex_array_object

  void  glBindVertexArrayOES(RegalContext *_context, GLuint array);
  void  glDeleteVertexArraysOES(RegalContext *_context, GLsizei n, const GLuint *arrays);
  void  glGenVertexArraysOES(RegalContext *_context, GLsizei n, GLuint *arrays);
  GLboolean  glIsVertexArrayOES(RegalContext *_context, GLuint array);

// GL_PGI_misc_hints

  void  glHintPGI(RegalContext *_context, GLenum target, GLint mode);

// GL_REGAL_ES1_0_compatibility

  void  glAlphaFuncx(RegalContext *_context, GLenum func, GLclampx ref);
  void  glClearColorx(RegalContext *_context, GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
  void  glClearDepthx(RegalContext *_context, GLclampx depth);
  void  glColor4x(RegalContext *_context, GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
  void  glDepthRangex(RegalContext *_context, GLclampx zNear, GLclampx zFar);
  void  glFogx(RegalContext *_context, GLenum pname, GLfixed param);
  void  glFogxv(RegalContext *_context, GLenum pname, const GLfixed *params);
  void  glFrustumf(RegalContext *_context, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
  void  glFrustumx(RegalContext *_context, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
  void  glLightModelx(RegalContext *_context, GLenum pname, GLfixed param);
  void  glLightModelxv(RegalContext *_context, GLenum pname, const GLfixed *params);
  void  glLightx(RegalContext *_context, GLenum light, GLenum pname, GLfixed param);
  void  glLightxv(RegalContext *_context, GLenum light, GLenum pname, const GLfixed *params);
  void  glLineWidthx(RegalContext *_context, GLfixed width);
  void  glLoadMatrixx(RegalContext *_context, const GLfixed *m);
  void  glMaterialx(RegalContext *_context, GLenum face, GLenum pname, GLfixed param);
  void  glMaterialxv(RegalContext *_context, GLenum face, GLenum pname, const GLfixed *params);
  void  glMultMatrixx(RegalContext *_context, const GLfixed *m);
  void  glMultiTexCoord4x(RegalContext *_context, GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
  void  glNormal3x(RegalContext *_context, GLfixed nx, GLfixed ny, GLfixed nz);
  void  glOrthof(RegalContext *_context, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
  void  glOrthox(RegalContext *_context, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
  void  glPointSizex(RegalContext *_context, GLfixed size);
  void  glPolygonOffsetx(RegalContext *_context, GLfixed factor, GLfixed units);
  void  glRotatex(RegalContext *_context, GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
  void  glSampleCoveragex(RegalContext *_context, GLclampx value, GLboolean invert);
  void  glScalex(RegalContext *_context, GLfixed x, GLfixed y, GLfixed z);
  void  glTexEnvx(RegalContext *_context, GLenum target, GLenum pname, GLfixed param);
  void  glTexEnvxv(RegalContext *_context, GLenum target, GLenum pname, const GLfixed *params);
  void  glTexParameterx(RegalContext *_context, GLenum target, GLenum pname, GLfixed param);
  void  glTranslatex(RegalContext *_context, GLfixed x, GLfixed y, GLfixed z);

// GL_REGAL_ES1_1_compatibility

  void  glClipPlanef(RegalContext *_context, GLenum plane, const GLfloat *equation);
  void  glClipPlanex(RegalContext *_context, GLenum plane, const GLfixed *equation);
  void  glGetClipPlanef(RegalContext *_context, GLenum pname, GLfloat *eqn);
  void  glGetClipPlanex(RegalContext *_context, GLenum pname, GLfixed *eqn);
  void  glGetFixedv(RegalContext *_context, GLenum pname, GLfixed *params);
  void  glGetLightxv(RegalContext *_context, GLenum light, GLenum pname, GLfixed *params);
  void  glGetMaterialxv(RegalContext *_context, GLenum face, GLenum pname, GLfixed *params);
  void  glGetTexEnvxv(RegalContext *_context, GLenum env, GLenum pname, GLfixed *params);
  void  glGetTexParameterxv(RegalContext *_context, GLenum target, GLenum pname, GLfixed *params);
  void  glPointParameterx(RegalContext *_context, GLenum pname, GLfixed param);
  void  glPointParameterxv(RegalContext *_context, GLenum pname, const GLfixed *params);
  void  glPointSizePointerOES(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer);
  void  glTexParameterxv(RegalContext *_context, GLenum target, GLenum pname, const GLfixed *params);

// GL_SGIS_detail_texture

  void  glDetailTexFuncSGIS(RegalContext *_context, GLenum target, GLsizei n, const GLfloat *points);
  void  glGetDetailTexFuncSGIS(RegalContext *_context, GLenum target, GLfloat *points);

// GL_SGIS_fog_function

  void  glFogFuncSGIS(RegalContext *_context, GLsizei n, const GLfloat *points);
  void  glGetFogFuncSGIS(RegalContext *_context, GLfloat *points);

// GL_SGIS_multisample

  void  glSampleMaskSGIS(RegalContext *_context, GLclampf value, GLboolean invert);
  void  glSamplePatternSGIS(RegalContext *_context, GLenum pattern);

// GL_SGIS_pixel_texture

  void  glGetPixelTexGenParameterfvSGIS(RegalContext *_context, GLenum pname, GLfloat *params);
  void  glGetPixelTexGenParameterivSGIS(RegalContext *_context, GLenum pname, GLint *params);
  void  glPixelTexGenParameterfSGIS(RegalContext *_context, GLenum pname, GLfloat param);
  void  glPixelTexGenParameterfvSGIS(RegalContext *_context, GLenum pname, const GLfloat *params);
  void  glPixelTexGenParameteriSGIS(RegalContext *_context, GLenum pname, GLint param);
  void  glPixelTexGenParameterivSGIS(RegalContext *_context, GLenum pname, const GLint *params);

// GL_SGIS_point_parameters

  void  glPointParameterfSGIS(RegalContext *_context, GLenum pname, GLfloat param);
  void  glPointParameterfvSGIS(RegalContext *_context, GLenum pname, const GLfloat *params);

// GL_SGIS_sharpen_texture

  void  glGetSharpenTexFuncSGIS(RegalContext *_context, GLenum target, GLfloat *points);
  void  glSharpenTexFuncSGIS(RegalContext *_context, GLenum target, GLsizei n, const GLfloat *points);

// GL_SGIS_texture4D

  void  glTexImage4DSGIS(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
  void  glTexSubImage4DSGIS(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);

// GL_SGIS_texture_color_mask

  void  glTextureColorMaskSGIS(RegalContext *_context, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);

// GL_SGIS_texture_filter4

  void  glGetTexFilterFuncSGIS(RegalContext *_context, GLenum target, GLenum filter, GLfloat *weights);
  void  glTexFilterFuncSGIS(RegalContext *_context, GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);

// GL_SGIX_async

  void  glAsyncMarkerSGIX(RegalContext *_context, GLuint marker);
  void  glDeleteAsyncMarkersSGIX(RegalContext *_context, GLuint marker, GLsizei range);
  GLint  glFinishAsyncSGIX(RegalContext *_context, GLuint *markerp);
  GLuint  glGenAsyncMarkersSGIX(RegalContext *_context, GLsizei range);
  GLboolean  glIsAsyncMarkerSGIX(RegalContext *_context, GLuint marker);
  GLint  glPollAsyncSGIX(RegalContext *_context, GLuint *markerp);

// GL_SGIX_flush_raster

  void  glFlushRasterSGIX(RegalContext *_context);

// GL_SGIX_fragment_lighting

  void  glFragmentColorMaterialSGIX(RegalContext *_context, GLenum face, GLenum mode);
  void  glFragmentLightModelfSGIX(RegalContext *_context, GLenum pname, GLfloat param);
  void  glFragmentLightModelfvSGIX(RegalContext *_context, GLenum pname, const GLfloat *params);
  void  glFragmentLightModeliSGIX(RegalContext *_context, GLenum pname, GLint param);
  void  glFragmentLightModelivSGIX(RegalContext *_context, GLenum pname, const GLint *params);
  void  glFragmentLightfSGIX(RegalContext *_context, GLenum light, GLenum pname, GLfloat param);
  void  glFragmentLightfvSGIX(RegalContext *_context, GLenum light, GLenum pname, const GLfloat *params);
  void  glFragmentLightiSGIX(RegalContext *_context, GLenum light, GLenum pname, GLint param);
  void  glFragmentLightivSGIX(RegalContext *_context, GLenum light, GLenum pname, const GLint *params);
  void  glFragmentMaterialfSGIX(RegalContext *_context, GLenum face, GLenum pname, GLfloat param);
  void  glFragmentMaterialfvSGIX(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params);
  void  glFragmentMaterialiSGIX(RegalContext *_context, GLenum face, GLenum pname, GLint param);
  void  glFragmentMaterialivSGIX(RegalContext *_context, GLenum face, GLenum pname, const GLint *params);
  void  glGetFragmentLightfvSGIX(RegalContext *_context, GLenum light, GLenum pname, GLfloat *params);
  void  glGetFragmentLightivSGIX(RegalContext *_context, GLenum light, GLenum pname, GLint *params);
  void  glGetFragmentMaterialfvSGIX(RegalContext *_context, GLenum face, GLenum pname, GLfloat *params);
  void  glGetFragmentMaterialivSGIX(RegalContext *_context, GLenum face, GLenum pname, GLint *params);
  void  glLightEnviSGIX(RegalContext *_context, GLenum pname, GLint param);

// GL_SGIX_framezoom

  void  glFrameZoomSGIX(RegalContext *_context, GLint factor);

// GL_SGIX_igloo_interface

  void  glIglooInterfaceSGIX(RegalContext *_context, GLenum pname, const GLvoid *params);

// GL_SGIX_instruments

  GLint  glGetInstrumentsSGIX(RegalContext *_context);
  void  glInstrumentsBufferSGIX(RegalContext *_context, GLsizei size, GLint *buffer);
  GLint  glPollInstrumentsSGIX(RegalContext *_context, GLint *marker_p);
  void  glReadInstrumentsSGIX(RegalContext *_context, GLint marker);
  void  glStartInstrumentsSGIX(RegalContext *_context);
  void  glStopInstrumentsSGIX(RegalContext *_context, GLint marker);

// GL_SGIX_list_priority

  void  glGetListParameterfvSGIX(RegalContext *_context, GLuint list, GLenum pname, GLfloat *params);
  void  glGetListParameterivSGIX(RegalContext *_context, GLuint list, GLenum pname, GLint *params);
  void  glListParameterfSGIX(RegalContext *_context, GLuint list, GLenum pname, GLfloat param);
  void  glListParameterfvSGIX(RegalContext *_context, GLuint list, GLenum pname, const GLfloat *params);
  void  glListParameteriSGIX(RegalContext *_context, GLuint list, GLenum pname, GLint param);
  void  glListParameterivSGIX(RegalContext *_context, GLuint list, GLenum pname, const GLint *params);

// GL_SGIX_pixel_texture

  void  glPixelTexGenSGIX(RegalContext *_context, GLenum mode);

// GL_SGIX_polynomial_ffd

  void  glDeformSGIX(RegalContext *_context, GLbitfield mask);
  void  glDeformationMap3dSGIX(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
  void  glDeformationMap3fSGIX(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
  void  glLoadIdentityDeformationMapSGIX(RegalContext *_context, GLbitfield mask);

// GL_SGIX_reference_plane

  void  glReferencePlaneSGIX(RegalContext *_context, const GLdouble *equation);

// GL_SGIX_sprite

  void  glSpriteParameterfSGIX(RegalContext *_context, GLenum pname, GLfloat param);
  void  glSpriteParameterfvSGIX(RegalContext *_context, GLenum pname, const GLfloat *params);
  void  glSpriteParameteriSGIX(RegalContext *_context, GLenum pname, GLint param);
  void  glSpriteParameterivSGIX(RegalContext *_context, GLenum pname, const GLint *params);

// GL_SGIX_tag_sample_buffer

  void  glTagSampleBufferSGIX(RegalContext *_context);

// GL_SGI_color_table

  void  glColorTableParameterfvSGI(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params);
  void  glColorTableParameterivSGI(RegalContext *_context, GLenum target, GLenum pname, const GLint *params);
  void  glColorTableSGI(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
  void  glCopyColorTableSGI(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
  void  glGetColorTableParameterfvSGI(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params);
  void  glGetColorTableParameterivSGI(RegalContext *_context, GLenum target, GLenum pname, GLint *params);
  void  glGetColorTableSGI(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *table);

// GL_SUNX_constant_data

  void  glFinishTextureSUNX(RegalContext *_context);

// GL_SUN_global_alpha

  void  glGlobalAlphaFactorbSUN(RegalContext *_context, GLbyte factor);
  void  glGlobalAlphaFactordSUN(RegalContext *_context, GLdouble factor);
  void  glGlobalAlphaFactorfSUN(RegalContext *_context, GLfloat factor);
  void  glGlobalAlphaFactoriSUN(RegalContext *_context, GLint factor);
  void  glGlobalAlphaFactorsSUN(RegalContext *_context, GLshort factor);
  void  glGlobalAlphaFactorubSUN(RegalContext *_context, GLubyte factor);
  void  glGlobalAlphaFactoruiSUN(RegalContext *_context, GLuint factor);
  void  glGlobalAlphaFactorusSUN(RegalContext *_context, GLushort factor);

// GL_SUN_mesh_array

  void  glDrawMeshArraysSUN(RegalContext *_context, GLenum mode, GLint first, GLsizei count, GLsizei width);

// GL_SUN_triangle_list

  void  glReplacementCodePointerSUN(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid **pointer);
  void  glReplacementCodeubSUN(RegalContext *_context, GLubyte code);
  void  glReplacementCodeubvSUN(RegalContext *_context, const GLubyte *code);
  void  glReplacementCodeuiSUN(RegalContext *_context, GLuint code);
  void  glReplacementCodeuivSUN(RegalContext *_context, const GLuint *code);
  void  glReplacementCodeusSUN(RegalContext *_context, GLushort code);
  void  glReplacementCodeusvSUN(RegalContext *_context, const GLushort *code);

// GL_SUN_vertex

  void  glColor3fVertex3fSUN(RegalContext *_context, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
  void  glColor3fVertex3fvSUN(RegalContext *_context, const GLfloat *c, const GLfloat *v);
  void  glColor4fNormal3fVertex3fSUN(RegalContext *_context, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  void  glColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  void  glColor4ubVertex2fSUN(RegalContext *_context, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
  void  glColor4ubVertex2fvSUN(RegalContext *_context, const GLubyte *c, const GLfloat *v);
  void  glColor4ubVertex3fSUN(RegalContext *_context, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
  void  glColor4ubVertex3fvSUN(RegalContext *_context, const GLubyte *c, const GLfloat *v);
  void  glNormal3fVertex3fSUN(RegalContext *_context, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  void  glNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *n, const GLfloat *v);
  void  glReplacementCodeuiColor3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
  void  glReplacementCodeuiColor3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *c, const GLfloat *v);
  void  glReplacementCodeuiColor4fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  void  glReplacementCodeuiColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  void  glReplacementCodeuiColor4ubVertex3fSUN(RegalContext *_context, GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
  void  glReplacementCodeuiColor4ubVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLubyte *c, const GLfloat *v);
  void  glReplacementCodeuiNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  void  glReplacementCodeuiNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *n, const GLfloat *v);
  void  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  void  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  void  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  void  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
  void  glReplacementCodeuiTexCoord2fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
  void  glReplacementCodeuiTexCoord2fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *v);
  void  glReplacementCodeuiVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat x, GLfloat y, GLfloat z);
  void  glReplacementCodeuiVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *v);
  void  glTexCoord2fColor3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
  void  glTexCoord2fColor3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *v);
  void  glTexCoord2fColor4fNormal3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  void  glTexCoord2fColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  void  glTexCoord2fColor4ubVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
  void  glTexCoord2fColor4ubVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLubyte *c, const GLfloat *v);
  void  glTexCoord2fNormal3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  void  glTexCoord2fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
  void  glTexCoord2fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
  void  glTexCoord2fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *v);
  void  glTexCoord4fColor4fNormal3fVertex4fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glTexCoord4fColor4fNormal3fVertex4fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  void  glTexCoord4fVertex4fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  void  glTexCoord4fVertex4fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *v);

// GL_WIN_swap_hint

  void  glAddSwapHintRectWIN(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height);

#if REGAL_SYS_WGL

// WGL_3DL_stereo_control

  BOOL  wglSetStereoEmitterState3DL(RegalContext *_context, HDC hDC, UINT uState);

// WGL_AMD_gpu_association

  VOID  wglBlitContextFramebufferAMD(RegalContext *_context, HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
  HGLRC  wglCreateAssociatedContextAMD(RegalContext *_context, UINT id);
  HGLRC  wglCreateAssociatedContextAttribsAMD(RegalContext *_context, UINT id, HGLRC hShareContext, const int *attribList);
  BOOL  wglDeleteAssociatedContextAMD(RegalContext *_context, HGLRC hglrc);
  UINT  wglGetContextGPUIDAMD(RegalContext *_context, HGLRC hglrc);
  HGLRC  wglGetCurrentAssociatedContextAMD(RegalContext *_context);
  UINT  wglGetGPUIDsAMD(RegalContext *_context, UINT maxCount, UINT *ids);
  INT  wglGetGPUInfoAMD(RegalContext *_context, UINT id, int property, GLenum dataType, UINT size, void *data);
  BOOL  wglMakeAssociatedContextCurrentAMD(RegalContext *_context, HGLRC hglrc);

// WGL_ARB_buffer_region

  HANDLE  wglCreateBufferRegionARB(RegalContext *_context, HDC hDC, int iLayerPlane, UINT uType);
  VOID  wglDeleteBufferRegionARB(RegalContext *_context, HANDLE hRegion);
  BOOL  wglRestoreBufferRegionARB(RegalContext *_context, HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
  BOOL  wglSaveBufferRegionARB(RegalContext *_context, HANDLE hRegion, int x, int y, int width, int height);

// WGL_ARB_create_context

  HGLRC  wglCreateContextAttribsARB(RegalContext *_context, HDC hDC, HGLRC hShareContext, const int *piAttribList);

// WGL_ARB_extensions_string

  const char * wglGetExtensionsStringARB(RegalContext *_context, HDC hDC);

// WGL_ARB_make_current_read

  HDC  wglGetCurrentReadDCARB(RegalContext *_context);
  BOOL  wglMakeContextCurrentARB(RegalContext *_context, HDC hDrawDC, HDC hReadDC, HGLRC hglrc);

// WGL_ARB_pbuffer

  HPBUFFERARB  wglCreatePbufferARB(RegalContext *_context, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
  BOOL  wglDestroyPbufferARB(RegalContext *_context, HPBUFFERARB hPbuffer);
  HDC  wglGetPbufferDCARB(RegalContext *_context, HPBUFFERARB hPbuffer);
  BOOL  wglQueryPbufferARB(RegalContext *_context, HPBUFFERARB hPbuffer, int iAttribute, int *piValue);
  int  wglReleasePbufferDCARB(RegalContext *_context, HPBUFFERARB hPbuffer, HDC hDC);

// WGL_ARB_render_texture

  BOOL  wglBindTexImageARB(RegalContext *_context, HPBUFFERARB hPbuffer, int iBuffer);
  BOOL  wglReleaseTexImageARB(RegalContext *_context, HPBUFFERARB hPbuffer, int iBuffer);
  BOOL  wglSetPbufferAttribARB(RegalContext *_context, HPBUFFERARB hPbuffer, const int *piAttribList);

// WGL_EXT_display_color_table

  GLboolean  wglBindDisplayColorTableEXT(RegalContext *_context, GLushort id);
  GLboolean  wglCreateDisplayColorTableEXT(RegalContext *_context, GLushort id);
  VOID  wglDestroyDisplayColorTableEXT(RegalContext *_context, GLushort id);
  GLboolean  wglLoadDisplayColorTableEXT(RegalContext *_context, const GLushort *table, GLuint length);

// WGL_EXT_extensions_string

  const char * wglGetExtensionsStringEXT(RegalContext *_context);

// WGL_EXT_make_current_read

  HDC  wglGetCurrentReadDCEXT(RegalContext *_context);
  BOOL  wglMakeContextCurrentEXT(RegalContext *_context, HDC hDrawDC, HDC hReadDC, HGLRC hglrc);

// WGL_EXT_pbuffer

  HPBUFFEREXT  wglCreatePbufferEXT(RegalContext *_context, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
  BOOL  wglDestroyPbufferEXT(RegalContext *_context, HPBUFFEREXT hPbuffer);
  HDC  wglGetPbufferDCEXT(RegalContext *_context, HPBUFFEREXT hPbuffer);
  BOOL  wglQueryPbufferEXT(RegalContext *_context, HPBUFFEREXT hPbuffer, int iAttribute, int *piValue);
  int  wglReleasePbufferDCEXT(RegalContext *_context, HPBUFFEREXT hPbuffer, HDC hDC);

// WGL_EXT_pixel_format

  BOOL  wglChoosePixelFormatEXT(RegalContext *_context, HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);

// WGL_EXT_swap_control

  int  wglGetSwapIntervalEXT(RegalContext *_context);
  BOOL  wglSwapIntervalEXT(RegalContext *_context, int interval);

// WGL_GDI

  int  wglChoosePixelFormat(RegalContext *_context, HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd);
  int  wglDescribePixelFormat(RegalContext *_context, HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
  int  wglGetPixelFormat(RegalContext *_context, HDC hDC);
  BOOL  wglSetPixelFormat(RegalContext *_context, HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd);
  BOOL  wglSwapBuffers(RegalContext *_context, HDC hDC);

// WGL_I3D_digital_video_control

  BOOL  wglGetDigitalVideoParametersI3D(RegalContext *_context, HDC hDC, int iAttribute, int *piValue);
  BOOL  wglSetDigitalVideoParametersI3D(RegalContext *_context, HDC hDC, int iAttribute, const int *piValue);

// WGL_I3D_gamma

  BOOL  wglGetGammaTableI3D(RegalContext *_context, HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue);
  BOOL  wglGetGammaTableParametersI3D(RegalContext *_context, HDC hDC, int iAttribute, int *piValue);
  BOOL  wglSetGammaTableI3D(RegalContext *_context, HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue);
  BOOL  wglSetGammaTableParametersI3D(RegalContext *_context, HDC hDC, int iAttribute, const int *piValue);

// WGL_I3D_genlock

  BOOL  wglDisableGenlockI3D(RegalContext *_context, HDC hDC);
  BOOL  wglEnableGenlockI3D(RegalContext *_context, HDC hDC);
  BOOL  wglGenlockSampleRateI3D(RegalContext *_context, HDC hDC, UINT uRate);
  BOOL  wglGenlockSourceDelayI3D(RegalContext *_context, HDC hDC, UINT uDelay);
  BOOL  wglGenlockSourceEdgeI3D(RegalContext *_context, HDC hDC, UINT uEdge);
  BOOL  wglGenlockSourceI3D(RegalContext *_context, HDC hDC, UINT uSource);
  BOOL  wglGetGenlockSampleRateI3D(RegalContext *_context, HDC hDC, UINT *uRate);
  BOOL  wglGetGenlockSourceDelayI3D(RegalContext *_context, HDC hDC, UINT *uDelay);
  BOOL  wglGetGenlockSourceEdgeI3D(RegalContext *_context, HDC hDC, UINT *uEdge);
  BOOL  wglGetGenlockSourceI3D(RegalContext *_context, HDC hDC, UINT *uSource);
  BOOL  wglIsEnabledGenlockI3D(RegalContext *_context, HDC hDC, BOOL *pFlag);
  BOOL  wglQueryGenlockMaxSourceDelayI3D(RegalContext *_context, HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay);

// WGL_I3D_image_buffer

  BOOL  wglAssociateImageBufferEventsI3D(RegalContext *_context, HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count);
  LPVOID  wglCreateImageBufferI3D(RegalContext *_context, HDC hDC, DWORD dwSize, UINT uFlags);
  BOOL  wglDestroyImageBufferI3D(RegalContext *_context, HDC hDC, LPVOID pAddress);
  BOOL  wglReleaseImageBufferEventsI3D(RegalContext *_context, HDC hDC, const LPVOID *pAddress, UINT count);

// WGL_I3D_swap_frame_lock

  BOOL  wglDisableFrameLockI3D(RegalContext *_context);
  BOOL  wglEnableFrameLockI3D(RegalContext *_context);
  BOOL  wglIsEnabledFrameLockI3D(RegalContext *_context, BOOL *pFlag);
  BOOL  wglQueryFrameLockMasterI3D(RegalContext *_context, BOOL *pFlag);

// WGL_I3D_swap_frame_usage

  BOOL  wglBeginFrameTrackingI3D(RegalContext *_context);
  BOOL  wglEndFrameTrackingI3D(RegalContext *_context);
  BOOL  wglGetFrameUsageI3D(RegalContext *_context, float *pUsage);
  BOOL  wglQueryFrameTrackingI3D(RegalContext *_context, DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);

// WGL_NV_DX_interop

  BOOL  wglDXCloseDeviceNV(RegalContext *_context, HANDLE hDevice);
  BOOL  wglDXLockObjectsNV(RegalContext *_context, HANDLE hDevice, GLint count, HANDLE *hObjects);
  BOOL  wglDXObjectAccessNV(RegalContext *_context, HANDLE hObject, GLenum access);
  HANDLE  wglDXOpenDeviceNV(RegalContext *_context, GLvoid *dxDevice);
  HANDLE  wglDXRegisterObjectNV(RegalContext *_context, HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access);
  BOOL  wglDXSetResourceShareHandleNV(RegalContext *_context, GLvoid *dxObject, HANDLE shareHandle);
  BOOL  wglDXUnlockObjectsNV(RegalContext *_context, HANDLE hDevice, GLint count, HANDLE *hObjects);
  BOOL  wglDXUnregisterObjectNV(RegalContext *_context, HANDLE hDevice, HANDLE hObject);

// WGL_NV_copy_image

  BOOL  wglCopyImageSubDataNV(RegalContext *_context, HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);

// WGL_NV_gpu_affinity

  HDC  wglCreateAffinityDCNV(RegalContext *_context, const HGPUNV *phGpuList);
  BOOL  wglDeleteDCNV(RegalContext *_context, HDC hAffinityDC);
  BOOL  wglEnumGpusFromAffinityDCNV(RegalContext *_context, HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
  BOOL  wglEnumGpusNV(RegalContext *_context, UINT iGpuIndex, HGPUNV *phGpu);

// WGL_NV_present_video

  BOOL  wglBindVideoDeviceNV(RegalContext *_context, HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
  int  wglEnumerateVideoDevicesNV(RegalContext *_context, HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList);
  BOOL  wglQueryCurrentContextNV(RegalContext *_context, int iAttribute, int *piValue);

// WGL_NV_swap_group

  BOOL  wglBindSwapBarrierNV(RegalContext *_context, GLuint group, GLuint barrier);
  BOOL  wglJoinSwapGroupNV(RegalContext *_context, HDC hDC, GLuint group);
  BOOL  wglQueryFrameCountNV(RegalContext *_context, HDC hDC, GLuint *count);
  BOOL  wglQueryMaxSwapGroupsNV(RegalContext *_context, HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
  BOOL  wglQuerySwapGroupNV(RegalContext *_context, HDC hDC, GLuint *group, GLuint *barrier);
  BOOL  wglResetFrameCountNV(RegalContext *_context, HDC hDC);

// WGL_NV_vertex_array_range

  void * wglAllocateMemoryNV(RegalContext *_context, GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
  void  wglFreeMemoryNV(RegalContext *_context, void *pointer);

// WGL_NV_video_capture

  BOOL  wglBindVideoCaptureDeviceNV(RegalContext *_context, UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
  UINT  wglEnumerateVideoCaptureDevicesNV(RegalContext *_context, HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList);
  BOOL  wglLockVideoCaptureDeviceNV(RegalContext *_context, HDC hDC, HVIDEOINPUTDEVICENV hDevice);
  BOOL  wglQueryVideoCaptureDeviceNV(RegalContext *_context, HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
  BOOL  wglReleaseVideoCaptureDeviceNV(RegalContext *_context, HDC hDC, HVIDEOINPUTDEVICENV hDevice);

// WGL_NV_video_output

  BOOL  wglBindVideoImageNV(RegalContext *_context, HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
  BOOL  wglGetVideoDeviceNV(RegalContext *_context, HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
  BOOL  wglGetVideoInfoNV(RegalContext *_context, HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
  BOOL  wglReleaseVideoDeviceNV(RegalContext *_context, HPVIDEODEV hVideoDevice);
  BOOL  wglReleaseVideoImageNV(RegalContext *_context, HPBUFFERARB hPbuffer, int iVideoBuffer);
  BOOL  wglSendPbufferToVideoNV(RegalContext *_context, HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);

// WGL_OML_sync_control

  BOOL  wglGetMscRateOML(RegalContext *_context, HDC hDC, INT32 *numerator, INT32 *denominator);
  BOOL  wglGetSyncValuesOML(RegalContext *_context, HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc);
  INT64  wglSwapBuffersMscOML(RegalContext *_context, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder);
  INT64  wglSwapLayerBuffersMscOML(RegalContext *_context, HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
  BOOL  wglWaitForMscOML(RegalContext *_context, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc);
  BOOL  wglWaitForSbcOML(RegalContext *_context, HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc);

// WGL_core

  BOOL  wglCopyContext(RegalContext *_context, HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask);
  HGLRC  wglCreateContext(RegalContext *_context, HDC hDC);
  HGLRC  wglCreateLayerContext(RegalContext *_context, HDC hDC, int iLayerPlane);
  BOOL  wglDeleteContext(RegalContext *_context, HGLRC hglrc);
  BOOL  wglDescribeLayerPlane(RegalContext *_context, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd);
  HGLRC  wglGetCurrentContext(RegalContext *_context);
  HDC  wglGetCurrentDC(RegalContext *_context);
  int  wglGetLayerPaletteEntries(RegalContext *_context, HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr);
  BOOL  wglMakeCurrent(RegalContext *_context, HDC hDC, HGLRC hglrc);
  BOOL  wglRealizeLayerPalette(RegalContext *_context, HDC hDC, int iLayerPlane, BOOL bRealize);
  int  wglSetLayerPaletteEntries(RegalContext *_context, HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr);
  BOOL  wglShareLists(RegalContext *_context, HGLRC hglrcShare, HGLRC hglrcSrc);
  BOOL  wglSwapLayerBuffers(RegalContext *_context, HDC hDC, UINT fuPlanes);
  DWORD  wglSwapMultipleBuffers(RegalContext *_context, UINT n, const WGLSWAP *ps);
  BOOL  wglUseFontBitmapsA(RegalContext *_context, HDC hDC, DWORD first, DWORD count, DWORD listBase);
  BOOL  wglUseFontBitmapsW(RegalContext *_context, HDC hDC, DWORD first, DWORD count, DWORD listBase);
  BOOL  wglUseFontOutlinesA(RegalContext *_context, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf);
  BOOL  wglUseFontOutlinesW(RegalContext *_context, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf);
#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX && REGAL_SYS_X11

// GLX_VERSION_1_0

  XVisualInfo * glXChooseVisual(RegalContext *_context, Display *dpy, int screen, int *attribList);
  void  glXCopyContext(RegalContext *_context, Display *dpy, GLXContext src, GLXContext dst, unsigned long mask);
  GLXContext  glXCreateContext(RegalContext *_context, Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct);
  GLXPixmap  glXCreateGLXPixmap(RegalContext *_context, Display *dpy, XVisualInfo *vis, Pixmap pixmap);
  void  glXDestroyContext(RegalContext *_context, Display *dpy, GLXContext ctx);
  void  glXDestroyGLXPixmap(RegalContext *_context, Display *dpy, GLXPixmap pix);
  int  glXGetConfig(RegalContext *_context, Display *dpy, XVisualInfo *vis, int attrib, int *value);
  GLXContext  glXGetCurrentContext(RegalContext *_context);
  GLXDrawable  glXGetCurrentDrawable(RegalContext *_context);
  Bool  glXIsDirect(RegalContext *_context, Display *dpy, GLXContext ctx);
  Bool  glXMakeCurrent(RegalContext *_context, Display *dpy, GLXDrawable drawable, GLXContext ctx);
  Bool  glXQueryExtension(RegalContext *_context, Display *dpy, int *errorBase, int *eventBase);
  Bool  glXQueryVersion(RegalContext *_context, Display *dpy, int *major, int *minor);
  void  glXSwapBuffers(RegalContext *_context, Display *dpy, GLXDrawable drawable);
  void  glXUseXFont(RegalContext *_context, Font font, int first, int count, int listBase);
  void  glXWaitGL(RegalContext *_context);
  void  glXWaitX(RegalContext *_context);

// GLX_VERSION_1_1

  const char * glXGetClientString(RegalContext *_context, Display *dpy, int name);
  const char * glXQueryExtensionsString(RegalContext *_context, Display *dpy, int screen);
  const char * glXQueryServerString(RegalContext *_context, Display *dpy, int screen, int name);

// GLX_VERSION_1_2

  Display * glXGetCurrentDisplay(RegalContext *_context);

// GLX_VERSION_1_3

  GLXFBConfig * glXChooseFBConfig(RegalContext *_context, Display *dpy, int screen, const int *attrib_list, int *nelements);
  GLXContext  glXCreateNewContext(RegalContext *_context, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
  GLXPbuffer  glXCreatePbuffer(RegalContext *_context, Display *dpy, GLXFBConfig config, const int *attrib_list);
  GLXPixmap  glXCreatePixmap(RegalContext *_context, Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
  GLXWindow  glXCreateWindow(RegalContext *_context, Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
  void  glXDestroyPbuffer(RegalContext *_context, Display *dpy, GLXPbuffer pbuf);
  void  glXDestroyPixmap(RegalContext *_context, Display *dpy, GLXPixmap pixmap);
  void  glXDestroyWindow(RegalContext *_context, Display *dpy, GLXWindow win);
  GLXDrawable  glXGetCurrentReadDrawable(RegalContext *_context);
  int  glXGetFBConfigAttrib(RegalContext *_context, Display *dpy, GLXFBConfig config, int attribute, int *value);
  GLXFBConfig * glXGetFBConfigs(RegalContext *_context, Display *dpy, int screen, int *nelements);
  void  glXGetSelectedEvent(RegalContext *_context, Display *dpy, GLXDrawable draw, unsigned long *event_mask);
  XVisualInfo * glXGetVisualFromFBConfig(RegalContext *_context, Display *dpy, GLXFBConfig config);
  Bool  glXMakeContextCurrent(RegalContext *_context, Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
  int  glXQueryContext(RegalContext *_context, Display *dpy, GLXContext ctx, int attribute, int *value);
  void  glXQueryDrawable(RegalContext *_context, Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
  void  glXSelectEvent(RegalContext *_context, Display *dpy, GLXDrawable draw, unsigned long event_mask);

// GLX_VERSION_1_4

  __GLXextFuncPtr  glXGetProcAddress(RegalContext *_context, const GLubyte *procName);

// GLX_ARB_create_context

  GLXContext  glXCreateContextAttribsARB(RegalContext *_context, Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list);

// GLX_ARB_get_proc_address

  __GLXextFuncPtr  glXGetProcAddressARB(RegalContext *_context, const GLubyte *procName);

// GLX_EXT_import_context

  void  glXFreeContextEXT(RegalContext *_context, Display *dpy, GLXContext context);
  GLXContextID  glXGetContextIDEXT(RegalContext *_context, const GLXContext context);
  GLXContext  glXImportContextEXT(RegalContext *_context, Display *dpy, GLXContextID contextID);
  int  glXQueryContextInfoEXT(RegalContext *_context, Display *dpy, GLXContext context, int attribute, int *value);

// GLX_EXT_swap_control

  void  glXSwapIntervalEXT(RegalContext *_context, Display *dpy, GLXDrawable drawable, int interval);

// GLX_EXT_texture_from_pixmap

  void  glXBindTexImageEXT(RegalContext *_context, Display *display, GLXDrawable drawable, int buffer, const int *attrib_list);
  void  glXReleaseTexImageEXT(RegalContext *_context, Display *display, GLXDrawable drawable, int buffer);

// GLX_MESA_agp_offset

  unsigned int  glXGetAGPOffsetMESA(RegalContext *_context, const void *pointer);

// GLX_MESA_copy_sub_buffer

  void  glXCopySubBufferMESA(RegalContext *_context, Display *dpy, GLXDrawable drawable, int x, int y, int width, int height);

// GLX_MESA_pixmap_colormap

  GLXPixmap  glXCreateGLXPixmapMESA(RegalContext *_context, Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);

// GLX_MESA_release_buffers

  Bool  glXReleaseBuffersMESA(RegalContext *_context, Display *dpy, GLXDrawable d);

// GLX_MESA_set_3dfx_mode

  GLboolean  glXSet3DfxModeMESA(RegalContext *_context, GLint mode);

// GLX_MESA_swap_control

  int  glXGetSwapIntervalMESA(RegalContext *_context);
  int  glXSwapIntervalMESA(RegalContext *_context, unsigned int interval);

// GLX_NV_copy_image

  void  glXCopyImageSubDataNV(RegalContext *_context, Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);

// GLX_NV_present_video

  int  glXBindVideoDeviceNV(RegalContext *_context, Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list);
  unsigned int * glXEnumerateVideoDevicesNV(RegalContext *_context, Display *dpy, int screen, int *nelements);

// GLX_NV_swap_group

  Bool  glXBindSwapBarrierNV(RegalContext *_context, Display *dpy, GLuint group, GLuint barrier);
  Bool  glXJoinSwapGroupNV(RegalContext *_context, Display *dpy, GLXDrawable drawable, GLuint group);
  Bool  glXQueryFrameCountNV(RegalContext *_context, Display *dpy, int screen, GLuint *count);
  Bool  glXQueryMaxSwapGroupsNV(RegalContext *_context, Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers);
  Bool  glXQuerySwapGroupNV(RegalContext *_context, Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier);
  Bool  glXResetFrameCountNV(RegalContext *_context, Display *dpy, int screen);

// GLX_NV_vertex_array_range

  void * glXAllocateMemoryNV(RegalContext *_context, GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority);
  void  glXFreeMemoryNV(RegalContext *_context, void *pointer);

// GLX_NV_video_capture

  int  glXBindVideoCaptureDeviceNV(RegalContext *_context, Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
  GLXVideoCaptureDeviceNV * glXEnumerateVideoCaptureDevicesNV(RegalContext *_context, Display *dpy, int screen, int *nelements);
  void  glXLockVideoCaptureDeviceNV(RegalContext *_context, Display *dpy, GLXVideoCaptureDeviceNV device);
  int  glXQueryVideoCaptureDeviceNV(RegalContext *_context, Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value);
  void  glXReleaseVideoCaptureDeviceNV(RegalContext *_context, Display *dpy, GLXVideoCaptureDeviceNV device);

// GLX_NV_video_output

  int  glXBindVideoImageNV(RegalContext *_context, Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
  int  glXGetVideoDeviceNV(RegalContext *_context, Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
  int  glXGetVideoInfoNV(RegalContext *_context, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
  int  glXReleaseVideoDeviceNV(RegalContext *_context, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice);
  int  glXReleaseVideoImageNV(RegalContext *_context, Display *dpy, GLXPbuffer pbuf);
  int  glXSendPbufferToVideoNV(RegalContext *_context, Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock);

// GLX_OML_sync_control

  Bool  glXGetMscRateOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator);
  Bool  glXGetSyncValuesOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc);
  int64_t  glXSwapBuffersMscOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
  Bool  glXWaitForMscOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc);
  Bool  glXWaitForSbcOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc);

// GLX_SGIX_fbconfig

  GLXContext  glXCreateContextWithConfigSGIX(RegalContext *_context, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
  GLXPixmap  glXCreateGLXPixmapWithConfigSGIX(RegalContext *_context, Display *dpy, GLXFBConfig config, Pixmap pixmap);
  int  glXGetFBConfigAttribSGIX(RegalContext *_context, Display *dpy, GLXFBConfigSGIX config, int attribute, int *value);
  GLXFBConfigSGIX  glXGetFBConfigFromVisualSGIX(RegalContext *_context, Display *dpy, XVisualInfo *vis);
  XVisualInfo * glXGetVisualFromFBConfigSGIX(RegalContext *_context, Display *dpy, GLXFBConfig config);

// GLX_SGIX_pbuffer

  GLXPbuffer  glXCreateGLXPbufferSGIX(RegalContext *_context, Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list);
  void  glXDestroyGLXPbufferSGIX(RegalContext *_context, Display *dpy, GLXPbuffer pbuf);
  void  glXGetSelectedEventSGIX(RegalContext *_context, Display *dpy, GLXDrawable drawable, unsigned long *mask);
  void  glXQueryGLXPbufferSGIX(RegalContext *_context, Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value);
  void  glXSelectEventSGIX(RegalContext *_context, Display *dpy, GLXDrawable drawable, unsigned long mask);

// GLX_SGIX_swap_barrier

  void  glXBindSwapBarrierSGIX(RegalContext *_context, Display *dpy, GLXDrawable drawable, int barrier);
  Bool  glXQueryMaxSwapBarriersSGIX(RegalContext *_context, Display *dpy, int screen, int *max);

// GLX_SGIX_swap_group

  void  glXJoinSwapGroupSGIX(RegalContext *_context, Display *dpy, GLXDrawable drawable, GLXDrawable member);

// GLX_SGIX_video_resize

  int  glXBindChannelToWindowSGIX(RegalContext *_context, Display *display, int screen, int channel, Window window);
  int  glXChannelRectSGIX(RegalContext *_context, Display *display, int screen, int channel, int x, int y, int w, int h);
  int  glXChannelRectSyncSGIX(RegalContext *_context, Display *display, int screen, int channel, GLenum synctype);
  int  glXQueryChannelDeltasSGIX(RegalContext *_context, Display *display, int screen, int channel, int *x, int *y, int *w, int *h);
  int  glXQueryChannelRectSGIX(RegalContext *_context, Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);

// GLX_SGI_cushion

  void  glXCushionSGI(RegalContext *_context, Display *dpy, Window window, float cushion);

// GLX_SGI_make_current_read

  GLXDrawable  glXGetCurrentReadDrawableSGI(RegalContext *_context);
  Bool  glXMakeCurrentReadSGI(RegalContext *_context, Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);

// GLX_SGI_swap_control

  int  glXSwapIntervalSGI(RegalContext *_context, int interval);

// GLX_SGI_video_sync

  int  glXGetVideoSyncSGI(RegalContext *_context, unsigned int *count);
  int  glXWaitVideoSyncSGI(RegalContext *_context, int divisor, int remainder, unsigned int *count);
#endif // REGAL_SYS_GLX && REGAL_SYS_X11

#if REGAL_SYS_OSX

// CGL_VERSION_1_0

  CGLError  CGLChoosePixelFormat(RegalContext *_context, const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix);
  CGLError  CGLClearDrawable(RegalContext *_context, CGLContextObj ctx);
  CGLError  CGLCopyContext(RegalContext *_context, CGLContextObj src, CGLContextObj dst, GLbitfield mask);
  CGLError  CGLCreateContext(RegalContext *_context, CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx);
  CGLError  CGLDescribePixelFormat(RegalContext *_context, CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value);
  CGLError  CGLDescribeRenderer(RegalContext *_context, CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value);
  CGLError  CGLDestroyContext(RegalContext *_context, CGLContextObj ctx);
  CGLError  CGLDestroyPixelFormat(RegalContext *_context, CGLPixelFormatObj pix);
  CGLError  CGLDestroyRendererInfo(RegalContext *_context, CGLRendererInfoObj rend);
  CGLError  CGLDisable(RegalContext *_context, CGLContextObj ctx, CGLContextEnable pname);
  CGLError  CGLEnable(RegalContext *_context, CGLContextObj ctx, CGLContextEnable pname);
  const char * CGLErrorString(RegalContext *_context, CGLError error);
  CGLError  CGLFlushDrawable(RegalContext *_context, CGLContextObj ctx);
  CGLError  CGLGetOffScreen(RegalContext *_context, CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr);
  CGLError  CGLGetOption(RegalContext *_context, CGLGlobalOption pname, GLint *param);
  CGLError  CGLGetParameter(RegalContext *_context, CGLContextObj ctx, CGLContextParameter pname, GLint *params);
  void  CGLGetVersion(RegalContext *_context, GLint *majorvers, GLint *minorvers);
  CGLError  CGLGetVirtualScreen(RegalContext *_context, CGLContextObj ctx, GLint *screen);
  CGLError  CGLIsEnabled(RegalContext *_context, CGLContextObj ctx, CGLContextEnable pname, GLint *enable);
  CGLError  CGLQueryRendererInfo(RegalContext *_context, GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend);
  CGLError  CGLSetFullScreen(RegalContext *_context, CGLContextObj ctx);
  CGLError  CGLSetOffScreen(RegalContext *_context, CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr);
  CGLError  CGLSetOption(RegalContext *_context, CGLGlobalOption pname, GLint param);
  CGLError  CGLSetParameter(RegalContext *_context, CGLContextObj ctx, CGLContextParameter pname, const GLint *params);
  CGLError  CGLSetVirtualScreen(RegalContext *_context, CGLContextObj ctx, GLint screen);

// CGL_VERSION_1_1

  CGLError  CGLCreatePBuffer(RegalContext *_context, GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer);
  CGLError  CGLDescribePBuffer(RegalContext *_context, CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap);
  CGLError  CGLDestroyPBuffer(RegalContext *_context, CGLPBufferObj pbuffer);
  CGLError  CGLGetPBuffer(RegalContext *_context, CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen);
  CGLError  CGLSetPBuffer(RegalContext *_context, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen);
  CGLError  CGLTexImagePBuffer(RegalContext *_context, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source);

// CGL_VERSION_1_2

  GLuint  CGLGetContextRetainCount(RegalContext *_context, CGLContextObj ctx);
  CGLError  CGLGetGlobalOption(RegalContext *_context, CGLGlobalOption pname, GLint *params);
  GLuint  CGLGetPBufferRetainCount(RegalContext *_context, CGLPBufferObj pbuffer);
  CGLPixelFormatObj  CGLGetPixelFormat(RegalContext *_context, CGLContextObj ctx);
  GLuint  CGLGetPixelFormatRetainCount(RegalContext *_context, CGLPixelFormatObj pix);
  CGLError  CGLLockContext(RegalContext *_context, CGLContextObj ctx);
  void  CGLReleaseContext(RegalContext *_context, CGLContextObj ctx);
  void  CGLReleasePBuffer(RegalContext *_context, CGLPBufferObj pbuffer);
  void  CGLReleasePixelFormat(RegalContext *_context, CGLPixelFormatObj pix);
  CGLContextObj  CGLRetainContext(RegalContext *_context, CGLContextObj ctx);
  CGLPBufferObj  CGLRetainPBuffer(RegalContext *_context, CGLPBufferObj pbuffer);
  CGLPixelFormatObj  CGLRetainPixelFormat(RegalContext *_context, CGLPixelFormatObj pix);
  CGLError  CGLSetGlobalOption(RegalContext *_context, CGLGlobalOption pname, const GLint *params);
  CGLError  CGLUnlockContext(RegalContext *_context, CGLContextObj ctx);

// CGL_VERSION_1_3

  CGLContextObj  CGLGetCurrentContext(RegalContext *_context);
  CGLShareGroupObj  CGLGetShareGroup(RegalContext *_context, CGLContextObj ctx);
  CGLError  CGLGetSurface(RegalContext *_context, CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf);
  CGLError  CGLSetCurrentContext(RegalContext *_context, CGLContextObj ctx);
  CGLError  CGLSetSurface(RegalContext *_context, CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf);
  CGLError  CGLTexImageIOSurface2D(RegalContext *_context, CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane);
  CGLError  CGLUpdateContext(RegalContext *_context, CGLContextObj ctx);
#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

// EGL_ANGLE_query_surface_pointer

  EGLBoolean  eglQuerySurfacePointerANGLE(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value);

// EGL_KHR_fence_sync

  EGLint  eglClientWaitSyncKHR(RegalContext *_context, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout);
  EGLSyncKHR  eglCreateSyncKHR(RegalContext *_context, EGLDisplay dpy, EGLenum type, const EGLint *attrib_list);
  EGLBoolean  eglDestroySyncKHR(RegalContext *_context, EGLDisplay dpy, EGLSyncKHR GLsync);
  EGLBoolean  eglGetSyncAttribKHR(RegalContext *_context, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value);

// EGL_KHR_image_base

  EGLImageKHR  eglCreateImageKHR(RegalContext *_context, EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list);
  EGLBoolean  eglDestroyImageKHR(RegalContext *_context, EGLDisplay dpy, EGLImageKHR image);

// EGL_KHR_lock_surface

  EGLBoolean  eglLockSurfaceKHR(RegalContext *_context, EGLDisplay display, EGLSurface surface, const EGLint *attrib_list);
  EGLBoolean  eglUnlockSurfaceKHR(RegalContext *_context, EGLDisplay display, EGLSurface surface);

// EGL_MESA_drm_image

  EGLImageKHR  eglCreateDRMImageMESA(RegalContext *_context, EGLDisplay dpy, const EGLint *attrib_list);
  EGLBoolean  eglExportDRMImageMESA(RegalContext *_context, EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride);

// EGL_NV_post_sub_buffer

  EGLBoolean  eglPostSubBufferNV(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height);

// EGL_NV_sync

  EGLint  eglClientWaitSyncNV(RegalContext *_context, EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout);
  EGLSyncNV  eglCreateFenceSyncNV(RegalContext *_context, EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list);
  EGLBoolean  eglDestroySyncNV(RegalContext *_context, EGLSyncNV GLsync);
  EGLBoolean  eglFenceNV(RegalContext *_context, EGLSyncNV GLsync);
  EGLBoolean  eglGetSyncAttribNV(RegalContext *_context, EGLSyncNV GLsync, EGLint attribute, EGLint *value);
  EGLBoolean  eglSignalSyncNV(RegalContext *_context, EGLSyncNV GLsync, EGLenum mode);

// EGL_NV_system_time

  EGLuint64NV  eglGetSystemTimeFrequencyNV(RegalContext *_context);
  EGLuint64NV  eglGetSystemTimeNV(RegalContext *_context);

// EGL_VERSION_1_0

  EGLBoolean  eglChooseConfig(RegalContext *_context, EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config);
  EGLBoolean  eglCopyBuffers(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target);
  EGLContext  eglCreateContext(RegalContext *_context, EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list);
  EGLSurface  eglCreatePbufferSurface(RegalContext *_context, EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list);
  EGLSurface  eglCreatePixmapSurface(RegalContext *_context, EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list);
  EGLSurface  eglCreateWindowSurface(RegalContext *_context, EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list);
  EGLBoolean  eglDestroyContext(RegalContext *_context, EGLDisplay dpy, EGLContext ctx);
  EGLBoolean  eglDestroySurface(RegalContext *_context, EGLDisplay dpy, EGLSurface surface);
  EGLBoolean  eglGetConfigAttrib(RegalContext *_context, EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value);
  EGLBoolean  eglGetConfigs(RegalContext *_context, EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config);
  EGLContext  eglGetCurrentContext(RegalContext *_context);
  EGLDisplay  eglGetCurrentDisplay(RegalContext *_context);
  EGLSurface  eglGetCurrentSurface(RegalContext *_context, EGLint readdraw);
  EGLDisplay  eglGetDisplay(RegalContext *_context, EGLNativeDisplayType display_id);
  EGLint  eglGetError(RegalContext *_context);
  __eglMustCastToProperFunctionPointerType  eglGetProcAddress(RegalContext *_context, const char *procname);
  EGLBoolean  eglInitialize(RegalContext *_context, EGLDisplay dpy, EGLint *major, EGLint *minor);
  EGLBoolean  eglMakeCurrent(RegalContext *_context, EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
  EGLBoolean  eglQueryContext(RegalContext *_context, EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value);
  const char * eglQueryString(RegalContext *_context, EGLDisplay dpy, EGLint name);
  EGLBoolean  eglQuerySurface(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value);
  EGLBoolean  eglSwapBuffers(RegalContext *_context, EGLDisplay dpy, EGLSurface surface);
  EGLBoolean  eglTerminate(RegalContext *_context, EGLDisplay dpy);
  EGLBoolean  eglWaitGL(RegalContext *_context);
  EGLBoolean  eglWaitNative(RegalContext *_context, EGLint engine);

// EGL_VERSION_1_1

  EGLBoolean  eglBindTexImage(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint buffer);
  EGLBoolean  eglReleaseTexImage(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint buffer);

// EGL_VERSION_1_2

  EGLBoolean  eglBindAPI(RegalContext *_context, EGLenum api);
  EGLSurface  eglCreatePbufferFromClientBuffer(RegalContext *_context, EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list);
  EGLenum  eglQueryAPI(RegalContext *_context);
  EGLBoolean  eglReleaseThread(RegalContext *_context);
  EGLBoolean  eglSurfaceAttrib(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value);
  EGLBoolean  eglSwapInterval(RegalContext *_context, EGLDisplay dpy, EGLint interval);
  EGLBoolean  eglWaitClient(RegalContext *_context);
#endif // REGAL_SYS_EGL

} // namespace Trace

// GL_VERSION_1_0

static void REGAL_CALL trace_glAccum(RegalContext *_context, GLenum op, GLfloat value)
{
  Internal("trace_glAccum","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAccum(_context, op, value);
}

static void REGAL_CALL trace_glAlphaFunc(RegalContext *_context, GLenum func, GLclampf ref)
{
  Internal("trace_glAlphaFunc","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAlphaFunc(_context, func, ref);
}

static void REGAL_CALL trace_glBegin(RegalContext *_context, GLenum mode)
{
  Internal("trace_glBegin","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBegin(_context, mode);
}

static void REGAL_CALL trace_glBitmap(RegalContext *_context, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
  Internal("trace_glBitmap","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBitmap(_context, width, height, xorig, yorig, xmove, ymove, bitmap);
}

static void REGAL_CALL trace_glBlendFunc(RegalContext *_context, GLenum sfactor, GLenum dfactor)
{
  Internal("trace_glBlendFunc","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFunc(_context, sfactor, dfactor);
}

static void REGAL_CALL trace_glCallList(RegalContext *_context, GLuint list)
{
  Internal("trace_glCallList","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCallList(_context, list);
}

static void REGAL_CALL trace_glCallLists(RegalContext *_context, GLsizei n, GLenum type, const GLvoid *lists)
{
  Internal("trace_glCallLists","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCallLists(_context, n, type, lists);
}

static void REGAL_CALL trace_glClear(RegalContext *_context, GLbitfield mask)
{
  Internal("trace_glClear","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClear(_context, mask);
}

static void REGAL_CALL trace_glClearAccum(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  Internal("trace_glClearAccum","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearAccum(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glClearColor(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Internal("trace_glClearColor","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearColor(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glClearDepth(RegalContext *_context, GLclampd depth)
{
  Internal("trace_glClearDepth","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearDepth(_context, depth);
}

static void REGAL_CALL trace_glClearIndex(RegalContext *_context, GLfloat c)
{
  Internal("trace_glClearIndex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearIndex(_context, c);
}

static void REGAL_CALL trace_glClearStencil(RegalContext *_context, GLint s)
{
  Internal("trace_glClearStencil","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearStencil(_context, s);
}

static void REGAL_CALL trace_glClipPlane(RegalContext *_context, GLenum plane, const GLdouble *equation)
{
  Internal("trace_glClipPlane","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClipPlane(_context, plane, equation);
}

static void REGAL_CALL trace_glColor3b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  Internal("trace_glColor3b","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3b(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3bv(RegalContext *_context, const GLbyte *v)
{
  Internal("trace_glColor3bv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3bv(_context, v);
}

static void REGAL_CALL trace_glColor3d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  Internal("trace_glColor3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3d(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glColor3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3dv(_context, v);
}

static void REGAL_CALL trace_glColor3f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  Internal("trace_glColor3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3f(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glColor3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3fv(_context, v);
}

static void REGAL_CALL trace_glColor3i(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  Internal("trace_glColor3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3i(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glColor3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3iv(_context, v);
}

static void REGAL_CALL trace_glColor3s(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  Internal("trace_glColor3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3s(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glColor3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3sv(_context, v);
}

static void REGAL_CALL trace_glColor3ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  Internal("trace_glColor3ub","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3ub(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3ubv(RegalContext *_context, const GLubyte *v)
{
  Internal("trace_glColor3ubv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3ubv(_context, v);
}

static void REGAL_CALL trace_glColor3ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  Internal("trace_glColor3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3ui(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3uiv(RegalContext *_context, const GLuint *v)
{
  Internal("trace_glColor3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3uiv(_context, v);
}

static void REGAL_CALL trace_glColor3us(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  Internal("trace_glColor3us","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3us(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3usv(RegalContext *_context, const GLushort *v)
{
  Internal("trace_glColor3usv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3usv(_context, v);
}

static void REGAL_CALL trace_glColor4b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
  Internal("trace_glColor4b","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4b(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4bv(RegalContext *_context, const GLbyte *v)
{
  Internal("trace_glColor4bv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4bv(_context, v);
}

static void REGAL_CALL trace_glColor4d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
  Internal("trace_glColor4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4d(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glColor4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4dv(_context, v);
}

static void REGAL_CALL trace_glColor4f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  Internal("trace_glColor4f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4f(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glColor4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4fv(_context, v);
}

static void REGAL_CALL trace_glColor4i(RegalContext *_context, GLint red, GLint green, GLint blue, GLint alpha)
{
  Internal("trace_glColor4i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4i(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glColor4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4iv(_context, v);
}

static void REGAL_CALL trace_glColor4s(RegalContext *_context, GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
  Internal("trace_glColor4s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4s(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glColor4sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4sv(_context, v);
}

static void REGAL_CALL trace_glColor4ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
  Internal("trace_glColor4ub","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4ub(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4ubv(RegalContext *_context, const GLubyte *v)
{
  Internal("trace_glColor4ubv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4ubv(_context, v);
}

static void REGAL_CALL trace_glColor4ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  Internal("trace_glColor4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4ui(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4uiv(RegalContext *_context, const GLuint *v)
{
  Internal("trace_glColor4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4uiv(_context, v);
}

static void REGAL_CALL trace_glColor4us(RegalContext *_context, GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
  Internal("trace_glColor4us","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4us(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4usv(RegalContext *_context, const GLushort *v)
{
  Internal("trace_glColor4usv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4usv(_context, v);
}

static void REGAL_CALL trace_glColorMask(RegalContext *_context, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  Internal("trace_glColorMask","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorMask(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColorMaterial(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("trace_glColorMaterial","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorMaterial(_context, face, mode);
}

static void REGAL_CALL trace_glCopyPixels(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
  Internal("trace_glCopyPixels","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyPixels(_context, x, y, width, height, type);
}

static void REGAL_CALL trace_glCullFace(RegalContext *_context, GLenum mode)
{
  Internal("trace_glCullFace","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCullFace(_context, mode);
}

static void REGAL_CALL trace_glDeleteLists(RegalContext *_context, GLuint list, GLsizei range)
{
  Internal("trace_glDeleteLists","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteLists(_context, list, range);
}

static void REGAL_CALL trace_glDepthFunc(RegalContext *_context, GLenum func)
{
  Internal("trace_glDepthFunc","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthFunc(_context, func);
}

static void REGAL_CALL trace_glDepthMask(RegalContext *_context, GLboolean flag)
{
  Internal("trace_glDepthMask","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthMask(_context, flag);
}

static void REGAL_CALL trace_glDepthRange(RegalContext *_context, GLclampd zNear, GLclampd zFar)
{
  Internal("trace_glDepthRange","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthRange(_context, zNear, zFar);
}

static void REGAL_CALL trace_glDisable(RegalContext *_context, GLenum cap)
{
  Internal("trace_glDisable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisable(_context, cap);
}

static void REGAL_CALL trace_glDrawBuffer(RegalContext *_context, GLenum mode)
{
  Internal("trace_glDrawBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawBuffer(_context, mode);
}

static void REGAL_CALL trace_glDrawPixels(RegalContext *_context, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glDrawPixels","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawPixels(_context, width, height, format, type, pixels);
}

static void REGAL_CALL trace_glEdgeFlag(RegalContext *_context, GLboolean flag)
{
  Internal("trace_glEdgeFlag","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEdgeFlag(_context, flag);
}

static void REGAL_CALL trace_glEdgeFlagv(RegalContext *_context, const GLboolean *flag)
{
  Internal("trace_glEdgeFlagv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEdgeFlagv(_context, flag);
}

static void REGAL_CALL trace_glEnable(RegalContext *_context, GLenum cap)
{
  Internal("trace_glEnable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnable(_context, cap);
}

static void REGAL_CALL trace_glEnd(RegalContext *_context)
{
  Internal("trace_glEnd","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnd(_context);
}

static void REGAL_CALL trace_glEndList(RegalContext *_context)
{
  Internal("trace_glEndList","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndList(_context);
}

static void REGAL_CALL trace_glEvalCoord1d(RegalContext *_context, GLdouble u)
{
  Internal("trace_glEvalCoord1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalCoord1d(_context, u);
}

static void REGAL_CALL trace_glEvalCoord1dv(RegalContext *_context, const GLdouble *u)
{
  Internal("trace_glEvalCoord1dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalCoord1dv(_context, u);
}

static void REGAL_CALL trace_glEvalCoord1f(RegalContext *_context, GLfloat u)
{
  Internal("trace_glEvalCoord1f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalCoord1f(_context, u);
}

static void REGAL_CALL trace_glEvalCoord1fv(RegalContext *_context, const GLfloat *u)
{
  Internal("trace_glEvalCoord1fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalCoord1fv(_context, u);
}

static void REGAL_CALL trace_glEvalCoord2d(RegalContext *_context, GLdouble u, GLdouble v)
{
  Internal("trace_glEvalCoord2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalCoord2d(_context, u, v);
}

static void REGAL_CALL trace_glEvalCoord2dv(RegalContext *_context, const GLdouble *u)
{
  Internal("trace_glEvalCoord2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalCoord2dv(_context, u);
}

static void REGAL_CALL trace_glEvalCoord2f(RegalContext *_context, GLfloat u, GLfloat v)
{
  Internal("trace_glEvalCoord2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalCoord2f(_context, u, v);
}

static void REGAL_CALL trace_glEvalCoord2fv(RegalContext *_context, const GLfloat *u)
{
  Internal("trace_glEvalCoord2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalCoord2fv(_context, u);
}

static void REGAL_CALL trace_glEvalMesh1(RegalContext *_context, GLenum mode, GLint i1, GLint i2)
{
  Internal("trace_glEvalMesh1","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalMesh1(_context, mode, i1, i2);
}

static void REGAL_CALL trace_glEvalMesh2(RegalContext *_context, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
  Internal("trace_glEvalMesh2","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalMesh2(_context, mode, i1, i2, j1, j2);
}

static void REGAL_CALL trace_glEvalPoint1(RegalContext *_context, GLint i)
{
  Internal("trace_glEvalPoint1","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalPoint1(_context, i);
}

static void REGAL_CALL trace_glEvalPoint2(RegalContext *_context, GLint i, GLint j)
{
  Internal("trace_glEvalPoint2","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalPoint2(_context, i, j);
}

static void REGAL_CALL trace_glFeedbackBuffer(RegalContext *_context, GLsizei size, GLenum type, GLfloat *buffer)
{
  Internal("trace_glFeedbackBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFeedbackBuffer(_context, size, type, buffer);
}

static void REGAL_CALL trace_glFinish(RegalContext *_context)
{
  Internal("trace_glFinish","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFinish(_context);
}

static void REGAL_CALL trace_glFlush(RegalContext *_context)
{
  Internal("trace_glFlush","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlush(_context);
}

static void REGAL_CALL trace_glFogf(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glFogf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogf(_context, pname, param);
}

static void REGAL_CALL trace_glFogfv(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glFogfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogfv(_context, pname, params);
}

static void REGAL_CALL trace_glFogi(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glFogi","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogi(_context, pname, param);
}

static void REGAL_CALL trace_glFogiv(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("trace_glFogiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogiv(_context, pname, params);
}

static void REGAL_CALL trace_glFrontFace(RegalContext *_context, GLenum mode)
{
  Internal("trace_glFrontFace","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFrontFace(_context, mode);
}

static void REGAL_CALL trace_glFrustum(RegalContext *_context, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Internal("trace_glFrustum","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFrustum(_context, left, right, bottom, top, zNear, zFar);
}

static GLuint REGAL_CALL trace_glGenLists(RegalContext *_context, GLsizei range)
{
  Internal("trace_glGenLists","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGenLists(_context, range);
  return ret;
}

static void REGAL_CALL trace_glGetBooleanv(RegalContext *_context, GLenum pname, GLboolean *params)
{
  Internal("trace_glGetBooleanv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBooleanv(_context, pname, params);
}

static void REGAL_CALL trace_glGetClipPlane(RegalContext *_context, GLenum plane, GLdouble *equation)
{
  Internal("trace_glGetClipPlane","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetClipPlane(_context, plane, equation);
}

static void REGAL_CALL trace_glGetDoublev(RegalContext *_context, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetDoublev","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetDoublev(_context, pname, params);
}

static GLenum REGAL_CALL trace_glGetError(RegalContext *_context)
{
  Internal("trace_glGetError","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glGetError(_context);
  return ret;
}

static void REGAL_CALL trace_glGetFloatv(RegalContext *_context, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetFloatv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFloatv(_context, pname, params);
}

static void REGAL_CALL trace_glGetIntegerv(RegalContext *_context, GLenum pname, GLint *params)
{
  Internal("trace_glGetIntegerv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetIntegerv(_context, pname, params);
}

static void REGAL_CALL trace_glGetLightfv(RegalContext *_context, GLenum light, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetLightfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetLightfv(_context, light, pname, params);
}

static void REGAL_CALL trace_glGetLightiv(RegalContext *_context, GLenum light, GLenum pname, GLint *params)
{
  Internal("trace_glGetLightiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetLightiv(_context, light, pname, params);
}

static void REGAL_CALL trace_glGetMapdv(RegalContext *_context, GLenum target, GLenum query, GLdouble *v)
{
  Internal("trace_glGetMapdv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMapdv(_context, target, query, v);
}

static void REGAL_CALL trace_glGetMapfv(RegalContext *_context, GLenum target, GLenum query, GLfloat *v)
{
  Internal("trace_glGetMapfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMapfv(_context, target, query, v);
}

static void REGAL_CALL trace_glGetMapiv(RegalContext *_context, GLenum target, GLenum query, GLint *v)
{
  Internal("trace_glGetMapiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMapiv(_context, target, query, v);
}

static void REGAL_CALL trace_glGetMaterialfv(RegalContext *_context, GLenum face, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMaterialfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMaterialfv(_context, face, pname, params);
}

static void REGAL_CALL trace_glGetMaterialiv(RegalContext *_context, GLenum face, GLenum pname, GLint *params)
{
  Internal("trace_glGetMaterialiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMaterialiv(_context, face, pname, params);
}

static void REGAL_CALL trace_glGetPixelMapfv(RegalContext *_context, GLenum map, GLfloat *values)
{
  Internal("trace_glGetPixelMapfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPixelMapfv(_context, map, values);
}

static void REGAL_CALL trace_glGetPixelMapuiv(RegalContext *_context, GLenum map, GLuint *values)
{
  Internal("trace_glGetPixelMapuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPixelMapuiv(_context, map, values);
}

static void REGAL_CALL trace_glGetPixelMapusv(RegalContext *_context, GLenum map, GLushort *values)
{
  Internal("trace_glGetPixelMapusv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPixelMapusv(_context, map, values);
}

static void REGAL_CALL trace_glGetPolygonStipple(RegalContext *_context, GLubyte *mask)
{
  Internal("trace_glGetPolygonStipple","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPolygonStipple(_context, mask);
}

static const GLubyte *REGAL_CALL trace_glGetString(RegalContext *_context, GLenum name)
{
  Internal("trace_glGetString","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  const GLubyte * ret = Trace::glGetString(_context, name);
  return ret;
}

static void REGAL_CALL trace_glGetTexEnvfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetTexEnvfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexEnvfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetTexEnviv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetTexEnviv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexEnviv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetTexGendv(RegalContext *_context, GLenum coord, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetTexGendv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexGendv(_context, coord, pname, params);
}

static void REGAL_CALL trace_glGetTexGenfv(RegalContext *_context, GLenum coord, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetTexGenfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexGenfv(_context, coord, pname, params);
}

static void REGAL_CALL trace_glGetTexGeniv(RegalContext *_context, GLenum coord, GLenum pname, GLint *params)
{
  Internal("trace_glGetTexGeniv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexGeniv(_context, coord, pname, params);
}

static void REGAL_CALL trace_glGetTexImage(RegalContext *_context, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("trace_glGetTexImage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexImage(_context, target, level, format, type, pixels);
}

static void REGAL_CALL trace_glGetTexLevelParameterfv(RegalContext *_context, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetTexLevelParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexLevelParameterfv(_context, target, level, pname, params);
}

static void REGAL_CALL trace_glGetTexLevelParameteriv(RegalContext *_context, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Internal("trace_glGetTexLevelParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexLevelParameteriv(_context, target, level, pname, params);
}

static void REGAL_CALL trace_glGetTexParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetTexParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexParameterfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetTexParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetTexParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glHint(RegalContext *_context, GLenum target, GLenum mode)
{
  Internal("trace_glHint","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glHint(_context, target, mode);
}

static void REGAL_CALL trace_glIndexMask(RegalContext *_context, GLuint mask)
{
  Internal("trace_glIndexMask","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexMask(_context, mask);
}

static void REGAL_CALL trace_glIndexd(RegalContext *_context, GLdouble c)
{
  Internal("trace_glIndexd","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexd(_context, c);
}

static void REGAL_CALL trace_glIndexdv(RegalContext *_context, const GLdouble *c)
{
  Internal("trace_glIndexdv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexdv(_context, c);
}

static void REGAL_CALL trace_glIndexf(RegalContext *_context, GLfloat c)
{
  Internal("trace_glIndexf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexf(_context, c);
}

static void REGAL_CALL trace_glIndexfv(RegalContext *_context, const GLfloat *c)
{
  Internal("trace_glIndexfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexfv(_context, c);
}

static void REGAL_CALL trace_glIndexi(RegalContext *_context, GLint c)
{
  Internal("trace_glIndexi","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexi(_context, c);
}

static void REGAL_CALL trace_glIndexiv(RegalContext *_context, const GLint *c)
{
  Internal("trace_glIndexiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexiv(_context, c);
}

static void REGAL_CALL trace_glIndexs(RegalContext *_context, GLshort c)
{
  Internal("trace_glIndexs","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexs(_context, c);
}

static void REGAL_CALL trace_glIndexsv(RegalContext *_context, const GLshort *c)
{
  Internal("trace_glIndexsv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexsv(_context, c);
}

static void REGAL_CALL trace_glInitNames(RegalContext *_context)
{
  Internal("trace_glInitNames","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInitNames(_context);
}

static GLboolean REGAL_CALL trace_glIsEnabled(RegalContext *_context, GLenum cap)
{
  Internal("trace_glIsEnabled","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsEnabled(_context, cap);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsList(RegalContext *_context, GLuint list)
{
  Internal("trace_glIsList","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsList(_context, list);
  return ret;
}

static void REGAL_CALL trace_glLightModelf(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glLightModelf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightModelf(_context, pname, param);
}

static void REGAL_CALL trace_glLightModelfv(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glLightModelfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightModelfv(_context, pname, params);
}

static void REGAL_CALL trace_glLightModeli(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glLightModeli","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightModeli(_context, pname, param);
}

static void REGAL_CALL trace_glLightModeliv(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("trace_glLightModeliv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightModeliv(_context, pname, params);
}

static void REGAL_CALL trace_glLightf(RegalContext *_context, GLenum light, GLenum pname, GLfloat param)
{
  Internal("trace_glLightf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightf(_context, light, pname, param);
}

static void REGAL_CALL trace_glLightfv(RegalContext *_context, GLenum light, GLenum pname, const GLfloat *params)
{
  Internal("trace_glLightfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightfv(_context, light, pname, params);
}

static void REGAL_CALL trace_glLighti(RegalContext *_context, GLenum light, GLenum pname, GLint param)
{
  Internal("trace_glLighti","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLighti(_context, light, pname, param);
}

static void REGAL_CALL trace_glLightiv(RegalContext *_context, GLenum light, GLenum pname, const GLint *params)
{
  Internal("trace_glLightiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightiv(_context, light, pname, params);
}

static void REGAL_CALL trace_glLineStipple(RegalContext *_context, GLint factor, GLushort pattern)
{
  Internal("trace_glLineStipple","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLineStipple(_context, factor, pattern);
}

static void REGAL_CALL trace_glLineWidth(RegalContext *_context, GLfloat width)
{
  Internal("trace_glLineWidth","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLineWidth(_context, width);
}

static void REGAL_CALL trace_glListBase(RegalContext *_context, GLuint base)
{
  Internal("trace_glListBase","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glListBase(_context, base);
}

static void REGAL_CALL trace_glLoadIdentity(RegalContext *_context)
{
  Internal("trace_glLoadIdentity","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadIdentity(_context);
}

static void REGAL_CALL trace_glLoadMatrixd(RegalContext *_context, const GLdouble *m)
{
  Internal("trace_glLoadMatrixd","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadMatrixd(_context, m);
}

static void REGAL_CALL trace_glLoadMatrixf(RegalContext *_context, const GLfloat *m)
{
  Internal("trace_glLoadMatrixf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadMatrixf(_context, m);
}

static void REGAL_CALL trace_glLoadName(RegalContext *_context, GLuint name)
{
  Internal("trace_glLoadName","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadName(_context, name);
}

static void REGAL_CALL trace_glLogicOp(RegalContext *_context, GLenum opcode)
{
  Internal("trace_glLogicOp","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLogicOp(_context, opcode);
}

static void REGAL_CALL trace_glMap1d(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  Internal("trace_glMap1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMap1d(_context, target, u1, u2, stride, order, points);
}

static void REGAL_CALL trace_glMap1f(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  Internal("trace_glMap1f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMap1f(_context, target, u1, u2, stride, order, points);
}

static void REGAL_CALL trace_glMap2d(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  Internal("trace_glMap2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMap2d(_context, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL trace_glMap2f(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  Internal("trace_glMap2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMap2f(_context, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL trace_glMapGrid1d(RegalContext *_context, GLint un, GLdouble u1, GLdouble u2)
{
  Internal("trace_glMapGrid1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapGrid1d(_context, un, u1, u2);
}

static void REGAL_CALL trace_glMapGrid1f(RegalContext *_context, GLint un, GLfloat u1, GLfloat u2)
{
  Internal("trace_glMapGrid1f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapGrid1f(_context, un, u1, u2);
}

static void REGAL_CALL trace_glMapGrid2d(RegalContext *_context, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
  Internal("trace_glMapGrid2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapGrid2d(_context, un, u1, u2, vn, v1, v2);
}

static void REGAL_CALL trace_glMapGrid2f(RegalContext *_context, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
  Internal("trace_glMapGrid2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapGrid2f(_context, un, u1, u2, vn, v1, v2);
}

static void REGAL_CALL trace_glMaterialf(RegalContext *_context, GLenum face, GLenum pname, GLfloat param)
{
  Internal("trace_glMaterialf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMaterialf(_context, face, pname, param);
}

static void REGAL_CALL trace_glMaterialfv(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params)
{
  Internal("trace_glMaterialfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMaterialfv(_context, face, pname, params);
}

static void REGAL_CALL trace_glMateriali(RegalContext *_context, GLenum face, GLenum pname, GLint param)
{
  Internal("trace_glMateriali","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMateriali(_context, face, pname, param);
}

static void REGAL_CALL trace_glMaterialiv(RegalContext *_context, GLenum face, GLenum pname, const GLint *params)
{
  Internal("trace_glMaterialiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMaterialiv(_context, face, pname, params);
}

static void REGAL_CALL trace_glMatrixMode(RegalContext *_context, GLenum mode)
{
  Internal("trace_glMatrixMode","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixMode(_context, mode);
}

static void REGAL_CALL trace_glMultMatrixd(RegalContext *_context, const GLdouble *m)
{
  Internal("trace_glMultMatrixd","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultMatrixd(_context, m);
}

static void REGAL_CALL trace_glMultMatrixf(RegalContext *_context, const GLfloat *m)
{
  Internal("trace_glMultMatrixf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultMatrixf(_context, m);
}

static void REGAL_CALL trace_glNewList(RegalContext *_context, GLuint list, GLenum mode)
{
  Internal("trace_glNewList","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNewList(_context, list, mode);
}

static void REGAL_CALL trace_glNormal3b(RegalContext *_context, GLbyte nx, GLbyte ny, GLbyte nz)
{
  Internal("trace_glNormal3b","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3b(_context, nx, ny, nz);
}

static void REGAL_CALL trace_glNormal3bv(RegalContext *_context, const GLbyte *v)
{
  Internal("trace_glNormal3bv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3bv(_context, v);
}

static void REGAL_CALL trace_glNormal3d(RegalContext *_context, GLdouble nx, GLdouble ny, GLdouble nz)
{
  Internal("trace_glNormal3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3d(_context, nx, ny, nz);
}

static void REGAL_CALL trace_glNormal3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glNormal3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3dv(_context, v);
}

static void REGAL_CALL trace_glNormal3f(RegalContext *_context, GLfloat nx, GLfloat ny, GLfloat nz)
{
  Internal("trace_glNormal3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3f(_context, nx, ny, nz);
}

static void REGAL_CALL trace_glNormal3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glNormal3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3fv(_context, v);
}

static void REGAL_CALL trace_glNormal3i(RegalContext *_context, GLint nx, GLint ny, GLint nz)
{
  Internal("trace_glNormal3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3i(_context, nx, ny, nz);
}

static void REGAL_CALL trace_glNormal3iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glNormal3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3iv(_context, v);
}

static void REGAL_CALL trace_glNormal3s(RegalContext *_context, GLshort nx, GLshort ny, GLshort nz)
{
  Internal("trace_glNormal3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3s(_context, nx, ny, nz);
}

static void REGAL_CALL trace_glNormal3sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glNormal3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3sv(_context, v);
}

static void REGAL_CALL trace_glOrtho(RegalContext *_context, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Internal("trace_glOrtho","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glOrtho(_context, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL trace_glPassThrough(RegalContext *_context, GLfloat token)
{
  Internal("trace_glPassThrough","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPassThrough(_context, token);
}

static void REGAL_CALL trace_glPixelMapfv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLfloat *values)
{
  Internal("trace_glPixelMapfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelMapfv(_context, map, mapsize, values);
}

static void REGAL_CALL trace_glPixelMapuiv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLuint *values)
{
  Internal("trace_glPixelMapuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelMapuiv(_context, map, mapsize, values);
}

static void REGAL_CALL trace_glPixelMapusv(RegalContext *_context, GLenum map, GLsizei mapsize, const GLushort *values)
{
  Internal("trace_glPixelMapusv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelMapusv(_context, map, mapsize, values);
}

static void REGAL_CALL trace_glPixelStoref(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glPixelStoref","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelStoref(_context, pname, param);
}

static void REGAL_CALL trace_glPixelStorei(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glPixelStorei","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelStorei(_context, pname, param);
}

static void REGAL_CALL trace_glPixelTransferf(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glPixelTransferf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTransferf(_context, pname, param);
}

static void REGAL_CALL trace_glPixelTransferi(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glPixelTransferi","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTransferi(_context, pname, param);
}

static void REGAL_CALL trace_glPixelZoom(RegalContext *_context, GLfloat xfactor, GLfloat yfactor)
{
  Internal("trace_glPixelZoom","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelZoom(_context, xfactor, yfactor);
}

static void REGAL_CALL trace_glPointSize(RegalContext *_context, GLfloat size)
{
  Internal("trace_glPointSize","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointSize(_context, size);
}

static void REGAL_CALL trace_glPolygonMode(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("trace_glPolygonMode","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPolygonMode(_context, face, mode);
}

static void REGAL_CALL trace_glPolygonStipple(RegalContext *_context, const GLubyte *mask)
{
  Internal("trace_glPolygonStipple","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPolygonStipple(_context, mask);
}

static void REGAL_CALL trace_glPopAttrib(RegalContext *_context)
{
  Internal("trace_glPopAttrib","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPopAttrib(_context);
}

static void REGAL_CALL trace_glPopMatrix(RegalContext *_context)
{
  Internal("trace_glPopMatrix","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPopMatrix(_context);
}

static void REGAL_CALL trace_glPopName(RegalContext *_context)
{
  Internal("trace_glPopName","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPopName(_context);
}

static void REGAL_CALL trace_glPushAttrib(RegalContext *_context, GLbitfield mask)
{
  Internal("trace_glPushAttrib","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPushAttrib(_context, mask);
}

static void REGAL_CALL trace_glPushMatrix(RegalContext *_context)
{
  Internal("trace_glPushMatrix","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPushMatrix(_context);
}

static void REGAL_CALL trace_glPushName(RegalContext *_context, GLuint name)
{
  Internal("trace_glPushName","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPushName(_context, name);
}

static void REGAL_CALL trace_glRasterPos2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("trace_glRasterPos2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos2d(_context, x, y);
}

static void REGAL_CALL trace_glRasterPos2dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glRasterPos2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos2dv(_context, v);
}

static void REGAL_CALL trace_glRasterPos2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("trace_glRasterPos2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos2f(_context, x, y);
}

static void REGAL_CALL trace_glRasterPos2fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glRasterPos2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos2fv(_context, v);
}

static void REGAL_CALL trace_glRasterPos2i(RegalContext *_context, GLint x, GLint y)
{
  Internal("trace_glRasterPos2i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos2i(_context, x, y);
}

static void REGAL_CALL trace_glRasterPos2iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glRasterPos2iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos2iv(_context, v);
}

static void REGAL_CALL trace_glRasterPos2s(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("trace_glRasterPos2s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos2s(_context, x, y);
}

static void REGAL_CALL trace_glRasterPos2sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glRasterPos2sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos2sv(_context, v);
}

static void REGAL_CALL trace_glRasterPos3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glRasterPos3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos3d(_context, x, y, z);
}

static void REGAL_CALL trace_glRasterPos3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glRasterPos3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos3dv(_context, v);
}

static void REGAL_CALL trace_glRasterPos3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glRasterPos3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos3f(_context, x, y, z);
}

static void REGAL_CALL trace_glRasterPos3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glRasterPos3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos3fv(_context, v);
}

static void REGAL_CALL trace_glRasterPos3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("trace_glRasterPos3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos3i(_context, x, y, z);
}

static void REGAL_CALL trace_glRasterPos3iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glRasterPos3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos3iv(_context, v);
}

static void REGAL_CALL trace_glRasterPos3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glRasterPos3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos3s(_context, x, y, z);
}

static void REGAL_CALL trace_glRasterPos3sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glRasterPos3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos3sv(_context, v);
}

static void REGAL_CALL trace_glRasterPos4d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glRasterPos4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos4d(_context, x, y, z, w);
}

static void REGAL_CALL trace_glRasterPos4dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glRasterPos4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos4dv(_context, v);
}

static void REGAL_CALL trace_glRasterPos4f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glRasterPos4f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos4f(_context, x, y, z, w);
}

static void REGAL_CALL trace_glRasterPos4fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glRasterPos4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos4fv(_context, v);
}

static void REGAL_CALL trace_glRasterPos4i(RegalContext *_context, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glRasterPos4i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos4i(_context, x, y, z, w);
}

static void REGAL_CALL trace_glRasterPos4iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glRasterPos4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos4iv(_context, v);
}

static void REGAL_CALL trace_glRasterPos4s(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("trace_glRasterPos4s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos4s(_context, x, y, z, w);
}

static void REGAL_CALL trace_glRasterPos4sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glRasterPos4sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRasterPos4sv(_context, v);
}

static void REGAL_CALL trace_glReadBuffer(RegalContext *_context, GLenum mode)
{
  Internal("trace_glReadBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReadBuffer(_context, mode);
}

static void REGAL_CALL trace_glReadPixels(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("trace_glReadPixels","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReadPixels(_context, x, y, width, height, format, type, pixels);
}

static void REGAL_CALL trace_glRectd(RegalContext *_context, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
  Internal("trace_glRectd","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRectd(_context, x1, y1, x2, y2);
}

static void REGAL_CALL trace_glRectdv(RegalContext *_context, const GLdouble *v1, const GLdouble *v2)
{
  Internal("trace_glRectdv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRectdv(_context, v1, v2);
}

static void REGAL_CALL trace_glRectf(RegalContext *_context, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
  Internal("trace_glRectf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRectf(_context, x1, y1, x2, y2);
}

static void REGAL_CALL trace_glRectfv(RegalContext *_context, const GLfloat *v1, const GLfloat *v2)
{
  Internal("trace_glRectfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRectfv(_context, v1, v2);
}

static void REGAL_CALL trace_glRecti(RegalContext *_context, GLint x1, GLint y1, GLint x2, GLint y2)
{
  Internal("trace_glRecti","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRecti(_context, x1, y1, x2, y2);
}

static void REGAL_CALL trace_glRectiv(RegalContext *_context, const GLint *v1, const GLint *v2)
{
  Internal("trace_glRectiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRectiv(_context, v1, v2);
}

static void REGAL_CALL trace_glRects(RegalContext *_context, GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
  Internal("trace_glRects","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRects(_context, x1, y1, x2, y2);
}

static void REGAL_CALL trace_glRectsv(RegalContext *_context, const GLshort *v1, const GLshort *v2)
{
  Internal("trace_glRectsv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRectsv(_context, v1, v2);
}

static GLint REGAL_CALL trace_glRenderMode(RegalContext *_context, GLenum mode)
{
  Internal("trace_glRenderMode","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glRenderMode(_context, mode);
  return ret;
}

static void REGAL_CALL trace_glRotated(RegalContext *_context, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glRotated","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRotated(_context, angle, x, y, z);
}

static void REGAL_CALL trace_glRotatef(RegalContext *_context, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glRotatef","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRotatef(_context, angle, x, y, z);
}

static void REGAL_CALL trace_glScaled(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glScaled","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glScaled(_context, x, y, z);
}

static void REGAL_CALL trace_glScalef(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glScalef","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glScalef(_context, x, y, z);
}

static void REGAL_CALL trace_glScissor(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glScissor","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glScissor(_context, x, y, width, height);
}

static void REGAL_CALL trace_glSelectBuffer(RegalContext *_context, GLsizei size, GLuint *buffer)
{
  Internal("trace_glSelectBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSelectBuffer(_context, size, buffer);
}

static void REGAL_CALL trace_glShadeModel(RegalContext *_context, GLenum mode)
{
  Internal("trace_glShadeModel","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glShadeModel(_context, mode);
}

static void REGAL_CALL trace_glStencilFunc(RegalContext *_context, GLenum func, GLint ref, GLuint mask)
{
  Internal("trace_glStencilFunc","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilFunc(_context, func, ref, mask);
}

static void REGAL_CALL trace_glStencilMask(RegalContext *_context, GLuint mask)
{
  Internal("trace_glStencilMask","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilMask(_context, mask);
}

static void REGAL_CALL trace_glStencilOp(RegalContext *_context, GLenum fail, GLenum zfail, GLenum zpass)
{
  Internal("trace_glStencilOp","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilOp(_context, fail, zfail, zpass);
}

static void REGAL_CALL trace_glTexCoord1d(RegalContext *_context, GLdouble s)
{
  Internal("trace_glTexCoord1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1d(_context, s);
}

static void REGAL_CALL trace_glTexCoord1dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glTexCoord1dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1dv(_context, v);
}

static void REGAL_CALL trace_glTexCoord1f(RegalContext *_context, GLfloat s)
{
  Internal("trace_glTexCoord1f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1f(_context, s);
}

static void REGAL_CALL trace_glTexCoord1fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glTexCoord1fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1fv(_context, v);
}

static void REGAL_CALL trace_glTexCoord1i(RegalContext *_context, GLint s)
{
  Internal("trace_glTexCoord1i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1i(_context, s);
}

static void REGAL_CALL trace_glTexCoord1iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glTexCoord1iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1iv(_context, v);
}

static void REGAL_CALL trace_glTexCoord1s(RegalContext *_context, GLshort s)
{
  Internal("trace_glTexCoord1s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1s(_context, s);
}

static void REGAL_CALL trace_glTexCoord1sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glTexCoord1sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1sv(_context, v);
}

static void REGAL_CALL trace_glTexCoord2d(RegalContext *_context, GLdouble s, GLdouble t)
{
  Internal("trace_glTexCoord2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2d(_context, s, t);
}

static void REGAL_CALL trace_glTexCoord2dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glTexCoord2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2dv(_context, v);
}

static void REGAL_CALL trace_glTexCoord2f(RegalContext *_context, GLfloat s, GLfloat t)
{
  Internal("trace_glTexCoord2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2f(_context, s, t);
}

static void REGAL_CALL trace_glTexCoord2fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glTexCoord2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fv(_context, v);
}

static void REGAL_CALL trace_glTexCoord2i(RegalContext *_context, GLint s, GLint t)
{
  Internal("trace_glTexCoord2i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2i(_context, s, t);
}

static void REGAL_CALL trace_glTexCoord2iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glTexCoord2iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2iv(_context, v);
}

static void REGAL_CALL trace_glTexCoord2s(RegalContext *_context, GLshort s, GLshort t)
{
  Internal("trace_glTexCoord2s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2s(_context, s, t);
}

static void REGAL_CALL trace_glTexCoord2sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glTexCoord2sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2sv(_context, v);
}

static void REGAL_CALL trace_glTexCoord3d(RegalContext *_context, GLdouble s, GLdouble t, GLdouble r)
{
  Internal("trace_glTexCoord3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3d(_context, s, t, r);
}

static void REGAL_CALL trace_glTexCoord3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glTexCoord3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3dv(_context, v);
}

static void REGAL_CALL trace_glTexCoord3f(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r)
{
  Internal("trace_glTexCoord3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3f(_context, s, t, r);
}

static void REGAL_CALL trace_glTexCoord3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glTexCoord3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3fv(_context, v);
}

static void REGAL_CALL trace_glTexCoord3i(RegalContext *_context, GLint s, GLint t, GLint r)
{
  Internal("trace_glTexCoord3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3i(_context, s, t, r);
}

static void REGAL_CALL trace_glTexCoord3iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glTexCoord3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3iv(_context, v);
}

static void REGAL_CALL trace_glTexCoord3s(RegalContext *_context, GLshort s, GLshort t, GLshort r)
{
  Internal("trace_glTexCoord3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3s(_context, s, t, r);
}

static void REGAL_CALL trace_glTexCoord3sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glTexCoord3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3sv(_context, v);
}

static void REGAL_CALL trace_glTexCoord4d(RegalContext *_context, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Internal("trace_glTexCoord4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4d(_context, s, t, r, q);
}

static void REGAL_CALL trace_glTexCoord4dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glTexCoord4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4dv(_context, v);
}

static void REGAL_CALL trace_glTexCoord4f(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Internal("trace_glTexCoord4f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4f(_context, s, t, r, q);
}

static void REGAL_CALL trace_glTexCoord4fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glTexCoord4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4fv(_context, v);
}

static void REGAL_CALL trace_glTexCoord4i(RegalContext *_context, GLint s, GLint t, GLint r, GLint q)
{
  Internal("trace_glTexCoord4i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4i(_context, s, t, r, q);
}

static void REGAL_CALL trace_glTexCoord4iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glTexCoord4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4iv(_context, v);
}

static void REGAL_CALL trace_glTexCoord4s(RegalContext *_context, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Internal("trace_glTexCoord4s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4s(_context, s, t, r, q);
}

static void REGAL_CALL trace_glTexCoord4sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glTexCoord4sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4sv(_context, v);
}

static void REGAL_CALL trace_glTexEnvf(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  Internal("trace_glTexEnvf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexEnvf(_context, target, pname, param);
}

static void REGAL_CALL trace_glTexEnvfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glTexEnvfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexEnvfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glTexEnvi(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glTexEnvi","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexEnvi(_context, target, pname, param);
}

static void REGAL_CALL trace_glTexEnviv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glTexEnviv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexEnviv(_context, target, pname, params);
}

static void REGAL_CALL trace_glTexGend(RegalContext *_context, GLenum coord, GLenum pname, GLdouble param)
{
  Internal("trace_glTexGend","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGend(_context, coord, pname, param);
}

static void REGAL_CALL trace_glTexGendv(RegalContext *_context, GLenum coord, GLenum pname, const GLdouble *params)
{
  Internal("trace_glTexGendv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGendv(_context, coord, pname, params);
}

static void REGAL_CALL trace_glTexGenf(RegalContext *_context, GLenum coord, GLenum pname, GLfloat param)
{
  Internal("trace_glTexGenf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGenf(_context, coord, pname, param);
}

static void REGAL_CALL trace_glTexGenfv(RegalContext *_context, GLenum coord, GLenum pname, const GLfloat *params)
{
  Internal("trace_glTexGenfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGenfv(_context, coord, pname, params);
}

static void REGAL_CALL trace_glTexGeni(RegalContext *_context, GLenum coord, GLenum pname, GLint param)
{
  Internal("trace_glTexGeni","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGeni(_context, coord, pname, param);
}

static void REGAL_CALL trace_glTexGeniv(RegalContext *_context, GLenum coord, GLenum pname, const GLint *params)
{
  Internal("trace_glTexGeniv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGeniv(_context, coord, pname, params);
}

static void REGAL_CALL trace_glTexImage1D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexImage1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage1D(_context, target, level, internalformat, width, border, format, type, pixels);
}

static void REGAL_CALL trace_glTexImage2D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexImage2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage2D(_context, target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL trace_glTexParameterf(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  Internal("trace_glTexParameterf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameterf(_context, target, pname, param);
}

static void REGAL_CALL trace_glTexParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glTexParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameterfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glTexParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glTexParameteri","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameteri(_context, target, pname, param);
}

static void REGAL_CALL trace_glTexParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glTexParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glTranslated(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glTranslated","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTranslated(_context, x, y, z);
}

static void REGAL_CALL trace_glTranslatef(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glTranslatef","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTranslatef(_context, x, y, z);
}

static void REGAL_CALL trace_glVertex2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("trace_glVertex2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2d(_context, x, y);
}

static void REGAL_CALL trace_glVertex2dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glVertex2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2dv(_context, v);
}

static void REGAL_CALL trace_glVertex2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("trace_glVertex2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2f(_context, x, y);
}

static void REGAL_CALL trace_glVertex2fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glVertex2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2fv(_context, v);
}

static void REGAL_CALL trace_glVertex2i(RegalContext *_context, GLint x, GLint y)
{
  Internal("trace_glVertex2i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2i(_context, x, y);
}

static void REGAL_CALL trace_glVertex2iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glVertex2iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2iv(_context, v);
}

static void REGAL_CALL trace_glVertex2s(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("trace_glVertex2s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2s(_context, x, y);
}

static void REGAL_CALL trace_glVertex2sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glVertex2sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2sv(_context, v);
}

static void REGAL_CALL trace_glVertex3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glVertex3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3d(_context, x, y, z);
}

static void REGAL_CALL trace_glVertex3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glVertex3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3dv(_context, v);
}

static void REGAL_CALL trace_glVertex3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glVertex3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3f(_context, x, y, z);
}

static void REGAL_CALL trace_glVertex3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glVertex3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3fv(_context, v);
}

static void REGAL_CALL trace_glVertex3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("trace_glVertex3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3i(_context, x, y, z);
}

static void REGAL_CALL trace_glVertex3iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glVertex3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3iv(_context, v);
}

static void REGAL_CALL trace_glVertex3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glVertex3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3s(_context, x, y, z);
}

static void REGAL_CALL trace_glVertex3sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glVertex3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3sv(_context, v);
}

static void REGAL_CALL trace_glVertex4d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glVertex4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4d(_context, x, y, z, w);
}

static void REGAL_CALL trace_glVertex4dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glVertex4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4dv(_context, v);
}

static void REGAL_CALL trace_glVertex4f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glVertex4f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4f(_context, x, y, z, w);
}

static void REGAL_CALL trace_glVertex4fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glVertex4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4fv(_context, v);
}

static void REGAL_CALL trace_glVertex4i(RegalContext *_context, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glVertex4i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4i(_context, x, y, z, w);
}

static void REGAL_CALL trace_glVertex4iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glVertex4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4iv(_context, v);
}

static void REGAL_CALL trace_glVertex4s(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("trace_glVertex4s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4s(_context, x, y, z, w);
}

static void REGAL_CALL trace_glVertex4sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glVertex4sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4sv(_context, v);
}

static void REGAL_CALL trace_glViewport(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glViewport","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glViewport(_context, x, y, width, height);
}

// GL_VERSION_1_1

static GLboolean REGAL_CALL trace_glAreTexturesResident(RegalContext *_context, GLsizei n, const GLuint *textures, GLboolean *residences)
{
  Internal("trace_glAreTexturesResident","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glAreTexturesResident(_context, n, textures, residences);
  return ret;
}

static void REGAL_CALL trace_glArrayElement(RegalContext *_context, GLint index)
{
  Internal("trace_glArrayElement","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glArrayElement(_context, index);
}

static void REGAL_CALL trace_glBindTexture(RegalContext *_context, GLenum target, GLuint texture)
{
  Internal("trace_glBindTexture","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindTexture(_context, target, texture);
}

static void REGAL_CALL trace_glColorPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glColorPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorPointer(_context, size, type, stride, pointer);
}

static void REGAL_CALL trace_glCopyTexImage1D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Internal("trace_glCopyTexImage1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexImage1D(_context, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL trace_glCopyTexImage2D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("trace_glCopyTexImage2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexImage2D(_context, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL trace_glCopyTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyTexSubImage1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexSubImage1D(_context, target, level, xoffset, x, y, width);
}

static void REGAL_CALL trace_glCopyTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyTexSubImage2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexSubImage2D(_context, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL trace_glDeleteTextures(RegalContext *_context, GLsizei n, const GLuint *textures)
{
  Internal("trace_glDeleteTextures","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteTextures(_context, n, textures);
}

static void REGAL_CALL trace_glDisableClientState(RegalContext *_context, GLenum cap)
{
  Internal("trace_glDisableClientState","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableClientState(_context, cap);
}

static void REGAL_CALL trace_glDrawArrays(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  Internal("trace_glDrawArrays","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawArrays(_context, mode, first, count);
}

static void REGAL_CALL trace_glDrawElements(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  Internal("trace_glDrawElements","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElements(_context, mode, count, type, indices);
}

static void REGAL_CALL trace_glEdgeFlagPointer(RegalContext *_context, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glEdgeFlagPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEdgeFlagPointer(_context, stride, pointer);
}

static void REGAL_CALL trace_glEnableClientState(RegalContext *_context, GLenum cap)
{
  Internal("trace_glEnableClientState","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableClientState(_context, cap);
}

static void REGAL_CALL trace_glGenTextures(RegalContext *_context, GLsizei n, GLuint *textures)
{
  Internal("trace_glGenTextures","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenTextures(_context, n, textures);
}

static void REGAL_CALL trace_glGetPointerv(RegalContext *_context, GLenum pname, GLvoid **params)
{
  Internal("trace_glGetPointerv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPointerv(_context, pname, params);
}

static void REGAL_CALL trace_glIndexPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glIndexPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexPointer(_context, type, stride, pointer);
}

static void REGAL_CALL trace_glIndexub(RegalContext *_context, GLubyte c)
{
  Internal("trace_glIndexub","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexub(_context, c);
}

static void REGAL_CALL trace_glIndexubv(RegalContext *_context, const GLubyte *c)
{
  Internal("trace_glIndexubv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexubv(_context, c);
}

static void REGAL_CALL trace_glInterleavedArrays(RegalContext *_context, GLenum format, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glInterleavedArrays","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInterleavedArrays(_context, format, stride, pointer);
}

static GLboolean REGAL_CALL trace_glIsTexture(RegalContext *_context, GLuint texture)
{
  Internal("trace_glIsTexture","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsTexture(_context, texture);
  return ret;
}

static void REGAL_CALL trace_glNormalPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glNormalPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalPointer(_context, type, stride, pointer);
}

static void REGAL_CALL trace_glPolygonOffset(RegalContext *_context, GLfloat factor, GLfloat units)
{
  Internal("trace_glPolygonOffset","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPolygonOffset(_context, factor, units);
}

static void REGAL_CALL trace_glPopClientAttrib(RegalContext *_context)
{
  Internal("trace_glPopClientAttrib","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPopClientAttrib(_context);
}

static void REGAL_CALL trace_glPrioritizeTextures(RegalContext *_context, GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  Internal("trace_glPrioritizeTextures","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPrioritizeTextures(_context, n, textures, priorities);
}

static void REGAL_CALL trace_glPushClientAttrib(RegalContext *_context, GLbitfield mask)
{
  Internal("trace_glPushClientAttrib","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPushClientAttrib(_context, mask);
}

static void REGAL_CALL trace_glTexCoordPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glTexCoordPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordPointer(_context, size, type, stride, pointer);
}

static void REGAL_CALL trace_glTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexSubImage1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexSubImage1D(_context, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL trace_glTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexSubImage2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexSubImage2D(_context, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL trace_glVertexPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexPointer(_context, size, type, stride, pointer);
}

// GL_VERSION_1_2

static void REGAL_CALL trace_glBlendColor(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Internal("trace_glBlendColor","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendColor(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glBlendEquation(RegalContext *_context, GLenum mode)
{
  Internal("trace_glBlendEquation","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquation(_context, mode);
}

static void REGAL_CALL trace_glCopyTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyTexSubImage3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexSubImage3D(_context, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL trace_glDrawRangeElements(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  Internal("trace_glDrawRangeElements","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawRangeElements(_context, mode, start, end, count, type, indices);
}

static void REGAL_CALL trace_glTexImage3D(RegalContext *_context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexImage3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage3D(_context, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL trace_glTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexSubImage3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexSubImage3D(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_VERSION_1_3

static void REGAL_CALL trace_glActiveTexture(RegalContext *_context, GLenum texture)
{
  Internal("trace_glActiveTexture","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glActiveTexture(_context, texture);
}

static void REGAL_CALL trace_glClientActiveTexture(RegalContext *_context, GLenum texture)
{
  Internal("trace_glClientActiveTexture","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClientActiveTexture(_context, texture);
}

static void REGAL_CALL trace_glCompressedTexImage1D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexImage1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexImage1D(_context, target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexImage2D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexImage2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexImage2D(_context, target, level, internalformat, width, height, border, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexImage3D(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexImage3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexImage3D(_context, target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexSubImage1D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexSubImage1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexSubImage1D(_context, target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexSubImage2D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexSubImage2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexSubImage2D(_context, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexSubImage3D(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexSubImage3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexSubImage3D(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL trace_glGetCompressedTexImage(RegalContext *_context, GLenum target, GLint lod, GLvoid *img)
{
  Internal("trace_glGetCompressedTexImage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCompressedTexImage(_context, target, lod, img);
}

static void REGAL_CALL trace_glLoadTransposeMatrixd(RegalContext *_context, const GLdouble *m)
{
  Internal("trace_glLoadTransposeMatrixd","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadTransposeMatrixd(_context, m);
}

static void REGAL_CALL trace_glLoadTransposeMatrixf(RegalContext *_context, const GLfloat *m)
{
  Internal("trace_glLoadTransposeMatrixf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadTransposeMatrixf(_context, m);
}

static void REGAL_CALL trace_glMultTransposeMatrixd(RegalContext *_context, const GLdouble *m)
{
  Internal("trace_glMultTransposeMatrixd","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultTransposeMatrixd(_context, m);
}

static void REGAL_CALL trace_glMultTransposeMatrixf(RegalContext *_context, const GLfloat *m)
{
  Internal("trace_glMultTransposeMatrixf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultTransposeMatrixf(_context, m);
}

static void REGAL_CALL trace_glMultiTexCoord1d(RegalContext *_context, GLenum target, GLdouble s)
{
  Internal("trace_glMultiTexCoord1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1d(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("trace_glMultiTexCoord1dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1dv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord1f(RegalContext *_context, GLenum target, GLfloat s)
{
  Internal("trace_glMultiTexCoord1f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1f(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("trace_glMultiTexCoord1fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1fv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord1i(RegalContext *_context, GLenum target, GLint s)
{
  Internal("trace_glMultiTexCoord1i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1i(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1iv(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("trace_glMultiTexCoord1iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1iv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord1s(RegalContext *_context, GLenum target, GLshort s)
{
  Internal("trace_glMultiTexCoord1s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1s(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("trace_glMultiTexCoord1sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1sv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t)
{
  Internal("trace_glMultiTexCoord2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2d(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("trace_glMultiTexCoord2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2dv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t)
{
  Internal("trace_glMultiTexCoord2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2f(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("trace_glMultiTexCoord2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2fv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2i(RegalContext *_context, GLenum target, GLint s, GLint t)
{
  Internal("trace_glMultiTexCoord2i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2i(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2iv(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("trace_glMultiTexCoord2iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2iv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2s(RegalContext *_context, GLenum target, GLshort s, GLshort t)
{
  Internal("trace_glMultiTexCoord2s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2s(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("trace_glMultiTexCoord2sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2sv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  Internal("trace_glMultiTexCoord3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3d(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("trace_glMultiTexCoord3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3dv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  Internal("trace_glMultiTexCoord3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3f(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("trace_glMultiTexCoord3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3fv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3i(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r)
{
  Internal("trace_glMultiTexCoord3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3i(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3iv(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("trace_glMultiTexCoord3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3iv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3s(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r)
{
  Internal("trace_glMultiTexCoord3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3s(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("trace_glMultiTexCoord3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3sv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4d(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Internal("trace_glMultiTexCoord4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4d(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4dv(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("trace_glMultiTexCoord4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4dv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4f(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Internal("trace_glMultiTexCoord4f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4f(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4fv(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("trace_glMultiTexCoord4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4fv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4i(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  Internal("trace_glMultiTexCoord4i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4i(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4iv(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("trace_glMultiTexCoord4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4iv(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4s(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Internal("trace_glMultiTexCoord4s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4s(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4sv(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("trace_glMultiTexCoord4sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4sv(_context, target, v);
}

static void REGAL_CALL trace_glSampleCoverage(RegalContext *_context, GLclampf value, GLboolean invert)
{
  Internal("trace_glSampleCoverage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSampleCoverage(_context, value, invert);
}

// GL_VERSION_1_4

static void REGAL_CALL trace_glBlendFuncSeparate(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("trace_glBlendFuncSeparate","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFuncSeparate(_context, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

static void REGAL_CALL trace_glFogCoordPointer(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glFogCoordPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordPointer(_context, type, stride, pointer);
}

static void REGAL_CALL trace_glFogCoordd(RegalContext *_context, GLdouble coord)
{
  Internal("trace_glFogCoordd","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordd(_context, coord);
}

static void REGAL_CALL trace_glFogCoorddv(RegalContext *_context, const GLdouble *coord)
{
  Internal("trace_glFogCoorddv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoorddv(_context, coord);
}

static void REGAL_CALL trace_glFogCoordf(RegalContext *_context, GLfloat coord)
{
  Internal("trace_glFogCoordf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordf(_context, coord);
}

static void REGAL_CALL trace_glFogCoordfv(RegalContext *_context, const GLfloat *coord)
{
  Internal("trace_glFogCoordfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordfv(_context, coord);
}

static void REGAL_CALL trace_glMultiDrawArrays(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Internal("trace_glMultiDrawArrays","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawArrays(_context, mode, first, count, primcount);
}

static void REGAL_CALL trace_glMultiDrawElements(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
  Internal("trace_glMultiDrawElements","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawElements(_context, mode, count, type, indices, primcount);
}

static void REGAL_CALL trace_glPointParameterf(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glPointParameterf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterf(_context, pname, param);
}

static void REGAL_CALL trace_glPointParameterfv(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glPointParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterfv(_context, pname, params);
}

static void REGAL_CALL trace_glPointParameteri(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glPointParameteri","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameteri(_context, pname, param);
}

static void REGAL_CALL trace_glPointParameteriv(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("trace_glPointParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameteriv(_context, pname, params);
}

static void REGAL_CALL trace_glSecondaryColor3b(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  Internal("trace_glSecondaryColor3b","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3b(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3bv(RegalContext *_context, const GLbyte *v)
{
  Internal("trace_glSecondaryColor3bv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3bv(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3d(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  Internal("trace_glSecondaryColor3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3d(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3dv(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glSecondaryColor3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3dv(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3f(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  Internal("trace_glSecondaryColor3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3f(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3fv(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glSecondaryColor3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3fv(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3i(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  Internal("trace_glSecondaryColor3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3i(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3iv(RegalContext *_context, const GLint *v)
{
  Internal("trace_glSecondaryColor3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3iv(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3s(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  Internal("trace_glSecondaryColor3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3s(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3sv(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glSecondaryColor3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3sv(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3ub(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  Internal("trace_glSecondaryColor3ub","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3ub(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3ubv(RegalContext *_context, const GLubyte *v)
{
  Internal("trace_glSecondaryColor3ubv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3ubv(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3ui(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  Internal("trace_glSecondaryColor3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3ui(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3uiv(RegalContext *_context, const GLuint *v)
{
  Internal("trace_glSecondaryColor3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3uiv(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3us(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  Internal("trace_glSecondaryColor3us","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3us(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3usv(RegalContext *_context, const GLushort *v)
{
  Internal("trace_glSecondaryColor3usv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3usv(_context, v);
}

static void REGAL_CALL trace_glSecondaryColorPointer(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glSecondaryColorPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColorPointer(_context, size, type, stride, pointer);
}

static void REGAL_CALL trace_glWindowPos2d(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("trace_glWindowPos2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2d(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2dv(RegalContext *_context, const GLdouble *p)
{
  Internal("trace_glWindowPos2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2dv(_context, p);
}

static void REGAL_CALL trace_glWindowPos2f(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("trace_glWindowPos2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2f(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2fv(RegalContext *_context, const GLfloat *p)
{
  Internal("trace_glWindowPos2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2fv(_context, p);
}

static void REGAL_CALL trace_glWindowPos2i(RegalContext *_context, GLint x, GLint y)
{
  Internal("trace_glWindowPos2i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2i(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2iv(RegalContext *_context, const GLint *p)
{
  Internal("trace_glWindowPos2iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2iv(_context, p);
}

static void REGAL_CALL trace_glWindowPos2s(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("trace_glWindowPos2s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2s(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2sv(RegalContext *_context, const GLshort *p)
{
  Internal("trace_glWindowPos2sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2sv(_context, p);
}

static void REGAL_CALL trace_glWindowPos3d(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glWindowPos3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3d(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3dv(RegalContext *_context, const GLdouble *p)
{
  Internal("trace_glWindowPos3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3dv(_context, p);
}

static void REGAL_CALL trace_glWindowPos3f(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glWindowPos3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3f(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3fv(RegalContext *_context, const GLfloat *p)
{
  Internal("trace_glWindowPos3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3fv(_context, p);
}

static void REGAL_CALL trace_glWindowPos3i(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("trace_glWindowPos3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3i(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3iv(RegalContext *_context, const GLint *p)
{
  Internal("trace_glWindowPos3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3iv(_context, p);
}

static void REGAL_CALL trace_glWindowPos3s(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glWindowPos3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3s(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3sv(RegalContext *_context, const GLshort *p)
{
  Internal("trace_glWindowPos3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3sv(_context, p);
}

// GL_VERSION_1_5

static void REGAL_CALL trace_glBeginQuery(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("trace_glBeginQuery","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginQuery(_context, target, id);
}

static void REGAL_CALL trace_glBindBuffer(RegalContext *_context, GLenum target, GLuint buffer)
{
  Internal("trace_glBindBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBuffer(_context, target, buffer);
}

static void REGAL_CALL trace_glBufferData(RegalContext *_context, GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Internal("trace_glBufferData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBufferData(_context, target, size, data, usage);
}

static void REGAL_CALL trace_glBufferSubData(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Internal("trace_glBufferSubData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBufferSubData(_context, target, offset, size, data);
}

static void REGAL_CALL trace_glDeleteBuffers(RegalContext *_context, GLsizei n, const GLuint *buffers)
{
  Internal("trace_glDeleteBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteBuffers(_context, n, buffers);
}

static void REGAL_CALL trace_glDeleteQueries(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("trace_glDeleteQueries","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteQueries(_context, n, ids);
}

static void REGAL_CALL trace_glEndQuery(RegalContext *_context, GLenum target)
{
  Internal("trace_glEndQuery","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndQuery(_context, target);
}

static void REGAL_CALL trace_glGenBuffers(RegalContext *_context, GLsizei n, GLuint *buffers)
{
  Internal("trace_glGenBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenBuffers(_context, n, buffers);
}

static void REGAL_CALL trace_glGenQueries(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("trace_glGenQueries","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenQueries(_context, n, ids);
}

static void REGAL_CALL trace_glGetBufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetBufferParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetBufferPointerv(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params)
{
  Internal("trace_glGetBufferPointerv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferPointerv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetBufferSubData(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  Internal("trace_glGetBufferSubData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferSubData(_context, target, offset, size, data);
}

static void REGAL_CALL trace_glGetQueryObjectiv(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("trace_glGetQueryObjectiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjectiv(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetQueryObjectuiv(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("trace_glGetQueryObjectuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjectuiv(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetQueryiv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetQueryiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryiv(_context, target, pname, params);
}

static GLboolean REGAL_CALL trace_glIsBuffer(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glIsBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsBuffer(_context, buffer);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsQuery(RegalContext *_context, GLuint id)
{
  Internal("trace_glIsQuery","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsQuery(_context, id);
  return ret;
}

static GLvoid *REGAL_CALL trace_glMapBuffer(RegalContext *_context, GLenum target, GLenum access)
{
  Internal("trace_glMapBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLvoid * ret = Trace::glMapBuffer(_context, target, access);
  return ret;
}

static GLboolean REGAL_CALL trace_glUnmapBuffer(RegalContext *_context, GLenum target)
{
  Internal("trace_glUnmapBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glUnmapBuffer(_context, target);
  return ret;
}

// GL_VERSION_2_0

static void REGAL_CALL trace_glAttachShader(RegalContext *_context, GLuint program, GLuint shader)
{
  Internal("trace_glAttachShader","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAttachShader(_context, program, shader);
}

static void REGAL_CALL trace_glBindAttribLocation(RegalContext *_context, GLuint program, GLuint index, const GLchar *name)
{
  Internal("trace_glBindAttribLocation","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindAttribLocation(_context, program, index, name);
}

static void REGAL_CALL trace_glBlendEquationSeparate(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("trace_glBlendEquationSeparate","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationSeparate(_context, modeRGB, modeAlpha);
}

static void REGAL_CALL trace_glCompileShader(RegalContext *_context, GLuint shader)
{
  Internal("trace_glCompileShader","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompileShader(_context, shader);
}

static GLuint REGAL_CALL trace_glCreateProgram(RegalContext *_context)
{
  Internal("trace_glCreateProgram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glCreateProgram(_context);
  return ret;
}

static GLuint REGAL_CALL trace_glCreateShader(RegalContext *_context, GLenum type)
{
  Internal("trace_glCreateShader","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glCreateShader(_context, type);
  return ret;
}

static void REGAL_CALL trace_glDeleteProgram(RegalContext *_context, GLuint program)
{
  Internal("trace_glDeleteProgram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteProgram(_context, program);
}

static void REGAL_CALL trace_glDeleteShader(RegalContext *_context, GLuint shader)
{
  Internal("trace_glDeleteShader","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteShader(_context, shader);
}

static void REGAL_CALL trace_glDetachShader(RegalContext *_context, GLuint program, GLuint shader)
{
  Internal("trace_glDetachShader","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDetachShader(_context, program, shader);
}

static void REGAL_CALL trace_glDisableVertexAttribArray(RegalContext *_context, GLuint index)
{
  Internal("trace_glDisableVertexAttribArray","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableVertexAttribArray(_context, index);
}

static void REGAL_CALL trace_glDrawBuffers(RegalContext *_context, GLsizei n, const GLenum *bufs)
{
  Internal("trace_glDrawBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawBuffers(_context, n, bufs);
}

static void REGAL_CALL trace_glEnableVertexAttribArray(RegalContext *_context, GLuint index)
{
  Internal("trace_glEnableVertexAttribArray","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableVertexAttribArray(_context, index);
}

static void REGAL_CALL trace_glGetActiveAttrib(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  Internal("trace_glGetActiveAttrib","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveAttrib(_context, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL trace_glGetActiveUniform(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  Internal("trace_glGetActiveUniform","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveUniform(_context, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL trace_glGetAttachedShaders(RegalContext *_context, GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
  Internal("trace_glGetAttachedShaders","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetAttachedShaders(_context, program, maxCount, count, shaders);
}

static GLint REGAL_CALL trace_glGetAttribLocation(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("trace_glGetAttribLocation","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetAttribLocation(_context, program, name);
  return ret;
}

static void REGAL_CALL trace_glGetProgramInfoLog(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Internal("trace_glGetProgramInfoLog","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramInfoLog(_context, program, bufSize, length, infoLog);
}

static void REGAL_CALL trace_glGetProgramiv(RegalContext *_context, GLuint program, GLenum pname, GLint *params)
{
  Internal("trace_glGetProgramiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramiv(_context, program, pname, params);
}

static void REGAL_CALL trace_glGetShaderInfoLog(RegalContext *_context, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Internal("trace_glGetShaderInfoLog","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetShaderInfoLog(_context, shader, bufSize, length, infoLog);
}

static void REGAL_CALL trace_glGetShaderSource(RegalContext *_context, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
  Internal("trace_glGetShaderSource","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetShaderSource(_context, shader, bufSize, length, source);
}

static void REGAL_CALL trace_glGetShaderiv(RegalContext *_context, GLuint shader, GLenum pname, GLint *params)
{
  Internal("trace_glGetShaderiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetShaderiv(_context, shader, pname, params);
}

static GLint REGAL_CALL trace_glGetUniformLocation(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("trace_glGetUniformLocation","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetUniformLocation(_context, program, name);
  return ret;
}

static void REGAL_CALL trace_glGetUniformfv(RegalContext *_context, GLuint program, GLint location, GLfloat *params)
{
  Internal("trace_glGetUniformfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformfv(_context, program, location, params);
}

static void REGAL_CALL trace_glGetUniformiv(RegalContext *_context, GLuint program, GLint location, GLint *params)
{
  Internal("trace_glGetUniformiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformiv(_context, program, location, params);
}

static void REGAL_CALL trace_glGetVertexAttribPointerv(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer)
{
  Internal("trace_glGetVertexAttribPointerv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribPointerv(_context, index, pname, pointer);
}

static void REGAL_CALL trace_glGetVertexAttribdv(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetVertexAttribdv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribdv(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribfv(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetVertexAttribfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribfv(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribiv(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("trace_glGetVertexAttribiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribiv(_context, index, pname, params);
}

static GLboolean REGAL_CALL trace_glIsProgram(RegalContext *_context, GLuint program)
{
  Internal("trace_glIsProgram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsProgram(_context, program);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsShader(RegalContext *_context, GLuint shader)
{
  Internal("trace_glIsShader","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsShader(_context, shader);
  return ret;
}

static void REGAL_CALL trace_glLinkProgram(RegalContext *_context, GLuint program)
{
  Internal("trace_glLinkProgram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLinkProgram(_context, program);
}

static void REGAL_CALL trace_glShaderSource(RegalContext *_context, GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
  Internal("trace_glShaderSource","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glShaderSource(_context, shader, count, string, length);
}

static void REGAL_CALL trace_glStencilFuncSeparate(RegalContext *_context, GLenum face, GLenum func, GLint ref, GLuint mask)
{
  Internal("trace_glStencilFuncSeparate","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilFuncSeparate(_context, face, func, ref, mask);
}

static void REGAL_CALL trace_glStencilMaskSeparate(RegalContext *_context, GLenum face, GLuint mask)
{
  Internal("trace_glStencilMaskSeparate","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilMaskSeparate(_context, face, mask);
}

static void REGAL_CALL trace_glStencilOpSeparate(RegalContext *_context, GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
  Internal("trace_glStencilOpSeparate","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilOpSeparate(_context, face, fail, zfail, zpass);
}

static void REGAL_CALL trace_glUniform1f(RegalContext *_context, GLint location, GLfloat v0)
{
  Internal("trace_glUniform1f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1f(_context, location, v0);
}

static void REGAL_CALL trace_glUniform1fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glUniform1fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1fv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform1i(RegalContext *_context, GLint location, GLint v0)
{
  Internal("trace_glUniform1i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1i(_context, location, v0);
}

static void REGAL_CALL trace_glUniform1iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glUniform1iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1iv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1)
{
  Internal("trace_glUniform2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2f(_context, location, v0, v1);
}

static void REGAL_CALL trace_glUniform2fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glUniform2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2fv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2i(RegalContext *_context, GLint location, GLint v0, GLint v1)
{
  Internal("trace_glUniform2i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2i(_context, location, v0, v1);
}

static void REGAL_CALL trace_glUniform2iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glUniform2iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2iv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Internal("trace_glUniform3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3f(_context, location, v0, v1, v2);
}

static void REGAL_CALL trace_glUniform3fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glUniform3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3fv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3i(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2)
{
  Internal("trace_glUniform3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3i(_context, location, v0, v1, v2);
}

static void REGAL_CALL trace_glUniform3iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glUniform3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3iv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4f(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Internal("trace_glUniform4f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4f(_context, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glUniform4fv(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glUniform4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4fv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4i(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Internal("trace_glUniform4i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4i(_context, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glUniform4iv(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glUniform4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4iv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniformMatrix2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix2fv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix3fv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix4fv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUseProgram(RegalContext *_context, GLuint program)
{
  Internal("trace_glUseProgram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUseProgram(_context, program);
}

static void REGAL_CALL trace_glValidateProgram(RegalContext *_context, GLuint program)
{
  Internal("trace_glValidateProgram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glValidateProgram(_context, program);
}

static void REGAL_CALL trace_glVertexAttrib1d(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("trace_glVertexAttrib1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1d(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib1dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1dv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib1f(RegalContext *_context, GLuint index, GLfloat x)
{
  Internal("trace_glVertexAttrib1f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1f(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib1fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1fv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib1s(RegalContext *_context, GLuint index, GLshort x)
{
  Internal("trace_glVertexAttrib1s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1s(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib1sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1sv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("trace_glVertexAttrib2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2d(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2dv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y)
{
  Internal("trace_glVertexAttrib2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2f(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2fv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2s(RegalContext *_context, GLuint index, GLshort x, GLshort y)
{
  Internal("trace_glVertexAttrib2s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2s(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib2sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2sv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glVertexAttrib3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3d(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3dv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glVertexAttrib3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3f(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3fv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3s(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glVertexAttrib3s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3s(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib3sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3sv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4Nbv(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("trace_glVertexAttrib4Nbv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4Nbv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4Niv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttrib4Niv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4Niv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4Nsv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib4Nsv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4Nsv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4Nub(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Internal("trace_glVertexAttrib4Nub","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4Nub(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4Nubv(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("trace_glVertexAttrib4Nubv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4Nubv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4Nuiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttrib4Nuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4Nuiv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4Nusv(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("trace_glVertexAttrib4Nusv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4Nusv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4bv(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("trace_glVertexAttrib4bv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4bv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glVertexAttrib4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4d(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4dv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4f(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glVertexAttrib4f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4f(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4fv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4fv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttrib4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4iv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4s(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("trace_glVertexAttrib4s","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4s(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib4sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4sv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4ubv(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("trace_glVertexAttrib4ubv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4ubv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttrib4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4uiv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4usv(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("trace_glVertexAttrib4usv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4usv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexAttribPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribPointer(_context, index, size, type, normalized, stride, pointer);
}

// GL_VERSION_2_1

static void REGAL_CALL trace_glUniformMatrix2x3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix2x3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix2x3fv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix2x4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix2x4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix2x4fv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix3x2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix3x2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix3x2fv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix3x4fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix3x4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix3x4fv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix4x2fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix4x2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix4x2fv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix4x3fv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix4x3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix4x3fv(_context, location, count, transpose, value);
}

// GL_VERSION_3_0

static void REGAL_CALL trace_glBeginConditionalRender(RegalContext *_context, GLuint id, GLenum mode)
{
  Internal("trace_glBeginConditionalRender","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginConditionalRender(_context, id, mode);
}

static void REGAL_CALL trace_glBeginTransformFeedback(RegalContext *_context, GLenum primitiveMode)
{
  Internal("trace_glBeginTransformFeedback","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginTransformFeedback(_context, primitiveMode);
}

static void REGAL_CALL trace_glBindFragDataLocation(RegalContext *_context, GLuint program, GLuint color, const GLchar *name)
{
  Internal("trace_glBindFragDataLocation","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindFragDataLocation(_context, program, color, name);
}

static void REGAL_CALL trace_glClampColor(RegalContext *_context, GLenum target, GLenum clamp)
{
  Internal("trace_glClampColor","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClampColor(_context, target, clamp);
}

static void REGAL_CALL trace_glClearBufferfi(RegalContext *_context, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  Internal("trace_glClearBufferfi","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearBufferfi(_context, buffer, drawbuffer, depth, stencil);
}

static void REGAL_CALL trace_glClearBufferfv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
  Internal("trace_glClearBufferfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearBufferfv(_context, buffer, drawbuffer, value);
}

static void REGAL_CALL trace_glClearBufferiv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLint *value)
{
  Internal("trace_glClearBufferiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearBufferiv(_context, buffer, drawbuffer, value);
}

static void REGAL_CALL trace_glClearBufferuiv(RegalContext *_context, GLenum buffer, GLint drawbuffer, const GLuint *value)
{
  Internal("trace_glClearBufferuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearBufferuiv(_context, buffer, drawbuffer, value);
}

static void REGAL_CALL trace_glColorMaski(RegalContext *_context, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  Internal("trace_glColorMaski","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorMaski(_context, index, r, g, b, a);
}

static void REGAL_CALL trace_glDisablei(RegalContext *_context, GLenum cap, GLuint index)
{
  Internal("trace_glDisablei","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisablei(_context, cap, index);
}

static void REGAL_CALL trace_glEnablei(RegalContext *_context, GLenum cap, GLuint index)
{
  Internal("trace_glEnablei","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnablei(_context, cap, index);
}

static void REGAL_CALL trace_glEndConditionalRender(RegalContext *_context)
{
  Internal("trace_glEndConditionalRender","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndConditionalRender(_context);
}

static void REGAL_CALL trace_glEndTransformFeedback(RegalContext *_context)
{
  Internal("trace_glEndTransformFeedback","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndTransformFeedback(_context);
}

static void REGAL_CALL trace_glGetBooleani_v(RegalContext *_context, GLenum target, GLuint index, GLboolean *data)
{
  Internal("trace_glGetBooleani_v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBooleani_v(_context, target, index, data);
}

static GLint REGAL_CALL trace_glGetFragDataLocation(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("trace_glGetFragDataLocation","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetFragDataLocation(_context, program, name);
  return ret;
}

static const GLubyte *REGAL_CALL trace_glGetStringi(RegalContext *_context, GLenum name, GLuint index)
{
  Internal("trace_glGetStringi","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  const GLubyte * ret = Trace::glGetStringi(_context, name, index);
  return ret;
}

static void REGAL_CALL trace_glGetTexParameterIiv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetTexParameterIiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexParameterIiv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetTexParameterIuiv(RegalContext *_context, GLenum target, GLenum pname, GLuint *params)
{
  Internal("trace_glGetTexParameterIuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexParameterIuiv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetTransformFeedbackVarying(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Internal("trace_glGetTransformFeedbackVarying","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTransformFeedbackVarying(_context, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL trace_glGetUniformuiv(RegalContext *_context, GLuint program, GLint location, GLuint *params)
{
  Internal("trace_glGetUniformuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformuiv(_context, program, location, params);
}

static void REGAL_CALL trace_glGetVertexAttribIiv(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("trace_glGetVertexAttribIiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribIiv(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribIuiv(RegalContext *_context, GLuint index, GLenum pname, GLuint *params)
{
  Internal("trace_glGetVertexAttribIuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribIuiv(_context, index, pname, params);
}

static GLboolean REGAL_CALL trace_glIsEnabledi(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("trace_glIsEnabledi","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsEnabledi(_context, target, index);
  return ret;
}

static void REGAL_CALL trace_glTexParameterIiv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glTexParameterIiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameterIiv(_context, target, pname, params);
}

static void REGAL_CALL trace_glTexParameterIuiv(RegalContext *_context, GLenum target, GLenum pname, const GLuint *params)
{
  Internal("trace_glTexParameterIuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameterIuiv(_context, target, pname, params);
}

static void REGAL_CALL trace_glTransformFeedbackVaryings(RegalContext *_context, GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
  Internal("trace_glTransformFeedbackVaryings","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTransformFeedbackVaryings(_context, program, count, varyings, bufferMode);
}

static void REGAL_CALL trace_glUniform1ui(RegalContext *_context, GLint location, GLuint v0)
{
  Internal("trace_glUniform1ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1ui(_context, location, v0);
}

static void REGAL_CALL trace_glUniform1uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glUniform1uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1uiv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1)
{
  Internal("trace_glUniform2ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2ui(_context, location, v0, v1);
}

static void REGAL_CALL trace_glUniform2uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glUniform2uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2uiv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Internal("trace_glUniform3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3ui(_context, location, v0, v1, v2);
}

static void REGAL_CALL trace_glUniform3uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glUniform3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3uiv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4ui(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Internal("trace_glUniform4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4ui(_context, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glUniform4uiv(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glUniform4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4uiv(_context, location, count, value);
}

static void REGAL_CALL trace_glVertexAttribI1i(RegalContext *_context, GLuint index, GLint x)
{
  Internal("trace_glVertexAttribI1i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI1i(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttribI1iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttribI1iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI1iv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI1ui(RegalContext *_context, GLuint index, GLuint x)
{
  Internal("trace_glVertexAttribI1ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI1ui(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttribI1uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttribI1uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI1uiv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI2i(RegalContext *_context, GLuint index, GLint x, GLint y)
{
  Internal("trace_glVertexAttribI2i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI2i(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttribI2iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttribI2iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI2iv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI2ui(RegalContext *_context, GLuint index, GLuint x, GLuint y)
{
  Internal("trace_glVertexAttribI2ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI2ui(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttribI2uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttribI2uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI2uiv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI3i(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z)
{
  Internal("trace_glVertexAttribI3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI3i(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttribI3iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttribI3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI3iv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI3ui(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z)
{
  Internal("trace_glVertexAttribI3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI3ui(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttribI3uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttribI3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI3uiv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4bv(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("trace_glVertexAttribI4bv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4bv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4i(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glVertexAttribI4i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4i(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttribI4iv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttribI4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4iv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4sv(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttribI4sv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4sv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4ubv(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("trace_glVertexAttribI4ubv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4ubv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4ui(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("trace_glVertexAttribI4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4ui(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttribI4uiv(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttribI4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4uiv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4usv(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("trace_glVertexAttribI4usv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4usv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribIPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexAttribIPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribIPointer(_context, index, size, type, stride, pointer);
}

// GL_VERSION_3_1

static void REGAL_CALL trace_glDrawArraysInstanced(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Internal("trace_glDrawArraysInstanced","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawArraysInstanced(_context, mode, start, count, primcount);
}

static void REGAL_CALL trace_glDrawElementsInstanced(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Internal("trace_glDrawElementsInstanced","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementsInstanced(_context, mode, count, type, indices, primcount);
}

static void REGAL_CALL trace_glPrimitiveRestartIndex(RegalContext *_context, GLuint index)
{
  Internal("trace_glPrimitiveRestartIndex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPrimitiveRestartIndex(_context, index);
}

static void REGAL_CALL trace_glTexBuffer(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("trace_glTexBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexBuffer(_context, target, internalformat, buffer);
}

// GL_VERSION_3_2

static void REGAL_CALL trace_glFramebufferTexture(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Internal("trace_glFramebufferTexture","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture(_context, target, attachment, texture, level);
}

static void REGAL_CALL trace_glGetBufferParameteri64v(RegalContext *_context, GLenum target, GLenum pname, GLint64 *params)
{
  Internal("trace_glGetBufferParameteri64v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferParameteri64v(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetInteger64i_v(RegalContext *_context, GLenum target, GLuint index, GLint64 *data)
{
  Internal("trace_glGetInteger64i_v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetInteger64i_v(_context, target, index, data);
}

// GL_VERSION_3_3

static void REGAL_CALL trace_glVertexAttribDivisor(RegalContext *_context, GLuint index, GLuint divisor)
{
  Internal("trace_glVertexAttribDivisor","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribDivisor(_context, index, divisor);
}

// GL_VERSION_4_0

static void REGAL_CALL trace_glBlendEquationSeparatei(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("trace_glBlendEquationSeparatei","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationSeparatei(_context, buf, modeRGB, modeAlpha);
}

static void REGAL_CALL trace_glBlendEquationi(RegalContext *_context, GLuint buf, GLenum mode)
{
  Internal("trace_glBlendEquationi","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationi(_context, buf, mode);
}

static void REGAL_CALL trace_glBlendFuncSeparatei(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Internal("trace_glBlendFuncSeparatei","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFuncSeparatei(_context, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void REGAL_CALL trace_glBlendFunci(RegalContext *_context, GLuint buf, GLenum src, GLenum dst)
{
  Internal("trace_glBlendFunci","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFunci(_context, buf, src, dst);
}

// GL_3DFX_tbuffer

static void REGAL_CALL trace_glTbufferMask3DFX(RegalContext *_context, GLuint mask)
{
  Internal("trace_glTbufferMask3DFX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTbufferMask3DFX(_context, mask);
}

// GL_AMD_debug_output

static void REGAL_CALL trace_glDebugMessageCallbackAMD(RegalContext *_context, GLDEBUGPROCAMD callback, GLvoid *userParam)
{
  Internal("trace_glDebugMessageCallbackAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageCallbackAMD(_context, callback, userParam);
}

static void REGAL_CALL trace_glDebugMessageEnableAMD(RegalContext *_context, GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Internal("trace_glDebugMessageEnableAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageEnableAMD(_context, category, severity, count, ids, enabled);
}

static void REGAL_CALL trace_glDebugMessageInsertAMD(RegalContext *_context, GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
{
  Internal("trace_glDebugMessageInsertAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageInsertAMD(_context, category, severity, id, length, buf);
}

static GLuint REGAL_CALL trace_glGetDebugMessageLogAMD(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
{
  Internal("trace_glGetDebugMessageLogAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGetDebugMessageLogAMD(_context, count, bufsize, categories, severities, ids, lengths, message);
  return ret;
}

// GL_AMD_draw_buffers_blend

static void REGAL_CALL trace_glBlendEquationIndexedAMD(RegalContext *_context, GLuint buf, GLenum mode)
{
  Internal("trace_glBlendEquationIndexedAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationIndexedAMD(_context, buf, mode);
}

static void REGAL_CALL trace_glBlendEquationSeparateIndexedAMD(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("trace_glBlendEquationSeparateIndexedAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationSeparateIndexedAMD(_context, buf, modeRGB, modeAlpha);
}

static void REGAL_CALL trace_glBlendFuncIndexedAMD(RegalContext *_context, GLuint buf, GLenum src, GLenum dst)
{
  Internal("trace_glBlendFuncIndexedAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFuncIndexedAMD(_context, buf, src, dst);
}

static void REGAL_CALL trace_glBlendFuncSeparateIndexedAMD(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Internal("trace_glBlendFuncSeparateIndexedAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFuncSeparateIndexedAMD(_context, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

// GL_AMD_multi_draw_indirect

static void REGAL_CALL trace_glMultiDrawArraysIndirectAMD(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Internal("trace_glMultiDrawArraysIndirectAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawArraysIndirectAMD(_context, mode, indirect, primcount, stride);
}

static void REGAL_CALL trace_glMultiDrawElementsIndirectAMD(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Internal("trace_glMultiDrawElementsIndirectAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawElementsIndirectAMD(_context, mode, type, indirect, primcount, stride);
}

// GL_AMD_name_gen_delete

static void REGAL_CALL trace_glDeleteNamesAMD(RegalContext *_context, GLenum identifier, GLuint num, const GLuint *names)
{
  Internal("trace_glDeleteNamesAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteNamesAMD(_context, identifier, num, names);
}

static void REGAL_CALL trace_glGenNamesAMD(RegalContext *_context, GLenum identifier, GLuint num, GLuint *names)
{
  Internal("trace_glGenNamesAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenNamesAMD(_context, identifier, num, names);
}

static GLboolean REGAL_CALL trace_glIsNameAMD(RegalContext *_context, GLenum identifier, GLuint name)
{
  Internal("trace_glIsNameAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsNameAMD(_context, identifier, name);
  return ret;
}

// GL_AMD_performance_monitor

static void REGAL_CALL trace_glBeginPerfMonitorAMD(RegalContext *_context, GLuint monitor)
{
  Internal("trace_glBeginPerfMonitorAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginPerfMonitorAMD(_context, monitor);
}

static void REGAL_CALL trace_glDeletePerfMonitorsAMD(RegalContext *_context, GLsizei n, GLuint *monitors)
{
  Internal("trace_glDeletePerfMonitorsAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeletePerfMonitorsAMD(_context, n, monitors);
}

static void REGAL_CALL trace_glEndPerfMonitorAMD(RegalContext *_context, GLuint monitor)
{
  Internal("trace_glEndPerfMonitorAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndPerfMonitorAMD(_context, monitor);
}

static void REGAL_CALL trace_glGenPerfMonitorsAMD(RegalContext *_context, GLsizei n, GLuint *monitors)
{
  Internal("trace_glGenPerfMonitorsAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenPerfMonitorsAMD(_context, n, monitors);
}

static void REGAL_CALL trace_glGetPerfMonitorCounterDataAMD(RegalContext *_context, GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
  Internal("trace_glGetPerfMonitorCounterDataAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPerfMonitorCounterDataAMD(_context, monitor, pname, dataSize, data, bytesWritten);
}

static void REGAL_CALL trace_glGetPerfMonitorCounterInfoAMD(RegalContext *_context, GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
  Internal("trace_glGetPerfMonitorCounterInfoAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPerfMonitorCounterInfoAMD(_context, group, counter, pname, data);
}

static void REGAL_CALL trace_glGetPerfMonitorCounterStringAMD(RegalContext *_context, GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
  Internal("trace_glGetPerfMonitorCounterStringAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPerfMonitorCounterStringAMD(_context, group, counter, bufSize, length, counterString);
}

static void REGAL_CALL trace_glGetPerfMonitorCountersAMD(RegalContext *_context, GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
  Internal("trace_glGetPerfMonitorCountersAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPerfMonitorCountersAMD(_context, group, numCounters, maxActiveCounters, countersSize, counters);
}

static void REGAL_CALL trace_glGetPerfMonitorGroupStringAMD(RegalContext *_context, GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
  Internal("trace_glGetPerfMonitorGroupStringAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPerfMonitorGroupStringAMD(_context, group, bufSize, length, groupString);
}

static void REGAL_CALL trace_glGetPerfMonitorGroupsAMD(RegalContext *_context, GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
  Internal("trace_glGetPerfMonitorGroupsAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPerfMonitorGroupsAMD(_context, numGroups, groupsSize, groups);
}

static void REGAL_CALL trace_glSelectPerfMonitorCountersAMD(RegalContext *_context, GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
  Internal("trace_glSelectPerfMonitorCountersAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSelectPerfMonitorCountersAMD(_context, monitor, enable, group, numCounters, counterList);
}

// GL_AMD_sample_positions

static void REGAL_CALL trace_glSetMultisamplefvAMD(RegalContext *_context, GLenum pname, GLuint index, const GLfloat *val)
{
  Internal("trace_glSetMultisamplefvAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSetMultisamplefvAMD(_context, pname, index, val);
}

// GL_AMD_vertex_shader_tessellator

static void REGAL_CALL trace_glTessellationFactorAMD(RegalContext *_context, GLfloat factor)
{
  Internal("trace_glTessellationFactorAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTessellationFactorAMD(_context, factor);
}

static void REGAL_CALL trace_glTessellationModeAMD(RegalContext *_context, GLenum mode)
{
  Internal("trace_glTessellationModeAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTessellationModeAMD(_context, mode);
}

// GL_ANGLE_framebuffer_blit

static void REGAL_CALL trace_glBlitFramebufferANGLE(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Internal("trace_glBlitFramebufferANGLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlitFramebufferANGLE(_context, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

// GL_ANGLE_framebuffer_multisample

static void REGAL_CALL trace_glRenderbufferStorageMultisampleANGLE(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorageMultisampleANGLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorageMultisampleANGLE(_context, target, samples, internalformat, width, height);
}

// GL_APPLE_element_array

static void REGAL_CALL trace_glDrawElementArrayAPPLE(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  Internal("trace_glDrawElementArrayAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementArrayAPPLE(_context, mode, first, count);
}

static void REGAL_CALL trace_glDrawRangeElementArrayAPPLE(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  Internal("trace_glDrawRangeElementArrayAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawRangeElementArrayAPPLE(_context, mode, start, end, first, count);
}

static void REGAL_CALL trace_glElementPointerAPPLE(RegalContext *_context, GLenum type, const GLvoid *pointer)
{
  Internal("trace_glElementPointerAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glElementPointerAPPLE(_context, type, pointer);
}

static void REGAL_CALL trace_glMultiDrawElementArrayAPPLE(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Internal("trace_glMultiDrawElementArrayAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawElementArrayAPPLE(_context, mode, first, count, primcount);
}

static void REGAL_CALL trace_glMultiDrawRangeElementArrayAPPLE(RegalContext *_context, GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Internal("trace_glMultiDrawRangeElementArrayAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawRangeElementArrayAPPLE(_context, mode, start, end, first, count, primcount);
}

// GL_APPLE_fence

static void REGAL_CALL trace_glDeleteFencesAPPLE(RegalContext *_context, GLsizei n, const GLuint *fences)
{
  Internal("trace_glDeleteFencesAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteFencesAPPLE(_context, n, fences);
}

static void REGAL_CALL trace_glFinishFenceAPPLE(RegalContext *_context, GLuint fence)
{
  Internal("trace_glFinishFenceAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFinishFenceAPPLE(_context, fence);
}

static void REGAL_CALL trace_glFinishObjectAPPLE(RegalContext *_context, GLenum object, GLint name)
{
  Internal("trace_glFinishObjectAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFinishObjectAPPLE(_context, object, name);
}

static void REGAL_CALL trace_glGenFencesAPPLE(RegalContext *_context, GLsizei n, GLuint *fences)
{
  Internal("trace_glGenFencesAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenFencesAPPLE(_context, n, fences);
}

static GLboolean REGAL_CALL trace_glIsFenceAPPLE(RegalContext *_context, GLuint fence)
{
  Internal("trace_glIsFenceAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsFenceAPPLE(_context, fence);
  return ret;
}

static void REGAL_CALL trace_glSetFenceAPPLE(RegalContext *_context, GLuint fence)
{
  Internal("trace_glSetFenceAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSetFenceAPPLE(_context, fence);
}

static GLboolean REGAL_CALL trace_glTestFenceAPPLE(RegalContext *_context, GLuint fence)
{
  Internal("trace_glTestFenceAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glTestFenceAPPLE(_context, fence);
  return ret;
}

static GLboolean REGAL_CALL trace_glTestObjectAPPLE(RegalContext *_context, GLenum object, GLuint name)
{
  Internal("trace_glTestObjectAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glTestObjectAPPLE(_context, object, name);
  return ret;
}

// GL_APPLE_flush_buffer_range

static void REGAL_CALL trace_glBufferParameteriAPPLE(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glBufferParameteriAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBufferParameteriAPPLE(_context, target, pname, param);
}

static void REGAL_CALL trace_glFlushMappedBufferRangeAPPLE(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr size)
{
  Internal("trace_glFlushMappedBufferRangeAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlushMappedBufferRangeAPPLE(_context, target, offset, size);
}

// GL_APPLE_flush_render

static void REGAL_CALL trace_glFinishRenderAPPLE(RegalContext *_context)
{
  Internal("trace_glFinishRenderAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFinishRenderAPPLE(_context);
}

static void REGAL_CALL trace_glFlushRenderAPPLE(RegalContext *_context)
{
  Internal("trace_glFlushRenderAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlushRenderAPPLE(_context);
}

static void REGAL_CALL trace_glSwapAPPLE(RegalContext *_context)
{
  Internal("trace_glSwapAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSwapAPPLE(_context);
}

// GL_APPLE_framebuffer_multisample

static void REGAL_CALL trace_glRenderbufferStorageMultisampleAPPLE(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorageMultisampleAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorageMultisampleAPPLE(_context, target, samples, internalformat, width, height);
}

static void REGAL_CALL trace_glResolveMultisampleFramebufferAPPLE(RegalContext *_context)
{
  Internal("trace_glResolveMultisampleFramebufferAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glResolveMultisampleFramebufferAPPLE(_context);
}

// GL_APPLE_object_purgeable

static void REGAL_CALL trace_glGetObjectParameterivAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
  Internal("trace_glGetObjectParameterivAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetObjectParameterivAPPLE(_context, objectType, name, pname, params);
}

static GLenum REGAL_CALL trace_glObjectPurgeableAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum option)
{
  Internal("trace_glObjectPurgeableAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glObjectPurgeableAPPLE(_context, objectType, name, option);
  return ret;
}

static GLenum REGAL_CALL trace_glObjectUnpurgeableAPPLE(RegalContext *_context, GLenum objectType, GLuint name, GLenum option)
{
  Internal("trace_glObjectUnpurgeableAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glObjectUnpurgeableAPPLE(_context, objectType, name, option);
  return ret;
}

// GL_APPLE_texture_range

static void REGAL_CALL trace_glGetTexParameterPointervAPPLE(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params)
{
  Internal("trace_glGetTexParameterPointervAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexParameterPointervAPPLE(_context, target, pname, params);
}

static void REGAL_CALL trace_glTextureRangeAPPLE(RegalContext *_context, GLenum target, GLsizei length, const GLvoid *pointer)
{
  Internal("trace_glTextureRangeAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureRangeAPPLE(_context, target, length, pointer);
}

// GL_APPLE_vertex_array_object

static void REGAL_CALL trace_glBindVertexArrayAPPLE(RegalContext *_context, GLuint array)
{
  Internal("trace_glBindVertexArrayAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindVertexArrayAPPLE(_context, array);
}

static void REGAL_CALL trace_glDeleteVertexArraysAPPLE(RegalContext *_context, GLsizei n, const GLuint *arrays)
{
  Internal("trace_glDeleteVertexArraysAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteVertexArraysAPPLE(_context, n, arrays);
}

static void REGAL_CALL trace_glGenVertexArraysAPPLE(RegalContext *_context, GLsizei n, GLuint *arrays)
{
  Internal("trace_glGenVertexArraysAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenVertexArraysAPPLE(_context, n, arrays);
}

static GLboolean REGAL_CALL trace_glIsVertexArrayAPPLE(RegalContext *_context, GLuint array)
{
  Internal("trace_glIsVertexArrayAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsVertexArrayAPPLE(_context, array);
  return ret;
}

// GL_APPLE_vertex_array_range

static void REGAL_CALL trace_glFlushVertexArrayRangeAPPLE(RegalContext *_context, GLsizei length, GLvoid *pointer)
{
  Internal("trace_glFlushVertexArrayRangeAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlushVertexArrayRangeAPPLE(_context, length, pointer);
}

static void REGAL_CALL trace_glVertexArrayParameteriAPPLE(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glVertexArrayParameteriAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayParameteriAPPLE(_context, pname, param);
}

static void REGAL_CALL trace_glVertexArrayRangeAPPLE(RegalContext *_context, GLsizei length, GLvoid *pointer)
{
  Internal("trace_glVertexArrayRangeAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayRangeAPPLE(_context, length, pointer);
}

// GL_APPLE_vertex_program_evaluators

static void REGAL_CALL trace_glDisableVertexAttribAPPLE(RegalContext *_context, GLuint index, GLenum pname)
{
  Internal("trace_glDisableVertexAttribAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableVertexAttribAPPLE(_context, index, pname);
}

static void REGAL_CALL trace_glEnableVertexAttribAPPLE(RegalContext *_context, GLuint index, GLenum pname)
{
  Internal("trace_glEnableVertexAttribAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableVertexAttribAPPLE(_context, index, pname);
}

static GLboolean REGAL_CALL trace_glIsVertexAttribEnabledAPPLE(RegalContext *_context, GLuint index, GLenum pname)
{
  Internal("trace_glIsVertexAttribEnabledAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsVertexAttribEnabledAPPLE(_context, index, pname);
  return ret;
}

static void REGAL_CALL trace_glMapVertexAttrib1dAPPLE(RegalContext *_context, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  Internal("trace_glMapVertexAttrib1dAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapVertexAttrib1dAPPLE(_context, index, size, u1, u2, stride, order, points);
}

static void REGAL_CALL trace_glMapVertexAttrib1fAPPLE(RegalContext *_context, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  Internal("trace_glMapVertexAttrib1fAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapVertexAttrib1fAPPLE(_context, index, size, u1, u2, stride, order, points);
}

static void REGAL_CALL trace_glMapVertexAttrib2dAPPLE(RegalContext *_context, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  Internal("trace_glMapVertexAttrib2dAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapVertexAttrib2dAPPLE(_context, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL trace_glMapVertexAttrib2fAPPLE(RegalContext *_context, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  Internal("trace_glMapVertexAttrib2fAPPLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapVertexAttrib2fAPPLE(_context, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

// GL_ARB_ES2_compatibility

static void REGAL_CALL trace_glClearDepthf(RegalContext *_context, GLclampf d)
{
  Internal("trace_glClearDepthf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearDepthf(_context, d);
}

static void REGAL_CALL trace_glDepthRangef(RegalContext *_context, GLclampf n, GLclampf f)
{
  Internal("trace_glDepthRangef","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthRangef(_context, n, f);
}

static void REGAL_CALL trace_glGetShaderPrecisionFormat(RegalContext *_context, GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
  Internal("trace_glGetShaderPrecisionFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetShaderPrecisionFormat(_context, shadertype, precisiontype, range, precision);
}

static void REGAL_CALL trace_glReleaseShaderCompiler(RegalContext *_context)
{
  Internal("trace_glReleaseShaderCompiler","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReleaseShaderCompiler(_context);
}

static void REGAL_CALL trace_glShaderBinary(RegalContext *_context, GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
  Internal("trace_glShaderBinary","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glShaderBinary(_context, count, shaders, binaryformat, binary, length);
}

// GL_ARB_base_instance

static void REGAL_CALL trace_glDrawArraysInstancedBaseInstance(RegalContext *_context, GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
  Internal("trace_glDrawArraysInstancedBaseInstance","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawArraysInstancedBaseInstance(_context, mode, first, count, primcount, baseinstance);
}

static void REGAL_CALL trace_glDrawElementsInstancedBaseInstance(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
  Internal("trace_glDrawElementsInstancedBaseInstance","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementsInstancedBaseInstance(_context, mode, count, type, indices, primcount, baseinstance);
}

static void REGAL_CALL trace_glDrawElementsInstancedBaseVertexBaseInstance(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
  Internal("trace_glDrawElementsInstancedBaseVertexBaseInstance","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementsInstancedBaseVertexBaseInstance(_context, mode, count, type, indices, primcount, basevertex, baseinstance);
}

// GL_ARB_blend_func_extended

static void REGAL_CALL trace_glBindFragDataLocationIndexed(RegalContext *_context, GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
  Internal("trace_glBindFragDataLocationIndexed","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindFragDataLocationIndexed(_context, program, colorNumber, index, name);
}

static GLint REGAL_CALL trace_glGetFragDataIndex(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("trace_glGetFragDataIndex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetFragDataIndex(_context, program, name);
  return ret;
}

// GL_ARB_buffer_storage

static void REGAL_CALL trace_glBufferStorage(RegalContext *_context, GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
  Internal("trace_glBufferStorage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBufferStorage(_context, target, size, data, flags);
}

static void REGAL_CALL trace_glNamedBufferStorageEXT(RegalContext *_context, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
  Internal("trace_glNamedBufferStorageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedBufferStorageEXT(_context, buffer, size, data, flags);
}

// GL_ARB_clear_buffer_object

static void REGAL_CALL trace_glClearBufferData(RegalContext *_context, GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("trace_glClearBufferData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearBufferData(_context, target, internalformat, format, type, data);
}

static void REGAL_CALL trace_glClearBufferSubData(RegalContext *_context, GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("trace_glClearBufferSubData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearBufferSubData(_context, target, internalformat, offset, size, format, type, data);
}

static void REGAL_CALL trace_glClearNamedBufferDataEXT(RegalContext *_context, GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("trace_glClearNamedBufferDataEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearNamedBufferDataEXT(_context, buffer, internalformat, format, type, data);
}

// GL_ARB_clear_texture

static void REGAL_CALL trace_glClearTexImage(RegalContext *_context, GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("trace_glClearTexImage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearTexImage(_context, texture, level, format, type, data);
}

static void REGAL_CALL trace_glClearTexSubImage(RegalContext *_context, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("trace_glClearTexSubImage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearTexSubImage(_context, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

// GL_ARB_color_buffer_float

static void REGAL_CALL trace_glClampColorARB(RegalContext *_context, GLenum target, GLenum clamp)
{
  Internal("trace_glClampColorARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClampColorARB(_context, target, clamp);
}

// GL_ARB_compute_shader

static void REGAL_CALL trace_glDispatchCompute(RegalContext *_context, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  Internal("trace_glDispatchCompute","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDispatchCompute(_context, num_groups_x, num_groups_y, num_groups_z);
}

static void REGAL_CALL trace_glDispatchComputeIndirect(RegalContext *_context, GLintptr indirect)
{
  Internal("trace_glDispatchComputeIndirect","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDispatchComputeIndirect(_context, indirect);
}

// GL_ARB_copy_buffer

static void REGAL_CALL trace_glCopyBufferSubData(RegalContext *_context, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  Internal("trace_glCopyBufferSubData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyBufferSubData(_context, readtarget, writetarget, readoffset, writeoffset, size);
}

// GL_ARB_copy_image

static void REGAL_CALL trace_glCopyImageSubData(RegalContext *_context, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  Internal("trace_glCopyImageSubData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyImageSubData(_context, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

// GL_ARB_debug_output

static void REGAL_CALL trace_glDebugMessageCallbackARB(RegalContext *_context, GLDEBUGPROCARB callback, const GLvoid *userParam)
{
  Internal("trace_glDebugMessageCallbackARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageCallbackARB(_context, callback, userParam);
}

static void REGAL_CALL trace_glDebugMessageControlARB(RegalContext *_context, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Internal("trace_glDebugMessageControlARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageControlARB(_context, source, type, severity, count, ids, enabled);
}

static void REGAL_CALL trace_glDebugMessageInsertARB(RegalContext *_context, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  Internal("trace_glDebugMessageInsertARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageInsertARB(_context, source, type, id, severity, length, buf);
}

static GLuint REGAL_CALL trace_glGetDebugMessageLogARB(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  Internal("trace_glGetDebugMessageLogARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGetDebugMessageLogARB(_context, count, bufsize, sources, types, ids, severities, lengths, messageLog);
  return ret;
}

// GL_ARB_draw_buffers

static void REGAL_CALL trace_glDrawBuffersARB(RegalContext *_context, GLsizei n, const GLenum *bufs)
{
  Internal("trace_glDrawBuffersARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawBuffersARB(_context, n, bufs);
}

// GL_ARB_draw_buffers_blend

static void REGAL_CALL trace_glBlendEquationSeparateiARB(RegalContext *_context, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("trace_glBlendEquationSeparateiARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationSeparateiARB(_context, buf, modeRGB, modeAlpha);
}

static void REGAL_CALL trace_glBlendEquationiARB(RegalContext *_context, GLuint buf, GLenum mode)
{
  Internal("trace_glBlendEquationiARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationiARB(_context, buf, mode);
}

static void REGAL_CALL trace_glBlendFuncSeparateiARB(RegalContext *_context, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  Internal("trace_glBlendFuncSeparateiARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFuncSeparateiARB(_context, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void REGAL_CALL trace_glBlendFunciARB(RegalContext *_context, GLuint buf, GLenum src, GLenum dst)
{
  Internal("trace_glBlendFunciARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFunciARB(_context, buf, src, dst);
}

// GL_ARB_draw_elements_base_vertex

static void REGAL_CALL trace_glDrawElementsBaseVertex(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  Internal("trace_glDrawElementsBaseVertex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementsBaseVertex(_context, mode, count, type, indices, basevertex);
}

static void REGAL_CALL trace_glDrawElementsInstancedBaseVertex(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  Internal("trace_glDrawElementsInstancedBaseVertex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementsInstancedBaseVertex(_context, mode, count, type, indices, primcount, basevertex);
}

static void REGAL_CALL trace_glDrawRangeElementsBaseVertex(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  Internal("trace_glDrawRangeElementsBaseVertex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawRangeElementsBaseVertex(_context, mode, start, end, count, type, indices, basevertex);
}

static void REGAL_CALL trace_glMultiDrawElementsBaseVertex(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  Internal("trace_glMultiDrawElementsBaseVertex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawElementsBaseVertex(_context, mode, count, type, indices, primcount, basevertex);
}

// GL_ARB_draw_indirect

static void REGAL_CALL trace_glDrawArraysIndirect(RegalContext *_context, GLenum mode, const GLvoid *indirect)
{
  Internal("trace_glDrawArraysIndirect","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawArraysIndirect(_context, mode, indirect);
}

static void REGAL_CALL trace_glDrawElementsIndirect(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect)
{
  Internal("trace_glDrawElementsIndirect","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementsIndirect(_context, mode, type, indirect);
}

// GL_ARB_draw_instanced

static void REGAL_CALL trace_glDrawArraysInstancedARB(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Internal("trace_glDrawArraysInstancedARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawArraysInstancedARB(_context, mode, start, count, primcount);
}

static void REGAL_CALL trace_glDrawElementsInstancedARB(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Internal("trace_glDrawElementsInstancedARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementsInstancedARB(_context, mode, count, type, indices, primcount);
}

// GL_ARB_framebuffer_no_attachments

static void REGAL_CALL trace_glFramebufferParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glFramebufferParameteri","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferParameteri(_context, target, pname, param);
}

static void REGAL_CALL trace_glGetFramebufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetFramebufferParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFramebufferParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetNamedFramebufferParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint *params)
{
  Internal("trace_glGetNamedFramebufferParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedFramebufferParameterivEXT(_context, framebuffer, pname, params);
}

static void REGAL_CALL trace_glNamedFramebufferParameteriEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint param)
{
  Internal("trace_glNamedFramebufferParameteriEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedFramebufferParameteriEXT(_context, framebuffer, pname, param);
}

// GL_ARB_framebuffer_object

static void REGAL_CALL trace_glBindFramebuffer(RegalContext *_context, GLenum target, GLuint framebuffer)
{
  Internal("trace_glBindFramebuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindFramebuffer(_context, target, framebuffer);
}

static void REGAL_CALL trace_glBindRenderbuffer(RegalContext *_context, GLenum target, GLuint renderbuffer)
{
  Internal("trace_glBindRenderbuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindRenderbuffer(_context, target, renderbuffer);
}

static void REGAL_CALL trace_glBlitFramebuffer(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Internal("trace_glBlitFramebuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlitFramebuffer(_context, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static GLenum REGAL_CALL trace_glCheckFramebufferStatus(RegalContext *_context, GLenum target)
{
  Internal("trace_glCheckFramebufferStatus","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glCheckFramebufferStatus(_context, target);
  return ret;
}

static void REGAL_CALL trace_glDeleteFramebuffers(RegalContext *_context, GLsizei n, const GLuint *framebuffers)
{
  Internal("trace_glDeleteFramebuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteFramebuffers(_context, n, framebuffers);
}

static void REGAL_CALL trace_glDeleteRenderbuffers(RegalContext *_context, GLsizei n, const GLuint *renderbuffers)
{
  Internal("trace_glDeleteRenderbuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteRenderbuffers(_context, n, renderbuffers);
}

static void REGAL_CALL trace_glFramebufferRenderbuffer(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("trace_glFramebufferRenderbuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferRenderbuffer(_context, target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL trace_glFramebufferTexture1D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("trace_glFramebufferTexture1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture1D(_context, target, attachment, textarget, texture, level);
}

static void REGAL_CALL trace_glFramebufferTexture2D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("trace_glFramebufferTexture2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture2D(_context, target, attachment, textarget, texture, level);
}

static void REGAL_CALL trace_glFramebufferTexture3D(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
  Internal("trace_glFramebufferTexture3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture3D(_context, target, attachment, textarget, texture, level, layer);
}

static void REGAL_CALL trace_glFramebufferTextureLayer(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Internal("trace_glFramebufferTextureLayer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTextureLayer(_context, target, attachment, texture, level, layer);
}

static void REGAL_CALL trace_glGenFramebuffers(RegalContext *_context, GLsizei n, GLuint *framebuffers)
{
  Internal("trace_glGenFramebuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenFramebuffers(_context, n, framebuffers);
}

static void REGAL_CALL trace_glGenRenderbuffers(RegalContext *_context, GLsizei n, GLuint *renderbuffers)
{
  Internal("trace_glGenRenderbuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenRenderbuffers(_context, n, renderbuffers);
}

static void REGAL_CALL trace_glGenerateMipmap(RegalContext *_context, GLenum target)
{
  Internal("trace_glGenerateMipmap","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenerateMipmap(_context, target);
}

static void REGAL_CALL trace_glGetFramebufferAttachmentParameteriv(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("trace_glGetFramebufferAttachmentParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFramebufferAttachmentParameteriv(_context, target, attachment, pname, params);
}

static void REGAL_CALL trace_glGetRenderbufferParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetRenderbufferParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetRenderbufferParameteriv(_context, target, pname, params);
}

static GLboolean REGAL_CALL trace_glIsFramebuffer(RegalContext *_context, GLuint framebuffer)
{
  Internal("trace_glIsFramebuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsFramebuffer(_context, framebuffer);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsRenderbuffer(RegalContext *_context, GLuint renderbuffer)
{
  Internal("trace_glIsRenderbuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsRenderbuffer(_context, renderbuffer);
  return ret;
}

static void REGAL_CALL trace_glRenderbufferStorage(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorage(_context, target, internalformat, width, height);
}

static void REGAL_CALL trace_glRenderbufferStorageMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorageMultisample","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorageMultisample(_context, target, samples, internalformat, width, height);
}

// GL_ARB_geometry_shader4

static void REGAL_CALL trace_glFramebufferTextureARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Internal("trace_glFramebufferTextureARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTextureARB(_context, target, attachment, texture, level);
}

static void REGAL_CALL trace_glFramebufferTextureFaceARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Internal("trace_glFramebufferTextureFaceARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTextureFaceARB(_context, target, attachment, texture, level, face);
}

static void REGAL_CALL trace_glFramebufferTextureLayerARB(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Internal("trace_glFramebufferTextureLayerARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTextureLayerARB(_context, target, attachment, texture, level, layer);
}

static void REGAL_CALL trace_glProgramParameteriARB(RegalContext *_context, GLuint program, GLenum pname, GLint value)
{
  Internal("trace_glProgramParameteriARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameteriARB(_context, program, pname, value);
}

// GL_ARB_get_program_binary

static void REGAL_CALL trace_glGetProgramBinary(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  Internal("trace_glGetProgramBinary","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramBinary(_context, program, bufSize, length, binaryFormat, binary);
}

static void REGAL_CALL trace_glProgramBinary(RegalContext *_context, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
  Internal("trace_glProgramBinary","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramBinary(_context, program, binaryFormat, binary, length);
}

static void REGAL_CALL trace_glProgramParameteri(RegalContext *_context, GLuint program, GLenum pname, GLint value)
{
  Internal("trace_glProgramParameteri","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameteri(_context, program, pname, value);
}

// GL_ARB_gpu_shader_fp64

static void REGAL_CALL trace_glGetUniformdv(RegalContext *_context, GLuint program, GLint location, GLdouble *params)
{
  Internal("trace_glGetUniformdv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformdv(_context, program, location, params);
}

static void REGAL_CALL trace_glUniform1d(RegalContext *_context, GLint location, GLdouble x)
{
  Internal("trace_glUniform1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1d(_context, location, x);
}

static void REGAL_CALL trace_glUniform1dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glUniform1dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1dv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2d(RegalContext *_context, GLint location, GLdouble x, GLdouble y)
{
  Internal("trace_glUniform2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2d(_context, location, x, y);
}

static void REGAL_CALL trace_glUniform2dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glUniform2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2dv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3d(RegalContext *_context, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glUniform3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3d(_context, location, x, y, z);
}

static void REGAL_CALL trace_glUniform3dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glUniform3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3dv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4d(RegalContext *_context, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glUniform4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4d(_context, location, x, y, z, w);
}

static void REGAL_CALL trace_glUniform4dv(RegalContext *_context, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glUniform4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4dv(_context, location, count, value);
}

static void REGAL_CALL trace_glUniformMatrix2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix2dv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix2x3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix2x3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix2x3dv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix2x4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix2x4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix2x4dv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix3dv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix3x2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix3x2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix3x2dv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix3x4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix3x4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix3x4dv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix4dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix4dv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix4x2dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix4x2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix4x2dv(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix4x3dv(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glUniformMatrix4x3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix4x3dv(_context, location, count, transpose, value);
}

// GL_ARB_imaging

static void REGAL_CALL trace_glColorSubTable(RegalContext *_context, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
  Internal("trace_glColorSubTable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorSubTable(_context, target, start, count, format, type, data);
}

static void REGAL_CALL trace_glColorTable(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Internal("trace_glColorTable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorTable(_context, target, internalformat, width, format, type, table);
}

static void REGAL_CALL trace_glColorTableParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glColorTableParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorTableParameterfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glColorTableParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glColorTableParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorTableParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glConvolutionFilter1D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  Internal("trace_glConvolutionFilter1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionFilter1D(_context, target, internalformat, width, format, type, image);
}

static void REGAL_CALL trace_glConvolutionFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  Internal("trace_glConvolutionFilter2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionFilter2D(_context, target, internalformat, width, height, format, type, image);
}

static void REGAL_CALL trace_glConvolutionParameterf(RegalContext *_context, GLenum target, GLenum pname, GLfloat params)
{
  Internal("trace_glConvolutionParameterf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionParameterf(_context, target, pname, params);
}

static void REGAL_CALL trace_glConvolutionParameterfv(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glConvolutionParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionParameterfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glConvolutionParameteri(RegalContext *_context, GLenum target, GLenum pname, GLint params)
{
  Internal("trace_glConvolutionParameteri","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionParameteri(_context, target, pname, params);
}

static void REGAL_CALL trace_glConvolutionParameteriv(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glConvolutionParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glCopyColorSubTable(RegalContext *_context, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyColorSubTable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyColorSubTable(_context, target, start, x, y, width);
}

static void REGAL_CALL trace_glCopyColorTable(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyColorTable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyColorTable(_context, target, internalformat, x, y, width);
}

static void REGAL_CALL trace_glCopyConvolutionFilter1D(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyConvolutionFilter1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyConvolutionFilter1D(_context, target, internalformat, x, y, width);
}

static void REGAL_CALL trace_glCopyConvolutionFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyConvolutionFilter2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyConvolutionFilter2D(_context, target, internalformat, x, y, width, height);
}

static void REGAL_CALL trace_glGetColorTable(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  Internal("trace_glGetColorTable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTable(_context, target, format, type, table);
}

static void REGAL_CALL trace_glGetColorTableParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetColorTableParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTableParameterfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetColorTableParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetColorTableParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTableParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetConvolutionFilter(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  Internal("trace_glGetConvolutionFilter","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetConvolutionFilter(_context, target, format, type, image);
}

static void REGAL_CALL trace_glGetConvolutionParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetConvolutionParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetConvolutionParameterfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetConvolutionParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetConvolutionParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetConvolutionParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetHistogram(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Internal("trace_glGetHistogram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetHistogram(_context, target, reset, format, type, values);
}

static void REGAL_CALL trace_glGetHistogramParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetHistogramParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetHistogramParameterfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetHistogramParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetHistogramParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetHistogramParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetMinmax(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
{
  Internal("trace_glGetMinmax","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMinmax(_context, target, reset, format, types, values);
}

static void REGAL_CALL trace_glGetMinmaxParameterfv(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMinmaxParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMinmaxParameterfv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetMinmaxParameteriv(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetMinmaxParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMinmaxParameteriv(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetSeparableFilter(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  Internal("trace_glGetSeparableFilter","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetSeparableFilter(_context, target, format, type, row, column, span);
}

static void REGAL_CALL trace_glHistogram(RegalContext *_context, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  Internal("trace_glHistogram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glHistogram(_context, target, width, internalformat, sink);
}

static void REGAL_CALL trace_glMinmax(RegalContext *_context, GLenum target, GLenum internalformat, GLboolean sink)
{
  Internal("trace_glMinmax","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMinmax(_context, target, internalformat, sink);
}

static void REGAL_CALL trace_glResetHistogram(RegalContext *_context, GLenum target)
{
  Internal("trace_glResetHistogram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glResetHistogram(_context, target);
}

static void REGAL_CALL trace_glResetMinmax(RegalContext *_context, GLenum target)
{
  Internal("trace_glResetMinmax","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glResetMinmax(_context, target);
}

static void REGAL_CALL trace_glSeparableFilter2D(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  Internal("trace_glSeparableFilter2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSeparableFilter2D(_context, target, internalformat, width, height, format, type, row, column);
}

// GL_ARB_instanced_arrays

static void REGAL_CALL trace_glVertexAttribDivisorARB(RegalContext *_context, GLuint index, GLuint divisor)
{
  Internal("trace_glVertexAttribDivisorARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribDivisorARB(_context, index, divisor);
}

// GL_ARB_internalformat_query

static void REGAL_CALL trace_glGetInternalformativ(RegalContext *_context, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
  Internal("trace_glGetInternalformativ","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetInternalformativ(_context, target, internalformat, pname, bufSize, params);
}

// GL_ARB_internalformat_query2

static void REGAL_CALL trace_glGetInternalformati64v(RegalContext *_context, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
  Internal("trace_glGetInternalformati64v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetInternalformati64v(_context, target, internalformat, pname, bufSize, params);
}

// GL_ARB_invalidate_subdata

static void REGAL_CALL trace_glInvalidateBufferData(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glInvalidateBufferData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInvalidateBufferData(_context, buffer);
}

static void REGAL_CALL trace_glInvalidateBufferSubData(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  Internal("trace_glInvalidateBufferSubData","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInvalidateBufferSubData(_context, buffer, offset, length);
}

static void REGAL_CALL trace_glInvalidateFramebuffer(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  Internal("trace_glInvalidateFramebuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInvalidateFramebuffer(_context, target, numAttachments, attachments);
}

static void REGAL_CALL trace_glInvalidateSubFramebuffer(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glInvalidateSubFramebuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInvalidateSubFramebuffer(_context, target, numAttachments, attachments, x, y, width, height);
}

static void REGAL_CALL trace_glInvalidateTexImage(RegalContext *_context, GLuint texture, GLint level)
{
  Internal("trace_glInvalidateTexImage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInvalidateTexImage(_context, texture, level);
}

static void REGAL_CALL trace_glInvalidateTexSubImage(RegalContext *_context, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("trace_glInvalidateTexSubImage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInvalidateTexSubImage(_context, texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

// GL_ARB_map_buffer_range

static void REGAL_CALL trace_glFlushMappedBufferRange(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr length)
{
  Internal("trace_glFlushMappedBufferRange","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlushMappedBufferRange(_context, target, offset, length);
}

static GLvoid *REGAL_CALL trace_glMapBufferRange(RegalContext *_context, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Internal("trace_glMapBufferRange","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLvoid * ret = Trace::glMapBufferRange(_context, target, offset, length, access);
  return ret;
}

// GL_ARB_matrix_palette

static void REGAL_CALL trace_glCurrentPaletteMatrixARB(RegalContext *_context, GLint index)
{
  Internal("trace_glCurrentPaletteMatrixARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCurrentPaletteMatrixARB(_context, index);
}

static void REGAL_CALL trace_glMatrixIndexPointerARB(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glMatrixIndexPointerARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixIndexPointerARB(_context, size, type, stride, pointer);
}

static void REGAL_CALL trace_glMatrixIndexubvARB(RegalContext *_context, GLint size, const GLubyte *indices)
{
  Internal("trace_glMatrixIndexubvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixIndexubvARB(_context, size, indices);
}

static void REGAL_CALL trace_glMatrixIndexuivARB(RegalContext *_context, GLint size, const GLuint *indices)
{
  Internal("trace_glMatrixIndexuivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixIndexuivARB(_context, size, indices);
}

static void REGAL_CALL trace_glMatrixIndexusvARB(RegalContext *_context, GLint size, const GLushort *indices)
{
  Internal("trace_glMatrixIndexusvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixIndexusvARB(_context, size, indices);
}

// GL_ARB_multi_bind

static void REGAL_CALL trace_glBindBuffersBase(RegalContext *_context, GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
{
  Internal("trace_glBindBuffersBase","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBuffersBase(_context, target, first, count, buffers);
}

static void REGAL_CALL trace_glBindBuffersRange(RegalContext *_context, GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
{
  Internal("trace_glBindBuffersRange","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBuffersRange(_context, target, first, count, buffers, offsets, sizes);
}

static void REGAL_CALL trace_glBindImageTextures(RegalContext *_context, GLuint first, GLsizei count, const GLuint *textures)
{
  Internal("trace_glBindImageTextures","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindImageTextures(_context, first, count, textures);
}

static void REGAL_CALL trace_glBindSamplers(RegalContext *_context, GLuint first, GLsizei count, const GLuint *samplers)
{
  Internal("trace_glBindSamplers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindSamplers(_context, first, count, samplers);
}

static void REGAL_CALL trace_glBindTextures(RegalContext *_context, GLuint first, GLsizei count, const GLuint *textures)
{
  Internal("trace_glBindTextures","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindTextures(_context, first, count, textures);
}

static void REGAL_CALL trace_glBindVertexBuffers(RegalContext *_context, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
  Internal("trace_glBindVertexBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindVertexBuffers(_context, first, count, buffers, offsets, strides);
}

// GL_ARB_multi_draw_indirect

static void REGAL_CALL trace_glMultiDrawArraysIndirect(RegalContext *_context, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Internal("trace_glMultiDrawArraysIndirect","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawArraysIndirect(_context, mode, indirect, primcount, stride);
}

static void REGAL_CALL trace_glMultiDrawElementsIndirect(RegalContext *_context, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  Internal("trace_glMultiDrawElementsIndirect","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawElementsIndirect(_context, mode, type, indirect, primcount, stride);
}

// GL_ARB_multisample

static void REGAL_CALL trace_glSampleCoverageARB(RegalContext *_context, GLclampf value, GLboolean invert)
{
  Internal("trace_glSampleCoverageARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSampleCoverageARB(_context, value, invert);
}

// GL_ARB_multitexture

static void REGAL_CALL trace_glActiveTextureARB(RegalContext *_context, GLenum texture)
{
  Internal("trace_glActiveTextureARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glActiveTextureARB(_context, texture);
}

static void REGAL_CALL trace_glClientActiveTextureARB(RegalContext *_context, GLenum texture)
{
  Internal("trace_glClientActiveTextureARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClientActiveTextureARB(_context, texture);
}

static void REGAL_CALL trace_glMultiTexCoord1dARB(RegalContext *_context, GLenum target, GLdouble s)
{
  Internal("trace_glMultiTexCoord1dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1dARB(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("trace_glMultiTexCoord1dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1dvARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord1fARB(RegalContext *_context, GLenum target, GLfloat s)
{
  Internal("trace_glMultiTexCoord1fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1fARB(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("trace_glMultiTexCoord1fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1fvARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord1iARB(RegalContext *_context, GLenum target, GLint s)
{
  Internal("trace_glMultiTexCoord1iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1iARB(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("trace_glMultiTexCoord1ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1ivARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord1sARB(RegalContext *_context, GLenum target, GLshort s)
{
  Internal("trace_glMultiTexCoord1sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1sARB(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("trace_glMultiTexCoord1svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1svARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t)
{
  Internal("trace_glMultiTexCoord2dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2dARB(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("trace_glMultiTexCoord2dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2dvARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t)
{
  Internal("trace_glMultiTexCoord2fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2fARB(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("trace_glMultiTexCoord2fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2fvARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2iARB(RegalContext *_context, GLenum target, GLint s, GLint t)
{
  Internal("trace_glMultiTexCoord2iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2iARB(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("trace_glMultiTexCoord2ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2ivARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t)
{
  Internal("trace_glMultiTexCoord2sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2sARB(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("trace_glMultiTexCoord2svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2svARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  Internal("trace_glMultiTexCoord3dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3dARB(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("trace_glMultiTexCoord3dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3dvARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  Internal("trace_glMultiTexCoord3fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3fARB(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("trace_glMultiTexCoord3fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3fvARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3iARB(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r)
{
  Internal("trace_glMultiTexCoord3iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3iARB(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("trace_glMultiTexCoord3ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3ivARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r)
{
  Internal("trace_glMultiTexCoord3sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3sARB(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("trace_glMultiTexCoord3svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3svARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4dARB(RegalContext *_context, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  Internal("trace_glMultiTexCoord4dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4dARB(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4dvARB(RegalContext *_context, GLenum target, const GLdouble *v)
{
  Internal("trace_glMultiTexCoord4dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4dvARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4fARB(RegalContext *_context, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  Internal("trace_glMultiTexCoord4fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4fARB(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4fvARB(RegalContext *_context, GLenum target, const GLfloat *v)
{
  Internal("trace_glMultiTexCoord4fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4fvARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4iARB(RegalContext *_context, GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  Internal("trace_glMultiTexCoord4iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4iARB(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4ivARB(RegalContext *_context, GLenum target, const GLint *v)
{
  Internal("trace_glMultiTexCoord4ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4ivARB(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4sARB(RegalContext *_context, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  Internal("trace_glMultiTexCoord4sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4sARB(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4svARB(RegalContext *_context, GLenum target, const GLshort *v)
{
  Internal("trace_glMultiTexCoord4svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4svARB(_context, target, v);
}

// GL_ARB_occlusion_query

static void REGAL_CALL trace_glBeginQueryARB(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("trace_glBeginQueryARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginQueryARB(_context, target, id);
}

static void REGAL_CALL trace_glDeleteQueriesARB(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("trace_glDeleteQueriesARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteQueriesARB(_context, n, ids);
}

static void REGAL_CALL trace_glEndQueryARB(RegalContext *_context, GLenum target)
{
  Internal("trace_glEndQueryARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndQueryARB(_context, target);
}

static void REGAL_CALL trace_glGenQueriesARB(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("trace_glGenQueriesARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenQueriesARB(_context, n, ids);
}

static void REGAL_CALL trace_glGetQueryObjectivARB(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("trace_glGetQueryObjectivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjectivARB(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetQueryObjectuivARB(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("trace_glGetQueryObjectuivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjectuivARB(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetQueryivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetQueryivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryivARB(_context, target, pname, params);
}

static GLboolean REGAL_CALL trace_glIsQueryARB(RegalContext *_context, GLuint id)
{
  Internal("trace_glIsQueryARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsQueryARB(_context, id);
  return ret;
}

// GL_ARB_point_parameters

static void REGAL_CALL trace_glPointParameterfARB(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glPointParameterfARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterfARB(_context, pname, param);
}

static void REGAL_CALL trace_glPointParameterfvARB(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glPointParameterfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterfvARB(_context, pname, params);
}

// GL_ARB_program_interface_query

static void REGAL_CALL trace_glGetProgramInterfaceiv(RegalContext *_context, GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
  Internal("trace_glGetProgramInterfaceiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramInterfaceiv(_context, program, programInterface, pname, params);
}

static GLuint REGAL_CALL trace_glGetProgramResourceIndex(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name)
{
  Internal("trace_glGetProgramResourceIndex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGetProgramResourceIndex(_context, program, programInterface, name);
  return ret;
}

static GLint REGAL_CALL trace_glGetProgramResourceLocation(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name)
{
  Internal("trace_glGetProgramResourceLocation","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetProgramResourceLocation(_context, program, programInterface, name);
  return ret;
}

static GLint REGAL_CALL trace_glGetProgramResourceLocationIndex(RegalContext *_context, GLuint program, GLenum programInterface, const GLchar *name)
{
  Internal("trace_glGetProgramResourceLocationIndex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetProgramResourceLocationIndex(_context, program, programInterface, name);
  return ret;
}

static void REGAL_CALL trace_glGetProgramResourceName(RegalContext *_context, GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Internal("trace_glGetProgramResourceName","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramResourceName(_context, program, programInterface, index, bufSize, length, name);
}

static void REGAL_CALL trace_glGetProgramResourceiv(RegalContext *_context, GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
  Internal("trace_glGetProgramResourceiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramResourceiv(_context, program, programInterface, index, propCount, props, bufSize, length, params);
}

// GL_ARB_provoking_vertex

static void REGAL_CALL trace_glProvokingVertex(RegalContext *_context, GLenum mode)
{
  Internal("trace_glProvokingVertex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProvokingVertex(_context, mode);
}

// GL_ARB_robustness

static GLenum REGAL_CALL trace_glGetGraphicsResetStatusARB(RegalContext *_context)
{
  Internal("trace_glGetGraphicsResetStatusARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glGetGraphicsResetStatusARB(_context);
  return ret;
}

static void REGAL_CALL trace_glGetnColorTableARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
  Internal("trace_glGetnColorTableARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnColorTableARB(_context, target, format, type, bufSize, table);
}

static void REGAL_CALL trace_glGetnCompressedTexImageARB(RegalContext *_context, GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
  Internal("trace_glGetnCompressedTexImageARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnCompressedTexImageARB(_context, target, lod, bufSize, img);
}

static void REGAL_CALL trace_glGetnConvolutionFilterARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
  Internal("trace_glGetnConvolutionFilterARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnConvolutionFilterARB(_context, target, format, type, bufSize, image);
}

static void REGAL_CALL trace_glGetnHistogramARB(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  Internal("trace_glGetnHistogramARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnHistogramARB(_context, target, reset, format, type, bufSize, values);
}

static void REGAL_CALL trace_glGetnMapdvARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
  Internal("trace_glGetnMapdvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnMapdvARB(_context, target, query, bufSize, v);
}

static void REGAL_CALL trace_glGetnMapfvARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
  Internal("trace_glGetnMapfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnMapfvARB(_context, target, query, bufSize, v);
}

static void REGAL_CALL trace_glGetnMapivARB(RegalContext *_context, GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
  Internal("trace_glGetnMapivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnMapivARB(_context, target, query, bufSize, v);
}

static void REGAL_CALL trace_glGetnMinmaxARB(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  Internal("trace_glGetnMinmaxARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnMinmaxARB(_context, target, reset, format, type, bufSize, values);
}

static void REGAL_CALL trace_glGetnPixelMapfvARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLfloat *values)
{
  Internal("trace_glGetnPixelMapfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnPixelMapfvARB(_context, map, bufSize, values);
}

static void REGAL_CALL trace_glGetnPixelMapuivARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLuint *values)
{
  Internal("trace_glGetnPixelMapuivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnPixelMapuivARB(_context, map, bufSize, values);
}

static void REGAL_CALL trace_glGetnPixelMapusvARB(RegalContext *_context, GLenum map, GLsizei bufSize, GLushort *values)
{
  Internal("trace_glGetnPixelMapusvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnPixelMapusvARB(_context, map, bufSize, values);
}

static void REGAL_CALL trace_glGetnPolygonStippleARB(RegalContext *_context, GLsizei bufSize, GLubyte *pattern)
{
  Internal("trace_glGetnPolygonStippleARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnPolygonStippleARB(_context, bufSize, pattern);
}

static void REGAL_CALL trace_glGetnSeparableFilterARB(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
  Internal("trace_glGetnSeparableFilterARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnSeparableFilterARB(_context, target, format, type, rowBufSize, row, columnBufSize, column, span);
}

static void REGAL_CALL trace_glGetnTexImageARB(RegalContext *_context, GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
  Internal("trace_glGetnTexImageARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnTexImageARB(_context, target, level, format, type, bufSize, img);
}

static void REGAL_CALL trace_glGetnUniformdvARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
  Internal("trace_glGetnUniformdvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnUniformdvARB(_context, program, location, bufSize, params);
}

static void REGAL_CALL trace_glGetnUniformfvARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  Internal("trace_glGetnUniformfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnUniformfvARB(_context, program, location, bufSize, params);
}

static void REGAL_CALL trace_glGetnUniformivARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  Internal("trace_glGetnUniformivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnUniformivARB(_context, program, location, bufSize, params);
}

static void REGAL_CALL trace_glGetnUniformuivARB(RegalContext *_context, GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
  Internal("trace_glGetnUniformuivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetnUniformuivARB(_context, program, location, bufSize, params);
}

static void REGAL_CALL trace_glReadnPixelsARB(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  Internal("trace_glReadnPixelsARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReadnPixelsARB(_context, x, y, width, height, format, type, bufSize, data);
}

// GL_ARB_sample_shading

static void REGAL_CALL trace_glMinSampleShading(RegalContext *_context, GLclampf value)
{
  Internal("trace_glMinSampleShading","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMinSampleShading(_context, value);
}

static void REGAL_CALL trace_glMinSampleShadingARB(RegalContext *_context, GLclampf value)
{
  Internal("trace_glMinSampleShadingARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMinSampleShadingARB(_context, value);
}

// GL_ARB_sampler_objects

static void REGAL_CALL trace_glBindSampler(RegalContext *_context, GLuint unit, GLuint sampler)
{
  Internal("trace_glBindSampler","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindSampler(_context, unit, sampler);
}

static void REGAL_CALL trace_glDeleteSamplers(RegalContext *_context, GLsizei count, const GLuint *samplers)
{
  Internal("trace_glDeleteSamplers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteSamplers(_context, count, samplers);
}

static void REGAL_CALL trace_glGenSamplers(RegalContext *_context, GLsizei count, GLuint *samplers)
{
  Internal("trace_glGenSamplers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenSamplers(_context, count, samplers);
}

static void REGAL_CALL trace_glGetSamplerParameterIiv(RegalContext *_context, GLuint sampler, GLenum pname, GLint *params)
{
  Internal("trace_glGetSamplerParameterIiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetSamplerParameterIiv(_context, sampler, pname, params);
}

static void REGAL_CALL trace_glGetSamplerParameterIuiv(RegalContext *_context, GLuint sampler, GLenum pname, GLuint *params)
{
  Internal("trace_glGetSamplerParameterIuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetSamplerParameterIuiv(_context, sampler, pname, params);
}

static void REGAL_CALL trace_glGetSamplerParameterfv(RegalContext *_context, GLuint sampler, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetSamplerParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetSamplerParameterfv(_context, sampler, pname, params);
}

static void REGAL_CALL trace_glGetSamplerParameteriv(RegalContext *_context, GLuint sampler, GLenum pname, GLint *params)
{
  Internal("trace_glGetSamplerParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetSamplerParameteriv(_context, sampler, pname, params);
}

static GLboolean REGAL_CALL trace_glIsSampler(RegalContext *_context, GLuint sampler)
{
  Internal("trace_glIsSampler","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsSampler(_context, sampler);
  return ret;
}

static void REGAL_CALL trace_glSamplerParameterIiv(RegalContext *_context, GLuint sampler, GLenum pname, const GLint *params)
{
  Internal("trace_glSamplerParameterIiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSamplerParameterIiv(_context, sampler, pname, params);
}

static void REGAL_CALL trace_glSamplerParameterIuiv(RegalContext *_context, GLuint sampler, GLenum pname, const GLuint *params)
{
  Internal("trace_glSamplerParameterIuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSamplerParameterIuiv(_context, sampler, pname, params);
}

static void REGAL_CALL trace_glSamplerParameterf(RegalContext *_context, GLuint sampler, GLenum pname, GLfloat param)
{
  Internal("trace_glSamplerParameterf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSamplerParameterf(_context, sampler, pname, param);
}

static void REGAL_CALL trace_glSamplerParameterfv(RegalContext *_context, GLuint sampler, GLenum pname, const GLfloat *params)
{
  Internal("trace_glSamplerParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSamplerParameterfv(_context, sampler, pname, params);
}

static void REGAL_CALL trace_glSamplerParameteri(RegalContext *_context, GLuint sampler, GLenum pname, GLint param)
{
  Internal("trace_glSamplerParameteri","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSamplerParameteri(_context, sampler, pname, param);
}

static void REGAL_CALL trace_glSamplerParameteriv(RegalContext *_context, GLuint sampler, GLenum pname, const GLint *params)
{
  Internal("trace_glSamplerParameteriv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSamplerParameteriv(_context, sampler, pname, params);
}

// GL_ARB_separate_shader_objects

static void REGAL_CALL trace_glActiveShaderProgram(RegalContext *_context, GLuint pipeline, GLuint program)
{
  Internal("trace_glActiveShaderProgram","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glActiveShaderProgram(_context, pipeline, program);
}

static void REGAL_CALL trace_glBindProgramPipeline(RegalContext *_context, GLuint pipeline)
{
  Internal("trace_glBindProgramPipeline","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindProgramPipeline(_context, pipeline);
}

static GLuint REGAL_CALL trace_glCreateShaderProgramv(RegalContext *_context, GLenum type, GLsizei count, const GLchar * const *strings)
{
  Internal("trace_glCreateShaderProgramv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glCreateShaderProgramv(_context, type, count, strings);
  return ret;
}

static void REGAL_CALL trace_glDeleteProgramPipelines(RegalContext *_context, GLsizei n, const GLuint *pipelines)
{
  Internal("trace_glDeleteProgramPipelines","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteProgramPipelines(_context, n, pipelines);
}

static void REGAL_CALL trace_glGenProgramPipelines(RegalContext *_context, GLsizei n, GLuint *pipelines)
{
  Internal("trace_glGenProgramPipelines","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenProgramPipelines(_context, n, pipelines);
}

static void REGAL_CALL trace_glGetProgramPipelineInfoLog(RegalContext *_context, GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Internal("trace_glGetProgramPipelineInfoLog","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramPipelineInfoLog(_context, pipeline, bufSize, length, infoLog);
}

static void REGAL_CALL trace_glGetProgramPipelineiv(RegalContext *_context, GLuint pipeline, GLenum pname, GLint *params)
{
  Internal("trace_glGetProgramPipelineiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramPipelineiv(_context, pipeline, pname, params);
}

static GLboolean REGAL_CALL trace_glIsProgramPipeline(RegalContext *_context, GLuint pipeline)
{
  Internal("trace_glIsProgramPipeline","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsProgramPipeline(_context, pipeline);
  return ret;
}

static void REGAL_CALL trace_glProgramUniform1d(RegalContext *_context, GLuint program, GLint location, GLdouble x)
{
  Internal("trace_glProgramUniform1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1d(_context, program, location, x);
}

static void REGAL_CALL trace_glProgramUniform1dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glProgramUniform1dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1dv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform1f(RegalContext *_context, GLuint program, GLint location, GLfloat x)
{
  Internal("trace_glProgramUniform1f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1f(_context, program, location, x);
}

static void REGAL_CALL trace_glProgramUniform1fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glProgramUniform1fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1fv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform1i(RegalContext *_context, GLuint program, GLint location, GLint x)
{
  Internal("trace_glProgramUniform1i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1i(_context, program, location, x);
}

static void REGAL_CALL trace_glProgramUniform1iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glProgramUniform1iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1iv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform1ui(RegalContext *_context, GLuint program, GLint location, GLuint v0)
{
  Internal("trace_glProgramUniform1ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1ui(_context, program, location, v0);
}

static void REGAL_CALL trace_glProgramUniform1uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glProgramUniform1uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1uiv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y)
{
  Internal("trace_glProgramUniform2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2d(_context, program, location, x, y);
}

static void REGAL_CALL trace_glProgramUniform2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glProgramUniform2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2dv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y)
{
  Internal("trace_glProgramUniform2f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2f(_context, program, location, x, y);
}

static void REGAL_CALL trace_glProgramUniform2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glProgramUniform2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2fv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y)
{
  Internal("trace_glProgramUniform2i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2i(_context, program, location, x, y);
}

static void REGAL_CALL trace_glProgramUniform2iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glProgramUniform2iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2iv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y)
{
  Internal("trace_glProgramUniform2ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2ui(_context, program, location, x, y);
}

static void REGAL_CALL trace_glProgramUniform2uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glProgramUniform2uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2uiv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glProgramUniform3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3d(_context, program, location, x, y, z);
}

static void REGAL_CALL trace_glProgramUniform3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glProgramUniform3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3dv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glProgramUniform3f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3f(_context, program, location, x, y, z);
}

static void REGAL_CALL trace_glProgramUniform3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glProgramUniform3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3fv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y, GLint z)
{
  Internal("trace_glProgramUniform3i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3i(_context, program, location, x, y, z);
}

static void REGAL_CALL trace_glProgramUniform3iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glProgramUniform3iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3iv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
  Internal("trace_glProgramUniform3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3ui(_context, program, location, x, y, z);
}

static void REGAL_CALL trace_glProgramUniform3uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glProgramUniform3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3uiv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4d(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glProgramUniform4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4d(_context, program, location, x, y, z, w);
}

static void REGAL_CALL trace_glProgramUniform4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glProgramUniform4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4dv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4f(RegalContext *_context, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glProgramUniform4f","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4f(_context, program, location, x, y, z, w);
}

static void REGAL_CALL trace_glProgramUniform4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glProgramUniform4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4fv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4i(RegalContext *_context, GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glProgramUniform4i","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4i(_context, program, location, x, y, z, w);
}

static void REGAL_CALL trace_glProgramUniform4iv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glProgramUniform4iv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4iv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4ui(RegalContext *_context, GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("trace_glProgramUniform4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4ui(_context, program, location, x, y, z, w);
}

static void REGAL_CALL trace_glProgramUniform4uiv(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glProgramUniform4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4uiv(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2x3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix2x3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2x3dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2x3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix2x3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2x3fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2x4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix2x4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2x4dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2x4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix2x4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2x4fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3x2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix3x2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3x2dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3x2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix3x2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3x2fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3x4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix3x4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3x4dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3x4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix3x4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3x4fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix4fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4x2dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix4x2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4x2dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4x2fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix4x2fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4x2fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4x3dv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix4x3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4x3dv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4x3fv(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix4x3fv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4x3fv(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glUseProgramStages(RegalContext *_context, GLuint pipeline, GLbitfield stages, GLuint program)
{
  Internal("trace_glUseProgramStages","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUseProgramStages(_context, pipeline, stages, program);
}

static void REGAL_CALL trace_glValidateProgramPipeline(RegalContext *_context, GLuint pipeline)
{
  Internal("trace_glValidateProgramPipeline","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glValidateProgramPipeline(_context, pipeline);
}

// GL_ARB_shader_atomic_counters

static void REGAL_CALL trace_glGetActiveAtomicCounterBufferiv(RegalContext *_context, GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
  Internal("trace_glGetActiveAtomicCounterBufferiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveAtomicCounterBufferiv(_context, program, bufferIndex, pname, params);
}

// GL_ARB_shader_image_load_store

static void REGAL_CALL trace_glBindImageTexture(RegalContext *_context, GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  Internal("trace_glBindImageTexture","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindImageTexture(_context, unit, texture, level, layered, layer, access, format);
}

static void REGAL_CALL trace_glMemoryBarrier(RegalContext *_context, GLbitfield barriers)
{
  Internal("trace_glMemoryBarrier","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMemoryBarrier(_context, barriers);
}

// GL_ARB_shader_objects

static void REGAL_CALL trace_glAttachObjectARB(RegalContext *_context, GLhandleARB containerObj, GLhandleARB obj)
{
  Internal("trace_glAttachObjectARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAttachObjectARB(_context, containerObj, obj);
}

static void REGAL_CALL trace_glCompileShaderARB(RegalContext *_context, GLhandleARB shaderObj)
{
  Internal("trace_glCompileShaderARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompileShaderARB(_context, shaderObj);
}

static GLhandleARB REGAL_CALL trace_glCreateProgramObjectARB(RegalContext *_context)
{
  Internal("trace_glCreateProgramObjectARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLhandleARB  ret = Trace::glCreateProgramObjectARB(_context);
  return ret;
}

static GLhandleARB REGAL_CALL trace_glCreateShaderObjectARB(RegalContext *_context, GLenum shaderType)
{
  Internal("trace_glCreateShaderObjectARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLhandleARB  ret = Trace::glCreateShaderObjectARB(_context, shaderType);
  return ret;
}

static void REGAL_CALL trace_glDeleteObjectARB(RegalContext *_context, GLhandleARB obj)
{
  Internal("trace_glDeleteObjectARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteObjectARB(_context, obj);
}

static void REGAL_CALL trace_glDetachObjectARB(RegalContext *_context, GLhandleARB containerObj, GLhandleARB attachedObj)
{
  Internal("trace_glDetachObjectARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDetachObjectARB(_context, containerObj, attachedObj);
}

static void REGAL_CALL trace_glGetActiveUniformARB(RegalContext *_context, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  Internal("trace_glGetActiveUniformARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveUniformARB(_context, programObj, index, maxLength, length, size, type, name);
}

static void REGAL_CALL trace_glGetAttachedObjectsARB(RegalContext *_context, GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
  Internal("trace_glGetAttachedObjectsARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetAttachedObjectsARB(_context, containerObj, maxCount, count, obj);
}

static GLhandleARB REGAL_CALL trace_glGetHandleARB(RegalContext *_context, GLenum pname)
{
  Internal("trace_glGetHandleARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLhandleARB  ret = Trace::glGetHandleARB(_context, pname);
  return ret;
}

static void REGAL_CALL trace_glGetInfoLogARB(RegalContext *_context, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
  Internal("trace_glGetInfoLogARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetInfoLogARB(_context, obj, maxLength, length, infoLog);
}

static void REGAL_CALL trace_glGetObjectParameterfvARB(RegalContext *_context, GLhandleARB obj, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetObjectParameterfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetObjectParameterfvARB(_context, obj, pname, params);
}

static void REGAL_CALL trace_glGetObjectParameterivARB(RegalContext *_context, GLhandleARB obj, GLenum pname, GLint *params)
{
  Internal("trace_glGetObjectParameterivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetObjectParameterivARB(_context, obj, pname, params);
}

static void REGAL_CALL trace_glGetShaderSourceARB(RegalContext *_context, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
  Internal("trace_glGetShaderSourceARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetShaderSourceARB(_context, obj, maxLength, length, source);
}

static GLint REGAL_CALL trace_glGetUniformLocationARB(RegalContext *_context, GLhandleARB programObj, const GLcharARB *name)
{
  Internal("trace_glGetUniformLocationARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetUniformLocationARB(_context, programObj, name);
  return ret;
}

static void REGAL_CALL trace_glGetUniformfvARB(RegalContext *_context, GLhandleARB programObj, GLint location, GLfloat *params)
{
  Internal("trace_glGetUniformfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformfvARB(_context, programObj, location, params);
}

static void REGAL_CALL trace_glGetUniformivARB(RegalContext *_context, GLhandleARB programObj, GLint location, GLint *params)
{
  Internal("trace_glGetUniformivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformivARB(_context, programObj, location, params);
}

static void REGAL_CALL trace_glLinkProgramARB(RegalContext *_context, GLhandleARB programObj)
{
  Internal("trace_glLinkProgramARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLinkProgramARB(_context, programObj);
}

static void REGAL_CALL trace_glShaderSourceARB(RegalContext *_context, GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
{
  Internal("trace_glShaderSourceARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glShaderSourceARB(_context, shaderObj, count, string, length);
}

static void REGAL_CALL trace_glUniform1fARB(RegalContext *_context, GLint location, GLfloat v0)
{
  Internal("trace_glUniform1fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1fARB(_context, location, v0);
}

static void REGAL_CALL trace_glUniform1fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glUniform1fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1fvARB(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform1iARB(RegalContext *_context, GLint location, GLint v0)
{
  Internal("trace_glUniform1iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1iARB(_context, location, v0);
}

static void REGAL_CALL trace_glUniform1ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glUniform1ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1ivARB(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1)
{
  Internal("trace_glUniform2fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2fARB(_context, location, v0, v1);
}

static void REGAL_CALL trace_glUniform2fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glUniform2fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2fvARB(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2iARB(RegalContext *_context, GLint location, GLint v0, GLint v1)
{
  Internal("trace_glUniform2iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2iARB(_context, location, v0, v1);
}

static void REGAL_CALL trace_glUniform2ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glUniform2ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2ivARB(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Internal("trace_glUniform3fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3fARB(_context, location, v0, v1, v2);
}

static void REGAL_CALL trace_glUniform3fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glUniform3fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3fvARB(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3iARB(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2)
{
  Internal("trace_glUniform3iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3iARB(_context, location, v0, v1, v2);
}

static void REGAL_CALL trace_glUniform3ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glUniform3ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3ivARB(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4fARB(RegalContext *_context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Internal("trace_glUniform4fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4fARB(_context, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glUniform4fvARB(RegalContext *_context, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glUniform4fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4fvARB(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4iARB(RegalContext *_context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Internal("trace_glUniform4iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4iARB(_context, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glUniform4ivARB(RegalContext *_context, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glUniform4ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4ivARB(_context, location, count, value);
}

static void REGAL_CALL trace_glUniformMatrix2fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix2fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix2fvARB(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix3fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix3fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix3fvARB(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUniformMatrix4fvARB(RegalContext *_context, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glUniformMatrix4fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformMatrix4fvARB(_context, location, count, transpose, value);
}

static void REGAL_CALL trace_glUseProgramObjectARB(RegalContext *_context, GLhandleARB programObj)
{
  Internal("trace_glUseProgramObjectARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUseProgramObjectARB(_context, programObj);
}

static void REGAL_CALL trace_glValidateProgramARB(RegalContext *_context, GLhandleARB programObj)
{
  Internal("trace_glValidateProgramARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glValidateProgramARB(_context, programObj);
}

// GL_ARB_shader_storage_buffer_object

static void REGAL_CALL trace_glShaderStorageBlockBinding(RegalContext *_context, GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
  Internal("trace_glShaderStorageBlockBinding","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glShaderStorageBlockBinding(_context, program, storageBlockIndex, storageBlockBinding);
}

// GL_ARB_shader_subroutine

static void REGAL_CALL trace_glGetActiveSubroutineName(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Internal("trace_glGetActiveSubroutineName","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveSubroutineName(_context, program, shaderType, index, bufSize, length, name);
}

static void REGAL_CALL trace_glGetActiveSubroutineUniformName(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  Internal("trace_glGetActiveSubroutineUniformName","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveSubroutineUniformName(_context, program, shaderType, index, bufSize, length, name);
}

static void REGAL_CALL trace_glGetActiveSubroutineUniformiv(RegalContext *_context, GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
  Internal("trace_glGetActiveSubroutineUniformiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveSubroutineUniformiv(_context, program, shaderType, index, pname, values);
}

static void REGAL_CALL trace_glGetProgramStageiv(RegalContext *_context, GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
  Internal("trace_glGetProgramStageiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramStageiv(_context, program, shaderType, pname, values);
}

static void REGAL_CALL trace_glGetProgramSubroutineParameteruivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params)
{
  Internal("trace_glGetProgramSubroutineParameteruivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramSubroutineParameteruivNV(_context, target, index, params);
}

static GLuint REGAL_CALL trace_glGetSubroutineIndex(RegalContext *_context, GLuint program, GLenum shaderType, const GLchar *name)
{
  Internal("trace_glGetSubroutineIndex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGetSubroutineIndex(_context, program, shaderType, name);
  return ret;
}

static GLint REGAL_CALL trace_glGetSubroutineUniformLocation(RegalContext *_context, GLuint program, GLenum shaderType, const GLchar *name)
{
  Internal("trace_glGetSubroutineUniformLocation","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetSubroutineUniformLocation(_context, program, shaderType, name);
  return ret;
}

static void REGAL_CALL trace_glGetUniformSubroutineuiv(RegalContext *_context, GLenum shaderType, GLint location, GLuint *params)
{
  Internal("trace_glGetUniformSubroutineuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformSubroutineuiv(_context, shaderType, location, params);
}

static void REGAL_CALL trace_glProgramSubroutineParametersuivNV(RegalContext *_context, GLenum target, GLsizei count, const GLuint *params)
{
  Internal("trace_glProgramSubroutineParametersuivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramSubroutineParametersuivNV(_context, target, count, params);
}

static void REGAL_CALL trace_glUniformSubroutinesuiv(RegalContext *_context, GLenum shaderType, GLsizei count, const GLuint *indices)
{
  Internal("trace_glUniformSubroutinesuiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformSubroutinesuiv(_context, shaderType, count, indices);
}

// GL_ARB_shading_language_include

static void REGAL_CALL trace_glCompileShaderIncludeARB(RegalContext *_context, GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
  Internal("trace_glCompileShaderIncludeARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompileShaderIncludeARB(_context, shader, count, path, length);
}

static void REGAL_CALL trace_glDeleteNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name)
{
  Internal("trace_glDeleteNamedStringARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteNamedStringARB(_context, namelen, name);
}

static void REGAL_CALL trace_glGetNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
  Internal("trace_glGetNamedStringARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedStringARB(_context, namelen, name, bufSize, stringlen, string);
}

static void REGAL_CALL trace_glGetNamedStringivARB(RegalContext *_context, GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
  Internal("trace_glGetNamedStringivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedStringivARB(_context, namelen, name, pname, params);
}

static GLboolean REGAL_CALL trace_glIsNamedStringARB(RegalContext *_context, GLint namelen, const GLchar *name)
{
  Internal("trace_glIsNamedStringARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsNamedStringARB(_context, namelen, name);
  return ret;
}

static void REGAL_CALL trace_glNamedStringARB(RegalContext *_context, GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
  Internal("trace_glNamedStringARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedStringARB(_context, type, namelen, name, stringlen, string);
}

// GL_ARB_sync

static GLenum REGAL_CALL trace_glClientWaitSync(RegalContext *_context, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Internal("trace_glClientWaitSync","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glClientWaitSync(_context, sync, flags, timeout);
  return ret;
}

static void REGAL_CALL trace_glDeleteSync(RegalContext *_context, GLsync sync)
{
  Internal("trace_glDeleteSync","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteSync(_context, sync);
}

static GLsync REGAL_CALL trace_glFenceSync(RegalContext *_context, GLenum condition, GLbitfield flags)
{
  Internal("trace_glFenceSync","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLsync  ret = Trace::glFenceSync(_context, condition, flags);
  return ret;
}

static void REGAL_CALL trace_glGetInteger64v(RegalContext *_context, GLenum pname, GLint64 *params)
{
  Internal("trace_glGetInteger64v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetInteger64v(_context, pname, params);
}

static void REGAL_CALL trace_glGetSynciv(RegalContext *_context, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  Internal("trace_glGetSynciv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetSynciv(_context, sync, pname, bufSize, length, values);
}

static GLboolean REGAL_CALL trace_glIsSync(RegalContext *_context, GLsync sync)
{
  Internal("trace_glIsSync","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsSync(_context, sync);
  return ret;
}

static void REGAL_CALL trace_glWaitSync(RegalContext *_context, GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  Internal("trace_glWaitSync","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWaitSync(_context, sync, flags, timeout);
}

// GL_ARB_tessellation_shader

static void REGAL_CALL trace_glPatchParameterfv(RegalContext *_context, GLenum pname, const GLfloat *values)
{
  Internal("trace_glPatchParameterfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPatchParameterfv(_context, pname, values);
}

static void REGAL_CALL trace_glPatchParameteri(RegalContext *_context, GLenum pname, GLint value)
{
  Internal("trace_glPatchParameteri","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPatchParameteri(_context, pname, value);
}

// GL_ARB_texture_buffer_object

static void REGAL_CALL trace_glTexBufferARB(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("trace_glTexBufferARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexBufferARB(_context, target, internalformat, buffer);
}

// GL_ARB_texture_buffer_range

static void REGAL_CALL trace_glTexBufferRange(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("trace_glTexBufferRange","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexBufferRange(_context, target, internalformat, buffer, offset, size);
}

static void REGAL_CALL trace_glTextureBufferRangeEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("trace_glTextureBufferRangeEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureBufferRangeEXT(_context, texture, target, internalformat, buffer, offset, size);
}

// GL_ARB_texture_compression

static void REGAL_CALL trace_glCompressedTexImage1DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexImage1DARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexImage1DARB(_context, target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexImage2DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexImage2DARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexImage2DARB(_context, target, level, internalformat, width, height, border, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexImage3DARB(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexImage3DARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexImage3DARB(_context, target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexSubImage1DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexSubImage1DARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexSubImage1DARB(_context, target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexSubImage2DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexSubImage2DARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexSubImage2DARB(_context, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexSubImage3DARB(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexSubImage3DARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexSubImage3DARB(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL trace_glGetCompressedTexImageARB(RegalContext *_context, GLenum target, GLint lod, GLvoid *img)
{
  Internal("trace_glGetCompressedTexImageARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCompressedTexImageARB(_context, target, lod, img);
}

// GL_ARB_texture_multisample

static void REGAL_CALL trace_glGetMultisamplefv(RegalContext *_context, GLenum pname, GLuint index, GLfloat *val)
{
  Internal("trace_glGetMultisamplefv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultisamplefv(_context, pname, index, val);
}

static void REGAL_CALL trace_glSampleMaski(RegalContext *_context, GLuint index, GLbitfield mask)
{
  Internal("trace_glSampleMaski","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSampleMaski(_context, index, mask);
}

static void REGAL_CALL trace_glTexImage2DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Internal("trace_glTexImage2DMultisample","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage2DMultisample(_context, target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL trace_glTexImage3DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Internal("trace_glTexImage3DMultisample","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage3DMultisample(_context, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

// GL_ARB_texture_storage

static void REGAL_CALL trace_glTexStorage1D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Internal("trace_glTexStorage1D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexStorage1D(_context, target, levels, internalformat, width);
}

static void REGAL_CALL trace_glTexStorage2D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glTexStorage2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexStorage2D(_context, target, levels, internalformat, width, height);
}

static void REGAL_CALL trace_glTexStorage3D(RegalContext *_context, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("trace_glTexStorage3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexStorage3D(_context, target, levels, internalformat, width, height, depth);
}

static void REGAL_CALL trace_glTextureStorage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  Internal("trace_glTextureStorage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureStorage1DEXT(_context, texture, target, levels, internalformat, width);
}

static void REGAL_CALL trace_glTextureStorage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glTextureStorage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureStorage2DEXT(_context, texture, target, levels, internalformat, width, height);
}

static void REGAL_CALL trace_glTextureStorage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("trace_glTextureStorage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureStorage3DEXT(_context, texture, target, levels, internalformat, width, height, depth);
}

// GL_ARB_texture_storage_multisample

static void REGAL_CALL trace_glTexStorage2DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Internal("trace_glTexStorage2DMultisample","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexStorage2DMultisample(_context, target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL trace_glTexStorage3DMultisample(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Internal("trace_glTexStorage3DMultisample","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexStorage3DMultisample(_context, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

static void REGAL_CALL trace_glTextureStorage2DMultisampleEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  Internal("trace_glTextureStorage2DMultisampleEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureStorage2DMultisampleEXT(_context, texture, target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL trace_glTextureStorage3DMultisampleEXT(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  Internal("trace_glTextureStorage3DMultisampleEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureStorage3DMultisampleEXT(_context, texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

// GL_ARB_texture_view

static void REGAL_CALL trace_glTextureView(RegalContext *_context, GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  Internal("trace_glTextureView","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureView(_context, texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

// GL_ARB_timer_query

static void REGAL_CALL trace_glGetQueryObjecti64v(RegalContext *_context, GLuint id, GLenum pname, GLint64 *params)
{
  Internal("trace_glGetQueryObjecti64v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjecti64v(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetQueryObjectui64v(RegalContext *_context, GLuint id, GLenum pname, GLuint64 *params)
{
  Internal("trace_glGetQueryObjectui64v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjectui64v(_context, id, pname, params);
}

static void REGAL_CALL trace_glQueryCounter(RegalContext *_context, GLuint id, GLenum target)
{
  Internal("trace_glQueryCounter","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glQueryCounter(_context, id, target);
}

// GL_ARB_transform_feedback2

static void REGAL_CALL trace_glBindTransformFeedback(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("trace_glBindTransformFeedback","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindTransformFeedback(_context, target, id);
}

static void REGAL_CALL trace_glDeleteTransformFeedbacks(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("trace_glDeleteTransformFeedbacks","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteTransformFeedbacks(_context, n, ids);
}

static void REGAL_CALL trace_glDrawTransformFeedback(RegalContext *_context, GLenum mode, GLuint name)
{
  Internal("trace_glDrawTransformFeedback","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawTransformFeedback(_context, mode, name);
}

static void REGAL_CALL trace_glGenTransformFeedbacks(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("trace_glGenTransformFeedbacks","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenTransformFeedbacks(_context, n, ids);
}

static GLboolean REGAL_CALL trace_glIsTransformFeedback(RegalContext *_context, GLuint id)
{
  Internal("trace_glIsTransformFeedback","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsTransformFeedback(_context, id);
  return ret;
}

static void REGAL_CALL trace_glPauseTransformFeedback(RegalContext *_context)
{
  Internal("trace_glPauseTransformFeedback","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPauseTransformFeedback(_context);
}

static void REGAL_CALL trace_glResumeTransformFeedback(RegalContext *_context)
{
  Internal("trace_glResumeTransformFeedback","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glResumeTransformFeedback(_context);
}

// GL_ARB_transform_feedback3

static void REGAL_CALL trace_glBeginQueryIndexed(RegalContext *_context, GLenum target, GLuint index, GLuint id)
{
  Internal("trace_glBeginQueryIndexed","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginQueryIndexed(_context, target, index, id);
}

static void REGAL_CALL trace_glDrawTransformFeedbackStream(RegalContext *_context, GLenum mode, GLuint id, GLuint stream)
{
  Internal("trace_glDrawTransformFeedbackStream","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawTransformFeedbackStream(_context, mode, id, stream);
}

static void REGAL_CALL trace_glEndQueryIndexed(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("trace_glEndQueryIndexed","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndQueryIndexed(_context, target, index);
}

static void REGAL_CALL trace_glGetQueryIndexediv(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLint *params)
{
  Internal("trace_glGetQueryIndexediv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryIndexediv(_context, target, index, pname, params);
}

// GL_ARB_transform_feedback_instanced

static void REGAL_CALL trace_glDrawTransformFeedbackInstanced(RegalContext *_context, GLenum mode, GLuint id, GLsizei primcount)
{
  Internal("trace_glDrawTransformFeedbackInstanced","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawTransformFeedbackInstanced(_context, mode, id, primcount);
}

static void REGAL_CALL trace_glDrawTransformFeedbackStreamInstanced(RegalContext *_context, GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
  Internal("trace_glDrawTransformFeedbackStreamInstanced","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawTransformFeedbackStreamInstanced(_context, mode, id, stream, primcount);
}

// GL_ARB_transpose_matrix

static void REGAL_CALL trace_glLoadTransposeMatrixdARB(RegalContext *_context, const GLdouble *m)
{
  Internal("trace_glLoadTransposeMatrixdARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadTransposeMatrixdARB(_context, m);
}

static void REGAL_CALL trace_glLoadTransposeMatrixfARB(RegalContext *_context, const GLfloat *m)
{
  Internal("trace_glLoadTransposeMatrixfARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadTransposeMatrixfARB(_context, m);
}

static void REGAL_CALL trace_glMultTransposeMatrixdARB(RegalContext *_context, const GLdouble *m)
{
  Internal("trace_glMultTransposeMatrixdARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultTransposeMatrixdARB(_context, m);
}

static void REGAL_CALL trace_glMultTransposeMatrixfARB(RegalContext *_context, const GLfloat *m)
{
  Internal("trace_glMultTransposeMatrixfARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultTransposeMatrixfARB(_context, m);
}

// GL_ARB_uniform_buffer_object

static void REGAL_CALL trace_glBindBufferBase(RegalContext *_context, GLenum target, GLuint index, GLuint buffer)
{
  Internal("trace_glBindBufferBase","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferBase(_context, target, index, buffer);
}

static void REGAL_CALL trace_glBindBufferRange(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("trace_glBindBufferRange","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferRange(_context, target, index, buffer, offset, size);
}

static void REGAL_CALL trace_glGetActiveUniformBlockName(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
  Internal("trace_glGetActiveUniformBlockName","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveUniformBlockName(_context, program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

static void REGAL_CALL trace_glGetActiveUniformBlockiv(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
  Internal("trace_glGetActiveUniformBlockiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveUniformBlockiv(_context, program, uniformBlockIndex, pname, params);
}

static void REGAL_CALL trace_glGetActiveUniformName(RegalContext *_context, GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
  Internal("trace_glGetActiveUniformName","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveUniformName(_context, program, uniformIndex, bufSize, length, uniformName);
}

static void REGAL_CALL trace_glGetActiveUniformsiv(RegalContext *_context, GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
  Internal("trace_glGetActiveUniformsiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveUniformsiv(_context, program, uniformCount, uniformIndices, pname, params);
}

static void REGAL_CALL trace_glGetIntegeri_v(RegalContext *_context, GLenum target, GLuint index, GLint *data)
{
  Internal("trace_glGetIntegeri_v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetIntegeri_v(_context, target, index, data);
}

static GLuint REGAL_CALL trace_glGetUniformBlockIndex(RegalContext *_context, GLuint program, const GLchar *uniformBlockName)
{
  Internal("trace_glGetUniformBlockIndex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGetUniformBlockIndex(_context, program, uniformBlockName);
  return ret;
}

static void REGAL_CALL trace_glGetUniformIndices(RegalContext *_context, GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
  Internal("trace_glGetUniformIndices","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformIndices(_context, program, uniformCount, uniformNames, uniformIndices);
}

static void REGAL_CALL trace_glUniformBlockBinding(RegalContext *_context, GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  Internal("trace_glUniformBlockBinding","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformBlockBinding(_context, program, uniformBlockIndex, uniformBlockBinding);
}

// GL_ARB_vertex_array_object

static void REGAL_CALL trace_glBindVertexArray(RegalContext *_context, GLuint array)
{
  Internal("trace_glBindVertexArray","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindVertexArray(_context, array);
}

static void REGAL_CALL trace_glDeleteVertexArrays(RegalContext *_context, GLsizei n, const GLuint *arrays)
{
  Internal("trace_glDeleteVertexArrays","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteVertexArrays(_context, n, arrays);
}

static void REGAL_CALL trace_glGenVertexArrays(RegalContext *_context, GLsizei n, GLuint *arrays)
{
  Internal("trace_glGenVertexArrays","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenVertexArrays(_context, n, arrays);
}

static GLboolean REGAL_CALL trace_glIsVertexArray(RegalContext *_context, GLuint array)
{
  Internal("trace_glIsVertexArray","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsVertexArray(_context, array);
  return ret;
}

// GL_ARB_vertex_attrib_64bit

static void REGAL_CALL trace_glGetVertexAttribLdv(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetVertexAttribLdv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribLdv(_context, index, pname, params);
}

static void REGAL_CALL trace_glVertexAttribL1d(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("trace_glVertexAttribL1d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL1d(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttribL1dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttribL1dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL1dv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL2d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("trace_glVertexAttribL2d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL2d(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttribL2dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttribL2dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL2dv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL3d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glVertexAttribL3d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL3d(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttribL3dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttribL3dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL3dv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL4d(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glVertexAttribL4d","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL4d(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttribL4dv(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttribL4dv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL4dv(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribLPointer(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexAttribLPointer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribLPointer(_context, index, size, type, stride, pointer);
}

// GL_ARB_vertex_attrib_binding

static void REGAL_CALL trace_glBindVertexBuffer(RegalContext *_context, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  Internal("trace_glBindVertexBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindVertexBuffer(_context, bindingindex, buffer, offset, stride);
}

static void REGAL_CALL trace_glVertexArrayBindVertexBufferEXT(RegalContext *_context, GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  Internal("trace_glVertexArrayBindVertexBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayBindVertexBufferEXT(_context, vaobj, bindingindex, buffer, offset, stride);
}

static void REGAL_CALL trace_glVertexArrayVertexAttribBindingEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
  Internal("trace_glVertexArrayVertexAttribBindingEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexAttribBindingEXT(_context, vaobj, attribindex, bindingindex);
}

static void REGAL_CALL trace_glVertexArrayVertexAttribFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  Internal("trace_glVertexArrayVertexAttribFormatEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexAttribFormatEXT(_context, vaobj, attribindex, size, type, normalized, relativeoffset);
}

static void REGAL_CALL trace_glVertexArrayVertexAttribIFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Internal("trace_glVertexArrayVertexAttribIFormatEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexAttribIFormatEXT(_context, vaobj, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL trace_glVertexArrayVertexAttribLFormatEXT(RegalContext *_context, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Internal("trace_glVertexArrayVertexAttribLFormatEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexAttribLFormatEXT(_context, vaobj, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL trace_glVertexArrayVertexBindingDivisorEXT(RegalContext *_context, GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
  Internal("trace_glVertexArrayVertexBindingDivisorEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexBindingDivisorEXT(_context, vaobj, bindingindex, divisor);
}

static void REGAL_CALL trace_glVertexAttribBinding(RegalContext *_context, GLuint attribindex, GLuint bindingindex)
{
  Internal("trace_glVertexAttribBinding","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribBinding(_context, attribindex, bindingindex);
}

static void REGAL_CALL trace_glVertexAttribFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  Internal("trace_glVertexAttribFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribFormat(_context, attribindex, size, type, normalized, relativeoffset);
}

static void REGAL_CALL trace_glVertexAttribIFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Internal("trace_glVertexAttribIFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribIFormat(_context, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL trace_glVertexAttribLFormat(RegalContext *_context, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  Internal("trace_glVertexAttribLFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribLFormat(_context, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL trace_glVertexBindingDivisor(RegalContext *_context, GLuint bindingindex, GLuint divisor)
{
  Internal("trace_glVertexBindingDivisor","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexBindingDivisor(_context, bindingindex, divisor);
}

// GL_ARB_vertex_blend

static void REGAL_CALL trace_glVertexBlendARB(RegalContext *_context, GLint count)
{
  Internal("trace_glVertexBlendARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexBlendARB(_context, count);
}

static void REGAL_CALL trace_glWeightPointerARB(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glWeightPointerARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightPointerARB(_context, size, type, stride, pointer);
}

static void REGAL_CALL trace_glWeightbvARB(RegalContext *_context, GLint size, const GLbyte *weights)
{
  Internal("trace_glWeightbvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightbvARB(_context, size, weights);
}

static void REGAL_CALL trace_glWeightdvARB(RegalContext *_context, GLint size, const GLdouble *weights)
{
  Internal("trace_glWeightdvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightdvARB(_context, size, weights);
}

static void REGAL_CALL trace_glWeightfvARB(RegalContext *_context, GLint size, const GLfloat *weights)
{
  Internal("trace_glWeightfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightfvARB(_context, size, weights);
}

static void REGAL_CALL trace_glWeightivARB(RegalContext *_context, GLint size, const GLint *weights)
{
  Internal("trace_glWeightivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightivARB(_context, size, weights);
}

static void REGAL_CALL trace_glWeightsvARB(RegalContext *_context, GLint size, const GLshort *weights)
{
  Internal("trace_glWeightsvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightsvARB(_context, size, weights);
}

static void REGAL_CALL trace_glWeightubvARB(RegalContext *_context, GLint size, const GLubyte *weights)
{
  Internal("trace_glWeightubvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightubvARB(_context, size, weights);
}

static void REGAL_CALL trace_glWeightuivARB(RegalContext *_context, GLint size, const GLuint *weights)
{
  Internal("trace_glWeightuivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightuivARB(_context, size, weights);
}

static void REGAL_CALL trace_glWeightusvARB(RegalContext *_context, GLint size, const GLushort *weights)
{
  Internal("trace_glWeightusvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightusvARB(_context, size, weights);
}

// GL_ARB_vertex_buffer_object

static void REGAL_CALL trace_glBindBufferARB(RegalContext *_context, GLenum target, GLuint buffer)
{
  Internal("trace_glBindBufferARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferARB(_context, target, buffer);
}

static void REGAL_CALL trace_glBufferDataARB(RegalContext *_context, GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
  Internal("trace_glBufferDataARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBufferDataARB(_context, target, size, data, usage);
}

static void REGAL_CALL trace_glBufferSubDataARB(RegalContext *_context, GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
  Internal("trace_glBufferSubDataARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBufferSubDataARB(_context, target, offset, size, data);
}

static void REGAL_CALL trace_glDeleteBuffersARB(RegalContext *_context, GLsizei n, const GLuint *buffers)
{
  Internal("trace_glDeleteBuffersARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteBuffersARB(_context, n, buffers);
}

static void REGAL_CALL trace_glGenBuffersARB(RegalContext *_context, GLsizei n, GLuint *buffers)
{
  Internal("trace_glGenBuffersARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenBuffersARB(_context, n, buffers);
}

static void REGAL_CALL trace_glGetBufferParameterivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetBufferParameterivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferParameterivARB(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetBufferPointervARB(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params)
{
  Internal("trace_glGetBufferPointervARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferPointervARB(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetBufferSubDataARB(RegalContext *_context, GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
  Internal("trace_glGetBufferSubDataARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferSubDataARB(_context, target, offset, size, data);
}

static GLboolean REGAL_CALL trace_glIsBufferARB(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glIsBufferARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsBufferARB(_context, buffer);
  return ret;
}

static GLvoid *REGAL_CALL trace_glMapBufferARB(RegalContext *_context, GLenum target, GLenum access)
{
  Internal("trace_glMapBufferARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLvoid * ret = Trace::glMapBufferARB(_context, target, access);
  return ret;
}

static GLboolean REGAL_CALL trace_glUnmapBufferARB(RegalContext *_context, GLenum target)
{
  Internal("trace_glUnmapBufferARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glUnmapBufferARB(_context, target);
  return ret;
}

// GL_ARB_vertex_program

static void REGAL_CALL trace_glBindProgramARB(RegalContext *_context, GLenum target, GLuint program)
{
  Internal("trace_glBindProgramARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindProgramARB(_context, target, program);
}

static void REGAL_CALL trace_glDeleteProgramsARB(RegalContext *_context, GLsizei n, const GLuint *programs)
{
  Internal("trace_glDeleteProgramsARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteProgramsARB(_context, n, programs);
}

static void REGAL_CALL trace_glDisableVertexAttribArrayARB(RegalContext *_context, GLuint index)
{
  Internal("trace_glDisableVertexAttribArrayARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableVertexAttribArrayARB(_context, index);
}

static void REGAL_CALL trace_glEnableVertexAttribArrayARB(RegalContext *_context, GLuint index)
{
  Internal("trace_glEnableVertexAttribArrayARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableVertexAttribArrayARB(_context, index);
}

static void REGAL_CALL trace_glGenProgramsARB(RegalContext *_context, GLsizei n, GLuint *programs)
{
  Internal("trace_glGenProgramsARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenProgramsARB(_context, n, programs);
}

static void REGAL_CALL trace_glGetProgramEnvParameterdvARB(RegalContext *_context, GLenum target, GLuint index, GLdouble *params)
{
  Internal("trace_glGetProgramEnvParameterdvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramEnvParameterdvARB(_context, target, index, params);
}

static void REGAL_CALL trace_glGetProgramEnvParameterfvARB(RegalContext *_context, GLenum target, GLuint index, GLfloat *params)
{
  Internal("trace_glGetProgramEnvParameterfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramEnvParameterfvARB(_context, target, index, params);
}

static void REGAL_CALL trace_glGetProgramLocalParameterdvARB(RegalContext *_context, GLenum target, GLuint index, GLdouble *params)
{
  Internal("trace_glGetProgramLocalParameterdvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramLocalParameterdvARB(_context, target, index, params);
}

static void REGAL_CALL trace_glGetProgramLocalParameterfvARB(RegalContext *_context, GLenum target, GLuint index, GLfloat *params)
{
  Internal("trace_glGetProgramLocalParameterfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramLocalParameterfvARB(_context, target, index, params);
}

static void REGAL_CALL trace_glGetProgramStringARB(RegalContext *_context, GLenum target, GLenum pname, GLvoid *string)
{
  Internal("trace_glGetProgramStringARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramStringARB(_context, target, pname, string);
}

static void REGAL_CALL trace_glGetProgramivARB(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetProgramivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramivARB(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribPointervARB(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer)
{
  Internal("trace_glGetVertexAttribPointervARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribPointervARB(_context, index, pname, pointer);
}

static void REGAL_CALL trace_glGetVertexAttribdvARB(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetVertexAttribdvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribdvARB(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribfvARB(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetVertexAttribfvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribfvARB(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribivARB(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("trace_glGetVertexAttribivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribivARB(_context, index, pname, params);
}

static GLboolean REGAL_CALL trace_glIsProgramARB(RegalContext *_context, GLuint program)
{
  Internal("trace_glIsProgramARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsProgramARB(_context, program);
  return ret;
}

static void REGAL_CALL trace_glProgramEnvParameter4dARB(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glProgramEnvParameter4dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameter4dARB(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramEnvParameter4dvARB(RegalContext *_context, GLenum target, GLuint index, const GLdouble *params)
{
  Internal("trace_glProgramEnvParameter4dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameter4dvARB(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramEnvParameter4fARB(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glProgramEnvParameter4fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameter4fARB(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramEnvParameter4fvARB(RegalContext *_context, GLenum target, GLuint index, const GLfloat *params)
{
  Internal("trace_glProgramEnvParameter4fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameter4fvARB(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramLocalParameter4dARB(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glProgramLocalParameter4dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameter4dARB(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramLocalParameter4dvARB(RegalContext *_context, GLenum target, GLuint index, const GLdouble *params)
{
  Internal("trace_glProgramLocalParameter4dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameter4dvARB(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramLocalParameter4fARB(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glProgramLocalParameter4fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameter4fARB(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramLocalParameter4fvARB(RegalContext *_context, GLenum target, GLuint index, const GLfloat *params)
{
  Internal("trace_glProgramLocalParameter4fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameter4fvARB(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramStringARB(RegalContext *_context, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  Internal("trace_glProgramStringARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramStringARB(_context, target, format, len, string);
}

static void REGAL_CALL trace_glVertexAttrib1dARB(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("trace_glVertexAttrib1dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1dARB(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib1dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1dvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib1fARB(RegalContext *_context, GLuint index, GLfloat x)
{
  Internal("trace_glVertexAttrib1fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1fARB(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib1fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1fvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib1sARB(RegalContext *_context, GLuint index, GLshort x)
{
  Internal("trace_glVertexAttrib1sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1sARB(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib1svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1svARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("trace_glVertexAttrib2dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2dARB(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib2dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2dvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y)
{
  Internal("trace_glVertexAttrib2fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2fARB(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib2fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2fvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y)
{
  Internal("trace_glVertexAttrib2sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2sARB(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib2svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2svARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glVertexAttrib3dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3dARB(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib3dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3dvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glVertexAttrib3fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3fARB(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib3fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3fvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glVertexAttrib3sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3sARB(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib3svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3svARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4NbvARB(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("trace_glVertexAttrib4NbvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4NbvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4NivARB(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttrib4NivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4NivARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4NsvARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib4NsvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4NsvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4NubARB(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Internal("trace_glVertexAttrib4NubARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4NubARB(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4NubvARB(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("trace_glVertexAttrib4NubvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4NubvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4NuivARB(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttrib4NuivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4NuivARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4NusvARB(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("trace_glVertexAttrib4NusvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4NusvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4bvARB(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("trace_glVertexAttrib4bvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4bvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4dARB(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glVertexAttrib4dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4dARB(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4dvARB(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib4dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4dvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4fARB(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glVertexAttrib4fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4fARB(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4fvARB(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib4fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4fvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4ivARB(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttrib4ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4ivARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4sARB(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("trace_glVertexAttrib4sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4sARB(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4svARB(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib4svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4svARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4ubvARB(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("trace_glVertexAttrib4ubvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4ubvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4uivARB(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttrib4uivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4uivARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4usvARB(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("trace_glVertexAttrib4usvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4usvARB(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribPointerARB(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexAttribPointerARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribPointerARB(_context, index, size, type, normalized, stride, pointer);
}

// GL_ARB_vertex_shader

static void REGAL_CALL trace_glBindAttribLocationARB(RegalContext *_context, GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
  Internal("trace_glBindAttribLocationARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindAttribLocationARB(_context, programObj, index, name);
}

static void REGAL_CALL trace_glGetActiveAttribARB(RegalContext *_context, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  Internal("trace_glGetActiveAttribARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveAttribARB(_context, programObj, index, maxLength, length, size, type, name);
}

static GLint REGAL_CALL trace_glGetAttribLocationARB(RegalContext *_context, GLhandleARB programObj, const GLcharARB *name)
{
  Internal("trace_glGetAttribLocationARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetAttribLocationARB(_context, programObj, name);
  return ret;
}

// GL_ARB_vertex_type_2_10_10_10_rev

static void REGAL_CALL trace_glColorP3ui(RegalContext *_context, GLenum type, GLuint color)
{
  Internal("trace_glColorP3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorP3ui(_context, type, color);
}

static void REGAL_CALL trace_glColorP3uiv(RegalContext *_context, GLenum type, const GLuint *color)
{
  Internal("trace_glColorP3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorP3uiv(_context, type, color);
}

static void REGAL_CALL trace_glColorP4ui(RegalContext *_context, GLenum type, GLuint color)
{
  Internal("trace_glColorP4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorP4ui(_context, type, color);
}

static void REGAL_CALL trace_glColorP4uiv(RegalContext *_context, GLenum type, const GLuint *color)
{
  Internal("trace_glColorP4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorP4uiv(_context, type, color);
}

static void REGAL_CALL trace_glMultiTexCoordP1ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords)
{
  Internal("trace_glMultiTexCoordP1ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordP1ui(_context, texture, type, coords);
}

static void REGAL_CALL trace_glMultiTexCoordP1uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords)
{
  Internal("trace_glMultiTexCoordP1uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordP1uiv(_context, texture, type, coords);
}

static void REGAL_CALL trace_glMultiTexCoordP2ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords)
{
  Internal("trace_glMultiTexCoordP2ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordP2ui(_context, texture, type, coords);
}

static void REGAL_CALL trace_glMultiTexCoordP2uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords)
{
  Internal("trace_glMultiTexCoordP2uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordP2uiv(_context, texture, type, coords);
}

static void REGAL_CALL trace_glMultiTexCoordP3ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords)
{
  Internal("trace_glMultiTexCoordP3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordP3ui(_context, texture, type, coords);
}

static void REGAL_CALL trace_glMultiTexCoordP3uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords)
{
  Internal("trace_glMultiTexCoordP3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordP3uiv(_context, texture, type, coords);
}

static void REGAL_CALL trace_glMultiTexCoordP4ui(RegalContext *_context, GLenum texture, GLenum type, GLuint coords)
{
  Internal("trace_glMultiTexCoordP4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordP4ui(_context, texture, type, coords);
}

static void REGAL_CALL trace_glMultiTexCoordP4uiv(RegalContext *_context, GLenum texture, GLenum type, const GLuint *coords)
{
  Internal("trace_glMultiTexCoordP4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordP4uiv(_context, texture, type, coords);
}

static void REGAL_CALL trace_glNormalP3ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("trace_glNormalP3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalP3ui(_context, type, coords);
}

static void REGAL_CALL trace_glNormalP3uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("trace_glNormalP3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalP3uiv(_context, type, coords);
}

static void REGAL_CALL trace_glSecondaryColorP3ui(RegalContext *_context, GLenum type, GLuint color)
{
  Internal("trace_glSecondaryColorP3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColorP3ui(_context, type, color);
}

static void REGAL_CALL trace_glSecondaryColorP3uiv(RegalContext *_context, GLenum type, const GLuint *color)
{
  Internal("trace_glSecondaryColorP3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColorP3uiv(_context, type, color);
}

static void REGAL_CALL trace_glTexCoordP1ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("trace_glTexCoordP1ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordP1ui(_context, type, coords);
}

static void REGAL_CALL trace_glTexCoordP1uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("trace_glTexCoordP1uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordP1uiv(_context, type, coords);
}

static void REGAL_CALL trace_glTexCoordP2ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("trace_glTexCoordP2ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordP2ui(_context, type, coords);
}

static void REGAL_CALL trace_glTexCoordP2uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("trace_glTexCoordP2uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordP2uiv(_context, type, coords);
}

static void REGAL_CALL trace_glTexCoordP3ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("trace_glTexCoordP3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordP3ui(_context, type, coords);
}

static void REGAL_CALL trace_glTexCoordP3uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("trace_glTexCoordP3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordP3uiv(_context, type, coords);
}

static void REGAL_CALL trace_glTexCoordP4ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("trace_glTexCoordP4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordP4ui(_context, type, coords);
}

static void REGAL_CALL trace_glTexCoordP4uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("trace_glTexCoordP4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordP4uiv(_context, type, coords);
}

static void REGAL_CALL trace_glVertexAttribP1ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Internal("trace_glVertexAttribP1ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribP1ui(_context, index, type, normalized, value);
}

static void REGAL_CALL trace_glVertexAttribP1uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Internal("trace_glVertexAttribP1uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribP1uiv(_context, index, type, normalized, value);
}

static void REGAL_CALL trace_glVertexAttribP2ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Internal("trace_glVertexAttribP2ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribP2ui(_context, index, type, normalized, value);
}

static void REGAL_CALL trace_glVertexAttribP2uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Internal("trace_glVertexAttribP2uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribP2uiv(_context, index, type, normalized, value);
}

static void REGAL_CALL trace_glVertexAttribP3ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Internal("trace_glVertexAttribP3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribP3ui(_context, index, type, normalized, value);
}

static void REGAL_CALL trace_glVertexAttribP3uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Internal("trace_glVertexAttribP3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribP3uiv(_context, index, type, normalized, value);
}

static void REGAL_CALL trace_glVertexAttribP4ui(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  Internal("trace_glVertexAttribP4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribP4ui(_context, index, type, normalized, value);
}

static void REGAL_CALL trace_glVertexAttribP4uiv(RegalContext *_context, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  Internal("trace_glVertexAttribP4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribP4uiv(_context, index, type, normalized, value);
}

static void REGAL_CALL trace_glVertexP2ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("trace_glVertexP2ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexP2ui(_context, type, coords);
}

static void REGAL_CALL trace_glVertexP2uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("trace_glVertexP2uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexP2uiv(_context, type, coords);
}

static void REGAL_CALL trace_glVertexP3ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("trace_glVertexP3ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexP3ui(_context, type, coords);
}

static void REGAL_CALL trace_glVertexP3uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("trace_glVertexP3uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexP3uiv(_context, type, coords);
}

static void REGAL_CALL trace_glVertexP4ui(RegalContext *_context, GLenum type, GLuint coords)
{
  Internal("trace_glVertexP4ui","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexP4ui(_context, type, coords);
}

static void REGAL_CALL trace_glVertexP4uiv(RegalContext *_context, GLenum type, const GLuint *coords)
{
  Internal("trace_glVertexP4uiv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexP4uiv(_context, type, coords);
}

// GL_ARB_viewport_array

static void REGAL_CALL trace_glDepthRangeArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLclampd *v)
{
  Internal("trace_glDepthRangeArrayv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthRangeArrayv(_context, first, count, v);
}

static void REGAL_CALL trace_glDepthRangeIndexed(RegalContext *_context, GLuint index, GLclampd n, GLclampd f)
{
  Internal("trace_glDepthRangeIndexed","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthRangeIndexed(_context, index, n, f);
}

static void REGAL_CALL trace_glGetDoublei_v(RegalContext *_context, GLenum target, GLuint index, GLdouble *v)
{
  Internal("trace_glGetDoublei_v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetDoublei_v(_context, target, index, v);
}

static void REGAL_CALL trace_glGetFloati_v(RegalContext *_context, GLenum target, GLuint index, GLfloat *v)
{
  Internal("trace_glGetFloati_v","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFloati_v(_context, target, index, v);
}

static void REGAL_CALL trace_glScissorArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLint *v)
{
  Internal("trace_glScissorArrayv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glScissorArrayv(_context, first, count, v);
}

static void REGAL_CALL trace_glScissorIndexed(RegalContext *_context, GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
  Internal("trace_glScissorIndexed","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glScissorIndexed(_context, index, left, bottom, width, height);
}

static void REGAL_CALL trace_glScissorIndexedv(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glScissorIndexedv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glScissorIndexedv(_context, index, v);
}

static void REGAL_CALL trace_glViewportArrayv(RegalContext *_context, GLuint first, GLsizei count, const GLfloat *v)
{
  Internal("trace_glViewportArrayv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glViewportArrayv(_context, first, count, v);
}

static void REGAL_CALL trace_glViewportIndexedf(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  Internal("trace_glViewportIndexedf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glViewportIndexedf(_context, index, x, y, w, h);
}

static void REGAL_CALL trace_glViewportIndexedfv(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glViewportIndexedfv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glViewportIndexedfv(_context, index, v);
}

// GL_ARB_window_pos

static void REGAL_CALL trace_glWindowPos2dARB(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("trace_glWindowPos2dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2dARB(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2dvARB(RegalContext *_context, const GLdouble *p)
{
  Internal("trace_glWindowPos2dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2dvARB(_context, p);
}

static void REGAL_CALL trace_glWindowPos2fARB(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("trace_glWindowPos2fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2fARB(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2fvARB(RegalContext *_context, const GLfloat *p)
{
  Internal("trace_glWindowPos2fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2fvARB(_context, p);
}

static void REGAL_CALL trace_glWindowPos2iARB(RegalContext *_context, GLint x, GLint y)
{
  Internal("trace_glWindowPos2iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2iARB(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2ivARB(RegalContext *_context, const GLint *p)
{
  Internal("trace_glWindowPos2ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2ivARB(_context, p);
}

static void REGAL_CALL trace_glWindowPos2sARB(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("trace_glWindowPos2sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2sARB(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2svARB(RegalContext *_context, const GLshort *p)
{
  Internal("trace_glWindowPos2svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2svARB(_context, p);
}

static void REGAL_CALL trace_glWindowPos3dARB(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glWindowPos3dARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3dARB(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3dvARB(RegalContext *_context, const GLdouble *p)
{
  Internal("trace_glWindowPos3dvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3dvARB(_context, p);
}

static void REGAL_CALL trace_glWindowPos3fARB(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glWindowPos3fARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3fARB(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3fvARB(RegalContext *_context, const GLfloat *p)
{
  Internal("trace_glWindowPos3fvARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3fvARB(_context, p);
}

static void REGAL_CALL trace_glWindowPos3iARB(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("trace_glWindowPos3iARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3iARB(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3ivARB(RegalContext *_context, const GLint *p)
{
  Internal("trace_glWindowPos3ivARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3ivARB(_context, p);
}

static void REGAL_CALL trace_glWindowPos3sARB(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glWindowPos3sARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3sARB(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3svARB(RegalContext *_context, const GLshort *p)
{
  Internal("trace_glWindowPos3svARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3svARB(_context, p);
}

// GL_ATI_draw_buffers

static void REGAL_CALL trace_glDrawBuffersATI(RegalContext *_context, GLsizei n, const GLenum *bufs)
{
  Internal("trace_glDrawBuffersATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawBuffersATI(_context, n, bufs);
}

// GL_ATI_element_array

static void REGAL_CALL trace_glDrawElementArrayATI(RegalContext *_context, GLenum mode, GLsizei count)
{
  Internal("trace_glDrawElementArrayATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementArrayATI(_context, mode, count);
}

static void REGAL_CALL trace_glDrawRangeElementArrayATI(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  Internal("trace_glDrawRangeElementArrayATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawRangeElementArrayATI(_context, mode, start, end, count);
}

static void REGAL_CALL trace_glElementPointerATI(RegalContext *_context, GLenum type, const GLvoid *pointer)
{
  Internal("trace_glElementPointerATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glElementPointerATI(_context, type, pointer);
}

// GL_ATI_envmap_bumpmap

static void REGAL_CALL trace_glGetTexBumpParameterfvATI(RegalContext *_context, GLenum pname, GLfloat *param)
{
  Internal("trace_glGetTexBumpParameterfvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexBumpParameterfvATI(_context, pname, param);
}

static void REGAL_CALL trace_glGetTexBumpParameterivATI(RegalContext *_context, GLenum pname, GLint *param)
{
  Internal("trace_glGetTexBumpParameterivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexBumpParameterivATI(_context, pname, param);
}

static void REGAL_CALL trace_glTexBumpParameterfvATI(RegalContext *_context, GLenum pname, const GLfloat *param)
{
  Internal("trace_glTexBumpParameterfvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexBumpParameterfvATI(_context, pname, param);
}

static void REGAL_CALL trace_glTexBumpParameterivATI(RegalContext *_context, GLenum pname, const GLint *param)
{
  Internal("trace_glTexBumpParameterivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexBumpParameterivATI(_context, pname, param);
}

// GL_ATI_fragment_shader

static void REGAL_CALL trace_glAlphaFragmentOp1ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  Internal("trace_glAlphaFragmentOp1ATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAlphaFragmentOp1ATI(_context, op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

static void REGAL_CALL trace_glAlphaFragmentOp2ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  Internal("trace_glAlphaFragmentOp2ATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAlphaFragmentOp2ATI(_context, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

static void REGAL_CALL trace_glAlphaFragmentOp3ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  Internal("trace_glAlphaFragmentOp3ATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAlphaFragmentOp3ATI(_context, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

static void REGAL_CALL trace_glBeginFragmentShaderATI(RegalContext *_context)
{
  Internal("trace_glBeginFragmentShaderATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginFragmentShaderATI(_context);
}

static void REGAL_CALL trace_glBindFragmentShaderATI(RegalContext *_context, GLuint id)
{
  Internal("trace_glBindFragmentShaderATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindFragmentShaderATI(_context, id);
}

static void REGAL_CALL trace_glColorFragmentOp1ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  Internal("trace_glColorFragmentOp1ATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorFragmentOp1ATI(_context, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

static void REGAL_CALL trace_glColorFragmentOp2ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  Internal("trace_glColorFragmentOp2ATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorFragmentOp2ATI(_context, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

static void REGAL_CALL trace_glColorFragmentOp3ATI(RegalContext *_context, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  Internal("trace_glColorFragmentOp3ATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorFragmentOp3ATI(_context, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

static void REGAL_CALL trace_glDeleteFragmentShaderATI(RegalContext *_context, GLuint id)
{
  Internal("trace_glDeleteFragmentShaderATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteFragmentShaderATI(_context, id);
}

static void REGAL_CALL trace_glEndFragmentShaderATI(RegalContext *_context)
{
  Internal("trace_glEndFragmentShaderATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndFragmentShaderATI(_context);
}

static GLuint REGAL_CALL trace_glGenFragmentShadersATI(RegalContext *_context, GLuint range)
{
  Internal("trace_glGenFragmentShadersATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGenFragmentShadersATI(_context, range);
  return ret;
}

static void REGAL_CALL trace_glPassTexCoordATI(RegalContext *_context, GLuint dst, GLuint coord, GLenum swizzle)
{
  Internal("trace_glPassTexCoordATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPassTexCoordATI(_context, dst, coord, swizzle);
}

static void REGAL_CALL trace_glSampleMapATI(RegalContext *_context, GLuint dst, GLuint interp, GLenum swizzle)
{
  Internal("trace_glSampleMapATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSampleMapATI(_context, dst, interp, swizzle);
}

static void REGAL_CALL trace_glSetFragmentShaderConstantATI(RegalContext *_context, GLuint dst, const GLfloat *value)
{
  Internal("trace_glSetFragmentShaderConstantATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSetFragmentShaderConstantATI(_context, dst, value);
}

// GL_ATI_map_object_buffer

static GLvoid *REGAL_CALL trace_glMapObjectBufferATI(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glMapObjectBufferATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLvoid * ret = Trace::glMapObjectBufferATI(_context, buffer);
  return ret;
}

static void REGAL_CALL trace_glUnmapObjectBufferATI(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glUnmapObjectBufferATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUnmapObjectBufferATI(_context, buffer);
}

// GL_ATI_pn_triangles

static void REGAL_CALL trace_glPNTrianglesfATI(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glPNTrianglesfATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPNTrianglesfATI(_context, pname, param);
}

static void REGAL_CALL trace_glPNTrianglesiATI(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glPNTrianglesiATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPNTrianglesiATI(_context, pname, param);
}

// GL_ATI_separate_stencil

static void REGAL_CALL trace_glStencilFuncSeparateATI(RegalContext *_context, GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
  Internal("trace_glStencilFuncSeparateATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilFuncSeparateATI(_context, frontfunc, backfunc, ref, mask);
}

static void REGAL_CALL trace_glStencilOpSeparateATI(RegalContext *_context, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  Internal("trace_glStencilOpSeparateATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilOpSeparateATI(_context, face, sfail, dpfail, dppass);
}

// GL_ATI_vertex_array_object

static void REGAL_CALL trace_glArrayObjectATI(RegalContext *_context, GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  Internal("trace_glArrayObjectATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glArrayObjectATI(_context, array, size, type, stride, buffer, offset);
}

static void REGAL_CALL trace_glFreeObjectBufferATI(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glFreeObjectBufferATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFreeObjectBufferATI(_context, buffer);
}

static void REGAL_CALL trace_glGetArrayObjectfvATI(RegalContext *_context, GLenum array, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetArrayObjectfvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetArrayObjectfvATI(_context, array, pname, params);
}

static void REGAL_CALL trace_glGetArrayObjectivATI(RegalContext *_context, GLenum array, GLenum pname, GLint *params)
{
  Internal("trace_glGetArrayObjectivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetArrayObjectivATI(_context, array, pname, params);
}

static void REGAL_CALL trace_glGetObjectBufferfvATI(RegalContext *_context, GLuint buffer, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetObjectBufferfvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetObjectBufferfvATI(_context, buffer, pname, params);
}

static void REGAL_CALL trace_glGetObjectBufferivATI(RegalContext *_context, GLuint buffer, GLenum pname, GLint *params)
{
  Internal("trace_glGetObjectBufferivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetObjectBufferivATI(_context, buffer, pname, params);
}

static void REGAL_CALL trace_glGetVariantArrayObjectfvATI(RegalContext *_context, GLuint id, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetVariantArrayObjectfvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVariantArrayObjectfvATI(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetVariantArrayObjectivATI(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("trace_glGetVariantArrayObjectivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVariantArrayObjectivATI(_context, id, pname, params);
}

static GLboolean REGAL_CALL trace_glIsObjectBufferATI(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glIsObjectBufferATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsObjectBufferATI(_context, buffer);
  return ret;
}

static GLuint REGAL_CALL trace_glNewObjectBufferATI(RegalContext *_context, GLsizei size, const GLvoid *pointer, GLenum usage)
{
  Internal("trace_glNewObjectBufferATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glNewObjectBufferATI(_context, size, pointer, usage);
  return ret;
}

static void REGAL_CALL trace_glUpdateObjectBufferATI(RegalContext *_context, GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
  Internal("trace_glUpdateObjectBufferATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUpdateObjectBufferATI(_context, buffer, offset, size, pointer, preserve);
}

static void REGAL_CALL trace_glVariantArrayObjectATI(RegalContext *_context, GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  Internal("trace_glVariantArrayObjectATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantArrayObjectATI(_context, id, type, stride, buffer, offset);
}

// GL_ATI_vertex_attrib_array_object

static void REGAL_CALL trace_glGetVertexAttribArrayObjectfvATI(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetVertexAttribArrayObjectfvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribArrayObjectfvATI(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribArrayObjectivATI(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("trace_glGetVertexAttribArrayObjectivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribArrayObjectivATI(_context, index, pname, params);
}

static void REGAL_CALL trace_glVertexAttribArrayObjectATI(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
  Internal("trace_glVertexAttribArrayObjectATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribArrayObjectATI(_context, index, size, type, normalized, stride, buffer, offset);
}

// GL_ATI_vertex_streams

static void REGAL_CALL trace_glClientActiveVertexStreamATI(RegalContext *_context, GLenum stream)
{
  Internal("trace_glClientActiveVertexStreamATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClientActiveVertexStreamATI(_context, stream);
}

static void REGAL_CALL trace_glNormalStream3bATI(RegalContext *_context, GLenum stream, GLbyte x, GLbyte y, GLbyte z)
{
  Internal("trace_glNormalStream3bATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3bATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glNormalStream3bvATI(RegalContext *_context, GLenum stream, const GLbyte *coords)
{
  Internal("trace_glNormalStream3bvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3bvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glNormalStream3dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glNormalStream3dATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3dATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glNormalStream3dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("trace_glNormalStream3dvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3dvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glNormalStream3fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glNormalStream3fATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3fATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glNormalStream3fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("trace_glNormalStream3fvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3fvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glNormalStream3iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z)
{
  Internal("trace_glNormalStream3iATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3iATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glNormalStream3ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("trace_glNormalStream3ivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3ivATI(_context, stream, coords);
}

static void REGAL_CALL trace_glNormalStream3sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glNormalStream3sATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3sATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glNormalStream3svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("trace_glNormalStream3svATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalStream3svATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexBlendEnvfATI(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glVertexBlendEnvfATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexBlendEnvfATI(_context, pname, param);
}

static void REGAL_CALL trace_glVertexBlendEnviATI(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glVertexBlendEnviATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexBlendEnviATI(_context, pname, param);
}

static void REGAL_CALL trace_glVertexStream1dATI(RegalContext *_context, GLenum stream, GLdouble x)
{
  Internal("trace_glVertexStream1dATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream1dATI(_context, stream, x);
}

static void REGAL_CALL trace_glVertexStream1dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("trace_glVertexStream1dvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream1dvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream1fATI(RegalContext *_context, GLenum stream, GLfloat x)
{
  Internal("trace_glVertexStream1fATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream1fATI(_context, stream, x);
}

static void REGAL_CALL trace_glVertexStream1fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("trace_glVertexStream1fvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream1fvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream1iATI(RegalContext *_context, GLenum stream, GLint x)
{
  Internal("trace_glVertexStream1iATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream1iATI(_context, stream, x);
}

static void REGAL_CALL trace_glVertexStream1ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("trace_glVertexStream1ivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream1ivATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream1sATI(RegalContext *_context, GLenum stream, GLshort x)
{
  Internal("trace_glVertexStream1sATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream1sATI(_context, stream, x);
}

static void REGAL_CALL trace_glVertexStream1svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("trace_glVertexStream1svATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream1svATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream2dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y)
{
  Internal("trace_glVertexStream2dATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream2dATI(_context, stream, x, y);
}

static void REGAL_CALL trace_glVertexStream2dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("trace_glVertexStream2dvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream2dvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream2fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y)
{
  Internal("trace_glVertexStream2fATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream2fATI(_context, stream, x, y);
}

static void REGAL_CALL trace_glVertexStream2fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("trace_glVertexStream2fvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream2fvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream2iATI(RegalContext *_context, GLenum stream, GLint x, GLint y)
{
  Internal("trace_glVertexStream2iATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream2iATI(_context, stream, x, y);
}

static void REGAL_CALL trace_glVertexStream2ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("trace_glVertexStream2ivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream2ivATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream2sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y)
{
  Internal("trace_glVertexStream2sATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream2sATI(_context, stream, x, y);
}

static void REGAL_CALL trace_glVertexStream2svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("trace_glVertexStream2svATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream2svATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream3dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glVertexStream3dATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream3dATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glVertexStream3dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("trace_glVertexStream3dvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream3dvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream3fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glVertexStream3fATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream3fATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glVertexStream3fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("trace_glVertexStream3fvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream3fvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream3iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z)
{
  Internal("trace_glVertexStream3iATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream3iATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glVertexStream3ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("trace_glVertexStream3ivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream3ivATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream3sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glVertexStream3sATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream3sATI(_context, stream, x, y, z);
}

static void REGAL_CALL trace_glVertexStream3svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("trace_glVertexStream3svATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream3svATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream4dATI(RegalContext *_context, GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glVertexStream4dATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream4dATI(_context, stream, x, y, z, w);
}

static void REGAL_CALL trace_glVertexStream4dvATI(RegalContext *_context, GLenum stream, const GLdouble *coords)
{
  Internal("trace_glVertexStream4dvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream4dvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream4fATI(RegalContext *_context, GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glVertexStream4fATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream4fATI(_context, stream, x, y, z, w);
}

static void REGAL_CALL trace_glVertexStream4fvATI(RegalContext *_context, GLenum stream, const GLfloat *coords)
{
  Internal("trace_glVertexStream4fvATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream4fvATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream4iATI(RegalContext *_context, GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glVertexStream4iATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream4iATI(_context, stream, x, y, z, w);
}

static void REGAL_CALL trace_glVertexStream4ivATI(RegalContext *_context, GLenum stream, const GLint *coords)
{
  Internal("trace_glVertexStream4ivATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream4ivATI(_context, stream, coords);
}

static void REGAL_CALL trace_glVertexStream4sATI(RegalContext *_context, GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("trace_glVertexStream4sATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream4sATI(_context, stream, x, y, z, w);
}

static void REGAL_CALL trace_glVertexStream4svATI(RegalContext *_context, GLenum stream, const GLshort *coords)
{
  Internal("trace_glVertexStream4svATI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexStream4svATI(_context, stream, coords);
}

// GL_EXT_bindable_uniform

static GLint REGAL_CALL trace_glGetUniformBufferSizeEXT(RegalContext *_context, GLuint program, GLint location)
{
  Internal("trace_glGetUniformBufferSizeEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetUniformBufferSizeEXT(_context, program, location);
  return ret;
}

static GLintptr REGAL_CALL trace_glGetUniformOffsetEXT(RegalContext *_context, GLuint program, GLint location)
{
  Internal("trace_glGetUniformOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLintptr  ret = Trace::glGetUniformOffsetEXT(_context, program, location);
  return ret;
}

static void REGAL_CALL trace_glUniformBufferEXT(RegalContext *_context, GLuint program, GLint location, GLuint buffer)
{
  Internal("trace_glUniformBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformBufferEXT(_context, program, location, buffer);
}

// GL_EXT_blend_color

static void REGAL_CALL trace_glBlendColorEXT(RegalContext *_context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Internal("trace_glBlendColorEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendColorEXT(_context, red, green, blue, alpha);
}

// GL_EXT_blend_equation_separate

static void REGAL_CALL trace_glBlendEquationSeparateEXT(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("trace_glBlendEquationSeparateEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationSeparateEXT(_context, modeRGB, modeAlpha);
}

// GL_EXT_blend_func_separate

static void REGAL_CALL trace_glBlendFuncSeparateEXT(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("trace_glBlendFuncSeparateEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFuncSeparateEXT(_context, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_EXT_blend_minmax

static void REGAL_CALL trace_glBlendEquationEXT(RegalContext *_context, GLenum mode)
{
  Internal("trace_glBlendEquationEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationEXT(_context, mode);
}

// GL_EXT_color_subtable

static void REGAL_CALL trace_glColorSubTableEXT(RegalContext *_context, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
  Internal("trace_glColorSubTableEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorSubTableEXT(_context, target, start, count, format, type, table);
}

static void REGAL_CALL trace_glCopyColorSubTableEXT(RegalContext *_context, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyColorSubTableEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyColorSubTableEXT(_context, target, start, x, y, width);
}

// GL_EXT_compiled_vertex_array

static void REGAL_CALL trace_glLockArraysEXT(RegalContext *_context, GLint first, GLsizei count)
{
  Internal("trace_glLockArraysEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLockArraysEXT(_context, first, count);
}

static void REGAL_CALL trace_glUnlockArraysEXT(RegalContext *_context)
{
  Internal("trace_glUnlockArraysEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUnlockArraysEXT(_context);
}

// GL_EXT_convolution

static void REGAL_CALL trace_glConvolutionFilter1DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  Internal("trace_glConvolutionFilter1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionFilter1DEXT(_context, target, internalformat, width, format, type, image);
}

static void REGAL_CALL trace_glConvolutionFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  Internal("trace_glConvolutionFilter2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionFilter2DEXT(_context, target, internalformat, width, height, format, type, image);
}

static void REGAL_CALL trace_glConvolutionParameterfEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  Internal("trace_glConvolutionParameterfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionParameterfEXT(_context, target, pname, param);
}

static void REGAL_CALL trace_glConvolutionParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glConvolutionParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionParameterfvEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glConvolutionParameteriEXT(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glConvolutionParameteriEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionParameteriEXT(_context, target, pname, param);
}

static void REGAL_CALL trace_glConvolutionParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glConvolutionParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glConvolutionParameterivEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glCopyConvolutionFilter1DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyConvolutionFilter1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyConvolutionFilter1DEXT(_context, target, internalformat, x, y, width);
}

static void REGAL_CALL trace_glCopyConvolutionFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyConvolutionFilter2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyConvolutionFilter2DEXT(_context, target, internalformat, x, y, width, height);
}

static void REGAL_CALL trace_glGetConvolutionFilterEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  Internal("trace_glGetConvolutionFilterEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetConvolutionFilterEXT(_context, target, format, type, image);
}

static void REGAL_CALL trace_glGetConvolutionParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetConvolutionParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetConvolutionParameterfvEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetConvolutionParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetConvolutionParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetConvolutionParameterivEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetSeparableFilterEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  Internal("trace_glGetSeparableFilterEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetSeparableFilterEXT(_context, target, format, type, row, column, span);
}

static void REGAL_CALL trace_glSeparableFilter2DEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  Internal("trace_glSeparableFilter2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSeparableFilter2DEXT(_context, target, internalformat, width, height, format, type, row, column);
}

// GL_EXT_coordinate_frame

static void REGAL_CALL trace_glBinormal3bEXT(RegalContext *_context, GLbyte bx, GLbyte by, GLbyte bz)
{
  Internal("trace_glBinormal3bEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3bEXT(_context, bx, by, bz);
}

static void REGAL_CALL trace_glBinormal3bvEXT(RegalContext *_context, const GLbyte *v)
{
  Internal("trace_glBinormal3bvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3bvEXT(_context, v);
}

static void REGAL_CALL trace_glBinormal3dEXT(RegalContext *_context, GLdouble bx, GLdouble by, GLdouble bz)
{
  Internal("trace_glBinormal3dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3dEXT(_context, bx, by, bz);
}

static void REGAL_CALL trace_glBinormal3dvEXT(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glBinormal3dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3dvEXT(_context, v);
}

static void REGAL_CALL trace_glBinormal3fEXT(RegalContext *_context, GLfloat bx, GLfloat by, GLfloat bz)
{
  Internal("trace_glBinormal3fEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3fEXT(_context, bx, by, bz);
}

static void REGAL_CALL trace_glBinormal3fvEXT(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glBinormal3fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3fvEXT(_context, v);
}

static void REGAL_CALL trace_glBinormal3iEXT(RegalContext *_context, GLint bx, GLint by, GLint bz)
{
  Internal("trace_glBinormal3iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3iEXT(_context, bx, by, bz);
}

static void REGAL_CALL trace_glBinormal3ivEXT(RegalContext *_context, const GLint *v)
{
  Internal("trace_glBinormal3ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3ivEXT(_context, v);
}

static void REGAL_CALL trace_glBinormal3sEXT(RegalContext *_context, GLshort bx, GLshort by, GLshort bz)
{
  Internal("trace_glBinormal3sEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3sEXT(_context, bx, by, bz);
}

static void REGAL_CALL trace_glBinormal3svEXT(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glBinormal3svEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormal3svEXT(_context, v);
}

static void REGAL_CALL trace_glBinormalPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glBinormalPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBinormalPointerEXT(_context, type, stride, pointer);
}

static void REGAL_CALL trace_glTangent3bEXT(RegalContext *_context, GLbyte tx, GLbyte ty, GLbyte tz)
{
  Internal("trace_glTangent3bEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3bEXT(_context, tx, ty, tz);
}

static void REGAL_CALL trace_glTangent3bvEXT(RegalContext *_context, const GLbyte *v)
{
  Internal("trace_glTangent3bvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3bvEXT(_context, v);
}

static void REGAL_CALL trace_glTangent3dEXT(RegalContext *_context, GLdouble tx, GLdouble ty, GLdouble tz)
{
  Internal("trace_glTangent3dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3dEXT(_context, tx, ty, tz);
}

static void REGAL_CALL trace_glTangent3dvEXT(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glTangent3dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3dvEXT(_context, v);
}

static void REGAL_CALL trace_glTangent3fEXT(RegalContext *_context, GLfloat tx, GLfloat ty, GLfloat tz)
{
  Internal("trace_glTangent3fEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3fEXT(_context, tx, ty, tz);
}

static void REGAL_CALL trace_glTangent3fvEXT(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glTangent3fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3fvEXT(_context, v);
}

static void REGAL_CALL trace_glTangent3iEXT(RegalContext *_context, GLint tx, GLint ty, GLint tz)
{
  Internal("trace_glTangent3iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3iEXT(_context, tx, ty, tz);
}

static void REGAL_CALL trace_glTangent3ivEXT(RegalContext *_context, const GLint *v)
{
  Internal("trace_glTangent3ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3ivEXT(_context, v);
}

static void REGAL_CALL trace_glTangent3sEXT(RegalContext *_context, GLshort tx, GLshort ty, GLshort tz)
{
  Internal("trace_glTangent3sEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3sEXT(_context, tx, ty, tz);
}

static void REGAL_CALL trace_glTangent3svEXT(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glTangent3svEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangent3svEXT(_context, v);
}

static void REGAL_CALL trace_glTangentPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glTangentPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTangentPointerEXT(_context, type, stride, pointer);
}

// GL_EXT_copy_texture

static void REGAL_CALL trace_glCopyTexImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Internal("trace_glCopyTexImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexImage1DEXT(_context, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL trace_glCopyTexImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("trace_glCopyTexImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexImage2DEXT(_context, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL trace_glCopyTexSubImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyTexSubImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexSubImage1DEXT(_context, target, level, xoffset, x, y, width);
}

static void REGAL_CALL trace_glCopyTexSubImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyTexSubImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexSubImage2DEXT(_context, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL trace_glCopyTexSubImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyTexSubImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexSubImage3DEXT(_context, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

// GL_EXT_cull_vertex

static void REGAL_CALL trace_glCullParameterdvEXT(RegalContext *_context, GLenum pname, GLdouble *params)
{
  Internal("trace_glCullParameterdvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCullParameterdvEXT(_context, pname, params);
}

static void REGAL_CALL trace_glCullParameterfvEXT(RegalContext *_context, GLenum pname, GLfloat *params)
{
  Internal("trace_glCullParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCullParameterfvEXT(_context, pname, params);
}

// GL_EXT_debug_label

static void REGAL_CALL trace_glGetObjectLabelEXT(RegalContext *_context, GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Internal("trace_glGetObjectLabelEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetObjectLabelEXT(_context, type, object, bufSize, length, label);
}

static void REGAL_CALL trace_glLabelObjectEXT(RegalContext *_context, GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
  Internal("trace_glLabelObjectEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLabelObjectEXT(_context, type, object, length, label);
}

// GL_EXT_debug_marker

static void REGAL_CALL trace_glInsertEventMarkerEXT(RegalContext *_context, GLsizei length, const GLchar *marker)
{
  Internal("trace_glInsertEventMarkerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInsertEventMarkerEXT(_context, length, marker);
}

static void REGAL_CALL trace_glPopGroupMarkerEXT(RegalContext *_context)
{
  Internal("trace_glPopGroupMarkerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPopGroupMarkerEXT(_context);
}

static void REGAL_CALL trace_glPushGroupMarkerEXT(RegalContext *_context, GLsizei length, const GLchar *marker)
{
  Internal("trace_glPushGroupMarkerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPushGroupMarkerEXT(_context, length, marker);
}

// GL_EXT_depth_bounds_test

static void REGAL_CALL trace_glDepthBoundsEXT(RegalContext *_context, GLclampd zmin, GLclampd zmax)
{
  Internal("trace_glDepthBoundsEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthBoundsEXT(_context, zmin, zmax);
}

// GL_EXT_direct_state_access

static void REGAL_CALL trace_glBindMultiTextureEXT(RegalContext *_context, GLenum texunit, GLenum target, GLuint texture)
{
  Internal("trace_glBindMultiTextureEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindMultiTextureEXT(_context, texunit, target, texture);
}

static GLenum REGAL_CALL trace_glCheckNamedFramebufferStatusEXT(RegalContext *_context, GLuint framebuffer, GLenum target)
{
  Internal("trace_glCheckNamedFramebufferStatusEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glCheckNamedFramebufferStatusEXT(_context, framebuffer, target);
  return ret;
}

static void REGAL_CALL trace_glClientAttribDefaultEXT(RegalContext *_context, GLbitfield mask)
{
  Internal("trace_glClientAttribDefaultEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClientAttribDefaultEXT(_context, mask);
}

static void REGAL_CALL trace_glCompressedMultiTexImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedMultiTexImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedMultiTexImage1DEXT(_context, texunit, target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL trace_glCompressedMultiTexImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("trace_glCompressedMultiTexImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedMultiTexImage2DEXT(_context, texunit, target, level, internalformat, width, height, border, imageSize, bits);
}

static void REGAL_CALL trace_glCompressedMultiTexImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("trace_glCompressedMultiTexImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedMultiTexImage3DEXT(_context, texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

static void REGAL_CALL trace_glCompressedMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedMultiTexSubImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedMultiTexSubImage1DEXT(_context, texunit, target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL trace_glCompressedMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedMultiTexSubImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedMultiTexSubImage2DEXT(_context, texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL trace_glCompressedMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedMultiTexSubImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedMultiTexSubImage3DEXT(_context, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTextureImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("trace_glCompressedTextureImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTextureImage1DEXT(_context, texture, target, level, internalformat, width, border, imageSize, bits);
}

static void REGAL_CALL trace_glCompressedTextureImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("trace_glCompressedTextureImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTextureImage2DEXT(_context, texture, target, level, internalformat, width, height, border, imageSize, bits);
}

static void REGAL_CALL trace_glCompressedTextureImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  Internal("trace_glCompressedTextureImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTextureImage3DEXT(_context, texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

static void REGAL_CALL trace_glCompressedTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Internal("trace_glCompressedTextureSubImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTextureSubImage1DEXT(_context, texture, target, level, xoffset, width, format, imageSize, bits);
}

static void REGAL_CALL trace_glCompressedTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Internal("trace_glCompressedTextureSubImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTextureSubImage2DEXT(_context, texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

static void REGAL_CALL trace_glCompressedTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  Internal("trace_glCompressedTextureSubImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTextureSubImage3DEXT(_context, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}

static void REGAL_CALL trace_glCopyMultiTexImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Internal("trace_glCopyMultiTexImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyMultiTexImage1DEXT(_context, texunit, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL trace_glCopyMultiTexImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("trace_glCopyMultiTexImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyMultiTexImage2DEXT(_context, texunit, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL trace_glCopyMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyMultiTexSubImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyMultiTexSubImage1DEXT(_context, texunit, target, level, xoffset, x, y, width);
}

static void REGAL_CALL trace_glCopyMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyMultiTexSubImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyMultiTexSubImage2DEXT(_context, texunit, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL trace_glCopyMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyMultiTexSubImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyMultiTexSubImage3DEXT(_context, texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL trace_glCopyTextureImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  Internal("trace_glCopyTextureImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTextureImage1DEXT(_context, texture, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL trace_glCopyTextureImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("trace_glCopyTextureImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTextureImage2DEXT(_context, texture, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL trace_glCopyTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyTextureSubImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTextureSubImage1DEXT(_context, texture, target, level, xoffset, x, y, width);
}

static void REGAL_CALL trace_glCopyTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyTextureSubImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTextureSubImage2DEXT(_context, texture, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL trace_glCopyTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyTextureSubImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTextureSubImage3DEXT(_context, texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL trace_glDisableClientStateIndexedEXT(RegalContext *_context, GLenum array, GLuint index)
{
  Internal("trace_glDisableClientStateIndexedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableClientStateIndexedEXT(_context, array, index);
}

static void REGAL_CALL trace_glDisableVertexArrayAttribEXT(RegalContext *_context, GLuint vaobj, GLenum array)
{
  Internal("trace_glDisableVertexArrayAttribEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableVertexArrayAttribEXT(_context, vaobj, array);
}

static void REGAL_CALL trace_glDisableVertexArrayEXT(RegalContext *_context, GLuint vaobj, GLenum array)
{
  Internal("trace_glDisableVertexArrayEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableVertexArrayEXT(_context, vaobj, array);
}

static void REGAL_CALL trace_glEnableClientStateIndexedEXT(RegalContext *_context, GLenum array, GLuint index)
{
  Internal("trace_glEnableClientStateIndexedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableClientStateIndexedEXT(_context, array, index);
}

static void REGAL_CALL trace_glEnableVertexArrayAttribEXT(RegalContext *_context, GLuint vaobj, GLenum array)
{
  Internal("trace_glEnableVertexArrayAttribEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableVertexArrayAttribEXT(_context, vaobj, array);
}

static void REGAL_CALL trace_glEnableVertexArrayEXT(RegalContext *_context, GLuint vaobj, GLenum array)
{
  Internal("trace_glEnableVertexArrayEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableVertexArrayEXT(_context, vaobj, array);
}

static void REGAL_CALL trace_glFlushMappedNamedBufferRangeEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  Internal("trace_glFlushMappedNamedBufferRangeEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlushMappedNamedBufferRangeEXT(_context, buffer, offset, length);
}

static void REGAL_CALL trace_glFramebufferDrawBufferEXT(RegalContext *_context, GLuint framebuffer, GLenum mode)
{
  Internal("trace_glFramebufferDrawBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferDrawBufferEXT(_context, framebuffer, mode);
}

static void REGAL_CALL trace_glFramebufferDrawBuffersEXT(RegalContext *_context, GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
  Internal("trace_glFramebufferDrawBuffersEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferDrawBuffersEXT(_context, framebuffer, n, bufs);
}

static void REGAL_CALL trace_glFramebufferReadBufferEXT(RegalContext *_context, GLuint framebuffer, GLenum mode)
{
  Internal("trace_glFramebufferReadBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferReadBufferEXT(_context, framebuffer, mode);
}

static void REGAL_CALL trace_glGenerateMultiTexMipmapEXT(RegalContext *_context, GLenum texunit, GLenum target)
{
  Internal("trace_glGenerateMultiTexMipmapEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenerateMultiTexMipmapEXT(_context, texunit, target);
}

static void REGAL_CALL trace_glGenerateTextureMipmapEXT(RegalContext *_context, GLuint texture, GLenum target)
{
  Internal("trace_glGenerateTextureMipmapEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenerateTextureMipmapEXT(_context, texture, target);
}

static void REGAL_CALL trace_glGetCompressedMultiTexImageEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
  Internal("trace_glGetCompressedMultiTexImageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCompressedMultiTexImageEXT(_context, texunit, target, lod, img);
}

static void REGAL_CALL trace_glGetCompressedTextureImageEXT(RegalContext *_context, GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
  Internal("trace_glGetCompressedTextureImageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCompressedTextureImageEXT(_context, texture, target, lod, img);
}

static void REGAL_CALL trace_glGetDoubleIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLdouble *data)
{
  Internal("trace_glGetDoubleIndexedvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetDoubleIndexedvEXT(_context, target, index, data);
}

static void REGAL_CALL trace_glGetFloatIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLfloat *data)
{
  Internal("trace_glGetFloatIndexedvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFloatIndexedvEXT(_context, target, index, data);
}

static void REGAL_CALL trace_glGetFramebufferParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum pname, GLint *params)
{
  Internal("trace_glGetFramebufferParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFramebufferParameterivEXT(_context, framebuffer, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexEnvfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMultiTexEnvfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexEnvfvEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexEnvivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetMultiTexEnvivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexEnvivEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexGendvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetMultiTexGendvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexGendvEXT(_context, texunit, coord, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexGenfvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMultiTexGenfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexGenfvEXT(_context, texunit, coord, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexGenivEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
  Internal("trace_glGetMultiTexGenivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexGenivEXT(_context, texunit, coord, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexImageEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("trace_glGetMultiTexImageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexImageEXT(_context, texunit, target, level, format, type, pixels);
}

static void REGAL_CALL trace_glGetMultiTexLevelParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMultiTexLevelParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexLevelParameterfvEXT(_context, texunit, target, level, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexLevelParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Internal("trace_glGetMultiTexLevelParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexLevelParameterivEXT(_context, texunit, target, level, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexParameterIivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetMultiTexParameterIivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexParameterIivEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexParameterIuivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
  Internal("trace_glGetMultiTexParameterIuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexParameterIuivEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMultiTexParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexParameterfvEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glGetMultiTexParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetMultiTexParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultiTexParameterivEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glGetNamedBufferParameterivEXT(RegalContext *_context, GLuint buffer, GLenum pname, GLint *params)
{
  Internal("trace_glGetNamedBufferParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedBufferParameterivEXT(_context, buffer, pname, params);
}

static void REGAL_CALL trace_glGetNamedBufferPointervEXT(RegalContext *_context, GLuint buffer, GLenum pname, GLvoid **params)
{
  Internal("trace_glGetNamedBufferPointervEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedBufferPointervEXT(_context, buffer, pname, params);
}

static void REGAL_CALL trace_glGetNamedBufferSubDataEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  Internal("trace_glGetNamedBufferSubDataEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedBufferSubDataEXT(_context, buffer, offset, size, data);
}

static void REGAL_CALL trace_glGetNamedFramebufferAttachmentParameterivEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("trace_glGetNamedFramebufferAttachmentParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedFramebufferAttachmentParameterivEXT(_context, framebuffer, attachment, pname, params);
}

static void REGAL_CALL trace_glGetNamedProgramLocalParameterIivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLint *params)
{
  Internal("trace_glGetNamedProgramLocalParameterIivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedProgramLocalParameterIivEXT(_context, program, target, index, params);
}

static void REGAL_CALL trace_glGetNamedProgramLocalParameterIuivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLuint *params)
{
  Internal("trace_glGetNamedProgramLocalParameterIuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedProgramLocalParameterIuivEXT(_context, program, target, index, params);
}

static void REGAL_CALL trace_glGetNamedProgramLocalParameterdvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLdouble *params)
{
  Internal("trace_glGetNamedProgramLocalParameterdvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedProgramLocalParameterdvEXT(_context, program, target, index, params);
}

static void REGAL_CALL trace_glGetNamedProgramLocalParameterfvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLfloat *params)
{
  Internal("trace_glGetNamedProgramLocalParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedProgramLocalParameterfvEXT(_context, program, target, index, params);
}

static void REGAL_CALL trace_glGetNamedProgramStringEXT(RegalContext *_context, GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
  Internal("trace_glGetNamedProgramStringEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedProgramStringEXT(_context, program, target, pname, string);
}

static void REGAL_CALL trace_glGetNamedProgramivEXT(RegalContext *_context, GLuint program, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetNamedProgramivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedProgramivEXT(_context, program, target, pname, params);
}

static void REGAL_CALL trace_glGetNamedRenderbufferParameterivEXT(RegalContext *_context, GLuint renderbuffer, GLenum pname, GLint *params)
{
  Internal("trace_glGetNamedRenderbufferParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedRenderbufferParameterivEXT(_context, renderbuffer, pname, params);
}

static void REGAL_CALL trace_glGetPointerIndexedvEXT(RegalContext *_context, GLenum target, GLuint index, GLvoid **data)
{
  Internal("trace_glGetPointerIndexedvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPointerIndexedvEXT(_context, target, index, data);
}

static void REGAL_CALL trace_glGetTextureImageEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("trace_glGetTextureImageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTextureImageEXT(_context, texture, target, level, format, type, pixels);
}

static void REGAL_CALL trace_glGetTextureLevelParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetTextureLevelParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTextureLevelParameterfvEXT(_context, texture, target, level, pname, params);
}

static void REGAL_CALL trace_glGetTextureLevelParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
  Internal("trace_glGetTextureLevelParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTextureLevelParameterivEXT(_context, texture, target, level, pname, params);
}

static void REGAL_CALL trace_glGetTextureParameterIivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetTextureParameterIivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTextureParameterIivEXT(_context, texture, target, pname, params);
}

static void REGAL_CALL trace_glGetTextureParameterIuivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
  Internal("trace_glGetTextureParameterIuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTextureParameterIuivEXT(_context, texture, target, pname, params);
}

static void REGAL_CALL trace_glGetTextureParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetTextureParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTextureParameterfvEXT(_context, texture, target, pname, params);
}

static void REGAL_CALL trace_glGetTextureParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetTextureParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTextureParameterivEXT(_context, texture, target, pname, params);
}

static void REGAL_CALL trace_glGetVertexArrayIntegeri_vEXT(RegalContext *_context, GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
  Internal("trace_glGetVertexArrayIntegeri_vEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexArrayIntegeri_vEXT(_context, vaobj, index, pname, param);
}

static void REGAL_CALL trace_glGetVertexArrayIntegervEXT(RegalContext *_context, GLuint vaobj, GLenum pname, GLint *param)
{
  Internal("trace_glGetVertexArrayIntegervEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexArrayIntegervEXT(_context, vaobj, pname, param);
}

static void REGAL_CALL trace_glGetVertexArrayPointeri_vEXT(RegalContext *_context, GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
{
  Internal("trace_glGetVertexArrayPointeri_vEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexArrayPointeri_vEXT(_context, vaobj, index, pname, param);
}

static void REGAL_CALL trace_glGetVertexArrayPointervEXT(RegalContext *_context, GLuint vaobj, GLenum pname, GLvoid **param)
{
  Internal("trace_glGetVertexArrayPointervEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexArrayPointervEXT(_context, vaobj, pname, param);
}

static GLvoid *REGAL_CALL trace_glMapNamedBufferEXT(RegalContext *_context, GLuint buffer, GLenum access)
{
  Internal("trace_glMapNamedBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLvoid * ret = Trace::glMapNamedBufferEXT(_context, buffer, access);
  return ret;
}

static GLvoid *REGAL_CALL trace_glMapNamedBufferRangeEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  Internal("trace_glMapNamedBufferRangeEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLvoid * ret = Trace::glMapNamedBufferRangeEXT(_context, buffer, offset, length, access);
  return ret;
}

static void REGAL_CALL trace_glMatrixFrustumEXT(RegalContext *_context, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Internal("trace_glMatrixFrustumEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixFrustumEXT(_context, mode, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL trace_glMatrixLoadIdentityEXT(RegalContext *_context, GLenum mode)
{
  Internal("trace_glMatrixLoadIdentityEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixLoadIdentityEXT(_context, mode);
}

static void REGAL_CALL trace_glMatrixLoadTransposedEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  Internal("trace_glMatrixLoadTransposedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixLoadTransposedEXT(_context, mode, m);
}

static void REGAL_CALL trace_glMatrixLoadTransposefEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  Internal("trace_glMatrixLoadTransposefEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixLoadTransposefEXT(_context, mode, m);
}

static void REGAL_CALL trace_glMatrixLoaddEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  Internal("trace_glMatrixLoaddEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixLoaddEXT(_context, mode, m);
}

static void REGAL_CALL trace_glMatrixLoadfEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  Internal("trace_glMatrixLoadfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixLoadfEXT(_context, mode, m);
}

static void REGAL_CALL trace_glMatrixMultTransposedEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  Internal("trace_glMatrixMultTransposedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixMultTransposedEXT(_context, mode, m);
}

static void REGAL_CALL trace_glMatrixMultTransposefEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  Internal("trace_glMatrixMultTransposefEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixMultTransposefEXT(_context, mode, m);
}

static void REGAL_CALL trace_glMatrixMultdEXT(RegalContext *_context, GLenum mode, const GLdouble *m)
{
  Internal("trace_glMatrixMultdEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixMultdEXT(_context, mode, m);
}

static void REGAL_CALL trace_glMatrixMultfEXT(RegalContext *_context, GLenum mode, const GLfloat *m)
{
  Internal("trace_glMatrixMultfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixMultfEXT(_context, mode, m);
}

static void REGAL_CALL trace_glMatrixOrthoEXT(RegalContext *_context, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  Internal("trace_glMatrixOrthoEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixOrthoEXT(_context, mode, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL trace_glMatrixPopEXT(RegalContext *_context, GLenum mode)
{
  Internal("trace_glMatrixPopEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixPopEXT(_context, mode);
}

static void REGAL_CALL trace_glMatrixPushEXT(RegalContext *_context, GLenum mode)
{
  Internal("trace_glMatrixPushEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixPushEXT(_context, mode);
}

static void REGAL_CALL trace_glMatrixRotatedEXT(RegalContext *_context, GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glMatrixRotatedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixRotatedEXT(_context, mode, angle, x, y, z);
}

static void REGAL_CALL trace_glMatrixRotatefEXT(RegalContext *_context, GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glMatrixRotatefEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixRotatefEXT(_context, mode, angle, x, y, z);
}

static void REGAL_CALL trace_glMatrixScaledEXT(RegalContext *_context, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glMatrixScaledEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixScaledEXT(_context, mode, x, y, z);
}

static void REGAL_CALL trace_glMatrixScalefEXT(RegalContext *_context, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glMatrixScalefEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixScalefEXT(_context, mode, x, y, z);
}

static void REGAL_CALL trace_glMatrixTranslatedEXT(RegalContext *_context, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glMatrixTranslatedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixTranslatedEXT(_context, mode, x, y, z);
}

static void REGAL_CALL trace_glMatrixTranslatefEXT(RegalContext *_context, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glMatrixTranslatefEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMatrixTranslatefEXT(_context, mode, x, y, z);
}

static void REGAL_CALL trace_glMultiTexBufferEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("trace_glMultiTexBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexBufferEXT(_context, texunit, target, internalformat, buffer);
}

static void REGAL_CALL trace_glMultiTexCoordPointerEXT(RegalContext *_context, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glMultiTexCoordPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoordPointerEXT(_context, texunit, size, type, stride, pointer);
}

static void REGAL_CALL trace_glMultiTexEnvfEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Internal("trace_glMultiTexEnvfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexEnvfEXT(_context, texunit, target, pname, param);
}

static void REGAL_CALL trace_glMultiTexEnvfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glMultiTexEnvfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexEnvfvEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glMultiTexEnviEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glMultiTexEnviEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexEnviEXT(_context, texunit, target, pname, param);
}

static void REGAL_CALL trace_glMultiTexEnvivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glMultiTexEnvivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexEnvivEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glMultiTexGendEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
  Internal("trace_glMultiTexGendEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexGendEXT(_context, texunit, coord, pname, param);
}

static void REGAL_CALL trace_glMultiTexGendvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
  Internal("trace_glMultiTexGendvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexGendvEXT(_context, texunit, coord, pname, params);
}

static void REGAL_CALL trace_glMultiTexGenfEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
  Internal("trace_glMultiTexGenfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexGenfEXT(_context, texunit, coord, pname, param);
}

static void REGAL_CALL trace_glMultiTexGenfvEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
  Internal("trace_glMultiTexGenfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexGenfvEXT(_context, texunit, coord, pname, params);
}

static void REGAL_CALL trace_glMultiTexGeniEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
  Internal("trace_glMultiTexGeniEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexGeniEXT(_context, texunit, coord, pname, param);
}

static void REGAL_CALL trace_glMultiTexGenivEXT(RegalContext *_context, GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
  Internal("trace_glMultiTexGenivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexGenivEXT(_context, texunit, coord, pname, params);
}

static void REGAL_CALL trace_glMultiTexParameterIivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glMultiTexParameterIivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexParameterIivEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glMultiTexParameterIuivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
  Internal("trace_glMultiTexParameterIuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexParameterIuivEXT(_context, texunit, target, pname, params);
}

static void REGAL_CALL trace_glMultiTexParameterfEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  Internal("trace_glMultiTexParameterfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexParameterfEXT(_context, texunit, target, pname, param);
}

static void REGAL_CALL trace_glMultiTexParameterfvEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
  Internal("trace_glMultiTexParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexParameterfvEXT(_context, texunit, target, pname, param);
}

static void REGAL_CALL trace_glMultiTexParameteriEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glMultiTexParameteriEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexParameteriEXT(_context, texunit, target, pname, param);
}

static void REGAL_CALL trace_glMultiTexParameterivEXT(RegalContext *_context, GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
  Internal("trace_glMultiTexParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexParameterivEXT(_context, texunit, target, pname, param);
}

static void REGAL_CALL trace_glMultiTexRenderbufferEXT(RegalContext *_context, GLenum texunit, GLenum target, GLuint renderbuffer)
{
  Internal("trace_glMultiTexRenderbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexRenderbufferEXT(_context, texunit, target, renderbuffer);
}

static void REGAL_CALL trace_glMultiTexSubImage1DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glMultiTexSubImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexSubImage1DEXT(_context, texunit, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL trace_glMultiTexSubImage2DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glMultiTexSubImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexSubImage2DEXT(_context, texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL trace_glMultiTexSubImage3DEXT(RegalContext *_context, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glMultiTexSubImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexSubImage3DEXT(_context, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

static void REGAL_CALL trace_glNamedBufferDataEXT(RegalContext *_context, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Internal("trace_glNamedBufferDataEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedBufferDataEXT(_context, buffer, size, data, usage);
}

static void REGAL_CALL trace_glNamedBufferSubDataEXT(RegalContext *_context, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Internal("trace_glNamedBufferSubDataEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedBufferSubDataEXT(_context, buffer, offset, size, data);
}

static void REGAL_CALL trace_glNamedCopyBufferSubDataEXT(RegalContext *_context, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  Internal("trace_glNamedCopyBufferSubDataEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedCopyBufferSubDataEXT(_context, readBuffer, writeBuffer, readOffset, writeOffset, size);
}

static void REGAL_CALL trace_glNamedFramebufferRenderbufferEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("trace_glNamedFramebufferRenderbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedFramebufferRenderbufferEXT(_context, framebuffer, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL trace_glNamedFramebufferTexture1DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("trace_glNamedFramebufferTexture1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedFramebufferTexture1DEXT(_context, framebuffer, attachment, textarget, texture, level);
}

static void REGAL_CALL trace_glNamedFramebufferTexture2DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("trace_glNamedFramebufferTexture2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedFramebufferTexture2DEXT(_context, framebuffer, attachment, textarget, texture, level);
}

static void REGAL_CALL trace_glNamedFramebufferTexture3DEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Internal("trace_glNamedFramebufferTexture3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedFramebufferTexture3DEXT(_context, framebuffer, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL trace_glNamedFramebufferTextureEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  Internal("trace_glNamedFramebufferTextureEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedFramebufferTextureEXT(_context, framebuffer, attachment, texture, level);
}

static void REGAL_CALL trace_glNamedFramebufferTextureFaceEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Internal("trace_glNamedFramebufferTextureFaceEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedFramebufferTextureFaceEXT(_context, framebuffer, attachment, texture, level, face);
}

static void REGAL_CALL trace_glNamedFramebufferTextureLayerEXT(RegalContext *_context, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Internal("trace_glNamedFramebufferTextureLayerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedFramebufferTextureLayerEXT(_context, framebuffer, attachment, texture, level, layer);
}

static void REGAL_CALL trace_glNamedProgramLocalParameter4dEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glNamedProgramLocalParameter4dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameter4dEXT(_context, program, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glNamedProgramLocalParameter4dvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
  Internal("trace_glNamedProgramLocalParameter4dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameter4dvEXT(_context, program, target, index, params);
}

static void REGAL_CALL trace_glNamedProgramLocalParameter4fEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glNamedProgramLocalParameter4fEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameter4fEXT(_context, program, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glNamedProgramLocalParameter4fvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
  Internal("trace_glNamedProgramLocalParameter4fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameter4fvEXT(_context, program, target, index, params);
}

static void REGAL_CALL trace_glNamedProgramLocalParameterI4iEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glNamedProgramLocalParameterI4iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameterI4iEXT(_context, program, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glNamedProgramLocalParameterI4ivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLint *params)
{
  Internal("trace_glNamedProgramLocalParameterI4ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameterI4ivEXT(_context, program, target, index, params);
}

static void REGAL_CALL trace_glNamedProgramLocalParameterI4uiEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("trace_glNamedProgramLocalParameterI4uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameterI4uiEXT(_context, program, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glNamedProgramLocalParameterI4uivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, const GLuint *params)
{
  Internal("trace_glNamedProgramLocalParameterI4uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameterI4uivEXT(_context, program, target, index, params);
}

static void REGAL_CALL trace_glNamedProgramLocalParameters4fvEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Internal("trace_glNamedProgramLocalParameters4fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParameters4fvEXT(_context, program, target, index, count, params);
}

static void REGAL_CALL trace_glNamedProgramLocalParametersI4ivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Internal("trace_glNamedProgramLocalParametersI4ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParametersI4ivEXT(_context, program, target, index, count, params);
}

static void REGAL_CALL trace_glNamedProgramLocalParametersI4uivEXT(RegalContext *_context, GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Internal("trace_glNamedProgramLocalParametersI4uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramLocalParametersI4uivEXT(_context, program, target, index, count, params);
}

static void REGAL_CALL trace_glNamedProgramStringEXT(RegalContext *_context, GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  Internal("trace_glNamedProgramStringEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedProgramStringEXT(_context, program, target, format, len, string);
}

static void REGAL_CALL trace_glNamedRenderbufferStorageEXT(RegalContext *_context, GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glNamedRenderbufferStorageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedRenderbufferStorageEXT(_context, renderbuffer, internalformat, width, height);
}

static void REGAL_CALL trace_glNamedRenderbufferStorageMultisampleCoverageEXT(RegalContext *_context, GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glNamedRenderbufferStorageMultisampleCoverageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedRenderbufferStorageMultisampleCoverageEXT(_context, renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}

static void REGAL_CALL trace_glNamedRenderbufferStorageMultisampleEXT(RegalContext *_context, GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glNamedRenderbufferStorageMultisampleEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNamedRenderbufferStorageMultisampleEXT(_context, renderbuffer, samples, internalformat, width, height);
}

static void REGAL_CALL trace_glProgramUniform1dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x)
{
  Internal("trace_glProgramUniform1dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1dEXT(_context, program, location, x);
}

static void REGAL_CALL trace_glProgramUniform1dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glProgramUniform1dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1dvEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform1fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0)
{
  Internal("trace_glProgramUniform1fEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1fEXT(_context, program, location, v0);
}

static void REGAL_CALL trace_glProgramUniform1fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glProgramUniform1fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1fvEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform1iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0)
{
  Internal("trace_glProgramUniform1iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1iEXT(_context, program, location, v0);
}

static void REGAL_CALL trace_glProgramUniform1ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glProgramUniform1ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1ivEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform1uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0)
{
  Internal("trace_glProgramUniform1uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1uiEXT(_context, program, location, v0);
}

static void REGAL_CALL trace_glProgramUniform1uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glProgramUniform1uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1uivEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y)
{
  Internal("trace_glProgramUniform2dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2dEXT(_context, program, location, x, y);
}

static void REGAL_CALL trace_glProgramUniform2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glProgramUniform2dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2dvEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  Internal("trace_glProgramUniform2fEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2fEXT(_context, program, location, v0, v1);
}

static void REGAL_CALL trace_glProgramUniform2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glProgramUniform2fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2fvEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1)
{
  Internal("trace_glProgramUniform2iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2iEXT(_context, program, location, v0, v1);
}

static void REGAL_CALL trace_glProgramUniform2ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glProgramUniform2ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2ivEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1)
{
  Internal("trace_glProgramUniform2uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2uiEXT(_context, program, location, v0, v1);
}

static void REGAL_CALL trace_glProgramUniform2uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glProgramUniform2uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2uivEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glProgramUniform3dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3dEXT(_context, program, location, x, y, z);
}

static void REGAL_CALL trace_glProgramUniform3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glProgramUniform3dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3dvEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Internal("trace_glProgramUniform3fEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3fEXT(_context, program, location, v0, v1, v2);
}

static void REGAL_CALL trace_glProgramUniform3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glProgramUniform3fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3fvEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  Internal("trace_glProgramUniform3iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3iEXT(_context, program, location, v0, v1, v2);
}

static void REGAL_CALL trace_glProgramUniform3ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glProgramUniform3ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3ivEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Internal("trace_glProgramUniform3uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3uiEXT(_context, program, location, v0, v1, v2);
}

static void REGAL_CALL trace_glProgramUniform3uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glProgramUniform3uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3uivEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4dEXT(RegalContext *_context, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glProgramUniform4dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4dEXT(_context, program, location, x, y, z, w);
}

static void REGAL_CALL trace_glProgramUniform4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  Internal("trace_glProgramUniform4dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4dvEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4fEXT(RegalContext *_context, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Internal("trace_glProgramUniform4fEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4fEXT(_context, program, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glProgramUniform4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  Internal("trace_glProgramUniform4fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4fvEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4iEXT(RegalContext *_context, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Internal("trace_glProgramUniform4iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4iEXT(_context, program, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glProgramUniform4ivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint *value)
{
  Internal("trace_glProgramUniform4ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4ivEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4uiEXT(RegalContext *_context, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Internal("trace_glProgramUniform4uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4uiEXT(_context, program, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glProgramUniform4uivEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glProgramUniform4uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4uivEXT(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix2dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix2fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2x3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix2x3dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2x3dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2x3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix2x3fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2x3fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2x4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix2x4dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2x4dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix2x4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix2x4fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix2x4fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix3dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix3fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3x2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix3x2dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3x2dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3x2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix3x2fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3x2fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3x4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix3x4dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3x4dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix3x4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix3x4fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix3x4fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix4dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix4fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4x2dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix4x2dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4x2dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4x2fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix4x2fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4x2fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4x3dvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  Internal("trace_glProgramUniformMatrix4x3dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4x3dvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glProgramUniformMatrix4x3fvEXT(RegalContext *_context, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("trace_glProgramUniformMatrix4x3fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformMatrix4x3fvEXT(_context, program, location, count, transpose, value);
}

static void REGAL_CALL trace_glPushClientAttribDefaultEXT(RegalContext *_context, GLbitfield mask)
{
  Internal("trace_glPushClientAttribDefaultEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPushClientAttribDefaultEXT(_context, mask);
}

static void REGAL_CALL trace_glTextureBufferEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("trace_glTextureBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureBufferEXT(_context, texture, target, internalformat, buffer);
}

static void REGAL_CALL trace_glTextureParameterIivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glTextureParameterIivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureParameterIivEXT(_context, texture, target, pname, params);
}

static void REGAL_CALL trace_glTextureParameterIuivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
  Internal("trace_glTextureParameterIuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureParameterIuivEXT(_context, texture, target, pname, params);
}

static void REGAL_CALL trace_glTextureParameterfEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
  Internal("trace_glTextureParameterfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureParameterfEXT(_context, texture, target, pname, param);
}

static void REGAL_CALL trace_glTextureParameterfvEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
  Internal("trace_glTextureParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureParameterfvEXT(_context, texture, target, pname, param);
}

static void REGAL_CALL trace_glTextureParameteriEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glTextureParameteriEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureParameteriEXT(_context, texture, target, pname, param);
}

static void REGAL_CALL trace_glTextureParameterivEXT(RegalContext *_context, GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
  Internal("trace_glTextureParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureParameterivEXT(_context, texture, target, pname, param);
}

static void REGAL_CALL trace_glTextureRenderbufferEXT(RegalContext *_context, GLuint texture, GLenum target, GLuint renderbuffer)
{
  Internal("trace_glTextureRenderbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureRenderbufferEXT(_context, texture, target, renderbuffer);
}

static void REGAL_CALL trace_glTextureSubImage1DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTextureSubImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureSubImage1DEXT(_context, texture, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL trace_glTextureSubImage2DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTextureSubImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureSubImage2DEXT(_context, texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL trace_glTextureSubImage3DEXT(RegalContext *_context, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTextureSubImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureSubImage3DEXT(_context, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

static GLboolean REGAL_CALL trace_glUnmapNamedBufferEXT(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glUnmapNamedBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glUnmapNamedBufferEXT(_context, buffer);
  return ret;
}

static void REGAL_CALL trace_glVertexArrayColorOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayColorOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayColorOffsetEXT(_context, vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayEdgeFlagOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayEdgeFlagOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayEdgeFlagOffsetEXT(_context, vaobj, buffer, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayFogCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayFogCoordOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayFogCoordOffsetEXT(_context, vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayIndexOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayIndexOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayIndexOffsetEXT(_context, vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayMultiTexCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayMultiTexCoordOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayMultiTexCoordOffsetEXT(_context, vaobj, buffer, texunit, size, type, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayNormalOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayNormalOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayNormalOffsetEXT(_context, vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL trace_glVertexArraySecondaryColorOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArraySecondaryColorOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArraySecondaryColorOffsetEXT(_context, vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayTexCoordOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayTexCoordOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayTexCoordOffsetEXT(_context, vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayVertexAttribIOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayVertexAttribIOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexAttribIOffsetEXT(_context, vaobj, buffer, index, size, type, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayVertexAttribOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayVertexAttribOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexAttribOffsetEXT(_context, vaobj, buffer, index, size, type, normalized, stride, offset);
}

static void REGAL_CALL trace_glVertexArrayVertexOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  Internal("trace_glVertexArrayVertexOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexOffsetEXT(_context, vaobj, buffer, size, type, stride, offset);
}

// GL_EXT_discard_framebuffer

static void REGAL_CALL trace_glDiscardFramebufferEXT(RegalContext *_context, GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  Internal("trace_glDiscardFramebufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDiscardFramebufferEXT(_context, target, numAttachments, attachments);
}

// GL_EXT_draw_buffers2

static void REGAL_CALL trace_glColorMaskIndexedEXT(RegalContext *_context, GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  Internal("trace_glColorMaskIndexedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorMaskIndexedEXT(_context, buf, r, g, b, a);
}

static void REGAL_CALL trace_glDisableIndexedEXT(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("trace_glDisableIndexedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableIndexedEXT(_context, target, index);
}

static void REGAL_CALL trace_glEnableIndexedEXT(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("trace_glEnableIndexedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableIndexedEXT(_context, target, index);
}

static void REGAL_CALL trace_glGetBooleanIndexedvEXT(RegalContext *_context, GLenum value, GLuint index, GLboolean *data)
{
  Internal("trace_glGetBooleanIndexedvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBooleanIndexedvEXT(_context, value, index, data);
}

static void REGAL_CALL trace_glGetIntegerIndexedvEXT(RegalContext *_context, GLenum value, GLuint index, GLint *data)
{
  Internal("trace_glGetIntegerIndexedvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetIntegerIndexedvEXT(_context, value, index, data);
}

static GLboolean REGAL_CALL trace_glIsEnabledIndexedEXT(RegalContext *_context, GLenum target, GLuint index)
{
  Internal("trace_glIsEnabledIndexedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsEnabledIndexedEXT(_context, target, index);
  return ret;
}

// GL_EXT_draw_instanced

static void REGAL_CALL trace_glDrawArraysInstancedEXT(RegalContext *_context, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  Internal("trace_glDrawArraysInstancedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawArraysInstancedEXT(_context, mode, start, count, primcount);
}

static void REGAL_CALL trace_glDrawElementsInstancedEXT(RegalContext *_context, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  Internal("trace_glDrawElementsInstancedEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawElementsInstancedEXT(_context, mode, count, type, indices, primcount);
}

// GL_EXT_draw_range_elements

static void REGAL_CALL trace_glDrawRangeElementsEXT(RegalContext *_context, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  Internal("trace_glDrawRangeElementsEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawRangeElementsEXT(_context, mode, start, end, count, type, indices);
}

// GL_EXT_fog_coord

static void REGAL_CALL trace_glFogCoordPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glFogCoordPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordPointerEXT(_context, type, stride, pointer);
}

static void REGAL_CALL trace_glFogCoorddEXT(RegalContext *_context, GLdouble coord)
{
  Internal("trace_glFogCoorddEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoorddEXT(_context, coord);
}

static void REGAL_CALL trace_glFogCoorddvEXT(RegalContext *_context, const GLdouble *coord)
{
  Internal("trace_glFogCoorddvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoorddvEXT(_context, coord);
}

static void REGAL_CALL trace_glFogCoordfEXT(RegalContext *_context, GLfloat coord)
{
  Internal("trace_glFogCoordfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordfEXT(_context, coord);
}

static void REGAL_CALL trace_glFogCoordfvEXT(RegalContext *_context, const GLfloat *coord)
{
  Internal("trace_glFogCoordfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordfvEXT(_context, coord);
}

// GL_EXT_framebuffer_blit

static void REGAL_CALL trace_glBlitFramebufferEXT(RegalContext *_context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Internal("trace_glBlitFramebufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlitFramebufferEXT(_context, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

// GL_EXT_framebuffer_multisample

static void REGAL_CALL trace_glRenderbufferStorageMultisampleEXT(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorageMultisampleEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorageMultisampleEXT(_context, target, samples, internalformat, width, height);
}

// GL_EXT_framebuffer_object

static void REGAL_CALL trace_glBindFramebufferEXT(RegalContext *_context, GLenum target, GLuint framebuffer)
{
  Internal("trace_glBindFramebufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindFramebufferEXT(_context, target, framebuffer);
}

static void REGAL_CALL trace_glBindRenderbufferEXT(RegalContext *_context, GLenum target, GLuint renderbuffer)
{
  Internal("trace_glBindRenderbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindRenderbufferEXT(_context, target, renderbuffer);
}

static GLenum REGAL_CALL trace_glCheckFramebufferStatusEXT(RegalContext *_context, GLenum target)
{
  Internal("trace_glCheckFramebufferStatusEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glCheckFramebufferStatusEXT(_context, target);
  return ret;
}

static void REGAL_CALL trace_glDeleteFramebuffersEXT(RegalContext *_context, GLsizei n, const GLuint *framebuffers)
{
  Internal("trace_glDeleteFramebuffersEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteFramebuffersEXT(_context, n, framebuffers);
}

static void REGAL_CALL trace_glDeleteRenderbuffersEXT(RegalContext *_context, GLsizei n, const GLuint *renderbuffers)
{
  Internal("trace_glDeleteRenderbuffersEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteRenderbuffersEXT(_context, n, renderbuffers);
}

static void REGAL_CALL trace_glFramebufferRenderbufferEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("trace_glFramebufferRenderbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferRenderbufferEXT(_context, target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL trace_glFramebufferTexture1DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("trace_glFramebufferTexture1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture1DEXT(_context, target, attachment, textarget, texture, level);
}

static void REGAL_CALL trace_glFramebufferTexture2DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("trace_glFramebufferTexture2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture2DEXT(_context, target, attachment, textarget, texture, level);
}

static void REGAL_CALL trace_glFramebufferTexture3DEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Internal("trace_glFramebufferTexture3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture3DEXT(_context, target, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL trace_glGenFramebuffersEXT(RegalContext *_context, GLsizei n, GLuint *framebuffers)
{
  Internal("trace_glGenFramebuffersEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenFramebuffersEXT(_context, n, framebuffers);
}

static void REGAL_CALL trace_glGenRenderbuffersEXT(RegalContext *_context, GLsizei n, GLuint *renderbuffers)
{
  Internal("trace_glGenRenderbuffersEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenRenderbuffersEXT(_context, n, renderbuffers);
}

static void REGAL_CALL trace_glGenerateMipmapEXT(RegalContext *_context, GLenum target)
{
  Internal("trace_glGenerateMipmapEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenerateMipmapEXT(_context, target);
}

static void REGAL_CALL trace_glGetFramebufferAttachmentParameterivEXT(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("trace_glGetFramebufferAttachmentParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFramebufferAttachmentParameterivEXT(_context, target, attachment, pname, params);
}

static void REGAL_CALL trace_glGetRenderbufferParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetRenderbufferParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetRenderbufferParameterivEXT(_context, target, pname, params);
}

static GLboolean REGAL_CALL trace_glIsFramebufferEXT(RegalContext *_context, GLuint framebuffer)
{
  Internal("trace_glIsFramebufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsFramebufferEXT(_context, framebuffer);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsRenderbufferEXT(RegalContext *_context, GLuint renderbuffer)
{
  Internal("trace_glIsRenderbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsRenderbufferEXT(_context, renderbuffer);
  return ret;
}

static void REGAL_CALL trace_glRenderbufferStorageEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorageEXT(_context, target, internalformat, width, height);
}

// GL_EXT_geometry_shader4

static void REGAL_CALL trace_glFramebufferTextureEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  Internal("trace_glFramebufferTextureEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTextureEXT(_context, target, attachment, texture, level);
}

static void REGAL_CALL trace_glFramebufferTextureFaceEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  Internal("trace_glFramebufferTextureFaceEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTextureFaceEXT(_context, target, attachment, texture, level, face);
}

static void REGAL_CALL trace_glProgramParameteriEXT(RegalContext *_context, GLuint program, GLenum pname, GLint value)
{
  Internal("trace_glProgramParameteriEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameteriEXT(_context, program, pname, value);
}

// GL_EXT_gpu_program_parameters

static void REGAL_CALL trace_glProgramEnvParameters4fvEXT(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Internal("trace_glProgramEnvParameters4fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameters4fvEXT(_context, target, index, count, params);
}

static void REGAL_CALL trace_glProgramLocalParameters4fvEXT(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  Internal("trace_glProgramLocalParameters4fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameters4fvEXT(_context, target, index, count, params);
}

// GL_EXT_gpu_shader4

static void REGAL_CALL trace_glBindFragDataLocationEXT(RegalContext *_context, GLuint program, GLuint color, const GLchar *name)
{
  Internal("trace_glBindFragDataLocationEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindFragDataLocationEXT(_context, program, color, name);
}

static GLint REGAL_CALL trace_glGetFragDataLocationEXT(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("trace_glGetFragDataLocationEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetFragDataLocationEXT(_context, program, name);
  return ret;
}

static void REGAL_CALL trace_glGetUniformuivEXT(RegalContext *_context, GLuint program, GLint location, GLuint *params)
{
  Internal("trace_glGetUniformuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformuivEXT(_context, program, location, params);
}

static void REGAL_CALL trace_glGetVertexAttribIivEXT(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("trace_glGetVertexAttribIivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribIivEXT(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribIuivEXT(RegalContext *_context, GLuint index, GLenum pname, GLuint *params)
{
  Internal("trace_glGetVertexAttribIuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribIuivEXT(_context, index, pname, params);
}

static void REGAL_CALL trace_glUniform1uiEXT(RegalContext *_context, GLint location, GLuint v0)
{
  Internal("trace_glUniform1uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1uiEXT(_context, location, v0);
}

static void REGAL_CALL trace_glUniform1uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glUniform1uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1uivEXT(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1)
{
  Internal("trace_glUniform2uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2uiEXT(_context, location, v0, v1);
}

static void REGAL_CALL trace_glUniform2uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glUniform2uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2uivEXT(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  Internal("trace_glUniform3uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3uiEXT(_context, location, v0, v1, v2);
}

static void REGAL_CALL trace_glUniform3uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glUniform3uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3uivEXT(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4uiEXT(RegalContext *_context, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  Internal("trace_glUniform4uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4uiEXT(_context, location, v0, v1, v2, v3);
}

static void REGAL_CALL trace_glUniform4uivEXT(RegalContext *_context, GLint location, GLsizei count, const GLuint *value)
{
  Internal("trace_glUniform4uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4uivEXT(_context, location, count, value);
}

static void REGAL_CALL trace_glVertexAttribI1iEXT(RegalContext *_context, GLuint index, GLint x)
{
  Internal("trace_glVertexAttribI1iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI1iEXT(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttribI1ivEXT(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttribI1ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI1ivEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI1uiEXT(RegalContext *_context, GLuint index, GLuint x)
{
  Internal("trace_glVertexAttribI1uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI1uiEXT(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttribI1uivEXT(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttribI1uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI1uivEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI2iEXT(RegalContext *_context, GLuint index, GLint x, GLint y)
{
  Internal("trace_glVertexAttribI2iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI2iEXT(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttribI2ivEXT(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttribI2ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI2ivEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI2uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y)
{
  Internal("trace_glVertexAttribI2uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI2uiEXT(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttribI2uivEXT(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttribI2uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI2uivEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI3iEXT(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z)
{
  Internal("trace_glVertexAttribI3iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI3iEXT(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttribI3ivEXT(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttribI3ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI3ivEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI3uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z)
{
  Internal("trace_glVertexAttribI3uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI3uiEXT(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttribI3uivEXT(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttribI3uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI3uivEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4bvEXT(RegalContext *_context, GLuint index, const GLbyte *v)
{
  Internal("trace_glVertexAttribI4bvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4bvEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4iEXT(RegalContext *_context, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glVertexAttribI4iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4iEXT(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttribI4ivEXT(RegalContext *_context, GLuint index, const GLint *v)
{
  Internal("trace_glVertexAttribI4ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4ivEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4svEXT(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttribI4svEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4svEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4ubvEXT(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("trace_glVertexAttribI4ubvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4ubvEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4uiEXT(RegalContext *_context, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("trace_glVertexAttribI4uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4uiEXT(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttribI4uivEXT(RegalContext *_context, GLuint index, const GLuint *v)
{
  Internal("trace_glVertexAttribI4uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4uivEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribI4usvEXT(RegalContext *_context, GLuint index, const GLushort *v)
{
  Internal("trace_glVertexAttribI4usvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribI4usvEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribIPointerEXT(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexAttribIPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribIPointerEXT(_context, index, size, type, stride, pointer);
}

// GL_EXT_histogram

static void REGAL_CALL trace_glGetHistogramEXT(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Internal("trace_glGetHistogramEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetHistogramEXT(_context, target, reset, format, type, values);
}

static void REGAL_CALL trace_glGetHistogramParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetHistogramParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetHistogramParameterfvEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetHistogramParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetHistogramParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetHistogramParameterivEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetMinmaxEXT(RegalContext *_context, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  Internal("trace_glGetMinmaxEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMinmaxEXT(_context, target, reset, format, type, values);
}

static void REGAL_CALL trace_glGetMinmaxParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMinmaxParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMinmaxParameterfvEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetMinmaxParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetMinmaxParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMinmaxParameterivEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glHistogramEXT(RegalContext *_context, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  Internal("trace_glHistogramEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glHistogramEXT(_context, target, width, internalformat, sink);
}

static void REGAL_CALL trace_glMinmaxEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLboolean sink)
{
  Internal("trace_glMinmaxEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMinmaxEXT(_context, target, internalformat, sink);
}

static void REGAL_CALL trace_glResetHistogramEXT(RegalContext *_context, GLenum target)
{
  Internal("trace_glResetHistogramEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glResetHistogramEXT(_context, target);
}

static void REGAL_CALL trace_glResetMinmaxEXT(RegalContext *_context, GLenum target)
{
  Internal("trace_glResetMinmaxEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glResetMinmaxEXT(_context, target);
}

// GL_EXT_index_func

static void REGAL_CALL trace_glIndexFuncEXT(RegalContext *_context, GLenum func, GLfloat ref)
{
  Internal("trace_glIndexFuncEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexFuncEXT(_context, func, ref);
}

// GL_EXT_index_material

static void REGAL_CALL trace_glIndexMaterialEXT(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("trace_glIndexMaterialEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexMaterialEXT(_context, face, mode);
}

// GL_EXT_light_texture

static void REGAL_CALL trace_glApplyTextureEXT(RegalContext *_context, GLenum mode)
{
  Internal("trace_glApplyTextureEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glApplyTextureEXT(_context, mode);
}

static void REGAL_CALL trace_glTextureLightEXT(RegalContext *_context, GLenum pname)
{
  Internal("trace_glTextureLightEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureLightEXT(_context, pname);
}

static void REGAL_CALL trace_glTextureMaterialEXT(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("trace_glTextureMaterialEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureMaterialEXT(_context, face, mode);
}

// GL_EXT_multi_draw_arrays

static void REGAL_CALL trace_glMultiDrawArraysEXT(RegalContext *_context, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  Internal("trace_glMultiDrawArraysEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawArraysEXT(_context, mode, first, count, primcount);
}

static void REGAL_CALL trace_glMultiDrawElementsEXT(RegalContext *_context, GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  Internal("trace_glMultiDrawElementsEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiDrawElementsEXT(_context, mode, count, type, indices, primcount);
}

// GL_EXT_multisample

static void REGAL_CALL trace_glSampleMaskEXT(RegalContext *_context, GLclampf value, GLboolean invert)
{
  Internal("trace_glSampleMaskEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSampleMaskEXT(_context, value, invert);
}

static void REGAL_CALL trace_glSamplePatternEXT(RegalContext *_context, GLenum pattern)
{
  Internal("trace_glSamplePatternEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSamplePatternEXT(_context, pattern);
}

// GL_EXT_occlusion_query_boolean

static void REGAL_CALL trace_glBeginQueryEXT(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("trace_glBeginQueryEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginQueryEXT(_context, target, id);
}

static void REGAL_CALL trace_glDeleteQueriesEXT(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("trace_glDeleteQueriesEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteQueriesEXT(_context, n, ids);
}

static void REGAL_CALL trace_glEndQueryEXT(RegalContext *_context, GLenum target)
{
  Internal("trace_glEndQueryEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndQueryEXT(_context, target);
}

static void REGAL_CALL trace_glGenQueriesEXT(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("trace_glGenQueriesEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenQueriesEXT(_context, n, ids);
}

static void REGAL_CALL trace_glGetQueryObjectuivEXT(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("trace_glGetQueryObjectuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjectuivEXT(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetQueryivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetQueryivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryivEXT(_context, target, pname, params);
}

static GLboolean REGAL_CALL trace_glIsQueryEXT(RegalContext *_context, GLuint id)
{
  Internal("trace_glIsQueryEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsQueryEXT(_context, id);
  return ret;
}

// GL_EXT_paletted_texture

static void REGAL_CALL trace_glColorTableEXT(RegalContext *_context, GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Internal("trace_glColorTableEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorTableEXT(_context, target, internalFormat, width, format, type, table);
}

static void REGAL_CALL trace_glGetColorTableEXT(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *data)
{
  Internal("trace_glGetColorTableEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTableEXT(_context, target, format, type, data);
}

static void REGAL_CALL trace_glGetColorTableParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetColorTableParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTableParameterfvEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetColorTableParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetColorTableParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTableParameterivEXT(_context, target, pname, params);
}

// GL_EXT_pixel_transform

static void REGAL_CALL trace_glPixelTransformParameterfEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat param)
{
  Internal("trace_glPixelTransformParameterfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTransformParameterfEXT(_context, target, pname, param);
}

static void REGAL_CALL trace_glPixelTransformParameterfvEXT(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glPixelTransformParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTransformParameterfvEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glPixelTransformParameteriEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint param)
{
  Internal("trace_glPixelTransformParameteriEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTransformParameteriEXT(_context, target, pname, param);
}

static void REGAL_CALL trace_glPixelTransformParameterivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glPixelTransformParameterivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTransformParameterivEXT(_context, target, pname, params);
}

// GL_EXT_point_parameters

static void REGAL_CALL trace_glPointParameterfEXT(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glPointParameterfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterfEXT(_context, pname, param);
}

static void REGAL_CALL trace_glPointParameterfvEXT(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glPointParameterfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterfvEXT(_context, pname, params);
}

// GL_EXT_polygon_offset

static void REGAL_CALL trace_glPolygonOffsetEXT(RegalContext *_context, GLfloat factor, GLfloat bias)
{
  Internal("trace_glPolygonOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPolygonOffsetEXT(_context, factor, bias);
}

// GL_EXT_provoking_vertex

static void REGAL_CALL trace_glProvokingVertexEXT(RegalContext *_context, GLenum mode)
{
  Internal("trace_glProvokingVertexEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProvokingVertexEXT(_context, mode);
}

// GL_EXT_secondary_color

static void REGAL_CALL trace_glSecondaryColor3bEXT(RegalContext *_context, GLbyte red, GLbyte green, GLbyte blue)
{
  Internal("trace_glSecondaryColor3bEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3bEXT(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3bvEXT(RegalContext *_context, const GLbyte *v)
{
  Internal("trace_glSecondaryColor3bvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3bvEXT(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3dEXT(RegalContext *_context, GLdouble red, GLdouble green, GLdouble blue)
{
  Internal("trace_glSecondaryColor3dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3dEXT(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3dvEXT(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glSecondaryColor3dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3dvEXT(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3fEXT(RegalContext *_context, GLfloat red, GLfloat green, GLfloat blue)
{
  Internal("trace_glSecondaryColor3fEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3fEXT(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3fvEXT(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glSecondaryColor3fvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3fvEXT(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3iEXT(RegalContext *_context, GLint red, GLint green, GLint blue)
{
  Internal("trace_glSecondaryColor3iEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3iEXT(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3ivEXT(RegalContext *_context, const GLint *v)
{
  Internal("trace_glSecondaryColor3ivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3ivEXT(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3sEXT(RegalContext *_context, GLshort red, GLshort green, GLshort blue)
{
  Internal("trace_glSecondaryColor3sEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3sEXT(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3svEXT(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glSecondaryColor3svEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3svEXT(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3ubEXT(RegalContext *_context, GLubyte red, GLubyte green, GLubyte blue)
{
  Internal("trace_glSecondaryColor3ubEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3ubEXT(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3ubvEXT(RegalContext *_context, const GLubyte *v)
{
  Internal("trace_glSecondaryColor3ubvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3ubvEXT(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3uiEXT(RegalContext *_context, GLuint red, GLuint green, GLuint blue)
{
  Internal("trace_glSecondaryColor3uiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3uiEXT(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3uivEXT(RegalContext *_context, const GLuint *v)
{
  Internal("trace_glSecondaryColor3uivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3uivEXT(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3usEXT(RegalContext *_context, GLushort red, GLushort green, GLushort blue)
{
  Internal("trace_glSecondaryColor3usEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3usEXT(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3usvEXT(RegalContext *_context, const GLushort *v)
{
  Internal("trace_glSecondaryColor3usvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3usvEXT(_context, v);
}

static void REGAL_CALL trace_glSecondaryColorPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glSecondaryColorPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColorPointerEXT(_context, size, type, stride, pointer);
}

// GL_EXT_separate_shader_objects

static void REGAL_CALL trace_glActiveProgramEXT(RegalContext *_context, GLuint program)
{
  Internal("trace_glActiveProgramEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glActiveProgramEXT(_context, program);
}

static GLuint REGAL_CALL trace_glCreateShaderProgramEXT(RegalContext *_context, GLenum type, const GLchar *string)
{
  Internal("trace_glCreateShaderProgramEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glCreateShaderProgramEXT(_context, type, string);
  return ret;
}

static void REGAL_CALL trace_glUseShaderProgramEXT(RegalContext *_context, GLenum type, GLuint program)
{
  Internal("trace_glUseShaderProgramEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUseShaderProgramEXT(_context, type, program);
}

// GL_EXT_shader_image_load_store

static void REGAL_CALL trace_glBindImageTextureEXT(RegalContext *_context, GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
  Internal("trace_glBindImageTextureEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindImageTextureEXT(_context, index, texture, level, layered, layer, access, format);
}

static void REGAL_CALL trace_glMemoryBarrierEXT(RegalContext *_context, GLbitfield barriers)
{
  Internal("trace_glMemoryBarrierEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMemoryBarrierEXT(_context, barriers);
}

// GL_EXT_stencil_clear_tag

static void REGAL_CALL trace_glStencilClearTagEXT(RegalContext *_context, GLsizei stencilTagBits, GLuint stencilClearTag)
{
  Internal("trace_glStencilClearTagEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilClearTagEXT(_context, stencilTagBits, stencilClearTag);
}

// GL_EXT_stencil_two_side

static void REGAL_CALL trace_glActiveStencilFaceEXT(RegalContext *_context, GLenum face)
{
  Internal("trace_glActiveStencilFaceEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glActiveStencilFaceEXT(_context, face);
}

// GL_EXT_subtexture

static void REGAL_CALL trace_glTexSubImage1DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexSubImage1DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexSubImage1DEXT(_context, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL trace_glTexSubImage2DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexSubImage2DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexSubImage2DEXT(_context, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL trace_glTexSubImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexSubImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexSubImage3DEXT(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_EXT_texture3D

static void REGAL_CALL trace_glTexImage3DEXT(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexImage3DEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage3DEXT(_context, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

// GL_EXT_texture_array

static void REGAL_CALL trace_glFramebufferTextureLayerEXT(RegalContext *_context, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  Internal("trace_glFramebufferTextureLayerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTextureLayerEXT(_context, target, attachment, texture, level, layer);
}

// GL_EXT_texture_buffer_object

static void REGAL_CALL trace_glTexBufferEXT(RegalContext *_context, GLenum target, GLenum internalformat, GLuint buffer)
{
  Internal("trace_glTexBufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexBufferEXT(_context, target, internalformat, buffer);
}

// GL_EXT_texture_integer

static void REGAL_CALL trace_glClearColorIiEXT(RegalContext *_context, GLint red, GLint green, GLint blue, GLint alpha)
{
  Internal("trace_glClearColorIiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearColorIiEXT(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glClearColorIuiEXT(RegalContext *_context, GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  Internal("trace_glClearColorIuiEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearColorIuiEXT(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glGetTexParameterIivEXT(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetTexParameterIivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexParameterIivEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetTexParameterIuivEXT(RegalContext *_context, GLenum target, GLenum pname, GLuint *params)
{
  Internal("trace_glGetTexParameterIuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexParameterIuivEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glTexParameterIivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glTexParameterIivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameterIivEXT(_context, target, pname, params);
}

static void REGAL_CALL trace_glTexParameterIuivEXT(RegalContext *_context, GLenum target, GLenum pname, const GLuint *params)
{
  Internal("trace_glTexParameterIuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameterIuivEXT(_context, target, pname, params);
}

// GL_EXT_texture_object

static GLboolean REGAL_CALL trace_glAreTexturesResidentEXT(RegalContext *_context, GLsizei n, const GLuint *textures, GLboolean *residences)
{
  Internal("trace_glAreTexturesResidentEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glAreTexturesResidentEXT(_context, n, textures, residences);
  return ret;
}

static void REGAL_CALL trace_glBindTextureEXT(RegalContext *_context, GLenum target, GLuint texture)
{
  Internal("trace_glBindTextureEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindTextureEXT(_context, target, texture);
}

static void REGAL_CALL trace_glDeleteTexturesEXT(RegalContext *_context, GLsizei n, const GLuint *textures)
{
  Internal("trace_glDeleteTexturesEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteTexturesEXT(_context, n, textures);
}

static void REGAL_CALL trace_glGenTexturesEXT(RegalContext *_context, GLsizei n, GLuint *textures)
{
  Internal("trace_glGenTexturesEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenTexturesEXT(_context, n, textures);
}

static GLboolean REGAL_CALL trace_glIsTextureEXT(RegalContext *_context, GLuint texture)
{
  Internal("trace_glIsTextureEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsTextureEXT(_context, texture);
  return ret;
}

static void REGAL_CALL trace_glPrioritizeTexturesEXT(RegalContext *_context, GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  Internal("trace_glPrioritizeTexturesEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPrioritizeTexturesEXT(_context, n, textures, priorities);
}

// GL_EXT_texture_perturb_normal

static void REGAL_CALL trace_glTextureNormalEXT(RegalContext *_context, GLenum mode)
{
  Internal("trace_glTextureNormalEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureNormalEXT(_context, mode);
}

// GL_EXT_timer_query

static void REGAL_CALL trace_glGetQueryObjecti64vEXT(RegalContext *_context, GLuint id, GLenum pname, GLint64EXT *params)
{
  Internal("trace_glGetQueryObjecti64vEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjecti64vEXT(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetQueryObjectui64vEXT(RegalContext *_context, GLuint id, GLenum pname, GLuint64EXT *params)
{
  Internal("trace_glGetQueryObjectui64vEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetQueryObjectui64vEXT(_context, id, pname, params);
}

// GL_EXT_transform_feedback

static void REGAL_CALL trace_glBeginTransformFeedbackEXT(RegalContext *_context, GLenum primitiveMode)
{
  Internal("trace_glBeginTransformFeedbackEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginTransformFeedbackEXT(_context, primitiveMode);
}

static void REGAL_CALL trace_glBindBufferBaseEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer)
{
  Internal("trace_glBindBufferBaseEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferBaseEXT(_context, target, index, buffer);
}

static void REGAL_CALL trace_glBindBufferOffsetEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  Internal("trace_glBindBufferOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferOffsetEXT(_context, target, index, buffer, offset);
}

static void REGAL_CALL trace_glBindBufferRangeEXT(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("trace_glBindBufferRangeEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferRangeEXT(_context, target, index, buffer, offset, size);
}

static void REGAL_CALL trace_glEndTransformFeedbackEXT(RegalContext *_context)
{
  Internal("trace_glEndTransformFeedbackEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndTransformFeedbackEXT(_context);
}

static void REGAL_CALL trace_glGetTransformFeedbackVaryingEXT(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Internal("trace_glGetTransformFeedbackVaryingEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTransformFeedbackVaryingEXT(_context, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL trace_glTransformFeedbackVaryingsEXT(RegalContext *_context, GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode)
{
  Internal("trace_glTransformFeedbackVaryingsEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTransformFeedbackVaryingsEXT(_context, program, count, varyings, bufferMode);
}

// GL_EXT_vertex_array

static void REGAL_CALL trace_glArrayElementEXT(RegalContext *_context, GLint i)
{
  Internal("trace_glArrayElementEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glArrayElementEXT(_context, i);
}

static void REGAL_CALL trace_glColorPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("trace_glColorPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorPointerEXT(_context, size, type, stride, count, pointer);
}

static void REGAL_CALL trace_glDrawArraysEXT(RegalContext *_context, GLenum mode, GLint first, GLsizei count)
{
  Internal("trace_glDrawArraysEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawArraysEXT(_context, mode, first, count);
}

static void REGAL_CALL trace_glEdgeFlagPointerEXT(RegalContext *_context, GLsizei stride, GLsizei count, const GLboolean *pointer)
{
  Internal("trace_glEdgeFlagPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEdgeFlagPointerEXT(_context, stride, count, pointer);
}

static void REGAL_CALL trace_glGetPointervEXT(RegalContext *_context, GLenum pname, GLvoid **params)
{
  Internal("trace_glGetPointervEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPointervEXT(_context, pname, params);
}

static void REGAL_CALL trace_glIndexPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("trace_glIndexPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexPointerEXT(_context, type, stride, count, pointer);
}

static void REGAL_CALL trace_glNormalPointerEXT(RegalContext *_context, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("trace_glNormalPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalPointerEXT(_context, type, stride, count, pointer);
}

static void REGAL_CALL trace_glTexCoordPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("trace_glTexCoordPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordPointerEXT(_context, size, type, stride, count, pointer);
}

static void REGAL_CALL trace_glVertexPointerEXT(RegalContext *_context, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  Internal("trace_glVertexPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexPointerEXT(_context, size, type, stride, count, pointer);
}

// GL_EXT_vertex_attrib_64bit

static void REGAL_CALL trace_glGetVertexAttribLdvEXT(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetVertexAttribLdvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribLdvEXT(_context, index, pname, params);
}

static void REGAL_CALL trace_glVertexArrayVertexAttribLOffsetEXT(RegalContext *_context, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  Internal("trace_glVertexArrayVertexAttribLOffsetEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayVertexAttribLOffsetEXT(_context, vaobj, buffer, index, size, type, stride, offset);
}

static void REGAL_CALL trace_glVertexAttribL1dEXT(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("trace_glVertexAttribL1dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL1dEXT(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttribL1dvEXT(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttribL1dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL1dvEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL2dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("trace_glVertexAttribL2dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL2dEXT(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttribL2dvEXT(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttribL2dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL2dvEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL3dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glVertexAttribL3dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL3dEXT(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttribL3dvEXT(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttribL3dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL3dvEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL4dEXT(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glVertexAttribL4dEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL4dEXT(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttribL4dvEXT(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttribL4dvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL4dvEXT(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribLPointerEXT(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexAttribLPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribLPointerEXT(_context, index, size, type, stride, pointer);
}

// GL_EXT_vertex_shader

static void REGAL_CALL trace_glBeginVertexShaderEXT(RegalContext *_context)
{
  Internal("trace_glBeginVertexShaderEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginVertexShaderEXT(_context);
}

static GLuint REGAL_CALL trace_glBindLightParameterEXT(RegalContext *_context, GLenum light, GLenum value)
{
  Internal("trace_glBindLightParameterEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glBindLightParameterEXT(_context, light, value);
  return ret;
}

static GLuint REGAL_CALL trace_glBindMaterialParameterEXT(RegalContext *_context, GLenum face, GLenum value)
{
  Internal("trace_glBindMaterialParameterEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glBindMaterialParameterEXT(_context, face, value);
  return ret;
}

static GLuint REGAL_CALL trace_glBindParameterEXT(RegalContext *_context, GLenum value)
{
  Internal("trace_glBindParameterEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glBindParameterEXT(_context, value);
  return ret;
}

static GLuint REGAL_CALL trace_glBindTexGenParameterEXT(RegalContext *_context, GLenum unit, GLenum coord, GLenum value)
{
  Internal("trace_glBindTexGenParameterEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glBindTexGenParameterEXT(_context, unit, coord, value);
  return ret;
}

static GLuint REGAL_CALL trace_glBindTextureUnitParameterEXT(RegalContext *_context, GLenum unit, GLenum value)
{
  Internal("trace_glBindTextureUnitParameterEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glBindTextureUnitParameterEXT(_context, unit, value);
  return ret;
}

static void REGAL_CALL trace_glBindVertexShaderEXT(RegalContext *_context, GLuint id)
{
  Internal("trace_glBindVertexShaderEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindVertexShaderEXT(_context, id);
}

static void REGAL_CALL trace_glDeleteVertexShaderEXT(RegalContext *_context, GLuint id)
{
  Internal("trace_glDeleteVertexShaderEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteVertexShaderEXT(_context, id);
}

static void REGAL_CALL trace_glDisableVariantClientStateEXT(RegalContext *_context, GLuint id)
{
  Internal("trace_glDisableVariantClientStateEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDisableVariantClientStateEXT(_context, id);
}

static void REGAL_CALL trace_glEnableVariantClientStateEXT(RegalContext *_context, GLuint id)
{
  Internal("trace_glEnableVariantClientStateEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEnableVariantClientStateEXT(_context, id);
}

static void REGAL_CALL trace_glEndVertexShaderEXT(RegalContext *_context)
{
  Internal("trace_glEndVertexShaderEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndVertexShaderEXT(_context);
}

static void REGAL_CALL trace_glExtractComponentEXT(RegalContext *_context, GLuint res, GLuint src, GLuint num)
{
  Internal("trace_glExtractComponentEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glExtractComponentEXT(_context, res, src, num);
}

static GLuint REGAL_CALL trace_glGenSymbolsEXT(RegalContext *_context, GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
  Internal("trace_glGenSymbolsEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGenSymbolsEXT(_context, datatype, storagetype, range, components);
  return ret;
}

static GLuint REGAL_CALL trace_glGenVertexShadersEXT(RegalContext *_context, GLuint range)
{
  Internal("trace_glGenVertexShadersEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGenVertexShadersEXT(_context, range);
  return ret;
}

static void REGAL_CALL trace_glGetInvariantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data)
{
  Internal("trace_glGetInvariantBooleanvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetInvariantBooleanvEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetInvariantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data)
{
  Internal("trace_glGetInvariantFloatvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetInvariantFloatvEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetInvariantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data)
{
  Internal("trace_glGetInvariantIntegervEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetInvariantIntegervEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetLocalConstantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data)
{
  Internal("trace_glGetLocalConstantBooleanvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetLocalConstantBooleanvEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetLocalConstantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data)
{
  Internal("trace_glGetLocalConstantFloatvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetLocalConstantFloatvEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetLocalConstantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data)
{
  Internal("trace_glGetLocalConstantIntegervEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetLocalConstantIntegervEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetVariantBooleanvEXT(RegalContext *_context, GLuint id, GLenum value, GLboolean *data)
{
  Internal("trace_glGetVariantBooleanvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVariantBooleanvEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetVariantFloatvEXT(RegalContext *_context, GLuint id, GLenum value, GLfloat *data)
{
  Internal("trace_glGetVariantFloatvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVariantFloatvEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetVariantIntegervEXT(RegalContext *_context, GLuint id, GLenum value, GLint *data)
{
  Internal("trace_glGetVariantIntegervEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVariantIntegervEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glGetVariantPointervEXT(RegalContext *_context, GLuint id, GLenum value, GLvoid **data)
{
  Internal("trace_glGetVariantPointervEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVariantPointervEXT(_context, id, value, data);
}

static void REGAL_CALL trace_glInsertComponentEXT(RegalContext *_context, GLuint res, GLuint src, GLuint num)
{
  Internal("trace_glInsertComponentEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInsertComponentEXT(_context, res, src, num);
}

static GLboolean REGAL_CALL trace_glIsVariantEnabledEXT(RegalContext *_context, GLuint id, GLenum cap)
{
  Internal("trace_glIsVariantEnabledEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsVariantEnabledEXT(_context, id, cap);
  return ret;
}

static void REGAL_CALL trace_glSetInvariantEXT(RegalContext *_context, GLuint id, GLenum type, const GLvoid *addr)
{
  Internal("trace_glSetInvariantEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSetInvariantEXT(_context, id, type, addr);
}

static void REGAL_CALL trace_glSetLocalConstantEXT(RegalContext *_context, GLuint id, GLenum type, const GLvoid *addr)
{
  Internal("trace_glSetLocalConstantEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSetLocalConstantEXT(_context, id, type, addr);
}

static void REGAL_CALL trace_glShaderOp1EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1)
{
  Internal("trace_glShaderOp1EXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glShaderOp1EXT(_context, op, res, arg1);
}

static void REGAL_CALL trace_glShaderOp2EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
  Internal("trace_glShaderOp2EXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glShaderOp2EXT(_context, op, res, arg1, arg2);
}

static void REGAL_CALL trace_glShaderOp3EXT(RegalContext *_context, GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
  Internal("trace_glShaderOp3EXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glShaderOp3EXT(_context, op, res, arg1, arg2, arg3);
}

static void REGAL_CALL trace_glSwizzleEXT(RegalContext *_context, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  Internal("trace_glSwizzleEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSwizzleEXT(_context, res, in, outX, outY, outZ, outW);
}

static void REGAL_CALL trace_glVariantPointerEXT(RegalContext *_context, GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
  Internal("trace_glVariantPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantPointerEXT(_context, id, type, stride, addr);
}

static void REGAL_CALL trace_glVariantbvEXT(RegalContext *_context, GLuint id, const GLbyte *addr)
{
  Internal("trace_glVariantbvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantbvEXT(_context, id, addr);
}

static void REGAL_CALL trace_glVariantdvEXT(RegalContext *_context, GLuint id, const GLdouble *addr)
{
  Internal("trace_glVariantdvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantdvEXT(_context, id, addr);
}

static void REGAL_CALL trace_glVariantfvEXT(RegalContext *_context, GLuint id, const GLfloat *addr)
{
  Internal("trace_glVariantfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantfvEXT(_context, id, addr);
}

static void REGAL_CALL trace_glVariantivEXT(RegalContext *_context, GLuint id, const GLint *addr)
{
  Internal("trace_glVariantivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantivEXT(_context, id, addr);
}

static void REGAL_CALL trace_glVariantsvEXT(RegalContext *_context, GLuint id, const GLshort *addr)
{
  Internal("trace_glVariantsvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantsvEXT(_context, id, addr);
}

static void REGAL_CALL trace_glVariantubvEXT(RegalContext *_context, GLuint id, const GLubyte *addr)
{
  Internal("trace_glVariantubvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantubvEXT(_context, id, addr);
}

static void REGAL_CALL trace_glVariantuivEXT(RegalContext *_context, GLuint id, const GLuint *addr)
{
  Internal("trace_glVariantuivEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantuivEXT(_context, id, addr);
}

static void REGAL_CALL trace_glVariantusvEXT(RegalContext *_context, GLuint id, const GLushort *addr)
{
  Internal("trace_glVariantusvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVariantusvEXT(_context, id, addr);
}

static void REGAL_CALL trace_glWriteMaskEXT(RegalContext *_context, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  Internal("trace_glWriteMaskEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWriteMaskEXT(_context, res, in, outX, outY, outZ, outW);
}

// GL_EXT_vertex_weighting

static void REGAL_CALL trace_glVertexWeightPointerEXT(RegalContext *_context, GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexWeightPointerEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexWeightPointerEXT(_context, size, type, stride, pointer);
}

static void REGAL_CALL trace_glVertexWeightfEXT(RegalContext *_context, GLfloat weight)
{
  Internal("trace_glVertexWeightfEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexWeightfEXT(_context, weight);
}

static void REGAL_CALL trace_glVertexWeightfvEXT(RegalContext *_context, const GLfloat *weight)
{
  Internal("trace_glVertexWeightfvEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexWeightfvEXT(_context, weight);
}

// GL_EXT_x11_sync_object

static GLsync REGAL_CALL trace_glImportSyncEXT(RegalContext *_context, GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
  Internal("trace_glImportSyncEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLsync  ret = Trace::glImportSyncEXT(_context, external_sync_type, external_sync, flags);
  return ret;
}

// GL_GREMEDY_frame_terminator

static void REGAL_CALL trace_glFrameTerminatorGREMEDY(RegalContext *_context)
{
  Internal("trace_glFrameTerminatorGREMEDY","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFrameTerminatorGREMEDY(_context);
}

// GL_GREMEDY_string_marker

static void REGAL_CALL trace_glStringMarkerGREMEDY(RegalContext *_context, GLsizei len, const GLvoid *string)
{
  Internal("trace_glStringMarkerGREMEDY","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStringMarkerGREMEDY(_context, len, string);
}

// GL_HP_image_transform

static void REGAL_CALL trace_glGetImageTransformParameterfvHP(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetImageTransformParameterfvHP","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetImageTransformParameterfvHP(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetImageTransformParameterivHP(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetImageTransformParameterivHP","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetImageTransformParameterivHP(_context, target, pname, params);
}

static void REGAL_CALL trace_glImageTransformParameterfHP(RegalContext *_context, GLenum target, GLenum pname, GLfloat param)
{
  Internal("trace_glImageTransformParameterfHP","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glImageTransformParameterfHP(_context, target, pname, param);
}

static void REGAL_CALL trace_glImageTransformParameterfvHP(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glImageTransformParameterfvHP","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glImageTransformParameterfvHP(_context, target, pname, params);
}

static void REGAL_CALL trace_glImageTransformParameteriHP(RegalContext *_context, GLenum target, GLenum pname, GLint param)
{
  Internal("trace_glImageTransformParameteriHP","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glImageTransformParameteriHP(_context, target, pname, param);
}

static void REGAL_CALL trace_glImageTransformParameterivHP(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glImageTransformParameterivHP","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glImageTransformParameterivHP(_context, target, pname, params);
}

// GL_IBM_multimode_draw_arrays

static void REGAL_CALL trace_glMultiModeDrawArraysIBM(RegalContext *_context, const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
  Internal("trace_glMultiModeDrawArraysIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiModeDrawArraysIBM(_context, mode, first, count, primcount, modestride);
}

static void REGAL_CALL trace_glMultiModeDrawElementsIBM(RegalContext *_context, const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
  Internal("trace_glMultiModeDrawElementsIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiModeDrawElementsIBM(_context, mode, count, type, indices, primcount, modestride);
}

// GL_IBM_vertex_array_lists

static void REGAL_CALL trace_glColorPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("trace_glColorPointerListIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorPointerListIBM(_context, size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL trace_glEdgeFlagPointerListIBM(RegalContext *_context, GLint stride, const GLboolean **pointer, GLint ptrstride)
{
  Internal("trace_glEdgeFlagPointerListIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEdgeFlagPointerListIBM(_context, stride, pointer, ptrstride);
}

static void REGAL_CALL trace_glFogCoordPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("trace_glFogCoordPointerListIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordPointerListIBM(_context, type, stride, pointer, ptrstride);
}

static void REGAL_CALL trace_glIndexPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("trace_glIndexPointerListIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexPointerListIBM(_context, type, stride, pointer, ptrstride);
}

static void REGAL_CALL trace_glNormalPointerListIBM(RegalContext *_context, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("trace_glNormalPointerListIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalPointerListIBM(_context, type, stride, pointer, ptrstride);
}

static void REGAL_CALL trace_glSecondaryColorPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("trace_glSecondaryColorPointerListIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColorPointerListIBM(_context, size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL trace_glTexCoordPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("trace_glTexCoordPointerListIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordPointerListIBM(_context, size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL trace_glVertexPointerListIBM(RegalContext *_context, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  Internal("trace_glVertexPointerListIBM","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexPointerListIBM(_context, size, type, stride, pointer, ptrstride);
}

// GL_IMG_multisampled_render_to_texture

static void REGAL_CALL trace_glFramebufferTexture2DMultisampleIMG(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  Internal("trace_glFramebufferTexture2DMultisampleIMG","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture2DMultisampleIMG(_context, target, attachment, textarget, texture, level, samples);
}

static void REGAL_CALL trace_glRenderbufferStorageMultisampleIMG(RegalContext *_context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorageMultisampleIMG","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorageMultisampleIMG(_context, target, samples, internalformat, width, height);
}

// GL_INGR_blend_func_separate

static void REGAL_CALL trace_glBlendFuncSeparateINGR(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("trace_glBlendFuncSeparateINGR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFuncSeparateINGR(_context, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_INTEL_parallel_arrays

static void REGAL_CALL trace_glColorPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer)
{
  Internal("trace_glColorPointervINTEL","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorPointervINTEL(_context, size, type, pointer);
}

static void REGAL_CALL trace_glNormalPointervINTEL(RegalContext *_context, GLenum type, const GLvoid **pointer)
{
  Internal("trace_glNormalPointervINTEL","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalPointervINTEL(_context, type, pointer);
}

static void REGAL_CALL trace_glTexCoordPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer)
{
  Internal("trace_glTexCoordPointervINTEL","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordPointervINTEL(_context, size, type, pointer);
}

static void REGAL_CALL trace_glVertexPointervINTEL(RegalContext *_context, GLint size, GLenum type, const GLvoid **pointer)
{
  Internal("trace_glVertexPointervINTEL","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexPointervINTEL(_context, size, type, pointer);
}

// GL_KHR_debug

static void REGAL_CALL trace_glDebugMessageCallback(RegalContext *_context, GLDEBUGPROC callback, const GLvoid *userParam)
{
  Internal("trace_glDebugMessageCallback","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageCallback(_context, callback, userParam);
}

static void REGAL_CALL trace_glDebugMessageControl(RegalContext *_context, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  Internal("trace_glDebugMessageControl","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageControl(_context, source, type, severity, count, ids, enabled);
}

static void REGAL_CALL trace_glDebugMessageInsert(RegalContext *_context, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  Internal("trace_glDebugMessageInsert","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDebugMessageInsert(_context, source, type, id, severity, length, buf);
}

static GLuint REGAL_CALL trace_glGetDebugMessageLog(RegalContext *_context, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  Internal("trace_glGetDebugMessageLog","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGetDebugMessageLog(_context, count, bufsize, sources, types, ids, severities, lengths, messageLog);
  return ret;
}

static void REGAL_CALL trace_glGetObjectLabel(RegalContext *_context, GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Internal("trace_glGetObjectLabel","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetObjectLabel(_context, identifier, name, bufSize, length, label);
}

static void REGAL_CALL trace_glGetObjectPtrLabel(RegalContext *_context, const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  Internal("trace_glGetObjectPtrLabel","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetObjectPtrLabel(_context, ptr, bufSize, length, label);
}

static void REGAL_CALL trace_glObjectLabel(RegalContext *_context, GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
  Internal("trace_glObjectLabel","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glObjectLabel(_context, identifier, name, length, label);
}

static void REGAL_CALL trace_glObjectPtrLabel(RegalContext *_context, const GLvoid *ptr, GLsizei length, const GLchar *label)
{
  Internal("trace_glObjectPtrLabel","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glObjectPtrLabel(_context, ptr, length, label);
}

static void REGAL_CALL trace_glPopDebugGroup(RegalContext *_context)
{
  Internal("trace_glPopDebugGroup","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPopDebugGroup(_context);
}

static void REGAL_CALL trace_glPushDebugGroup(RegalContext *_context, GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
  Internal("trace_glPushDebugGroup","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPushDebugGroup(_context, source, id, length, message);
}

// GL_KTX_buffer_region

static GLuint REGAL_CALL trace_glBufferRegionEnabled(RegalContext *_context)
{
  Internal("trace_glBufferRegionEnabled","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glBufferRegionEnabled(_context);
  return ret;
}

static void REGAL_CALL trace_glDeleteBufferRegion(RegalContext *_context, GLenum region)
{
  Internal("trace_glDeleteBufferRegion","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteBufferRegion(_context, region);
}

static void REGAL_CALL trace_glDrawBufferRegion(RegalContext *_context, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
  Internal("trace_glDrawBufferRegion","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawBufferRegion(_context, region, x, y, width, height, xDest, yDest);
}

static GLuint REGAL_CALL trace_glNewBufferRegion(RegalContext *_context, GLenum region)
{
  Internal("trace_glNewBufferRegion","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glNewBufferRegion(_context, region);
  return ret;
}

static void REGAL_CALL trace_glReadBufferRegion(RegalContext *_context, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glReadBufferRegion","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReadBufferRegion(_context, region, x, y, width, height);
}

// GL_MESA_resize_buffers

static void REGAL_CALL trace_glResizeBuffersMESA(RegalContext *_context)
{
  Internal("trace_glResizeBuffersMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glResizeBuffersMESA(_context);
}

// GL_MESA_window_pos

static void REGAL_CALL trace_glWindowPos2dMESA(RegalContext *_context, GLdouble x, GLdouble y)
{
  Internal("trace_glWindowPos2dMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2dMESA(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2dvMESA(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glWindowPos2dvMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2dvMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos2fMESA(RegalContext *_context, GLfloat x, GLfloat y)
{
  Internal("trace_glWindowPos2fMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2fMESA(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2fvMESA(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glWindowPos2fvMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2fvMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos2iMESA(RegalContext *_context, GLint x, GLint y)
{
  Internal("trace_glWindowPos2iMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2iMESA(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2ivMESA(RegalContext *_context, const GLint *v)
{
  Internal("trace_glWindowPos2ivMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2ivMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos2sMESA(RegalContext *_context, GLshort x, GLshort y)
{
  Internal("trace_glWindowPos2sMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2sMESA(_context, x, y);
}

static void REGAL_CALL trace_glWindowPos2svMESA(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glWindowPos2svMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos2svMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos3dMESA(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glWindowPos3dMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3dMESA(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3dvMESA(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glWindowPos3dvMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3dvMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos3fMESA(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glWindowPos3fMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3fMESA(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3fvMESA(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glWindowPos3fvMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3fvMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos3iMESA(RegalContext *_context, GLint x, GLint y, GLint z)
{
  Internal("trace_glWindowPos3iMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3iMESA(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3ivMESA(RegalContext *_context, const GLint *v)
{
  Internal("trace_glWindowPos3ivMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3ivMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos3sMESA(RegalContext *_context, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glWindowPos3sMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3sMESA(_context, x, y, z);
}

static void REGAL_CALL trace_glWindowPos3svMESA(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glWindowPos3svMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos3svMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos4dMESA(RegalContext *_context, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glWindowPos4dMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos4dMESA(_context, x, y, z, w);
}

static void REGAL_CALL trace_glWindowPos4dvMESA(RegalContext *_context, const GLdouble *v)
{
  Internal("trace_glWindowPos4dvMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos4dvMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos4fMESA(RegalContext *_context, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glWindowPos4fMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos4fMESA(_context, x, y, z, w);
}

static void REGAL_CALL trace_glWindowPos4fvMESA(RegalContext *_context, const GLfloat *v)
{
  Internal("trace_glWindowPos4fvMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos4fvMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos4iMESA(RegalContext *_context, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glWindowPos4iMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos4iMESA(_context, x, y, z, w);
}

static void REGAL_CALL trace_glWindowPos4ivMESA(RegalContext *_context, const GLint *v)
{
  Internal("trace_glWindowPos4ivMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos4ivMESA(_context, v);
}

static void REGAL_CALL trace_glWindowPos4sMESA(RegalContext *_context, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("trace_glWindowPos4sMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos4sMESA(_context, x, y, z, w);
}

static void REGAL_CALL trace_glWindowPos4svMESA(RegalContext *_context, const GLshort *v)
{
  Internal("trace_glWindowPos4svMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWindowPos4svMESA(_context, v);
}

// GL_NV_conditional_render

static void REGAL_CALL trace_glBeginConditionalRenderNV(RegalContext *_context, GLuint id, GLenum mode)
{
  Internal("trace_glBeginConditionalRenderNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginConditionalRenderNV(_context, id, mode);
}

static void REGAL_CALL trace_glEndConditionalRenderNV(RegalContext *_context)
{
  Internal("trace_glEndConditionalRenderNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndConditionalRenderNV(_context);
}

// GL_NV_copy_image

static void REGAL_CALL trace_glCopyImageSubDataNV(RegalContext *_context, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("trace_glCopyImageSubDataNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyImageSubDataNV(_context, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

// GL_NV_coverage_sample

static void REGAL_CALL trace_glCoverageMaskNV(RegalContext *_context, GLboolean mask)
{
  Internal("trace_glCoverageMaskNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCoverageMaskNV(_context, mask);
}

static void REGAL_CALL trace_glCoverageOperationNV(RegalContext *_context, GLenum operation)
{
  Internal("trace_glCoverageOperationNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCoverageOperationNV(_context, operation);
}

// GL_NV_depth_buffer_float

static void REGAL_CALL trace_glClearDepthdNV(RegalContext *_context, GLdouble depth)
{
  Internal("trace_glClearDepthdNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearDepthdNV(_context, depth);
}

static void REGAL_CALL trace_glDepthBoundsdNV(RegalContext *_context, GLdouble zmin, GLdouble zmax)
{
  Internal("trace_glDepthBoundsdNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthBoundsdNV(_context, zmin, zmax);
}

static void REGAL_CALL trace_glDepthRangedNV(RegalContext *_context, GLdouble zNear, GLdouble zFar)
{
  Internal("trace_glDepthRangedNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthRangedNV(_context, zNear, zFar);
}

// GL_NV_draw_buffers

static void REGAL_CALL trace_glDrawBuffersNV(RegalContext *_context, GLsizei n, const GLenum *bufs)
{
  Internal("trace_glDrawBuffersNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawBuffersNV(_context, n, bufs);
}

// GL_NV_evaluators

static void REGAL_CALL trace_glEvalMapsNV(RegalContext *_context, GLenum target, GLenum mode)
{
  Internal("trace_glEvalMapsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEvalMapsNV(_context, target, mode);
}

static void REGAL_CALL trace_glGetMapAttribParameterfvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMapAttribParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMapAttribParameterfvNV(_context, target, index, pname, params);
}

static void REGAL_CALL trace_glGetMapAttribParameterivNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLint *params)
{
  Internal("trace_glGetMapAttribParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMapAttribParameterivNV(_context, target, index, pname, params);
}

static void REGAL_CALL trace_glGetMapControlPointsNV(RegalContext *_context, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
  Internal("trace_glGetMapControlPointsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMapControlPointsNV(_context, target, index, type, ustride, vstride, packed, points);
}

static void REGAL_CALL trace_glGetMapParameterfvNV(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetMapParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMapParameterfvNV(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetMapParameterivNV(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetMapParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMapParameterivNV(_context, target, pname, params);
}

static void REGAL_CALL trace_glMapControlPointsNV(RegalContext *_context, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
  Internal("trace_glMapControlPointsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapControlPointsNV(_context, target, index, type, ustride, vstride, uorder, vorder, packed, points);
}

static void REGAL_CALL trace_glMapParameterfvNV(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glMapParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapParameterfvNV(_context, target, pname, params);
}

static void REGAL_CALL trace_glMapParameterivNV(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glMapParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMapParameterivNV(_context, target, pname, params);
}

// GL_NV_explicit_multisample

static void REGAL_CALL trace_glGetMultisamplefvNV(RegalContext *_context, GLenum pname, GLuint index, GLfloat *val)
{
  Internal("trace_glGetMultisamplefvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMultisamplefvNV(_context, pname, index, val);
}

static void REGAL_CALL trace_glSampleMaskIndexedNV(RegalContext *_context, GLuint index, GLbitfield mask)
{
  Internal("trace_glSampleMaskIndexedNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSampleMaskIndexedNV(_context, index, mask);
}

static void REGAL_CALL trace_glTexRenderbufferNV(RegalContext *_context, GLenum target, GLuint renderbuffer)
{
  Internal("trace_glTexRenderbufferNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexRenderbufferNV(_context, target, renderbuffer);
}

// GL_NV_fence

static void REGAL_CALL trace_glDeleteFencesNV(RegalContext *_context, GLsizei n, const GLuint *fences)
{
  Internal("trace_glDeleteFencesNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteFencesNV(_context, n, fences);
}

static void REGAL_CALL trace_glFinishFenceNV(RegalContext *_context, GLuint fence)
{
  Internal("trace_glFinishFenceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFinishFenceNV(_context, fence);
}

static void REGAL_CALL trace_glGenFencesNV(RegalContext *_context, GLsizei n, GLuint *fences)
{
  Internal("trace_glGenFencesNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenFencesNV(_context, n, fences);
}

static void REGAL_CALL trace_glGetFenceivNV(RegalContext *_context, GLuint fence, GLenum pname, GLint *params)
{
  Internal("trace_glGetFenceivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFenceivNV(_context, fence, pname, params);
}

static GLboolean REGAL_CALL trace_glIsFenceNV(RegalContext *_context, GLuint fence)
{
  Internal("trace_glIsFenceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsFenceNV(_context, fence);
  return ret;
}

static void REGAL_CALL trace_glSetFenceNV(RegalContext *_context, GLuint fence, GLenum condition)
{
  Internal("trace_glSetFenceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSetFenceNV(_context, fence, condition);
}

static GLboolean REGAL_CALL trace_glTestFenceNV(RegalContext *_context, GLuint fence)
{
  Internal("trace_glTestFenceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glTestFenceNV(_context, fence);
  return ret;
}

// GL_NV_fragment_program

static void REGAL_CALL trace_glGetProgramNamedParameterdvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
  Internal("trace_glGetProgramNamedParameterdvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramNamedParameterdvNV(_context, id, len, name, params);
}

static void REGAL_CALL trace_glGetProgramNamedParameterfvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
  Internal("trace_glGetProgramNamedParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramNamedParameterfvNV(_context, id, len, name, params);
}

static void REGAL_CALL trace_glProgramNamedParameter4dNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glProgramNamedParameter4dNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramNamedParameter4dNV(_context, id, len, name, x, y, z, w);
}

static void REGAL_CALL trace_glProgramNamedParameter4dvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
  Internal("trace_glProgramNamedParameter4dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramNamedParameter4dvNV(_context, id, len, name, v);
}

static void REGAL_CALL trace_glProgramNamedParameter4fNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glProgramNamedParameter4fNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramNamedParameter4fNV(_context, id, len, name, x, y, z, w);
}

static void REGAL_CALL trace_glProgramNamedParameter4fvNV(RegalContext *_context, GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
  Internal("trace_glProgramNamedParameter4fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramNamedParameter4fvNV(_context, id, len, name, v);
}

// GL_NV_framebuffer_multisample_coverage

static void REGAL_CALL trace_glRenderbufferStorageMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorageMultisampleCoverageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorageMultisampleCoverageNV(_context, target, coverageSamples, colorSamples, internalformat, width, height);
}

// GL_NV_geometry_program4

static void REGAL_CALL trace_glProgramVertexLimitNV(RegalContext *_context, GLenum target, GLint limit)
{
  Internal("trace_glProgramVertexLimitNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramVertexLimitNV(_context, target, limit);
}

// GL_NV_gpu_program4

static void REGAL_CALL trace_glGetProgramEnvParameterIivNV(RegalContext *_context, GLenum target, GLuint index, GLint *params)
{
  Internal("trace_glGetProgramEnvParameterIivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramEnvParameterIivNV(_context, target, index, params);
}

static void REGAL_CALL trace_glGetProgramEnvParameterIuivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params)
{
  Internal("trace_glGetProgramEnvParameterIuivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramEnvParameterIuivNV(_context, target, index, params);
}

static void REGAL_CALL trace_glGetProgramLocalParameterIivNV(RegalContext *_context, GLenum target, GLuint index, GLint *params)
{
  Internal("trace_glGetProgramLocalParameterIivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramLocalParameterIivNV(_context, target, index, params);
}

static void REGAL_CALL trace_glGetProgramLocalParameterIuivNV(RegalContext *_context, GLenum target, GLuint index, GLuint *params)
{
  Internal("trace_glGetProgramLocalParameterIuivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramLocalParameterIuivNV(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramEnvParameterI4iNV(RegalContext *_context, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glProgramEnvParameterI4iNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameterI4iNV(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramEnvParameterI4ivNV(RegalContext *_context, GLenum target, GLuint index, const GLint *params)
{
  Internal("trace_glProgramEnvParameterI4ivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameterI4ivNV(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramEnvParameterI4uiNV(RegalContext *_context, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("trace_glProgramEnvParameterI4uiNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameterI4uiNV(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramEnvParameterI4uivNV(RegalContext *_context, GLenum target, GLuint index, const GLuint *params)
{
  Internal("trace_glProgramEnvParameterI4uivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParameterI4uivNV(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramEnvParametersI4ivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Internal("trace_glProgramEnvParametersI4ivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParametersI4ivNV(_context, target, index, count, params);
}

static void REGAL_CALL trace_glProgramEnvParametersI4uivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Internal("trace_glProgramEnvParametersI4uivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramEnvParametersI4uivNV(_context, target, index, count, params);
}

static void REGAL_CALL trace_glProgramLocalParameterI4iNV(RegalContext *_context, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  Internal("trace_glProgramLocalParameterI4iNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameterI4iNV(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramLocalParameterI4ivNV(RegalContext *_context, GLenum target, GLuint index, const GLint *params)
{
  Internal("trace_glProgramLocalParameterI4ivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameterI4ivNV(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramLocalParameterI4uiNV(RegalContext *_context, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  Internal("trace_glProgramLocalParameterI4uiNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameterI4uiNV(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramLocalParameterI4uivNV(RegalContext *_context, GLenum target, GLuint index, const GLuint *params)
{
  Internal("trace_glProgramLocalParameterI4uivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParameterI4uivNV(_context, target, index, params);
}

static void REGAL_CALL trace_glProgramLocalParametersI4ivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  Internal("trace_glProgramLocalParametersI4ivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParametersI4ivNV(_context, target, index, count, params);
}

static void REGAL_CALL trace_glProgramLocalParametersI4uivNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  Internal("trace_glProgramLocalParametersI4uivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramLocalParametersI4uivNV(_context, target, index, count, params);
}

// GL_NV_gpu_shader5

static void REGAL_CALL trace_glGetUniformi64vNV(RegalContext *_context, GLuint program, GLint location, GLint64EXT *params)
{
  Internal("trace_glGetUniformi64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformi64vNV(_context, program, location, params);
}

static void REGAL_CALL trace_glProgramUniform1i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x)
{
  Internal("trace_glProgramUniform1i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1i64NV(_context, program, location, x);
}

static void REGAL_CALL trace_glProgramUniform1i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("trace_glProgramUniform1i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1i64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform1ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x)
{
  Internal("trace_glProgramUniform1ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1ui64NV(_context, program, location, x);
}

static void REGAL_CALL trace_glProgramUniform1ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glProgramUniform1ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform1ui64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
  Internal("trace_glProgramUniform2i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2i64NV(_context, program, location, x, y);
}

static void REGAL_CALL trace_glProgramUniform2i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("trace_glProgramUniform2i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2i64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform2ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  Internal("trace_glProgramUniform2ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2ui64NV(_context, program, location, x, y);
}

static void REGAL_CALL trace_glProgramUniform2ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glProgramUniform2ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform2ui64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Internal("trace_glProgramUniform3i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3i64NV(_context, program, location, x, y, z);
}

static void REGAL_CALL trace_glProgramUniform3i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("trace_glProgramUniform3i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3i64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform3ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Internal("trace_glProgramUniform3ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3ui64NV(_context, program, location, x, y, z);
}

static void REGAL_CALL trace_glProgramUniform3ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glProgramUniform3ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform3ui64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4i64NV(RegalContext *_context, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Internal("trace_glProgramUniform4i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4i64NV(_context, program, location, x, y, z, w);
}

static void REGAL_CALL trace_glProgramUniform4i64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("trace_glProgramUniform4i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4i64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glProgramUniform4ui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Internal("trace_glProgramUniform4ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4ui64NV(_context, program, location, x, y, z, w);
}

static void REGAL_CALL trace_glProgramUniform4ui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glProgramUniform4ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniform4ui64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glUniform1i64NV(RegalContext *_context, GLint location, GLint64EXT x)
{
  Internal("trace_glUniform1i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1i64NV(_context, location, x);
}

static void REGAL_CALL trace_glUniform1i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("trace_glUniform1i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1i64vNV(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform1ui64NV(RegalContext *_context, GLint location, GLuint64EXT x)
{
  Internal("trace_glUniform1ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1ui64NV(_context, location, x);
}

static void REGAL_CALL trace_glUniform1ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glUniform1ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform1ui64vNV(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y)
{
  Internal("trace_glUniform2i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2i64NV(_context, location, x, y);
}

static void REGAL_CALL trace_glUniform2i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("trace_glUniform2i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2i64vNV(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform2ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  Internal("trace_glUniform2ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2ui64NV(_context, location, x, y);
}

static void REGAL_CALL trace_glUniform2ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glUniform2ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform2ui64vNV(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Internal("trace_glUniform3i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3i64NV(_context, location, x, y, z);
}

static void REGAL_CALL trace_glUniform3i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("trace_glUniform3i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3i64vNV(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform3ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Internal("trace_glUniform3ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3ui64NV(_context, location, x, y, z);
}

static void REGAL_CALL trace_glUniform3ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glUniform3ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform3ui64vNV(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4i64NV(RegalContext *_context, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Internal("trace_glUniform4i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4i64NV(_context, location, x, y, z, w);
}

static void REGAL_CALL trace_glUniform4i64vNV(RegalContext *_context, GLint location, GLsizei count, const GLint64EXT *value)
{
  Internal("trace_glUniform4i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4i64vNV(_context, location, count, value);
}

static void REGAL_CALL trace_glUniform4ui64NV(RegalContext *_context, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Internal("trace_glUniform4ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4ui64NV(_context, location, x, y, z, w);
}

static void REGAL_CALL trace_glUniform4ui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glUniform4ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniform4ui64vNV(_context, location, count, value);
}

// GL_NV_half_float

static void REGAL_CALL trace_glColor3hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  Internal("trace_glColor3hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3hNV(_context, red, green, blue);
}

static void REGAL_CALL trace_glColor3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glColor3hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3hvNV(_context, v);
}

static void REGAL_CALL trace_glColor4hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
  Internal("trace_glColor4hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4hNV(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glColor4hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glColor4hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4hvNV(_context, v);
}

static void REGAL_CALL trace_glFogCoordhNV(RegalContext *_context, GLhalfNV coord)
{
  Internal("trace_glFogCoordhNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordhNV(_context, coord);
}

static void REGAL_CALL trace_glFogCoordhvNV(RegalContext *_context, const GLhalfNV *coord)
{
  Internal("trace_glFogCoordhvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordhvNV(_context, coord);
}

static void REGAL_CALL trace_glMultiTexCoord1hNV(RegalContext *_context, GLenum target, GLhalfNV s)
{
  Internal("trace_glMultiTexCoord1hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1hNV(_context, target, s);
}

static void REGAL_CALL trace_glMultiTexCoord1hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v)
{
  Internal("trace_glMultiTexCoord1hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord1hvNV(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord2hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t)
{
  Internal("trace_glMultiTexCoord2hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2hNV(_context, target, s, t);
}

static void REGAL_CALL trace_glMultiTexCoord2hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v)
{
  Internal("trace_glMultiTexCoord2hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord2hvNV(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord3hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  Internal("trace_glMultiTexCoord3hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3hNV(_context, target, s, t, r);
}

static void REGAL_CALL trace_glMultiTexCoord3hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v)
{
  Internal("trace_glMultiTexCoord3hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord3hvNV(_context, target, v);
}

static void REGAL_CALL trace_glMultiTexCoord4hNV(RegalContext *_context, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  Internal("trace_glMultiTexCoord4hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4hNV(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glMultiTexCoord4hvNV(RegalContext *_context, GLenum target, const GLhalfNV *v)
{
  Internal("trace_glMultiTexCoord4hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4hvNV(_context, target, v);
}

static void REGAL_CALL trace_glNormal3hNV(RegalContext *_context, GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
  Internal("trace_glNormal3hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3hNV(_context, nx, ny, nz);
}

static void REGAL_CALL trace_glNormal3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glNormal3hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3hvNV(_context, v);
}

static void REGAL_CALL trace_glSecondaryColor3hNV(RegalContext *_context, GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  Internal("trace_glSecondaryColor3hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3hNV(_context, red, green, blue);
}

static void REGAL_CALL trace_glSecondaryColor3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glSecondaryColor3hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColor3hvNV(_context, v);
}

static void REGAL_CALL trace_glTexCoord1hNV(RegalContext *_context, GLhalfNV s)
{
  Internal("trace_glTexCoord1hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1hNV(_context, s);
}

static void REGAL_CALL trace_glTexCoord1hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glTexCoord1hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord1hvNV(_context, v);
}

static void REGAL_CALL trace_glTexCoord2hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t)
{
  Internal("trace_glTexCoord2hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2hNV(_context, s, t);
}

static void REGAL_CALL trace_glTexCoord2hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glTexCoord2hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2hvNV(_context, v);
}

static void REGAL_CALL trace_glTexCoord3hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  Internal("trace_glTexCoord3hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3hNV(_context, s, t, r);
}

static void REGAL_CALL trace_glTexCoord3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glTexCoord3hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord3hvNV(_context, v);
}

static void REGAL_CALL trace_glTexCoord4hNV(RegalContext *_context, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  Internal("trace_glTexCoord4hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4hNV(_context, s, t, r, q);
}

static void REGAL_CALL trace_glTexCoord4hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glTexCoord4hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4hvNV(_context, v);
}

static void REGAL_CALL trace_glVertex2hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y)
{
  Internal("trace_glVertex2hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2hNV(_context, x, y);
}

static void REGAL_CALL trace_glVertex2hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glVertex2hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex2hvNV(_context, v);
}

static void REGAL_CALL trace_glVertex3hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  Internal("trace_glVertex3hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3hNV(_context, x, y, z);
}

static void REGAL_CALL trace_glVertex3hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glVertex3hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex3hvNV(_context, v);
}

static void REGAL_CALL trace_glVertex4hNV(RegalContext *_context, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  Internal("trace_glVertex4hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4hNV(_context, x, y, z, w);
}

static void REGAL_CALL trace_glVertex4hvNV(RegalContext *_context, const GLhalfNV *v)
{
  Internal("trace_glVertex4hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertex4hvNV(_context, v);
}

static void REGAL_CALL trace_glVertexAttrib1hNV(RegalContext *_context, GLuint index, GLhalfNV x)
{
  Internal("trace_glVertexAttrib1hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1hNV(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v)
{
  Internal("trace_glVertexAttrib1hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1hvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y)
{
  Internal("trace_glVertexAttrib2hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2hNV(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v)
{
  Internal("trace_glVertexAttrib2hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2hvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  Internal("trace_glVertexAttrib3hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3hNV(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v)
{
  Internal("trace_glVertexAttrib3hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3hvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4hNV(RegalContext *_context, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  Internal("trace_glVertexAttrib4hNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4hNV(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4hvNV(RegalContext *_context, GLuint index, const GLhalfNV *v)
{
  Internal("trace_glVertexAttrib4hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4hvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribs1hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Internal("trace_glVertexAttribs1hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs1hvNV(_context, index, count, v);
}

static void REGAL_CALL trace_glVertexAttribs2hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Internal("trace_glVertexAttribs2hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs2hvNV(_context, index, count, v);
}

static void REGAL_CALL trace_glVertexAttribs3hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Internal("trace_glVertexAttribs3hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs3hvNV(_context, index, count, v);
}

static void REGAL_CALL trace_glVertexAttribs4hvNV(RegalContext *_context, GLuint index, GLsizei count, const GLhalfNV *v)
{
  Internal("trace_glVertexAttribs4hvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs4hvNV(_context, index, count, v);
}

static void REGAL_CALL trace_glVertexWeighthNV(RegalContext *_context, GLhalfNV weight)
{
  Internal("trace_glVertexWeighthNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexWeighthNV(_context, weight);
}

static void REGAL_CALL trace_glVertexWeighthvNV(RegalContext *_context, const GLhalfNV *weight)
{
  Internal("trace_glVertexWeighthvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexWeighthvNV(_context, weight);
}

// GL_NV_occlusion_query

static void REGAL_CALL trace_glBeginOcclusionQueryNV(RegalContext *_context, GLuint id)
{
  Internal("trace_glBeginOcclusionQueryNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginOcclusionQueryNV(_context, id);
}

static void REGAL_CALL trace_glDeleteOcclusionQueriesNV(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("trace_glDeleteOcclusionQueriesNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteOcclusionQueriesNV(_context, n, ids);
}

static void REGAL_CALL trace_glEndOcclusionQueryNV(RegalContext *_context)
{
  Internal("trace_glEndOcclusionQueryNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndOcclusionQueryNV(_context);
}

static void REGAL_CALL trace_glGenOcclusionQueriesNV(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("trace_glGenOcclusionQueriesNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenOcclusionQueriesNV(_context, n, ids);
}

static void REGAL_CALL trace_glGetOcclusionQueryivNV(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("trace_glGetOcclusionQueryivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetOcclusionQueryivNV(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetOcclusionQueryuivNV(RegalContext *_context, GLuint id, GLenum pname, GLuint *params)
{
  Internal("trace_glGetOcclusionQueryuivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetOcclusionQueryuivNV(_context, id, pname, params);
}

static GLboolean REGAL_CALL trace_glIsOcclusionQueryNV(RegalContext *_context, GLuint id)
{
  Internal("trace_glIsOcclusionQueryNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsOcclusionQueryNV(_context, id);
  return ret;
}

// GL_NV_parameter_buffer_object

static void REGAL_CALL trace_glProgramBufferParametersIivNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
  Internal("trace_glProgramBufferParametersIivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramBufferParametersIivNV(_context, target, buffer, index, count, params);
}

static void REGAL_CALL trace_glProgramBufferParametersIuivNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
  Internal("trace_glProgramBufferParametersIuivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramBufferParametersIuivNV(_context, target, buffer, index, count, params);
}

static void REGAL_CALL trace_glProgramBufferParametersfvNV(RegalContext *_context, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
  Internal("trace_glProgramBufferParametersfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramBufferParametersfvNV(_context, target, buffer, index, count, params);
}

// GL_NV_path_rendering

static void REGAL_CALL trace_glCopyPathNV(RegalContext *_context, GLuint resultPath, GLuint srcPath)
{
  Internal("trace_glCopyPathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyPathNV(_context, resultPath, srcPath);
}

static void REGAL_CALL trace_glCoverFillPathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  Internal("trace_glCoverFillPathInstancedNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCoverFillPathInstancedNV(_context, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

static void REGAL_CALL trace_glCoverFillPathNV(RegalContext *_context, GLuint path, GLenum coverMode)
{
  Internal("trace_glCoverFillPathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCoverFillPathNV(_context, path, coverMode);
}

static void REGAL_CALL trace_glCoverStrokePathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  Internal("trace_glCoverStrokePathInstancedNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCoverStrokePathInstancedNV(_context, numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

static void REGAL_CALL trace_glCoverStrokePathNV(RegalContext *_context, GLuint name, GLenum coverMode)
{
  Internal("trace_glCoverStrokePathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCoverStrokePathNV(_context, name, coverMode);
}

static void REGAL_CALL trace_glDeletePathsNV(RegalContext *_context, GLuint path, GLsizei range)
{
  Internal("trace_glDeletePathsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeletePathsNV(_context, path, range);
}

static GLuint REGAL_CALL trace_glGenPathsNV(RegalContext *_context, GLsizei range)
{
  Internal("trace_glGenPathsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGenPathsNV(_context, range);
  return ret;
}

static void REGAL_CALL trace_glGetPathColorGenfvNV(RegalContext *_context, GLenum color, GLenum pname, GLfloat *value)
{
  Internal("trace_glGetPathColorGenfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathColorGenfvNV(_context, color, pname, value);
}

static void REGAL_CALL trace_glGetPathColorGenivNV(RegalContext *_context, GLenum color, GLenum pname, GLint *value)
{
  Internal("trace_glGetPathColorGenivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathColorGenivNV(_context, color, pname, value);
}

static void REGAL_CALL trace_glGetPathCommandsNV(RegalContext *_context, GLuint name, GLubyte *commands)
{
  Internal("trace_glGetPathCommandsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathCommandsNV(_context, name, commands);
}

static void REGAL_CALL trace_glGetPathCoordsNV(RegalContext *_context, GLuint name, GLfloat *coords)
{
  Internal("trace_glGetPathCoordsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathCoordsNV(_context, name, coords);
}

static void REGAL_CALL trace_glGetPathDashArrayNV(RegalContext *_context, GLuint name, GLfloat *dashArray)
{
  Internal("trace_glGetPathDashArrayNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathDashArrayNV(_context, name, dashArray);
}

static GLfloat REGAL_CALL trace_glGetPathLengthNV(RegalContext *_context, GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  Internal("trace_glGetPathLengthNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLfloat  ret = Trace::glGetPathLengthNV(_context, path, startSegment, numSegments);
  return ret;
}

static void REGAL_CALL trace_glGetPathMetricRangeNV(RegalContext *_context, GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
{
  Internal("trace_glGetPathMetricRangeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathMetricRangeNV(_context, metricQueryMask, fistPathName, numPaths, stride, metrics);
}

static void REGAL_CALL trace_glGetPathMetricsNV(RegalContext *_context, GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
  Internal("trace_glGetPathMetricsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathMetricsNV(_context, metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}

static void REGAL_CALL trace_glGetPathParameterfvNV(RegalContext *_context, GLuint name, GLenum param, GLfloat *value)
{
  Internal("trace_glGetPathParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathParameterfvNV(_context, name, param, value);
}

static void REGAL_CALL trace_glGetPathParameterivNV(RegalContext *_context, GLuint name, GLenum param, GLint *value)
{
  Internal("trace_glGetPathParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathParameterivNV(_context, name, param, value);
}

static void REGAL_CALL trace_glGetPathSpacingNV(RegalContext *_context, GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
  Internal("trace_glGetPathSpacingNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathSpacingNV(_context, pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}

static void REGAL_CALL trace_glGetPathTexGenfvNV(RegalContext *_context, GLenum texCoordSet, GLenum pname, GLfloat *value)
{
  Internal("trace_glGetPathTexGenfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathTexGenfvNV(_context, texCoordSet, pname, value);
}

static void REGAL_CALL trace_glGetPathTexGenivNV(RegalContext *_context, GLenum texCoordSet, GLenum pname, GLint *value)
{
  Internal("trace_glGetPathTexGenivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPathTexGenivNV(_context, texCoordSet, pname, value);
}

static void REGAL_CALL trace_glInterpolatePathsNV(RegalContext *_context, GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  Internal("trace_glInterpolatePathsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInterpolatePathsNV(_context, resultPath, pathA, pathB, weight);
}

static GLboolean REGAL_CALL trace_glIsPathNV(RegalContext *_context, GLuint path)
{
  Internal("trace_glIsPathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsPathNV(_context, path);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsPointInFillPathNV(RegalContext *_context, GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  Internal("trace_glIsPointInFillPathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsPointInFillPathNV(_context, path, mask, x, y);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsPointInStrokePathNV(RegalContext *_context, GLuint path, GLfloat x, GLfloat y)
{
  Internal("trace_glIsPointInStrokePathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsPointInStrokePathNV(_context, path, x, y);
  return ret;
}

static void REGAL_CALL trace_glPathColorGenNV(RegalContext *_context, GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
{
  Internal("trace_glPathColorGenNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathColorGenNV(_context, color, genMode, colorFormat, coeffs);
}

static void REGAL_CALL trace_glPathCommandsNV(RegalContext *_context, GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Internal("trace_glPathCommandsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathCommandsNV(_context, path, numCommands, commands, numCoords, coordType, coords);
}

static void REGAL_CALL trace_glPathCoordsNV(RegalContext *_context, GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Internal("trace_glPathCoordsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathCoordsNV(_context, path, numCoords, coordType, coords);
}

static void REGAL_CALL trace_glPathCoverDepthFuncNV(RegalContext *_context, GLenum zfunc)
{
  Internal("trace_glPathCoverDepthFuncNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathCoverDepthFuncNV(_context, zfunc);
}

static void REGAL_CALL trace_glPathDashArrayNV(RegalContext *_context, GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
  Internal("trace_glPathDashArrayNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathDashArrayNV(_context, path, dashCount, dashArray);
}

static void REGAL_CALL trace_glPathFogGenNV(RegalContext *_context, GLenum genMode)
{
  Internal("trace_glPathFogGenNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathFogGenNV(_context, genMode);
}

static void REGAL_CALL trace_glPathGlyphRangeNV(RegalContext *_context, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  Internal("trace_glPathGlyphRangeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathGlyphRangeNV(_context, firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}

static void REGAL_CALL trace_glPathGlyphsNV(RegalContext *_context, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  Internal("trace_glPathGlyphsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathGlyphsNV(_context, firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}

static void REGAL_CALL trace_glPathParameterfNV(RegalContext *_context, GLuint path, GLenum pname, GLfloat value)
{
  Internal("trace_glPathParameterfNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathParameterfNV(_context, path, pname, value);
}

static void REGAL_CALL trace_glPathParameterfvNV(RegalContext *_context, GLuint path, GLenum pname, const GLfloat *value)
{
  Internal("trace_glPathParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathParameterfvNV(_context, path, pname, value);
}

static void REGAL_CALL trace_glPathParameteriNV(RegalContext *_context, GLuint path, GLenum pname, GLint value)
{
  Internal("trace_glPathParameteriNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathParameteriNV(_context, path, pname, value);
}

static void REGAL_CALL trace_glPathParameterivNV(RegalContext *_context, GLuint path, GLenum pname, const GLint *value)
{
  Internal("trace_glPathParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathParameterivNV(_context, path, pname, value);
}

static void REGAL_CALL trace_glPathStencilDepthOffsetNV(RegalContext *_context, GLfloat factor, GLfloat units)
{
  Internal("trace_glPathStencilDepthOffsetNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathStencilDepthOffsetNV(_context, factor, units);
}

static void REGAL_CALL trace_glPathStencilFuncNV(RegalContext *_context, GLenum func, GLint ref, GLuint mask)
{
  Internal("trace_glPathStencilFuncNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathStencilFuncNV(_context, func, ref, mask);
}

static void REGAL_CALL trace_glPathStringNV(RegalContext *_context, GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
{
  Internal("trace_glPathStringNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathStringNV(_context, path, format, length, pathString);
}

static void REGAL_CALL trace_glPathSubCommandsNV(RegalContext *_context, GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Internal("trace_glPathSubCommandsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathSubCommandsNV(_context, path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}

static void REGAL_CALL trace_glPathSubCoordsNV(RegalContext *_context, GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  Internal("trace_glPathSubCoordsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathSubCoordsNV(_context, path, coordStart, numCoords, coordType, coords);
}

static void REGAL_CALL trace_glPathTexGenNV(RegalContext *_context, GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
{
  Internal("trace_glPathTexGenNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPathTexGenNV(_context, texCoordSet, genMode, components, coeffs);
}

static GLboolean REGAL_CALL trace_glPointAlongPathNV(RegalContext *_context, GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
  Internal("trace_glPointAlongPathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glPointAlongPathNV(_context, path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  return ret;
}

static void REGAL_CALL trace_glStencilFillPathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  Internal("trace_glStencilFillPathInstancedNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilFillPathInstancedNV(_context, numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}

static void REGAL_CALL trace_glStencilFillPathNV(RegalContext *_context, GLuint path, GLenum fillMode, GLuint mask)
{
  Internal("trace_glStencilFillPathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilFillPathNV(_context, path, fillMode, mask);
}

static void REGAL_CALL trace_glStencilStrokePathInstancedNV(RegalContext *_context, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  Internal("trace_glStencilStrokePathInstancedNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilStrokePathInstancedNV(_context, numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}

static void REGAL_CALL trace_glStencilStrokePathNV(RegalContext *_context, GLuint path, GLint reference, GLuint mask)
{
  Internal("trace_glStencilStrokePathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStencilStrokePathNV(_context, path, reference, mask);
}

static void REGAL_CALL trace_glTransformPathNV(RegalContext *_context, GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
  Internal("trace_glTransformPathNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTransformPathNV(_context, resultPath, srcPath, transformType, transformValues);
}

static void REGAL_CALL trace_glWeightPathsNV(RegalContext *_context, GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
  Internal("trace_glWeightPathsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glWeightPathsNV(_context, resultPath, numPaths, paths, weights);
}

// GL_NV_pixel_data_range

static void REGAL_CALL trace_glFlushPixelDataRangeNV(RegalContext *_context, GLenum target)
{
  Internal("trace_glFlushPixelDataRangeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlushPixelDataRangeNV(_context, target);
}

static void REGAL_CALL trace_glPixelDataRangeNV(RegalContext *_context, GLenum target, GLsizei size, const GLvoid *pointer)
{
  Internal("trace_glPixelDataRangeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelDataRangeNV(_context, target, size, pointer);
}

// GL_NV_point_sprite

static void REGAL_CALL trace_glPointParameteriNV(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glPointParameteriNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameteriNV(_context, pname, param);
}

static void REGAL_CALL trace_glPointParameterivNV(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("trace_glPointParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterivNV(_context, pname, params);
}

// GL_NV_present_video

static void REGAL_CALL trace_glGetVideoi64vNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLint64EXT *params)
{
  Internal("trace_glGetVideoi64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVideoi64vNV(_context, video_slot, pname, params);
}

static void REGAL_CALL trace_glGetVideoivNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLint *params)
{
  Internal("trace_glGetVideoivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVideoivNV(_context, video_slot, pname, params);
}

static void REGAL_CALL trace_glGetVideoui64vNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
  Internal("trace_glGetVideoui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVideoui64vNV(_context, video_slot, pname, params);
}

static void REGAL_CALL trace_glGetVideouivNV(RegalContext *_context, GLuint video_slot, GLenum pname, GLuint *params)
{
  Internal("trace_glGetVideouivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVideouivNV(_context, video_slot, pname, params);
}

static void REGAL_CALL trace_glPresentFrameDualFillNV(RegalContext *_context, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
  Internal("trace_glPresentFrameDualFillNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPresentFrameDualFillNV(_context, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}

static void REGAL_CALL trace_glPresentFrameKeyedNV(RegalContext *_context, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
  Internal("trace_glPresentFrameKeyedNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPresentFrameKeyedNV(_context, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}

// GL_NV_primitive_restart

static void REGAL_CALL trace_glPrimitiveRestartIndexNV(RegalContext *_context, GLuint index)
{
  Internal("trace_glPrimitiveRestartIndexNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPrimitiveRestartIndexNV(_context, index);
}

static void REGAL_CALL trace_glPrimitiveRestartNV(RegalContext *_context)
{
  Internal("trace_glPrimitiveRestartNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPrimitiveRestartNV(_context);
}

// GL_NV_read_buffer

static void REGAL_CALL trace_glReadBufferNV(RegalContext *_context, GLenum mode)
{
  Internal("trace_glReadBufferNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReadBufferNV(_context, mode);
}

// GL_NV_register_combiners

static void REGAL_CALL trace_glCombinerInputNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  Internal("trace_glCombinerInputNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCombinerInputNV(_context, stage, portion, variable, input, mapping, componentUsage);
}

static void REGAL_CALL trace_glCombinerOutputNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
  Internal("trace_glCombinerOutputNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCombinerOutputNV(_context, stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

static void REGAL_CALL trace_glCombinerParameterfNV(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glCombinerParameterfNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCombinerParameterfNV(_context, pname, param);
}

static void REGAL_CALL trace_glCombinerParameterfvNV(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glCombinerParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCombinerParameterfvNV(_context, pname, params);
}

static void REGAL_CALL trace_glCombinerParameteriNV(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glCombinerParameteriNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCombinerParameteriNV(_context, pname, param);
}

static void REGAL_CALL trace_glCombinerParameterivNV(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("trace_glCombinerParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCombinerParameterivNV(_context, pname, params);
}

static void REGAL_CALL trace_glFinalCombinerInputNV(RegalContext *_context, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  Internal("trace_glFinalCombinerInputNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFinalCombinerInputNV(_context, variable, input, mapping, componentUsage);
}

static void REGAL_CALL trace_glGetCombinerInputParameterfvNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetCombinerInputParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCombinerInputParameterfvNV(_context, stage, portion, variable, pname, params);
}

static void REGAL_CALL trace_glGetCombinerInputParameterivNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
  Internal("trace_glGetCombinerInputParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCombinerInputParameterivNV(_context, stage, portion, variable, pname, params);
}

static void REGAL_CALL trace_glGetCombinerOutputParameterfvNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetCombinerOutputParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCombinerOutputParameterfvNV(_context, stage, portion, pname, params);
}

static void REGAL_CALL trace_glGetCombinerOutputParameterivNV(RegalContext *_context, GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
  Internal("trace_glGetCombinerOutputParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCombinerOutputParameterivNV(_context, stage, portion, pname, params);
}

static void REGAL_CALL trace_glGetFinalCombinerInputParameterfvNV(RegalContext *_context, GLenum variable, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetFinalCombinerInputParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFinalCombinerInputParameterfvNV(_context, variable, pname, params);
}

static void REGAL_CALL trace_glGetFinalCombinerInputParameterivNV(RegalContext *_context, GLenum variable, GLenum pname, GLint *params)
{
  Internal("trace_glGetFinalCombinerInputParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFinalCombinerInputParameterivNV(_context, variable, pname, params);
}

// GL_NV_register_combiners2

static void REGAL_CALL trace_glCombinerStageParameterfvNV(RegalContext *_context, GLenum stage, GLenum pname, const GLfloat *params)
{
  Internal("trace_glCombinerStageParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCombinerStageParameterfvNV(_context, stage, pname, params);
}

static void REGAL_CALL trace_glGetCombinerStageParameterfvNV(RegalContext *_context, GLenum stage, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetCombinerStageParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetCombinerStageParameterfvNV(_context, stage, pname, params);
}

// GL_NV_shader_buffer_load

static void REGAL_CALL trace_glGetBufferParameterui64vNV(RegalContext *_context, GLenum target, GLenum pname, GLuint64EXT *params)
{
  Internal("trace_glGetBufferParameterui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferParameterui64vNV(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetIntegerui64vNV(RegalContext *_context, GLenum target, GLuint64EXT *data)
{
  Internal("trace_glGetIntegerui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetIntegerui64vNV(_context, target, data);
}

static void REGAL_CALL trace_glGetNamedBufferParameterui64vNV(RegalContext *_context, GLuint buffer, GLenum pname, GLuint64EXT *params)
{
  Internal("trace_glGetNamedBufferParameterui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetNamedBufferParameterui64vNV(_context, buffer, pname, params);
}

static void REGAL_CALL trace_glGetUniformui64vNV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT *params)
{
  Internal("trace_glGetUniformui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetUniformui64vNV(_context, program, location, params);
}

static GLboolean REGAL_CALL trace_glIsBufferResidentNV(RegalContext *_context, GLenum target)
{
  Internal("trace_glIsBufferResidentNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsBufferResidentNV(_context, target);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsNamedBufferResidentNV(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glIsNamedBufferResidentNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsNamedBufferResidentNV(_context, buffer);
  return ret;
}

static void REGAL_CALL trace_glMakeBufferNonResidentNV(RegalContext *_context, GLenum target)
{
  Internal("trace_glMakeBufferNonResidentNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMakeBufferNonResidentNV(_context, target);
}

static void REGAL_CALL trace_glMakeBufferResidentNV(RegalContext *_context, GLenum target, GLenum access)
{
  Internal("trace_glMakeBufferResidentNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMakeBufferResidentNV(_context, target, access);
}

static void REGAL_CALL trace_glMakeNamedBufferNonResidentNV(RegalContext *_context, GLuint buffer)
{
  Internal("trace_glMakeNamedBufferNonResidentNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMakeNamedBufferNonResidentNV(_context, buffer);
}

static void REGAL_CALL trace_glMakeNamedBufferResidentNV(RegalContext *_context, GLuint buffer, GLenum access)
{
  Internal("trace_glMakeNamedBufferResidentNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMakeNamedBufferResidentNV(_context, buffer, access);
}

static void REGAL_CALL trace_glProgramUniformui64NV(RegalContext *_context, GLuint program, GLint location, GLuint64EXT v0)
{
  Internal("trace_glProgramUniformui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformui64NV(_context, program, location, v0);
}

static void REGAL_CALL trace_glProgramUniformui64vNV(RegalContext *_context, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glProgramUniformui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramUniformui64vNV(_context, program, location, count, value);
}

static void REGAL_CALL trace_glUniformui64NV(RegalContext *_context, GLint location, GLuint64EXT v0)
{
  Internal("trace_glUniformui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformui64NV(_context, location, v0);
}

static void REGAL_CALL trace_glUniformui64vNV(RegalContext *_context, GLint location, GLsizei count, const GLuint64EXT *value)
{
  Internal("trace_glUniformui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glUniformui64vNV(_context, location, count, value);
}

// GL_NV_texture_barrier

static void REGAL_CALL trace_glTextureBarrierNV(RegalContext *_context)
{
  Internal("trace_glTextureBarrierNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureBarrierNV(_context);
}

// GL_NV_texture_multisample

static void REGAL_CALL trace_glTexImage2DMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Internal("trace_glTexImage2DMultisampleCoverageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage2DMultisampleCoverageNV(_context, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL trace_glTexImage3DMultisampleCoverageNV(RegalContext *_context, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Internal("trace_glTexImage3DMultisampleCoverageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage3DMultisampleCoverageNV(_context, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

static void REGAL_CALL trace_glTextureImage2DMultisampleCoverageNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Internal("trace_glTextureImage2DMultisampleCoverageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureImage2DMultisampleCoverageNV(_context, texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL trace_glTextureImage2DMultisampleNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  Internal("trace_glTextureImage2DMultisampleNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureImage2DMultisampleNV(_context, texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL trace_glTextureImage3DMultisampleCoverageNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Internal("trace_glTextureImage3DMultisampleCoverageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureImage3DMultisampleCoverageNV(_context, texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

static void REGAL_CALL trace_glTextureImage3DMultisampleNV(RegalContext *_context, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  Internal("trace_glTextureImage3DMultisampleNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureImage3DMultisampleNV(_context, texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}

// GL_NV_transform_feedback

static void REGAL_CALL trace_glActiveVaryingNV(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("trace_glActiveVaryingNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glActiveVaryingNV(_context, program, name);
}

static void REGAL_CALL trace_glBeginTransformFeedbackNV(RegalContext *_context, GLenum primitiveMode)
{
  Internal("trace_glBeginTransformFeedbackNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginTransformFeedbackNV(_context, primitiveMode);
}

static void REGAL_CALL trace_glBindBufferBaseNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer)
{
  Internal("trace_glBindBufferBaseNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferBaseNV(_context, target, index, buffer);
}

static void REGAL_CALL trace_glBindBufferOffsetNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  Internal("trace_glBindBufferOffsetNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferOffsetNV(_context, target, index, buffer, offset);
}

static void REGAL_CALL trace_glBindBufferRangeNV(RegalContext *_context, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  Internal("trace_glBindBufferRangeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindBufferRangeNV(_context, target, index, buffer, offset, size);
}

static void REGAL_CALL trace_glEndTransformFeedbackNV(RegalContext *_context)
{
  Internal("trace_glEndTransformFeedbackNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndTransformFeedbackNV(_context);
}

static void REGAL_CALL trace_glGetActiveVaryingNV(RegalContext *_context, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  Internal("trace_glGetActiveVaryingNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetActiveVaryingNV(_context, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL trace_glGetTransformFeedbackVaryingNV(RegalContext *_context, GLuint program, GLuint index, GLint *location)
{
  Internal("trace_glGetTransformFeedbackVaryingNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTransformFeedbackVaryingNV(_context, program, index, location);
}

static GLint REGAL_CALL trace_glGetVaryingLocationNV(RegalContext *_context, GLuint program, const GLchar *name)
{
  Internal("trace_glGetVaryingLocationNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetVaryingLocationNV(_context, program, name);
  return ret;
}

static void REGAL_CALL trace_glTransformFeedbackAttribsNV(RegalContext *_context, GLuint count, const GLint *attribs, GLenum bufferMode)
{
  Internal("trace_glTransformFeedbackAttribsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTransformFeedbackAttribsNV(_context, count, attribs, bufferMode);
}

static void REGAL_CALL trace_glTransformFeedbackVaryingsNV(RegalContext *_context, GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
  Internal("trace_glTransformFeedbackVaryingsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTransformFeedbackVaryingsNV(_context, program, count, locations, bufferMode);
}

// GL_NV_transform_feedback2

static void REGAL_CALL trace_glBindTransformFeedbackNV(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("trace_glBindTransformFeedbackNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindTransformFeedbackNV(_context, target, id);
}

static void REGAL_CALL trace_glDeleteTransformFeedbacksNV(RegalContext *_context, GLsizei n, const GLuint *ids)
{
  Internal("trace_glDeleteTransformFeedbacksNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteTransformFeedbacksNV(_context, n, ids);
}

static void REGAL_CALL trace_glDrawTransformFeedbackNV(RegalContext *_context, GLenum mode, GLuint name)
{
  Internal("trace_glDrawTransformFeedbackNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawTransformFeedbackNV(_context, mode, name);
}

static void REGAL_CALL trace_glGenTransformFeedbacksNV(RegalContext *_context, GLsizei n, GLuint *ids)
{
  Internal("trace_glGenTransformFeedbacksNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenTransformFeedbacksNV(_context, n, ids);
}

static GLboolean REGAL_CALL trace_glIsTransformFeedbackNV(RegalContext *_context, GLuint id)
{
  Internal("trace_glIsTransformFeedbackNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsTransformFeedbackNV(_context, id);
  return ret;
}

static void REGAL_CALL trace_glPauseTransformFeedbackNV(RegalContext *_context)
{
  Internal("trace_glPauseTransformFeedbackNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPauseTransformFeedbackNV(_context);
}

static void REGAL_CALL trace_glResumeTransformFeedbackNV(RegalContext *_context)
{
  Internal("trace_glResumeTransformFeedbackNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glResumeTransformFeedbackNV(_context);
}

// GL_NV_vertex_array_range

static void REGAL_CALL trace_glFlushVertexArrayRangeNV(RegalContext *_context)
{
  Internal("trace_glFlushVertexArrayRangeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlushVertexArrayRangeNV(_context);
}

static void REGAL_CALL trace_glVertexArrayRangeNV(RegalContext *_context, GLsizei size, const GLvoid *pointer)
{
  Internal("trace_glVertexArrayRangeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexArrayRangeNV(_context, size, pointer);
}

// GL_NV_vertex_attrib_integer_64bit

static void REGAL_CALL trace_glGetVertexAttribLi64vNV(RegalContext *_context, GLuint index, GLenum pname, GLint64EXT *params)
{
  Internal("trace_glGetVertexAttribLi64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribLi64vNV(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribLui64vNV(RegalContext *_context, GLuint index, GLenum pname, GLuint64EXT *params)
{
  Internal("trace_glGetVertexAttribLui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribLui64vNV(_context, index, pname, params);
}

static void REGAL_CALL trace_glVertexAttribL1i64NV(RegalContext *_context, GLuint index, GLint64EXT x)
{
  Internal("trace_glVertexAttribL1i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL1i64NV(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttribL1i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v)
{
  Internal("trace_glVertexAttribL1i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL1i64vNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL1ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x)
{
  Internal("trace_glVertexAttribL1ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL1ui64NV(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttribL1ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("trace_glVertexAttribL1ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL1ui64vNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL2i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y)
{
  Internal("trace_glVertexAttribL2i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL2i64NV(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttribL2i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v)
{
  Internal("trace_glVertexAttribL2i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL2i64vNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL2ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y)
{
  Internal("trace_glVertexAttribL2ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL2ui64NV(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttribL2ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("trace_glVertexAttribL2ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL2ui64vNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL3i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  Internal("trace_glVertexAttribL3i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL3i64NV(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttribL3i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v)
{
  Internal("trace_glVertexAttribL3i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL3i64vNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL3ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  Internal("trace_glVertexAttribL3ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL3ui64NV(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttribL3ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("trace_glVertexAttribL3ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL3ui64vNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL4i64NV(RegalContext *_context, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  Internal("trace_glVertexAttribL4i64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL4i64NV(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttribL4i64vNV(RegalContext *_context, GLuint index, const GLint64EXT *v)
{
  Internal("trace_glVertexAttribL4i64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL4i64vNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribL4ui64NV(RegalContext *_context, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  Internal("trace_glVertexAttribL4ui64NV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL4ui64NV(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttribL4ui64vNV(RegalContext *_context, GLuint index, const GLuint64EXT *v)
{
  Internal("trace_glVertexAttribL4ui64vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribL4ui64vNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribLFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride)
{
  Internal("trace_glVertexAttribLFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribLFormatNV(_context, index, size, type, stride);
}

// GL_NV_vertex_buffer_unified_memory

static void REGAL_CALL trace_glBufferAddressRangeNV(RegalContext *_context, GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
  Internal("trace_glBufferAddressRangeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBufferAddressRangeNV(_context, pname, index, address, length);
}

static void REGAL_CALL trace_glColorFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride)
{
  Internal("trace_glColorFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorFormatNV(_context, size, type, stride);
}

static void REGAL_CALL trace_glEdgeFlagFormatNV(RegalContext *_context, GLsizei stride)
{
  Internal("trace_glEdgeFlagFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEdgeFlagFormatNV(_context, stride);
}

static void REGAL_CALL trace_glFogCoordFormatNV(RegalContext *_context, GLenum type, GLsizei stride)
{
  Internal("trace_glFogCoordFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogCoordFormatNV(_context, type, stride);
}

static void REGAL_CALL trace_glGetIntegerui64i_vNV(RegalContext *_context, GLenum target, GLuint index, GLuint64EXT *data)
{
  Internal("trace_glGetIntegerui64i_vNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetIntegerui64i_vNV(_context, target, index, data);
}

static void REGAL_CALL trace_glIndexFormatNV(RegalContext *_context, GLenum type, GLsizei stride)
{
  Internal("trace_glIndexFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIndexFormatNV(_context, type, stride);
}

static void REGAL_CALL trace_glNormalFormatNV(RegalContext *_context, GLenum type, GLsizei stride)
{
  Internal("trace_glNormalFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormalFormatNV(_context, type, stride);
}

static void REGAL_CALL trace_glSecondaryColorFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride)
{
  Internal("trace_glSecondaryColorFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSecondaryColorFormatNV(_context, size, type, stride);
}

static void REGAL_CALL trace_glTexCoordFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride)
{
  Internal("trace_glTexCoordFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoordFormatNV(_context, size, type, stride);
}

static void REGAL_CALL trace_glVertexAttribFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
  Internal("trace_glVertexAttribFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribFormatNV(_context, index, size, type, normalized, stride);
}

static void REGAL_CALL trace_glVertexAttribIFormatNV(RegalContext *_context, GLuint index, GLint size, GLenum type, GLsizei stride)
{
  Internal("trace_glVertexAttribIFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribIFormatNV(_context, index, size, type, stride);
}

static void REGAL_CALL trace_glVertexFormatNV(RegalContext *_context, GLint size, GLenum type, GLsizei stride)
{
  Internal("trace_glVertexFormatNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexFormatNV(_context, size, type, stride);
}

// GL_NV_vertex_program

static GLboolean REGAL_CALL trace_glAreProgramsResidentNV(RegalContext *_context, GLsizei n, const GLuint *programs, GLboolean *residences)
{
  Internal("trace_glAreProgramsResidentNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glAreProgramsResidentNV(_context, n, programs, residences);
  return ret;
}

static void REGAL_CALL trace_glBindProgramNV(RegalContext *_context, GLenum target, GLuint id)
{
  Internal("trace_glBindProgramNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindProgramNV(_context, target, id);
}

static void REGAL_CALL trace_glDeleteProgramsNV(RegalContext *_context, GLsizei n, const GLuint *programs)
{
  Internal("trace_glDeleteProgramsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteProgramsNV(_context, n, programs);
}

static void REGAL_CALL trace_glExecuteProgramNV(RegalContext *_context, GLenum target, GLuint id, const GLfloat *params)
{
  Internal("trace_glExecuteProgramNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glExecuteProgramNV(_context, target, id, params);
}

static void REGAL_CALL trace_glGenProgramsNV(RegalContext *_context, GLsizei n, GLuint *programs)
{
  Internal("trace_glGenProgramsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenProgramsNV(_context, n, programs);
}

static void REGAL_CALL trace_glGetProgramParameterdvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetProgramParameterdvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramParameterdvNV(_context, target, index, pname, params);
}

static void REGAL_CALL trace_glGetProgramParameterfvNV(RegalContext *_context, GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetProgramParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramParameterfvNV(_context, target, index, pname, params);
}

static void REGAL_CALL trace_glGetProgramStringNV(RegalContext *_context, GLuint id, GLenum pname, GLubyte *program)
{
  Internal("trace_glGetProgramStringNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramStringNV(_context, id, pname, program);
}

static void REGAL_CALL trace_glGetProgramivNV(RegalContext *_context, GLuint id, GLenum pname, GLint *params)
{
  Internal("trace_glGetProgramivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramivNV(_context, id, pname, params);
}

static void REGAL_CALL trace_glGetTrackMatrixivNV(RegalContext *_context, GLenum target, GLuint address, GLenum pname, GLint *params)
{
  Internal("trace_glGetTrackMatrixivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTrackMatrixivNV(_context, target, address, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribPointervNV(RegalContext *_context, GLuint index, GLenum pname, GLvoid **pointer)
{
  Internal("trace_glGetVertexAttribPointervNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribPointervNV(_context, index, pname, pointer);
}

static void REGAL_CALL trace_glGetVertexAttribdvNV(RegalContext *_context, GLuint index, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetVertexAttribdvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribdvNV(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribfvNV(RegalContext *_context, GLuint index, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetVertexAttribfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribfvNV(_context, index, pname, params);
}

static void REGAL_CALL trace_glGetVertexAttribivNV(RegalContext *_context, GLuint index, GLenum pname, GLint *params)
{
  Internal("trace_glGetVertexAttribivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVertexAttribivNV(_context, index, pname, params);
}

static GLboolean REGAL_CALL trace_glIsProgramNV(RegalContext *_context, GLuint id)
{
  Internal("trace_glIsProgramNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsProgramNV(_context, id);
  return ret;
}

static void REGAL_CALL trace_glLoadProgramNV(RegalContext *_context, GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
  Internal("trace_glLoadProgramNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadProgramNV(_context, target, id, len, program);
}

static void REGAL_CALL trace_glProgramParameter4dNV(RegalContext *_context, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glProgramParameter4dNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameter4dNV(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramParameter4dvNV(RegalContext *_context, GLenum target, GLuint index, const GLdouble *v)
{
  Internal("trace_glProgramParameter4dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameter4dvNV(_context, target, index, v);
}

static void REGAL_CALL trace_glProgramParameter4fNV(RegalContext *_context, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glProgramParameter4fNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameter4fNV(_context, target, index, x, y, z, w);
}

static void REGAL_CALL trace_glProgramParameter4fvNV(RegalContext *_context, GLenum target, GLuint index, const GLfloat *v)
{
  Internal("trace_glProgramParameter4fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameter4fvNV(_context, target, index, v);
}

static void REGAL_CALL trace_glProgramParameters4dvNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLdouble *v)
{
  Internal("trace_glProgramParameters4dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameters4dvNV(_context, target, index, count, v);
}

static void REGAL_CALL trace_glProgramParameters4fvNV(RegalContext *_context, GLenum target, GLuint index, GLsizei count, const GLfloat *v)
{
  Internal("trace_glProgramParameters4fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramParameters4fvNV(_context, target, index, count, v);
}

static void REGAL_CALL trace_glRequestResidentProgramsNV(RegalContext *_context, GLsizei n, const GLuint *programs)
{
  Internal("trace_glRequestResidentProgramsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRequestResidentProgramsNV(_context, n, programs);
}

static void REGAL_CALL trace_glTrackMatrixNV(RegalContext *_context, GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
  Internal("trace_glTrackMatrixNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTrackMatrixNV(_context, target, address, matrix, transform);
}

static void REGAL_CALL trace_glVertexAttrib1dNV(RegalContext *_context, GLuint index, GLdouble x)
{
  Internal("trace_glVertexAttrib1dNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1dNV(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1dvNV(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib1dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1dvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib1fNV(RegalContext *_context, GLuint index, GLfloat x)
{
  Internal("trace_glVertexAttrib1fNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1fNV(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1fvNV(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib1fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1fvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib1sNV(RegalContext *_context, GLuint index, GLshort x)
{
  Internal("trace_glVertexAttrib1sNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1sNV(_context, index, x);
}

static void REGAL_CALL trace_glVertexAttrib1svNV(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib1svNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib1svNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y)
{
  Internal("trace_glVertexAttrib2dNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2dNV(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2dvNV(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib2dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2dvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y)
{
  Internal("trace_glVertexAttrib2fNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2fNV(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2fvNV(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib2fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2fvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib2sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y)
{
  Internal("trace_glVertexAttrib2sNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2sNV(_context, index, x, y);
}

static void REGAL_CALL trace_glVertexAttrib2svNV(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib2svNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib2svNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  Internal("trace_glVertexAttrib3dNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3dNV(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3dvNV(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib3dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3dvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glVertexAttrib3fNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3fNV(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3fvNV(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib3fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3fvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib3sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z)
{
  Internal("trace_glVertexAttrib3sNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3sNV(_context, index, x, y, z);
}

static void REGAL_CALL trace_glVertexAttrib3svNV(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib3svNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib3svNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4dNV(RegalContext *_context, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  Internal("trace_glVertexAttrib4dNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4dNV(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4dvNV(RegalContext *_context, GLuint index, const GLdouble *v)
{
  Internal("trace_glVertexAttrib4dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4dvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4fNV(RegalContext *_context, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glVertexAttrib4fNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4fNV(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4fvNV(RegalContext *_context, GLuint index, const GLfloat *v)
{
  Internal("trace_glVertexAttrib4fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4fvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4sNV(RegalContext *_context, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  Internal("trace_glVertexAttrib4sNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4sNV(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4svNV(RegalContext *_context, GLuint index, const GLshort *v)
{
  Internal("trace_glVertexAttrib4svNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4svNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttrib4ubNV(RegalContext *_context, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  Internal("trace_glVertexAttrib4ubNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4ubNV(_context, index, x, y, z, w);
}

static void REGAL_CALL trace_glVertexAttrib4ubvNV(RegalContext *_context, GLuint index, const GLubyte *v)
{
  Internal("trace_glVertexAttrib4ubvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttrib4ubvNV(_context, index, v);
}

static void REGAL_CALL trace_glVertexAttribPointerNV(RegalContext *_context, GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glVertexAttribPointerNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribPointerNV(_context, index, fsize, type, stride, pointer);
}

static void REGAL_CALL trace_glVertexAttribs1dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v)
{
  Internal("trace_glVertexAttribs1dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs1dvNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs1fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v)
{
  Internal("trace_glVertexAttribs1fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs1fvNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs1svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v)
{
  Internal("trace_glVertexAttribs1svNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs1svNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs2dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v)
{
  Internal("trace_glVertexAttribs2dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs2dvNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs2fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v)
{
  Internal("trace_glVertexAttribs2fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs2fvNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs2svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v)
{
  Internal("trace_glVertexAttribs2svNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs2svNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs3dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v)
{
  Internal("trace_glVertexAttribs3dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs3dvNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs3fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v)
{
  Internal("trace_glVertexAttribs3fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs3fvNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs3svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v)
{
  Internal("trace_glVertexAttribs3svNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs3svNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs4dvNV(RegalContext *_context, GLuint index, GLsizei n, const GLdouble *v)
{
  Internal("trace_glVertexAttribs4dvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs4dvNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs4fvNV(RegalContext *_context, GLuint index, GLsizei n, const GLfloat *v)
{
  Internal("trace_glVertexAttribs4fvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs4fvNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs4svNV(RegalContext *_context, GLuint index, GLsizei n, const GLshort *v)
{
  Internal("trace_glVertexAttribs4svNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs4svNV(_context, index, n, v);
}

static void REGAL_CALL trace_glVertexAttribs4ubvNV(RegalContext *_context, GLuint index, GLsizei n, const GLubyte *v)
{
  Internal("trace_glVertexAttribs4ubvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVertexAttribs4ubvNV(_context, index, n, v);
}

// GL_NV_video_capture

static void REGAL_CALL trace_glBeginVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot)
{
  Internal("trace_glBeginVideoCaptureNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBeginVideoCaptureNV(_context, video_capture_slot);
}

static void REGAL_CALL trace_glBindVideoCaptureStreamBufferNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
  Internal("trace_glBindVideoCaptureStreamBufferNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindVideoCaptureStreamBufferNV(_context, video_capture_slot, stream, frame_region, offset);
}

static void REGAL_CALL trace_glBindVideoCaptureStreamTextureNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
  Internal("trace_glBindVideoCaptureStreamTextureNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindVideoCaptureStreamTextureNV(_context, video_capture_slot, stream, frame_region, target, texture);
}

static void REGAL_CALL trace_glEndVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot)
{
  Internal("trace_glEndVideoCaptureNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glEndVideoCaptureNV(_context, video_capture_slot);
}

static void REGAL_CALL trace_glGetVideoCaptureStreamdvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
  Internal("trace_glGetVideoCaptureStreamdvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVideoCaptureStreamdvNV(_context, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL trace_glGetVideoCaptureStreamfvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetVideoCaptureStreamfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVideoCaptureStreamfvNV(_context, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL trace_glGetVideoCaptureStreamivNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
  Internal("trace_glGetVideoCaptureStreamivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVideoCaptureStreamivNV(_context, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL trace_glGetVideoCaptureivNV(RegalContext *_context, GLuint video_capture_slot, GLenum pname, GLint *params)
{
  Internal("trace_glGetVideoCaptureivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetVideoCaptureivNV(_context, video_capture_slot, pname, params);
}

static GLenum REGAL_CALL trace_glVideoCaptureNV(RegalContext *_context, GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
  Internal("trace_glVideoCaptureNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glVideoCaptureNV(_context, video_capture_slot, sequence_num, capture_time);
  return ret;
}

static void REGAL_CALL trace_glVideoCaptureStreamParameterdvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
  Internal("trace_glVideoCaptureStreamParameterdvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVideoCaptureStreamParameterdvNV(_context, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL trace_glVideoCaptureStreamParameterfvNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
  Internal("trace_glVideoCaptureStreamParameterfvNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVideoCaptureStreamParameterfvNV(_context, video_capture_slot, stream, pname, params);
}

static void REGAL_CALL trace_glVideoCaptureStreamParameterivNV(RegalContext *_context, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
  Internal("trace_glVideoCaptureStreamParameterivNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glVideoCaptureStreamParameterivNV(_context, video_capture_slot, stream, pname, params);
}

// GL_OES_blend_equation_separate

static void REGAL_CALL trace_glBlendEquationSeparateOES(RegalContext *_context, GLenum modeRGB, GLenum modeAlpha)
{
  Internal("trace_glBlendEquationSeparateOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationSeparateOES(_context, modeRGB, modeAlpha);
}

// GL_OES_blend_func_separate

static void REGAL_CALL trace_glBlendFuncSeparateOES(RegalContext *_context, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("trace_glBlendFuncSeparateOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendFuncSeparateOES(_context, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_OES_blend_subtract

static void REGAL_CALL trace_glBlendEquationOES(RegalContext *_context, GLenum mode)
{
  Internal("trace_glBlendEquationOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBlendEquationOES(_context, mode);
}

// GL_OES_framebuffer_object

static void REGAL_CALL trace_glBindFramebufferOES(RegalContext *_context, GLenum target, GLuint framebuffer)
{
  Internal("trace_glBindFramebufferOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindFramebufferOES(_context, target, framebuffer);
}

static void REGAL_CALL trace_glBindRenderbufferOES(RegalContext *_context, GLenum target, GLuint renderbuffer)
{
  Internal("trace_glBindRenderbufferOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindRenderbufferOES(_context, target, renderbuffer);
}

static GLenum REGAL_CALL trace_glCheckFramebufferStatusOES(RegalContext *_context, GLenum target)
{
  Internal("trace_glCheckFramebufferStatusOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLenum  ret = Trace::glCheckFramebufferStatusOES(_context, target);
  return ret;
}

static void REGAL_CALL trace_glDeleteFramebuffersOES(RegalContext *_context, GLsizei n, const GLuint *framebuffers)
{
  Internal("trace_glDeleteFramebuffersOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteFramebuffersOES(_context, n, framebuffers);
}

static void REGAL_CALL trace_glDeleteRenderbuffersOES(RegalContext *_context, GLsizei n, const GLuint *renderbuffers)
{
  Internal("trace_glDeleteRenderbuffersOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteRenderbuffersOES(_context, n, renderbuffers);
}

static void REGAL_CALL trace_glFramebufferRenderbufferOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("trace_glFramebufferRenderbufferOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferRenderbufferOES(_context, target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL trace_glFramebufferTexture2DOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("trace_glFramebufferTexture2DOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture2DOES(_context, target, attachment, textarget, texture, level);
}

static void REGAL_CALL trace_glGenFramebuffersOES(RegalContext *_context, GLsizei n, GLuint *framebuffers)
{
  Internal("trace_glGenFramebuffersOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenFramebuffersOES(_context, n, framebuffers);
}

static void REGAL_CALL trace_glGenRenderbuffersOES(RegalContext *_context, GLsizei n, GLuint *renderbuffers)
{
  Internal("trace_glGenRenderbuffersOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenRenderbuffersOES(_context, n, renderbuffers);
}

static void REGAL_CALL trace_glGenerateMipmapOES(RegalContext *_context, GLenum target)
{
  Internal("trace_glGenerateMipmapOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenerateMipmapOES(_context, target);
}

static void REGAL_CALL trace_glGetFramebufferAttachmentParameterivOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("trace_glGetFramebufferAttachmentParameterivOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFramebufferAttachmentParameterivOES(_context, target, attachment, pname, params);
}

static void REGAL_CALL trace_glGetRenderbufferParameterivOES(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetRenderbufferParameterivOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetRenderbufferParameterivOES(_context, target, pname, params);
}

static GLboolean REGAL_CALL trace_glIsFramebufferOES(RegalContext *_context, GLuint framebuffer)
{
  Internal("trace_glIsFramebufferOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsFramebufferOES(_context, framebuffer);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsRenderbufferOES(RegalContext *_context, GLuint renderbuffer)
{
  Internal("trace_glIsRenderbufferOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsRenderbufferOES(_context, renderbuffer);
  return ret;
}

static void REGAL_CALL trace_glRenderbufferStorageOES(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("trace_glRenderbufferStorageOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRenderbufferStorageOES(_context, target, internalformat, width, height);
}

// GL_OES_get_program_binary

static void REGAL_CALL trace_glGetProgramBinaryOES(RegalContext *_context, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  Internal("trace_glGetProgramBinaryOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetProgramBinaryOES(_context, program, bufSize, length, binaryFormat, binary);
}

static void REGAL_CALL trace_glProgramBinaryOES(RegalContext *_context, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
{
  Internal("trace_glProgramBinaryOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glProgramBinaryOES(_context, program, binaryFormat, binary, length);
}

// GL_OES_mapbuffer

static void REGAL_CALL trace_glGetBufferPointervOES(RegalContext *_context, GLenum target, GLenum pname, GLvoid **params)
{
  Internal("trace_glGetBufferPointervOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetBufferPointervOES(_context, target, pname, params);
}

static GLvoid *REGAL_CALL trace_glMapBufferOES(RegalContext *_context, GLenum target, GLenum access)
{
  Internal("trace_glMapBufferOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLvoid * ret = Trace::glMapBufferOES(_context, target, access);
  return ret;
}

static GLboolean REGAL_CALL trace_glUnmapBufferOES(RegalContext *_context, GLenum target)
{
  Internal("trace_glUnmapBufferOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glUnmapBufferOES(_context, target);
  return ret;
}

// GL_OES_matrix_palette

static void REGAL_CALL trace_glCurrentPaletteMatrixOES(RegalContext *_context, GLuint index)
{
  Internal("trace_glCurrentPaletteMatrixOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCurrentPaletteMatrixOES(_context, index);
}

// GL_OES_texture_3D

static void REGAL_CALL trace_glCompressedTexImage3DOES(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexImage3DOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexImage3DOES(_context, target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL trace_glCompressedTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("trace_glCompressedTexSubImage3DOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCompressedTexSubImage3DOES(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL trace_glCopyTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glCopyTexSubImage3DOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyTexSubImage3DOES(_context, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL trace_glFramebufferTexture3DOES(RegalContext *_context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Internal("trace_glFramebufferTexture3DOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFramebufferTexture3DOES(_context, target, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL trace_glTexImage3DOES(RegalContext *_context, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexImage3DOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage3DOES(_context, target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL trace_glTexSubImage3DOES(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexSubImage3DOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexSubImage3DOES(_context, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_OES_texture_cube_map

static void REGAL_CALL trace_glGetTexGenfvOES(RegalContext *_context, GLenum coord, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetTexGenfvOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexGenfvOES(_context, coord, pname, params);
}

static void REGAL_CALL trace_glGetTexGenivOES(RegalContext *_context, GLenum coord, GLenum pname, GLint *params)
{
  Internal("trace_glGetTexGenivOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexGenivOES(_context, coord, pname, params);
}

static void REGAL_CALL trace_glGetTexGenxvOES(RegalContext *_context, GLenum coord, GLenum pname, GLfixed *params)
{
  Internal("trace_glGetTexGenxvOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexGenxvOES(_context, coord, pname, params);
}

static void REGAL_CALL trace_glTexGenfOES(RegalContext *_context, GLenum coord, GLenum pname, GLfloat param)
{
  Internal("trace_glTexGenfOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGenfOES(_context, coord, pname, param);
}

static void REGAL_CALL trace_glTexGenfvOES(RegalContext *_context, GLenum coord, GLenum pname, const GLfloat *params)
{
  Internal("trace_glTexGenfvOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGenfvOES(_context, coord, pname, params);
}

static void REGAL_CALL trace_glTexGeniOES(RegalContext *_context, GLenum coord, GLenum pname, GLint param)
{
  Internal("trace_glTexGeniOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGeniOES(_context, coord, pname, param);
}

static void REGAL_CALL trace_glTexGenivOES(RegalContext *_context, GLenum coord, GLenum pname, const GLint *params)
{
  Internal("trace_glTexGenivOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGenivOES(_context, coord, pname, params);
}

static void REGAL_CALL trace_glTexGenxOES(RegalContext *_context, GLenum coord, GLenum pname, GLfixed param)
{
  Internal("trace_glTexGenxOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGenxOES(_context, coord, pname, param);
}

static void REGAL_CALL trace_glTexGenxvOES(RegalContext *_context, GLenum coord, GLenum pname, const GLfixed *params)
{
  Internal("trace_glTexGenxvOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexGenxvOES(_context, coord, pname, params);
}

// GL_OES_vertex_array_object

static void REGAL_CALL trace_glBindVertexArrayOES(RegalContext *_context, GLuint array)
{
  Internal("trace_glBindVertexArrayOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glBindVertexArrayOES(_context, array);
}

static void REGAL_CALL trace_glDeleteVertexArraysOES(RegalContext *_context, GLsizei n, const GLuint *arrays)
{
  Internal("trace_glDeleteVertexArraysOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteVertexArraysOES(_context, n, arrays);
}

static void REGAL_CALL trace_glGenVertexArraysOES(RegalContext *_context, GLsizei n, GLuint *arrays)
{
  Internal("trace_glGenVertexArraysOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGenVertexArraysOES(_context, n, arrays);
}

static GLboolean REGAL_CALL trace_glIsVertexArrayOES(RegalContext *_context, GLuint array)
{
  Internal("trace_glIsVertexArrayOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsVertexArrayOES(_context, array);
  return ret;
}

// GL_PGI_misc_hints

static void REGAL_CALL trace_glHintPGI(RegalContext *_context, GLenum target, GLint mode)
{
  Internal("trace_glHintPGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glHintPGI(_context, target, mode);
}

// GL_REGAL_ES1_0_compatibility

static void REGAL_CALL trace_glAlphaFuncx(RegalContext *_context, GLenum func, GLclampx ref)
{
  Internal("trace_glAlphaFuncx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAlphaFuncx(_context, func, ref);
}

static void REGAL_CALL trace_glClearColorx(RegalContext *_context, GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
  Internal("trace_glClearColorx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearColorx(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glClearDepthx(RegalContext *_context, GLclampx depth)
{
  Internal("trace_glClearDepthx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClearDepthx(_context, depth);
}

static void REGAL_CALL trace_glColor4x(RegalContext *_context, GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
  Internal("trace_glColor4x","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4x(_context, red, green, blue, alpha);
}

static void REGAL_CALL trace_glDepthRangex(RegalContext *_context, GLclampx zNear, GLclampx zFar)
{
  Internal("trace_glDepthRangex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDepthRangex(_context, zNear, zFar);
}

static void REGAL_CALL trace_glFogx(RegalContext *_context, GLenum pname, GLfixed param)
{
  Internal("trace_glFogx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogx(_context, pname, param);
}

static void REGAL_CALL trace_glFogxv(RegalContext *_context, GLenum pname, const GLfixed *params)
{
  Internal("trace_glFogxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogxv(_context, pname, params);
}

static void REGAL_CALL trace_glFrustumf(RegalContext *_context, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  Internal("trace_glFrustumf","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFrustumf(_context, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL trace_glFrustumx(RegalContext *_context, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
  Internal("trace_glFrustumx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFrustumx(_context, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL trace_glLightModelx(RegalContext *_context, GLenum pname, GLfixed param)
{
  Internal("trace_glLightModelx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightModelx(_context, pname, param);
}

static void REGAL_CALL trace_glLightModelxv(RegalContext *_context, GLenum pname, const GLfixed *params)
{
  Internal("trace_glLightModelxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightModelxv(_context, pname, params);
}

static void REGAL_CALL trace_glLightx(RegalContext *_context, GLenum light, GLenum pname, GLfixed param)
{
  Internal("trace_glLightx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightx(_context, light, pname, param);
}

static void REGAL_CALL trace_glLightxv(RegalContext *_context, GLenum light, GLenum pname, const GLfixed *params)
{
  Internal("trace_glLightxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightxv(_context, light, pname, params);
}

static void REGAL_CALL trace_glLineWidthx(RegalContext *_context, GLfixed width)
{
  Internal("trace_glLineWidthx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLineWidthx(_context, width);
}

static void REGAL_CALL trace_glLoadMatrixx(RegalContext *_context, const GLfixed *m)
{
  Internal("trace_glLoadMatrixx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadMatrixx(_context, m);
}

static void REGAL_CALL trace_glMaterialx(RegalContext *_context, GLenum face, GLenum pname, GLfixed param)
{
  Internal("trace_glMaterialx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMaterialx(_context, face, pname, param);
}

static void REGAL_CALL trace_glMaterialxv(RegalContext *_context, GLenum face, GLenum pname, const GLfixed *params)
{
  Internal("trace_glMaterialxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMaterialxv(_context, face, pname, params);
}

static void REGAL_CALL trace_glMultMatrixx(RegalContext *_context, const GLfixed *m)
{
  Internal("trace_glMultMatrixx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultMatrixx(_context, m);
}

static void REGAL_CALL trace_glMultiTexCoord4x(RegalContext *_context, GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
  Internal("trace_glMultiTexCoord4x","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glMultiTexCoord4x(_context, target, s, t, r, q);
}

static void REGAL_CALL trace_glNormal3x(RegalContext *_context, GLfixed nx, GLfixed ny, GLfixed nz)
{
  Internal("trace_glNormal3x","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3x(_context, nx, ny, nz);
}

static void REGAL_CALL trace_glOrthof(RegalContext *_context, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  Internal("trace_glOrthof","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glOrthof(_context, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL trace_glOrthox(RegalContext *_context, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
  Internal("trace_glOrthox","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glOrthox(_context, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL trace_glPointSizex(RegalContext *_context, GLfixed size)
{
  Internal("trace_glPointSizex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointSizex(_context, size);
}

static void REGAL_CALL trace_glPolygonOffsetx(RegalContext *_context, GLfixed factor, GLfixed units)
{
  Internal("trace_glPolygonOffsetx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPolygonOffsetx(_context, factor, units);
}

static void REGAL_CALL trace_glRotatex(RegalContext *_context, GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
  Internal("trace_glRotatex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glRotatex(_context, angle, x, y, z);
}

static void REGAL_CALL trace_glSampleCoveragex(RegalContext *_context, GLclampx value, GLboolean invert)
{
  Internal("trace_glSampleCoveragex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSampleCoveragex(_context, value, invert);
}

static void REGAL_CALL trace_glScalex(RegalContext *_context, GLfixed x, GLfixed y, GLfixed z)
{
  Internal("trace_glScalex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glScalex(_context, x, y, z);
}

static void REGAL_CALL trace_glTexEnvx(RegalContext *_context, GLenum target, GLenum pname, GLfixed param)
{
  Internal("trace_glTexEnvx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexEnvx(_context, target, pname, param);
}

static void REGAL_CALL trace_glTexEnvxv(RegalContext *_context, GLenum target, GLenum pname, const GLfixed *params)
{
  Internal("trace_glTexEnvxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexEnvxv(_context, target, pname, params);
}

static void REGAL_CALL trace_glTexParameterx(RegalContext *_context, GLenum target, GLenum pname, GLfixed param)
{
  Internal("trace_glTexParameterx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameterx(_context, target, pname, param);
}

static void REGAL_CALL trace_glTranslatex(RegalContext *_context, GLfixed x, GLfixed y, GLfixed z)
{
  Internal("trace_glTranslatex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTranslatex(_context, x, y, z);
}

// GL_REGAL_ES1_1_compatibility

static void REGAL_CALL trace_glClipPlanef(RegalContext *_context, GLenum plane, const GLfloat *equation)
{
  Internal("trace_glClipPlanef","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClipPlanef(_context, plane, equation);
}

static void REGAL_CALL trace_glClipPlanex(RegalContext *_context, GLenum plane, const GLfixed *equation)
{
  Internal("trace_glClipPlanex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glClipPlanex(_context, plane, equation);
}

static void REGAL_CALL trace_glGetClipPlanef(RegalContext *_context, GLenum pname, GLfloat *eqn)
{
  Internal("trace_glGetClipPlanef","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetClipPlanef(_context, pname, eqn);
}

static void REGAL_CALL trace_glGetClipPlanex(RegalContext *_context, GLenum pname, GLfixed *eqn)
{
  Internal("trace_glGetClipPlanex","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetClipPlanex(_context, pname, eqn);
}

static void REGAL_CALL trace_glGetFixedv(RegalContext *_context, GLenum pname, GLfixed *params)
{
  Internal("trace_glGetFixedv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFixedv(_context, pname, params);
}

static void REGAL_CALL trace_glGetLightxv(RegalContext *_context, GLenum light, GLenum pname, GLfixed *params)
{
  Internal("trace_glGetLightxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetLightxv(_context, light, pname, params);
}

static void REGAL_CALL trace_glGetMaterialxv(RegalContext *_context, GLenum face, GLenum pname, GLfixed *params)
{
  Internal("trace_glGetMaterialxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetMaterialxv(_context, face, pname, params);
}

static void REGAL_CALL trace_glGetTexEnvxv(RegalContext *_context, GLenum env, GLenum pname, GLfixed *params)
{
  Internal("trace_glGetTexEnvxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexEnvxv(_context, env, pname, params);
}

static void REGAL_CALL trace_glGetTexParameterxv(RegalContext *_context, GLenum target, GLenum pname, GLfixed *params)
{
  Internal("trace_glGetTexParameterxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexParameterxv(_context, target, pname, params);
}

static void REGAL_CALL trace_glPointParameterx(RegalContext *_context, GLenum pname, GLfixed param)
{
  Internal("trace_glPointParameterx","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterx(_context, pname, param);
}

static void REGAL_CALL trace_glPointParameterxv(RegalContext *_context, GLenum pname, const GLfixed *params)
{
  Internal("trace_glPointParameterxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterxv(_context, pname, params);
}

static void REGAL_CALL trace_glPointSizePointerOES(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  Internal("trace_glPointSizePointerOES","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointSizePointerOES(_context, type, stride, pointer);
}

static void REGAL_CALL trace_glTexParameterxv(RegalContext *_context, GLenum target, GLenum pname, const GLfixed *params)
{
  Internal("trace_glTexParameterxv","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexParameterxv(_context, target, pname, params);
}

// GL_SGIS_detail_texture

static void REGAL_CALL trace_glDetailTexFuncSGIS(RegalContext *_context, GLenum target, GLsizei n, const GLfloat *points)
{
  Internal("trace_glDetailTexFuncSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDetailTexFuncSGIS(_context, target, n, points);
}

static void REGAL_CALL trace_glGetDetailTexFuncSGIS(RegalContext *_context, GLenum target, GLfloat *points)
{
  Internal("trace_glGetDetailTexFuncSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetDetailTexFuncSGIS(_context, target, points);
}

// GL_SGIS_fog_function

static void REGAL_CALL trace_glFogFuncSGIS(RegalContext *_context, GLsizei n, const GLfloat *points)
{
  Internal("trace_glFogFuncSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFogFuncSGIS(_context, n, points);
}

static void REGAL_CALL trace_glGetFogFuncSGIS(RegalContext *_context, GLfloat *points)
{
  Internal("trace_glGetFogFuncSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFogFuncSGIS(_context, points);
}

// GL_SGIS_multisample

static void REGAL_CALL trace_glSampleMaskSGIS(RegalContext *_context, GLclampf value, GLboolean invert)
{
  Internal("trace_glSampleMaskSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSampleMaskSGIS(_context, value, invert);
}

static void REGAL_CALL trace_glSamplePatternSGIS(RegalContext *_context, GLenum pattern)
{
  Internal("trace_glSamplePatternSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSamplePatternSGIS(_context, pattern);
}

// GL_SGIS_pixel_texture

static void REGAL_CALL trace_glGetPixelTexGenParameterfvSGIS(RegalContext *_context, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetPixelTexGenParameterfvSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPixelTexGenParameterfvSGIS(_context, pname, params);
}

static void REGAL_CALL trace_glGetPixelTexGenParameterivSGIS(RegalContext *_context, GLenum pname, GLint *params)
{
  Internal("trace_glGetPixelTexGenParameterivSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetPixelTexGenParameterivSGIS(_context, pname, params);
}

static void REGAL_CALL trace_glPixelTexGenParameterfSGIS(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glPixelTexGenParameterfSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTexGenParameterfSGIS(_context, pname, param);
}

static void REGAL_CALL trace_glPixelTexGenParameterfvSGIS(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glPixelTexGenParameterfvSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTexGenParameterfvSGIS(_context, pname, params);
}

static void REGAL_CALL trace_glPixelTexGenParameteriSGIS(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glPixelTexGenParameteriSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTexGenParameteriSGIS(_context, pname, param);
}

static void REGAL_CALL trace_glPixelTexGenParameterivSGIS(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("trace_glPixelTexGenParameterivSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTexGenParameterivSGIS(_context, pname, params);
}

// GL_SGIS_point_parameters

static void REGAL_CALL trace_glPointParameterfSGIS(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glPointParameterfSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterfSGIS(_context, pname, param);
}

static void REGAL_CALL trace_glPointParameterfvSGIS(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glPointParameterfvSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPointParameterfvSGIS(_context, pname, params);
}

// GL_SGIS_sharpen_texture

static void REGAL_CALL trace_glGetSharpenTexFuncSGIS(RegalContext *_context, GLenum target, GLfloat *points)
{
  Internal("trace_glGetSharpenTexFuncSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetSharpenTexFuncSGIS(_context, target, points);
}

static void REGAL_CALL trace_glSharpenTexFuncSGIS(RegalContext *_context, GLenum target, GLsizei n, const GLfloat *points)
{
  Internal("trace_glSharpenTexFuncSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSharpenTexFuncSGIS(_context, target, n, points);
}

// GL_SGIS_texture4D

static void REGAL_CALL trace_glTexImage4DSGIS(RegalContext *_context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexImage4DSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexImage4DSGIS(_context, target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}

static void REGAL_CALL trace_glTexSubImage4DSGIS(RegalContext *_context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("trace_glTexSubImage4DSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexSubImage4DSGIS(_context, target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
}

// GL_SGIS_texture_color_mask

static void REGAL_CALL trace_glTextureColorMaskSGIS(RegalContext *_context, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  Internal("trace_glTextureColorMaskSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTextureColorMaskSGIS(_context, red, green, blue, alpha);
}

// GL_SGIS_texture_filter4

static void REGAL_CALL trace_glGetTexFilterFuncSGIS(RegalContext *_context, GLenum target, GLenum filter, GLfloat *weights)
{
  Internal("trace_glGetTexFilterFuncSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetTexFilterFuncSGIS(_context, target, filter, weights);
}

static void REGAL_CALL trace_glTexFilterFuncSGIS(RegalContext *_context, GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
  Internal("trace_glTexFilterFuncSGIS","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexFilterFuncSGIS(_context, target, filter, n, weights);
}

// GL_SGIX_async

static void REGAL_CALL trace_glAsyncMarkerSGIX(RegalContext *_context, GLuint marker)
{
  Internal("trace_glAsyncMarkerSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAsyncMarkerSGIX(_context, marker);
}

static void REGAL_CALL trace_glDeleteAsyncMarkersSGIX(RegalContext *_context, GLuint marker, GLsizei range)
{
  Internal("trace_glDeleteAsyncMarkersSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeleteAsyncMarkersSGIX(_context, marker, range);
}

static GLint REGAL_CALL trace_glFinishAsyncSGIX(RegalContext *_context, GLuint *markerp)
{
  Internal("trace_glFinishAsyncSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glFinishAsyncSGIX(_context, markerp);
  return ret;
}

static GLuint REGAL_CALL trace_glGenAsyncMarkersSGIX(RegalContext *_context, GLsizei range)
{
  Internal("trace_glGenAsyncMarkersSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLuint  ret = Trace::glGenAsyncMarkersSGIX(_context, range);
  return ret;
}

static GLboolean REGAL_CALL trace_glIsAsyncMarkerSGIX(RegalContext *_context, GLuint marker)
{
  Internal("trace_glIsAsyncMarkerSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLboolean  ret = Trace::glIsAsyncMarkerSGIX(_context, marker);
  return ret;
}

static GLint REGAL_CALL trace_glPollAsyncSGIX(RegalContext *_context, GLuint *markerp)
{
  Internal("trace_glPollAsyncSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glPollAsyncSGIX(_context, markerp);
  return ret;
}

// GL_SGIX_flush_raster

static void REGAL_CALL trace_glFlushRasterSGIX(RegalContext *_context)
{
  Internal("trace_glFlushRasterSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFlushRasterSGIX(_context);
}

// GL_SGIX_fragment_lighting

static void REGAL_CALL trace_glFragmentColorMaterialSGIX(RegalContext *_context, GLenum face, GLenum mode)
{
  Internal("trace_glFragmentColorMaterialSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentColorMaterialSGIX(_context, face, mode);
}

static void REGAL_CALL trace_glFragmentLightModelfSGIX(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glFragmentLightModelfSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentLightModelfSGIX(_context, pname, param);
}

static void REGAL_CALL trace_glFragmentLightModelfvSGIX(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glFragmentLightModelfvSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentLightModelfvSGIX(_context, pname, params);
}

static void REGAL_CALL trace_glFragmentLightModeliSGIX(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glFragmentLightModeliSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentLightModeliSGIX(_context, pname, param);
}

static void REGAL_CALL trace_glFragmentLightModelivSGIX(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("trace_glFragmentLightModelivSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentLightModelivSGIX(_context, pname, params);
}

static void REGAL_CALL trace_glFragmentLightfSGIX(RegalContext *_context, GLenum light, GLenum pname, GLfloat param)
{
  Internal("trace_glFragmentLightfSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentLightfSGIX(_context, light, pname, param);
}

static void REGAL_CALL trace_glFragmentLightfvSGIX(RegalContext *_context, GLenum light, GLenum pname, const GLfloat *params)
{
  Internal("trace_glFragmentLightfvSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentLightfvSGIX(_context, light, pname, params);
}

static void REGAL_CALL trace_glFragmentLightiSGIX(RegalContext *_context, GLenum light, GLenum pname, GLint param)
{
  Internal("trace_glFragmentLightiSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentLightiSGIX(_context, light, pname, param);
}

static void REGAL_CALL trace_glFragmentLightivSGIX(RegalContext *_context, GLenum light, GLenum pname, const GLint *params)
{
  Internal("trace_glFragmentLightivSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentLightivSGIX(_context, light, pname, params);
}

static void REGAL_CALL trace_glFragmentMaterialfSGIX(RegalContext *_context, GLenum face, GLenum pname, GLfloat param)
{
  Internal("trace_glFragmentMaterialfSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentMaterialfSGIX(_context, face, pname, param);
}

static void REGAL_CALL trace_glFragmentMaterialfvSGIX(RegalContext *_context, GLenum face, GLenum pname, const GLfloat *params)
{
  Internal("trace_glFragmentMaterialfvSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentMaterialfvSGIX(_context, face, pname, params);
}

static void REGAL_CALL trace_glFragmentMaterialiSGIX(RegalContext *_context, GLenum face, GLenum pname, GLint param)
{
  Internal("trace_glFragmentMaterialiSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentMaterialiSGIX(_context, face, pname, param);
}

static void REGAL_CALL trace_glFragmentMaterialivSGIX(RegalContext *_context, GLenum face, GLenum pname, const GLint *params)
{
  Internal("trace_glFragmentMaterialivSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFragmentMaterialivSGIX(_context, face, pname, params);
}

static void REGAL_CALL trace_glGetFragmentLightfvSGIX(RegalContext *_context, GLenum light, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetFragmentLightfvSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFragmentLightfvSGIX(_context, light, pname, params);
}

static void REGAL_CALL trace_glGetFragmentLightivSGIX(RegalContext *_context, GLenum light, GLenum pname, GLint *params)
{
  Internal("trace_glGetFragmentLightivSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFragmentLightivSGIX(_context, light, pname, params);
}

static void REGAL_CALL trace_glGetFragmentMaterialfvSGIX(RegalContext *_context, GLenum face, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetFragmentMaterialfvSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFragmentMaterialfvSGIX(_context, face, pname, params);
}

static void REGAL_CALL trace_glGetFragmentMaterialivSGIX(RegalContext *_context, GLenum face, GLenum pname, GLint *params)
{
  Internal("trace_glGetFragmentMaterialivSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetFragmentMaterialivSGIX(_context, face, pname, params);
}

static void REGAL_CALL trace_glLightEnviSGIX(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glLightEnviSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLightEnviSGIX(_context, pname, param);
}

// GL_SGIX_framezoom

static void REGAL_CALL trace_glFrameZoomSGIX(RegalContext *_context, GLint factor)
{
  Internal("trace_glFrameZoomSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFrameZoomSGIX(_context, factor);
}

// GL_SGIX_igloo_interface

static void REGAL_CALL trace_glIglooInterfaceSGIX(RegalContext *_context, GLenum pname, const GLvoid *params)
{
  Internal("trace_glIglooInterfaceSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glIglooInterfaceSGIX(_context, pname, params);
}

// GL_SGIX_instruments

static GLint REGAL_CALL trace_glGetInstrumentsSGIX(RegalContext *_context)
{
  Internal("trace_glGetInstrumentsSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glGetInstrumentsSGIX(_context);
  return ret;
}

static void REGAL_CALL trace_glInstrumentsBufferSGIX(RegalContext *_context, GLsizei size, GLint *buffer)
{
  Internal("trace_glInstrumentsBufferSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glInstrumentsBufferSGIX(_context, size, buffer);
}

static GLint REGAL_CALL trace_glPollInstrumentsSGIX(RegalContext *_context, GLint *marker_p)
{
  Internal("trace_glPollInstrumentsSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  GLint  ret = Trace::glPollInstrumentsSGIX(_context, marker_p);
  return ret;
}

static void REGAL_CALL trace_glReadInstrumentsSGIX(RegalContext *_context, GLint marker)
{
  Internal("trace_glReadInstrumentsSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReadInstrumentsSGIX(_context, marker);
}

static void REGAL_CALL trace_glStartInstrumentsSGIX(RegalContext *_context)
{
  Internal("trace_glStartInstrumentsSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStartInstrumentsSGIX(_context);
}

static void REGAL_CALL trace_glStopInstrumentsSGIX(RegalContext *_context, GLint marker)
{
  Internal("trace_glStopInstrumentsSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glStopInstrumentsSGIX(_context, marker);
}

// GL_SGIX_list_priority

static void REGAL_CALL trace_glGetListParameterfvSGIX(RegalContext *_context, GLuint list, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetListParameterfvSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetListParameterfvSGIX(_context, list, pname, params);
}

static void REGAL_CALL trace_glGetListParameterivSGIX(RegalContext *_context, GLuint list, GLenum pname, GLint *params)
{
  Internal("trace_glGetListParameterivSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetListParameterivSGIX(_context, list, pname, params);
}

static void REGAL_CALL trace_glListParameterfSGIX(RegalContext *_context, GLuint list, GLenum pname, GLfloat param)
{
  Internal("trace_glListParameterfSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glListParameterfSGIX(_context, list, pname, param);
}

static void REGAL_CALL trace_glListParameterfvSGIX(RegalContext *_context, GLuint list, GLenum pname, const GLfloat *params)
{
  Internal("trace_glListParameterfvSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glListParameterfvSGIX(_context, list, pname, params);
}

static void REGAL_CALL trace_glListParameteriSGIX(RegalContext *_context, GLuint list, GLenum pname, GLint param)
{
  Internal("trace_glListParameteriSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glListParameteriSGIX(_context, list, pname, param);
}

static void REGAL_CALL trace_glListParameterivSGIX(RegalContext *_context, GLuint list, GLenum pname, const GLint *params)
{
  Internal("trace_glListParameterivSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glListParameterivSGIX(_context, list, pname, params);
}

// GL_SGIX_pixel_texture

static void REGAL_CALL trace_glPixelTexGenSGIX(RegalContext *_context, GLenum mode)
{
  Internal("trace_glPixelTexGenSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glPixelTexGenSGIX(_context, mode);
}

// GL_SGIX_polynomial_ffd

static void REGAL_CALL trace_glDeformSGIX(RegalContext *_context, GLbitfield mask)
{
  Internal("trace_glDeformSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeformSGIX(_context, mask);
}

static void REGAL_CALL trace_glDeformationMap3dSGIX(RegalContext *_context, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
  Internal("trace_glDeformationMap3dSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeformationMap3dSGIX(_context, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

static void REGAL_CALL trace_glDeformationMap3fSGIX(RegalContext *_context, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
  Internal("trace_glDeformationMap3fSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDeformationMap3fSGIX(_context, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

static void REGAL_CALL trace_glLoadIdentityDeformationMapSGIX(RegalContext *_context, GLbitfield mask)
{
  Internal("trace_glLoadIdentityDeformationMapSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glLoadIdentityDeformationMapSGIX(_context, mask);
}

// GL_SGIX_reference_plane

static void REGAL_CALL trace_glReferencePlaneSGIX(RegalContext *_context, const GLdouble *equation)
{
  Internal("trace_glReferencePlaneSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReferencePlaneSGIX(_context, equation);
}

// GL_SGIX_sprite

static void REGAL_CALL trace_glSpriteParameterfSGIX(RegalContext *_context, GLenum pname, GLfloat param)
{
  Internal("trace_glSpriteParameterfSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSpriteParameterfSGIX(_context, pname, param);
}

static void REGAL_CALL trace_glSpriteParameterfvSGIX(RegalContext *_context, GLenum pname, const GLfloat *params)
{
  Internal("trace_glSpriteParameterfvSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSpriteParameterfvSGIX(_context, pname, params);
}

static void REGAL_CALL trace_glSpriteParameteriSGIX(RegalContext *_context, GLenum pname, GLint param)
{
  Internal("trace_glSpriteParameteriSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSpriteParameteriSGIX(_context, pname, param);
}

static void REGAL_CALL trace_glSpriteParameterivSGIX(RegalContext *_context, GLenum pname, const GLint *params)
{
  Internal("trace_glSpriteParameterivSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glSpriteParameterivSGIX(_context, pname, params);
}

// GL_SGIX_tag_sample_buffer

static void REGAL_CALL trace_glTagSampleBufferSGIX(RegalContext *_context)
{
  Internal("trace_glTagSampleBufferSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTagSampleBufferSGIX(_context);
}

// GL_SGI_color_table

static void REGAL_CALL trace_glColorTableParameterfvSGI(RegalContext *_context, GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("trace_glColorTableParameterfvSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorTableParameterfvSGI(_context, target, pname, params);
}

static void REGAL_CALL trace_glColorTableParameterivSGI(RegalContext *_context, GLenum target, GLenum pname, const GLint *params)
{
  Internal("trace_glColorTableParameterivSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorTableParameterivSGI(_context, target, pname, params);
}

static void REGAL_CALL trace_glColorTableSGI(RegalContext *_context, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  Internal("trace_glColorTableSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColorTableSGI(_context, target, internalformat, width, format, type, table);
}

static void REGAL_CALL trace_glCopyColorTableSGI(RegalContext *_context, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  Internal("trace_glCopyColorTableSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glCopyColorTableSGI(_context, target, internalformat, x, y, width);
}

static void REGAL_CALL trace_glGetColorTableParameterfvSGI(RegalContext *_context, GLenum target, GLenum pname, GLfloat *params)
{
  Internal("trace_glGetColorTableParameterfvSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTableParameterfvSGI(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetColorTableParameterivSGI(RegalContext *_context, GLenum target, GLenum pname, GLint *params)
{
  Internal("trace_glGetColorTableParameterivSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTableParameterivSGI(_context, target, pname, params);
}

static void REGAL_CALL trace_glGetColorTableSGI(RegalContext *_context, GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  Internal("trace_glGetColorTableSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGetColorTableSGI(_context, target, format, type, table);
}

// GL_SUNX_constant_data

static void REGAL_CALL trace_glFinishTextureSUNX(RegalContext *_context)
{
  Internal("trace_glFinishTextureSUNX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glFinishTextureSUNX(_context);
}

// GL_SUN_global_alpha

static void REGAL_CALL trace_glGlobalAlphaFactorbSUN(RegalContext *_context, GLbyte factor)
{
  Internal("trace_glGlobalAlphaFactorbSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGlobalAlphaFactorbSUN(_context, factor);
}

static void REGAL_CALL trace_glGlobalAlphaFactordSUN(RegalContext *_context, GLdouble factor)
{
  Internal("trace_glGlobalAlphaFactordSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGlobalAlphaFactordSUN(_context, factor);
}

static void REGAL_CALL trace_glGlobalAlphaFactorfSUN(RegalContext *_context, GLfloat factor)
{
  Internal("trace_glGlobalAlphaFactorfSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGlobalAlphaFactorfSUN(_context, factor);
}

static void REGAL_CALL trace_glGlobalAlphaFactoriSUN(RegalContext *_context, GLint factor)
{
  Internal("trace_glGlobalAlphaFactoriSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGlobalAlphaFactoriSUN(_context, factor);
}

static void REGAL_CALL trace_glGlobalAlphaFactorsSUN(RegalContext *_context, GLshort factor)
{
  Internal("trace_glGlobalAlphaFactorsSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGlobalAlphaFactorsSUN(_context, factor);
}

static void REGAL_CALL trace_glGlobalAlphaFactorubSUN(RegalContext *_context, GLubyte factor)
{
  Internal("trace_glGlobalAlphaFactorubSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGlobalAlphaFactorubSUN(_context, factor);
}

static void REGAL_CALL trace_glGlobalAlphaFactoruiSUN(RegalContext *_context, GLuint factor)
{
  Internal("trace_glGlobalAlphaFactoruiSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGlobalAlphaFactoruiSUN(_context, factor);
}

static void REGAL_CALL trace_glGlobalAlphaFactorusSUN(RegalContext *_context, GLushort factor)
{
  Internal("trace_glGlobalAlphaFactorusSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glGlobalAlphaFactorusSUN(_context, factor);
}

// GL_SUN_mesh_array

static void REGAL_CALL trace_glDrawMeshArraysSUN(RegalContext *_context, GLenum mode, GLint first, GLsizei count, GLsizei width)
{
  Internal("trace_glDrawMeshArraysSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glDrawMeshArraysSUN(_context, mode, first, count, width);
}

// GL_SUN_triangle_list

static void REGAL_CALL trace_glReplacementCodePointerSUN(RegalContext *_context, GLenum type, GLsizei stride, const GLvoid **pointer)
{
  Internal("trace_glReplacementCodePointerSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodePointerSUN(_context, type, stride, pointer);
}

static void REGAL_CALL trace_glReplacementCodeubSUN(RegalContext *_context, GLubyte code)
{
  Internal("trace_glReplacementCodeubSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeubSUN(_context, code);
}

static void REGAL_CALL trace_glReplacementCodeubvSUN(RegalContext *_context, const GLubyte *code)
{
  Internal("trace_glReplacementCodeubvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeubvSUN(_context, code);
}

static void REGAL_CALL trace_glReplacementCodeuiSUN(RegalContext *_context, GLuint code)
{
  Internal("trace_glReplacementCodeuiSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiSUN(_context, code);
}

static void REGAL_CALL trace_glReplacementCodeuivSUN(RegalContext *_context, const GLuint *code)
{
  Internal("trace_glReplacementCodeuivSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuivSUN(_context, code);
}

static void REGAL_CALL trace_glReplacementCodeusSUN(RegalContext *_context, GLushort code)
{
  Internal("trace_glReplacementCodeusSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeusSUN(_context, code);
}

static void REGAL_CALL trace_glReplacementCodeusvSUN(RegalContext *_context, const GLushort *code)
{
  Internal("trace_glReplacementCodeusvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeusvSUN(_context, code);
}

// GL_SUN_vertex

static void REGAL_CALL trace_glColor3fVertex3fSUN(RegalContext *_context, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glColor3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3fVertex3fSUN(_context, r, g, b, x, y, z);
}

static void REGAL_CALL trace_glColor3fVertex3fvSUN(RegalContext *_context, const GLfloat *c, const GLfloat *v)
{
  Internal("trace_glColor3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor3fVertex3fvSUN(_context, c, v);
}

static void REGAL_CALL trace_glColor4fNormal3fVertex3fSUN(RegalContext *_context, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glColor4fNormal3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4fNormal3fVertex3fSUN(_context, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL trace_glColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glColor4fNormal3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4fNormal3fVertex3fvSUN(_context, c, n, v);
}

static void REGAL_CALL trace_glColor4ubVertex2fSUN(RegalContext *_context, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
  Internal("trace_glColor4ubVertex2fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4ubVertex2fSUN(_context, r, g, b, a, x, y);
}

static void REGAL_CALL trace_glColor4ubVertex2fvSUN(RegalContext *_context, const GLubyte *c, const GLfloat *v)
{
  Internal("trace_glColor4ubVertex2fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4ubVertex2fvSUN(_context, c, v);
}

static void REGAL_CALL trace_glColor4ubVertex3fSUN(RegalContext *_context, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glColor4ubVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4ubVertex3fSUN(_context, r, g, b, a, x, y, z);
}

static void REGAL_CALL trace_glColor4ubVertex3fvSUN(RegalContext *_context, const GLubyte *c, const GLfloat *v)
{
  Internal("trace_glColor4ubVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glColor4ubVertex3fvSUN(_context, c, v);
}

static void REGAL_CALL trace_glNormal3fVertex3fSUN(RegalContext *_context, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glNormal3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3fVertex3fSUN(_context, nx, ny, nz, x, y, z);
}

static void REGAL_CALL trace_glNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glNormal3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glNormal3fVertex3fvSUN(_context, n, v);
}

static void REGAL_CALL trace_glReplacementCodeuiColor3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glReplacementCodeuiColor3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiColor3fVertex3fSUN(_context, rc, r, g, b, x, y, z);
}

static void REGAL_CALL trace_glReplacementCodeuiColor3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
  Internal("trace_glReplacementCodeuiColor3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiColor3fVertex3fvSUN(_context, rc, c, v);
}

static void REGAL_CALL trace_glReplacementCodeuiColor4fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glReplacementCodeuiColor4fNormal3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiColor4fNormal3fVertex3fSUN(_context, rc, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL trace_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glReplacementCodeuiColor4fNormal3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiColor4fNormal3fVertex3fvSUN(_context, rc, c, n, v);
}

static void REGAL_CALL trace_glReplacementCodeuiColor4ubVertex3fSUN(RegalContext *_context, GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glReplacementCodeuiColor4ubVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiColor4ubVertex3fSUN(_context, rc, r, g, b, a, x, y, z);
}

static void REGAL_CALL trace_glReplacementCodeuiColor4ubVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
  Internal("trace_glReplacementCodeuiColor4ubVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiColor4ubVertex3fvSUN(_context, rc, c, v);
}

static void REGAL_CALL trace_glReplacementCodeuiNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glReplacementCodeuiNormal3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiNormal3fVertex3fSUN(_context, rc, nx, ny, nz, x, y, z);
}

static void REGAL_CALL trace_glReplacementCodeuiNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glReplacementCodeuiNormal3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiNormal3fVertex3fvSUN(_context, rc, n, v);
}

static void REGAL_CALL trace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(_context, rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL trace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(_context, rc, tc, c, n, v);
}

static void REGAL_CALL trace_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(_context, rc, s, t, nx, ny, nz, x, y, z);
}

static void REGAL_CALL trace_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(_context, rc, tc, n, v);
}

static void REGAL_CALL trace_glReplacementCodeuiTexCoord2fVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glReplacementCodeuiTexCoord2fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiTexCoord2fVertex3fSUN(_context, rc, s, t, x, y, z);
}

static void REGAL_CALL trace_glReplacementCodeuiTexCoord2fVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
  Internal("trace_glReplacementCodeuiTexCoord2fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiTexCoord2fVertex3fvSUN(_context, rc, tc, v);
}

static void REGAL_CALL trace_glReplacementCodeuiVertex3fSUN(RegalContext *_context, GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glReplacementCodeuiVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiVertex3fSUN(_context, rc, x, y, z);
}

static void REGAL_CALL trace_glReplacementCodeuiVertex3fvSUN(RegalContext *_context, const GLuint *rc, const GLfloat *v)
{
  Internal("trace_glReplacementCodeuiVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glReplacementCodeuiVertex3fvSUN(_context, rc, v);
}

static void REGAL_CALL trace_glTexCoord2fColor3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glTexCoord2fColor3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fColor3fVertex3fSUN(_context, s, t, r, g, b, x, y, z);
}

static void REGAL_CALL trace_glTexCoord2fColor3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
  Internal("trace_glTexCoord2fColor3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fColor3fVertex3fvSUN(_context, tc, c, v);
}

static void REGAL_CALL trace_glTexCoord2fColor4fNormal3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glTexCoord2fColor4fNormal3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fColor4fNormal3fVertex3fSUN(_context, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL trace_glTexCoord2fColor4fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glTexCoord2fColor4fNormal3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fColor4fNormal3fVertex3fvSUN(_context, tc, c, n, v);
}

static void REGAL_CALL trace_glTexCoord2fColor4ubVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glTexCoord2fColor4ubVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fColor4ubVertex3fSUN(_context, s, t, r, g, b, a, x, y, z);
}

static void REGAL_CALL trace_glTexCoord2fColor4ubVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
  Internal("trace_glTexCoord2fColor4ubVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fColor4ubVertex3fvSUN(_context, tc, c, v);
}

static void REGAL_CALL trace_glTexCoord2fNormal3fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glTexCoord2fNormal3fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fNormal3fVertex3fSUN(_context, s, t, nx, ny, nz, x, y, z);
}

static void REGAL_CALL trace_glTexCoord2fNormal3fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glTexCoord2fNormal3fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fNormal3fVertex3fvSUN(_context, tc, n, v);
}

static void REGAL_CALL trace_glTexCoord2fVertex3fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("trace_glTexCoord2fVertex3fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fVertex3fSUN(_context, s, t, x, y, z);
}

static void REGAL_CALL trace_glTexCoord2fVertex3fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *v)
{
  Internal("trace_glTexCoord2fVertex3fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord2fVertex3fvSUN(_context, tc, v);
}

static void REGAL_CALL trace_glTexCoord4fColor4fNormal3fVertex4fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glTexCoord4fColor4fNormal3fVertex4fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4fColor4fNormal3fVertex4fSUN(_context, s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}

static void REGAL_CALL trace_glTexCoord4fColor4fNormal3fVertex4fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  Internal("trace_glTexCoord4fColor4fNormal3fVertex4fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4fColor4fNormal3fVertex4fvSUN(_context, tc, c, n, v);
}

static void REGAL_CALL trace_glTexCoord4fVertex4fSUN(RegalContext *_context, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("trace_glTexCoord4fVertex4fSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4fVertex4fSUN(_context, s, t, p, q, x, y, z, w);
}

static void REGAL_CALL trace_glTexCoord4fVertex4fvSUN(RegalContext *_context, const GLfloat *tc, const GLfloat *v)
{
  Internal("trace_glTexCoord4fVertex4fvSUN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glTexCoord4fVertex4fvSUN(_context, tc, v);
}

// GL_WIN_swap_hint

static void REGAL_CALL trace_glAddSwapHintRectWIN(RegalContext *_context, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("trace_glAddSwapHintRectWIN","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //RegalAssert(_instance.currentContext);
  //Push<Dispatch::GL *> _push(_instance.nextDispatchTable);
  //_instance.nextDispatchTable = _instance.currentContext->dispatcher.trace.next();
  Trace::glAddSwapHintRectWIN(_context, x, y, width, height);
}

#if REGAL_SYS_WGL

// WGL_3DL_stereo_control

static BOOL REGAL_CALL trace_wglSetStereoEmitterState3DL(RegalContext *_context, HDC hDC, UINT uState)
{
  Internal("trace_wglSetStereoEmitterState3DL","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSetStereoEmitterState3DL(_context, hDC, uState);
  return ret;
}

// WGL_AMD_gpu_association

static VOID REGAL_CALL trace_wglBlitContextFramebufferAMD(RegalContext *_context, HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  Internal("trace_wglBlitContextFramebufferAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::wglBlitContextFramebufferAMD(_context, dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static HGLRC REGAL_CALL trace_wglCreateAssociatedContextAMD(RegalContext *_context, UINT id)
{
  Internal("trace_wglCreateAssociatedContextAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HGLRC  ret = Trace::wglCreateAssociatedContextAMD(_context, id);
  return ret;
}

static HGLRC REGAL_CALL trace_wglCreateAssociatedContextAttribsAMD(RegalContext *_context, UINT id, HGLRC hShareContext, const int *attribList)
{
  Internal("trace_wglCreateAssociatedContextAttribsAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HGLRC  ret = Trace::wglCreateAssociatedContextAttribsAMD(_context, id, hShareContext, attribList);
  return ret;
}

static BOOL REGAL_CALL trace_wglDeleteAssociatedContextAMD(RegalContext *_context, HGLRC hglrc)
{
  Internal("trace_wglDeleteAssociatedContextAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDeleteAssociatedContextAMD(_context, hglrc);
  return ret;
}

static UINT REGAL_CALL trace_wglGetContextGPUIDAMD(RegalContext *_context, HGLRC hglrc)
{
  Internal("trace_wglGetContextGPUIDAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  UINT  ret = Trace::wglGetContextGPUIDAMD(_context, hglrc);
  return ret;
}

static HGLRC REGAL_CALL trace_wglGetCurrentAssociatedContextAMD(RegalContext *_context)
{
  Internal("trace_wglGetCurrentAssociatedContextAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HGLRC  ret = Trace::wglGetCurrentAssociatedContextAMD(_context);
  return ret;
}

static UINT REGAL_CALL trace_wglGetGPUIDsAMD(RegalContext *_context, UINT maxCount, UINT *ids)
{
  Internal("trace_wglGetGPUIDsAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  UINT  ret = Trace::wglGetGPUIDsAMD(_context, maxCount, ids);
  return ret;
}

static INT REGAL_CALL trace_wglGetGPUInfoAMD(RegalContext *_context, UINT id, int property, GLenum dataType, UINT size, void *data)
{
  Internal("trace_wglGetGPUInfoAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  INT  ret = Trace::wglGetGPUInfoAMD(_context, id, property, dataType, size, data);
  return ret;
}

static BOOL REGAL_CALL trace_wglMakeAssociatedContextCurrentAMD(RegalContext *_context, HGLRC hglrc)
{
  Internal("trace_wglMakeAssociatedContextCurrentAMD","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglMakeAssociatedContextCurrentAMD(_context, hglrc);
  return ret;
}

// WGL_ARB_buffer_region

static HANDLE REGAL_CALL trace_wglCreateBufferRegionARB(RegalContext *_context, HDC hDC, int iLayerPlane, UINT uType)
{
  Internal("trace_wglCreateBufferRegionARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HANDLE  ret = Trace::wglCreateBufferRegionARB(_context, hDC, iLayerPlane, uType);
  return ret;
}

static VOID REGAL_CALL trace_wglDeleteBufferRegionARB(RegalContext *_context, HANDLE hRegion)
{
  Internal("trace_wglDeleteBufferRegionARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::wglDeleteBufferRegionARB(_context, hRegion);
}

static BOOL REGAL_CALL trace_wglRestoreBufferRegionARB(RegalContext *_context, HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
{
  Internal("trace_wglRestoreBufferRegionARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglRestoreBufferRegionARB(_context, hRegion, x, y, width, height, xSrc, ySrc);
  return ret;
}

static BOOL REGAL_CALL trace_wglSaveBufferRegionARB(RegalContext *_context, HANDLE hRegion, int x, int y, int width, int height)
{
  Internal("trace_wglSaveBufferRegionARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSaveBufferRegionARB(_context, hRegion, x, y, width, height);
  return ret;
}

// WGL_ARB_create_context

static HGLRC REGAL_CALL trace_wglCreateContextAttribsARB(RegalContext *_context, HDC hDC, HGLRC hShareContext, const int *piAttribList)
{
  Internal("trace_wglCreateContextAttribsARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HGLRC  ret = Trace::wglCreateContextAttribsARB(_context, hDC, hShareContext, piAttribList);
  return ret;
}

// WGL_ARB_extensions_string

static const char *REGAL_CALL trace_wglGetExtensionsStringARB(RegalContext *_context, HDC hDC)
{
  Internal("trace_wglGetExtensionsStringARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  const char * ret = Trace::wglGetExtensionsStringARB(_context, hDC);
  return ret;
}

// WGL_ARB_make_current_read

static HDC REGAL_CALL trace_wglGetCurrentReadDCARB(RegalContext *_context)
{
  Internal("trace_wglGetCurrentReadDCARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HDC  ret = Trace::wglGetCurrentReadDCARB(_context);
  return ret;
}

static BOOL REGAL_CALL trace_wglMakeContextCurrentARB(RegalContext *_context, HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  Internal("trace_wglMakeContextCurrentARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglMakeContextCurrentARB(_context, hDrawDC, hReadDC, hglrc);
  return ret;
}

// WGL_ARB_pbuffer

static HPBUFFERARB REGAL_CALL trace_wglCreatePbufferARB(RegalContext *_context, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
{
  Internal("trace_wglCreatePbufferARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HPBUFFERARB  ret = Trace::wglCreatePbufferARB(_context, hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  return ret;
}

static BOOL REGAL_CALL trace_wglDestroyPbufferARB(RegalContext *_context, HPBUFFERARB hPbuffer)
{
  Internal("trace_wglDestroyPbufferARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDestroyPbufferARB(_context, hPbuffer);
  return ret;
}

static HDC REGAL_CALL trace_wglGetPbufferDCARB(RegalContext *_context, HPBUFFERARB hPbuffer)
{
  Internal("trace_wglGetPbufferDCARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HDC  ret = Trace::wglGetPbufferDCARB(_context, hPbuffer);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryPbufferARB(RegalContext *_context, HPBUFFERARB hPbuffer, int iAttribute, int *piValue)
{
  Internal("trace_wglQueryPbufferARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryPbufferARB(_context, hPbuffer, iAttribute, piValue);
  return ret;
}

static int REGAL_CALL trace_wglReleasePbufferDCARB(RegalContext *_context, HPBUFFERARB hPbuffer, HDC hDC)
{
  Internal("trace_wglReleasePbufferDCARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglReleasePbufferDCARB(_context, hPbuffer, hDC);
  return ret;
}

// WGL_ARB_render_texture

static BOOL REGAL_CALL trace_wglBindTexImageARB(RegalContext *_context, HPBUFFERARB hPbuffer, int iBuffer)
{
  Internal("trace_wglBindTexImageARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglBindTexImageARB(_context, hPbuffer, iBuffer);
  return ret;
}

static BOOL REGAL_CALL trace_wglReleaseTexImageARB(RegalContext *_context, HPBUFFERARB hPbuffer, int iBuffer)
{
  Internal("trace_wglReleaseTexImageARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglReleaseTexImageARB(_context, hPbuffer, iBuffer);
  return ret;
}

static BOOL REGAL_CALL trace_wglSetPbufferAttribARB(RegalContext *_context, HPBUFFERARB hPbuffer, const int *piAttribList)
{
  Internal("trace_wglSetPbufferAttribARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSetPbufferAttribARB(_context, hPbuffer, piAttribList);
  return ret;
}

// WGL_EXT_display_color_table

static GLboolean REGAL_CALL trace_wglBindDisplayColorTableEXT(RegalContext *_context, GLushort id)
{
  Internal("trace_wglBindDisplayColorTableEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLboolean  ret = Trace::wglBindDisplayColorTableEXT(_context, id);
  return ret;
}

static GLboolean REGAL_CALL trace_wglCreateDisplayColorTableEXT(RegalContext *_context, GLushort id)
{
  Internal("trace_wglCreateDisplayColorTableEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLboolean  ret = Trace::wglCreateDisplayColorTableEXT(_context, id);
  return ret;
}

static VOID REGAL_CALL trace_wglDestroyDisplayColorTableEXT(RegalContext *_context, GLushort id)
{
  Internal("trace_wglDestroyDisplayColorTableEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::wglDestroyDisplayColorTableEXT(_context, id);
}

static GLboolean REGAL_CALL trace_wglLoadDisplayColorTableEXT(RegalContext *_context, const GLushort *table, GLuint length)
{
  Internal("trace_wglLoadDisplayColorTableEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLboolean  ret = Trace::wglLoadDisplayColorTableEXT(_context, table, length);
  return ret;
}

// WGL_EXT_extensions_string

static const char *REGAL_CALL trace_wglGetExtensionsStringEXT(RegalContext *_context)
{
  Internal("trace_wglGetExtensionsStringEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  const char * ret = Trace::wglGetExtensionsStringEXT(_context);
  return ret;
}

// WGL_EXT_make_current_read

static HDC REGAL_CALL trace_wglGetCurrentReadDCEXT(RegalContext *_context)
{
  Internal("trace_wglGetCurrentReadDCEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HDC  ret = Trace::wglGetCurrentReadDCEXT(_context);
  return ret;
}

static BOOL REGAL_CALL trace_wglMakeContextCurrentEXT(RegalContext *_context, HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  Internal("trace_wglMakeContextCurrentEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglMakeContextCurrentEXT(_context, hDrawDC, hReadDC, hglrc);
  return ret;
}

// WGL_EXT_pbuffer

static HPBUFFEREXT REGAL_CALL trace_wglCreatePbufferEXT(RegalContext *_context, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
{
  Internal("trace_wglCreatePbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HPBUFFEREXT  ret = Trace::wglCreatePbufferEXT(_context, hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  return ret;
}

static BOOL REGAL_CALL trace_wglDestroyPbufferEXT(RegalContext *_context, HPBUFFEREXT hPbuffer)
{
  Internal("trace_wglDestroyPbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDestroyPbufferEXT(_context, hPbuffer);
  return ret;
}

static HDC REGAL_CALL trace_wglGetPbufferDCEXT(RegalContext *_context, HPBUFFEREXT hPbuffer)
{
  Internal("trace_wglGetPbufferDCEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HDC  ret = Trace::wglGetPbufferDCEXT(_context, hPbuffer);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryPbufferEXT(RegalContext *_context, HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)
{
  Internal("trace_wglQueryPbufferEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryPbufferEXT(_context, hPbuffer, iAttribute, piValue);
  return ret;
}

static int REGAL_CALL trace_wglReleasePbufferDCEXT(RegalContext *_context, HPBUFFEREXT hPbuffer, HDC hDC)
{
  Internal("trace_wglReleasePbufferDCEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglReleasePbufferDCEXT(_context, hPbuffer, hDC);
  return ret;
}

// WGL_EXT_pixel_format

static BOOL REGAL_CALL trace_wglChoosePixelFormatEXT(RegalContext *_context, HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
{
  Internal("trace_wglChoosePixelFormatEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglChoosePixelFormatEXT(_context, hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  return ret;
}

// WGL_EXT_swap_control

static int REGAL_CALL trace_wglGetSwapIntervalEXT(RegalContext *_context)
{
  Internal("trace_wglGetSwapIntervalEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglGetSwapIntervalEXT(_context);
  return ret;
}

static BOOL REGAL_CALL trace_wglSwapIntervalEXT(RegalContext *_context, int interval)
{
  Internal("trace_wglSwapIntervalEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSwapIntervalEXT(_context, interval);
  return ret;
}

// WGL_GDI

static int REGAL_CALL trace_wglChoosePixelFormat(RegalContext *_context, HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd)
{
  Internal("trace_wglChoosePixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglChoosePixelFormat(_context, hDC, ppfd);
  return ret;
}

static int REGAL_CALL trace_wglDescribePixelFormat(RegalContext *_context, HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
{
  Internal("trace_wglDescribePixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglDescribePixelFormat(_context, hDC, iPixelFormat, nBytes, ppfd);
  return ret;
}

static int REGAL_CALL trace_wglGetPixelFormat(RegalContext *_context, HDC hDC)
{
  Internal("trace_wglGetPixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglGetPixelFormat(_context, hDC);
  return ret;
}

static BOOL REGAL_CALL trace_wglSetPixelFormat(RegalContext *_context, HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd)
{
  Internal("trace_wglSetPixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSetPixelFormat(_context, hDC, iPixelFormat, ppfd);
  return ret;
}

static BOOL REGAL_CALL trace_wglSwapBuffers(RegalContext *_context, HDC hDC)
{
  Internal("trace_wglSwapBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSwapBuffers(_context, hDC);
  return ret;
}

// WGL_I3D_digital_video_control

static BOOL REGAL_CALL trace_wglGetDigitalVideoParametersI3D(RegalContext *_context, HDC hDC, int iAttribute, int *piValue)
{
  Internal("trace_wglGetDigitalVideoParametersI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetDigitalVideoParametersI3D(_context, hDC, iAttribute, piValue);
  return ret;
}

static BOOL REGAL_CALL trace_wglSetDigitalVideoParametersI3D(RegalContext *_context, HDC hDC, int iAttribute, const int *piValue)
{
  Internal("trace_wglSetDigitalVideoParametersI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSetDigitalVideoParametersI3D(_context, hDC, iAttribute, piValue);
  return ret;
}

// WGL_I3D_gamma

static BOOL REGAL_CALL trace_wglGetGammaTableI3D(RegalContext *_context, HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)
{
  Internal("trace_wglGetGammaTableI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetGammaTableI3D(_context, hDC, iEntries, puRed, puGreen, puBlue);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetGammaTableParametersI3D(RegalContext *_context, HDC hDC, int iAttribute, int *piValue)
{
  Internal("trace_wglGetGammaTableParametersI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetGammaTableParametersI3D(_context, hDC, iAttribute, piValue);
  return ret;
}

static BOOL REGAL_CALL trace_wglSetGammaTableI3D(RegalContext *_context, HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)
{
  Internal("trace_wglSetGammaTableI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSetGammaTableI3D(_context, hDC, iEntries, puRed, puGreen, puBlue);
  return ret;
}

static BOOL REGAL_CALL trace_wglSetGammaTableParametersI3D(RegalContext *_context, HDC hDC, int iAttribute, const int *piValue)
{
  Internal("trace_wglSetGammaTableParametersI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSetGammaTableParametersI3D(_context, hDC, iAttribute, piValue);
  return ret;
}

// WGL_I3D_genlock

static BOOL REGAL_CALL trace_wglDisableGenlockI3D(RegalContext *_context, HDC hDC)
{
  Internal("trace_wglDisableGenlockI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDisableGenlockI3D(_context, hDC);
  return ret;
}

static BOOL REGAL_CALL trace_wglEnableGenlockI3D(RegalContext *_context, HDC hDC)
{
  Internal("trace_wglEnableGenlockI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglEnableGenlockI3D(_context, hDC);
  return ret;
}

static BOOL REGAL_CALL trace_wglGenlockSampleRateI3D(RegalContext *_context, HDC hDC, UINT uRate)
{
  Internal("trace_wglGenlockSampleRateI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGenlockSampleRateI3D(_context, hDC, uRate);
  return ret;
}

static BOOL REGAL_CALL trace_wglGenlockSourceDelayI3D(RegalContext *_context, HDC hDC, UINT uDelay)
{
  Internal("trace_wglGenlockSourceDelayI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGenlockSourceDelayI3D(_context, hDC, uDelay);
  return ret;
}

static BOOL REGAL_CALL trace_wglGenlockSourceEdgeI3D(RegalContext *_context, HDC hDC, UINT uEdge)
{
  Internal("trace_wglGenlockSourceEdgeI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGenlockSourceEdgeI3D(_context, hDC, uEdge);
  return ret;
}

static BOOL REGAL_CALL trace_wglGenlockSourceI3D(RegalContext *_context, HDC hDC, UINT uSource)
{
  Internal("trace_wglGenlockSourceI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGenlockSourceI3D(_context, hDC, uSource);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetGenlockSampleRateI3D(RegalContext *_context, HDC hDC, UINT *uRate)
{
  Internal("trace_wglGetGenlockSampleRateI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetGenlockSampleRateI3D(_context, hDC, uRate);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetGenlockSourceDelayI3D(RegalContext *_context, HDC hDC, UINT *uDelay)
{
  Internal("trace_wglGetGenlockSourceDelayI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetGenlockSourceDelayI3D(_context, hDC, uDelay);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetGenlockSourceEdgeI3D(RegalContext *_context, HDC hDC, UINT *uEdge)
{
  Internal("trace_wglGetGenlockSourceEdgeI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetGenlockSourceEdgeI3D(_context, hDC, uEdge);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetGenlockSourceI3D(RegalContext *_context, HDC hDC, UINT *uSource)
{
  Internal("trace_wglGetGenlockSourceI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetGenlockSourceI3D(_context, hDC, uSource);
  return ret;
}

static BOOL REGAL_CALL trace_wglIsEnabledGenlockI3D(RegalContext *_context, HDC hDC, BOOL *pFlag)
{
  Internal("trace_wglIsEnabledGenlockI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglIsEnabledGenlockI3D(_context, hDC, pFlag);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryGenlockMaxSourceDelayI3D(RegalContext *_context, HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)
{
  Internal("trace_wglQueryGenlockMaxSourceDelayI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryGenlockMaxSourceDelayI3D(_context, hDC, uMaxLineDelay, uMaxPixelDelay);
  return ret;
}

// WGL_I3D_image_buffer

static BOOL REGAL_CALL trace_wglAssociateImageBufferEventsI3D(RegalContext *_context, HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)
{
  Internal("trace_wglAssociateImageBufferEventsI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglAssociateImageBufferEventsI3D(_context, hDC, pEvent, pAddress, pSize, count);
  return ret;
}

static LPVOID REGAL_CALL trace_wglCreateImageBufferI3D(RegalContext *_context, HDC hDC, DWORD dwSize, UINT uFlags)
{
  Internal("trace_wglCreateImageBufferI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  LPVOID  ret = Trace::wglCreateImageBufferI3D(_context, hDC, dwSize, uFlags);
  return ret;
}

static BOOL REGAL_CALL trace_wglDestroyImageBufferI3D(RegalContext *_context, HDC hDC, LPVOID pAddress)
{
  Internal("trace_wglDestroyImageBufferI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDestroyImageBufferI3D(_context, hDC, pAddress);
  return ret;
}

static BOOL REGAL_CALL trace_wglReleaseImageBufferEventsI3D(RegalContext *_context, HDC hDC, const LPVOID *pAddress, UINT count)
{
  Internal("trace_wglReleaseImageBufferEventsI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglReleaseImageBufferEventsI3D(_context, hDC, pAddress, count);
  return ret;
}

// WGL_I3D_swap_frame_lock

static BOOL REGAL_CALL trace_wglDisableFrameLockI3D(RegalContext *_context)
{
  Internal("trace_wglDisableFrameLockI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDisableFrameLockI3D(_context);
  return ret;
}

static BOOL REGAL_CALL trace_wglEnableFrameLockI3D(RegalContext *_context)
{
  Internal("trace_wglEnableFrameLockI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglEnableFrameLockI3D(_context);
  return ret;
}

static BOOL REGAL_CALL trace_wglIsEnabledFrameLockI3D(RegalContext *_context, BOOL *pFlag)
{
  Internal("trace_wglIsEnabledFrameLockI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglIsEnabledFrameLockI3D(_context, pFlag);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryFrameLockMasterI3D(RegalContext *_context, BOOL *pFlag)
{
  Internal("trace_wglQueryFrameLockMasterI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryFrameLockMasterI3D(_context, pFlag);
  return ret;
}

// WGL_I3D_swap_frame_usage

static BOOL REGAL_CALL trace_wglBeginFrameTrackingI3D(RegalContext *_context)
{
  Internal("trace_wglBeginFrameTrackingI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglBeginFrameTrackingI3D(_context);
  return ret;
}

static BOOL REGAL_CALL trace_wglEndFrameTrackingI3D(RegalContext *_context)
{
  Internal("trace_wglEndFrameTrackingI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglEndFrameTrackingI3D(_context);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetFrameUsageI3D(RegalContext *_context, float *pUsage)
{
  Internal("trace_wglGetFrameUsageI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetFrameUsageI3D(_context, pUsage);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryFrameTrackingI3D(RegalContext *_context, DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)
{
  Internal("trace_wglQueryFrameTrackingI3D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryFrameTrackingI3D(_context, pFrameCount, pMissedFrames, pLastMissedUsage);
  return ret;
}

// WGL_NV_DX_interop

static BOOL REGAL_CALL trace_wglDXCloseDeviceNV(RegalContext *_context, HANDLE hDevice)
{
  Internal("trace_wglDXCloseDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDXCloseDeviceNV(_context, hDevice);
  return ret;
}

static BOOL REGAL_CALL trace_wglDXLockObjectsNV(RegalContext *_context, HANDLE hDevice, GLint count, HANDLE *hObjects)
{
  Internal("trace_wglDXLockObjectsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDXLockObjectsNV(_context, hDevice, count, hObjects);
  return ret;
}

static BOOL REGAL_CALL trace_wglDXObjectAccessNV(RegalContext *_context, HANDLE hObject, GLenum access)
{
  Internal("trace_wglDXObjectAccessNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDXObjectAccessNV(_context, hObject, access);
  return ret;
}

static HANDLE REGAL_CALL trace_wglDXOpenDeviceNV(RegalContext *_context, GLvoid *dxDevice)
{
  Internal("trace_wglDXOpenDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HANDLE  ret = Trace::wglDXOpenDeviceNV(_context, dxDevice);
  return ret;
}

static HANDLE REGAL_CALL trace_wglDXRegisterObjectNV(RegalContext *_context, HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access)
{
  Internal("trace_wglDXRegisterObjectNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HANDLE  ret = Trace::wglDXRegisterObjectNV(_context, hDevice, dxObject, name, type, access);
  return ret;
}

static BOOL REGAL_CALL trace_wglDXSetResourceShareHandleNV(RegalContext *_context, GLvoid *dxObject, HANDLE shareHandle)
{
  Internal("trace_wglDXSetResourceShareHandleNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDXSetResourceShareHandleNV(_context, dxObject, shareHandle);
  return ret;
}

static BOOL REGAL_CALL trace_wglDXUnlockObjectsNV(RegalContext *_context, HANDLE hDevice, GLint count, HANDLE *hObjects)
{
  Internal("trace_wglDXUnlockObjectsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDXUnlockObjectsNV(_context, hDevice, count, hObjects);
  return ret;
}

static BOOL REGAL_CALL trace_wglDXUnregisterObjectNV(RegalContext *_context, HANDLE hDevice, HANDLE hObject)
{
  Internal("trace_wglDXUnregisterObjectNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDXUnregisterObjectNV(_context, hDevice, hObject);
  return ret;
}

// WGL_NV_copy_image

static BOOL REGAL_CALL trace_wglCopyImageSubDataNV(RegalContext *_context, HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("trace_wglCopyImageSubDataNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglCopyImageSubDataNV(_context, hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  return ret;
}

// WGL_NV_gpu_affinity

static HDC REGAL_CALL trace_wglCreateAffinityDCNV(RegalContext *_context, const HGPUNV *phGpuList)
{
  Internal("trace_wglCreateAffinityDCNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HDC  ret = Trace::wglCreateAffinityDCNV(_context, phGpuList);
  return ret;
}

static BOOL REGAL_CALL trace_wglDeleteDCNV(RegalContext *_context, HDC hAffinityDC)
{
  Internal("trace_wglDeleteDCNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDeleteDCNV(_context, hAffinityDC);
  return ret;
}

static BOOL REGAL_CALL trace_wglEnumGpusFromAffinityDCNV(RegalContext *_context, HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)
{
  Internal("trace_wglEnumGpusFromAffinityDCNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglEnumGpusFromAffinityDCNV(_context, hAffinityDC, iGpuIndex, hGpu);
  return ret;
}

static BOOL REGAL_CALL trace_wglEnumGpusNV(RegalContext *_context, UINT iGpuIndex, HGPUNV *phGpu)
{
  Internal("trace_wglEnumGpusNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglEnumGpusNV(_context, iGpuIndex, phGpu);
  return ret;
}

// WGL_NV_present_video

static BOOL REGAL_CALL trace_wglBindVideoDeviceNV(RegalContext *_context, HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)
{
  Internal("trace_wglBindVideoDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglBindVideoDeviceNV(_context, hDC, uVideoSlot, hVideoDevice, piAttribList);
  return ret;
}

static int REGAL_CALL trace_wglEnumerateVideoDevicesNV(RegalContext *_context, HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)
{
  Internal("trace_wglEnumerateVideoDevicesNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglEnumerateVideoDevicesNV(_context, hDC, phDeviceList);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryCurrentContextNV(RegalContext *_context, int iAttribute, int *piValue)
{
  Internal("trace_wglQueryCurrentContextNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryCurrentContextNV(_context, iAttribute, piValue);
  return ret;
}

// WGL_NV_swap_group

static BOOL REGAL_CALL trace_wglBindSwapBarrierNV(RegalContext *_context, GLuint group, GLuint barrier)
{
  Internal("trace_wglBindSwapBarrierNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglBindSwapBarrierNV(_context, group, barrier);
  return ret;
}

static BOOL REGAL_CALL trace_wglJoinSwapGroupNV(RegalContext *_context, HDC hDC, GLuint group)
{
  Internal("trace_wglJoinSwapGroupNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglJoinSwapGroupNV(_context, hDC, group);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryFrameCountNV(RegalContext *_context, HDC hDC, GLuint *count)
{
  Internal("trace_wglQueryFrameCountNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryFrameCountNV(_context, hDC, count);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryMaxSwapGroupsNV(RegalContext *_context, HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)
{
  Internal("trace_wglQueryMaxSwapGroupsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryMaxSwapGroupsNV(_context, hDC, maxGroups, maxBarriers);
  return ret;
}

static BOOL REGAL_CALL trace_wglQuerySwapGroupNV(RegalContext *_context, HDC hDC, GLuint *group, GLuint *barrier)
{
  Internal("trace_wglQuerySwapGroupNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQuerySwapGroupNV(_context, hDC, group, barrier);
  return ret;
}

static BOOL REGAL_CALL trace_wglResetFrameCountNV(RegalContext *_context, HDC hDC)
{
  Internal("trace_wglResetFrameCountNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglResetFrameCountNV(_context, hDC);
  return ret;
}

// WGL_NV_vertex_array_range

static void *REGAL_CALL trace_wglAllocateMemoryNV(RegalContext *_context, GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
{
  Internal("trace_wglAllocateMemoryNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  void * ret = Trace::wglAllocateMemoryNV(_context, size, readfreq, writefreq, priority);
  return ret;
}

static void REGAL_CALL trace_wglFreeMemoryNV(RegalContext *_context, void *pointer)
{
  Internal("trace_wglFreeMemoryNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::wglFreeMemoryNV(_context, pointer);
}

// WGL_NV_video_capture

static BOOL REGAL_CALL trace_wglBindVideoCaptureDeviceNV(RegalContext *_context, UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
{
  Internal("trace_wglBindVideoCaptureDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglBindVideoCaptureDeviceNV(_context, uVideoSlot, hDevice);
  return ret;
}

static UINT REGAL_CALL trace_wglEnumerateVideoCaptureDevicesNV(RegalContext *_context, HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList)
{
  Internal("trace_wglEnumerateVideoCaptureDevicesNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  UINT  ret = Trace::wglEnumerateVideoCaptureDevicesNV(_context, hDC, phDeviceList);
  return ret;
}

static BOOL REGAL_CALL trace_wglLockVideoCaptureDeviceNV(RegalContext *_context, HDC hDC, HVIDEOINPUTDEVICENV hDevice)
{
  Internal("trace_wglLockVideoCaptureDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglLockVideoCaptureDeviceNV(_context, hDC, hDevice);
  return ret;
}

static BOOL REGAL_CALL trace_wglQueryVideoCaptureDeviceNV(RegalContext *_context, HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)
{
  Internal("trace_wglQueryVideoCaptureDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglQueryVideoCaptureDeviceNV(_context, hDC, hDevice, iAttribute, piValue);
  return ret;
}

static BOOL REGAL_CALL trace_wglReleaseVideoCaptureDeviceNV(RegalContext *_context, HDC hDC, HVIDEOINPUTDEVICENV hDevice)
{
  Internal("trace_wglReleaseVideoCaptureDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglReleaseVideoCaptureDeviceNV(_context, hDC, hDevice);
  return ret;
}

// WGL_NV_video_output

static BOOL REGAL_CALL trace_wglBindVideoImageNV(RegalContext *_context, HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  Internal("trace_wglBindVideoImageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglBindVideoImageNV(_context, hVideoDevice, hPbuffer, iVideoBuffer);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetVideoDeviceNV(RegalContext *_context, HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)
{
  Internal("trace_wglGetVideoDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetVideoDeviceNV(_context, hDC, numDevices, hVideoDevice);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetVideoInfoNV(RegalContext *_context, HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
{
  Internal("trace_wglGetVideoInfoNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetVideoInfoNV(_context, hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  return ret;
}

static BOOL REGAL_CALL trace_wglReleaseVideoDeviceNV(RegalContext *_context, HPVIDEODEV hVideoDevice)
{
  Internal("trace_wglReleaseVideoDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglReleaseVideoDeviceNV(_context, hVideoDevice);
  return ret;
}

static BOOL REGAL_CALL trace_wglReleaseVideoImageNV(RegalContext *_context, HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  Internal("trace_wglReleaseVideoImageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglReleaseVideoImageNV(_context, hPbuffer, iVideoBuffer);
  return ret;
}

static BOOL REGAL_CALL trace_wglSendPbufferToVideoNV(RegalContext *_context, HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)
{
  Internal("trace_wglSendPbufferToVideoNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSendPbufferToVideoNV(_context, hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  return ret;
}

// WGL_OML_sync_control

static BOOL REGAL_CALL trace_wglGetMscRateOML(RegalContext *_context, HDC hDC, INT32 *numerator, INT32 *denominator)
{
  Internal("trace_wglGetMscRateOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetMscRateOML(_context, hDC, numerator, denominator);
  return ret;
}

static BOOL REGAL_CALL trace_wglGetSyncValuesOML(RegalContext *_context, HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  Internal("trace_wglGetSyncValuesOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglGetSyncValuesOML(_context, hDC, ust, msc, sbc);
  return ret;
}

static INT64 REGAL_CALL trace_wglSwapBuffersMscOML(RegalContext *_context, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  Internal("trace_wglSwapBuffersMscOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  INT64  ret = Trace::wglSwapBuffersMscOML(_context, hDC, target_msc, divisor, remainder);
  return ret;
}

static INT64 REGAL_CALL trace_wglSwapLayerBuffersMscOML(RegalContext *_context, HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  Internal("trace_wglSwapLayerBuffersMscOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  INT64  ret = Trace::wglSwapLayerBuffersMscOML(_context, hDC, fuPlanes, target_msc, divisor, remainder);
  return ret;
}

static BOOL REGAL_CALL trace_wglWaitForMscOML(RegalContext *_context, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  Internal("trace_wglWaitForMscOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglWaitForMscOML(_context, hDC, target_msc, divisor, remainder, ust, msc, sbc);
  return ret;
}

static BOOL REGAL_CALL trace_wglWaitForSbcOML(RegalContext *_context, HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)
{
  Internal("trace_wglWaitForSbcOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglWaitForSbcOML(_context, hDC, target_sbc, ust, msc, sbc);
  return ret;
}

// WGL_core

static BOOL REGAL_CALL trace_wglCopyContext(RegalContext *_context, HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
{
  Internal("trace_wglCopyContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglCopyContext(_context, hglrcSrc, hglrcDst, mask);
  return ret;
}

static HGLRC REGAL_CALL trace_wglCreateContext(RegalContext *_context, HDC hDC)
{
  Internal("trace_wglCreateContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HGLRC  ret = Trace::wglCreateContext(_context, hDC);
  return ret;
}

static HGLRC REGAL_CALL trace_wglCreateLayerContext(RegalContext *_context, HDC hDC, int iLayerPlane)
{
  Internal("trace_wglCreateLayerContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HGLRC  ret = Trace::wglCreateLayerContext(_context, hDC, iLayerPlane);
  return ret;
}

static BOOL REGAL_CALL trace_wglDeleteContext(RegalContext *_context, HGLRC hglrc)
{
  Internal("trace_wglDeleteContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDeleteContext(_context, hglrc);
  return ret;
}

static BOOL REGAL_CALL trace_wglDescribeLayerPlane(RegalContext *_context, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)
{
  Internal("trace_wglDescribeLayerPlane","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglDescribeLayerPlane(_context, hDC, iPixelFormat, iLayerPlane, nBytes, plpd);
  return ret;
}

static HGLRC REGAL_CALL trace_wglGetCurrentContext(RegalContext *_context)
{
  Internal("trace_wglGetCurrentContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HGLRC  ret = Trace::wglGetCurrentContext(_context);
  return ret;
}

static HDC REGAL_CALL trace_wglGetCurrentDC(RegalContext *_context)
{
  Internal("trace_wglGetCurrentDC","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  HDC  ret = Trace::wglGetCurrentDC(_context);
  return ret;
}

static int REGAL_CALL trace_wglGetLayerPaletteEntries(RegalContext *_context, HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr)
{
  Internal("trace_wglGetLayerPaletteEntries","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglGetLayerPaletteEntries(_context, hDC, iLayerPlane, iStart, nEntries, pcr);
  return ret;
}

static BOOL REGAL_CALL trace_wglMakeCurrent(RegalContext *_context, HDC hDC, HGLRC hglrc)
{
  Internal("trace_wglMakeCurrent","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglMakeCurrent(_context, hDC, hglrc);
  return ret;
}

static BOOL REGAL_CALL trace_wglRealizeLayerPalette(RegalContext *_context, HDC hDC, int iLayerPlane, BOOL bRealize)
{
  Internal("trace_wglRealizeLayerPalette","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglRealizeLayerPalette(_context, hDC, iLayerPlane, bRealize);
  return ret;
}

static int REGAL_CALL trace_wglSetLayerPaletteEntries(RegalContext *_context, HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr)
{
  Internal("trace_wglSetLayerPaletteEntries","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::wglSetLayerPaletteEntries(_context, hDC, iLayerPlane, iStart, nEntries, pcr);
  return ret;
}

static BOOL REGAL_CALL trace_wglShareLists(RegalContext *_context, HGLRC hglrcShare, HGLRC hglrcSrc)
{
  Internal("trace_wglShareLists","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglShareLists(_context, hglrcShare, hglrcSrc);
  return ret;
}

static BOOL REGAL_CALL trace_wglSwapLayerBuffers(RegalContext *_context, HDC hDC, UINT fuPlanes)
{
  Internal("trace_wglSwapLayerBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglSwapLayerBuffers(_context, hDC, fuPlanes);
  return ret;
}

static DWORD REGAL_CALL trace_wglSwapMultipleBuffers(RegalContext *_context, UINT n, const WGLSWAP *ps)
{
  Internal("trace_wglSwapMultipleBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  DWORD  ret = Trace::wglSwapMultipleBuffers(_context, n, ps);
  return ret;
}

static BOOL REGAL_CALL trace_wglUseFontBitmapsA(RegalContext *_context, HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  Internal("trace_wglUseFontBitmapsA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglUseFontBitmapsA(_context, hDC, first, count, listBase);
  return ret;
}

static BOOL REGAL_CALL trace_wglUseFontBitmapsW(RegalContext *_context, HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  Internal("trace_wglUseFontBitmapsW","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglUseFontBitmapsW(_context, hDC, first, count, listBase);
  return ret;
}

static BOOL REGAL_CALL trace_wglUseFontOutlinesA(RegalContext *_context, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  Internal("trace_wglUseFontOutlinesA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglUseFontOutlinesA(_context, hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  return ret;
}

static BOOL REGAL_CALL trace_wglUseFontOutlinesW(RegalContext *_context, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  Internal("trace_wglUseFontOutlinesW","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  BOOL  ret = Trace::wglUseFontOutlinesW(_context, hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  return ret;
}

#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX && REGAL_SYS_X11

// GLX_VERSION_1_0

static XVisualInfo *REGAL_CALL trace_glXChooseVisual(RegalContext *_context, Display *dpy, int screen, int *attribList)
{
  Internal("trace_glXChooseVisual","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  XVisualInfo * ret = Trace::glXChooseVisual(_context, dpy, screen, attribList);
  return ret;
}

static void REGAL_CALL trace_glXCopyContext(RegalContext *_context, Display *dpy, GLXContext src, GLXContext dst, unsigned long mask)
{
  Internal("trace_glXCopyContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXCopyContext(_context, dpy, src, dst, mask);
}

static GLXContext REGAL_CALL trace_glXCreateContext(RegalContext *_context, Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
{
  Internal("trace_glXCreateContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXContext  ret = Trace::glXCreateContext(_context, dpy, vis, shareList, direct);
  return ret;
}

static GLXPixmap REGAL_CALL trace_glXCreateGLXPixmap(RegalContext *_context, Display *dpy, XVisualInfo *vis, Pixmap pixmap)
{
  Internal("trace_glXCreateGLXPixmap","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXPixmap  ret = Trace::glXCreateGLXPixmap(_context, dpy, vis, pixmap);
  return ret;
}

static void REGAL_CALL trace_glXDestroyContext(RegalContext *_context, Display *dpy, GLXContext ctx)
{
  Internal("trace_glXDestroyContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXDestroyContext(_context, dpy, ctx);
}

static void REGAL_CALL trace_glXDestroyGLXPixmap(RegalContext *_context, Display *dpy, GLXPixmap pix)
{
  Internal("trace_glXDestroyGLXPixmap","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXDestroyGLXPixmap(_context, dpy, pix);
}

static int REGAL_CALL trace_glXGetConfig(RegalContext *_context, Display *dpy, XVisualInfo *vis, int attrib, int *value)
{
  Internal("trace_glXGetConfig","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXGetConfig(_context, dpy, vis, attrib, value);
  return ret;
}

static GLXContext REGAL_CALL trace_glXGetCurrentContext(RegalContext *_context)
{
  Internal("trace_glXGetCurrentContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXContext  ret = Trace::glXGetCurrentContext(_context);
  return ret;
}

static GLXDrawable REGAL_CALL trace_glXGetCurrentDrawable(RegalContext *_context)
{
  Internal("trace_glXGetCurrentDrawable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXDrawable  ret = Trace::glXGetCurrentDrawable(_context);
  return ret;
}

static Bool REGAL_CALL trace_glXIsDirect(RegalContext *_context, Display *dpy, GLXContext ctx)
{
  Internal("trace_glXIsDirect","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXIsDirect(_context, dpy, ctx);
  return ret;
}

static Bool REGAL_CALL trace_glXMakeCurrent(RegalContext *_context, Display *dpy, GLXDrawable drawable, GLXContext ctx)
{
  Internal("trace_glXMakeCurrent","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXMakeCurrent(_context, dpy, drawable, ctx);
  return ret;
}

static Bool REGAL_CALL trace_glXQueryExtension(RegalContext *_context, Display *dpy, int *errorBase, int *eventBase)
{
  Internal("trace_glXQueryExtension","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXQueryExtension(_context, dpy, errorBase, eventBase);
  return ret;
}

static Bool REGAL_CALL trace_glXQueryVersion(RegalContext *_context, Display *dpy, int *major, int *minor)
{
  Internal("trace_glXQueryVersion","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXQueryVersion(_context, dpy, major, minor);
  return ret;
}

static void REGAL_CALL trace_glXSwapBuffers(RegalContext *_context, Display *dpy, GLXDrawable drawable)
{
  Internal("trace_glXSwapBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXSwapBuffers(_context, dpy, drawable);
}

static void REGAL_CALL trace_glXUseXFont(RegalContext *_context, Font font, int first, int count, int listBase)
{
  Internal("trace_glXUseXFont","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXUseXFont(_context, font, first, count, listBase);
}

static void REGAL_CALL trace_glXWaitGL(RegalContext *_context)
{
  Internal("trace_glXWaitGL","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXWaitGL(_context);
}

static void REGAL_CALL trace_glXWaitX(RegalContext *_context)
{
  Internal("trace_glXWaitX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXWaitX(_context);
}

// GLX_VERSION_1_1

static const char *REGAL_CALL trace_glXGetClientString(RegalContext *_context, Display *dpy, int name)
{
  Internal("trace_glXGetClientString","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  const char * ret = Trace::glXGetClientString(_context, dpy, name);
  return ret;
}

static const char *REGAL_CALL trace_glXQueryExtensionsString(RegalContext *_context, Display *dpy, int screen)
{
  Internal("trace_glXQueryExtensionsString","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  const char * ret = Trace::glXQueryExtensionsString(_context, dpy, screen);
  return ret;
}

static const char *REGAL_CALL trace_glXQueryServerString(RegalContext *_context, Display *dpy, int screen, int name)
{
  Internal("trace_glXQueryServerString","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  const char * ret = Trace::glXQueryServerString(_context, dpy, screen, name);
  return ret;
}

// GLX_VERSION_1_2

static Display *REGAL_CALL trace_glXGetCurrentDisplay(RegalContext *_context)
{
  Internal("trace_glXGetCurrentDisplay","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Display * ret = Trace::glXGetCurrentDisplay(_context);
  return ret;
}

// GLX_VERSION_1_3

static GLXFBConfig *REGAL_CALL trace_glXChooseFBConfig(RegalContext *_context, Display *dpy, int screen, const int *attrib_list, int *nelements)
{
  Internal("trace_glXChooseFBConfig","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXFBConfig * ret = Trace::glXChooseFBConfig(_context, dpy, screen, attrib_list, nelements);
  return ret;
}

static GLXContext REGAL_CALL trace_glXCreateNewContext(RegalContext *_context, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
  Internal("trace_glXCreateNewContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXContext  ret = Trace::glXCreateNewContext(_context, dpy, config, render_type, share_list, direct);
  return ret;
}

static GLXPbuffer REGAL_CALL trace_glXCreatePbuffer(RegalContext *_context, Display *dpy, GLXFBConfig config, const int *attrib_list)
{
  Internal("trace_glXCreatePbuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXPbuffer  ret = Trace::glXCreatePbuffer(_context, dpy, config, attrib_list);
  return ret;
}

static GLXPixmap REGAL_CALL trace_glXCreatePixmap(RegalContext *_context, Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)
{
  Internal("trace_glXCreatePixmap","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXPixmap  ret = Trace::glXCreatePixmap(_context, dpy, config, pixmap, attrib_list);
  return ret;
}

static GLXWindow REGAL_CALL trace_glXCreateWindow(RegalContext *_context, Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)
{
  Internal("trace_glXCreateWindow","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXWindow  ret = Trace::glXCreateWindow(_context, dpy, config, win, attrib_list);
  return ret;
}

static void REGAL_CALL trace_glXDestroyPbuffer(RegalContext *_context, Display *dpy, GLXPbuffer pbuf)
{
  Internal("trace_glXDestroyPbuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXDestroyPbuffer(_context, dpy, pbuf);
}

static void REGAL_CALL trace_glXDestroyPixmap(RegalContext *_context, Display *dpy, GLXPixmap pixmap)
{
  Internal("trace_glXDestroyPixmap","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXDestroyPixmap(_context, dpy, pixmap);
}

static void REGAL_CALL trace_glXDestroyWindow(RegalContext *_context, Display *dpy, GLXWindow win)
{
  Internal("trace_glXDestroyWindow","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXDestroyWindow(_context, dpy, win);
}

static GLXDrawable REGAL_CALL trace_glXGetCurrentReadDrawable(RegalContext *_context)
{
  Internal("trace_glXGetCurrentReadDrawable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXDrawable  ret = Trace::glXGetCurrentReadDrawable(_context);
  return ret;
}

static int REGAL_CALL trace_glXGetFBConfigAttrib(RegalContext *_context, Display *dpy, GLXFBConfig config, int attribute, int *value)
{
  Internal("trace_glXGetFBConfigAttrib","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXGetFBConfigAttrib(_context, dpy, config, attribute, value);
  return ret;
}

static GLXFBConfig *REGAL_CALL trace_glXGetFBConfigs(RegalContext *_context, Display *dpy, int screen, int *nelements)
{
  Internal("trace_glXGetFBConfigs","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXFBConfig * ret = Trace::glXGetFBConfigs(_context, dpy, screen, nelements);
  return ret;
}

static void REGAL_CALL trace_glXGetSelectedEvent(RegalContext *_context, Display *dpy, GLXDrawable draw, unsigned long *event_mask)
{
  Internal("trace_glXGetSelectedEvent","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXGetSelectedEvent(_context, dpy, draw, event_mask);
}

static XVisualInfo *REGAL_CALL trace_glXGetVisualFromFBConfig(RegalContext *_context, Display *dpy, GLXFBConfig config)
{
  Internal("trace_glXGetVisualFromFBConfig","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  XVisualInfo * ret = Trace::glXGetVisualFromFBConfig(_context, dpy, config);
  return ret;
}

static Bool REGAL_CALL trace_glXMakeContextCurrent(RegalContext *_context, Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  Internal("trace_glXMakeContextCurrent","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXMakeContextCurrent(_context, display, draw, read, ctx);
  return ret;
}

static int REGAL_CALL trace_glXQueryContext(RegalContext *_context, Display *dpy, GLXContext ctx, int attribute, int *value)
{
  Internal("trace_glXQueryContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXQueryContext(_context, dpy, ctx, attribute, value);
  return ret;
}

static void REGAL_CALL trace_glXQueryDrawable(RegalContext *_context, Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
{
  Internal("trace_glXQueryDrawable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXQueryDrawable(_context, dpy, draw, attribute, value);
}

static void REGAL_CALL trace_glXSelectEvent(RegalContext *_context, Display *dpy, GLXDrawable draw, unsigned long event_mask)
{
  Internal("trace_glXSelectEvent","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXSelectEvent(_context, dpy, draw, event_mask);
}

// GLX_VERSION_1_4

static __GLXextFuncPtr REGAL_CALL trace_glXGetProcAddress(RegalContext *_context, const GLubyte *procName)
{
  Internal("trace_glXGetProcAddress","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  __GLXextFuncPtr  ret = Trace::glXGetProcAddress(_context, procName);
  return ret;
}

// GLX_ARB_create_context

static GLXContext REGAL_CALL trace_glXCreateContextAttribsARB(RegalContext *_context, Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
{
  Internal("trace_glXCreateContextAttribsARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXContext  ret = Trace::glXCreateContextAttribsARB(_context, dpy, config, share_context, direct, attrib_list);
  return ret;
}

// GLX_ARB_get_proc_address

static __GLXextFuncPtr REGAL_CALL trace_glXGetProcAddressARB(RegalContext *_context, const GLubyte *procName)
{
  Internal("trace_glXGetProcAddressARB","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  __GLXextFuncPtr  ret = Trace::glXGetProcAddressARB(_context, procName);
  return ret;
}

// GLX_EXT_import_context

static void REGAL_CALL trace_glXFreeContextEXT(RegalContext *_context, Display *dpy, GLXContext context)
{
  Internal("trace_glXFreeContextEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXFreeContextEXT(_context, dpy, context);
}

static GLXContextID REGAL_CALL trace_glXGetContextIDEXT(RegalContext *_context, const GLXContext context)
{
  Internal("trace_glXGetContextIDEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXContextID  ret = Trace::glXGetContextIDEXT(_context, context);
  return ret;
}

static GLXContext REGAL_CALL trace_glXImportContextEXT(RegalContext *_context, Display *dpy, GLXContextID contextID)
{
  Internal("trace_glXImportContextEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXContext  ret = Trace::glXImportContextEXT(_context, dpy, contextID);
  return ret;
}

static int REGAL_CALL trace_glXQueryContextInfoEXT(RegalContext *_context, Display *dpy, GLXContext context, int attribute, int *value)
{
  Internal("trace_glXQueryContextInfoEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXQueryContextInfoEXT(_context, dpy, context, attribute, value);
  return ret;
}

// GLX_EXT_swap_control

static void REGAL_CALL trace_glXSwapIntervalEXT(RegalContext *_context, Display *dpy, GLXDrawable drawable, int interval)
{
  Internal("trace_glXSwapIntervalEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXSwapIntervalEXT(_context, dpy, drawable, interval);
}

// GLX_EXT_texture_from_pixmap

static void REGAL_CALL trace_glXBindTexImageEXT(RegalContext *_context, Display *display, GLXDrawable drawable, int buffer, const int *attrib_list)
{
  Internal("trace_glXBindTexImageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXBindTexImageEXT(_context, display, drawable, buffer, attrib_list);
}

static void REGAL_CALL trace_glXReleaseTexImageEXT(RegalContext *_context, Display *display, GLXDrawable drawable, int buffer)
{
  Internal("trace_glXReleaseTexImageEXT","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXReleaseTexImageEXT(_context, display, drawable, buffer);
}

// GLX_MESA_agp_offset

static unsigned int REGAL_CALL trace_glXGetAGPOffsetMESA(RegalContext *_context, const void *pointer)
{
  Internal("trace_glXGetAGPOffsetMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  unsigned int  ret = Trace::glXGetAGPOffsetMESA(_context, pointer);
  return ret;
}

// GLX_MESA_copy_sub_buffer

static void REGAL_CALL trace_glXCopySubBufferMESA(RegalContext *_context, Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)
{
  Internal("trace_glXCopySubBufferMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXCopySubBufferMESA(_context, dpy, drawable, x, y, width, height);
}

// GLX_MESA_pixmap_colormap

static GLXPixmap REGAL_CALL trace_glXCreateGLXPixmapMESA(RegalContext *_context, Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)
{
  Internal("trace_glXCreateGLXPixmapMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXPixmap  ret = Trace::glXCreateGLXPixmapMESA(_context, dpy, visual, pixmap, cmap);
  return ret;
}

// GLX_MESA_release_buffers

static Bool REGAL_CALL trace_glXReleaseBuffersMESA(RegalContext *_context, Display *dpy, GLXDrawable d)
{
  Internal("trace_glXReleaseBuffersMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXReleaseBuffersMESA(_context, dpy, d);
  return ret;
}

// GLX_MESA_set_3dfx_mode

static GLboolean REGAL_CALL trace_glXSet3DfxModeMESA(RegalContext *_context, GLint mode)
{
  Internal("trace_glXSet3DfxModeMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLboolean  ret = Trace::glXSet3DfxModeMESA(_context, mode);
  return ret;
}

// GLX_MESA_swap_control

static int REGAL_CALL trace_glXGetSwapIntervalMESA(RegalContext *_context)
{
  Internal("trace_glXGetSwapIntervalMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXGetSwapIntervalMESA(_context);
  return ret;
}

static int REGAL_CALL trace_glXSwapIntervalMESA(RegalContext *_context, unsigned int interval)
{
  Internal("trace_glXSwapIntervalMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXSwapIntervalMESA(_context, interval);
  return ret;
}

// GLX_NV_copy_image

static void REGAL_CALL trace_glXCopyImageSubDataNV(RegalContext *_context, Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  Internal("trace_glXCopyImageSubDataNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXCopyImageSubDataNV(_context, dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

// GLX_NV_present_video

static int REGAL_CALL trace_glXBindVideoDeviceNV(RegalContext *_context, Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list)
{
  Internal("trace_glXBindVideoDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXBindVideoDeviceNV(_context, dpy, video_slot, video_device, attrib_list);
  return ret;
}

static unsigned int *REGAL_CALL trace_glXEnumerateVideoDevicesNV(RegalContext *_context, Display *dpy, int screen, int *nelements)
{
  Internal("trace_glXEnumerateVideoDevicesNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  unsigned int * ret = Trace::glXEnumerateVideoDevicesNV(_context, dpy, screen, nelements);
  return ret;
}

// GLX_NV_swap_group

static Bool REGAL_CALL trace_glXBindSwapBarrierNV(RegalContext *_context, Display *dpy, GLuint group, GLuint barrier)
{
  Internal("trace_glXBindSwapBarrierNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXBindSwapBarrierNV(_context, dpy, group, barrier);
  return ret;
}

static Bool REGAL_CALL trace_glXJoinSwapGroupNV(RegalContext *_context, Display *dpy, GLXDrawable drawable, GLuint group)
{
  Internal("trace_glXJoinSwapGroupNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXJoinSwapGroupNV(_context, dpy, drawable, group);
  return ret;
}

static Bool REGAL_CALL trace_glXQueryFrameCountNV(RegalContext *_context, Display *dpy, int screen, GLuint *count)
{
  Internal("trace_glXQueryFrameCountNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXQueryFrameCountNV(_context, dpy, screen, count);
  return ret;
}

static Bool REGAL_CALL trace_glXQueryMaxSwapGroupsNV(RegalContext *_context, Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)
{
  Internal("trace_glXQueryMaxSwapGroupsNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXQueryMaxSwapGroupsNV(_context, dpy, screen, maxGroups, maxBarriers);
  return ret;
}

static Bool REGAL_CALL trace_glXQuerySwapGroupNV(RegalContext *_context, Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)
{
  Internal("trace_glXQuerySwapGroupNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXQuerySwapGroupNV(_context, dpy, drawable, group, barrier);
  return ret;
}

static Bool REGAL_CALL trace_glXResetFrameCountNV(RegalContext *_context, Display *dpy, int screen)
{
  Internal("trace_glXResetFrameCountNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXResetFrameCountNV(_context, dpy, screen);
  return ret;
}

// GLX_NV_vertex_array_range

static void *REGAL_CALL trace_glXAllocateMemoryNV(RegalContext *_context, GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)
{
  Internal("trace_glXAllocateMemoryNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  void * ret = Trace::glXAllocateMemoryNV(_context, size, readFrequency, writeFrequency, priority);
  return ret;
}

static void REGAL_CALL trace_glXFreeMemoryNV(RegalContext *_context, void *pointer)
{
  Internal("trace_glXFreeMemoryNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXFreeMemoryNV(_context, pointer);
}

// GLX_NV_video_capture

static int REGAL_CALL trace_glXBindVideoCaptureDeviceNV(RegalContext *_context, Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)
{
  Internal("trace_glXBindVideoCaptureDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXBindVideoCaptureDeviceNV(_context, dpy, video_capture_slot, device);
  return ret;
}

static GLXVideoCaptureDeviceNV *REGAL_CALL trace_glXEnumerateVideoCaptureDevicesNV(RegalContext *_context, Display *dpy, int screen, int *nelements)
{
  Internal("trace_glXEnumerateVideoCaptureDevicesNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXVideoCaptureDeviceNV * ret = Trace::glXEnumerateVideoCaptureDevicesNV(_context, dpy, screen, nelements);
  return ret;
}

static void REGAL_CALL trace_glXLockVideoCaptureDeviceNV(RegalContext *_context, Display *dpy, GLXVideoCaptureDeviceNV device)
{
  Internal("trace_glXLockVideoCaptureDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXLockVideoCaptureDeviceNV(_context, dpy, device);
}

static int REGAL_CALL trace_glXQueryVideoCaptureDeviceNV(RegalContext *_context, Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value)
{
  Internal("trace_glXQueryVideoCaptureDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXQueryVideoCaptureDeviceNV(_context, dpy, device, attribute, value);
  return ret;
}

static void REGAL_CALL trace_glXReleaseVideoCaptureDeviceNV(RegalContext *_context, Display *dpy, GLXVideoCaptureDeviceNV device)
{
  Internal("trace_glXReleaseVideoCaptureDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXReleaseVideoCaptureDeviceNV(_context, dpy, device);
}

// GLX_NV_video_output

static int REGAL_CALL trace_glXBindVideoImageNV(RegalContext *_context, Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
{
  Internal("trace_glXBindVideoImageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXBindVideoImageNV(_context, dpy, VideoDevice, pbuf, iVideoBuffer);
  return ret;
}

static int REGAL_CALL trace_glXGetVideoDeviceNV(RegalContext *_context, Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)
{
  Internal("trace_glXGetVideoDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXGetVideoDeviceNV(_context, dpy, screen, numVideoDevices, pVideoDevice);
  return ret;
}

static int REGAL_CALL trace_glXGetVideoInfoNV(RegalContext *_context, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
{
  Internal("trace_glXGetVideoInfoNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXGetVideoInfoNV(_context, dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  return ret;
}

static int REGAL_CALL trace_glXReleaseVideoDeviceNV(RegalContext *_context, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)
{
  Internal("trace_glXReleaseVideoDeviceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXReleaseVideoDeviceNV(_context, dpy, screen, VideoDevice);
  return ret;
}

static int REGAL_CALL trace_glXReleaseVideoImageNV(RegalContext *_context, Display *dpy, GLXPbuffer pbuf)
{
  Internal("trace_glXReleaseVideoImageNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXReleaseVideoImageNV(_context, dpy, pbuf);
  return ret;
}

static int REGAL_CALL trace_glXSendPbufferToVideoNV(RegalContext *_context, Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)
{
  Internal("trace_glXSendPbufferToVideoNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXSendPbufferToVideoNV(_context, dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
  return ret;
}

// GLX_OML_sync_control

static Bool REGAL_CALL trace_glXGetMscRateOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)
{
  Internal("trace_glXGetMscRateOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXGetMscRateOML(_context, dpy, drawable, numerator, denominator);
  return ret;
}

static Bool REGAL_CALL trace_glXGetSyncValuesOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  Internal("trace_glXGetSyncValuesOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXGetSyncValuesOML(_context, dpy, drawable, ust, msc, sbc);
  return ret;
}

static int64_t REGAL_CALL trace_glXSwapBuffersMscOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
{
  Internal("trace_glXSwapBuffersMscOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int64_t  ret = Trace::glXSwapBuffersMscOML(_context, dpy, drawable, target_msc, divisor, remainder);
  return ret;
}

static Bool REGAL_CALL trace_glXWaitForMscOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  Internal("trace_glXWaitForMscOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXWaitForMscOML(_context, dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
  return ret;
}

static Bool REGAL_CALL trace_glXWaitForSbcOML(RegalContext *_context, Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)
{
  Internal("trace_glXWaitForSbcOML","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXWaitForSbcOML(_context, dpy, drawable, target_sbc, ust, msc, sbc);
  return ret;
}

// GLX_SGIX_fbconfig

static GLXContext REGAL_CALL trace_glXCreateContextWithConfigSGIX(RegalContext *_context, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
  Internal("trace_glXCreateContextWithConfigSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXContext  ret = Trace::glXCreateContextWithConfigSGIX(_context, dpy, config, render_type, share_list, direct);
  return ret;
}

static GLXPixmap REGAL_CALL trace_glXCreateGLXPixmapWithConfigSGIX(RegalContext *_context, Display *dpy, GLXFBConfig config, Pixmap pixmap)
{
  Internal("trace_glXCreateGLXPixmapWithConfigSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXPixmap  ret = Trace::glXCreateGLXPixmapWithConfigSGIX(_context, dpy, config, pixmap);
  return ret;
}

static int REGAL_CALL trace_glXGetFBConfigAttribSGIX(RegalContext *_context, Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)
{
  Internal("trace_glXGetFBConfigAttribSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXGetFBConfigAttribSGIX(_context, dpy, config, attribute, value);
  return ret;
}

static GLXFBConfigSGIX REGAL_CALL trace_glXGetFBConfigFromVisualSGIX(RegalContext *_context, Display *dpy, XVisualInfo *vis)
{
  Internal("trace_glXGetFBConfigFromVisualSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXFBConfigSGIX  ret = Trace::glXGetFBConfigFromVisualSGIX(_context, dpy, vis);
  return ret;
}

static XVisualInfo *REGAL_CALL trace_glXGetVisualFromFBConfigSGIX(RegalContext *_context, Display *dpy, GLXFBConfig config)
{
  Internal("trace_glXGetVisualFromFBConfigSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  XVisualInfo * ret = Trace::glXGetVisualFromFBConfigSGIX(_context, dpy, config);
  return ret;
}

// GLX_SGIX_pbuffer

static GLXPbuffer REGAL_CALL trace_glXCreateGLXPbufferSGIX(RegalContext *_context, Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list)
{
  Internal("trace_glXCreateGLXPbufferSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXPbuffer  ret = Trace::glXCreateGLXPbufferSGIX(_context, dpy, config, width, height, attrib_list);
  return ret;
}

static void REGAL_CALL trace_glXDestroyGLXPbufferSGIX(RegalContext *_context, Display *dpy, GLXPbuffer pbuf)
{
  Internal("trace_glXDestroyGLXPbufferSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXDestroyGLXPbufferSGIX(_context, dpy, pbuf);
}

static void REGAL_CALL trace_glXGetSelectedEventSGIX(RegalContext *_context, Display *dpy, GLXDrawable drawable, unsigned long *mask)
{
  Internal("trace_glXGetSelectedEventSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXGetSelectedEventSGIX(_context, dpy, drawable, mask);
}

static void REGAL_CALL trace_glXQueryGLXPbufferSGIX(RegalContext *_context, Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value)
{
  Internal("trace_glXQueryGLXPbufferSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXQueryGLXPbufferSGIX(_context, dpy, pbuf, attribute, value);
}

static void REGAL_CALL trace_glXSelectEventSGIX(RegalContext *_context, Display *dpy, GLXDrawable drawable, unsigned long mask)
{
  Internal("trace_glXSelectEventSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXSelectEventSGIX(_context, dpy, drawable, mask);
}

// GLX_SGIX_swap_barrier

static void REGAL_CALL trace_glXBindSwapBarrierSGIX(RegalContext *_context, Display *dpy, GLXDrawable drawable, int barrier)
{
  Internal("trace_glXBindSwapBarrierSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXBindSwapBarrierSGIX(_context, dpy, drawable, barrier);
}

static Bool REGAL_CALL trace_glXQueryMaxSwapBarriersSGIX(RegalContext *_context, Display *dpy, int screen, int *max)
{
  Internal("trace_glXQueryMaxSwapBarriersSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXQueryMaxSwapBarriersSGIX(_context, dpy, screen, max);
  return ret;
}

// GLX_SGIX_swap_group

static void REGAL_CALL trace_glXJoinSwapGroupSGIX(RegalContext *_context, Display *dpy, GLXDrawable drawable, GLXDrawable member)
{
  Internal("trace_glXJoinSwapGroupSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXJoinSwapGroupSGIX(_context, dpy, drawable, member);
}

// GLX_SGIX_video_resize

static int REGAL_CALL trace_glXBindChannelToWindowSGIX(RegalContext *_context, Display *display, int screen, int channel, Window window)
{
  Internal("trace_glXBindChannelToWindowSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXBindChannelToWindowSGIX(_context, display, screen, channel, window);
  return ret;
}

static int REGAL_CALL trace_glXChannelRectSGIX(RegalContext *_context, Display *display, int screen, int channel, int x, int y, int w, int h)
{
  Internal("trace_glXChannelRectSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXChannelRectSGIX(_context, display, screen, channel, x, y, w, h);
  return ret;
}

static int REGAL_CALL trace_glXChannelRectSyncSGIX(RegalContext *_context, Display *display, int screen, int channel, GLenum synctype)
{
  Internal("trace_glXChannelRectSyncSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXChannelRectSyncSGIX(_context, display, screen, channel, synctype);
  return ret;
}

static int REGAL_CALL trace_glXQueryChannelDeltasSGIX(RegalContext *_context, Display *display, int screen, int channel, int *x, int *y, int *w, int *h)
{
  Internal("trace_glXQueryChannelDeltasSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXQueryChannelDeltasSGIX(_context, display, screen, channel, x, y, w, h);
  return ret;
}

static int REGAL_CALL trace_glXQueryChannelRectSGIX(RegalContext *_context, Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)
{
  Internal("trace_glXQueryChannelRectSGIX","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXQueryChannelRectSGIX(_context, display, screen, channel, dx, dy, dw, dh);
  return ret;
}

// GLX_SGI_cushion

static void REGAL_CALL trace_glXCushionSGI(RegalContext *_context, Display *dpy, Window window, float cushion)
{
  Internal("trace_glXCushionSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::glXCushionSGI(_context, dpy, window, cushion);
}

// GLX_SGI_make_current_read

static GLXDrawable REGAL_CALL trace_glXGetCurrentReadDrawableSGI(RegalContext *_context)
{
  Internal("trace_glXGetCurrentReadDrawableSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLXDrawable  ret = Trace::glXGetCurrentReadDrawableSGI(_context);
  return ret;
}

static Bool REGAL_CALL trace_glXMakeCurrentReadSGI(RegalContext *_context, Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  Internal("trace_glXMakeCurrentReadSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Bool  ret = Trace::glXMakeCurrentReadSGI(_context, dpy, draw, read, ctx);
  return ret;
}

// GLX_SGI_swap_control

static int REGAL_CALL trace_glXSwapIntervalSGI(RegalContext *_context, int interval)
{
  Internal("trace_glXSwapIntervalSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXSwapIntervalSGI(_context, interval);
  return ret;
}

// GLX_SGI_video_sync

static int REGAL_CALL trace_glXGetVideoSyncSGI(RegalContext *_context, unsigned int *count)
{
  Internal("trace_glXGetVideoSyncSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXGetVideoSyncSGI(_context, count);
  return ret;
}

static int REGAL_CALL trace_glXWaitVideoSyncSGI(RegalContext *_context, int divisor, int remainder, unsigned int *count)
{
  Internal("trace_glXWaitVideoSyncSGI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  int  ret = Trace::glXWaitVideoSyncSGI(_context, divisor, remainder, count);
  return ret;
}

#endif // REGAL_SYS_GLX && REGAL_SYS_X11

#if REGAL_SYS_OSX

// CGL_VERSION_1_0

static CGLError REGAL_CALL trace_CGLChoosePixelFormat(RegalContext *_context, const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix)
{
  Internal("trace_CGLChoosePixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLChoosePixelFormat(_context, attribs, pix, npix);
  return ret;
}

static CGLError REGAL_CALL trace_CGLClearDrawable(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLClearDrawable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLClearDrawable(_context, ctx);
  return ret;
}

static CGLError REGAL_CALL trace_CGLCopyContext(RegalContext *_context, CGLContextObj src, CGLContextObj dst, GLbitfield mask)
{
  Internal("trace_CGLCopyContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLCopyContext(_context, src, dst, mask);
  return ret;
}

static CGLError REGAL_CALL trace_CGLCreateContext(RegalContext *_context, CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx)
{
  Internal("trace_CGLCreateContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLCreateContext(_context, pix, share, ctx);
  return ret;
}

static CGLError REGAL_CALL trace_CGLDescribePixelFormat(RegalContext *_context, CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value)
{
  Internal("trace_CGLDescribePixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLDescribePixelFormat(_context, pix, pix_num, attrib, value);
  return ret;
}

static CGLError REGAL_CALL trace_CGLDescribeRenderer(RegalContext *_context, CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value)
{
  Internal("trace_CGLDescribeRenderer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLDescribeRenderer(_context, rend, rend_num, prop, value);
  return ret;
}

static CGLError REGAL_CALL trace_CGLDestroyContext(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLDestroyContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLDestroyContext(_context, ctx);
  return ret;
}

static CGLError REGAL_CALL trace_CGLDestroyPixelFormat(RegalContext *_context, CGLPixelFormatObj pix)
{
  Internal("trace_CGLDestroyPixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLDestroyPixelFormat(_context, pix);
  return ret;
}

static CGLError REGAL_CALL trace_CGLDestroyRendererInfo(RegalContext *_context, CGLRendererInfoObj rend)
{
  Internal("trace_CGLDestroyRendererInfo","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLDestroyRendererInfo(_context, rend);
  return ret;
}

static CGLError REGAL_CALL trace_CGLDisable(RegalContext *_context, CGLContextObj ctx, CGLContextEnable pname)
{
  Internal("trace_CGLDisable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLDisable(_context, ctx, pname);
  return ret;
}

static CGLError REGAL_CALL trace_CGLEnable(RegalContext *_context, CGLContextObj ctx, CGLContextEnable pname)
{
  Internal("trace_CGLEnable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLEnable(_context, ctx, pname);
  return ret;
}

static const char *REGAL_CALL trace_CGLErrorString(RegalContext *_context, CGLError error)
{
  Internal("trace_CGLErrorString","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  const char * ret = Trace::CGLErrorString(_context, error);
  return ret;
}

static CGLError REGAL_CALL trace_CGLFlushDrawable(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLFlushDrawable","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLFlushDrawable(_context, ctx);
  return ret;
}

static CGLError REGAL_CALL trace_CGLGetOffScreen(RegalContext *_context, CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr)
{
  Internal("trace_CGLGetOffScreen","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLGetOffScreen(_context, ctx, width, height, rowbytes, baseaddr);
  return ret;
}

static CGLError REGAL_CALL trace_CGLGetOption(RegalContext *_context, CGLGlobalOption pname, GLint *param)
{
  Internal("trace_CGLGetOption","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLGetOption(_context, pname, param);
  return ret;
}

static CGLError REGAL_CALL trace_CGLGetParameter(RegalContext *_context, CGLContextObj ctx, CGLContextParameter pname, GLint *params)
{
  Internal("trace_CGLGetParameter","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLGetParameter(_context, ctx, pname, params);
  return ret;
}

static void REGAL_CALL trace_CGLGetVersion(RegalContext *_context, GLint *majorvers, GLint *minorvers)
{
  Internal("trace_CGLGetVersion","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::CGLGetVersion(_context, majorvers, minorvers);
}

static CGLError REGAL_CALL trace_CGLGetVirtualScreen(RegalContext *_context, CGLContextObj ctx, GLint *screen)
{
  Internal("trace_CGLGetVirtualScreen","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLGetVirtualScreen(_context, ctx, screen);
  return ret;
}

static CGLError REGAL_CALL trace_CGLIsEnabled(RegalContext *_context, CGLContextObj ctx, CGLContextEnable pname, GLint *enable)
{
  Internal("trace_CGLIsEnabled","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLIsEnabled(_context, ctx, pname, enable);
  return ret;
}

static CGLError REGAL_CALL trace_CGLQueryRendererInfo(RegalContext *_context, GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend)
{
  Internal("trace_CGLQueryRendererInfo","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLQueryRendererInfo(_context, display_mask, rend, nrend);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetFullScreen(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLSetFullScreen","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetFullScreen(_context, ctx);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetOffScreen(RegalContext *_context, CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr)
{
  Internal("trace_CGLSetOffScreen","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetOffScreen(_context, ctx, width, height, rowbytes, baseaddr);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetOption(RegalContext *_context, CGLGlobalOption pname, GLint param)
{
  Internal("trace_CGLSetOption","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetOption(_context, pname, param);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetParameter(RegalContext *_context, CGLContextObj ctx, CGLContextParameter pname, const GLint *params)
{
  Internal("trace_CGLSetParameter","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetParameter(_context, ctx, pname, params);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetVirtualScreen(RegalContext *_context, CGLContextObj ctx, GLint screen)
{
  Internal("trace_CGLSetVirtualScreen","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetVirtualScreen(_context, ctx, screen);
  return ret;
}

// CGL_VERSION_1_1

static CGLError REGAL_CALL trace_CGLCreatePBuffer(RegalContext *_context, GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer)
{
  Internal("trace_CGLCreatePBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLCreatePBuffer(_context, width, height, target, internalFormat, max_level, pbuffer);
  return ret;
}

static CGLError REGAL_CALL trace_CGLDescribePBuffer(RegalContext *_context, CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap)
{
  Internal("trace_CGLDescribePBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLDescribePBuffer(_context, pbuffer, width, height, target, internalFormat, mipmap);
  return ret;
}

static CGLError REGAL_CALL trace_CGLDestroyPBuffer(RegalContext *_context, CGLPBufferObj pbuffer)
{
  Internal("trace_CGLDestroyPBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLDestroyPBuffer(_context, pbuffer);
  return ret;
}

static CGLError REGAL_CALL trace_CGLGetPBuffer(RegalContext *_context, CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen)
{
  Internal("trace_CGLGetPBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLGetPBuffer(_context, ctx, pbuffer, face, level, screen);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetPBuffer(RegalContext *_context, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen)
{
  Internal("trace_CGLSetPBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetPBuffer(_context, ctx, pbuffer, face, level, screen);
  return ret;
}

static CGLError REGAL_CALL trace_CGLTexImagePBuffer(RegalContext *_context, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source)
{
  Internal("trace_CGLTexImagePBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLTexImagePBuffer(_context, ctx, pbuffer, source);
  return ret;
}

// CGL_VERSION_1_2

static GLuint REGAL_CALL trace_CGLGetContextRetainCount(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLGetContextRetainCount","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLuint  ret = Trace::CGLGetContextRetainCount(_context, ctx);
  return ret;
}

static CGLError REGAL_CALL trace_CGLGetGlobalOption(RegalContext *_context, CGLGlobalOption pname, GLint *params)
{
  Internal("trace_CGLGetGlobalOption","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLGetGlobalOption(_context, pname, params);
  return ret;
}

static GLuint REGAL_CALL trace_CGLGetPBufferRetainCount(RegalContext *_context, CGLPBufferObj pbuffer)
{
  Internal("trace_CGLGetPBufferRetainCount","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLuint  ret = Trace::CGLGetPBufferRetainCount(_context, pbuffer);
  return ret;
}

static CGLPixelFormatObj REGAL_CALL trace_CGLGetPixelFormat(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLGetPixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLPixelFormatObj  ret = Trace::CGLGetPixelFormat(_context, ctx);
  return ret;
}

static GLuint REGAL_CALL trace_CGLGetPixelFormatRetainCount(RegalContext *_context, CGLPixelFormatObj pix)
{
  Internal("trace_CGLGetPixelFormatRetainCount","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  GLuint  ret = Trace::CGLGetPixelFormatRetainCount(_context, pix);
  return ret;
}

static CGLError REGAL_CALL trace_CGLLockContext(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLLockContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLLockContext(_context, ctx);
  return ret;
}

static void REGAL_CALL trace_CGLReleaseContext(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLReleaseContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::CGLReleaseContext(_context, ctx);
}

static void REGAL_CALL trace_CGLReleasePBuffer(RegalContext *_context, CGLPBufferObj pbuffer)
{
  Internal("trace_CGLReleasePBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::CGLReleasePBuffer(_context, pbuffer);
}

static void REGAL_CALL trace_CGLReleasePixelFormat(RegalContext *_context, CGLPixelFormatObj pix)
{
  Internal("trace_CGLReleasePixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  Trace::CGLReleasePixelFormat(_context, pix);
}

static CGLContextObj REGAL_CALL trace_CGLRetainContext(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLRetainContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLContextObj  ret = Trace::CGLRetainContext(_context, ctx);
  return ret;
}

static CGLPBufferObj REGAL_CALL trace_CGLRetainPBuffer(RegalContext *_context, CGLPBufferObj pbuffer)
{
  Internal("trace_CGLRetainPBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLPBufferObj  ret = Trace::CGLRetainPBuffer(_context, pbuffer);
  return ret;
}

static CGLPixelFormatObj REGAL_CALL trace_CGLRetainPixelFormat(RegalContext *_context, CGLPixelFormatObj pix)
{
  Internal("trace_CGLRetainPixelFormat","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLPixelFormatObj  ret = Trace::CGLRetainPixelFormat(_context, pix);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetGlobalOption(RegalContext *_context, CGLGlobalOption pname, const GLint *params)
{
  Internal("trace_CGLSetGlobalOption","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetGlobalOption(_context, pname, params);
  return ret;
}

static CGLError REGAL_CALL trace_CGLUnlockContext(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLUnlockContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLUnlockContext(_context, ctx);
  return ret;
}

// CGL_VERSION_1_3

static CGLContextObj REGAL_CALL trace_CGLGetCurrentContext(RegalContext *_context)
{
  Internal("trace_CGLGetCurrentContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLContextObj  ret = Trace::CGLGetCurrentContext(_context);
  return ret;
}

static CGLShareGroupObj REGAL_CALL trace_CGLGetShareGroup(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLGetShareGroup","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLShareGroupObj  ret = Trace::CGLGetShareGroup(_context, ctx);
  return ret;
}

static CGLError REGAL_CALL trace_CGLGetSurface(RegalContext *_context, CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf)
{
  Internal("trace_CGLGetSurface","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLGetSurface(_context, ctx, conn, win, srf);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetCurrentContext(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLSetCurrentContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetCurrentContext(_context, ctx);
  return ret;
}

static CGLError REGAL_CALL trace_CGLSetSurface(RegalContext *_context, CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf)
{
  Internal("trace_CGLSetSurface","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLSetSurface(_context, ctx, conn, win, srf);
  return ret;
}

static CGLError REGAL_CALL trace_CGLTexImageIOSurface2D(RegalContext *_context, CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane)
{
  Internal("trace_CGLTexImageIOSurface2D","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLTexImageIOSurface2D(_context, ctx, target, internal_format, width, height, format, type, ioSurface, plane);
  return ret;
}

static CGLError REGAL_CALL trace_CGLUpdateContext(RegalContext *_context, CGLContextObj ctx)
{
  Internal("trace_CGLUpdateContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  CGLError  ret = Trace::CGLUpdateContext(_context, ctx);
  return ret;
}

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

// EGL_ANGLE_query_surface_pointer

static EGLBoolean REGAL_CALL trace_eglQuerySurfacePointerANGLE(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value)
{
  Internal("trace_eglQuerySurfacePointerANGLE","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglQuerySurfacePointerANGLE(_context, dpy, surface, attribute, value);
  return ret;
}

// EGL_KHR_fence_sync

static EGLint REGAL_CALL trace_eglClientWaitSyncKHR(RegalContext *_context, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout)
{
  Internal("trace_eglClientWaitSyncKHR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLint  ret = Trace::eglClientWaitSyncKHR(_context, dpy, GLsync, flags, timeout);
  return ret;
}

static EGLSyncKHR REGAL_CALL trace_eglCreateSyncKHR(RegalContext *_context, EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)
{
  Internal("trace_eglCreateSyncKHR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLSyncKHR  ret = Trace::eglCreateSyncKHR(_context, dpy, type, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglDestroySyncKHR(RegalContext *_context, EGLDisplay dpy, EGLSyncKHR GLsync)
{
  Internal("trace_eglDestroySyncKHR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglDestroySyncKHR(_context, dpy, GLsync);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglGetSyncAttribKHR(RegalContext *_context, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value)
{
  Internal("trace_eglGetSyncAttribKHR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglGetSyncAttribKHR(_context, dpy, GLsync, attribute, value);
  return ret;
}

// EGL_KHR_image_base

static EGLImageKHR REGAL_CALL trace_eglCreateImageKHR(RegalContext *_context, EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)
{
  Internal("trace_eglCreateImageKHR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLImageKHR  ret = Trace::eglCreateImageKHR(_context, dpy, ctx, target, buffer, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglDestroyImageKHR(RegalContext *_context, EGLDisplay dpy, EGLImageKHR image)
{
  Internal("trace_eglDestroyImageKHR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglDestroyImageKHR(_context, dpy, image);
  return ret;
}

// EGL_KHR_lock_surface

static EGLBoolean REGAL_CALL trace_eglLockSurfaceKHR(RegalContext *_context, EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)
{
  Internal("trace_eglLockSurfaceKHR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglLockSurfaceKHR(_context, display, surface, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglUnlockSurfaceKHR(RegalContext *_context, EGLDisplay display, EGLSurface surface)
{
  Internal("trace_eglUnlockSurfaceKHR","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglUnlockSurfaceKHR(_context, display, surface);
  return ret;
}

// EGL_MESA_drm_image

static EGLImageKHR REGAL_CALL trace_eglCreateDRMImageMESA(RegalContext *_context, EGLDisplay dpy, const EGLint *attrib_list)
{
  Internal("trace_eglCreateDRMImageMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLImageKHR  ret = Trace::eglCreateDRMImageMESA(_context, dpy, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglExportDRMImageMESA(RegalContext *_context, EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)
{
  Internal("trace_eglExportDRMImageMESA","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglExportDRMImageMESA(_context, dpy, image, name, handle, stride);
  return ret;
}

// EGL_NV_post_sub_buffer

static EGLBoolean REGAL_CALL trace_eglPostSubBufferNV(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
{
  Internal("trace_eglPostSubBufferNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglPostSubBufferNV(_context, dpy, surface, x, y, width, height);
  return ret;
}

// EGL_NV_sync

static EGLint REGAL_CALL trace_eglClientWaitSyncNV(RegalContext *_context, EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout)
{
  Internal("trace_eglClientWaitSyncNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLint  ret = Trace::eglClientWaitSyncNV(_context, GLsync, flags, timeout);
  return ret;
}

static EGLSyncNV REGAL_CALL trace_eglCreateFenceSyncNV(RegalContext *_context, EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)
{
  Internal("trace_eglCreateFenceSyncNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLSyncNV  ret = Trace::eglCreateFenceSyncNV(_context, dpy, condition, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglDestroySyncNV(RegalContext *_context, EGLSyncNV GLsync)
{
  Internal("trace_eglDestroySyncNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglDestroySyncNV(_context, GLsync);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglFenceNV(RegalContext *_context, EGLSyncNV GLsync)
{
  Internal("trace_eglFenceNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglFenceNV(_context, GLsync);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglGetSyncAttribNV(RegalContext *_context, EGLSyncNV GLsync, EGLint attribute, EGLint *value)
{
  Internal("trace_eglGetSyncAttribNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglGetSyncAttribNV(_context, GLsync, attribute, value);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglSignalSyncNV(RegalContext *_context, EGLSyncNV GLsync, EGLenum mode)
{
  Internal("trace_eglSignalSyncNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglSignalSyncNV(_context, GLsync, mode);
  return ret;
}

// EGL_NV_system_time

static EGLuint64NV REGAL_CALL trace_eglGetSystemTimeFrequencyNV(RegalContext *_context)
{
  Internal("trace_eglGetSystemTimeFrequencyNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLuint64NV  ret = Trace::eglGetSystemTimeFrequencyNV(_context);
  return ret;
}

static EGLuint64NV REGAL_CALL trace_eglGetSystemTimeNV(RegalContext *_context)
{
  Internal("trace_eglGetSystemTimeNV","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLuint64NV  ret = Trace::eglGetSystemTimeNV(_context);
  return ret;
}

// EGL_VERSION_1_0

static EGLBoolean REGAL_CALL trace_eglChooseConfig(RegalContext *_context, EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
{
  Internal("trace_eglChooseConfig","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglChooseConfig(_context, dpy, attrib_list, configs, config_size, num_config);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglCopyBuffers(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
{
  Internal("trace_eglCopyBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglCopyBuffers(_context, dpy, surface, target);
  return ret;
}

static EGLContext REGAL_CALL trace_eglCreateContext(RegalContext *_context, EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
{
  Internal("trace_eglCreateContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLContext  ret = Trace::eglCreateContext(_context, dpy, config, share_context, attrib_list);
  return ret;
}

static EGLSurface REGAL_CALL trace_eglCreatePbufferSurface(RegalContext *_context, EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
{
  Internal("trace_eglCreatePbufferSurface","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLSurface  ret = Trace::eglCreatePbufferSurface(_context, dpy, config, attrib_list);
  return ret;
}

static EGLSurface REGAL_CALL trace_eglCreatePixmapSurface(RegalContext *_context, EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
{
  Internal("trace_eglCreatePixmapSurface","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLSurface  ret = Trace::eglCreatePixmapSurface(_context, dpy, config, pixmap, attrib_list);
  return ret;
}

static EGLSurface REGAL_CALL trace_eglCreateWindowSurface(RegalContext *_context, EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
{
  Internal("trace_eglCreateWindowSurface","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLSurface  ret = Trace::eglCreateWindowSurface(_context, dpy, config, win, attrib_list);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglDestroyContext(RegalContext *_context, EGLDisplay dpy, EGLContext ctx)
{
  Internal("trace_eglDestroyContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglDestroyContext(_context, dpy, ctx);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglDestroySurface(RegalContext *_context, EGLDisplay dpy, EGLSurface surface)
{
  Internal("trace_eglDestroySurface","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglDestroySurface(_context, dpy, surface);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglGetConfigAttrib(RegalContext *_context, EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
{
  Internal("trace_eglGetConfigAttrib","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglGetConfigAttrib(_context, dpy, config, attribute, value);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglGetConfigs(RegalContext *_context, EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
{
  Internal("trace_eglGetConfigs","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglGetConfigs(_context, dpy, configs, config_size, num_config);
  return ret;
}

static EGLContext REGAL_CALL trace_eglGetCurrentContext(RegalContext *_context)
{
  Internal("trace_eglGetCurrentContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLContext  ret = Trace::eglGetCurrentContext(_context);
  return ret;
}

static EGLDisplay REGAL_CALL trace_eglGetCurrentDisplay(RegalContext *_context)
{
  Internal("trace_eglGetCurrentDisplay","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLDisplay  ret = Trace::eglGetCurrentDisplay(_context);
  return ret;
}

static EGLSurface REGAL_CALL trace_eglGetCurrentSurface(RegalContext *_context, EGLint readdraw)
{
  Internal("trace_eglGetCurrentSurface","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLSurface  ret = Trace::eglGetCurrentSurface(_context, readdraw);
  return ret;
}

static EGLDisplay REGAL_CALL trace_eglGetDisplay(RegalContext *_context, EGLNativeDisplayType display_id)
{
  Internal("trace_eglGetDisplay","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLDisplay  ret = Trace::eglGetDisplay(_context, display_id);
  return ret;
}

static EGLint REGAL_CALL trace_eglGetError(RegalContext *_context)
{
  Internal("trace_eglGetError","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLint  ret = Trace::eglGetError(_context);
  return ret;
}

static __eglMustCastToProperFunctionPointerType REGAL_CALL trace_eglGetProcAddress(RegalContext *_context, const char *procname)
{
  Internal("trace_eglGetProcAddress","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  __eglMustCastToProperFunctionPointerType  ret = Trace::eglGetProcAddress(_context, procname);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglInitialize(RegalContext *_context, EGLDisplay dpy, EGLint *major, EGLint *minor)
{
  Internal("trace_eglInitialize","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglInitialize(_context, dpy, major, minor);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglMakeCurrent(RegalContext *_context, EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
{
  Internal("trace_eglMakeCurrent","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglMakeCurrent(_context, dpy, draw, read, ctx);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglQueryContext(RegalContext *_context, EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
{
  Internal("trace_eglQueryContext","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglQueryContext(_context, dpy, ctx, attribute, value);
  return ret;
}

static const char *REGAL_CALL trace_eglQueryString(RegalContext *_context, EGLDisplay dpy, EGLint name)
{
  Internal("trace_eglQueryString","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  const char * ret = Trace::eglQueryString(_context, dpy, name);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglQuerySurface(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
{
  Internal("trace_eglQuerySurface","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglQuerySurface(_context, dpy, surface, attribute, value);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglSwapBuffers(RegalContext *_context, EGLDisplay dpy, EGLSurface surface)
{
  Internal("trace_eglSwapBuffers","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglSwapBuffers(_context, dpy, surface);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglTerminate(RegalContext *_context, EGLDisplay dpy)
{
  Internal("trace_eglTerminate","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglTerminate(_context, dpy);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglWaitGL(RegalContext *_context)
{
  Internal("trace_eglWaitGL","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglWaitGL(_context);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglWaitNative(RegalContext *_context, EGLint engine)
{
  Internal("trace_eglWaitNative","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglWaitNative(_context, engine);
  return ret;
}

// EGL_VERSION_1_1

static EGLBoolean REGAL_CALL trace_eglBindTexImage(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
  Internal("trace_eglBindTexImage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglBindTexImage(_context, dpy, surface, buffer);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglReleaseTexImage(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
  Internal("trace_eglReleaseTexImage","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglReleaseTexImage(_context, dpy, surface, buffer);
  return ret;
}

// EGL_VERSION_1_2

static EGLBoolean REGAL_CALL trace_eglBindAPI(RegalContext *_context, EGLenum api)
{
  Internal("trace_eglBindAPI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglBindAPI(_context, api);
  return ret;
}

static EGLSurface REGAL_CALL trace_eglCreatePbufferFromClientBuffer(RegalContext *_context, EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
{
  Internal("trace_eglCreatePbufferFromClientBuffer","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLSurface  ret = Trace::eglCreatePbufferFromClientBuffer(_context, dpy, buftype, buffer, config, attrib_list);
  return ret;
}

static EGLenum REGAL_CALL trace_eglQueryAPI(RegalContext *_context)
{
  Internal("trace_eglQueryAPI","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLenum  ret = Trace::eglQueryAPI(_context);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglReleaseThread(RegalContext *_context)
{
  Internal("trace_eglReleaseThread","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglReleaseThread(_context);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglSurfaceAttrib(RegalContext *_context, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
{
  Internal("trace_eglSurfaceAttrib","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglSurfaceAttrib(_context, dpy, surface, attribute, value);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglSwapInterval(RegalContext *_context, EGLDisplay dpy, EGLint interval)
{
  Internal("trace_eglSwapInterval","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglSwapInterval(_context, dpy, interval);
  return ret;
}

static EGLBoolean REGAL_CALL trace_eglWaitClient(RegalContext *_context)
{
  Internal("trace_eglWaitClient","()");
  //Thread::ThreadLocal &_instance = Thread::ThreadLocal::instance();
  //UNUSED_PARAMETER( instance );
  //Push<DispatchTableGlobal *> _push(_instance.nextDispatchTableGlobal);
  //_instance.nextDispatchTableGlobal = dispatcherGlobal.trace.next();
  EGLBoolean  ret = Trace::eglWaitClient(_context);
  return ret;
}

#endif // REGAL_SYS_EGL

void InitDispatchTrace(Dispatch::GL &tbl)
{

  // GL_VERSION_1_0

  tbl.glAccum = trace_glAccum;
  tbl.glAlphaFunc = trace_glAlphaFunc;
  tbl.glBegin = trace_glBegin;
  tbl.glBitmap = trace_glBitmap;
  tbl.glBlendFunc = trace_glBlendFunc;
  tbl.glCallList = trace_glCallList;
  tbl.glCallLists = trace_glCallLists;
  tbl.glClear = trace_glClear;
  tbl.glClearAccum = trace_glClearAccum;
  tbl.glClearColor = trace_glClearColor;
  tbl.glClearDepth = trace_glClearDepth;
  tbl.glClearIndex = trace_glClearIndex;
  tbl.glClearStencil = trace_glClearStencil;
  tbl.glClipPlane = trace_glClipPlane;
  tbl.glColor3b = trace_glColor3b;
  tbl.glColor3bv = trace_glColor3bv;
  tbl.glColor3d = trace_glColor3d;
  tbl.glColor3dv = trace_glColor3dv;
  tbl.glColor3f = trace_glColor3f;
  tbl.glColor3fv = trace_glColor3fv;
  tbl.glColor3i = trace_glColor3i;
  tbl.glColor3iv = trace_glColor3iv;
  tbl.glColor3s = trace_glColor3s;
  tbl.glColor3sv = trace_glColor3sv;
  tbl.glColor3ub = trace_glColor3ub;
  tbl.glColor3ubv = trace_glColor3ubv;
  tbl.glColor3ui = trace_glColor3ui;
  tbl.glColor3uiv = trace_glColor3uiv;
  tbl.glColor3us = trace_glColor3us;
  tbl.glColor3usv = trace_glColor3usv;
  tbl.glColor4b = trace_glColor4b;
  tbl.glColor4bv = trace_glColor4bv;
  tbl.glColor4d = trace_glColor4d;
  tbl.glColor4dv = trace_glColor4dv;
  tbl.glColor4f = trace_glColor4f;
  tbl.glColor4fv = trace_glColor4fv;
  tbl.glColor4i = trace_glColor4i;
  tbl.glColor4iv = trace_glColor4iv;
  tbl.glColor4s = trace_glColor4s;
  tbl.glColor4sv = trace_glColor4sv;
  tbl.glColor4ub = trace_glColor4ub;
  tbl.glColor4ubv = trace_glColor4ubv;
  tbl.glColor4ui = trace_glColor4ui;
  tbl.glColor4uiv = trace_glColor4uiv;
  tbl.glColor4us = trace_glColor4us;
  tbl.glColor4usv = trace_glColor4usv;
  tbl.glColorMask = trace_glColorMask;
  tbl.glColorMaterial = trace_glColorMaterial;
  tbl.glCopyPixels = trace_glCopyPixels;
  tbl.glCullFace = trace_glCullFace;
  tbl.glDeleteLists = trace_glDeleteLists;
  tbl.glDepthFunc = trace_glDepthFunc;
  tbl.glDepthMask = trace_glDepthMask;
  tbl.glDepthRange = trace_glDepthRange;
  tbl.glDisable = trace_glDisable;
  tbl.glDrawBuffer = trace_glDrawBuffer;
  tbl.glDrawPixels = trace_glDrawPixels;
  tbl.glEdgeFlag = trace_glEdgeFlag;
  tbl.glEdgeFlagv = trace_glEdgeFlagv;
  tbl.glEnable = trace_glEnable;
  tbl.glEnd = trace_glEnd;
  tbl.glEndList = trace_glEndList;
  tbl.glEvalCoord1d = trace_glEvalCoord1d;
  tbl.glEvalCoord1dv = trace_glEvalCoord1dv;
  tbl.glEvalCoord1f = trace_glEvalCoord1f;
  tbl.glEvalCoord1fv = trace_glEvalCoord1fv;
  tbl.glEvalCoord2d = trace_glEvalCoord2d;
  tbl.glEvalCoord2dv = trace_glEvalCoord2dv;
  tbl.glEvalCoord2f = trace_glEvalCoord2f;
  tbl.glEvalCoord2fv = trace_glEvalCoord2fv;
  tbl.glEvalMesh1 = trace_glEvalMesh1;
  tbl.glEvalMesh2 = trace_glEvalMesh2;
  tbl.glEvalPoint1 = trace_glEvalPoint1;
  tbl.glEvalPoint2 = trace_glEvalPoint2;
  tbl.glFeedbackBuffer = trace_glFeedbackBuffer;
  tbl.glFinish = trace_glFinish;
  tbl.glFlush = trace_glFlush;
  tbl.glFogf = trace_glFogf;
  tbl.glFogfv = trace_glFogfv;
  tbl.glFogi = trace_glFogi;
  tbl.glFogiv = trace_glFogiv;
  tbl.glFrontFace = trace_glFrontFace;
  tbl.glFrustum = trace_glFrustum;
  tbl.glGenLists = trace_glGenLists;
  tbl.glGetBooleanv = trace_glGetBooleanv;
  tbl.glGetClipPlane = trace_glGetClipPlane;
  tbl.glGetDoublev = trace_glGetDoublev;
  tbl.glGetError = trace_glGetError;
  tbl.glGetFloatv = trace_glGetFloatv;
  tbl.glGetIntegerv = trace_glGetIntegerv;
  tbl.glGetLightfv = trace_glGetLightfv;
  tbl.glGetLightiv = trace_glGetLightiv;
  tbl.glGetMapdv = trace_glGetMapdv;
  tbl.glGetMapfv = trace_glGetMapfv;
  tbl.glGetMapiv = trace_glGetMapiv;
  tbl.glGetMaterialfv = trace_glGetMaterialfv;
  tbl.glGetMaterialiv = trace_glGetMaterialiv;
  tbl.glGetPixelMapfv = trace_glGetPixelMapfv;
  tbl.glGetPixelMapuiv = trace_glGetPixelMapuiv;
  tbl.glGetPixelMapusv = trace_glGetPixelMapusv;
  tbl.glGetPolygonStipple = trace_glGetPolygonStipple;
  tbl.glGetString = trace_glGetString;
  tbl.glGetTexEnvfv = trace_glGetTexEnvfv;
  tbl.glGetTexEnviv = trace_glGetTexEnviv;
  tbl.glGetTexGendv = trace_glGetTexGendv;
  tbl.glGetTexGenfv = trace_glGetTexGenfv;
  tbl.glGetTexGeniv = trace_glGetTexGeniv;
  tbl.glGetTexImage = trace_glGetTexImage;
  tbl.glGetTexLevelParameterfv = trace_glGetTexLevelParameterfv;
  tbl.glGetTexLevelParameteriv = trace_glGetTexLevelParameteriv;
  tbl.glGetTexParameterfv = trace_glGetTexParameterfv;
  tbl.glGetTexParameteriv = trace_glGetTexParameteriv;
  tbl.glHint = trace_glHint;
  tbl.glIndexMask = trace_glIndexMask;
  tbl.glIndexd = trace_glIndexd;
  tbl.glIndexdv = trace_glIndexdv;
  tbl.glIndexf = trace_glIndexf;
  tbl.glIndexfv = trace_glIndexfv;
  tbl.glIndexi = trace_glIndexi;
  tbl.glIndexiv = trace_glIndexiv;
  tbl.glIndexs = trace_glIndexs;
  tbl.glIndexsv = trace_glIndexsv;
  tbl.glInitNames = trace_glInitNames;
  tbl.glIsEnabled = trace_glIsEnabled;
  tbl.glIsList = trace_glIsList;
  tbl.glLightModelf = trace_glLightModelf;
  tbl.glLightModelfv = trace_glLightModelfv;
  tbl.glLightModeli = trace_glLightModeli;
  tbl.glLightModeliv = trace_glLightModeliv;
  tbl.glLightf = trace_glLightf;
  tbl.glLightfv = trace_glLightfv;
  tbl.glLighti = trace_glLighti;
  tbl.glLightiv = trace_glLightiv;
  tbl.glLineStipple = trace_glLineStipple;
  tbl.glLineWidth = trace_glLineWidth;
  tbl.glListBase = trace_glListBase;
  tbl.glLoadIdentity = trace_glLoadIdentity;
  tbl.glLoadMatrixd = trace_glLoadMatrixd;
  tbl.glLoadMatrixf = trace_glLoadMatrixf;
  tbl.glLoadName = trace_glLoadName;
  tbl.glLogicOp = trace_glLogicOp;
  tbl.glMap1d = trace_glMap1d;
  tbl.glMap1f = trace_glMap1f;
  tbl.glMap2d = trace_glMap2d;
  tbl.glMap2f = trace_glMap2f;
  tbl.glMapGrid1d = trace_glMapGrid1d;
  tbl.glMapGrid1f = trace_glMapGrid1f;
  tbl.glMapGrid2d = trace_glMapGrid2d;
  tbl.glMapGrid2f = trace_glMapGrid2f;
  tbl.glMaterialf = trace_glMaterialf;
  tbl.glMaterialfv = trace_glMaterialfv;
  tbl.glMateriali = trace_glMateriali;
  tbl.glMaterialiv = trace_glMaterialiv;
  tbl.glMatrixMode = trace_glMatrixMode;
  tbl.glMultMatrixd = trace_glMultMatrixd;
  tbl.glMultMatrixf = trace_glMultMatrixf;
  tbl.glNewList = trace_glNewList;
  tbl.glNormal3b = trace_glNormal3b;
  tbl.glNormal3bv = trace_glNormal3bv;
  tbl.glNormal3d = trace_glNormal3d;
  tbl.glNormal3dv = trace_glNormal3dv;
  tbl.glNormal3f = trace_glNormal3f;
  tbl.glNormal3fv = trace_glNormal3fv;
  tbl.glNormal3i = trace_glNormal3i;
  tbl.glNormal3iv = trace_glNormal3iv;
  tbl.glNormal3s = trace_glNormal3s;
  tbl.glNormal3sv = trace_glNormal3sv;
  tbl.glOrtho = trace_glOrtho;
  tbl.glPassThrough = trace_glPassThrough;
  tbl.glPixelMapfv = trace_glPixelMapfv;
  tbl.glPixelMapuiv = trace_glPixelMapuiv;
  tbl.glPixelMapusv = trace_glPixelMapusv;
  tbl.glPixelStoref = trace_glPixelStoref;
  tbl.glPixelStorei = trace_glPixelStorei;
  tbl.glPixelTransferf = trace_glPixelTransferf;
  tbl.glPixelTransferi = trace_glPixelTransferi;
  tbl.glPixelZoom = trace_glPixelZoom;
  tbl.glPointSize = trace_glPointSize;
  tbl.glPolygonMode = trace_glPolygonMode;
  tbl.glPolygonStipple = trace_glPolygonStipple;
  tbl.glPopAttrib = trace_glPopAttrib;
  tbl.glPopMatrix = trace_glPopMatrix;
  tbl.glPopName = trace_glPopName;
  tbl.glPushAttrib = trace_glPushAttrib;
  tbl.glPushMatrix = trace_glPushMatrix;
  tbl.glPushName = trace_glPushName;
  tbl.glRasterPos2d = trace_glRasterPos2d;
  tbl.glRasterPos2dv = trace_glRasterPos2dv;
  tbl.glRasterPos2f = trace_glRasterPos2f;
  tbl.glRasterPos2fv = trace_glRasterPos2fv;
  tbl.glRasterPos2i = trace_glRasterPos2i;
  tbl.glRasterPos2iv = trace_glRasterPos2iv;
  tbl.glRasterPos2s = trace_glRasterPos2s;
  tbl.glRasterPos2sv = trace_glRasterPos2sv;
  tbl.glRasterPos3d = trace_glRasterPos3d;
  tbl.glRasterPos3dv = trace_glRasterPos3dv;
  tbl.glRasterPos3f = trace_glRasterPos3f;
  tbl.glRasterPos3fv = trace_glRasterPos3fv;
  tbl.glRasterPos3i = trace_glRasterPos3i;
  tbl.glRasterPos3iv = trace_glRasterPos3iv;
  tbl.glRasterPos3s = trace_glRasterPos3s;
  tbl.glRasterPos3sv = trace_glRasterPos3sv;
  tbl.glRasterPos4d = trace_glRasterPos4d;
  tbl.glRasterPos4dv = trace_glRasterPos4dv;
  tbl.glRasterPos4f = trace_glRasterPos4f;
  tbl.glRasterPos4fv = trace_glRasterPos4fv;
  tbl.glRasterPos4i = trace_glRasterPos4i;
  tbl.glRasterPos4iv = trace_glRasterPos4iv;
  tbl.glRasterPos4s = trace_glRasterPos4s;
  tbl.glRasterPos4sv = trace_glRasterPos4sv;
  tbl.glReadBuffer = trace_glReadBuffer;
  tbl.glReadPixels = trace_glReadPixels;
  tbl.glRectd = trace_glRectd;
  tbl.glRectdv = trace_glRectdv;
  tbl.glRectf = trace_glRectf;
  tbl.glRectfv = trace_glRectfv;
  tbl.glRecti = trace_glRecti;
  tbl.glRectiv = trace_glRectiv;
  tbl.glRects = trace_glRects;
  tbl.glRectsv = trace_glRectsv;
  tbl.glRenderMode = trace_glRenderMode;
  tbl.glRotated = trace_glRotated;
  tbl.glRotatef = trace_glRotatef;
  tbl.glScaled = trace_glScaled;
  tbl.glScalef = trace_glScalef;
  tbl.glScissor = trace_glScissor;
  tbl.glSelectBuffer = trace_glSelectBuffer;
  tbl.glShadeModel = trace_glShadeModel;
  tbl.glStencilFunc = trace_glStencilFunc;
  tbl.glStencilMask = trace_glStencilMask;
  tbl.glStencilOp = trace_glStencilOp;
  tbl.glTexCoord1d = trace_glTexCoord1d;
  tbl.glTexCoord1dv = trace_glTexCoord1dv;
  tbl.glTexCoord1f = trace_glTexCoord1f;
  tbl.glTexCoord1fv = trace_glTexCoord1fv;
  tbl.glTexCoord1i = trace_glTexCoord1i;
  tbl.glTexCoord1iv = trace_glTexCoord1iv;
  tbl.glTexCoord1s = trace_glTexCoord1s;
  tbl.glTexCoord1sv = trace_glTexCoord1sv;
  tbl.glTexCoord2d = trace_glTexCoord2d;
  tbl.glTexCoord2dv = trace_glTexCoord2dv;
  tbl.glTexCoord2f = trace_glTexCoord2f;
  tbl.glTexCoord2fv = trace_glTexCoord2fv;
  tbl.glTexCoord2i = trace_glTexCoord2i;
  tbl.glTexCoord2iv = trace_glTexCoord2iv;
  tbl.glTexCoord2s = trace_glTexCoord2s;
  tbl.glTexCoord2sv = trace_glTexCoord2sv;
  tbl.glTexCoord3d = trace_glTexCoord3d;
  tbl.glTexCoord3dv = trace_glTexCoord3dv;
  tbl.glTexCoord3f = trace_glTexCoord3f;
  tbl.glTexCoord3fv = trace_glTexCoord3fv;
  tbl.glTexCoord3i = trace_glTexCoord3i;
  tbl.glTexCoord3iv = trace_glTexCoord3iv;
  tbl.glTexCoord3s = trace_glTexCoord3s;
  tbl.glTexCoord3sv = trace_glTexCoord3sv;
  tbl.glTexCoord4d = trace_glTexCoord4d;
  tbl.glTexCoord4dv = trace_glTexCoord4dv;
  tbl.glTexCoord4f = trace_glTexCoord4f;
  tbl.glTexCoord4fv = trace_glTexCoord4fv;
  tbl.glTexCoord4i = trace_glTexCoord4i;
  tbl.glTexCoord4iv = trace_glTexCoord4iv;
  tbl.glTexCoord4s = trace_glTexCoord4s;
  tbl.glTexCoord4sv = trace_glTexCoord4sv;
  tbl.glTexEnvf = trace_glTexEnvf;
  tbl.glTexEnvfv = trace_glTexEnvfv;
  tbl.glTexEnvi = trace_glTexEnvi;
  tbl.glTexEnviv = trace_glTexEnviv;
  tbl.glTexGend = trace_glTexGend;
  tbl.glTexGendv = trace_glTexGendv;
  tbl.glTexGenf = trace_glTexGenf;
  tbl.glTexGenfv = trace_glTexGenfv;
  tbl.glTexGeni = trace_glTexGeni;
  tbl.glTexGeniv = trace_glTexGeniv;
  tbl.glTexImage1D = trace_glTexImage1D;
  tbl.glTexImage2D = trace_glTexImage2D;
  tbl.glTexParameterf = trace_glTexParameterf;
  tbl.glTexParameterfv = trace_glTexParameterfv;
  tbl.glTexParameteri = trace_glTexParameteri;
  tbl.glTexParameteriv = trace_glTexParameteriv;
  tbl.glTranslated = trace_glTranslated;
  tbl.glTranslatef = trace_glTranslatef;
  tbl.glVertex2d = trace_glVertex2d;
  tbl.glVertex2dv = trace_glVertex2dv;
  tbl.glVertex2f = trace_glVertex2f;
  tbl.glVertex2fv = trace_glVertex2fv;
  tbl.glVertex2i = trace_glVertex2i;
  tbl.glVertex2iv = trace_glVertex2iv;
  tbl.glVertex2s = trace_glVertex2s;
  tbl.glVertex2sv = trace_glVertex2sv;
  tbl.glVertex3d = trace_glVertex3d;
  tbl.glVertex3dv = trace_glVertex3dv;
  tbl.glVertex3f = trace_glVertex3f;
  tbl.glVertex3fv = trace_glVertex3fv;
  tbl.glVertex3i = trace_glVertex3i;
  tbl.glVertex3iv = trace_glVertex3iv;
  tbl.glVertex3s = trace_glVertex3s;
  tbl.glVertex3sv = trace_glVertex3sv;
  tbl.glVertex4d = trace_glVertex4d;
  tbl.glVertex4dv = trace_glVertex4dv;
  tbl.glVertex4f = trace_glVertex4f;
  tbl.glVertex4fv = trace_glVertex4fv;
  tbl.glVertex4i = trace_glVertex4i;
  tbl.glVertex4iv = trace_glVertex4iv;
  tbl.glVertex4s = trace_glVertex4s;
  tbl.glVertex4sv = trace_glVertex4sv;
  tbl.glViewport = trace_glViewport;

  // GL_VERSION_1_1

  tbl.glAreTexturesResident = trace_glAreTexturesResident;
  tbl.glArrayElement = trace_glArrayElement;
  tbl.glBindTexture = trace_glBindTexture;
  tbl.glColorPointer = trace_glColorPointer;
  tbl.glCopyTexImage1D = trace_glCopyTexImage1D;
  tbl.glCopyTexImage2D = trace_glCopyTexImage2D;
  tbl.glCopyTexSubImage1D = trace_glCopyTexSubImage1D;
  tbl.glCopyTexSubImage2D = trace_glCopyTexSubImage2D;
  tbl.glDeleteTextures = trace_glDeleteTextures;
  tbl.glDisableClientState = trace_glDisableClientState;
  tbl.glDrawArrays = trace_glDrawArrays;
  tbl.glDrawElements = trace_glDrawElements;
  tbl.glEdgeFlagPointer = trace_glEdgeFlagPointer;
  tbl.glEnableClientState = trace_glEnableClientState;
  tbl.glGenTextures = trace_glGenTextures;
  tbl.glGetPointerv = trace_glGetPointerv;
  tbl.glIndexPointer = trace_glIndexPointer;
  tbl.glIndexub = trace_glIndexub;
  tbl.glIndexubv = trace_glIndexubv;
  tbl.glInterleavedArrays = trace_glInterleavedArrays;
  tbl.glIsTexture = trace_glIsTexture;
  tbl.glNormalPointer = trace_glNormalPointer;
  tbl.glPolygonOffset = trace_glPolygonOffset;
  tbl.glPopClientAttrib = trace_glPopClientAttrib;
  tbl.glPrioritizeTextures = trace_glPrioritizeTextures;
  tbl.glPushClientAttrib = trace_glPushClientAttrib;
  tbl.glTexCoordPointer = trace_glTexCoordPointer;
  tbl.glTexSubImage1D = trace_glTexSubImage1D;
  tbl.glTexSubImage2D = trace_glTexSubImage2D;
  tbl.glVertexPointer = trace_glVertexPointer;

  // GL_VERSION_1_2

  tbl.glBlendColor = trace_glBlendColor;
  tbl.glBlendEquation = trace_glBlendEquation;
  tbl.glCopyTexSubImage3D = trace_glCopyTexSubImage3D;
  tbl.glDrawRangeElements = trace_glDrawRangeElements;
  tbl.glTexImage3D = trace_glTexImage3D;
  tbl.glTexSubImage3D = trace_glTexSubImage3D;

  // GL_VERSION_1_3

  tbl.glActiveTexture = trace_glActiveTexture;
  tbl.glClientActiveTexture = trace_glClientActiveTexture;
  tbl.glCompressedTexImage1D = trace_glCompressedTexImage1D;
  tbl.glCompressedTexImage2D = trace_glCompressedTexImage2D;
  tbl.glCompressedTexImage3D = trace_glCompressedTexImage3D;
  tbl.glCompressedTexSubImage1D = trace_glCompressedTexSubImage1D;
  tbl.glCompressedTexSubImage2D = trace_glCompressedTexSubImage2D;
  tbl.glCompressedTexSubImage3D = trace_glCompressedTexSubImage3D;
  tbl.glGetCompressedTexImage = trace_glGetCompressedTexImage;
  tbl.glLoadTransposeMatrixd = trace_glLoadTransposeMatrixd;
  tbl.glLoadTransposeMatrixf = trace_glLoadTransposeMatrixf;
  tbl.glMultTransposeMatrixd = trace_glMultTransposeMatrixd;
  tbl.glMultTransposeMatrixf = trace_glMultTransposeMatrixf;
  tbl.glMultiTexCoord1d = trace_glMultiTexCoord1d;
  tbl.glMultiTexCoord1dv = trace_glMultiTexCoord1dv;
  tbl.glMultiTexCoord1f = trace_glMultiTexCoord1f;
  tbl.glMultiTexCoord1fv = trace_glMultiTexCoord1fv;
  tbl.glMultiTexCoord1i = trace_glMultiTexCoord1i;
  tbl.glMultiTexCoord1iv = trace_glMultiTexCoord1iv;
  tbl.glMultiTexCoord1s = trace_glMultiTexCoord1s;
  tbl.glMultiTexCoord1sv = trace_glMultiTexCoord1sv;
  tbl.glMultiTexCoord2d = trace_glMultiTexCoord2d;
  tbl.glMultiTexCoord2dv = trace_glMultiTexCoord2dv;
  tbl.glMultiTexCoord2f = trace_glMultiTexCoord2f;
  tbl.glMultiTexCoord2fv = trace_glMultiTexCoord2fv;
  tbl.glMultiTexCoord2i = trace_glMultiTexCoord2i;
  tbl.glMultiTexCoord2iv = trace_glMultiTexCoord2iv;
  tbl.glMultiTexCoord2s = trace_glMultiTexCoord2s;
  tbl.glMultiTexCoord2sv = trace_glMultiTexCoord2sv;
  tbl.glMultiTexCoord3d = trace_glMultiTexCoord3d;
  tbl.glMultiTexCoord3dv = trace_glMultiTexCoord3dv;
  tbl.glMultiTexCoord3f = trace_glMultiTexCoord3f;
  tbl.glMultiTexCoord3fv = trace_glMultiTexCoord3fv;
  tbl.glMultiTexCoord3i = trace_glMultiTexCoord3i;
  tbl.glMultiTexCoord3iv = trace_glMultiTexCoord3iv;
  tbl.glMultiTexCoord3s = trace_glMultiTexCoord3s;
  tbl.glMultiTexCoord3sv = trace_glMultiTexCoord3sv;
  tbl.glMultiTexCoord4d = trace_glMultiTexCoord4d;
  tbl.glMultiTexCoord4dv = trace_glMultiTexCoord4dv;
  tbl.glMultiTexCoord4f = trace_glMultiTexCoord4f;
  tbl.glMultiTexCoord4fv = trace_glMultiTexCoord4fv;
  tbl.glMultiTexCoord4i = trace_glMultiTexCoord4i;
  tbl.glMultiTexCoord4iv = trace_glMultiTexCoord4iv;
  tbl.glMultiTexCoord4s = trace_glMultiTexCoord4s;
  tbl.glMultiTexCoord4sv = trace_glMultiTexCoord4sv;
  tbl.glSampleCoverage = trace_glSampleCoverage;

  // GL_VERSION_1_4

  tbl.glBlendFuncSeparate = trace_glBlendFuncSeparate;
  tbl.glFogCoordPointer = trace_glFogCoordPointer;
  tbl.glFogCoordd = trace_glFogCoordd;
  tbl.glFogCoorddv = trace_glFogCoorddv;
  tbl.glFogCoordf = trace_glFogCoordf;
  tbl.glFogCoordfv = trace_glFogCoordfv;
  tbl.glMultiDrawArrays = trace_glMultiDrawArrays;
  tbl.glMultiDrawElements = trace_glMultiDrawElements;
  tbl.glPointParameterf = trace_glPointParameterf;
  tbl.glPointParameterfv = trace_glPointParameterfv;
  tbl.glPointParameteri = trace_glPointParameteri;
  tbl.glPointParameteriv = trace_glPointParameteriv;
  tbl.glSecondaryColor3b = trace_glSecondaryColor3b;
  tbl.glSecondaryColor3bv = trace_glSecondaryColor3bv;
  tbl.glSecondaryColor3d = trace_glSecondaryColor3d;
  tbl.glSecondaryColor3dv = trace_glSecondaryColor3dv;
  tbl.glSecondaryColor3f = trace_glSecondaryColor3f;
  tbl.glSecondaryColor3fv = trace_glSecondaryColor3fv;
  tbl.glSecondaryColor3i = trace_glSecondaryColor3i;
  tbl.glSecondaryColor3iv = trace_glSecondaryColor3iv;
  tbl.glSecondaryColor3s = trace_glSecondaryColor3s;
  tbl.glSecondaryColor3sv = trace_glSecondaryColor3sv;
  tbl.glSecondaryColor3ub = trace_glSecondaryColor3ub;
  tbl.glSecondaryColor3ubv = trace_glSecondaryColor3ubv;
  tbl.glSecondaryColor3ui = trace_glSecondaryColor3ui;
  tbl.glSecondaryColor3uiv = trace_glSecondaryColor3uiv;
  tbl.glSecondaryColor3us = trace_glSecondaryColor3us;
  tbl.glSecondaryColor3usv = trace_glSecondaryColor3usv;
  tbl.glSecondaryColorPointer = trace_glSecondaryColorPointer;
  tbl.glWindowPos2d = trace_glWindowPos2d;
  tbl.glWindowPos2dv = trace_glWindowPos2dv;
  tbl.glWindowPos2f = trace_glWindowPos2f;
  tbl.glWindowPos2fv = trace_glWindowPos2fv;
  tbl.glWindowPos2i = trace_glWindowPos2i;
  tbl.glWindowPos2iv = trace_glWindowPos2iv;
  tbl.glWindowPos2s = trace_glWindowPos2s;
  tbl.glWindowPos2sv = trace_glWindowPos2sv;
  tbl.glWindowPos3d = trace_glWindowPos3d;
  tbl.glWindowPos3dv = trace_glWindowPos3dv;
  tbl.glWindowPos3f = trace_glWindowPos3f;
  tbl.glWindowPos3fv = trace_glWindowPos3fv;
  tbl.glWindowPos3i = trace_glWindowPos3i;
  tbl.glWindowPos3iv = trace_glWindowPos3iv;
  tbl.glWindowPos3s = trace_glWindowPos3s;
  tbl.glWindowPos3sv = trace_glWindowPos3sv;

  // GL_VERSION_1_5

  tbl.glBeginQuery = trace_glBeginQuery;
  tbl.glBindBuffer = trace_glBindBuffer;
  tbl.glBufferData = trace_glBufferData;
  tbl.glBufferSubData = trace_glBufferSubData;
  tbl.glDeleteBuffers = trace_glDeleteBuffers;
  tbl.glDeleteQueries = trace_glDeleteQueries;
  tbl.glEndQuery = trace_glEndQuery;
  tbl.glGenBuffers = trace_glGenBuffers;
  tbl.glGenQueries = trace_glGenQueries;
  tbl.glGetBufferParameteriv = trace_glGetBufferParameteriv;
  tbl.glGetBufferPointerv = trace_glGetBufferPointerv;
  tbl.glGetBufferSubData = trace_glGetBufferSubData;
  tbl.glGetQueryObjectiv = trace_glGetQueryObjectiv;
  tbl.glGetQueryObjectuiv = trace_glGetQueryObjectuiv;
  tbl.glGetQueryiv = trace_glGetQueryiv;
  tbl.glIsBuffer = trace_glIsBuffer;
  tbl.glIsQuery = trace_glIsQuery;
  tbl.glMapBuffer = trace_glMapBuffer;
  tbl.glUnmapBuffer = trace_glUnmapBuffer;

  // GL_VERSION_2_0

  tbl.glAttachShader = trace_glAttachShader;
  tbl.glBindAttribLocation = trace_glBindAttribLocation;
  tbl.glBlendEquationSeparate = trace_glBlendEquationSeparate;
  tbl.glCompileShader = trace_glCompileShader;
  tbl.glCreateProgram = trace_glCreateProgram;
  tbl.glCreateShader = trace_glCreateShader;
  tbl.glDeleteProgram = trace_glDeleteProgram;
  tbl.glDeleteShader = trace_glDeleteShader;
  tbl.glDetachShader = trace_glDetachShader;
  tbl.glDisableVertexAttribArray = trace_glDisableVertexAttribArray;
  tbl.glDrawBuffers = trace_glDrawBuffers;
  tbl.glEnableVertexAttribArray = trace_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = trace_glGetActiveAttrib;
  tbl.glGetActiveUniform = trace_glGetActiveUniform;
  tbl.glGetAttachedShaders = trace_glGetAttachedShaders;
  tbl.glGetAttribLocation = trace_glGetAttribLocation;
  tbl.glGetProgramInfoLog = trace_glGetProgramInfoLog;
  tbl.glGetProgramiv = trace_glGetProgramiv;
  tbl.glGetShaderInfoLog = trace_glGetShaderInfoLog;
  tbl.glGetShaderSource = trace_glGetShaderSource;
  tbl.glGetShaderiv = trace_glGetShaderiv;
  tbl.glGetUniformLocation = trace_glGetUniformLocation;
  tbl.glGetUniformfv = trace_glGetUniformfv;
  tbl.glGetUniformiv = trace_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = trace_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribdv = trace_glGetVertexAttribdv;
  tbl.glGetVertexAttribfv = trace_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = trace_glGetVertexAttribiv;
  tbl.glIsProgram = trace_glIsProgram;
  tbl.glIsShader = trace_glIsShader;
  tbl.glLinkProgram = trace_glLinkProgram;
  tbl.glShaderSource = trace_glShaderSource;
  tbl.glStencilFuncSeparate = trace_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = trace_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = trace_glStencilOpSeparate;
  tbl.glUniform1f = trace_glUniform1f;
  tbl.glUniform1fv = trace_glUniform1fv;
  tbl.glUniform1i = trace_glUniform1i;
  tbl.glUniform1iv = trace_glUniform1iv;
  tbl.glUniform2f = trace_glUniform2f;
  tbl.glUniform2fv = trace_glUniform2fv;
  tbl.glUniform2i = trace_glUniform2i;
  tbl.glUniform2iv = trace_glUniform2iv;
  tbl.glUniform3f = trace_glUniform3f;
  tbl.glUniform3fv = trace_glUniform3fv;
  tbl.glUniform3i = trace_glUniform3i;
  tbl.glUniform3iv = trace_glUniform3iv;
  tbl.glUniform4f = trace_glUniform4f;
  tbl.glUniform4fv = trace_glUniform4fv;
  tbl.glUniform4i = trace_glUniform4i;
  tbl.glUniform4iv = trace_glUniform4iv;
  tbl.glUniformMatrix2fv = trace_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = trace_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = trace_glUniformMatrix4fv;
  tbl.glUseProgram = trace_glUseProgram;
  tbl.glValidateProgram = trace_glValidateProgram;
  tbl.glVertexAttrib1d = trace_glVertexAttrib1d;
  tbl.glVertexAttrib1dv = trace_glVertexAttrib1dv;
  tbl.glVertexAttrib1f = trace_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = trace_glVertexAttrib1fv;
  tbl.glVertexAttrib1s = trace_glVertexAttrib1s;
  tbl.glVertexAttrib1sv = trace_glVertexAttrib1sv;
  tbl.glVertexAttrib2d = trace_glVertexAttrib2d;
  tbl.glVertexAttrib2dv = trace_glVertexAttrib2dv;
  tbl.glVertexAttrib2f = trace_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = trace_glVertexAttrib2fv;
  tbl.glVertexAttrib2s = trace_glVertexAttrib2s;
  tbl.glVertexAttrib2sv = trace_glVertexAttrib2sv;
  tbl.glVertexAttrib3d = trace_glVertexAttrib3d;
  tbl.glVertexAttrib3dv = trace_glVertexAttrib3dv;
  tbl.glVertexAttrib3f = trace_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = trace_glVertexAttrib3fv;
  tbl.glVertexAttrib3s = trace_glVertexAttrib3s;
  tbl.glVertexAttrib3sv = trace_glVertexAttrib3sv;
  tbl.glVertexAttrib4Nbv = trace_glVertexAttrib4Nbv;
  tbl.glVertexAttrib4Niv = trace_glVertexAttrib4Niv;
  tbl.glVertexAttrib4Nsv = trace_glVertexAttrib4Nsv;
  tbl.glVertexAttrib4Nub = trace_glVertexAttrib4Nub;
  tbl.glVertexAttrib4Nubv = trace_glVertexAttrib4Nubv;
  tbl.glVertexAttrib4Nuiv = trace_glVertexAttrib4Nuiv;
  tbl.glVertexAttrib4Nusv = trace_glVertexAttrib4Nusv;
  tbl.glVertexAttrib4bv = trace_glVertexAttrib4bv;
  tbl.glVertexAttrib4d = trace_glVertexAttrib4d;
  tbl.glVertexAttrib4dv = trace_glVertexAttrib4dv;
  tbl.glVertexAttrib4f = trace_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = trace_glVertexAttrib4fv;
  tbl.glVertexAttrib4iv = trace_glVertexAttrib4iv;
  tbl.glVertexAttrib4s = trace_glVertexAttrib4s;
  tbl.glVertexAttrib4sv = trace_glVertexAttrib4sv;
  tbl.glVertexAttrib4ubv = trace_glVertexAttrib4ubv;
  tbl.glVertexAttrib4uiv = trace_glVertexAttrib4uiv;
  tbl.glVertexAttrib4usv = trace_glVertexAttrib4usv;
  tbl.glVertexAttribPointer = trace_glVertexAttribPointer;

  // GL_VERSION_2_1

  tbl.glUniformMatrix2x3fv = trace_glUniformMatrix2x3fv;
  tbl.glUniformMatrix2x4fv = trace_glUniformMatrix2x4fv;
  tbl.glUniformMatrix3x2fv = trace_glUniformMatrix3x2fv;
  tbl.glUniformMatrix3x4fv = trace_glUniformMatrix3x4fv;
  tbl.glUniformMatrix4x2fv = trace_glUniformMatrix4x2fv;
  tbl.glUniformMatrix4x3fv = trace_glUniformMatrix4x3fv;

  // GL_VERSION_3_0

  tbl.glBeginConditionalRender = trace_glBeginConditionalRender;
  tbl.glBeginTransformFeedback = trace_glBeginTransformFeedback;
  tbl.glBindFragDataLocation = trace_glBindFragDataLocation;
  tbl.glClampColor = trace_glClampColor;
  tbl.glClearBufferfi = trace_glClearBufferfi;
  tbl.glClearBufferfv = trace_glClearBufferfv;
  tbl.glClearBufferiv = trace_glClearBufferiv;
  tbl.glClearBufferuiv = trace_glClearBufferuiv;
  tbl.glColorMaski = trace_glColorMaski;
  tbl.glDisablei = trace_glDisablei;
  tbl.glEnablei = trace_glEnablei;
  tbl.glEndConditionalRender = trace_glEndConditionalRender;
  tbl.glEndTransformFeedback = trace_glEndTransformFeedback;
  tbl.glGetBooleani_v = trace_glGetBooleani_v;
  tbl.glGetFragDataLocation = trace_glGetFragDataLocation;
  tbl.glGetStringi = trace_glGetStringi;
  tbl.glGetTexParameterIiv = trace_glGetTexParameterIiv;
  tbl.glGetTexParameterIuiv = trace_glGetTexParameterIuiv;
  tbl.glGetTransformFeedbackVarying = trace_glGetTransformFeedbackVarying;
  tbl.glGetUniformuiv = trace_glGetUniformuiv;
  tbl.glGetVertexAttribIiv = trace_glGetVertexAttribIiv;
  tbl.glGetVertexAttribIuiv = trace_glGetVertexAttribIuiv;
  tbl.glIsEnabledi = trace_glIsEnabledi;
  tbl.glTexParameterIiv = trace_glTexParameterIiv;
  tbl.glTexParameterIuiv = trace_glTexParameterIuiv;
  tbl.glTransformFeedbackVaryings = trace_glTransformFeedbackVaryings;
  tbl.glUniform1ui = trace_glUniform1ui;
  tbl.glUniform1uiv = trace_glUniform1uiv;
  tbl.glUniform2ui = trace_glUniform2ui;
  tbl.glUniform2uiv = trace_glUniform2uiv;
  tbl.glUniform3ui = trace_glUniform3ui;
  tbl.glUniform3uiv = trace_glUniform3uiv;
  tbl.glUniform4ui = trace_glUniform4ui;
  tbl.glUniform4uiv = trace_glUniform4uiv;
  tbl.glVertexAttribI1i = trace_glVertexAttribI1i;
  tbl.glVertexAttribI1iv = trace_glVertexAttribI1iv;
  tbl.glVertexAttribI1ui = trace_glVertexAttribI1ui;
  tbl.glVertexAttribI1uiv = trace_glVertexAttribI1uiv;
  tbl.glVertexAttribI2i = trace_glVertexAttribI2i;
  tbl.glVertexAttribI2iv = trace_glVertexAttribI2iv;
  tbl.glVertexAttribI2ui = trace_glVertexAttribI2ui;
  tbl.glVertexAttribI2uiv = trace_glVertexAttribI2uiv;
  tbl.glVertexAttribI3i = trace_glVertexAttribI3i;
  tbl.glVertexAttribI3iv = trace_glVertexAttribI3iv;
  tbl.glVertexAttribI3ui = trace_glVertexAttribI3ui;
  tbl.glVertexAttribI3uiv = trace_glVertexAttribI3uiv;
  tbl.glVertexAttribI4bv = trace_glVertexAttribI4bv;
  tbl.glVertexAttribI4i = trace_glVertexAttribI4i;
  tbl.glVertexAttribI4iv = trace_glVertexAttribI4iv;
  tbl.glVertexAttribI4sv = trace_glVertexAttribI4sv;
  tbl.glVertexAttribI4ubv = trace_glVertexAttribI4ubv;
  tbl.glVertexAttribI4ui = trace_glVertexAttribI4ui;
  tbl.glVertexAttribI4uiv = trace_glVertexAttribI4uiv;
  tbl.glVertexAttribI4usv = trace_glVertexAttribI4usv;
  tbl.glVertexAttribIPointer = trace_glVertexAttribIPointer;

  // GL_VERSION_3_1

  tbl.glDrawArraysInstanced = trace_glDrawArraysInstanced;
  tbl.glDrawElementsInstanced = trace_glDrawElementsInstanced;
  tbl.glPrimitiveRestartIndex = trace_glPrimitiveRestartIndex;
  tbl.glTexBuffer = trace_glTexBuffer;

  // GL_VERSION_3_2

  tbl.glFramebufferTexture = trace_glFramebufferTexture;
  tbl.glGetBufferParameteri64v = trace_glGetBufferParameteri64v;
  tbl.glGetInteger64i_v = trace_glGetInteger64i_v;

  // GL_VERSION_3_3

  tbl.glVertexAttribDivisor = trace_glVertexAttribDivisor;

  // GL_VERSION_4_0

  tbl.glBlendEquationSeparatei = trace_glBlendEquationSeparatei;
  tbl.glBlendEquationi = trace_glBlendEquationi;
  tbl.glBlendFuncSeparatei = trace_glBlendFuncSeparatei;
  tbl.glBlendFunci = trace_glBlendFunci;

  // GL_3DFX_tbuffer

  tbl.glTbufferMask3DFX = trace_glTbufferMask3DFX;

  // GL_AMD_debug_output

  tbl.glDebugMessageCallbackAMD = trace_glDebugMessageCallbackAMD;
  tbl.glDebugMessageEnableAMD = trace_glDebugMessageEnableAMD;
  tbl.glDebugMessageInsertAMD = trace_glDebugMessageInsertAMD;
  tbl.glGetDebugMessageLogAMD = trace_glGetDebugMessageLogAMD;

  // GL_AMD_draw_buffers_blend

  tbl.glBlendEquationIndexedAMD = trace_glBlendEquationIndexedAMD;
  tbl.glBlendEquationSeparateIndexedAMD = trace_glBlendEquationSeparateIndexedAMD;
  tbl.glBlendFuncIndexedAMD = trace_glBlendFuncIndexedAMD;
  tbl.glBlendFuncSeparateIndexedAMD = trace_glBlendFuncSeparateIndexedAMD;

  // GL_AMD_multi_draw_indirect

  tbl.glMultiDrawArraysIndirectAMD = trace_glMultiDrawArraysIndirectAMD;
  tbl.glMultiDrawElementsIndirectAMD = trace_glMultiDrawElementsIndirectAMD;

  // GL_AMD_name_gen_delete

  tbl.glDeleteNamesAMD = trace_glDeleteNamesAMD;
  tbl.glGenNamesAMD = trace_glGenNamesAMD;
  tbl.glIsNameAMD = trace_glIsNameAMD;

  // GL_AMD_performance_monitor

  tbl.glBeginPerfMonitorAMD = trace_glBeginPerfMonitorAMD;
  tbl.glDeletePerfMonitorsAMD = trace_glDeletePerfMonitorsAMD;
  tbl.glEndPerfMonitorAMD = trace_glEndPerfMonitorAMD;
  tbl.glGenPerfMonitorsAMD = trace_glGenPerfMonitorsAMD;
  tbl.glGetPerfMonitorCounterDataAMD = trace_glGetPerfMonitorCounterDataAMD;
  tbl.glGetPerfMonitorCounterInfoAMD = trace_glGetPerfMonitorCounterInfoAMD;
  tbl.glGetPerfMonitorCounterStringAMD = trace_glGetPerfMonitorCounterStringAMD;
  tbl.glGetPerfMonitorCountersAMD = trace_glGetPerfMonitorCountersAMD;
  tbl.glGetPerfMonitorGroupStringAMD = trace_glGetPerfMonitorGroupStringAMD;
  tbl.glGetPerfMonitorGroupsAMD = trace_glGetPerfMonitorGroupsAMD;
  tbl.glSelectPerfMonitorCountersAMD = trace_glSelectPerfMonitorCountersAMD;

  // GL_AMD_sample_positions

  tbl.glSetMultisamplefvAMD = trace_glSetMultisamplefvAMD;

  // GL_AMD_vertex_shader_tessellator

  tbl.glTessellationFactorAMD = trace_glTessellationFactorAMD;
  tbl.glTessellationModeAMD = trace_glTessellationModeAMD;

  // GL_ANGLE_framebuffer_blit

  tbl.glBlitFramebufferANGLE = trace_glBlitFramebufferANGLE;

  // GL_ANGLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleANGLE = trace_glRenderbufferStorageMultisampleANGLE;

  // GL_APPLE_element_array

  tbl.glDrawElementArrayAPPLE = trace_glDrawElementArrayAPPLE;
  tbl.glDrawRangeElementArrayAPPLE = trace_glDrawRangeElementArrayAPPLE;
  tbl.glElementPointerAPPLE = trace_glElementPointerAPPLE;
  tbl.glMultiDrawElementArrayAPPLE = trace_glMultiDrawElementArrayAPPLE;
  tbl.glMultiDrawRangeElementArrayAPPLE = trace_glMultiDrawRangeElementArrayAPPLE;

  // GL_APPLE_fence

  tbl.glDeleteFencesAPPLE = trace_glDeleteFencesAPPLE;
  tbl.glFinishFenceAPPLE = trace_glFinishFenceAPPLE;
  tbl.glFinishObjectAPPLE = trace_glFinishObjectAPPLE;
  tbl.glGenFencesAPPLE = trace_glGenFencesAPPLE;
  tbl.glIsFenceAPPLE = trace_glIsFenceAPPLE;
  tbl.glSetFenceAPPLE = trace_glSetFenceAPPLE;
  tbl.glTestFenceAPPLE = trace_glTestFenceAPPLE;
  tbl.glTestObjectAPPLE = trace_glTestObjectAPPLE;

  // GL_APPLE_flush_buffer_range

  tbl.glBufferParameteriAPPLE = trace_glBufferParameteriAPPLE;
  tbl.glFlushMappedBufferRangeAPPLE = trace_glFlushMappedBufferRangeAPPLE;

  // GL_APPLE_flush_render

  tbl.glFinishRenderAPPLE = trace_glFinishRenderAPPLE;
  tbl.glFlushRenderAPPLE = trace_glFlushRenderAPPLE;
  tbl.glSwapAPPLE = trace_glSwapAPPLE;

  // GL_APPLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleAPPLE = trace_glRenderbufferStorageMultisampleAPPLE;
  tbl.glResolveMultisampleFramebufferAPPLE = trace_glResolveMultisampleFramebufferAPPLE;

  // GL_APPLE_object_purgeable

  tbl.glGetObjectParameterivAPPLE = trace_glGetObjectParameterivAPPLE;
  tbl.glObjectPurgeableAPPLE = trace_glObjectPurgeableAPPLE;
  tbl.glObjectUnpurgeableAPPLE = trace_glObjectUnpurgeableAPPLE;

  // GL_APPLE_texture_range

  tbl.glGetTexParameterPointervAPPLE = trace_glGetTexParameterPointervAPPLE;
  tbl.glTextureRangeAPPLE = trace_glTextureRangeAPPLE;

  // GL_APPLE_vertex_array_object

  tbl.glBindVertexArrayAPPLE = trace_glBindVertexArrayAPPLE;
  tbl.glDeleteVertexArraysAPPLE = trace_glDeleteVertexArraysAPPLE;
  tbl.glGenVertexArraysAPPLE = trace_glGenVertexArraysAPPLE;
  tbl.glIsVertexArrayAPPLE = trace_glIsVertexArrayAPPLE;

  // GL_APPLE_vertex_array_range

  tbl.glFlushVertexArrayRangeAPPLE = trace_glFlushVertexArrayRangeAPPLE;
  tbl.glVertexArrayParameteriAPPLE = trace_glVertexArrayParameteriAPPLE;
  tbl.glVertexArrayRangeAPPLE = trace_glVertexArrayRangeAPPLE;

  // GL_APPLE_vertex_program_evaluators

  tbl.glDisableVertexAttribAPPLE = trace_glDisableVertexAttribAPPLE;
  tbl.glEnableVertexAttribAPPLE = trace_glEnableVertexAttribAPPLE;
  tbl.glIsVertexAttribEnabledAPPLE = trace_glIsVertexAttribEnabledAPPLE;
  tbl.glMapVertexAttrib1dAPPLE = trace_glMapVertexAttrib1dAPPLE;
  tbl.glMapVertexAttrib1fAPPLE = trace_glMapVertexAttrib1fAPPLE;
  tbl.glMapVertexAttrib2dAPPLE = trace_glMapVertexAttrib2dAPPLE;
  tbl.glMapVertexAttrib2fAPPLE = trace_glMapVertexAttrib2fAPPLE;

  // GL_ARB_ES2_compatibility

  tbl.glClearDepthf = trace_glClearDepthf;
  tbl.glDepthRangef = trace_glDepthRangef;
  tbl.glGetShaderPrecisionFormat = trace_glGetShaderPrecisionFormat;
  tbl.glReleaseShaderCompiler = trace_glReleaseShaderCompiler;
  tbl.glShaderBinary = trace_glShaderBinary;

  // GL_ARB_base_instance

  tbl.glDrawArraysInstancedBaseInstance = trace_glDrawArraysInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseInstance = trace_glDrawElementsInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseVertexBaseInstance = trace_glDrawElementsInstancedBaseVertexBaseInstance;

  // GL_ARB_blend_func_extended

  tbl.glBindFragDataLocationIndexed = trace_glBindFragDataLocationIndexed;
  tbl.glGetFragDataIndex = trace_glGetFragDataIndex;

  // GL_ARB_buffer_storage

  tbl.glBufferStorage = trace_glBufferStorage;
  tbl.glNamedBufferStorageEXT = trace_glNamedBufferStorageEXT;

  // GL_ARB_clear_buffer_object

  tbl.glClearBufferData = trace_glClearBufferData;
  tbl.glClearBufferSubData = trace_glClearBufferSubData;
  tbl.glClearNamedBufferDataEXT = trace_glClearNamedBufferDataEXT;

  // GL_ARB_clear_texture

  tbl.glClearTexImage = trace_glClearTexImage;
  tbl.glClearTexSubImage = trace_glClearTexSubImage;

  // GL_ARB_color_buffer_float

  tbl.glClampColorARB = trace_glClampColorARB;

  // GL_ARB_compute_shader

  tbl.glDispatchCompute = trace_glDispatchCompute;
  tbl.glDispatchComputeIndirect = trace_glDispatchComputeIndirect;

  // GL_ARB_copy_buffer

  tbl.glCopyBufferSubData = trace_glCopyBufferSubData;

  // GL_ARB_copy_image

  tbl.glCopyImageSubData = trace_glCopyImageSubData;

  // GL_ARB_debug_output

  tbl.glDebugMessageCallbackARB = trace_glDebugMessageCallbackARB;
  tbl.glDebugMessageControlARB = trace_glDebugMessageControlARB;
  tbl.glDebugMessageInsertARB = trace_glDebugMessageInsertARB;
  tbl.glGetDebugMessageLogARB = trace_glGetDebugMessageLogARB;

  // GL_ARB_draw_buffers

  tbl.glDrawBuffersARB = trace_glDrawBuffersARB;

  // GL_ARB_draw_buffers_blend

  tbl.glBlendEquationSeparateiARB = trace_glBlendEquationSeparateiARB;
  tbl.glBlendEquationiARB = trace_glBlendEquationiARB;
  tbl.glBlendFuncSeparateiARB = trace_glBlendFuncSeparateiARB;
  tbl.glBlendFunciARB = trace_glBlendFunciARB;

  // GL_ARB_draw_elements_base_vertex

  tbl.glDrawElementsBaseVertex = trace_glDrawElementsBaseVertex;
  tbl.glDrawElementsInstancedBaseVertex = trace_glDrawElementsInstancedBaseVertex;
  tbl.glDrawRangeElementsBaseVertex = trace_glDrawRangeElementsBaseVertex;
  tbl.glMultiDrawElementsBaseVertex = trace_glMultiDrawElementsBaseVertex;

  // GL_ARB_draw_indirect

  tbl.glDrawArraysIndirect = trace_glDrawArraysIndirect;
  tbl.glDrawElementsIndirect = trace_glDrawElementsIndirect;

  // GL_ARB_draw_instanced

  tbl.glDrawArraysInstancedARB = trace_glDrawArraysInstancedARB;
  tbl.glDrawElementsInstancedARB = trace_glDrawElementsInstancedARB;

  // GL_ARB_framebuffer_no_attachments

  tbl.glFramebufferParameteri = trace_glFramebufferParameteri;
  tbl.glGetFramebufferParameteriv = trace_glGetFramebufferParameteriv;
  tbl.glGetNamedFramebufferParameterivEXT = trace_glGetNamedFramebufferParameterivEXT;
  tbl.glNamedFramebufferParameteriEXT = trace_glNamedFramebufferParameteriEXT;

  // GL_ARB_framebuffer_object

  tbl.glBindFramebuffer = trace_glBindFramebuffer;
  tbl.glBindRenderbuffer = trace_glBindRenderbuffer;
  tbl.glBlitFramebuffer = trace_glBlitFramebuffer;
  tbl.glCheckFramebufferStatus = trace_glCheckFramebufferStatus;
  tbl.glDeleteFramebuffers = trace_glDeleteFramebuffers;
  tbl.glDeleteRenderbuffers = trace_glDeleteRenderbuffers;
  tbl.glFramebufferRenderbuffer = trace_glFramebufferRenderbuffer;
  tbl.glFramebufferTexture1D = trace_glFramebufferTexture1D;
  tbl.glFramebufferTexture2D = trace_glFramebufferTexture2D;
  tbl.glFramebufferTexture3D = trace_glFramebufferTexture3D;
  tbl.glFramebufferTextureLayer = trace_glFramebufferTextureLayer;
  tbl.glGenFramebuffers = trace_glGenFramebuffers;
  tbl.glGenRenderbuffers = trace_glGenRenderbuffers;
  tbl.glGenerateMipmap = trace_glGenerateMipmap;
  tbl.glGetFramebufferAttachmentParameteriv = trace_glGetFramebufferAttachmentParameteriv;
  tbl.glGetRenderbufferParameteriv = trace_glGetRenderbufferParameteriv;
  tbl.glIsFramebuffer = trace_glIsFramebuffer;
  tbl.glIsRenderbuffer = trace_glIsRenderbuffer;
  tbl.glRenderbufferStorage = trace_glRenderbufferStorage;
  tbl.glRenderbufferStorageMultisample = trace_glRenderbufferStorageMultisample;

  // GL_ARB_geometry_shader4

  tbl.glFramebufferTextureARB = trace_glFramebufferTextureARB;
  tbl.glFramebufferTextureFaceARB = trace_glFramebufferTextureFaceARB;
  tbl.glFramebufferTextureLayerARB = trace_glFramebufferTextureLayerARB;
  tbl.glProgramParameteriARB = trace_glProgramParameteriARB;

  // GL_ARB_get_program_binary

  tbl.glGetProgramBinary = trace_glGetProgramBinary;
  tbl.glProgramBinary = trace_glProgramBinary;
  tbl.glProgramParameteri = trace_glProgramParameteri;

  // GL_ARB_gpu_shader_fp64

  tbl.glGetUniformdv = trace_glGetUniformdv;
  tbl.glUniform1d = trace_glUniform1d;
  tbl.glUniform1dv = trace_glUniform1dv;
  tbl.glUniform2d = trace_glUniform2d;
  tbl.glUniform2dv = trace_glUniform2dv;
  tbl.glUniform3d = trace_glUniform3d;
  tbl.glUniform3dv = trace_glUniform3dv;
  tbl.glUniform4d = trace_glUniform4d;
  tbl.glUniform4dv = trace_glUniform4dv;
  tbl.glUniformMatrix2dv = trace_glUniformMatrix2dv;
  tbl.glUniformMatrix2x3dv = trace_glUniformMatrix2x3dv;
  tbl.glUniformMatrix2x4dv = trace_glUniformMatrix2x4dv;
  tbl.glUniformMatrix3dv = trace_glUniformMatrix3dv;
  tbl.glUniformMatrix3x2dv = trace_glUniformMatrix3x2dv;
  tbl.glUniformMatrix3x4dv = trace_glUniformMatrix3x4dv;
  tbl.glUniformMatrix4dv = trace_glUniformMatrix4dv;
  tbl.glUniformMatrix4x2dv = trace_glUniformMatrix4x2dv;
  tbl.glUniformMatrix4x3dv = trace_glUniformMatrix4x3dv;

  // GL_ARB_imaging

  tbl.glColorSubTable = trace_glColorSubTable;
  tbl.glColorTable = trace_glColorTable;
  tbl.glColorTableParameterfv = trace_glColorTableParameterfv;
  tbl.glColorTableParameteriv = trace_glColorTableParameteriv;
  tbl.glConvolutionFilter1D = trace_glConvolutionFilter1D;
  tbl.glConvolutionFilter2D = trace_glConvolutionFilter2D;
  tbl.glConvolutionParameterf = trace_glConvolutionParameterf;
  tbl.glConvolutionParameterfv = trace_glConvolutionParameterfv;
  tbl.glConvolutionParameteri = trace_glConvolutionParameteri;
  tbl.glConvolutionParameteriv = trace_glConvolutionParameteriv;
  tbl.glCopyColorSubTable = trace_glCopyColorSubTable;
  tbl.glCopyColorTable = trace_glCopyColorTable;
  tbl.glCopyConvolutionFilter1D = trace_glCopyConvolutionFilter1D;
  tbl.glCopyConvolutionFilter2D = trace_glCopyConvolutionFilter2D;
  tbl.glGetColorTable = trace_glGetColorTable;
  tbl.glGetColorTableParameterfv = trace_glGetColorTableParameterfv;
  tbl.glGetColorTableParameteriv = trace_glGetColorTableParameteriv;
  tbl.glGetConvolutionFilter = trace_glGetConvolutionFilter;
  tbl.glGetConvolutionParameterfv = trace_glGetConvolutionParameterfv;
  tbl.glGetConvolutionParameteriv = trace_glGetConvolutionParameteriv;
  tbl.glGetHistogram = trace_glGetHistogram;
  tbl.glGetHistogramParameterfv = trace_glGetHistogramParameterfv;
  tbl.glGetHistogramParameteriv = trace_glGetHistogramParameteriv;
  tbl.glGetMinmax = trace_glGetMinmax;
  tbl.glGetMinmaxParameterfv = trace_glGetMinmaxParameterfv;
  tbl.glGetMinmaxParameteriv = trace_glGetMinmaxParameteriv;
  tbl.glGetSeparableFilter = trace_glGetSeparableFilter;
  tbl.glHistogram = trace_glHistogram;
  tbl.glMinmax = trace_glMinmax;
  tbl.glResetHistogram = trace_glResetHistogram;
  tbl.glResetMinmax = trace_glResetMinmax;
  tbl.glSeparableFilter2D = trace_glSeparableFilter2D;

  // GL_ARB_instanced_arrays

  tbl.glVertexAttribDivisorARB = trace_glVertexAttribDivisorARB;

  // GL_ARB_internalformat_query

  tbl.glGetInternalformativ = trace_glGetInternalformativ;

  // GL_ARB_internalformat_query2

  tbl.glGetInternalformati64v = trace_glGetInternalformati64v;

  // GL_ARB_invalidate_subdata

  tbl.glInvalidateBufferData = trace_glInvalidateBufferData;
  tbl.glInvalidateBufferSubData = trace_glInvalidateBufferSubData;
  tbl.glInvalidateFramebuffer = trace_glInvalidateFramebuffer;
  tbl.glInvalidateSubFramebuffer = trace_glInvalidateSubFramebuffer;
  tbl.glInvalidateTexImage = trace_glInvalidateTexImage;
  tbl.glInvalidateTexSubImage = trace_glInvalidateTexSubImage;

  // GL_ARB_map_buffer_range

  tbl.glFlushMappedBufferRange = trace_glFlushMappedBufferRange;
  tbl.glMapBufferRange = trace_glMapBufferRange;

  // GL_ARB_matrix_palette

  tbl.glCurrentPaletteMatrixARB = trace_glCurrentPaletteMatrixARB;
  tbl.glMatrixIndexPointerARB = trace_glMatrixIndexPointerARB;
  tbl.glMatrixIndexubvARB = trace_glMatrixIndexubvARB;
  tbl.glMatrixIndexuivARB = trace_glMatrixIndexuivARB;
  tbl.glMatrixIndexusvARB = trace_glMatrixIndexusvARB;

  // GL_ARB_multi_bind

  tbl.glBindBuffersBase = trace_glBindBuffersBase;
  tbl.glBindBuffersRange = trace_glBindBuffersRange;
  tbl.glBindImageTextures = trace_glBindImageTextures;
  tbl.glBindSamplers = trace_glBindSamplers;
  tbl.glBindTextures = trace_glBindTextures;
  tbl.glBindVertexBuffers = trace_glBindVertexBuffers;

  // GL_ARB_multi_draw_indirect

  tbl.glMultiDrawArraysIndirect = trace_glMultiDrawArraysIndirect;
  tbl.glMultiDrawElementsIndirect = trace_glMultiDrawElementsIndirect;

  // GL_ARB_multisample

  tbl.glSampleCoverageARB = trace_glSampleCoverageARB;

  // GL_ARB_multitexture

  tbl.glActiveTextureARB = trace_glActiveTextureARB;
  tbl.glClientActiveTextureARB = trace_glClientActiveTextureARB;
  tbl.glMultiTexCoord1dARB = trace_glMultiTexCoord1dARB;
  tbl.glMultiTexCoord1dvARB = trace_glMultiTexCoord1dvARB;
  tbl.glMultiTexCoord1fARB = trace_glMultiTexCoord1fARB;
  tbl.glMultiTexCoord1fvARB = trace_glMultiTexCoord1fvARB;
  tbl.glMultiTexCoord1iARB = trace_glMultiTexCoord1iARB;
  tbl.glMultiTexCoord1ivARB = trace_glMultiTexCoord1ivARB;
  tbl.glMultiTexCoord1sARB = trace_glMultiTexCoord1sARB;
  tbl.glMultiTexCoord1svARB = trace_glMultiTexCoord1svARB;
  tbl.glMultiTexCoord2dARB = trace_glMultiTexCoord2dARB;
  tbl.glMultiTexCoord2dvARB = trace_glMultiTexCoord2dvARB;
  tbl.glMultiTexCoord2fARB = trace_glMultiTexCoord2fARB;
  tbl.glMultiTexCoord2fvARB = trace_glMultiTexCoord2fvARB;
  tbl.glMultiTexCoord2iARB = trace_glMultiTexCoord2iARB;
  tbl.glMultiTexCoord2ivARB = trace_glMultiTexCoord2ivARB;
  tbl.glMultiTexCoord2sARB = trace_glMultiTexCoord2sARB;
  tbl.glMultiTexCoord2svARB = trace_glMultiTexCoord2svARB;
  tbl.glMultiTexCoord3dARB = trace_glMultiTexCoord3dARB;
  tbl.glMultiTexCoord3dvARB = trace_glMultiTexCoord3dvARB;
  tbl.glMultiTexCoord3fARB = trace_glMultiTexCoord3fARB;
  tbl.glMultiTexCoord3fvARB = trace_glMultiTexCoord3fvARB;
  tbl.glMultiTexCoord3iARB = trace_glMultiTexCoord3iARB;
  tbl.glMultiTexCoord3ivARB = trace_glMultiTexCoord3ivARB;
  tbl.glMultiTexCoord3sARB = trace_glMultiTexCoord3sARB;
  tbl.glMultiTexCoord3svARB = trace_glMultiTexCoord3svARB;
  tbl.glMultiTexCoord4dARB = trace_glMultiTexCoord4dARB;
  tbl.glMultiTexCoord4dvARB = trace_glMultiTexCoord4dvARB;
  tbl.glMultiTexCoord4fARB = trace_glMultiTexCoord4fARB;
  tbl.glMultiTexCoord4fvARB = trace_glMultiTexCoord4fvARB;
  tbl.glMultiTexCoord4iARB = trace_glMultiTexCoord4iARB;
  tbl.glMultiTexCoord4ivARB = trace_glMultiTexCoord4ivARB;
  tbl.glMultiTexCoord4sARB = trace_glMultiTexCoord4sARB;
  tbl.glMultiTexCoord4svARB = trace_glMultiTexCoord4svARB;

  // GL_ARB_occlusion_query

  tbl.glBeginQueryARB = trace_glBeginQueryARB;
  tbl.glDeleteQueriesARB = trace_glDeleteQueriesARB;
  tbl.glEndQueryARB = trace_glEndQueryARB;
  tbl.glGenQueriesARB = trace_glGenQueriesARB;
  tbl.glGetQueryObjectivARB = trace_glGetQueryObjectivARB;
  tbl.glGetQueryObjectuivARB = trace_glGetQueryObjectuivARB;
  tbl.glGetQueryivARB = trace_glGetQueryivARB;
  tbl.glIsQueryARB = trace_glIsQueryARB;

  // GL_ARB_point_parameters

  tbl.glPointParameterfARB = trace_glPointParameterfARB;
  tbl.glPointParameterfvARB = trace_glPointParameterfvARB;

  // GL_ARB_program_interface_query

  tbl.glGetProgramInterfaceiv = trace_glGetProgramInterfaceiv;
  tbl.glGetProgramResourceIndex = trace_glGetProgramResourceIndex;
  tbl.glGetProgramResourceLocation = trace_glGetProgramResourceLocation;
  tbl.glGetProgramResourceLocationIndex = trace_glGetProgramResourceLocationIndex;
  tbl.glGetProgramResourceName = trace_glGetProgramResourceName;
  tbl.glGetProgramResourceiv = trace_glGetProgramResourceiv;

  // GL_ARB_provoking_vertex

  tbl.glProvokingVertex = trace_glProvokingVertex;

  // GL_ARB_robustness

  tbl.glGetGraphicsResetStatusARB = trace_glGetGraphicsResetStatusARB;
  tbl.glGetnColorTableARB = trace_glGetnColorTableARB;
  tbl.glGetnCompressedTexImageARB = trace_glGetnCompressedTexImageARB;
  tbl.glGetnConvolutionFilterARB = trace_glGetnConvolutionFilterARB;
  tbl.glGetnHistogramARB = trace_glGetnHistogramARB;
  tbl.glGetnMapdvARB = trace_glGetnMapdvARB;
  tbl.glGetnMapfvARB = trace_glGetnMapfvARB;
  tbl.glGetnMapivARB = trace_glGetnMapivARB;
  tbl.glGetnMinmaxARB = trace_glGetnMinmaxARB;
  tbl.glGetnPixelMapfvARB = trace_glGetnPixelMapfvARB;
  tbl.glGetnPixelMapuivARB = trace_glGetnPixelMapuivARB;
  tbl.glGetnPixelMapusvARB = trace_glGetnPixelMapusvARB;
  tbl.glGetnPolygonStippleARB = trace_glGetnPolygonStippleARB;
  tbl.glGetnSeparableFilterARB = trace_glGetnSeparableFilterARB;
  tbl.glGetnTexImageARB = trace_glGetnTexImageARB;
  tbl.glGetnUniformdvARB = trace_glGetnUniformdvARB;
  tbl.glGetnUniformfvARB = trace_glGetnUniformfvARB;
  tbl.glGetnUniformivARB = trace_glGetnUniformivARB;
  tbl.glGetnUniformuivARB = trace_glGetnUniformuivARB;
  tbl.glReadnPixelsARB = trace_glReadnPixelsARB;

  // GL_ARB_sample_shading

  tbl.glMinSampleShading = trace_glMinSampleShading;
  tbl.glMinSampleShadingARB = trace_glMinSampleShadingARB;

  // GL_ARB_sampler_objects

  tbl.glBindSampler = trace_glBindSampler;
  tbl.glDeleteSamplers = trace_glDeleteSamplers;
  tbl.glGenSamplers = trace_glGenSamplers;
  tbl.glGetSamplerParameterIiv = trace_glGetSamplerParameterIiv;
  tbl.glGetSamplerParameterIuiv = trace_glGetSamplerParameterIuiv;
  tbl.glGetSamplerParameterfv = trace_glGetSamplerParameterfv;
  tbl.glGetSamplerParameteriv = trace_glGetSamplerParameteriv;
  tbl.glIsSampler = trace_glIsSampler;
  tbl.glSamplerParameterIiv = trace_glSamplerParameterIiv;
  tbl.glSamplerParameterIuiv = trace_glSamplerParameterIuiv;
  tbl.glSamplerParameterf = trace_glSamplerParameterf;
  tbl.glSamplerParameterfv = trace_glSamplerParameterfv;
  tbl.glSamplerParameteri = trace_glSamplerParameteri;
  tbl.glSamplerParameteriv = trace_glSamplerParameteriv;

  // GL_ARB_separate_shader_objects

  tbl.glActiveShaderProgram = trace_glActiveShaderProgram;
  tbl.glBindProgramPipeline = trace_glBindProgramPipeline;
  tbl.glCreateShaderProgramv = trace_glCreateShaderProgramv;
  tbl.glDeleteProgramPipelines = trace_glDeleteProgramPipelines;
  tbl.glGenProgramPipelines = trace_glGenProgramPipelines;
  tbl.glGetProgramPipelineInfoLog = trace_glGetProgramPipelineInfoLog;
  tbl.glGetProgramPipelineiv = trace_glGetProgramPipelineiv;
  tbl.glIsProgramPipeline = trace_glIsProgramPipeline;
  tbl.glProgramUniform1d = trace_glProgramUniform1d;
  tbl.glProgramUniform1dv = trace_glProgramUniform1dv;
  tbl.glProgramUniform1f = trace_glProgramUniform1f;
  tbl.glProgramUniform1fv = trace_glProgramUniform1fv;
  tbl.glProgramUniform1i = trace_glProgramUniform1i;
  tbl.glProgramUniform1iv = trace_glProgramUniform1iv;
  tbl.glProgramUniform1ui = trace_glProgramUniform1ui;
  tbl.glProgramUniform1uiv = trace_glProgramUniform1uiv;
  tbl.glProgramUniform2d = trace_glProgramUniform2d;
  tbl.glProgramUniform2dv = trace_glProgramUniform2dv;
  tbl.glProgramUniform2f = trace_glProgramUniform2f;
  tbl.glProgramUniform2fv = trace_glProgramUniform2fv;
  tbl.glProgramUniform2i = trace_glProgramUniform2i;
  tbl.glProgramUniform2iv = trace_glProgramUniform2iv;
  tbl.glProgramUniform2ui = trace_glProgramUniform2ui;
  tbl.glProgramUniform2uiv = trace_glProgramUniform2uiv;
  tbl.glProgramUniform3d = trace_glProgramUniform3d;
  tbl.glProgramUniform3dv = trace_glProgramUniform3dv;
  tbl.glProgramUniform3f = trace_glProgramUniform3f;
  tbl.glProgramUniform3fv = trace_glProgramUniform3fv;
  tbl.glProgramUniform3i = trace_glProgramUniform3i;
  tbl.glProgramUniform3iv = trace_glProgramUniform3iv;
  tbl.glProgramUniform3ui = trace_glProgramUniform3ui;
  tbl.glProgramUniform3uiv = trace_glProgramUniform3uiv;
  tbl.glProgramUniform4d = trace_glProgramUniform4d;
  tbl.glProgramUniform4dv = trace_glProgramUniform4dv;
  tbl.glProgramUniform4f = trace_glProgramUniform4f;
  tbl.glProgramUniform4fv = trace_glProgramUniform4fv;
  tbl.glProgramUniform4i = trace_glProgramUniform4i;
  tbl.glProgramUniform4iv = trace_glProgramUniform4iv;
  tbl.glProgramUniform4ui = trace_glProgramUniform4ui;
  tbl.glProgramUniform4uiv = trace_glProgramUniform4uiv;
  tbl.glProgramUniformMatrix2dv = trace_glProgramUniformMatrix2dv;
  tbl.glProgramUniformMatrix2fv = trace_glProgramUniformMatrix2fv;
  tbl.glProgramUniformMatrix2x3dv = trace_glProgramUniformMatrix2x3dv;
  tbl.glProgramUniformMatrix2x3fv = trace_glProgramUniformMatrix2x3fv;
  tbl.glProgramUniformMatrix2x4dv = trace_glProgramUniformMatrix2x4dv;
  tbl.glProgramUniformMatrix2x4fv = trace_glProgramUniformMatrix2x4fv;
  tbl.glProgramUniformMatrix3dv = trace_glProgramUniformMatrix3dv;
  tbl.glProgramUniformMatrix3fv = trace_glProgramUniformMatrix3fv;
  tbl.glProgramUniformMatrix3x2dv = trace_glProgramUniformMatrix3x2dv;
  tbl.glProgramUniformMatrix3x2fv = trace_glProgramUniformMatrix3x2fv;
  tbl.glProgramUniformMatrix3x4dv = trace_glProgramUniformMatrix3x4dv;
  tbl.glProgramUniformMatrix3x4fv = trace_glProgramUniformMatrix3x4fv;
  tbl.glProgramUniformMatrix4dv = trace_glProgramUniformMatrix4dv;
  tbl.glProgramUniformMatrix4fv = trace_glProgramUniformMatrix4fv;
  tbl.glProgramUniformMatrix4x2dv = trace_glProgramUniformMatrix4x2dv;
  tbl.glProgramUniformMatrix4x2fv = trace_glProgramUniformMatrix4x2fv;
  tbl.glProgramUniformMatrix4x3dv = trace_glProgramUniformMatrix4x3dv;
  tbl.glProgramUniformMatrix4x3fv = trace_glProgramUniformMatrix4x3fv;
  tbl.glUseProgramStages = trace_glUseProgramStages;
  tbl.glValidateProgramPipeline = trace_glValidateProgramPipeline;

  // GL_ARB_shader_atomic_counters

  tbl.glGetActiveAtomicCounterBufferiv = trace_glGetActiveAtomicCounterBufferiv;

  // GL_ARB_shader_image_load_store

  tbl.glBindImageTexture = trace_glBindImageTexture;
  tbl.glMemoryBarrier = trace_glMemoryBarrier;

  // GL_ARB_shader_objects

  tbl.glAttachObjectARB = trace_glAttachObjectARB;
  tbl.glCompileShaderARB = trace_glCompileShaderARB;
  tbl.glCreateProgramObjectARB = trace_glCreateProgramObjectARB;
  tbl.glCreateShaderObjectARB = trace_glCreateShaderObjectARB;
  tbl.glDeleteObjectARB = trace_glDeleteObjectARB;
  tbl.glDetachObjectARB = trace_glDetachObjectARB;
  tbl.glGetActiveUniformARB = trace_glGetActiveUniformARB;
  tbl.glGetAttachedObjectsARB = trace_glGetAttachedObjectsARB;
  tbl.glGetHandleARB = trace_glGetHandleARB;
  tbl.glGetInfoLogARB = trace_glGetInfoLogARB;
  tbl.glGetObjectParameterfvARB = trace_glGetObjectParameterfvARB;
  tbl.glGetObjectParameterivARB = trace_glGetObjectParameterivARB;
  tbl.glGetShaderSourceARB = trace_glGetShaderSourceARB;
  tbl.glGetUniformLocationARB = trace_glGetUniformLocationARB;
  tbl.glGetUniformfvARB = trace_glGetUniformfvARB;
  tbl.glGetUniformivARB = trace_glGetUniformivARB;
  tbl.glLinkProgramARB = trace_glLinkProgramARB;
  tbl.glShaderSourceARB = trace_glShaderSourceARB;
  tbl.glUniform1fARB = trace_glUniform1fARB;
  tbl.glUniform1fvARB = trace_glUniform1fvARB;
  tbl.glUniform1iARB = trace_glUniform1iARB;
  tbl.glUniform1ivARB = trace_glUniform1ivARB;
  tbl.glUniform2fARB = trace_glUniform2fARB;
  tbl.glUniform2fvARB = trace_glUniform2fvARB;
  tbl.glUniform2iARB = trace_glUniform2iARB;
  tbl.glUniform2ivARB = trace_glUniform2ivARB;
  tbl.glUniform3fARB = trace_glUniform3fARB;
  tbl.glUniform3fvARB = trace_glUniform3fvARB;
  tbl.glUniform3iARB = trace_glUniform3iARB;
  tbl.glUniform3ivARB = trace_glUniform3ivARB;
  tbl.glUniform4fARB = trace_glUniform4fARB;
  tbl.glUniform4fvARB = trace_glUniform4fvARB;
  tbl.glUniform4iARB = trace_glUniform4iARB;
  tbl.glUniform4ivARB = trace_glUniform4ivARB;
  tbl.glUniformMatrix2fvARB = trace_glUniformMatrix2fvARB;
  tbl.glUniformMatrix3fvARB = trace_glUniformMatrix3fvARB;
  tbl.glUniformMatrix4fvARB = trace_glUniformMatrix4fvARB;
  tbl.glUseProgramObjectARB = trace_glUseProgramObjectARB;
  tbl.glValidateProgramARB = trace_glValidateProgramARB;

  // GL_ARB_shader_storage_buffer_object

  tbl.glShaderStorageBlockBinding = trace_glShaderStorageBlockBinding;

  // GL_ARB_shader_subroutine

  tbl.glGetActiveSubroutineName = trace_glGetActiveSubroutineName;
  tbl.glGetActiveSubroutineUniformName = trace_glGetActiveSubroutineUniformName;
  tbl.glGetActiveSubroutineUniformiv = trace_glGetActiveSubroutineUniformiv;
  tbl.glGetProgramStageiv = trace_glGetProgramStageiv;
  tbl.glGetProgramSubroutineParameteruivNV = trace_glGetProgramSubroutineParameteruivNV;
  tbl.glGetSubroutineIndex = trace_glGetSubroutineIndex;
  tbl.glGetSubroutineUniformLocation = trace_glGetSubroutineUniformLocation;
  tbl.glGetUniformSubroutineuiv = trace_glGetUniformSubroutineuiv;
  tbl.glProgramSubroutineParametersuivNV = trace_glProgramSubroutineParametersuivNV;
  tbl.glUniformSubroutinesuiv = trace_glUniformSubroutinesuiv;

  // GL_ARB_shading_language_include

  tbl.glCompileShaderIncludeARB = trace_glCompileShaderIncludeARB;
  tbl.glDeleteNamedStringARB = trace_glDeleteNamedStringARB;
  tbl.glGetNamedStringARB = trace_glGetNamedStringARB;
  tbl.glGetNamedStringivARB = trace_glGetNamedStringivARB;
  tbl.glIsNamedStringARB = trace_glIsNamedStringARB;
  tbl.glNamedStringARB = trace_glNamedStringARB;

  // GL_ARB_sync

  tbl.glClientWaitSync = trace_glClientWaitSync;
  tbl.glDeleteSync = trace_glDeleteSync;
  tbl.glFenceSync = trace_glFenceSync;
  tbl.glGetInteger64v = trace_glGetInteger64v;
  tbl.glGetSynciv = trace_glGetSynciv;
  tbl.glIsSync = trace_glIsSync;
  tbl.glWaitSync = trace_glWaitSync;

  // GL_ARB_tessellation_shader

  tbl.glPatchParameterfv = trace_glPatchParameterfv;
  tbl.glPatchParameteri = trace_glPatchParameteri;

  // GL_ARB_texture_buffer_object

  tbl.glTexBufferARB = trace_glTexBufferARB;

  // GL_ARB_texture_buffer_range

  tbl.glTexBufferRange = trace_glTexBufferRange;
  tbl.glTextureBufferRangeEXT = trace_glTextureBufferRangeEXT;

  // GL_ARB_texture_compression

  tbl.glCompressedTexImage1DARB = trace_glCompressedTexImage1DARB;
  tbl.glCompressedTexImage2DARB = trace_glCompressedTexImage2DARB;
  tbl.glCompressedTexImage3DARB = trace_glCompressedTexImage3DARB;
  tbl.glCompressedTexSubImage1DARB = trace_glCompressedTexSubImage1DARB;
  tbl.glCompressedTexSubImage2DARB = trace_glCompressedTexSubImage2DARB;
  tbl.glCompressedTexSubImage3DARB = trace_glCompressedTexSubImage3DARB;
  tbl.glGetCompressedTexImageARB = trace_glGetCompressedTexImageARB;

  // GL_ARB_texture_multisample

  tbl.glGetMultisamplefv = trace_glGetMultisamplefv;
  tbl.glSampleMaski = trace_glSampleMaski;
  tbl.glTexImage2DMultisample = trace_glTexImage2DMultisample;
  tbl.glTexImage3DMultisample = trace_glTexImage3DMultisample;

  // GL_ARB_texture_storage

  tbl.glTexStorage1D = trace_glTexStorage1D;
  tbl.glTexStorage2D = trace_glTexStorage2D;
  tbl.glTexStorage3D = trace_glTexStorage3D;
  tbl.glTextureStorage1DEXT = trace_glTextureStorage1DEXT;
  tbl.glTextureStorage2DEXT = trace_glTextureStorage2DEXT;
  tbl.glTextureStorage3DEXT = trace_glTextureStorage3DEXT;

  // GL_ARB_texture_storage_multisample

  tbl.glTexStorage2DMultisample = trace_glTexStorage2DMultisample;
  tbl.glTexStorage3DMultisample = trace_glTexStorage3DMultisample;
  tbl.glTextureStorage2DMultisampleEXT = trace_glTextureStorage2DMultisampleEXT;
  tbl.glTextureStorage3DMultisampleEXT = trace_glTextureStorage3DMultisampleEXT;

  // GL_ARB_texture_view

  tbl.glTextureView = trace_glTextureView;

  // GL_ARB_timer_query

  tbl.glGetQueryObjecti64v = trace_glGetQueryObjecti64v;
  tbl.glGetQueryObjectui64v = trace_glGetQueryObjectui64v;
  tbl.glQueryCounter = trace_glQueryCounter;

  // GL_ARB_transform_feedback2

  tbl.glBindTransformFeedback = trace_glBindTransformFeedback;
  tbl.glDeleteTransformFeedbacks = trace_glDeleteTransformFeedbacks;
  tbl.glDrawTransformFeedback = trace_glDrawTransformFeedback;
  tbl.glGenTransformFeedbacks = trace_glGenTransformFeedbacks;
  tbl.glIsTransformFeedback = trace_glIsTransformFeedback;
  tbl.glPauseTransformFeedback = trace_glPauseTransformFeedback;
  tbl.glResumeTransformFeedback = trace_glResumeTransformFeedback;

  // GL_ARB_transform_feedback3

  tbl.glBeginQueryIndexed = trace_glBeginQueryIndexed;
  tbl.glDrawTransformFeedbackStream = trace_glDrawTransformFeedbackStream;
  tbl.glEndQueryIndexed = trace_glEndQueryIndexed;
  tbl.glGetQueryIndexediv = trace_glGetQueryIndexediv;

  // GL_ARB_transform_feedback_instanced

  tbl.glDrawTransformFeedbackInstanced = trace_glDrawTransformFeedbackInstanced;
  tbl.glDrawTransformFeedbackStreamInstanced = trace_glDrawTransformFeedbackStreamInstanced;

  // GL_ARB_transpose_matrix

  tbl.glLoadTransposeMatrixdARB = trace_glLoadTransposeMatrixdARB;
  tbl.glLoadTransposeMatrixfARB = trace_glLoadTransposeMatrixfARB;
  tbl.glMultTransposeMatrixdARB = trace_glMultTransposeMatrixdARB;
  tbl.glMultTransposeMatrixfARB = trace_glMultTransposeMatrixfARB;

  // GL_ARB_uniform_buffer_object

  tbl.glBindBufferBase = trace_glBindBufferBase;
  tbl.glBindBufferRange = trace_glBindBufferRange;
  tbl.glGetActiveUniformBlockName = trace_glGetActiveUniformBlockName;
  tbl.glGetActiveUniformBlockiv = trace_glGetActiveUniformBlockiv;
  tbl.glGetActiveUniformName = trace_glGetActiveUniformName;
  tbl.glGetActiveUniformsiv = trace_glGetActiveUniformsiv;
  tbl.glGetIntegeri_v = trace_glGetIntegeri_v;
  tbl.glGetUniformBlockIndex = trace_glGetUniformBlockIndex;
  tbl.glGetUniformIndices = trace_glGetUniformIndices;
  tbl.glUniformBlockBinding = trace_glUniformBlockBinding;

  // GL_ARB_vertex_array_object

  tbl.glBindVertexArray = trace_glBindVertexArray;
  tbl.glDeleteVertexArrays = trace_glDeleteVertexArrays;
  tbl.glGenVertexArrays = trace_glGenVertexArrays;
  tbl.glIsVertexArray = trace_glIsVertexArray;

  // GL_ARB_vertex_attrib_64bit

  tbl.glGetVertexAttribLdv = trace_glGetVertexAttribLdv;
  tbl.glVertexAttribL1d = trace_glVertexAttribL1d;
  tbl.glVertexAttribL1dv = trace_glVertexAttribL1dv;
  tbl.glVertexAttribL2d = trace_glVertexAttribL2d;
  tbl.glVertexAttribL2dv = trace_glVertexAttribL2dv;
  tbl.glVertexAttribL3d = trace_glVertexAttribL3d;
  tbl.glVertexAttribL3dv = trace_glVertexAttribL3dv;
  tbl.glVertexAttribL4d = trace_glVertexAttribL4d;
  tbl.glVertexAttribL4dv = trace_glVertexAttribL4dv;
  tbl.glVertexAttribLPointer = trace_glVertexAttribLPointer;

  // GL_ARB_vertex_attrib_binding

  tbl.glBindVertexBuffer = trace_glBindVertexBuffer;
  tbl.glVertexArrayBindVertexBufferEXT = trace_glVertexArrayBindVertexBufferEXT;
  tbl.glVertexArrayVertexAttribBindingEXT = trace_glVertexArrayVertexAttribBindingEXT;
  tbl.glVertexArrayVertexAttribFormatEXT = trace_glVertexArrayVertexAttribFormatEXT;
  tbl.glVertexArrayVertexAttribIFormatEXT = trace_glVertexArrayVertexAttribIFormatEXT;
  tbl.glVertexArrayVertexAttribLFormatEXT = trace_glVertexArrayVertexAttribLFormatEXT;
  tbl.glVertexArrayVertexBindingDivisorEXT = trace_glVertexArrayVertexBindingDivisorEXT;
  tbl.glVertexAttribBinding = trace_glVertexAttribBinding;
  tbl.glVertexAttribFormat = trace_glVertexAttribFormat;
  tbl.glVertexAttribIFormat = trace_glVertexAttribIFormat;
  tbl.glVertexAttribLFormat = trace_glVertexAttribLFormat;
  tbl.glVertexBindingDivisor = trace_glVertexBindingDivisor;

  // GL_ARB_vertex_blend

  tbl.glVertexBlendARB = trace_glVertexBlendARB;
  tbl.glWeightPointerARB = trace_glWeightPointerARB;
  tbl.glWeightbvARB = trace_glWeightbvARB;
  tbl.glWeightdvARB = trace_glWeightdvARB;
  tbl.glWeightfvARB = trace_glWeightfvARB;
  tbl.glWeightivARB = trace_glWeightivARB;
  tbl.glWeightsvARB = trace_glWeightsvARB;
  tbl.glWeightubvARB = trace_glWeightubvARB;
  tbl.glWeightuivARB = trace_glWeightuivARB;
  tbl.glWeightusvARB = trace_glWeightusvARB;

  // GL_ARB_vertex_buffer_object

  tbl.glBindBufferARB = trace_glBindBufferARB;
  tbl.glBufferDataARB = trace_glBufferDataARB;
  tbl.glBufferSubDataARB = trace_glBufferSubDataARB;
  tbl.glDeleteBuffersARB = trace_glDeleteBuffersARB;
  tbl.glGenBuffersARB = trace_glGenBuffersARB;
  tbl.glGetBufferParameterivARB = trace_glGetBufferParameterivARB;
  tbl.glGetBufferPointervARB = trace_glGetBufferPointervARB;
  tbl.glGetBufferSubDataARB = trace_glGetBufferSubDataARB;
  tbl.glIsBufferARB = trace_glIsBufferARB;
  tbl.glMapBufferARB = trace_glMapBufferARB;
  tbl.glUnmapBufferARB = trace_glUnmapBufferARB;

  // GL_ARB_vertex_program

  tbl.glBindProgramARB = trace_glBindProgramARB;
  tbl.glDeleteProgramsARB = trace_glDeleteProgramsARB;
  tbl.glDisableVertexAttribArrayARB = trace_glDisableVertexAttribArrayARB;
  tbl.glEnableVertexAttribArrayARB = trace_glEnableVertexAttribArrayARB;
  tbl.glGenProgramsARB = trace_glGenProgramsARB;
  tbl.glGetProgramEnvParameterdvARB = trace_glGetProgramEnvParameterdvARB;
  tbl.glGetProgramEnvParameterfvARB = trace_glGetProgramEnvParameterfvARB;
  tbl.glGetProgramLocalParameterdvARB = trace_glGetProgramLocalParameterdvARB;
  tbl.glGetProgramLocalParameterfvARB = trace_glGetProgramLocalParameterfvARB;
  tbl.glGetProgramStringARB = trace_glGetProgramStringARB;
  tbl.glGetProgramivARB = trace_glGetProgramivARB;
  tbl.glGetVertexAttribPointervARB = trace_glGetVertexAttribPointervARB;
  tbl.glGetVertexAttribdvARB = trace_glGetVertexAttribdvARB;
  tbl.glGetVertexAttribfvARB = trace_glGetVertexAttribfvARB;
  tbl.glGetVertexAttribivARB = trace_glGetVertexAttribivARB;
  tbl.glIsProgramARB = trace_glIsProgramARB;
  tbl.glProgramEnvParameter4dARB = trace_glProgramEnvParameter4dARB;
  tbl.glProgramEnvParameter4dvARB = trace_glProgramEnvParameter4dvARB;
  tbl.glProgramEnvParameter4fARB = trace_glProgramEnvParameter4fARB;
  tbl.glProgramEnvParameter4fvARB = trace_glProgramEnvParameter4fvARB;
  tbl.glProgramLocalParameter4dARB = trace_glProgramLocalParameter4dARB;
  tbl.glProgramLocalParameter4dvARB = trace_glProgramLocalParameter4dvARB;
  tbl.glProgramLocalParameter4fARB = trace_glProgramLocalParameter4fARB;
  tbl.glProgramLocalParameter4fvARB = trace_glProgramLocalParameter4fvARB;
  tbl.glProgramStringARB = trace_glProgramStringARB;
  tbl.glVertexAttrib1dARB = trace_glVertexAttrib1dARB;
  tbl.glVertexAttrib1dvARB = trace_glVertexAttrib1dvARB;
  tbl.glVertexAttrib1fARB = trace_glVertexAttrib1fARB;
  tbl.glVertexAttrib1fvARB = trace_glVertexAttrib1fvARB;
  tbl.glVertexAttrib1sARB = trace_glVertexAttrib1sARB;
  tbl.glVertexAttrib1svARB = trace_glVertexAttrib1svARB;
  tbl.glVertexAttrib2dARB = trace_glVertexAttrib2dARB;
  tbl.glVertexAttrib2dvARB = trace_glVertexAttrib2dvARB;
  tbl.glVertexAttrib2fARB = trace_glVertexAttrib2fARB;
  tbl.glVertexAttrib2fvARB = trace_glVertexAttrib2fvARB;
  tbl.glVertexAttrib2sARB = trace_glVertexAttrib2sARB;
  tbl.glVertexAttrib2svARB = trace_glVertexAttrib2svARB;
  tbl.glVertexAttrib3dARB = trace_glVertexAttrib3dARB;
  tbl.glVertexAttrib3dvARB = trace_glVertexAttrib3dvARB;
  tbl.glVertexAttrib3fARB = trace_glVertexAttrib3fARB;
  tbl.glVertexAttrib3fvARB = trace_glVertexAttrib3fvARB;
  tbl.glVertexAttrib3sARB = trace_glVertexAttrib3sARB;
  tbl.glVertexAttrib3svARB = trace_glVertexAttrib3svARB;
  tbl.glVertexAttrib4NbvARB = trace_glVertexAttrib4NbvARB;
  tbl.glVertexAttrib4NivARB = trace_glVertexAttrib4NivARB;
  tbl.glVertexAttrib4NsvARB = trace_glVertexAttrib4NsvARB;
  tbl.glVertexAttrib4NubARB = trace_glVertexAttrib4NubARB;
  tbl.glVertexAttrib4NubvARB = trace_glVertexAttrib4NubvARB;
  tbl.glVertexAttrib4NuivARB = trace_glVertexAttrib4NuivARB;
  tbl.glVertexAttrib4NusvARB = trace_glVertexAttrib4NusvARB;
  tbl.glVertexAttrib4bvARB = trace_glVertexAttrib4bvARB;
  tbl.glVertexAttrib4dARB = trace_glVertexAttrib4dARB;
  tbl.glVertexAttrib4dvARB = trace_glVertexAttrib4dvARB;
  tbl.glVertexAttrib4fARB = trace_glVertexAttrib4fARB;
  tbl.glVertexAttrib4fvARB = trace_glVertexAttrib4fvARB;
  tbl.glVertexAttrib4ivARB = trace_glVertexAttrib4ivARB;
  tbl.glVertexAttrib4sARB = trace_glVertexAttrib4sARB;
  tbl.glVertexAttrib4svARB = trace_glVertexAttrib4svARB;
  tbl.glVertexAttrib4ubvARB = trace_glVertexAttrib4ubvARB;
  tbl.glVertexAttrib4uivARB = trace_glVertexAttrib4uivARB;
  tbl.glVertexAttrib4usvARB = trace_glVertexAttrib4usvARB;
  tbl.glVertexAttribPointerARB = trace_glVertexAttribPointerARB;

  // GL_ARB_vertex_shader

  tbl.glBindAttribLocationARB = trace_glBindAttribLocationARB;
  tbl.glGetActiveAttribARB = trace_glGetActiveAttribARB;
  tbl.glGetAttribLocationARB = trace_glGetAttribLocationARB;

  // GL_ARB_vertex_type_2_10_10_10_rev

  tbl.glColorP3ui = trace_glColorP3ui;
  tbl.glColorP3uiv = trace_glColorP3uiv;
  tbl.glColorP4ui = trace_glColorP4ui;
  tbl.glColorP4uiv = trace_glColorP4uiv;
  tbl.glMultiTexCoordP1ui = trace_glMultiTexCoordP1ui;
  tbl.glMultiTexCoordP1uiv = trace_glMultiTexCoordP1uiv;
  tbl.glMultiTexCoordP2ui = trace_glMultiTexCoordP2ui;
  tbl.glMultiTexCoordP2uiv = trace_glMultiTexCoordP2uiv;
  tbl.glMultiTexCoordP3ui = trace_glMultiTexCoordP3ui;
  tbl.glMultiTexCoordP3uiv = trace_glMultiTexCoordP3uiv;
  tbl.glMultiTexCoordP4ui = trace_glMultiTexCoordP4ui;
  tbl.glMultiTexCoordP4uiv = trace_glMultiTexCoordP4uiv;
  tbl.glNormalP3ui = trace_glNormalP3ui;
  tbl.glNormalP3uiv = trace_glNormalP3uiv;
  tbl.glSecondaryColorP3ui = trace_glSecondaryColorP3ui;
  tbl.glSecondaryColorP3uiv = trace_glSecondaryColorP3uiv;
  tbl.glTexCoordP1ui = trace_glTexCoordP1ui;
  tbl.glTexCoordP1uiv = trace_glTexCoordP1uiv;
  tbl.glTexCoordP2ui = trace_glTexCoordP2ui;
  tbl.glTexCoordP2uiv = trace_glTexCoordP2uiv;
  tbl.glTexCoordP3ui = trace_glTexCoordP3ui;
  tbl.glTexCoordP3uiv = trace_glTexCoordP3uiv;
  tbl.glTexCoordP4ui = trace_glTexCoordP4ui;
  tbl.glTexCoordP4uiv = trace_glTexCoordP4uiv;
  tbl.glVertexAttribP1ui = trace_glVertexAttribP1ui;
  tbl.glVertexAttribP1uiv = trace_glVertexAttribP1uiv;
  tbl.glVertexAttribP2ui = trace_glVertexAttribP2ui;
  tbl.glVertexAttribP2uiv = trace_glVertexAttribP2uiv;
  tbl.glVertexAttribP3ui = trace_glVertexAttribP3ui;
  tbl.glVertexAttribP3uiv = trace_glVertexAttribP3uiv;
  tbl.glVertexAttribP4ui = trace_glVertexAttribP4ui;
  tbl.glVertexAttribP4uiv = trace_glVertexAttribP4uiv;
  tbl.glVertexP2ui = trace_glVertexP2ui;
  tbl.glVertexP2uiv = trace_glVertexP2uiv;
  tbl.glVertexP3ui = trace_glVertexP3ui;
  tbl.glVertexP3uiv = trace_glVertexP3uiv;
  tbl.glVertexP4ui = trace_glVertexP4ui;
  tbl.glVertexP4uiv = trace_glVertexP4uiv;

  // GL_ARB_viewport_array

  tbl.glDepthRangeArrayv = trace_glDepthRangeArrayv;
  tbl.glDepthRangeIndexed = trace_glDepthRangeIndexed;
  tbl.glGetDoublei_v = trace_glGetDoublei_v;
  tbl.glGetFloati_v = trace_glGetFloati_v;
  tbl.glScissorArrayv = trace_glScissorArrayv;
  tbl.glScissorIndexed = trace_glScissorIndexed;
  tbl.glScissorIndexedv = trace_glScissorIndexedv;
  tbl.glViewportArrayv = trace_glViewportArrayv;
  tbl.glViewportIndexedf = trace_glViewportIndexedf;
  tbl.glViewportIndexedfv = trace_glViewportIndexedfv;

  // GL_ARB_window_pos

  tbl.glWindowPos2dARB = trace_glWindowPos2dARB;
  tbl.glWindowPos2dvARB = trace_glWindowPos2dvARB;
  tbl.glWindowPos2fARB = trace_glWindowPos2fARB;
  tbl.glWindowPos2fvARB = trace_glWindowPos2fvARB;
  tbl.glWindowPos2iARB = trace_glWindowPos2iARB;
  tbl.glWindowPos2ivARB = trace_glWindowPos2ivARB;
  tbl.glWindowPos2sARB = trace_glWindowPos2sARB;
  tbl.glWindowPos2svARB = trace_glWindowPos2svARB;
  tbl.glWindowPos3dARB = trace_glWindowPos3dARB;
  tbl.glWindowPos3dvARB = trace_glWindowPos3dvARB;
  tbl.glWindowPos3fARB = trace_glWindowPos3fARB;
  tbl.glWindowPos3fvARB = trace_glWindowPos3fvARB;
  tbl.glWindowPos3iARB = trace_glWindowPos3iARB;
  tbl.glWindowPos3ivARB = trace_glWindowPos3ivARB;
  tbl.glWindowPos3sARB = trace_glWindowPos3sARB;
  tbl.glWindowPos3svARB = trace_glWindowPos3svARB;

  // GL_ATI_draw_buffers

  tbl.glDrawBuffersATI = trace_glDrawBuffersATI;

  // GL_ATI_element_array

  tbl.glDrawElementArrayATI = trace_glDrawElementArrayATI;
  tbl.glDrawRangeElementArrayATI = trace_glDrawRangeElementArrayATI;
  tbl.glElementPointerATI = trace_glElementPointerATI;

  // GL_ATI_envmap_bumpmap

  tbl.glGetTexBumpParameterfvATI = trace_glGetTexBumpParameterfvATI;
  tbl.glGetTexBumpParameterivATI = trace_glGetTexBumpParameterivATI;
  tbl.glTexBumpParameterfvATI = trace_glTexBumpParameterfvATI;
  tbl.glTexBumpParameterivATI = trace_glTexBumpParameterivATI;

  // GL_ATI_fragment_shader

  tbl.glAlphaFragmentOp1ATI = trace_glAlphaFragmentOp1ATI;
  tbl.glAlphaFragmentOp2ATI = trace_glAlphaFragmentOp2ATI;
  tbl.glAlphaFragmentOp3ATI = trace_glAlphaFragmentOp3ATI;
  tbl.glBeginFragmentShaderATI = trace_glBeginFragmentShaderATI;
  tbl.glBindFragmentShaderATI = trace_glBindFragmentShaderATI;
  tbl.glColorFragmentOp1ATI = trace_glColorFragmentOp1ATI;
  tbl.glColorFragmentOp2ATI = trace_glColorFragmentOp2ATI;
  tbl.glColorFragmentOp3ATI = trace_glColorFragmentOp3ATI;
  tbl.glDeleteFragmentShaderATI = trace_glDeleteFragmentShaderATI;
  tbl.glEndFragmentShaderATI = trace_glEndFragmentShaderATI;
  tbl.glGenFragmentShadersATI = trace_glGenFragmentShadersATI;
  tbl.glPassTexCoordATI = trace_glPassTexCoordATI;
  tbl.glSampleMapATI = trace_glSampleMapATI;
  tbl.glSetFragmentShaderConstantATI = trace_glSetFragmentShaderConstantATI;

  // GL_ATI_map_object_buffer

  tbl.glMapObjectBufferATI = trace_glMapObjectBufferATI;
  tbl.glUnmapObjectBufferATI = trace_glUnmapObjectBufferATI;

  // GL_ATI_pn_triangles

  tbl.glPNTrianglesfATI = trace_glPNTrianglesfATI;
  tbl.glPNTrianglesiATI = trace_glPNTrianglesiATI;

  // GL_ATI_separate_stencil

  tbl.glStencilFuncSeparateATI = trace_glStencilFuncSeparateATI;
  tbl.glStencilOpSeparateATI = trace_glStencilOpSeparateATI;

  // GL_ATI_vertex_array_object

  tbl.glArrayObjectATI = trace_glArrayObjectATI;
  tbl.glFreeObjectBufferATI = trace_glFreeObjectBufferATI;
  tbl.glGetArrayObjectfvATI = trace_glGetArrayObjectfvATI;
  tbl.glGetArrayObjectivATI = trace_glGetArrayObjectivATI;
  tbl.glGetObjectBufferfvATI = trace_glGetObjectBufferfvATI;
  tbl.glGetObjectBufferivATI = trace_glGetObjectBufferivATI;
  tbl.glGetVariantArrayObjectfvATI = trace_glGetVariantArrayObjectfvATI;
  tbl.glGetVariantArrayObjectivATI = trace_glGetVariantArrayObjectivATI;
  tbl.glIsObjectBufferATI = trace_glIsObjectBufferATI;
  tbl.glNewObjectBufferATI = trace_glNewObjectBufferATI;
  tbl.glUpdateObjectBufferATI = trace_glUpdateObjectBufferATI;
  tbl.glVariantArrayObjectATI = trace_glVariantArrayObjectATI;

  // GL_ATI_vertex_attrib_array_object

  tbl.glGetVertexAttribArrayObjectfvATI = trace_glGetVertexAttribArrayObjectfvATI;
  tbl.glGetVertexAttribArrayObjectivATI = trace_glGetVertexAttribArrayObjectivATI;
  tbl.glVertexAttribArrayObjectATI = trace_glVertexAttribArrayObjectATI;

  // GL_ATI_vertex_streams

  tbl.glClientActiveVertexStreamATI = trace_glClientActiveVertexStreamATI;
  tbl.glNormalStream3bATI = trace_glNormalStream3bATI;
  tbl.glNormalStream3bvATI = trace_glNormalStream3bvATI;
  tbl.glNormalStream3dATI = trace_glNormalStream3dATI;
  tbl.glNormalStream3dvATI = trace_glNormalStream3dvATI;
  tbl.glNormalStream3fATI = trace_glNormalStream3fATI;
  tbl.glNormalStream3fvATI = trace_glNormalStream3fvATI;
  tbl.glNormalStream3iATI = trace_glNormalStream3iATI;
  tbl.glNormalStream3ivATI = trace_glNormalStream3ivATI;
  tbl.glNormalStream3sATI = trace_glNormalStream3sATI;
  tbl.glNormalStream3svATI = trace_glNormalStream3svATI;
  tbl.glVertexBlendEnvfATI = trace_glVertexBlendEnvfATI;
  tbl.glVertexBlendEnviATI = trace_glVertexBlendEnviATI;
  tbl.glVertexStream1dATI = trace_glVertexStream1dATI;
  tbl.glVertexStream1dvATI = trace_glVertexStream1dvATI;
  tbl.glVertexStream1fATI = trace_glVertexStream1fATI;
  tbl.glVertexStream1fvATI = trace_glVertexStream1fvATI;
  tbl.glVertexStream1iATI = trace_glVertexStream1iATI;
  tbl.glVertexStream1ivATI = trace_glVertexStream1ivATI;
  tbl.glVertexStream1sATI = trace_glVertexStream1sATI;
  tbl.glVertexStream1svATI = trace_glVertexStream1svATI;
  tbl.glVertexStream2dATI = trace_glVertexStream2dATI;
  tbl.glVertexStream2dvATI = trace_glVertexStream2dvATI;
  tbl.glVertexStream2fATI = trace_glVertexStream2fATI;
  tbl.glVertexStream2fvATI = trace_glVertexStream2fvATI;
  tbl.glVertexStream2iATI = trace_glVertexStream2iATI;
  tbl.glVertexStream2ivATI = trace_glVertexStream2ivATI;
  tbl.glVertexStream2sATI = trace_glVertexStream2sATI;
  tbl.glVertexStream2svATI = trace_glVertexStream2svATI;
  tbl.glVertexStream3dATI = trace_glVertexStream3dATI;
  tbl.glVertexStream3dvATI = trace_glVertexStream3dvATI;
  tbl.glVertexStream3fATI = trace_glVertexStream3fATI;
  tbl.glVertexStream3fvATI = trace_glVertexStream3fvATI;
  tbl.glVertexStream3iATI = trace_glVertexStream3iATI;
  tbl.glVertexStream3ivATI = trace_glVertexStream3ivATI;
  tbl.glVertexStream3sATI = trace_glVertexStream3sATI;
  tbl.glVertexStream3svATI = trace_glVertexStream3svATI;
  tbl.glVertexStream4dATI = trace_glVertexStream4dATI;
  tbl.glVertexStream4dvATI = trace_glVertexStream4dvATI;
  tbl.glVertexStream4fATI = trace_glVertexStream4fATI;
  tbl.glVertexStream4fvATI = trace_glVertexStream4fvATI;
  tbl.glVertexStream4iATI = trace_glVertexStream4iATI;
  tbl.glVertexStream4ivATI = trace_glVertexStream4ivATI;
  tbl.glVertexStream4sATI = trace_glVertexStream4sATI;
  tbl.glVertexStream4svATI = trace_glVertexStream4svATI;

  // GL_EXT_bindable_uniform

  tbl.glGetUniformBufferSizeEXT = trace_glGetUniformBufferSizeEXT;
  tbl.glGetUniformOffsetEXT = trace_glGetUniformOffsetEXT;
  tbl.glUniformBufferEXT = trace_glUniformBufferEXT;

  // GL_EXT_blend_color

  tbl.glBlendColorEXT = trace_glBlendColorEXT;

  // GL_EXT_blend_equation_separate

  tbl.glBlendEquationSeparateEXT = trace_glBlendEquationSeparateEXT;

  // GL_EXT_blend_func_separate

  tbl.glBlendFuncSeparateEXT = trace_glBlendFuncSeparateEXT;

  // GL_EXT_blend_minmax

  tbl.glBlendEquationEXT = trace_glBlendEquationEXT;

  // GL_EXT_color_subtable

  tbl.glColorSubTableEXT = trace_glColorSubTableEXT;
  tbl.glCopyColorSubTableEXT = trace_glCopyColorSubTableEXT;

  // GL_EXT_compiled_vertex_array

  tbl.glLockArraysEXT = trace_glLockArraysEXT;
  tbl.glUnlockArraysEXT = trace_glUnlockArraysEXT;

  // GL_EXT_convolution

  tbl.glConvolutionFilter1DEXT = trace_glConvolutionFilter1DEXT;
  tbl.glConvolutionFilter2DEXT = trace_glConvolutionFilter2DEXT;
  tbl.glConvolutionParameterfEXT = trace_glConvolutionParameterfEXT;
  tbl.glConvolutionParameterfvEXT = trace_glConvolutionParameterfvEXT;
  tbl.glConvolutionParameteriEXT = trace_glConvolutionParameteriEXT;
  tbl.glConvolutionParameterivEXT = trace_glConvolutionParameterivEXT;
  tbl.glCopyConvolutionFilter1DEXT = trace_glCopyConvolutionFilter1DEXT;
  tbl.glCopyConvolutionFilter2DEXT = trace_glCopyConvolutionFilter2DEXT;
  tbl.glGetConvolutionFilterEXT = trace_glGetConvolutionFilterEXT;
  tbl.glGetConvolutionParameterfvEXT = trace_glGetConvolutionParameterfvEXT;
  tbl.glGetConvolutionParameterivEXT = trace_glGetConvolutionParameterivEXT;
  tbl.glGetSeparableFilterEXT = trace_glGetSeparableFilterEXT;
  tbl.glSeparableFilter2DEXT = trace_glSeparableFilter2DEXT;

  // GL_EXT_coordinate_frame

  tbl.glBinormal3bEXT = trace_glBinormal3bEXT;
  tbl.glBinormal3bvEXT = trace_glBinormal3bvEXT;
  tbl.glBinormal3dEXT = trace_glBinormal3dEXT;
  tbl.glBinormal3dvEXT = trace_glBinormal3dvEXT;
  tbl.glBinormal3fEXT = trace_glBinormal3fEXT;
  tbl.glBinormal3fvEXT = trace_glBinormal3fvEXT;
  tbl.glBinormal3iEXT = trace_glBinormal3iEXT;
  tbl.glBinormal3ivEXT = trace_glBinormal3ivEXT;
  tbl.glBinormal3sEXT = trace_glBinormal3sEXT;
  tbl.glBinormal3svEXT = trace_glBinormal3svEXT;
  tbl.glBinormalPointerEXT = trace_glBinormalPointerEXT;
  tbl.glTangent3bEXT = trace_glTangent3bEXT;
  tbl.glTangent3bvEXT = trace_glTangent3bvEXT;
  tbl.glTangent3dEXT = trace_glTangent3dEXT;
  tbl.glTangent3dvEXT = trace_glTangent3dvEXT;
  tbl.glTangent3fEXT = trace_glTangent3fEXT;
  tbl.glTangent3fvEXT = trace_glTangent3fvEXT;
  tbl.glTangent3iEXT = trace_glTangent3iEXT;
  tbl.glTangent3ivEXT = trace_glTangent3ivEXT;
  tbl.glTangent3sEXT = trace_glTangent3sEXT;
  tbl.glTangent3svEXT = trace_glTangent3svEXT;
  tbl.glTangentPointerEXT = trace_glTangentPointerEXT;

  // GL_EXT_copy_texture

  tbl.glCopyTexImage1DEXT = trace_glCopyTexImage1DEXT;
  tbl.glCopyTexImage2DEXT = trace_glCopyTexImage2DEXT;
  tbl.glCopyTexSubImage1DEXT = trace_glCopyTexSubImage1DEXT;
  tbl.glCopyTexSubImage2DEXT = trace_glCopyTexSubImage2DEXT;
  tbl.glCopyTexSubImage3DEXT = trace_glCopyTexSubImage3DEXT;

  // GL_EXT_cull_vertex

  tbl.glCullParameterdvEXT = trace_glCullParameterdvEXT;
  tbl.glCullParameterfvEXT = trace_glCullParameterfvEXT;

  // GL_EXT_debug_label

  tbl.glGetObjectLabelEXT = trace_glGetObjectLabelEXT;
  tbl.glLabelObjectEXT = trace_glLabelObjectEXT;

  // GL_EXT_debug_marker

  tbl.glInsertEventMarkerEXT = trace_glInsertEventMarkerEXT;
  tbl.glPopGroupMarkerEXT = trace_glPopGroupMarkerEXT;
  tbl.glPushGroupMarkerEXT = trace_glPushGroupMarkerEXT;

  // GL_EXT_depth_bounds_test

  tbl.glDepthBoundsEXT = trace_glDepthBoundsEXT;

  // GL_EXT_direct_state_access

  tbl.glBindMultiTextureEXT = trace_glBindMultiTextureEXT;
  tbl.glCheckNamedFramebufferStatusEXT = trace_glCheckNamedFramebufferStatusEXT;
  tbl.glClientAttribDefaultEXT = trace_glClientAttribDefaultEXT;
  tbl.glCompressedMultiTexImage1DEXT = trace_glCompressedMultiTexImage1DEXT;
  tbl.glCompressedMultiTexImage2DEXT = trace_glCompressedMultiTexImage2DEXT;
  tbl.glCompressedMultiTexImage3DEXT = trace_glCompressedMultiTexImage3DEXT;
  tbl.glCompressedMultiTexSubImage1DEXT = trace_glCompressedMultiTexSubImage1DEXT;
  tbl.glCompressedMultiTexSubImage2DEXT = trace_glCompressedMultiTexSubImage2DEXT;
  tbl.glCompressedMultiTexSubImage3DEXT = trace_glCompressedMultiTexSubImage3DEXT;
  tbl.glCompressedTextureImage1DEXT = trace_glCompressedTextureImage1DEXT;
  tbl.glCompressedTextureImage2DEXT = trace_glCompressedTextureImage2DEXT;
  tbl.glCompressedTextureImage3DEXT = trace_glCompressedTextureImage3DEXT;
  tbl.glCompressedTextureSubImage1DEXT = trace_glCompressedTextureSubImage1DEXT;
  tbl.glCompressedTextureSubImage2DEXT = trace_glCompressedTextureSubImage2DEXT;
  tbl.glCompressedTextureSubImage3DEXT = trace_glCompressedTextureSubImage3DEXT;
  tbl.glCopyMultiTexImage1DEXT = trace_glCopyMultiTexImage1DEXT;
  tbl.glCopyMultiTexImage2DEXT = trace_glCopyMultiTexImage2DEXT;
  tbl.glCopyMultiTexSubImage1DEXT = trace_glCopyMultiTexSubImage1DEXT;
  tbl.glCopyMultiTexSubImage2DEXT = trace_glCopyMultiTexSubImage2DEXT;
  tbl.glCopyMultiTexSubImage3DEXT = trace_glCopyMultiTexSubImage3DEXT;
  tbl.glCopyTextureImage1DEXT = trace_glCopyTextureImage1DEXT;
  tbl.glCopyTextureImage2DEXT = trace_glCopyTextureImage2DEXT;
  tbl.glCopyTextureSubImage1DEXT = trace_glCopyTextureSubImage1DEXT;
  tbl.glCopyTextureSubImage2DEXT = trace_glCopyTextureSubImage2DEXT;
  tbl.glCopyTextureSubImage3DEXT = trace_glCopyTextureSubImage3DEXT;
  tbl.glDisableClientStateIndexedEXT = trace_glDisableClientStateIndexedEXT;
  tbl.glDisableVertexArrayAttribEXT = trace_glDisableVertexArrayAttribEXT;
  tbl.glDisableVertexArrayEXT = trace_glDisableVertexArrayEXT;
  tbl.glEnableClientStateIndexedEXT = trace_glEnableClientStateIndexedEXT;
  tbl.glEnableVertexArrayAttribEXT = trace_glEnableVertexArrayAttribEXT;
  tbl.glEnableVertexArrayEXT = trace_glEnableVertexArrayEXT;
  tbl.glFlushMappedNamedBufferRangeEXT = trace_glFlushMappedNamedBufferRangeEXT;
  tbl.glFramebufferDrawBufferEXT = trace_glFramebufferDrawBufferEXT;
  tbl.glFramebufferDrawBuffersEXT = trace_glFramebufferDrawBuffersEXT;
  tbl.glFramebufferReadBufferEXT = trace_glFramebufferReadBufferEXT;
  tbl.glGenerateMultiTexMipmapEXT = trace_glGenerateMultiTexMipmapEXT;
  tbl.glGenerateTextureMipmapEXT = trace_glGenerateTextureMipmapEXT;
  tbl.glGetCompressedMultiTexImageEXT = trace_glGetCompressedMultiTexImageEXT;
  tbl.glGetCompressedTextureImageEXT = trace_glGetCompressedTextureImageEXT;
  tbl.glGetDoubleIndexedvEXT = trace_glGetDoubleIndexedvEXT;
  tbl.glGetFloatIndexedvEXT = trace_glGetFloatIndexedvEXT;
  tbl.glGetFramebufferParameterivEXT = trace_glGetFramebufferParameterivEXT;
  tbl.glGetMultiTexEnvfvEXT = trace_glGetMultiTexEnvfvEXT;
  tbl.glGetMultiTexEnvivEXT = trace_glGetMultiTexEnvivEXT;
  tbl.glGetMultiTexGendvEXT = trace_glGetMultiTexGendvEXT;
  tbl.glGetMultiTexGenfvEXT = trace_glGetMultiTexGenfvEXT;
  tbl.glGetMultiTexGenivEXT = trace_glGetMultiTexGenivEXT;
  tbl.glGetMultiTexImageEXT = trace_glGetMultiTexImageEXT;
  tbl.glGetMultiTexLevelParameterfvEXT = trace_glGetMultiTexLevelParameterfvEXT;
  tbl.glGetMultiTexLevelParameterivEXT = trace_glGetMultiTexLevelParameterivEXT;
  tbl.glGetMultiTexParameterIivEXT = trace_glGetMultiTexParameterIivEXT;
  tbl.glGetMultiTexParameterIuivEXT = trace_glGetMultiTexParameterIuivEXT;
  tbl.glGetMultiTexParameterfvEXT = trace_glGetMultiTexParameterfvEXT;
  tbl.glGetMultiTexParameterivEXT = trace_glGetMultiTexParameterivEXT;
  tbl.glGetNamedBufferParameterivEXT = trace_glGetNamedBufferParameterivEXT;
  tbl.glGetNamedBufferPointervEXT = trace_glGetNamedBufferPointervEXT;
  tbl.glGetNamedBufferSubDataEXT = trace_glGetNamedBufferSubDataEXT;
  tbl.glGetNamedFramebufferAttachmentParameterivEXT = trace_glGetNamedFramebufferAttachmentParameterivEXT;
  tbl.glGetNamedProgramLocalParameterIivEXT = trace_glGetNamedProgramLocalParameterIivEXT;
  tbl.glGetNamedProgramLocalParameterIuivEXT = trace_glGetNamedProgramLocalParameterIuivEXT;
  tbl.glGetNamedProgramLocalParameterdvEXT = trace_glGetNamedProgramLocalParameterdvEXT;
  tbl.glGetNamedProgramLocalParameterfvEXT = trace_glGetNamedProgramLocalParameterfvEXT;
  tbl.glGetNamedProgramStringEXT = trace_glGetNamedProgramStringEXT;
  tbl.glGetNamedProgramivEXT = trace_glGetNamedProgramivEXT;
  tbl.glGetNamedRenderbufferParameterivEXT = trace_glGetNamedRenderbufferParameterivEXT;
  tbl.glGetPointerIndexedvEXT = trace_glGetPointerIndexedvEXT;
  tbl.glGetTextureImageEXT = trace_glGetTextureImageEXT;
  tbl.glGetTextureLevelParameterfvEXT = trace_glGetTextureLevelParameterfvEXT;
  tbl.glGetTextureLevelParameterivEXT = trace_glGetTextureLevelParameterivEXT;
  tbl.glGetTextureParameterIivEXT = trace_glGetTextureParameterIivEXT;
  tbl.glGetTextureParameterIuivEXT = trace_glGetTextureParameterIuivEXT;
  tbl.glGetTextureParameterfvEXT = trace_glGetTextureParameterfvEXT;
  tbl.glGetTextureParameterivEXT = trace_glGetTextureParameterivEXT;
  tbl.glGetVertexArrayIntegeri_vEXT = trace_glGetVertexArrayIntegeri_vEXT;
  tbl.glGetVertexArrayIntegervEXT = trace_glGetVertexArrayIntegervEXT;
  tbl.glGetVertexArrayPointeri_vEXT = trace_glGetVertexArrayPointeri_vEXT;
  tbl.glGetVertexArrayPointervEXT = trace_glGetVertexArrayPointervEXT;
  tbl.glMapNamedBufferEXT = trace_glMapNamedBufferEXT;
  tbl.glMapNamedBufferRangeEXT = trace_glMapNamedBufferRangeEXT;
  tbl.glMatrixFrustumEXT = trace_glMatrixFrustumEXT;
  tbl.glMatrixLoadIdentityEXT = trace_glMatrixLoadIdentityEXT;
  tbl.glMatrixLoadTransposedEXT = trace_glMatrixLoadTransposedEXT;
  tbl.glMatrixLoadTransposefEXT = trace_glMatrixLoadTransposefEXT;
  tbl.glMatrixLoaddEXT = trace_glMatrixLoaddEXT;
  tbl.glMatrixLoadfEXT = trace_glMatrixLoadfEXT;
  tbl.glMatrixMultTransposedEXT = trace_glMatrixMultTransposedEXT;
  tbl.glMatrixMultTransposefEXT = trace_glMatrixMultTransposefEXT;
  tbl.glMatrixMultdEXT = trace_glMatrixMultdEXT;
  tbl.glMatrixMultfEXT = trace_glMatrixMultfEXT;
  tbl.glMatrixOrthoEXT = trace_glMatrixOrthoEXT;
  tbl.glMatrixPopEXT = trace_glMatrixPopEXT;
  tbl.glMatrixPushEXT = trace_glMatrixPushEXT;
  tbl.glMatrixRotatedEXT = trace_glMatrixRotatedEXT;
  tbl.glMatrixRotatefEXT = trace_glMatrixRotatefEXT;
  tbl.glMatrixScaledEXT = trace_glMatrixScaledEXT;
  tbl.glMatrixScalefEXT = trace_glMatrixScalefEXT;
  tbl.glMatrixTranslatedEXT = trace_glMatrixTranslatedEXT;
  tbl.glMatrixTranslatefEXT = trace_glMatrixTranslatefEXT;
  tbl.glMultiTexBufferEXT = trace_glMultiTexBufferEXT;
  tbl.glMultiTexCoordPointerEXT = trace_glMultiTexCoordPointerEXT;
  tbl.glMultiTexEnvfEXT = trace_glMultiTexEnvfEXT;
  tbl.glMultiTexEnvfvEXT = trace_glMultiTexEnvfvEXT;
  tbl.glMultiTexEnviEXT = trace_glMultiTexEnviEXT;
  tbl.glMultiTexEnvivEXT = trace_glMultiTexEnvivEXT;
  tbl.glMultiTexGendEXT = trace_glMultiTexGendEXT;
  tbl.glMultiTexGendvEXT = trace_glMultiTexGendvEXT;
  tbl.glMultiTexGenfEXT = trace_glMultiTexGenfEXT;
  tbl.glMultiTexGenfvEXT = trace_glMultiTexGenfvEXT;
  tbl.glMultiTexGeniEXT = trace_glMultiTexGeniEXT;
  tbl.glMultiTexGenivEXT = trace_glMultiTexGenivEXT;
  tbl.glMultiTexParameterIivEXT = trace_glMultiTexParameterIivEXT;
  tbl.glMultiTexParameterIuivEXT = trace_glMultiTexParameterIuivEXT;
  tbl.glMultiTexParameterfEXT = trace_glMultiTexParameterfEXT;
  tbl.glMultiTexParameterfvEXT = trace_glMultiTexParameterfvEXT;
  tbl.glMultiTexParameteriEXT = trace_glMultiTexParameteriEXT;
  tbl.glMultiTexParameterivEXT = trace_glMultiTexParameterivEXT;
  tbl.glMultiTexRenderbufferEXT = trace_glMultiTexRenderbufferEXT;
  tbl.glMultiTexSubImage1DEXT = trace_glMultiTexSubImage1DEXT;
  tbl.glMultiTexSubImage2DEXT = trace_glMultiTexSubImage2DEXT;
  tbl.glMultiTexSubImage3DEXT = trace_glMultiTexSubImage3DEXT;
  tbl.glNamedBufferDataEXT = trace_glNamedBufferDataEXT;
  tbl.glNamedBufferSubDataEXT = trace_glNamedBufferSubDataEXT;
  tbl.glNamedCopyBufferSubDataEXT = trace_glNamedCopyBufferSubDataEXT;
  tbl.glNamedFramebufferRenderbufferEXT = trace_glNamedFramebufferRenderbufferEXT;
  tbl.glNamedFramebufferTexture1DEXT = trace_glNamedFramebufferTexture1DEXT;
  tbl.glNamedFramebufferTexture2DEXT = trace_glNamedFramebufferTexture2DEXT;
  tbl.glNamedFramebufferTexture3DEXT = trace_glNamedFramebufferTexture3DEXT;
  tbl.glNamedFramebufferTextureEXT = trace_glNamedFramebufferTextureEXT;
  tbl.glNamedFramebufferTextureFaceEXT = trace_glNamedFramebufferTextureFaceEXT;
  tbl.glNamedFramebufferTextureLayerEXT = trace_glNamedFramebufferTextureLayerEXT;
  tbl.glNamedProgramLocalParameter4dEXT = trace_glNamedProgramLocalParameter4dEXT;
  tbl.glNamedProgramLocalParameter4dvEXT = trace_glNamedProgramLocalParameter4dvEXT;
  tbl.glNamedProgramLocalParameter4fEXT = trace_glNamedProgramLocalParameter4fEXT;
  tbl.glNamedProgramLocalParameter4fvEXT = trace_glNamedProgramLocalParameter4fvEXT;
  tbl.glNamedProgramLocalParameterI4iEXT = trace_glNamedProgramLocalParameterI4iEXT;
  tbl.glNamedProgramLocalParameterI4ivEXT = trace_glNamedProgramLocalParameterI4ivEXT;
  tbl.glNamedProgramLocalParameterI4uiEXT = trace_glNamedProgramLocalParameterI4uiEXT;
  tbl.glNamedProgramLocalParameterI4uivEXT = trace_glNamedProgramLocalParameterI4uivEXT;
  tbl.glNamedProgramLocalParameters4fvEXT = trace_glNamedProgramLocalParameters4fvEXT;
  tbl.glNamedProgramLocalParametersI4ivEXT = trace_glNamedProgramLocalParametersI4ivEXT;
  tbl.glNamedProgramLocalParametersI4uivEXT = trace_glNamedProgramLocalParametersI4uivEXT;
  tbl.glNamedProgramStringEXT = trace_glNamedProgramStringEXT;
  tbl.glNamedRenderbufferStorageEXT = trace_glNamedRenderbufferStorageEXT;
  tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = trace_glNamedRenderbufferStorageMultisampleCoverageEXT;
  tbl.glNamedRenderbufferStorageMultisampleEXT = trace_glNamedRenderbufferStorageMultisampleEXT;
  tbl.glProgramUniform1dEXT = trace_glProgramUniform1dEXT;
  tbl.glProgramUniform1dvEXT = trace_glProgramUniform1dvEXT;
  tbl.glProgramUniform1fEXT = trace_glProgramUniform1fEXT;
  tbl.glProgramUniform1fvEXT = trace_glProgramUniform1fvEXT;
  tbl.glProgramUniform1iEXT = trace_glProgramUniform1iEXT;
  tbl.glProgramUniform1ivEXT = trace_glProgramUniform1ivEXT;
  tbl.glProgramUniform1uiEXT = trace_glProgramUniform1uiEXT;
  tbl.glProgramUniform1uivEXT = trace_glProgramUniform1uivEXT;
  tbl.glProgramUniform2dEXT = trace_glProgramUniform2dEXT;
  tbl.glProgramUniform2dvEXT = trace_glProgramUniform2dvEXT;
  tbl.glProgramUniform2fEXT = trace_glProgramUniform2fEXT;
  tbl.glProgramUniform2fvEXT = trace_glProgramUniform2fvEXT;
  tbl.glProgramUniform2iEXT = trace_glProgramUniform2iEXT;
  tbl.glProgramUniform2ivEXT = trace_glProgramUniform2ivEXT;
  tbl.glProgramUniform2uiEXT = trace_glProgramUniform2uiEXT;
  tbl.glProgramUniform2uivEXT = trace_glProgramUniform2uivEXT;
  tbl.glProgramUniform3dEXT = trace_glProgramUniform3dEXT;
  tbl.glProgramUniform3dvEXT = trace_glProgramUniform3dvEXT;
  tbl.glProgramUniform3fEXT = trace_glProgramUniform3fEXT;
  tbl.glProgramUniform3fvEXT = trace_glProgramUniform3fvEXT;
  tbl.glProgramUniform3iEXT = trace_glProgramUniform3iEXT;
  tbl.glProgramUniform3ivEXT = trace_glProgramUniform3ivEXT;
  tbl.glProgramUniform3uiEXT = trace_glProgramUniform3uiEXT;
  tbl.glProgramUniform3uivEXT = trace_glProgramUniform3uivEXT;
  tbl.glProgramUniform4dEXT = trace_glProgramUniform4dEXT;
  tbl.glProgramUniform4dvEXT = trace_glProgramUniform4dvEXT;
  tbl.glProgramUniform4fEXT = trace_glProgramUniform4fEXT;
  tbl.glProgramUniform4fvEXT = trace_glProgramUniform4fvEXT;
  tbl.glProgramUniform4iEXT = trace_glProgramUniform4iEXT;
  tbl.glProgramUniform4ivEXT = trace_glProgramUniform4ivEXT;
  tbl.glProgramUniform4uiEXT = trace_glProgramUniform4uiEXT;
  tbl.glProgramUniform4uivEXT = trace_glProgramUniform4uivEXT;
  tbl.glProgramUniformMatrix2dvEXT = trace_glProgramUniformMatrix2dvEXT;
  tbl.glProgramUniformMatrix2fvEXT = trace_glProgramUniformMatrix2fvEXT;
  tbl.glProgramUniformMatrix2x3dvEXT = trace_glProgramUniformMatrix2x3dvEXT;
  tbl.glProgramUniformMatrix2x3fvEXT = trace_glProgramUniformMatrix2x3fvEXT;
  tbl.glProgramUniformMatrix2x4dvEXT = trace_glProgramUniformMatrix2x4dvEXT;
  tbl.glProgramUniformMatrix2x4fvEXT = trace_glProgramUniformMatrix2x4fvEXT;
  tbl.glProgramUniformMatrix3dvEXT = trace_glProgramUniformMatrix3dvEXT;
  tbl.glProgramUniformMatrix3fvEXT = trace_glProgramUniformMatrix3fvEXT;
  tbl.glProgramUniformMatrix3x2dvEXT = trace_glProgramUniformMatrix3x2dvEXT;
  tbl.glProgramUniformMatrix3x2fvEXT = trace_glProgramUniformMatrix3x2fvEXT;
  tbl.glProgramUniformMatrix3x4dvEXT = trace_glProgramUniformMatrix3x4dvEXT;
  tbl.glProgramUniformMatrix3x4fvEXT = trace_glProgramUniformMatrix3x4fvEXT;
  tbl.glProgramUniformMatrix4dvEXT = trace_glProgramUniformMatrix4dvEXT;
  tbl.glProgramUniformMatrix4fvEXT = trace_glProgramUniformMatrix4fvEXT;
  tbl.glProgramUniformMatrix4x2dvEXT = trace_glProgramUniformMatrix4x2dvEXT;
  tbl.glProgramUniformMatrix4x2fvEXT = trace_glProgramUniformMatrix4x2fvEXT;
  tbl.glProgramUniformMatrix4x3dvEXT = trace_glProgramUniformMatrix4x3dvEXT;
  tbl.glProgramUniformMatrix4x3fvEXT = trace_glProgramUniformMatrix4x3fvEXT;
  tbl.glPushClientAttribDefaultEXT = trace_glPushClientAttribDefaultEXT;
  tbl.glTextureBufferEXT = trace_glTextureBufferEXT;
  tbl.glTextureParameterIivEXT = trace_glTextureParameterIivEXT;
  tbl.glTextureParameterIuivEXT = trace_glTextureParameterIuivEXT;
  tbl.glTextureParameterfEXT = trace_glTextureParameterfEXT;
  tbl.glTextureParameterfvEXT = trace_glTextureParameterfvEXT;
  tbl.glTextureParameteriEXT = trace_glTextureParameteriEXT;
  tbl.glTextureParameterivEXT = trace_glTextureParameterivEXT;
  tbl.glTextureRenderbufferEXT = trace_glTextureRenderbufferEXT;
  tbl.glTextureSubImage1DEXT = trace_glTextureSubImage1DEXT;
  tbl.glTextureSubImage2DEXT = trace_glTextureSubImage2DEXT;
  tbl.glTextureSubImage3DEXT = trace_glTextureSubImage3DEXT;
  tbl.glUnmapNamedBufferEXT = trace_glUnmapNamedBufferEXT;
  tbl.glVertexArrayColorOffsetEXT = trace_glVertexArrayColorOffsetEXT;
  tbl.glVertexArrayEdgeFlagOffsetEXT = trace_glVertexArrayEdgeFlagOffsetEXT;
  tbl.glVertexArrayFogCoordOffsetEXT = trace_glVertexArrayFogCoordOffsetEXT;
  tbl.glVertexArrayIndexOffsetEXT = trace_glVertexArrayIndexOffsetEXT;
  tbl.glVertexArrayMultiTexCoordOffsetEXT = trace_glVertexArrayMultiTexCoordOffsetEXT;
  tbl.glVertexArrayNormalOffsetEXT = trace_glVertexArrayNormalOffsetEXT;
  tbl.glVertexArraySecondaryColorOffsetEXT = trace_glVertexArraySecondaryColorOffsetEXT;
  tbl.glVertexArrayTexCoordOffsetEXT = trace_glVertexArrayTexCoordOffsetEXT;
  tbl.glVertexArrayVertexAttribIOffsetEXT = trace_glVertexArrayVertexAttribIOffsetEXT;
  tbl.glVertexArrayVertexAttribOffsetEXT = trace_glVertexArrayVertexAttribOffsetEXT;
  tbl.glVertexArrayVertexOffsetEXT = trace_glVertexArrayVertexOffsetEXT;

  // GL_EXT_discard_framebuffer

  tbl.glDiscardFramebufferEXT = trace_glDiscardFramebufferEXT;

  // GL_EXT_draw_buffers2

  tbl.glColorMaskIndexedEXT = trace_glColorMaskIndexedEXT;
  tbl.glDisableIndexedEXT = trace_glDisableIndexedEXT;
  tbl.glEnableIndexedEXT = trace_glEnableIndexedEXT;
  tbl.glGetBooleanIndexedvEXT = trace_glGetBooleanIndexedvEXT;
  tbl.glGetIntegerIndexedvEXT = trace_glGetIntegerIndexedvEXT;
  tbl.glIsEnabledIndexedEXT = trace_glIsEnabledIndexedEXT;

  // GL_EXT_draw_instanced

  tbl.glDrawArraysInstancedEXT = trace_glDrawArraysInstancedEXT;
  tbl.glDrawElementsInstancedEXT = trace_glDrawElementsInstancedEXT;

  // GL_EXT_draw_range_elements

  tbl.glDrawRangeElementsEXT = trace_glDrawRangeElementsEXT;

  // GL_EXT_fog_coord

  tbl.glFogCoordPointerEXT = trace_glFogCoordPointerEXT;
  tbl.glFogCoorddEXT = trace_glFogCoorddEXT;
  tbl.glFogCoorddvEXT = trace_glFogCoorddvEXT;
  tbl.glFogCoordfEXT = trace_glFogCoordfEXT;
  tbl.glFogCoordfvEXT = trace_glFogCoordfvEXT;

  // GL_EXT_framebuffer_blit

  tbl.glBlitFramebufferEXT = trace_glBlitFramebufferEXT;

  // GL_EXT_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleEXT = trace_glRenderbufferStorageMultisampleEXT;

  // GL_EXT_framebuffer_object

  tbl.glBindFramebufferEXT = trace_glBindFramebufferEXT;
  tbl.glBindRenderbufferEXT = trace_glBindRenderbufferEXT;
  tbl.glCheckFramebufferStatusEXT = trace_glCheckFramebufferStatusEXT;
  tbl.glDeleteFramebuffersEXT = trace_glDeleteFramebuffersEXT;
  tbl.glDeleteRenderbuffersEXT = trace_glDeleteRenderbuffersEXT;
  tbl.glFramebufferRenderbufferEXT = trace_glFramebufferRenderbufferEXT;
  tbl.glFramebufferTexture1DEXT = trace_glFramebufferTexture1DEXT;
  tbl.glFramebufferTexture2DEXT = trace_glFramebufferTexture2DEXT;
  tbl.glFramebufferTexture3DEXT = trace_glFramebufferTexture3DEXT;
  tbl.glGenFramebuffersEXT = trace_glGenFramebuffersEXT;
  tbl.glGenRenderbuffersEXT = trace_glGenRenderbuffersEXT;
  tbl.glGenerateMipmapEXT = trace_glGenerateMipmapEXT;
  tbl.glGetFramebufferAttachmentParameterivEXT = trace_glGetFramebufferAttachmentParameterivEXT;
  tbl.glGetRenderbufferParameterivEXT = trace_glGetRenderbufferParameterivEXT;
  tbl.glIsFramebufferEXT = trace_glIsFramebufferEXT;
  tbl.glIsRenderbufferEXT = trace_glIsRenderbufferEXT;
  tbl.glRenderbufferStorageEXT = trace_glRenderbufferStorageEXT;

  // GL_EXT_geometry_shader4

  tbl.glFramebufferTextureEXT = trace_glFramebufferTextureEXT;
  tbl.glFramebufferTextureFaceEXT = trace_glFramebufferTextureFaceEXT;
  tbl.glProgramParameteriEXT = trace_glProgramParameteriEXT;

  // GL_EXT_gpu_program_parameters

  tbl.glProgramEnvParameters4fvEXT = trace_glProgramEnvParameters4fvEXT;
  tbl.glProgramLocalParameters4fvEXT = trace_glProgramLocalParameters4fvEXT;

  // GL_EXT_gpu_shader4

  tbl.glBindFragDataLocationEXT = trace_glBindFragDataLocationEXT;
  tbl.glGetFragDataLocationEXT = trace_glGetFragDataLocationEXT;
  tbl.glGetUniformuivEXT = trace_glGetUniformuivEXT;
  tbl.glGetVertexAttribIivEXT = trace_glGetVertexAttribIivEXT;
  tbl.glGetVertexAttribIuivEXT = trace_glGetVertexAttribIuivEXT;
  tbl.glUniform1uiEXT = trace_glUniform1uiEXT;
  tbl.glUniform1uivEXT = trace_glUniform1uivEXT;
  tbl.glUniform2uiEXT = trace_glUniform2uiEXT;
  tbl.glUniform2uivEXT = trace_glUniform2uivEXT;
  tbl.glUniform3uiEXT = trace_glUniform3uiEXT;
  tbl.glUniform3uivEXT = trace_glUniform3uivEXT;
  tbl.glUniform4uiEXT = trace_glUniform4uiEXT;
  tbl.glUniform4uivEXT = trace_glUniform4uivEXT;
  tbl.glVertexAttribI1iEXT = trace_glVertexAttribI1iEXT;
  tbl.glVertexAttribI1ivEXT = trace_glVertexAttribI1ivEXT;
  tbl.glVertexAttribI1uiEXT = trace_glVertexAttribI1uiEXT;
  tbl.glVertexAttribI1uivEXT = trace_glVertexAttribI1uivEXT;
  tbl.glVertexAttribI2iEXT = trace_glVertexAttribI2iEXT;
  tbl.glVertexAttribI2ivEXT = trace_glVertexAttribI2ivEXT;
  tbl.glVertexAttribI2uiEXT = trace_glVertexAttribI2uiEXT;
  tbl.glVertexAttribI2uivEXT = trace_glVertexAttribI2uivEXT;
  tbl.glVertexAttribI3iEXT = trace_glVertexAttribI3iEXT;
  tbl.glVertexAttribI3ivEXT = trace_glVertexAttribI3ivEXT;
  tbl.glVertexAttribI3uiEXT = trace_glVertexAttribI3uiEXT;
  tbl.glVertexAttribI3uivEXT = trace_glVertexAttribI3uivEXT;
  tbl.glVertexAttribI4bvEXT = trace_glVertexAttribI4bvEXT;
  tbl.glVertexAttribI4iEXT = trace_glVertexAttribI4iEXT;
  tbl.glVertexAttribI4ivEXT = trace_glVertexAttribI4ivEXT;
  tbl.glVertexAttribI4svEXT = trace_glVertexAttribI4svEXT;
  tbl.glVertexAttribI4ubvEXT = trace_glVertexAttribI4ubvEXT;
  tbl.glVertexAttribI4uiEXT = trace_glVertexAttribI4uiEXT;
  tbl.glVertexAttribI4uivEXT = trace_glVertexAttribI4uivEXT;
  tbl.glVertexAttribI4usvEXT = trace_glVertexAttribI4usvEXT;
  tbl.glVertexAttribIPointerEXT = trace_glVertexAttribIPointerEXT;

  // GL_EXT_histogram

  tbl.glGetHistogramEXT = trace_glGetHistogramEXT;
  tbl.glGetHistogramParameterfvEXT = trace_glGetHistogramParameterfvEXT;
  tbl.glGetHistogramParameterivEXT = trace_glGetHistogramParameterivEXT;
  tbl.glGetMinmaxEXT = trace_glGetMinmaxEXT;
  tbl.glGetMinmaxParameterfvEXT = trace_glGetMinmaxParameterfvEXT;
  tbl.glGetMinmaxParameterivEXT = trace_glGetMinmaxParameterivEXT;
  tbl.glHistogramEXT = trace_glHistogramEXT;
  tbl.glMinmaxEXT = trace_glMinmaxEXT;
  tbl.glResetHistogramEXT = trace_glResetHistogramEXT;
  tbl.glResetMinmaxEXT = trace_glResetMinmaxEXT;

  // GL_EXT_index_func

  tbl.glIndexFuncEXT = trace_glIndexFuncEXT;

  // GL_EXT_index_material

  tbl.glIndexMaterialEXT = trace_glIndexMaterialEXT;

  // GL_EXT_light_texture

  tbl.glApplyTextureEXT = trace_glApplyTextureEXT;
  tbl.glTextureLightEXT = trace_glTextureLightEXT;
  tbl.glTextureMaterialEXT = trace_glTextureMaterialEXT;

  // GL_EXT_multi_draw_arrays

  tbl.glMultiDrawArraysEXT = trace_glMultiDrawArraysEXT;
  tbl.glMultiDrawElementsEXT = trace_glMultiDrawElementsEXT;

  // GL_EXT_multisample

  tbl.glSampleMaskEXT = trace_glSampleMaskEXT;
  tbl.glSamplePatternEXT = trace_glSamplePatternEXT;

  // GL_EXT_occlusion_query_boolean

  tbl.glBeginQueryEXT = trace_glBeginQueryEXT;
  tbl.glDeleteQueriesEXT = trace_glDeleteQueriesEXT;
  tbl.glEndQueryEXT = trace_glEndQueryEXT;
  tbl.glGenQueriesEXT = trace_glGenQueriesEXT;
  tbl.glGetQueryObjectuivEXT = trace_glGetQueryObjectuivEXT;
  tbl.glGetQueryivEXT = trace_glGetQueryivEXT;
  tbl.glIsQueryEXT = trace_glIsQueryEXT;

  // GL_EXT_paletted_texture

  tbl.glColorTableEXT = trace_glColorTableEXT;
  tbl.glGetColorTableEXT = trace_glGetColorTableEXT;
  tbl.glGetColorTableParameterfvEXT = trace_glGetColorTableParameterfvEXT;
  tbl.glGetColorTableParameterivEXT = trace_glGetColorTableParameterivEXT;

  // GL_EXT_pixel_transform

  tbl.glPixelTransformParameterfEXT = trace_glPixelTransformParameterfEXT;
  tbl.glPixelTransformParameterfvEXT = trace_glPixelTransformParameterfvEXT;
  tbl.glPixelTransformParameteriEXT = trace_glPixelTransformParameteriEXT;
  tbl.glPixelTransformParameterivEXT = trace_glPixelTransformParameterivEXT;

  // GL_EXT_point_parameters

  tbl.glPointParameterfEXT = trace_glPointParameterfEXT;
  tbl.glPointParameterfvEXT = trace_glPointParameterfvEXT;

  // GL_EXT_polygon_offset

  tbl.glPolygonOffsetEXT = trace_glPolygonOffsetEXT;

  // GL_EXT_provoking_vertex

  tbl.glProvokingVertexEXT = trace_glProvokingVertexEXT;

  // GL_EXT_secondary_color

  tbl.glSecondaryColor3bEXT = trace_glSecondaryColor3bEXT;
  tbl.glSecondaryColor3bvEXT = trace_glSecondaryColor3bvEXT;
  tbl.glSecondaryColor3dEXT = trace_glSecondaryColor3dEXT;
  tbl.glSecondaryColor3dvEXT = trace_glSecondaryColor3dvEXT;
  tbl.glSecondaryColor3fEXT = trace_glSecondaryColor3fEXT;
  tbl.glSecondaryColor3fvEXT = trace_glSecondaryColor3fvEXT;
  tbl.glSecondaryColor3iEXT = trace_glSecondaryColor3iEXT;
  tbl.glSecondaryColor3ivEXT = trace_glSecondaryColor3ivEXT;
  tbl.glSecondaryColor3sEXT = trace_glSecondaryColor3sEXT;
  tbl.glSecondaryColor3svEXT = trace_glSecondaryColor3svEXT;
  tbl.glSecondaryColor3ubEXT = trace_glSecondaryColor3ubEXT;
  tbl.glSecondaryColor3ubvEXT = trace_glSecondaryColor3ubvEXT;
  tbl.glSecondaryColor3uiEXT = trace_glSecondaryColor3uiEXT;
  tbl.glSecondaryColor3uivEXT = trace_glSecondaryColor3uivEXT;
  tbl.glSecondaryColor3usEXT = trace_glSecondaryColor3usEXT;
  tbl.glSecondaryColor3usvEXT = trace_glSecondaryColor3usvEXT;
  tbl.glSecondaryColorPointerEXT = trace_glSecondaryColorPointerEXT;

  // GL_EXT_separate_shader_objects

  tbl.glActiveProgramEXT = trace_glActiveProgramEXT;
  tbl.glCreateShaderProgramEXT = trace_glCreateShaderProgramEXT;
  tbl.glUseShaderProgramEXT = trace_glUseShaderProgramEXT;

  // GL_EXT_shader_image_load_store

  tbl.glBindImageTextureEXT = trace_glBindImageTextureEXT;
  tbl.glMemoryBarrierEXT = trace_glMemoryBarrierEXT;

  // GL_EXT_stencil_clear_tag

  tbl.glStencilClearTagEXT = trace_glStencilClearTagEXT;

  // GL_EXT_stencil_two_side

  tbl.glActiveStencilFaceEXT = trace_glActiveStencilFaceEXT;

  // GL_EXT_subtexture

  tbl.glTexSubImage1DEXT = trace_glTexSubImage1DEXT;
  tbl.glTexSubImage2DEXT = trace_glTexSubImage2DEXT;
  tbl.glTexSubImage3DEXT = trace_glTexSubImage3DEXT;

  // GL_EXT_texture3D

  tbl.glTexImage3DEXT = trace_glTexImage3DEXT;

  // GL_EXT_texture_array

  tbl.glFramebufferTextureLayerEXT = trace_glFramebufferTextureLayerEXT;

  // GL_EXT_texture_buffer_object

  tbl.glTexBufferEXT = trace_glTexBufferEXT;

  // GL_EXT_texture_integer

  tbl.glClearColorIiEXT = trace_glClearColorIiEXT;
  tbl.glClearColorIuiEXT = trace_glClearColorIuiEXT;
  tbl.glGetTexParameterIivEXT = trace_glGetTexParameterIivEXT;
  tbl.glGetTexParameterIuivEXT = trace_glGetTexParameterIuivEXT;
  tbl.glTexParameterIivEXT = trace_glTexParameterIivEXT;
  tbl.glTexParameterIuivEXT = trace_glTexParameterIuivEXT;

  // GL_EXT_texture_object

  tbl.glAreTexturesResidentEXT = trace_glAreTexturesResidentEXT;
  tbl.glBindTextureEXT = trace_glBindTextureEXT;
  tbl.glDeleteTexturesEXT = trace_glDeleteTexturesEXT;
  tbl.glGenTexturesEXT = trace_glGenTexturesEXT;
  tbl.glIsTextureEXT = trace_glIsTextureEXT;
  tbl.glPrioritizeTexturesEXT = trace_glPrioritizeTexturesEXT;

  // GL_EXT_texture_perturb_normal

  tbl.glTextureNormalEXT = trace_glTextureNormalEXT;

  // GL_EXT_timer_query

  tbl.glGetQueryObjecti64vEXT = trace_glGetQueryObjecti64vEXT;
  tbl.glGetQueryObjectui64vEXT = trace_glGetQueryObjectui64vEXT;

  // GL_EXT_transform_feedback

  tbl.glBeginTransformFeedbackEXT = trace_glBeginTransformFeedbackEXT;
  tbl.glBindBufferBaseEXT = trace_glBindBufferBaseEXT;
  tbl.glBindBufferOffsetEXT = trace_glBindBufferOffsetEXT;
  tbl.glBindBufferRangeEXT = trace_glBindBufferRangeEXT;
  tbl.glEndTransformFeedbackEXT = trace_glEndTransformFeedbackEXT;
  tbl.glGetTransformFeedbackVaryingEXT = trace_glGetTransformFeedbackVaryingEXT;
  tbl.glTransformFeedbackVaryingsEXT = trace_glTransformFeedbackVaryingsEXT;

  // GL_EXT_vertex_array

  tbl.glArrayElementEXT = trace_glArrayElementEXT;
  tbl.glColorPointerEXT = trace_glColorPointerEXT;
  tbl.glDrawArraysEXT = trace_glDrawArraysEXT;
  tbl.glEdgeFlagPointerEXT = trace_glEdgeFlagPointerEXT;
  tbl.glGetPointervEXT = trace_glGetPointervEXT;
  tbl.glIndexPointerEXT = trace_glIndexPointerEXT;
  tbl.glNormalPointerEXT = trace_glNormalPointerEXT;
  tbl.glTexCoordPointerEXT = trace_glTexCoordPointerEXT;
  tbl.glVertexPointerEXT = trace_glVertexPointerEXT;

  // GL_EXT_vertex_attrib_64bit

  tbl.glGetVertexAttribLdvEXT = trace_glGetVertexAttribLdvEXT;
  tbl.glVertexArrayVertexAttribLOffsetEXT = trace_glVertexArrayVertexAttribLOffsetEXT;
  tbl.glVertexAttribL1dEXT = trace_glVertexAttribL1dEXT;
  tbl.glVertexAttribL1dvEXT = trace_glVertexAttribL1dvEXT;
  tbl.glVertexAttribL2dEXT = trace_glVertexAttribL2dEXT;
  tbl.glVertexAttribL2dvEXT = trace_glVertexAttribL2dvEXT;
  tbl.glVertexAttribL3dEXT = trace_glVertexAttribL3dEXT;
  tbl.glVertexAttribL3dvEXT = trace_glVertexAttribL3dvEXT;
  tbl.glVertexAttribL4dEXT = trace_glVertexAttribL4dEXT;
  tbl.glVertexAttribL4dvEXT = trace_glVertexAttribL4dvEXT;
  tbl.glVertexAttribLPointerEXT = trace_glVertexAttribLPointerEXT;

  // GL_EXT_vertex_shader

  tbl.glBeginVertexShaderEXT = trace_glBeginVertexShaderEXT;
  tbl.glBindLightParameterEXT = trace_glBindLightParameterEXT;
  tbl.glBindMaterialParameterEXT = trace_glBindMaterialParameterEXT;
  tbl.glBindParameterEXT = trace_glBindParameterEXT;
  tbl.glBindTexGenParameterEXT = trace_glBindTexGenParameterEXT;
  tbl.glBindTextureUnitParameterEXT = trace_glBindTextureUnitParameterEXT;
  tbl.glBindVertexShaderEXT = trace_glBindVertexShaderEXT;
  tbl.glDeleteVertexShaderEXT = trace_glDeleteVertexShaderEXT;
  tbl.glDisableVariantClientStateEXT = trace_glDisableVariantClientStateEXT;
  tbl.glEnableVariantClientStateEXT = trace_glEnableVariantClientStateEXT;
  tbl.glEndVertexShaderEXT = trace_glEndVertexShaderEXT;
  tbl.glExtractComponentEXT = trace_glExtractComponentEXT;
  tbl.glGenSymbolsEXT = trace_glGenSymbolsEXT;
  tbl.glGenVertexShadersEXT = trace_glGenVertexShadersEXT;
  tbl.glGetInvariantBooleanvEXT = trace_glGetInvariantBooleanvEXT;
  tbl.glGetInvariantFloatvEXT = trace_glGetInvariantFloatvEXT;
  tbl.glGetInvariantIntegervEXT = trace_glGetInvariantIntegervEXT;
  tbl.glGetLocalConstantBooleanvEXT = trace_glGetLocalConstantBooleanvEXT;
  tbl.glGetLocalConstantFloatvEXT = trace_glGetLocalConstantFloatvEXT;
  tbl.glGetLocalConstantIntegervEXT = trace_glGetLocalConstantIntegervEXT;
  tbl.glGetVariantBooleanvEXT = trace_glGetVariantBooleanvEXT;
  tbl.glGetVariantFloatvEXT = trace_glGetVariantFloatvEXT;
  tbl.glGetVariantIntegervEXT = trace_glGetVariantIntegervEXT;
  tbl.glGetVariantPointervEXT = trace_glGetVariantPointervEXT;
  tbl.glInsertComponentEXT = trace_glInsertComponentEXT;
  tbl.glIsVariantEnabledEXT = trace_glIsVariantEnabledEXT;
  tbl.glSetInvariantEXT = trace_glSetInvariantEXT;
  tbl.glSetLocalConstantEXT = trace_glSetLocalConstantEXT;
  tbl.glShaderOp1EXT = trace_glShaderOp1EXT;
  tbl.glShaderOp2EXT = trace_glShaderOp2EXT;
  tbl.glShaderOp3EXT = trace_glShaderOp3EXT;
  tbl.glSwizzleEXT = trace_glSwizzleEXT;
  tbl.glVariantPointerEXT = trace_glVariantPointerEXT;
  tbl.glVariantbvEXT = trace_glVariantbvEXT;
  tbl.glVariantdvEXT = trace_glVariantdvEXT;
  tbl.glVariantfvEXT = trace_glVariantfvEXT;
  tbl.glVariantivEXT = trace_glVariantivEXT;
  tbl.glVariantsvEXT = trace_glVariantsvEXT;
  tbl.glVariantubvEXT = trace_glVariantubvEXT;
  tbl.glVariantuivEXT = trace_glVariantuivEXT;
  tbl.glVariantusvEXT = trace_glVariantusvEXT;
  tbl.glWriteMaskEXT = trace_glWriteMaskEXT;

  // GL_EXT_vertex_weighting

  tbl.glVertexWeightPointerEXT = trace_glVertexWeightPointerEXT;
  tbl.glVertexWeightfEXT = trace_glVertexWeightfEXT;
  tbl.glVertexWeightfvEXT = trace_glVertexWeightfvEXT;

  // GL_EXT_x11_sync_object

  tbl.glImportSyncEXT = trace_glImportSyncEXT;

  // GL_GREMEDY_frame_terminator

  tbl.glFrameTerminatorGREMEDY = trace_glFrameTerminatorGREMEDY;

  // GL_GREMEDY_string_marker

  tbl.glStringMarkerGREMEDY = trace_glStringMarkerGREMEDY;

  // GL_HP_image_transform

  tbl.glGetImageTransformParameterfvHP = trace_glGetImageTransformParameterfvHP;
  tbl.glGetImageTransformParameterivHP = trace_glGetImageTransformParameterivHP;
  tbl.glImageTransformParameterfHP = trace_glImageTransformParameterfHP;
  tbl.glImageTransformParameterfvHP = trace_glImageTransformParameterfvHP;
  tbl.glImageTransformParameteriHP = trace_glImageTransformParameteriHP;
  tbl.glImageTransformParameterivHP = trace_glImageTransformParameterivHP;

  // GL_IBM_multimode_draw_arrays

  tbl.glMultiModeDrawArraysIBM = trace_glMultiModeDrawArraysIBM;
  tbl.glMultiModeDrawElementsIBM = trace_glMultiModeDrawElementsIBM;

  // GL_IBM_vertex_array_lists

  tbl.glColorPointerListIBM = trace_glColorPointerListIBM;
  tbl.glEdgeFlagPointerListIBM = trace_glEdgeFlagPointerListIBM;
  tbl.glFogCoordPointerListIBM = trace_glFogCoordPointerListIBM;
  tbl.glIndexPointerListIBM = trace_glIndexPointerListIBM;
  tbl.glNormalPointerListIBM = trace_glNormalPointerListIBM;
  tbl.glSecondaryColorPointerListIBM = trace_glSecondaryColorPointerListIBM;
  tbl.glTexCoordPointerListIBM = trace_glTexCoordPointerListIBM;
  tbl.glVertexPointerListIBM = trace_glVertexPointerListIBM;

  // GL_IMG_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleIMG = trace_glFramebufferTexture2DMultisampleIMG;
  tbl.glRenderbufferStorageMultisampleIMG = trace_glRenderbufferStorageMultisampleIMG;

  // GL_INGR_blend_func_separate

  tbl.glBlendFuncSeparateINGR = trace_glBlendFuncSeparateINGR;

  // GL_INTEL_parallel_arrays

  tbl.glColorPointervINTEL = trace_glColorPointervINTEL;
  tbl.glNormalPointervINTEL = trace_glNormalPointervINTEL;
  tbl.glTexCoordPointervINTEL = trace_glTexCoordPointervINTEL;
  tbl.glVertexPointervINTEL = trace_glVertexPointervINTEL;

  // GL_KHR_debug

  tbl.glDebugMessageCallback = trace_glDebugMessageCallback;
  tbl.glDebugMessageControl = trace_glDebugMessageControl;
  tbl.glDebugMessageInsert = trace_glDebugMessageInsert;
  tbl.glGetDebugMessageLog = trace_glGetDebugMessageLog;
  tbl.glGetObjectLabel = trace_glGetObjectLabel;
  tbl.glGetObjectPtrLabel = trace_glGetObjectPtrLabel;
  tbl.glObjectLabel = trace_glObjectLabel;
  tbl.glObjectPtrLabel = trace_glObjectPtrLabel;
  tbl.glPopDebugGroup = trace_glPopDebugGroup;
  tbl.glPushDebugGroup = trace_glPushDebugGroup;

  // GL_KTX_buffer_region

  tbl.glBufferRegionEnabled = trace_glBufferRegionEnabled;
  tbl.glDeleteBufferRegion = trace_glDeleteBufferRegion;
  tbl.glDrawBufferRegion = trace_glDrawBufferRegion;
  tbl.glNewBufferRegion = trace_glNewBufferRegion;
  tbl.glReadBufferRegion = trace_glReadBufferRegion;

  // GL_MESA_resize_buffers

  tbl.glResizeBuffersMESA = trace_glResizeBuffersMESA;

  // GL_MESA_window_pos

  tbl.glWindowPos2dMESA = trace_glWindowPos2dMESA;
  tbl.glWindowPos2dvMESA = trace_glWindowPos2dvMESA;
  tbl.glWindowPos2fMESA = trace_glWindowPos2fMESA;
  tbl.glWindowPos2fvMESA = trace_glWindowPos2fvMESA;
  tbl.glWindowPos2iMESA = trace_glWindowPos2iMESA;
  tbl.glWindowPos2ivMESA = trace_glWindowPos2ivMESA;
  tbl.glWindowPos2sMESA = trace_glWindowPos2sMESA;
  tbl.glWindowPos2svMESA = trace_glWindowPos2svMESA;
  tbl.glWindowPos3dMESA = trace_glWindowPos3dMESA;
  tbl.glWindowPos3dvMESA = trace_glWindowPos3dvMESA;
  tbl.glWindowPos3fMESA = trace_glWindowPos3fMESA;
  tbl.glWindowPos3fvMESA = trace_glWindowPos3fvMESA;
  tbl.glWindowPos3iMESA = trace_glWindowPos3iMESA;
  tbl.glWindowPos3ivMESA = trace_glWindowPos3ivMESA;
  tbl.glWindowPos3sMESA = trace_glWindowPos3sMESA;
  tbl.glWindowPos3svMESA = trace_glWindowPos3svMESA;
  tbl.glWindowPos4dMESA = trace_glWindowPos4dMESA;
  tbl.glWindowPos4dvMESA = trace_glWindowPos4dvMESA;
  tbl.glWindowPos4fMESA = trace_glWindowPos4fMESA;
  tbl.glWindowPos4fvMESA = trace_glWindowPos4fvMESA;
  tbl.glWindowPos4iMESA = trace_glWindowPos4iMESA;
  tbl.glWindowPos4ivMESA = trace_glWindowPos4ivMESA;
  tbl.glWindowPos4sMESA = trace_glWindowPos4sMESA;
  tbl.glWindowPos4svMESA = trace_glWindowPos4svMESA;

  // GL_NV_conditional_render

  tbl.glBeginConditionalRenderNV = trace_glBeginConditionalRenderNV;
  tbl.glEndConditionalRenderNV = trace_glEndConditionalRenderNV;

  // GL_NV_copy_image

  tbl.glCopyImageSubDataNV = trace_glCopyImageSubDataNV;

  // GL_NV_coverage_sample

  tbl.glCoverageMaskNV = trace_glCoverageMaskNV;
  tbl.glCoverageOperationNV = trace_glCoverageOperationNV;

  // GL_NV_depth_buffer_float

  tbl.glClearDepthdNV = trace_glClearDepthdNV;
  tbl.glDepthBoundsdNV = trace_glDepthBoundsdNV;
  tbl.glDepthRangedNV = trace_glDepthRangedNV;

  // GL_NV_draw_buffers

  tbl.glDrawBuffersNV = trace_glDrawBuffersNV;

  // GL_NV_evaluators

  tbl.glEvalMapsNV = trace_glEvalMapsNV;
  tbl.glGetMapAttribParameterfvNV = trace_glGetMapAttribParameterfvNV;
  tbl.glGetMapAttribParameterivNV = trace_glGetMapAttribParameterivNV;
  tbl.glGetMapControlPointsNV = trace_glGetMapControlPointsNV;
  tbl.glGetMapParameterfvNV = trace_glGetMapParameterfvNV;
  tbl.glGetMapParameterivNV = trace_glGetMapParameterivNV;
  tbl.glMapControlPointsNV = trace_glMapControlPointsNV;
  tbl.glMapParameterfvNV = trace_glMapParameterfvNV;
  tbl.glMapParameterivNV = trace_glMapParameterivNV;

  // GL_NV_explicit_multisample

  tbl.glGetMultisamplefvNV = trace_glGetMultisamplefvNV;
  tbl.glSampleMaskIndexedNV = trace_glSampleMaskIndexedNV;
  tbl.glTexRenderbufferNV = trace_glTexRenderbufferNV;

  // GL_NV_fence

  tbl.glDeleteFencesNV = trace_glDeleteFencesNV;
  tbl.glFinishFenceNV = trace_glFinishFenceNV;
  tbl.glGenFencesNV = trace_glGenFencesNV;
  tbl.glGetFenceivNV = trace_glGetFenceivNV;
  tbl.glIsFenceNV = trace_glIsFenceNV;
  tbl.glSetFenceNV = trace_glSetFenceNV;
  tbl.glTestFenceNV = trace_glTestFenceNV;

  // GL_NV_fragment_program

  tbl.glGetProgramNamedParameterdvNV = trace_glGetProgramNamedParameterdvNV;
  tbl.glGetProgramNamedParameterfvNV = trace_glGetProgramNamedParameterfvNV;
  tbl.glProgramNamedParameter4dNV = trace_glProgramNamedParameter4dNV;
  tbl.glProgramNamedParameter4dvNV = trace_glProgramNamedParameter4dvNV;
  tbl.glProgramNamedParameter4fNV = trace_glProgramNamedParameter4fNV;
  tbl.glProgramNamedParameter4fvNV = trace_glProgramNamedParameter4fvNV;

  // GL_NV_framebuffer_multisample_coverage

  tbl.glRenderbufferStorageMultisampleCoverageNV = trace_glRenderbufferStorageMultisampleCoverageNV;

  // GL_NV_geometry_program4

  tbl.glProgramVertexLimitNV = trace_glProgramVertexLimitNV;

  // GL_NV_gpu_program4

  tbl.glGetProgramEnvParameterIivNV = trace_glGetProgramEnvParameterIivNV;
  tbl.glGetProgramEnvParameterIuivNV = trace_glGetProgramEnvParameterIuivNV;
  tbl.glGetProgramLocalParameterIivNV = trace_glGetProgramLocalParameterIivNV;
  tbl.glGetProgramLocalParameterIuivNV = trace_glGetProgramLocalParameterIuivNV;
  tbl.glProgramEnvParameterI4iNV = trace_glProgramEnvParameterI4iNV;
  tbl.glProgramEnvParameterI4ivNV = trace_glProgramEnvParameterI4ivNV;
  tbl.glProgramEnvParameterI4uiNV = trace_glProgramEnvParameterI4uiNV;
  tbl.glProgramEnvParameterI4uivNV = trace_glProgramEnvParameterI4uivNV;
  tbl.glProgramEnvParametersI4ivNV = trace_glProgramEnvParametersI4ivNV;
  tbl.glProgramEnvParametersI4uivNV = trace_glProgramEnvParametersI4uivNV;
  tbl.glProgramLocalParameterI4iNV = trace_glProgramLocalParameterI4iNV;
  tbl.glProgramLocalParameterI4ivNV = trace_glProgramLocalParameterI4ivNV;
  tbl.glProgramLocalParameterI4uiNV = trace_glProgramLocalParameterI4uiNV;
  tbl.glProgramLocalParameterI4uivNV = trace_glProgramLocalParameterI4uivNV;
  tbl.glProgramLocalParametersI4ivNV = trace_glProgramLocalParametersI4ivNV;
  tbl.glProgramLocalParametersI4uivNV = trace_glProgramLocalParametersI4uivNV;

  // GL_NV_gpu_shader5

  tbl.glGetUniformi64vNV = trace_glGetUniformi64vNV;
  tbl.glProgramUniform1i64NV = trace_glProgramUniform1i64NV;
  tbl.glProgramUniform1i64vNV = trace_glProgramUniform1i64vNV;
  tbl.glProgramUniform1ui64NV = trace_glProgramUniform1ui64NV;
  tbl.glProgramUniform1ui64vNV = trace_glProgramUniform1ui64vNV;
  tbl.glProgramUniform2i64NV = trace_glProgramUniform2i64NV;
  tbl.glProgramUniform2i64vNV = trace_glProgramUniform2i64vNV;
  tbl.glProgramUniform2ui64NV = trace_glProgramUniform2ui64NV;
  tbl.glProgramUniform2ui64vNV = trace_glProgramUniform2ui64vNV;
  tbl.glProgramUniform3i64NV = trace_glProgramUniform3i64NV;
  tbl.glProgramUniform3i64vNV = trace_glProgramUniform3i64vNV;
  tbl.glProgramUniform3ui64NV = trace_glProgramUniform3ui64NV;
  tbl.glProgramUniform3ui64vNV = trace_glProgramUniform3ui64vNV;
  tbl.glProgramUniform4i64NV = trace_glProgramUniform4i64NV;
  tbl.glProgramUniform4i64vNV = trace_glProgramUniform4i64vNV;
  tbl.glProgramUniform4ui64NV = trace_glProgramUniform4ui64NV;
  tbl.glProgramUniform4ui64vNV = trace_glProgramUniform4ui64vNV;
  tbl.glUniform1i64NV = trace_glUniform1i64NV;
  tbl.glUniform1i64vNV = trace_glUniform1i64vNV;
  tbl.glUniform1ui64NV = trace_glUniform1ui64NV;
  tbl.glUniform1ui64vNV = trace_glUniform1ui64vNV;
  tbl.glUniform2i64NV = trace_glUniform2i64NV;
  tbl.glUniform2i64vNV = trace_glUniform2i64vNV;
  tbl.glUniform2ui64NV = trace_glUniform2ui64NV;
  tbl.glUniform2ui64vNV = trace_glUniform2ui64vNV;
  tbl.glUniform3i64NV = trace_glUniform3i64NV;
  tbl.glUniform3i64vNV = trace_glUniform3i64vNV;
  tbl.glUniform3ui64NV = trace_glUniform3ui64NV;
  tbl.glUniform3ui64vNV = trace_glUniform3ui64vNV;
  tbl.glUniform4i64NV = trace_glUniform4i64NV;
  tbl.glUniform4i64vNV = trace_glUniform4i64vNV;
  tbl.glUniform4ui64NV = trace_glUniform4ui64NV;
  tbl.glUniform4ui64vNV = trace_glUniform4ui64vNV;

  // GL_NV_half_float

  tbl.glColor3hNV = trace_glColor3hNV;
  tbl.glColor3hvNV = trace_glColor3hvNV;
  tbl.glColor4hNV = trace_glColor4hNV;
  tbl.glColor4hvNV = trace_glColor4hvNV;
  tbl.glFogCoordhNV = trace_glFogCoordhNV;
  tbl.glFogCoordhvNV = trace_glFogCoordhvNV;
  tbl.glMultiTexCoord1hNV = trace_glMultiTexCoord1hNV;
  tbl.glMultiTexCoord1hvNV = trace_glMultiTexCoord1hvNV;
  tbl.glMultiTexCoord2hNV = trace_glMultiTexCoord2hNV;
  tbl.glMultiTexCoord2hvNV = trace_glMultiTexCoord2hvNV;
  tbl.glMultiTexCoord3hNV = trace_glMultiTexCoord3hNV;
  tbl.glMultiTexCoord3hvNV = trace_glMultiTexCoord3hvNV;
  tbl.glMultiTexCoord4hNV = trace_glMultiTexCoord4hNV;
  tbl.glMultiTexCoord4hvNV = trace_glMultiTexCoord4hvNV;
  tbl.glNormal3hNV = trace_glNormal3hNV;
  tbl.glNormal3hvNV = trace_glNormal3hvNV;
  tbl.glSecondaryColor3hNV = trace_glSecondaryColor3hNV;
  tbl.glSecondaryColor3hvNV = trace_glSecondaryColor3hvNV;
  tbl.glTexCoord1hNV = trace_glTexCoord1hNV;
  tbl.glTexCoord1hvNV = trace_glTexCoord1hvNV;
  tbl.glTexCoord2hNV = trace_glTexCoord2hNV;
  tbl.glTexCoord2hvNV = trace_glTexCoord2hvNV;
  tbl.glTexCoord3hNV = trace_glTexCoord3hNV;
  tbl.glTexCoord3hvNV = trace_glTexCoord3hvNV;
  tbl.glTexCoord4hNV = trace_glTexCoord4hNV;
  tbl.glTexCoord4hvNV = trace_glTexCoord4hvNV;
  tbl.glVertex2hNV = trace_glVertex2hNV;
  tbl.glVertex2hvNV = trace_glVertex2hvNV;
  tbl.glVertex3hNV = trace_glVertex3hNV;
  tbl.glVertex3hvNV = trace_glVertex3hvNV;
  tbl.glVertex4hNV = trace_glVertex4hNV;
  tbl.glVertex4hvNV = trace_glVertex4hvNV;
  tbl.glVertexAttrib1hNV = trace_glVertexAttrib1hNV;
  tbl.glVertexAttrib1hvNV = trace_glVertexAttrib1hvNV;
  tbl.glVertexAttrib2hNV = trace_glVertexAttrib2hNV;
  tbl.glVertexAttrib2hvNV = trace_glVertexAttrib2hvNV;
  tbl.glVertexAttrib3hNV = trace_glVertexAttrib3hNV;
  tbl.glVertexAttrib3hvNV = trace_glVertexAttrib3hvNV;
  tbl.glVertexAttrib4hNV = trace_glVertexAttrib4hNV;
  tbl.glVertexAttrib4hvNV = trace_glVertexAttrib4hvNV;
  tbl.glVertexAttribs1hvNV = trace_glVertexAttribs1hvNV;
  tbl.glVertexAttribs2hvNV = trace_glVertexAttribs2hvNV;
  tbl.glVertexAttribs3hvNV = trace_glVertexAttribs3hvNV;
  tbl.glVertexAttribs4hvNV = trace_glVertexAttribs4hvNV;
  tbl.glVertexWeighthNV = trace_glVertexWeighthNV;
  tbl.glVertexWeighthvNV = trace_glVertexWeighthvNV;

  // GL_NV_occlusion_query

  tbl.glBeginOcclusionQueryNV = trace_glBeginOcclusionQueryNV;
  tbl.glDeleteOcclusionQueriesNV = trace_glDeleteOcclusionQueriesNV;
  tbl.glEndOcclusionQueryNV = trace_glEndOcclusionQueryNV;
  tbl.glGenOcclusionQueriesNV = trace_glGenOcclusionQueriesNV;
  tbl.glGetOcclusionQueryivNV = trace_glGetOcclusionQueryivNV;
  tbl.glGetOcclusionQueryuivNV = trace_glGetOcclusionQueryuivNV;
  tbl.glIsOcclusionQueryNV = trace_glIsOcclusionQueryNV;

  // GL_NV_parameter_buffer_object

  tbl.glProgramBufferParametersIivNV = trace_glProgramBufferParametersIivNV;
  tbl.glProgramBufferParametersIuivNV = trace_glProgramBufferParametersIuivNV;
  tbl.glProgramBufferParametersfvNV = trace_glProgramBufferParametersfvNV;

  // GL_NV_path_rendering

  tbl.glCopyPathNV = trace_glCopyPathNV;
  tbl.glCoverFillPathInstancedNV = trace_glCoverFillPathInstancedNV;
  tbl.glCoverFillPathNV = trace_glCoverFillPathNV;
  tbl.glCoverStrokePathInstancedNV = trace_glCoverStrokePathInstancedNV;
  tbl.glCoverStrokePathNV = trace_glCoverStrokePathNV;
  tbl.glDeletePathsNV = trace_glDeletePathsNV;
  tbl.glGenPathsNV = trace_glGenPathsNV;
  tbl.glGetPathColorGenfvNV = trace_glGetPathColorGenfvNV;
  tbl.glGetPathColorGenivNV = trace_glGetPathColorGenivNV;
  tbl.glGetPathCommandsNV = trace_glGetPathCommandsNV;
  tbl.glGetPathCoordsNV = trace_glGetPathCoordsNV;
  tbl.glGetPathDashArrayNV = trace_glGetPathDashArrayNV;
  tbl.glGetPathLengthNV = trace_glGetPathLengthNV;
  tbl.glGetPathMetricRangeNV = trace_glGetPathMetricRangeNV;
  tbl.glGetPathMetricsNV = trace_glGetPathMetricsNV;
  tbl.glGetPathParameterfvNV = trace_glGetPathParameterfvNV;
  tbl.glGetPathParameterivNV = trace_glGetPathParameterivNV;
  tbl.glGetPathSpacingNV = trace_glGetPathSpacingNV;
  tbl.glGetPathTexGenfvNV = trace_glGetPathTexGenfvNV;
  tbl.glGetPathTexGenivNV = trace_glGetPathTexGenivNV;
  tbl.glInterpolatePathsNV = trace_glInterpolatePathsNV;
  tbl.glIsPathNV = trace_glIsPathNV;
  tbl.glIsPointInFillPathNV = trace_glIsPointInFillPathNV;
  tbl.glIsPointInStrokePathNV = trace_glIsPointInStrokePathNV;
  tbl.glPathColorGenNV = trace_glPathColorGenNV;
  tbl.glPathCommandsNV = trace_glPathCommandsNV;
  tbl.glPathCoordsNV = trace_glPathCoordsNV;
  tbl.glPathCoverDepthFuncNV = trace_glPathCoverDepthFuncNV;
  tbl.glPathDashArrayNV = trace_glPathDashArrayNV;
  tbl.glPathFogGenNV = trace_glPathFogGenNV;
  tbl.glPathGlyphRangeNV = trace_glPathGlyphRangeNV;
  tbl.glPathGlyphsNV = trace_glPathGlyphsNV;
  tbl.glPathParameterfNV = trace_glPathParameterfNV;
  tbl.glPathParameterfvNV = trace_glPathParameterfvNV;
  tbl.glPathParameteriNV = trace_glPathParameteriNV;
  tbl.glPathParameterivNV = trace_glPathParameterivNV;
  tbl.glPathStencilDepthOffsetNV = trace_glPathStencilDepthOffsetNV;
  tbl.glPathStencilFuncNV = trace_glPathStencilFuncNV;
  tbl.glPathStringNV = trace_glPathStringNV;
  tbl.glPathSubCommandsNV = trace_glPathSubCommandsNV;
  tbl.glPathSubCoordsNV = trace_glPathSubCoordsNV;
  tbl.glPathTexGenNV = trace_glPathTexGenNV;
  tbl.glPointAlongPathNV = trace_glPointAlongPathNV;
  tbl.glStencilFillPathInstancedNV = trace_glStencilFillPathInstancedNV;
  tbl.glStencilFillPathNV = trace_glStencilFillPathNV;
  tbl.glStencilStrokePathInstancedNV = trace_glStencilStrokePathInstancedNV;
  tbl.glStencilStrokePathNV = trace_glStencilStrokePathNV;
  tbl.glTransformPathNV = trace_glTransformPathNV;
  tbl.glWeightPathsNV = trace_glWeightPathsNV;

  // GL_NV_pixel_data_range

  tbl.glFlushPixelDataRangeNV = trace_glFlushPixelDataRangeNV;
  tbl.glPixelDataRangeNV = trace_glPixelDataRangeNV;

  // GL_NV_point_sprite

  tbl.glPointParameteriNV = trace_glPointParameteriNV;
  tbl.glPointParameterivNV = trace_glPointParameterivNV;

  // GL_NV_present_video

  tbl.glGetVideoi64vNV = trace_glGetVideoi64vNV;
  tbl.glGetVideoivNV = trace_glGetVideoivNV;
  tbl.glGetVideoui64vNV = trace_glGetVideoui64vNV;
  tbl.glGetVideouivNV = trace_glGetVideouivNV;
  tbl.glPresentFrameDualFillNV = trace_glPresentFrameDualFillNV;
  tbl.glPresentFrameKeyedNV = trace_glPresentFrameKeyedNV;

  // GL_NV_primitive_restart

  tbl.glPrimitiveRestartIndexNV = trace_glPrimitiveRestartIndexNV;
  tbl.glPrimitiveRestartNV = trace_glPrimitiveRestartNV;

  // GL_NV_read_buffer

  tbl.glReadBufferNV = trace_glReadBufferNV;

  // GL_NV_register_combiners

  tbl.glCombinerInputNV = trace_glCombinerInputNV;
  tbl.glCombinerOutputNV = trace_glCombinerOutputNV;
  tbl.glCombinerParameterfNV = trace_glCombinerParameterfNV;
  tbl.glCombinerParameterfvNV = trace_glCombinerParameterfvNV;
  tbl.glCombinerParameteriNV = trace_glCombinerParameteriNV;
  tbl.glCombinerParameterivNV = trace_glCombinerParameterivNV;
  tbl.glFinalCombinerInputNV = trace_glFinalCombinerInputNV;
  tbl.glGetCombinerInputParameterfvNV = trace_glGetCombinerInputParameterfvNV;
  tbl.glGetCombinerInputParameterivNV = trace_glGetCombinerInputParameterivNV;
  tbl.glGetCombinerOutputParameterfvNV = trace_glGetCombinerOutputParameterfvNV;
  tbl.glGetCombinerOutputParameterivNV = trace_glGetCombinerOutputParameterivNV;
  tbl.glGetFinalCombinerInputParameterfvNV = trace_glGetFinalCombinerInputParameterfvNV;
  tbl.glGetFinalCombinerInputParameterivNV = trace_glGetFinalCombinerInputParameterivNV;

  // GL_NV_register_combiners2

  tbl.glCombinerStageParameterfvNV = trace_glCombinerStageParameterfvNV;
  tbl.glGetCombinerStageParameterfvNV = trace_glGetCombinerStageParameterfvNV;

  // GL_NV_shader_buffer_load

  tbl.glGetBufferParameterui64vNV = trace_glGetBufferParameterui64vNV;
  tbl.glGetIntegerui64vNV = trace_glGetIntegerui64vNV;
  tbl.glGetNamedBufferParameterui64vNV = trace_glGetNamedBufferParameterui64vNV;
  tbl.glGetUniformui64vNV = trace_glGetUniformui64vNV;
  tbl.glIsBufferResidentNV = trace_glIsBufferResidentNV;
  tbl.glIsNamedBufferResidentNV = trace_glIsNamedBufferResidentNV;
  tbl.glMakeBufferNonResidentNV = trace_glMakeBufferNonResidentNV;
  tbl.glMakeBufferResidentNV = trace_glMakeBufferResidentNV;
  tbl.glMakeNamedBufferNonResidentNV = trace_glMakeNamedBufferNonResidentNV;
  tbl.glMakeNamedBufferResidentNV = trace_glMakeNamedBufferResidentNV;
  tbl.glProgramUniformui64NV = trace_glProgramUniformui64NV;
  tbl.glProgramUniformui64vNV = trace_glProgramUniformui64vNV;
  tbl.glUniformui64NV = trace_glUniformui64NV;
  tbl.glUniformui64vNV = trace_glUniformui64vNV;

  // GL_NV_texture_barrier

  tbl.glTextureBarrierNV = trace_glTextureBarrierNV;

  // GL_NV_texture_multisample

  tbl.glTexImage2DMultisampleCoverageNV = trace_glTexImage2DMultisampleCoverageNV;
  tbl.glTexImage3DMultisampleCoverageNV = trace_glTexImage3DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleCoverageNV = trace_glTextureImage2DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleNV = trace_glTextureImage2DMultisampleNV;
  tbl.glTextureImage3DMultisampleCoverageNV = trace_glTextureImage3DMultisampleCoverageNV;
  tbl.glTextureImage3DMultisampleNV = trace_glTextureImage3DMultisampleNV;

  // GL_NV_transform_feedback

  tbl.glActiveVaryingNV = trace_glActiveVaryingNV;
  tbl.glBeginTransformFeedbackNV = trace_glBeginTransformFeedbackNV;
  tbl.glBindBufferBaseNV = trace_glBindBufferBaseNV;
  tbl.glBindBufferOffsetNV = trace_glBindBufferOffsetNV;
  tbl.glBindBufferRangeNV = trace_glBindBufferRangeNV;
  tbl.glEndTransformFeedbackNV = trace_glEndTransformFeedbackNV;
  tbl.glGetActiveVaryingNV = trace_glGetActiveVaryingNV;
  tbl.glGetTransformFeedbackVaryingNV = trace_glGetTransformFeedbackVaryingNV;
  tbl.glGetVaryingLocationNV = trace_glGetVaryingLocationNV;
  tbl.glTransformFeedbackAttribsNV = trace_glTransformFeedbackAttribsNV;
  tbl.glTransformFeedbackVaryingsNV = trace_glTransformFeedbackVaryingsNV;

  // GL_NV_transform_feedback2

  tbl.glBindTransformFeedbackNV = trace_glBindTransformFeedbackNV;
  tbl.glDeleteTransformFeedbacksNV = trace_glDeleteTransformFeedbacksNV;
  tbl.glDrawTransformFeedbackNV = trace_glDrawTransformFeedbackNV;
  tbl.glGenTransformFeedbacksNV = trace_glGenTransformFeedbacksNV;
  tbl.glIsTransformFeedbackNV = trace_glIsTransformFeedbackNV;
  tbl.glPauseTransformFeedbackNV = trace_glPauseTransformFeedbackNV;
  tbl.glResumeTransformFeedbackNV = trace_glResumeTransformFeedbackNV;

  // GL_NV_vertex_array_range

  tbl.glFlushVertexArrayRangeNV = trace_glFlushVertexArrayRangeNV;
  tbl.glVertexArrayRangeNV = trace_glVertexArrayRangeNV;

  // GL_NV_vertex_attrib_integer_64bit

  tbl.glGetVertexAttribLi64vNV = trace_glGetVertexAttribLi64vNV;
  tbl.glGetVertexAttribLui64vNV = trace_glGetVertexAttribLui64vNV;
  tbl.glVertexAttribL1i64NV = trace_glVertexAttribL1i64NV;
  tbl.glVertexAttribL1i64vNV = trace_glVertexAttribL1i64vNV;
  tbl.glVertexAttribL1ui64NV = trace_glVertexAttribL1ui64NV;
  tbl.glVertexAttribL1ui64vNV = trace_glVertexAttribL1ui64vNV;
  tbl.glVertexAttribL2i64NV = trace_glVertexAttribL2i64NV;
  tbl.glVertexAttribL2i64vNV = trace_glVertexAttribL2i64vNV;
  tbl.glVertexAttribL2ui64NV = trace_glVertexAttribL2ui64NV;
  tbl.glVertexAttribL2ui64vNV = trace_glVertexAttribL2ui64vNV;
  tbl.glVertexAttribL3i64NV = trace_glVertexAttribL3i64NV;
  tbl.glVertexAttribL3i64vNV = trace_glVertexAttribL3i64vNV;
  tbl.glVertexAttribL3ui64NV = trace_glVertexAttribL3ui64NV;
  tbl.glVertexAttribL3ui64vNV = trace_glVertexAttribL3ui64vNV;
  tbl.glVertexAttribL4i64NV = trace_glVertexAttribL4i64NV;
  tbl.glVertexAttribL4i64vNV = trace_glVertexAttribL4i64vNV;
  tbl.glVertexAttribL4ui64NV = trace_glVertexAttribL4ui64NV;
  tbl.glVertexAttribL4ui64vNV = trace_glVertexAttribL4ui64vNV;
  tbl.glVertexAttribLFormatNV = trace_glVertexAttribLFormatNV;

  // GL_NV_vertex_buffer_unified_memory

  tbl.glBufferAddressRangeNV = trace_glBufferAddressRangeNV;
  tbl.glColorFormatNV = trace_glColorFormatNV;
  tbl.glEdgeFlagFormatNV = trace_glEdgeFlagFormatNV;
  tbl.glFogCoordFormatNV = trace_glFogCoordFormatNV;
  tbl.glGetIntegerui64i_vNV = trace_glGetIntegerui64i_vNV;
  tbl.glIndexFormatNV = trace_glIndexFormatNV;
  tbl.glNormalFormatNV = trace_glNormalFormatNV;
  tbl.glSecondaryColorFormatNV = trace_glSecondaryColorFormatNV;
  tbl.glTexCoordFormatNV = trace_glTexCoordFormatNV;
  tbl.glVertexAttribFormatNV = trace_glVertexAttribFormatNV;
  tbl.glVertexAttribIFormatNV = trace_glVertexAttribIFormatNV;
  tbl.glVertexFormatNV = trace_glVertexFormatNV;

  // GL_NV_vertex_program

  tbl.glAreProgramsResidentNV = trace_glAreProgramsResidentNV;
  tbl.glBindProgramNV = trace_glBindProgramNV;
  tbl.glDeleteProgramsNV = trace_glDeleteProgramsNV;
  tbl.glExecuteProgramNV = trace_glExecuteProgramNV;
  tbl.glGenProgramsNV = trace_glGenProgramsNV;
  tbl.glGetProgramParameterdvNV = trace_glGetProgramParameterdvNV;
  tbl.glGetProgramParameterfvNV = trace_glGetProgramParameterfvNV;
  tbl.glGetProgramStringNV = trace_glGetProgramStringNV;
  tbl.glGetProgramivNV = trace_glGetProgramivNV;
  tbl.glGetTrackMatrixivNV = trace_glGetTrackMatrixivNV;
  tbl.glGetVertexAttribPointervNV = trace_glGetVertexAttribPointervNV;
  tbl.glGetVertexAttribdvNV = trace_glGetVertexAttribdvNV;
  tbl.glGetVertexAttribfvNV = trace_glGetVertexAttribfvNV;
  tbl.glGetVertexAttribivNV = trace_glGetVertexAttribivNV;
  tbl.glIsProgramNV = trace_glIsProgramNV;
  tbl.glLoadProgramNV = trace_glLoadProgramNV;
  tbl.glProgramParameter4dNV = trace_glProgramParameter4dNV;
  tbl.glProgramParameter4dvNV = trace_glProgramParameter4dvNV;
  tbl.glProgramParameter4fNV = trace_glProgramParameter4fNV;
  tbl.glProgramParameter4fvNV = trace_glProgramParameter4fvNV;
  tbl.glProgramParameters4dvNV = trace_glProgramParameters4dvNV;
  tbl.glProgramParameters4fvNV = trace_glProgramParameters4fvNV;
  tbl.glRequestResidentProgramsNV = trace_glRequestResidentProgramsNV;
  tbl.glTrackMatrixNV = trace_glTrackMatrixNV;
  tbl.glVertexAttrib1dNV = trace_glVertexAttrib1dNV;
  tbl.glVertexAttrib1dvNV = trace_glVertexAttrib1dvNV;
  tbl.glVertexAttrib1fNV = trace_glVertexAttrib1fNV;
  tbl.glVertexAttrib1fvNV = trace_glVertexAttrib1fvNV;
  tbl.glVertexAttrib1sNV = trace_glVertexAttrib1sNV;
  tbl.glVertexAttrib1svNV = trace_glVertexAttrib1svNV;
  tbl.glVertexAttrib2dNV = trace_glVertexAttrib2dNV;
  tbl.glVertexAttrib2dvNV = trace_glVertexAttrib2dvNV;
  tbl.glVertexAttrib2fNV = trace_glVertexAttrib2fNV;
  tbl.glVertexAttrib2fvNV = trace_glVertexAttrib2fvNV;
  tbl.glVertexAttrib2sNV = trace_glVertexAttrib2sNV;
  tbl.glVertexAttrib2svNV = trace_glVertexAttrib2svNV;
  tbl.glVertexAttrib3dNV = trace_glVertexAttrib3dNV;
  tbl.glVertexAttrib3dvNV = trace_glVertexAttrib3dvNV;
  tbl.glVertexAttrib3fNV = trace_glVertexAttrib3fNV;
  tbl.glVertexAttrib3fvNV = trace_glVertexAttrib3fvNV;
  tbl.glVertexAttrib3sNV = trace_glVertexAttrib3sNV;
  tbl.glVertexAttrib3svNV = trace_glVertexAttrib3svNV;
  tbl.glVertexAttrib4dNV = trace_glVertexAttrib4dNV;
  tbl.glVertexAttrib4dvNV = trace_glVertexAttrib4dvNV;
  tbl.glVertexAttrib4fNV = trace_glVertexAttrib4fNV;
  tbl.glVertexAttrib4fvNV = trace_glVertexAttrib4fvNV;
  tbl.glVertexAttrib4sNV = trace_glVertexAttrib4sNV;
  tbl.glVertexAttrib4svNV = trace_glVertexAttrib4svNV;
  tbl.glVertexAttrib4ubNV = trace_glVertexAttrib4ubNV;
  tbl.glVertexAttrib4ubvNV = trace_glVertexAttrib4ubvNV;
  tbl.glVertexAttribPointerNV = trace_glVertexAttribPointerNV;
  tbl.glVertexAttribs1dvNV = trace_glVertexAttribs1dvNV;
  tbl.glVertexAttribs1fvNV = trace_glVertexAttribs1fvNV;
  tbl.glVertexAttribs1svNV = trace_glVertexAttribs1svNV;
  tbl.glVertexAttribs2dvNV = trace_glVertexAttribs2dvNV;
  tbl.glVertexAttribs2fvNV = trace_glVertexAttribs2fvNV;
  tbl.glVertexAttribs2svNV = trace_glVertexAttribs2svNV;
  tbl.glVertexAttribs3dvNV = trace_glVertexAttribs3dvNV;
  tbl.glVertexAttribs3fvNV = trace_glVertexAttribs3fvNV;
  tbl.glVertexAttribs3svNV = trace_glVertexAttribs3svNV;
  tbl.glVertexAttribs4dvNV = trace_glVertexAttribs4dvNV;
  tbl.glVertexAttribs4fvNV = trace_glVertexAttribs4fvNV;
  tbl.glVertexAttribs4svNV = trace_glVertexAttribs4svNV;
  tbl.glVertexAttribs4ubvNV = trace_glVertexAttribs4ubvNV;

  // GL_NV_video_capture

  tbl.glBeginVideoCaptureNV = trace_glBeginVideoCaptureNV;
  tbl.glBindVideoCaptureStreamBufferNV = trace_glBindVideoCaptureStreamBufferNV;
  tbl.glBindVideoCaptureStreamTextureNV = trace_glBindVideoCaptureStreamTextureNV;
  tbl.glEndVideoCaptureNV = trace_glEndVideoCaptureNV;
  tbl.glGetVideoCaptureStreamdvNV = trace_glGetVideoCaptureStreamdvNV;
  tbl.glGetVideoCaptureStreamfvNV = trace_glGetVideoCaptureStreamfvNV;
  tbl.glGetVideoCaptureStreamivNV = trace_glGetVideoCaptureStreamivNV;
  tbl.glGetVideoCaptureivNV = trace_glGetVideoCaptureivNV;
  tbl.glVideoCaptureNV = trace_glVideoCaptureNV;
  tbl.glVideoCaptureStreamParameterdvNV = trace_glVideoCaptureStreamParameterdvNV;
  tbl.glVideoCaptureStreamParameterfvNV = trace_glVideoCaptureStreamParameterfvNV;
  tbl.glVideoCaptureStreamParameterivNV = trace_glVideoCaptureStreamParameterivNV;

  // GL_OES_blend_equation_separate

  tbl.glBlendEquationSeparateOES = trace_glBlendEquationSeparateOES;

  // GL_OES_blend_func_separate

  tbl.glBlendFuncSeparateOES = trace_glBlendFuncSeparateOES;

  // GL_OES_blend_subtract

  tbl.glBlendEquationOES = trace_glBlendEquationOES;

  // GL_OES_framebuffer_object

  tbl.glBindFramebufferOES = trace_glBindFramebufferOES;
  tbl.glBindRenderbufferOES = trace_glBindRenderbufferOES;
  tbl.glCheckFramebufferStatusOES = trace_glCheckFramebufferStatusOES;
  tbl.glDeleteFramebuffersOES = trace_glDeleteFramebuffersOES;
  tbl.glDeleteRenderbuffersOES = trace_glDeleteRenderbuffersOES;
  tbl.glFramebufferRenderbufferOES = trace_glFramebufferRenderbufferOES;
  tbl.glFramebufferTexture2DOES = trace_glFramebufferTexture2DOES;
  tbl.glGenFramebuffersOES = trace_glGenFramebuffersOES;
  tbl.glGenRenderbuffersOES = trace_glGenRenderbuffersOES;
  tbl.glGenerateMipmapOES = trace_glGenerateMipmapOES;
  tbl.glGetFramebufferAttachmentParameterivOES = trace_glGetFramebufferAttachmentParameterivOES;
  tbl.glGetRenderbufferParameterivOES = trace_glGetRenderbufferParameterivOES;
  tbl.glIsFramebufferOES = trace_glIsFramebufferOES;
  tbl.glIsRenderbufferOES = trace_glIsRenderbufferOES;
  tbl.glRenderbufferStorageOES = trace_glRenderbufferStorageOES;

  // GL_OES_get_program_binary

  tbl.glGetProgramBinaryOES = trace_glGetProgramBinaryOES;
  tbl.glProgramBinaryOES = trace_glProgramBinaryOES;

  // GL_OES_mapbuffer

  tbl.glGetBufferPointervOES = trace_glGetBufferPointervOES;
  tbl.glMapBufferOES = trace_glMapBufferOES;
  tbl.glUnmapBufferOES = trace_glUnmapBufferOES;

  // GL_OES_matrix_palette

  tbl.glCurrentPaletteMatrixOES = trace_glCurrentPaletteMatrixOES;

  // GL_OES_texture_3D

  tbl.glCompressedTexImage3DOES = trace_glCompressedTexImage3DOES;
  tbl.glCompressedTexSubImage3DOES = trace_glCompressedTexSubImage3DOES;
  tbl.glCopyTexSubImage3DOES = trace_glCopyTexSubImage3DOES;
  tbl.glFramebufferTexture3DOES = trace_glFramebufferTexture3DOES;
  tbl.glTexImage3DOES = trace_glTexImage3DOES;
  tbl.glTexSubImage3DOES = trace_glTexSubImage3DOES;

  // GL_OES_texture_cube_map

  tbl.glGetTexGenfvOES = trace_glGetTexGenfvOES;
  tbl.glGetTexGenivOES = trace_glGetTexGenivOES;
  tbl.glGetTexGenxvOES = trace_glGetTexGenxvOES;
  tbl.glTexGenfOES = trace_glTexGenfOES;
  tbl.glTexGenfvOES = trace_glTexGenfvOES;
  tbl.glTexGeniOES = trace_glTexGeniOES;
  tbl.glTexGenivOES = trace_glTexGenivOES;
  tbl.glTexGenxOES = trace_glTexGenxOES;
  tbl.glTexGenxvOES = trace_glTexGenxvOES;

  // GL_OES_vertex_array_object

  tbl.glBindVertexArrayOES = trace_glBindVertexArrayOES;
  tbl.glDeleteVertexArraysOES = trace_glDeleteVertexArraysOES;
  tbl.glGenVertexArraysOES = trace_glGenVertexArraysOES;
  tbl.glIsVertexArrayOES = trace_glIsVertexArrayOES;

  // GL_PGI_misc_hints

  tbl.glHintPGI = trace_glHintPGI;

  // GL_REGAL_ES1_0_compatibility

  tbl.glAlphaFuncx = trace_glAlphaFuncx;
  tbl.glClearColorx = trace_glClearColorx;
  tbl.glClearDepthx = trace_glClearDepthx;
  tbl.glColor4x = trace_glColor4x;
  tbl.glDepthRangex = trace_glDepthRangex;
  tbl.glFogx = trace_glFogx;
  tbl.glFogxv = trace_glFogxv;
  tbl.glFrustumf = trace_glFrustumf;
  tbl.glFrustumx = trace_glFrustumx;
  tbl.glLightModelx = trace_glLightModelx;
  tbl.glLightModelxv = trace_glLightModelxv;
  tbl.glLightx = trace_glLightx;
  tbl.glLightxv = trace_glLightxv;
  tbl.glLineWidthx = trace_glLineWidthx;
  tbl.glLoadMatrixx = trace_glLoadMatrixx;
  tbl.glMaterialx = trace_glMaterialx;
  tbl.glMaterialxv = trace_glMaterialxv;
  tbl.glMultMatrixx = trace_glMultMatrixx;
  tbl.glMultiTexCoord4x = trace_glMultiTexCoord4x;
  tbl.glNormal3x = trace_glNormal3x;
  tbl.glOrthof = trace_glOrthof;
  tbl.glOrthox = trace_glOrthox;
  tbl.glPointSizex = trace_glPointSizex;
  tbl.glPolygonOffsetx = trace_glPolygonOffsetx;
  tbl.glRotatex = trace_glRotatex;
  tbl.glSampleCoveragex = trace_glSampleCoveragex;
  tbl.glScalex = trace_glScalex;
  tbl.glTexEnvx = trace_glTexEnvx;
  tbl.glTexEnvxv = trace_glTexEnvxv;
  tbl.glTexParameterx = trace_glTexParameterx;
  tbl.glTranslatex = trace_glTranslatex;

  // GL_REGAL_ES1_1_compatibility

  tbl.glClipPlanef = trace_glClipPlanef;
  tbl.glClipPlanex = trace_glClipPlanex;
  tbl.glGetClipPlanef = trace_glGetClipPlanef;
  tbl.glGetClipPlanex = trace_glGetClipPlanex;
  tbl.glGetFixedv = trace_glGetFixedv;
  tbl.glGetLightxv = trace_glGetLightxv;
  tbl.glGetMaterialxv = trace_glGetMaterialxv;
  tbl.glGetTexEnvxv = trace_glGetTexEnvxv;
  tbl.glGetTexParameterxv = trace_glGetTexParameterxv;
  tbl.glPointParameterx = trace_glPointParameterx;
  tbl.glPointParameterxv = trace_glPointParameterxv;
  tbl.glPointSizePointerOES = trace_glPointSizePointerOES;
  tbl.glTexParameterxv = trace_glTexParameterxv;

  // GL_SGIS_detail_texture

  tbl.glDetailTexFuncSGIS = trace_glDetailTexFuncSGIS;
  tbl.glGetDetailTexFuncSGIS = trace_glGetDetailTexFuncSGIS;

  // GL_SGIS_fog_function

  tbl.glFogFuncSGIS = trace_glFogFuncSGIS;
  tbl.glGetFogFuncSGIS = trace_glGetFogFuncSGIS;

  // GL_SGIS_multisample

  tbl.glSampleMaskSGIS = trace_glSampleMaskSGIS;
  tbl.glSamplePatternSGIS = trace_glSamplePatternSGIS;

  // GL_SGIS_pixel_texture

  tbl.glGetPixelTexGenParameterfvSGIS = trace_glGetPixelTexGenParameterfvSGIS;
  tbl.glGetPixelTexGenParameterivSGIS = trace_glGetPixelTexGenParameterivSGIS;
  tbl.glPixelTexGenParameterfSGIS = trace_glPixelTexGenParameterfSGIS;
  tbl.glPixelTexGenParameterfvSGIS = trace_glPixelTexGenParameterfvSGIS;
  tbl.glPixelTexGenParameteriSGIS = trace_glPixelTexGenParameteriSGIS;
  tbl.glPixelTexGenParameterivSGIS = trace_glPixelTexGenParameterivSGIS;

  // GL_SGIS_point_parameters

  tbl.glPointParameterfSGIS = trace_glPointParameterfSGIS;
  tbl.glPointParameterfvSGIS = trace_glPointParameterfvSGIS;

  // GL_SGIS_sharpen_texture

  tbl.glGetSharpenTexFuncSGIS = trace_glGetSharpenTexFuncSGIS;
  tbl.glSharpenTexFuncSGIS = trace_glSharpenTexFuncSGIS;

  // GL_SGIS_texture4D

  tbl.glTexImage4DSGIS = trace_glTexImage4DSGIS;
  tbl.glTexSubImage4DSGIS = trace_glTexSubImage4DSGIS;

  // GL_SGIS_texture_color_mask

  tbl.glTextureColorMaskSGIS = trace_glTextureColorMaskSGIS;

  // GL_SGIS_texture_filter4

  tbl.glGetTexFilterFuncSGIS = trace_glGetTexFilterFuncSGIS;
  tbl.glTexFilterFuncSGIS = trace_glTexFilterFuncSGIS;

  // GL_SGIX_async

  tbl.glAsyncMarkerSGIX = trace_glAsyncMarkerSGIX;
  tbl.glDeleteAsyncMarkersSGIX = trace_glDeleteAsyncMarkersSGIX;
  tbl.glFinishAsyncSGIX = trace_glFinishAsyncSGIX;
  tbl.glGenAsyncMarkersSGIX = trace_glGenAsyncMarkersSGIX;
  tbl.glIsAsyncMarkerSGIX = trace_glIsAsyncMarkerSGIX;
  tbl.glPollAsyncSGIX = trace_glPollAsyncSGIX;

  // GL_SGIX_flush_raster

  tbl.glFlushRasterSGIX = trace_glFlushRasterSGIX;

  // GL_SGIX_fragment_lighting

  tbl.glFragmentColorMaterialSGIX = trace_glFragmentColorMaterialSGIX;
  tbl.glFragmentLightModelfSGIX = trace_glFragmentLightModelfSGIX;
  tbl.glFragmentLightModelfvSGIX = trace_glFragmentLightModelfvSGIX;
  tbl.glFragmentLightModeliSGIX = trace_glFragmentLightModeliSGIX;
  tbl.glFragmentLightModelivSGIX = trace_glFragmentLightModelivSGIX;
  tbl.glFragmentLightfSGIX = trace_glFragmentLightfSGIX;
  tbl.glFragmentLightfvSGIX = trace_glFragmentLightfvSGIX;
  tbl.glFragmentLightiSGIX = trace_glFragmentLightiSGIX;
  tbl.glFragmentLightivSGIX = trace_glFragmentLightivSGIX;
  tbl.glFragmentMaterialfSGIX = trace_glFragmentMaterialfSGIX;
  tbl.glFragmentMaterialfvSGIX = trace_glFragmentMaterialfvSGIX;
  tbl.glFragmentMaterialiSGIX = trace_glFragmentMaterialiSGIX;
  tbl.glFragmentMaterialivSGIX = trace_glFragmentMaterialivSGIX;
  tbl.glGetFragmentLightfvSGIX = trace_glGetFragmentLightfvSGIX;
  tbl.glGetFragmentLightivSGIX = trace_glGetFragmentLightivSGIX;
  tbl.glGetFragmentMaterialfvSGIX = trace_glGetFragmentMaterialfvSGIX;
  tbl.glGetFragmentMaterialivSGIX = trace_glGetFragmentMaterialivSGIX;
  tbl.glLightEnviSGIX = trace_glLightEnviSGIX;

  // GL_SGIX_framezoom

  tbl.glFrameZoomSGIX = trace_glFrameZoomSGIX;

  // GL_SGIX_igloo_interface

  tbl.glIglooInterfaceSGIX = trace_glIglooInterfaceSGIX;

  // GL_SGIX_instruments

  tbl.glGetInstrumentsSGIX = trace_glGetInstrumentsSGIX;
  tbl.glInstrumentsBufferSGIX = trace_glInstrumentsBufferSGIX;
  tbl.glPollInstrumentsSGIX = trace_glPollInstrumentsSGIX;
  tbl.glReadInstrumentsSGIX = trace_glReadInstrumentsSGIX;
  tbl.glStartInstrumentsSGIX = trace_glStartInstrumentsSGIX;
  tbl.glStopInstrumentsSGIX = trace_glStopInstrumentsSGIX;

  // GL_SGIX_list_priority

  tbl.glGetListParameterfvSGIX = trace_glGetListParameterfvSGIX;
  tbl.glGetListParameterivSGIX = trace_glGetListParameterivSGIX;
  tbl.glListParameterfSGIX = trace_glListParameterfSGIX;
  tbl.glListParameterfvSGIX = trace_glListParameterfvSGIX;
  tbl.glListParameteriSGIX = trace_glListParameteriSGIX;
  tbl.glListParameterivSGIX = trace_glListParameterivSGIX;

  // GL_SGIX_pixel_texture

  tbl.glPixelTexGenSGIX = trace_glPixelTexGenSGIX;

  // GL_SGIX_polynomial_ffd

  tbl.glDeformSGIX = trace_glDeformSGIX;
  tbl.glDeformationMap3dSGIX = trace_glDeformationMap3dSGIX;
  tbl.glDeformationMap3fSGIX = trace_glDeformationMap3fSGIX;
  tbl.glLoadIdentityDeformationMapSGIX = trace_glLoadIdentityDeformationMapSGIX;

  // GL_SGIX_reference_plane

  tbl.glReferencePlaneSGIX = trace_glReferencePlaneSGIX;

  // GL_SGIX_sprite

  tbl.glSpriteParameterfSGIX = trace_glSpriteParameterfSGIX;
  tbl.glSpriteParameterfvSGIX = trace_glSpriteParameterfvSGIX;
  tbl.glSpriteParameteriSGIX = trace_glSpriteParameteriSGIX;
  tbl.glSpriteParameterivSGIX = trace_glSpriteParameterivSGIX;

  // GL_SGIX_tag_sample_buffer

  tbl.glTagSampleBufferSGIX = trace_glTagSampleBufferSGIX;

  // GL_SGI_color_table

  tbl.glColorTableParameterfvSGI = trace_glColorTableParameterfvSGI;
  tbl.glColorTableParameterivSGI = trace_glColorTableParameterivSGI;
  tbl.glColorTableSGI = trace_glColorTableSGI;
  tbl.glCopyColorTableSGI = trace_glCopyColorTableSGI;
  tbl.glGetColorTableParameterfvSGI = trace_glGetColorTableParameterfvSGI;
  tbl.glGetColorTableParameterivSGI = trace_glGetColorTableParameterivSGI;
  tbl.glGetColorTableSGI = trace_glGetColorTableSGI;

  // GL_SUNX_constant_data

  tbl.glFinishTextureSUNX = trace_glFinishTextureSUNX;

  // GL_SUN_global_alpha

  tbl.glGlobalAlphaFactorbSUN = trace_glGlobalAlphaFactorbSUN;
  tbl.glGlobalAlphaFactordSUN = trace_glGlobalAlphaFactordSUN;
  tbl.glGlobalAlphaFactorfSUN = trace_glGlobalAlphaFactorfSUN;
  tbl.glGlobalAlphaFactoriSUN = trace_glGlobalAlphaFactoriSUN;
  tbl.glGlobalAlphaFactorsSUN = trace_glGlobalAlphaFactorsSUN;
  tbl.glGlobalAlphaFactorubSUN = trace_glGlobalAlphaFactorubSUN;
  tbl.glGlobalAlphaFactoruiSUN = trace_glGlobalAlphaFactoruiSUN;
  tbl.glGlobalAlphaFactorusSUN = trace_glGlobalAlphaFactorusSUN;

  // GL_SUN_mesh_array

  tbl.glDrawMeshArraysSUN = trace_glDrawMeshArraysSUN;

  // GL_SUN_triangle_list

  tbl.glReplacementCodePointerSUN = trace_glReplacementCodePointerSUN;
  tbl.glReplacementCodeubSUN = trace_glReplacementCodeubSUN;
  tbl.glReplacementCodeubvSUN = trace_glReplacementCodeubvSUN;
  tbl.glReplacementCodeuiSUN = trace_glReplacementCodeuiSUN;
  tbl.glReplacementCodeuivSUN = trace_glReplacementCodeuivSUN;
  tbl.glReplacementCodeusSUN = trace_glReplacementCodeusSUN;
  tbl.glReplacementCodeusvSUN = trace_glReplacementCodeusvSUN;

  // GL_SUN_vertex

  tbl.glColor3fVertex3fSUN = trace_glColor3fVertex3fSUN;
  tbl.glColor3fVertex3fvSUN = trace_glColor3fVertex3fvSUN;
  tbl.glColor4fNormal3fVertex3fSUN = trace_glColor4fNormal3fVertex3fSUN;
  tbl.glColor4fNormal3fVertex3fvSUN = trace_glColor4fNormal3fVertex3fvSUN;
  tbl.glColor4ubVertex2fSUN = trace_glColor4ubVertex2fSUN;
  tbl.glColor4ubVertex2fvSUN = trace_glColor4ubVertex2fvSUN;
  tbl.glColor4ubVertex3fSUN = trace_glColor4ubVertex3fSUN;
  tbl.glColor4ubVertex3fvSUN = trace_glColor4ubVertex3fvSUN;
  tbl.glNormal3fVertex3fSUN = trace_glNormal3fVertex3fSUN;
  tbl.glNormal3fVertex3fvSUN = trace_glNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor3fVertex3fSUN = trace_glReplacementCodeuiColor3fVertex3fSUN;
  tbl.glReplacementCodeuiColor3fVertex3fvSUN = trace_glReplacementCodeuiColor3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = trace_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = trace_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fSUN = trace_glReplacementCodeuiColor4ubVertex3fSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fvSUN = trace_glReplacementCodeuiColor4ubVertex3fvSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fSUN = trace_glReplacementCodeuiNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fvSUN = trace_glReplacementCodeuiNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = trace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = trace_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = trace_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = trace_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = trace_glReplacementCodeuiTexCoord2fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = trace_glReplacementCodeuiTexCoord2fVertex3fvSUN;
  tbl.glReplacementCodeuiVertex3fSUN = trace_glReplacementCodeuiVertex3fSUN;
  tbl.glReplacementCodeuiVertex3fvSUN = trace_glReplacementCodeuiVertex3fvSUN;
  tbl.glTexCoord2fColor3fVertex3fSUN = trace_glTexCoord2fColor3fVertex3fSUN;
  tbl.glTexCoord2fColor3fVertex3fvSUN = trace_glTexCoord2fColor3fVertex3fvSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = trace_glTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = trace_glTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fColor4ubVertex3fSUN = trace_glTexCoord2fColor4ubVertex3fSUN;
  tbl.glTexCoord2fColor4ubVertex3fvSUN = trace_glTexCoord2fColor4ubVertex3fvSUN;
  tbl.glTexCoord2fNormal3fVertex3fSUN = trace_glTexCoord2fNormal3fVertex3fSUN;
  tbl.glTexCoord2fNormal3fVertex3fvSUN = trace_glTexCoord2fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fVertex3fSUN = trace_glTexCoord2fVertex3fSUN;
  tbl.glTexCoord2fVertex3fvSUN = trace_glTexCoord2fVertex3fvSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = trace_glTexCoord4fColor4fNormal3fVertex4fSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = trace_glTexCoord4fColor4fNormal3fVertex4fvSUN;
  tbl.glTexCoord4fVertex4fSUN = trace_glTexCoord4fVertex4fSUN;
  tbl.glTexCoord4fVertex4fvSUN = trace_glTexCoord4fVertex4fvSUN;

  // GL_WIN_swap_hint

  tbl.glAddSwapHintRectWIN = trace_glAddSwapHintRectWIN;

}

void InitDispatchTrace(Dispatch::Global &tbl)
{

#if REGAL_SYS_WGL
  // WGL_3DL_stereo_control

  tbl.wglSetStereoEmitterState3DL = trace_wglSetStereoEmitterState3DL;

  // WGL_AMD_gpu_association

  tbl.wglBlitContextFramebufferAMD = trace_wglBlitContextFramebufferAMD;
  tbl.wglCreateAssociatedContextAMD = trace_wglCreateAssociatedContextAMD;
  tbl.wglCreateAssociatedContextAttribsAMD = trace_wglCreateAssociatedContextAttribsAMD;
  tbl.wglDeleteAssociatedContextAMD = trace_wglDeleteAssociatedContextAMD;
  tbl.wglGetContextGPUIDAMD = trace_wglGetContextGPUIDAMD;
  tbl.wglGetCurrentAssociatedContextAMD = trace_wglGetCurrentAssociatedContextAMD;
  tbl.wglGetGPUIDsAMD = trace_wglGetGPUIDsAMD;
  tbl.wglGetGPUInfoAMD = trace_wglGetGPUInfoAMD;
  tbl.wglMakeAssociatedContextCurrentAMD = trace_wglMakeAssociatedContextCurrentAMD;

  // WGL_ARB_buffer_region

  tbl.wglCreateBufferRegionARB = trace_wglCreateBufferRegionARB;
  tbl.wglDeleteBufferRegionARB = trace_wglDeleteBufferRegionARB;
  tbl.wglRestoreBufferRegionARB = trace_wglRestoreBufferRegionARB;
  tbl.wglSaveBufferRegionARB = trace_wglSaveBufferRegionARB;

  // WGL_ARB_create_context

  tbl.wglCreateContextAttribsARB = trace_wglCreateContextAttribsARB;

  // WGL_ARB_extensions_string

  tbl.wglGetExtensionsStringARB = trace_wglGetExtensionsStringARB;

  // WGL_ARB_make_current_read

  tbl.wglGetCurrentReadDCARB = trace_wglGetCurrentReadDCARB;
  tbl.wglMakeContextCurrentARB = trace_wglMakeContextCurrentARB;

  // WGL_ARB_pbuffer

  tbl.wglCreatePbufferARB = trace_wglCreatePbufferARB;
  tbl.wglDestroyPbufferARB = trace_wglDestroyPbufferARB;
  tbl.wglGetPbufferDCARB = trace_wglGetPbufferDCARB;
  tbl.wglQueryPbufferARB = trace_wglQueryPbufferARB;
  tbl.wglReleasePbufferDCARB = trace_wglReleasePbufferDCARB;

  // WGL_ARB_render_texture

  tbl.wglBindTexImageARB = trace_wglBindTexImageARB;
  tbl.wglReleaseTexImageARB = trace_wglReleaseTexImageARB;
  tbl.wglSetPbufferAttribARB = trace_wglSetPbufferAttribARB;

  // WGL_EXT_display_color_table

  tbl.wglBindDisplayColorTableEXT = trace_wglBindDisplayColorTableEXT;
  tbl.wglCreateDisplayColorTableEXT = trace_wglCreateDisplayColorTableEXT;
  tbl.wglDestroyDisplayColorTableEXT = trace_wglDestroyDisplayColorTableEXT;
  tbl.wglLoadDisplayColorTableEXT = trace_wglLoadDisplayColorTableEXT;

  // WGL_EXT_extensions_string

  tbl.wglGetExtensionsStringEXT = trace_wglGetExtensionsStringEXT;

  // WGL_EXT_make_current_read

  tbl.wglGetCurrentReadDCEXT = trace_wglGetCurrentReadDCEXT;
  tbl.wglMakeContextCurrentEXT = trace_wglMakeContextCurrentEXT;

  // WGL_EXT_pbuffer

  tbl.wglCreatePbufferEXT = trace_wglCreatePbufferEXT;
  tbl.wglDestroyPbufferEXT = trace_wglDestroyPbufferEXT;
  tbl.wglGetPbufferDCEXT = trace_wglGetPbufferDCEXT;
  tbl.wglQueryPbufferEXT = trace_wglQueryPbufferEXT;
  tbl.wglReleasePbufferDCEXT = trace_wglReleasePbufferDCEXT;

  // WGL_EXT_pixel_format

  tbl.wglChoosePixelFormatEXT = trace_wglChoosePixelFormatEXT;

  // WGL_EXT_swap_control

  tbl.wglGetSwapIntervalEXT = trace_wglGetSwapIntervalEXT;
  tbl.wglSwapIntervalEXT = trace_wglSwapIntervalEXT;

  // WGL_GDI

  tbl.wglChoosePixelFormat = trace_wglChoosePixelFormat;
  tbl.wglDescribePixelFormat = trace_wglDescribePixelFormat;
  tbl.wglGetPixelFormat = trace_wglGetPixelFormat;
  tbl.wglSetPixelFormat = trace_wglSetPixelFormat;
  tbl.wglSwapBuffers = trace_wglSwapBuffers;

  // WGL_I3D_digital_video_control

  tbl.wglGetDigitalVideoParametersI3D = trace_wglGetDigitalVideoParametersI3D;
  tbl.wglSetDigitalVideoParametersI3D = trace_wglSetDigitalVideoParametersI3D;

  // WGL_I3D_gamma

  tbl.wglGetGammaTableI3D = trace_wglGetGammaTableI3D;
  tbl.wglGetGammaTableParametersI3D = trace_wglGetGammaTableParametersI3D;
  tbl.wglSetGammaTableI3D = trace_wglSetGammaTableI3D;
  tbl.wglSetGammaTableParametersI3D = trace_wglSetGammaTableParametersI3D;

  // WGL_I3D_genlock

  tbl.wglDisableGenlockI3D = trace_wglDisableGenlockI3D;
  tbl.wglEnableGenlockI3D = trace_wglEnableGenlockI3D;
  tbl.wglGenlockSampleRateI3D = trace_wglGenlockSampleRateI3D;
  tbl.wglGenlockSourceDelayI3D = trace_wglGenlockSourceDelayI3D;
  tbl.wglGenlockSourceEdgeI3D = trace_wglGenlockSourceEdgeI3D;
  tbl.wglGenlockSourceI3D = trace_wglGenlockSourceI3D;
  tbl.wglGetGenlockSampleRateI3D = trace_wglGetGenlockSampleRateI3D;
  tbl.wglGetGenlockSourceDelayI3D = trace_wglGetGenlockSourceDelayI3D;
  tbl.wglGetGenlockSourceEdgeI3D = trace_wglGetGenlockSourceEdgeI3D;
  tbl.wglGetGenlockSourceI3D = trace_wglGetGenlockSourceI3D;
  tbl.wglIsEnabledGenlockI3D = trace_wglIsEnabledGenlockI3D;
  tbl.wglQueryGenlockMaxSourceDelayI3D = trace_wglQueryGenlockMaxSourceDelayI3D;

  // WGL_I3D_image_buffer

  tbl.wglAssociateImageBufferEventsI3D = trace_wglAssociateImageBufferEventsI3D;
  tbl.wglCreateImageBufferI3D = trace_wglCreateImageBufferI3D;
  tbl.wglDestroyImageBufferI3D = trace_wglDestroyImageBufferI3D;
  tbl.wglReleaseImageBufferEventsI3D = trace_wglReleaseImageBufferEventsI3D;

  // WGL_I3D_swap_frame_lock

  tbl.wglDisableFrameLockI3D = trace_wglDisableFrameLockI3D;
  tbl.wglEnableFrameLockI3D = trace_wglEnableFrameLockI3D;
  tbl.wglIsEnabledFrameLockI3D = trace_wglIsEnabledFrameLockI3D;
  tbl.wglQueryFrameLockMasterI3D = trace_wglQueryFrameLockMasterI3D;

  // WGL_I3D_swap_frame_usage

  tbl.wglBeginFrameTrackingI3D = trace_wglBeginFrameTrackingI3D;
  tbl.wglEndFrameTrackingI3D = trace_wglEndFrameTrackingI3D;
  tbl.wglGetFrameUsageI3D = trace_wglGetFrameUsageI3D;
  tbl.wglQueryFrameTrackingI3D = trace_wglQueryFrameTrackingI3D;

  // WGL_NV_DX_interop

  tbl.wglDXCloseDeviceNV = trace_wglDXCloseDeviceNV;
  tbl.wglDXLockObjectsNV = trace_wglDXLockObjectsNV;
  tbl.wglDXObjectAccessNV = trace_wglDXObjectAccessNV;
  tbl.wglDXOpenDeviceNV = trace_wglDXOpenDeviceNV;
  tbl.wglDXRegisterObjectNV = trace_wglDXRegisterObjectNV;
  tbl.wglDXSetResourceShareHandleNV = trace_wglDXSetResourceShareHandleNV;
  tbl.wglDXUnlockObjectsNV = trace_wglDXUnlockObjectsNV;
  tbl.wglDXUnregisterObjectNV = trace_wglDXUnregisterObjectNV;

  // WGL_NV_copy_image

  tbl.wglCopyImageSubDataNV = trace_wglCopyImageSubDataNV;

  // WGL_NV_gpu_affinity

  tbl.wglCreateAffinityDCNV = trace_wglCreateAffinityDCNV;
  tbl.wglDeleteDCNV = trace_wglDeleteDCNV;
  tbl.wglEnumGpusFromAffinityDCNV = trace_wglEnumGpusFromAffinityDCNV;
  tbl.wglEnumGpusNV = trace_wglEnumGpusNV;

  // WGL_NV_present_video

  tbl.wglBindVideoDeviceNV = trace_wglBindVideoDeviceNV;
  tbl.wglEnumerateVideoDevicesNV = trace_wglEnumerateVideoDevicesNV;
  tbl.wglQueryCurrentContextNV = trace_wglQueryCurrentContextNV;

  // WGL_NV_swap_group

  tbl.wglBindSwapBarrierNV = trace_wglBindSwapBarrierNV;
  tbl.wglJoinSwapGroupNV = trace_wglJoinSwapGroupNV;
  tbl.wglQueryFrameCountNV = trace_wglQueryFrameCountNV;
  tbl.wglQueryMaxSwapGroupsNV = trace_wglQueryMaxSwapGroupsNV;
  tbl.wglQuerySwapGroupNV = trace_wglQuerySwapGroupNV;
  tbl.wglResetFrameCountNV = trace_wglResetFrameCountNV;

  // WGL_NV_vertex_array_range

  tbl.wglAllocateMemoryNV = trace_wglAllocateMemoryNV;
  tbl.wglFreeMemoryNV = trace_wglFreeMemoryNV;

  // WGL_NV_video_capture

  tbl.wglBindVideoCaptureDeviceNV = trace_wglBindVideoCaptureDeviceNV;
  tbl.wglEnumerateVideoCaptureDevicesNV = trace_wglEnumerateVideoCaptureDevicesNV;
  tbl.wglLockVideoCaptureDeviceNV = trace_wglLockVideoCaptureDeviceNV;
  tbl.wglQueryVideoCaptureDeviceNV = trace_wglQueryVideoCaptureDeviceNV;
  tbl.wglReleaseVideoCaptureDeviceNV = trace_wglReleaseVideoCaptureDeviceNV;

  // WGL_NV_video_output

  tbl.wglBindVideoImageNV = trace_wglBindVideoImageNV;
  tbl.wglGetVideoDeviceNV = trace_wglGetVideoDeviceNV;
  tbl.wglGetVideoInfoNV = trace_wglGetVideoInfoNV;
  tbl.wglReleaseVideoDeviceNV = trace_wglReleaseVideoDeviceNV;
  tbl.wglReleaseVideoImageNV = trace_wglReleaseVideoImageNV;
  tbl.wglSendPbufferToVideoNV = trace_wglSendPbufferToVideoNV;

  // WGL_OML_sync_control

  tbl.wglGetMscRateOML = trace_wglGetMscRateOML;
  tbl.wglGetSyncValuesOML = trace_wglGetSyncValuesOML;
  tbl.wglSwapBuffersMscOML = trace_wglSwapBuffersMscOML;
  tbl.wglSwapLayerBuffersMscOML = trace_wglSwapLayerBuffersMscOML;
  tbl.wglWaitForMscOML = trace_wglWaitForMscOML;
  tbl.wglWaitForSbcOML = trace_wglWaitForSbcOML;

  // WGL_core

  tbl.wglCopyContext = trace_wglCopyContext;
  tbl.wglCreateContext = trace_wglCreateContext;
  tbl.wglCreateLayerContext = trace_wglCreateLayerContext;
  tbl.wglDeleteContext = trace_wglDeleteContext;
  tbl.wglDescribeLayerPlane = trace_wglDescribeLayerPlane;
  tbl.wglGetCurrentContext = trace_wglGetCurrentContext;
  tbl.wglGetCurrentDC = trace_wglGetCurrentDC;
  tbl.wglGetLayerPaletteEntries = trace_wglGetLayerPaletteEntries;
  tbl.wglMakeCurrent = trace_wglMakeCurrent;
  tbl.wglRealizeLayerPalette = trace_wglRealizeLayerPalette;
  tbl.wglSetLayerPaletteEntries = trace_wglSetLayerPaletteEntries;
  tbl.wglShareLists = trace_wglShareLists;
  tbl.wglSwapLayerBuffers = trace_wglSwapLayerBuffers;
  tbl.wglSwapMultipleBuffers = trace_wglSwapMultipleBuffers;
  tbl.wglUseFontBitmapsA = trace_wglUseFontBitmapsA;
  tbl.wglUseFontBitmapsW = trace_wglUseFontBitmapsW;
  tbl.wglUseFontOutlinesA = trace_wglUseFontOutlinesA;
  tbl.wglUseFontOutlinesW = trace_wglUseFontOutlinesW;
#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX && REGAL_SYS_X11

  // GLX_VERSION_1_0

  tbl.glXChooseVisual = trace_glXChooseVisual;
  tbl.glXCopyContext = trace_glXCopyContext;
  tbl.glXCreateContext = trace_glXCreateContext;
  tbl.glXCreateGLXPixmap = trace_glXCreateGLXPixmap;
  tbl.glXDestroyContext = trace_glXDestroyContext;
  tbl.glXDestroyGLXPixmap = trace_glXDestroyGLXPixmap;
  tbl.glXGetConfig = trace_glXGetConfig;
  tbl.glXGetCurrentContext = trace_glXGetCurrentContext;
  tbl.glXGetCurrentDrawable = trace_glXGetCurrentDrawable;
  tbl.glXIsDirect = trace_glXIsDirect;
  tbl.glXMakeCurrent = trace_glXMakeCurrent;
  tbl.glXQueryExtension = trace_glXQueryExtension;
  tbl.glXQueryVersion = trace_glXQueryVersion;
  tbl.glXSwapBuffers = trace_glXSwapBuffers;
  tbl.glXUseXFont = trace_glXUseXFont;
  tbl.glXWaitGL = trace_glXWaitGL;
  tbl.glXWaitX = trace_glXWaitX;

  // GLX_VERSION_1_1

  tbl.glXGetClientString = trace_glXGetClientString;
  tbl.glXQueryExtensionsString = trace_glXQueryExtensionsString;
  tbl.glXQueryServerString = trace_glXQueryServerString;

  // GLX_VERSION_1_2

  tbl.glXGetCurrentDisplay = trace_glXGetCurrentDisplay;

  // GLX_VERSION_1_3

  tbl.glXChooseFBConfig = trace_glXChooseFBConfig;
  tbl.glXCreateNewContext = trace_glXCreateNewContext;
  tbl.glXCreatePbuffer = trace_glXCreatePbuffer;
  tbl.glXCreatePixmap = trace_glXCreatePixmap;
  tbl.glXCreateWindow = trace_glXCreateWindow;
  tbl.glXDestroyPbuffer = trace_glXDestroyPbuffer;
  tbl.glXDestroyPixmap = trace_glXDestroyPixmap;
  tbl.glXDestroyWindow = trace_glXDestroyWindow;
  tbl.glXGetCurrentReadDrawable = trace_glXGetCurrentReadDrawable;
  tbl.glXGetFBConfigAttrib = trace_glXGetFBConfigAttrib;
  tbl.glXGetFBConfigs = trace_glXGetFBConfigs;
  tbl.glXGetSelectedEvent = trace_glXGetSelectedEvent;
  tbl.glXGetVisualFromFBConfig = trace_glXGetVisualFromFBConfig;
  tbl.glXMakeContextCurrent = trace_glXMakeContextCurrent;
  tbl.glXQueryContext = trace_glXQueryContext;
  tbl.glXQueryDrawable = trace_glXQueryDrawable;
  tbl.glXSelectEvent = trace_glXSelectEvent;

  // GLX_VERSION_1_4

  tbl.glXGetProcAddress = trace_glXGetProcAddress;

  // GLX_ARB_create_context

  tbl.glXCreateContextAttribsARB = trace_glXCreateContextAttribsARB;

  // GLX_ARB_get_proc_address

  tbl.glXGetProcAddressARB = trace_glXGetProcAddressARB;

  // GLX_EXT_import_context

  tbl.glXFreeContextEXT = trace_glXFreeContextEXT;
  tbl.glXGetContextIDEXT = trace_glXGetContextIDEXT;
  tbl.glXImportContextEXT = trace_glXImportContextEXT;
  tbl.glXQueryContextInfoEXT = trace_glXQueryContextInfoEXT;

  // GLX_EXT_swap_control

  tbl.glXSwapIntervalEXT = trace_glXSwapIntervalEXT;

  // GLX_EXT_texture_from_pixmap

  tbl.glXBindTexImageEXT = trace_glXBindTexImageEXT;
  tbl.glXReleaseTexImageEXT = trace_glXReleaseTexImageEXT;

  // GLX_MESA_agp_offset

  tbl.glXGetAGPOffsetMESA = trace_glXGetAGPOffsetMESA;

  // GLX_MESA_copy_sub_buffer

  tbl.glXCopySubBufferMESA = trace_glXCopySubBufferMESA;

  // GLX_MESA_pixmap_colormap

  tbl.glXCreateGLXPixmapMESA = trace_glXCreateGLXPixmapMESA;

  // GLX_MESA_release_buffers

  tbl.glXReleaseBuffersMESA = trace_glXReleaseBuffersMESA;

  // GLX_MESA_set_3dfx_mode

  tbl.glXSet3DfxModeMESA = trace_glXSet3DfxModeMESA;

  // GLX_MESA_swap_control

  tbl.glXGetSwapIntervalMESA = trace_glXGetSwapIntervalMESA;
  tbl.glXSwapIntervalMESA = trace_glXSwapIntervalMESA;

  // GLX_NV_copy_image

  tbl.glXCopyImageSubDataNV = trace_glXCopyImageSubDataNV;

  // GLX_NV_present_video

  tbl.glXBindVideoDeviceNV = trace_glXBindVideoDeviceNV;
  tbl.glXEnumerateVideoDevicesNV = trace_glXEnumerateVideoDevicesNV;

  // GLX_NV_swap_group

  tbl.glXBindSwapBarrierNV = trace_glXBindSwapBarrierNV;
  tbl.glXJoinSwapGroupNV = trace_glXJoinSwapGroupNV;
  tbl.glXQueryFrameCountNV = trace_glXQueryFrameCountNV;
  tbl.glXQueryMaxSwapGroupsNV = trace_glXQueryMaxSwapGroupsNV;
  tbl.glXQuerySwapGroupNV = trace_glXQuerySwapGroupNV;
  tbl.glXResetFrameCountNV = trace_glXResetFrameCountNV;

  // GLX_NV_vertex_array_range

  tbl.glXAllocateMemoryNV = trace_glXAllocateMemoryNV;
  tbl.glXFreeMemoryNV = trace_glXFreeMemoryNV;

  // GLX_NV_video_capture

  tbl.glXBindVideoCaptureDeviceNV = trace_glXBindVideoCaptureDeviceNV;
  tbl.glXEnumerateVideoCaptureDevicesNV = trace_glXEnumerateVideoCaptureDevicesNV;
  tbl.glXLockVideoCaptureDeviceNV = trace_glXLockVideoCaptureDeviceNV;
  tbl.glXQueryVideoCaptureDeviceNV = trace_glXQueryVideoCaptureDeviceNV;
  tbl.glXReleaseVideoCaptureDeviceNV = trace_glXReleaseVideoCaptureDeviceNV;

  // GLX_NV_video_output

  tbl.glXBindVideoImageNV = trace_glXBindVideoImageNV;
  tbl.glXGetVideoDeviceNV = trace_glXGetVideoDeviceNV;
  tbl.glXGetVideoInfoNV = trace_glXGetVideoInfoNV;
  tbl.glXReleaseVideoDeviceNV = trace_glXReleaseVideoDeviceNV;
  tbl.glXReleaseVideoImageNV = trace_glXReleaseVideoImageNV;
  tbl.glXSendPbufferToVideoNV = trace_glXSendPbufferToVideoNV;

  // GLX_OML_sync_control

  tbl.glXGetMscRateOML = trace_glXGetMscRateOML;
  tbl.glXGetSyncValuesOML = trace_glXGetSyncValuesOML;
  tbl.glXSwapBuffersMscOML = trace_glXSwapBuffersMscOML;
  tbl.glXWaitForMscOML = trace_glXWaitForMscOML;
  tbl.glXWaitForSbcOML = trace_glXWaitForSbcOML;

  // GLX_SGIX_fbconfig

  tbl.glXCreateContextWithConfigSGIX = trace_glXCreateContextWithConfigSGIX;
  tbl.glXCreateGLXPixmapWithConfigSGIX = trace_glXCreateGLXPixmapWithConfigSGIX;
  tbl.glXGetFBConfigAttribSGIX = trace_glXGetFBConfigAttribSGIX;
  tbl.glXGetFBConfigFromVisualSGIX = trace_glXGetFBConfigFromVisualSGIX;
  tbl.glXGetVisualFromFBConfigSGIX = trace_glXGetVisualFromFBConfigSGIX;

  // GLX_SGIX_pbuffer

  tbl.glXCreateGLXPbufferSGIX = trace_glXCreateGLXPbufferSGIX;
  tbl.glXDestroyGLXPbufferSGIX = trace_glXDestroyGLXPbufferSGIX;
  tbl.glXGetSelectedEventSGIX = trace_glXGetSelectedEventSGIX;
  tbl.glXQueryGLXPbufferSGIX = trace_glXQueryGLXPbufferSGIX;
  tbl.glXSelectEventSGIX = trace_glXSelectEventSGIX;

  // GLX_SGIX_swap_barrier

  tbl.glXBindSwapBarrierSGIX = trace_glXBindSwapBarrierSGIX;
  tbl.glXQueryMaxSwapBarriersSGIX = trace_glXQueryMaxSwapBarriersSGIX;

  // GLX_SGIX_swap_group

  tbl.glXJoinSwapGroupSGIX = trace_glXJoinSwapGroupSGIX;

  // GLX_SGIX_video_resize

  tbl.glXBindChannelToWindowSGIX = trace_glXBindChannelToWindowSGIX;
  tbl.glXChannelRectSGIX = trace_glXChannelRectSGIX;
  tbl.glXChannelRectSyncSGIX = trace_glXChannelRectSyncSGIX;
  tbl.glXQueryChannelDeltasSGIX = trace_glXQueryChannelDeltasSGIX;
  tbl.glXQueryChannelRectSGIX = trace_glXQueryChannelRectSGIX;

  // GLX_SGI_cushion

  tbl.glXCushionSGI = trace_glXCushionSGI;

  // GLX_SGI_make_current_read

  tbl.glXGetCurrentReadDrawableSGI = trace_glXGetCurrentReadDrawableSGI;
  tbl.glXMakeCurrentReadSGI = trace_glXMakeCurrentReadSGI;

  // GLX_SGI_swap_control

  tbl.glXSwapIntervalSGI = trace_glXSwapIntervalSGI;

  // GLX_SGI_video_sync

  tbl.glXGetVideoSyncSGI = trace_glXGetVideoSyncSGI;
  tbl.glXWaitVideoSyncSGI = trace_glXWaitVideoSyncSGI;
#endif // REGAL_SYS_GLX && REGAL_SYS_X11

#if REGAL_SYS_OSX

  // CGL_VERSION_1_0

  tbl.CGLChoosePixelFormat = trace_CGLChoosePixelFormat;
  tbl.CGLClearDrawable = trace_CGLClearDrawable;
  tbl.CGLCopyContext = trace_CGLCopyContext;
  tbl.CGLCreateContext = trace_CGLCreateContext;
  tbl.CGLDescribePixelFormat = trace_CGLDescribePixelFormat;
  tbl.CGLDescribeRenderer = trace_CGLDescribeRenderer;
  tbl.CGLDestroyContext = trace_CGLDestroyContext;
  tbl.CGLDestroyPixelFormat = trace_CGLDestroyPixelFormat;
  tbl.CGLDestroyRendererInfo = trace_CGLDestroyRendererInfo;
  tbl.CGLDisable = trace_CGLDisable;
  tbl.CGLEnable = trace_CGLEnable;
  tbl.CGLErrorString = trace_CGLErrorString;
  tbl.CGLFlushDrawable = trace_CGLFlushDrawable;
  tbl.CGLGetOffScreen = trace_CGLGetOffScreen;
  tbl.CGLGetOption = trace_CGLGetOption;
  tbl.CGLGetParameter = trace_CGLGetParameter;
  tbl.CGLGetVersion = trace_CGLGetVersion;
  tbl.CGLGetVirtualScreen = trace_CGLGetVirtualScreen;
  tbl.CGLIsEnabled = trace_CGLIsEnabled;
  tbl.CGLQueryRendererInfo = trace_CGLQueryRendererInfo;
  tbl.CGLSetFullScreen = trace_CGLSetFullScreen;
  tbl.CGLSetOffScreen = trace_CGLSetOffScreen;
  tbl.CGLSetOption = trace_CGLSetOption;
  tbl.CGLSetParameter = trace_CGLSetParameter;
  tbl.CGLSetVirtualScreen = trace_CGLSetVirtualScreen;

  // CGL_VERSION_1_1

  tbl.CGLCreatePBuffer = trace_CGLCreatePBuffer;
  tbl.CGLDescribePBuffer = trace_CGLDescribePBuffer;
  tbl.CGLDestroyPBuffer = trace_CGLDestroyPBuffer;
  tbl.CGLGetPBuffer = trace_CGLGetPBuffer;
  tbl.CGLSetPBuffer = trace_CGLSetPBuffer;
  tbl.CGLTexImagePBuffer = trace_CGLTexImagePBuffer;

  // CGL_VERSION_1_2

  tbl.CGLGetContextRetainCount = trace_CGLGetContextRetainCount;
  tbl.CGLGetGlobalOption = trace_CGLGetGlobalOption;
  tbl.CGLGetPBufferRetainCount = trace_CGLGetPBufferRetainCount;
  tbl.CGLGetPixelFormat = trace_CGLGetPixelFormat;
  tbl.CGLGetPixelFormatRetainCount = trace_CGLGetPixelFormatRetainCount;
  tbl.CGLLockContext = trace_CGLLockContext;
  tbl.CGLReleaseContext = trace_CGLReleaseContext;
  tbl.CGLReleasePBuffer = trace_CGLReleasePBuffer;
  tbl.CGLReleasePixelFormat = trace_CGLReleasePixelFormat;
  tbl.CGLRetainContext = trace_CGLRetainContext;
  tbl.CGLRetainPBuffer = trace_CGLRetainPBuffer;
  tbl.CGLRetainPixelFormat = trace_CGLRetainPixelFormat;
  tbl.CGLSetGlobalOption = trace_CGLSetGlobalOption;
  tbl.CGLUnlockContext = trace_CGLUnlockContext;

  // CGL_VERSION_1_3

  tbl.CGLGetCurrentContext = trace_CGLGetCurrentContext;
  tbl.CGLGetShareGroup = trace_CGLGetShareGroup;
  tbl.CGLGetSurface = trace_CGLGetSurface;
  tbl.CGLSetCurrentContext = trace_CGLSetCurrentContext;
  tbl.CGLSetSurface = trace_CGLSetSurface;
  tbl.CGLTexImageIOSurface2D = trace_CGLTexImageIOSurface2D;
  tbl.CGLUpdateContext = trace_CGLUpdateContext;
#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

  // EGL_ANGLE_query_surface_pointer

  tbl.eglQuerySurfacePointerANGLE = trace_eglQuerySurfacePointerANGLE;

  // EGL_KHR_fence_sync

  tbl.eglClientWaitSyncKHR = trace_eglClientWaitSyncKHR;
  tbl.eglCreateSyncKHR = trace_eglCreateSyncKHR;
  tbl.eglDestroySyncKHR = trace_eglDestroySyncKHR;
  tbl.eglGetSyncAttribKHR = trace_eglGetSyncAttribKHR;

  // EGL_KHR_image_base

  tbl.eglCreateImageKHR = trace_eglCreateImageKHR;
  tbl.eglDestroyImageKHR = trace_eglDestroyImageKHR;

  // EGL_KHR_lock_surface

  tbl.eglLockSurfaceKHR = trace_eglLockSurfaceKHR;
  tbl.eglUnlockSurfaceKHR = trace_eglUnlockSurfaceKHR;

  // EGL_MESA_drm_image

  tbl.eglCreateDRMImageMESA = trace_eglCreateDRMImageMESA;
  tbl.eglExportDRMImageMESA = trace_eglExportDRMImageMESA;

  // EGL_NV_post_sub_buffer

  tbl.eglPostSubBufferNV = trace_eglPostSubBufferNV;

  // EGL_NV_sync

  tbl.eglClientWaitSyncNV = trace_eglClientWaitSyncNV;
  tbl.eglCreateFenceSyncNV = trace_eglCreateFenceSyncNV;
  tbl.eglDestroySyncNV = trace_eglDestroySyncNV;
  tbl.eglFenceNV = trace_eglFenceNV;
  tbl.eglGetSyncAttribNV = trace_eglGetSyncAttribNV;
  tbl.eglSignalSyncNV = trace_eglSignalSyncNV;

  // EGL_NV_system_time

  tbl.eglGetSystemTimeFrequencyNV = trace_eglGetSystemTimeFrequencyNV;
  tbl.eglGetSystemTimeNV = trace_eglGetSystemTimeNV;

  // EGL_VERSION_1_0

  tbl.eglChooseConfig = trace_eglChooseConfig;
  tbl.eglCopyBuffers = trace_eglCopyBuffers;
  tbl.eglCreateContext = trace_eglCreateContext;
  tbl.eglCreatePbufferSurface = trace_eglCreatePbufferSurface;
  tbl.eglCreatePixmapSurface = trace_eglCreatePixmapSurface;
  tbl.eglCreateWindowSurface = trace_eglCreateWindowSurface;
  tbl.eglDestroyContext = trace_eglDestroyContext;
  tbl.eglDestroySurface = trace_eglDestroySurface;
  tbl.eglGetConfigAttrib = trace_eglGetConfigAttrib;
  tbl.eglGetConfigs = trace_eglGetConfigs;
  tbl.eglGetCurrentContext = trace_eglGetCurrentContext;
  tbl.eglGetCurrentDisplay = trace_eglGetCurrentDisplay;
  tbl.eglGetCurrentSurface = trace_eglGetCurrentSurface;
  tbl.eglGetDisplay = trace_eglGetDisplay;
  tbl.eglGetError = trace_eglGetError;
  tbl.eglGetProcAddress = trace_eglGetProcAddress;
  tbl.eglInitialize = trace_eglInitialize;
  tbl.eglMakeCurrent = trace_eglMakeCurrent;
  tbl.eglQueryContext = trace_eglQueryContext;
  tbl.eglQueryString = trace_eglQueryString;
  tbl.eglQuerySurface = trace_eglQuerySurface;
  tbl.eglSwapBuffers = trace_eglSwapBuffers;
  tbl.eglTerminate = trace_eglTerminate;
  tbl.eglWaitGL = trace_eglWaitGL;
  tbl.eglWaitNative = trace_eglWaitNative;

  // EGL_VERSION_1_1

  tbl.eglBindTexImage = trace_eglBindTexImage;
  tbl.eglReleaseTexImage = trace_eglReleaseTexImage;

  // EGL_VERSION_1_2

  tbl.eglBindAPI = trace_eglBindAPI;
  tbl.eglCreatePbufferFromClientBuffer = trace_eglCreatePbufferFromClientBuffer;
  tbl.eglQueryAPI = trace_eglQueryAPI;
  tbl.eglReleaseThread = trace_eglReleaseThread;
  tbl.eglSurfaceAttrib = trace_eglSurfaceAttrib;
  tbl.eglSwapInterval = trace_eglSwapInterval;
  tbl.eglWaitClient = trace_eglWaitClient;
#endif // REGAL_SYS_EGL

}

REGAL_NAMESPACE_END

#endif
