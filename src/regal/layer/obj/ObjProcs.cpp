/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "Obj.h"
#include "ObjProcs.h"

extern "C" Regal::Layer * createObj( Regal::RegalContext * ctx ) {
  return new Regal::Emu::Obj( ctx );
}

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace Emu;

static void REGAL_CALL obj_glBindBuffer(Layer *_layer, GLenum target, GLuint buffer)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->BindBuffer(target, buffer); return;

  RglBindBuffer( orig, target, buffer );

}

static void REGAL_CALL obj_glBindBufferARB(Layer *_layer, GLenum target, GLuint buffer)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->BindBuffer(target, buffer); return;

  RglBindBufferARB( orig, target, buffer );

}

static void REGAL_CALL obj_glBindTexture(Layer *_layer, GLenum target, GLuint texture)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->BindTexture(target, texture); return;

  RglBindTexture( orig, target, texture );

}

static void REGAL_CALL obj_glBindVertexArray(Layer *_layer, GLuint array)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->BindVertexArray(array); return;

  RglBindVertexArray( orig, array );

}

static void REGAL_CALL obj_glDeleteBuffers(Layer *_layer, GLsizei n, const GLuint *buffers)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->DeleteBuffers(n, buffers); return;

  RglDeleteBuffers( orig, n, buffers );

}

static void REGAL_CALL obj_glDeleteBuffersARB(Layer *_layer, GLsizei n, const GLuint *buffers)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->DeleteBuffers(n, buffers); return;

  RglDeleteBuffersARB( orig, n, buffers );

}

static void REGAL_CALL obj_glDeleteTextures(Layer *_layer, GLsizei n, const GLuint *textures)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->DeleteTextures(n, textures); return;

  RglDeleteTextures( orig, n, textures );

}

static void REGAL_CALL obj_glDeleteVertexArrays(Layer *_layer, GLsizei n, const GLuint *arrays)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->DeleteVertexArrays(n, arrays); return;

  RglDeleteVertexArrays( orig, n, arrays );

}

static void REGAL_CALL obj_glFramebufferTexture1D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglFramebufferTexture1D( orig,target, attachment, textarget, self->textureNames.ToDriverName(texture), level); return;

  RglFramebufferTexture1D( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL obj_glFramebufferTexture1DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglFramebufferTexture1DEXT( orig,target, attachment, textarget, self->textureNames.ToDriverName(texture), level); return;

  RglFramebufferTexture1DEXT( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL obj_glFramebufferTexture2D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglFramebufferTexture2D( orig,target, attachment, textarget, self->textureNames.ToDriverName(texture), level); return;

  RglFramebufferTexture2D( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL obj_glFramebufferTexture2DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglFramebufferTexture2DEXT( orig,target, attachment, textarget, self->textureNames.ToDriverName(texture), level); return;

  RglFramebufferTexture2DEXT( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL obj_glFramebufferTexture2DMultisampleEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglFramebufferTexture2DMultisampleEXT( orig,target, attachment, textarget, self->textureNames.ToDriverName(texture), level, samples); return;

  RglFramebufferTexture2DMultisampleEXT( orig, target, attachment, textarget, texture, level, samples );

}

static void REGAL_CALL obj_glFramebufferTexture2DOES(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglFramebufferTexture2DOES( orig,target, attachment, textarget, self->textureNames.ToDriverName(texture), level); return;

  RglFramebufferTexture2DOES( orig, target, attachment, textarget, texture, level );

}

static void REGAL_CALL obj_glFramebufferTexture3DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglFramebufferTexture3DEXT( orig,target, attachment, textarget, self->textureNames.ToDriverName(texture), level, zoffset); return;

  RglFramebufferTexture3DEXT( orig, target, attachment, textarget, texture, level, zoffset );

}

static void REGAL_CALL obj_glFramebufferTexture3DOES(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglFramebufferTexture3DOES( orig,target, attachment, textarget, self->textureNames.ToDriverName(texture), level, zoffset); return;

  RglFramebufferTexture3DOES( orig, target, attachment, textarget, texture, level, zoffset );

}

static void REGAL_CALL obj_glGenBuffers(Layer *_layer, GLsizei n, GLuint *buffers)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->GenBuffers(n, buffers); return;

  RglGenBuffers( orig, n, buffers );

}

static void REGAL_CALL obj_glGenBuffersARB(Layer *_layer, GLsizei n, GLuint *buffers)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->GenBuffers(n, buffers); return;

  RglGenBuffersARB( orig, n, buffers );

}

static void REGAL_CALL obj_glGenTextures(Layer *_layer, GLsizei n, GLuint *textures)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->GenTextures(n, textures); return;

  RglGenTextures( orig, n, textures );

}

static void REGAL_CALL obj_glGenVertexArrays(Layer *_layer, GLsizei n, GLuint *arrays)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  self->GenVertexArrays(n, arrays); return;

  RglGenVertexArrays( orig, n, arrays );

}

static void REGAL_CALL obj_glGetFramebufferAttachmentParameteriv(Layer *_layer, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglGetFramebufferAttachmentParameteriv( orig,target, attachment, pname, params);
  if (pname == GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)
  {
    GLint attachType = GL_RENDERBUFFER;
    RglGetFramebufferAttachmentParameteriv( orig,target, attachment, GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, &attachType);
    if (attachType == GL_TEXTURE)
      *params = self->textureNames.ToAppName(*params);
  }
  return;

  RglGetFramebufferAttachmentParameteriv( orig, target, attachment, pname, params );

}

static void REGAL_CALL obj_glGetFramebufferAttachmentParameterivEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  RglGetFramebufferAttachmentParameterivEXT( orig,target, attachment, pname, params);
  if (pname == GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)
  {
    GLint attachType = GL_RENDERBUFFER;
    RglGetFramebufferAttachmentParameterivEXT( orig,target, attachment, GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, &attachType);
    if (attachType == GL_TEXTURE)
      *params = self->textureNames.ToAppName(*params);
  }
  return;

  RglGetFramebufferAttachmentParameterivEXT( orig, target, attachment, pname, params );

}

static GLboolean REGAL_CALL obj_glIsBuffer(Layer *_layer, GLuint buffer)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  return self->IsBuffer(buffer);

  return RglIsBuffer( orig, buffer );

}

static GLboolean REGAL_CALL obj_glIsBufferARB(Layer *_layer, GLuint buffer)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  return self->IsBuffer(buffer);

  return RglIsBufferARB( orig, buffer );

}

static GLboolean REGAL_CALL obj_glIsTexture(Layer *_layer, GLuint texture)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  return self->IsTexture(texture);

  return RglIsTexture( orig, texture );

}

static GLboolean REGAL_CALL obj_glIsVertexArray(Layer *_layer, GLuint array)
{
  Obj * self = static_cast<Obj *>(_layer);

  ObjOriginate & orig = self->orig;

  // impl
  return self->IsVertexArray(array);

  return RglIsVertexArray( orig, array );

}

void ObjIntercept( Layer *layer, Dispatch::GL & dt ) {
  dt.glBindBuffer                             = MakeRegalProc(obj_glBindBuffer, layer);
  dt.glBindBufferARB                          = MakeRegalProc(obj_glBindBufferARB, layer);
  dt.glBindTexture                            = MakeRegalProc(obj_glBindTexture, layer);
  dt.glBindVertexArray                        = MakeRegalProc(obj_glBindVertexArray, layer);
  dt.glDeleteBuffers                          = MakeRegalProc(obj_glDeleteBuffers, layer);
  dt.glDeleteBuffersARB                       = MakeRegalProc(obj_glDeleteBuffersARB, layer);
  dt.glDeleteTextures                         = MakeRegalProc(obj_glDeleteTextures, layer);
  dt.glDeleteVertexArrays                     = MakeRegalProc(obj_glDeleteVertexArrays, layer);
  dt.glFramebufferTexture1D                   = MakeRegalProc(obj_glFramebufferTexture1D, layer);
  dt.glFramebufferTexture1DEXT                = MakeRegalProc(obj_glFramebufferTexture1DEXT, layer);
  dt.glFramebufferTexture2D                   = MakeRegalProc(obj_glFramebufferTexture2D, layer);
  dt.glFramebufferTexture2DEXT                = MakeRegalProc(obj_glFramebufferTexture2DEXT, layer);
  dt.glFramebufferTexture2DMultisampleEXT     = MakeRegalProc(obj_glFramebufferTexture2DMultisampleEXT, layer);
  dt.glFramebufferTexture2DOES                = MakeRegalProc(obj_glFramebufferTexture2DOES, layer);
  dt.glFramebufferTexture3DEXT                = MakeRegalProc(obj_glFramebufferTexture3DEXT, layer);
  dt.glFramebufferTexture3DOES                = MakeRegalProc(obj_glFramebufferTexture3DOES, layer);
  dt.glGenBuffers                             = MakeRegalProc(obj_glGenBuffers, layer);
  dt.glGenBuffersARB                          = MakeRegalProc(obj_glGenBuffersARB, layer);
  dt.glGenTextures                            = MakeRegalProc(obj_glGenTextures, layer);
  dt.glGenVertexArrays                        = MakeRegalProc(obj_glGenVertexArrays, layer);
  dt.glGetFramebufferAttachmentParameteriv    = MakeRegalProc(obj_glGetFramebufferAttachmentParameteriv, layer);
  dt.glGetFramebufferAttachmentParameterivEXT = MakeRegalProc(obj_glGetFramebufferAttachmentParameterivEXT, layer);
  dt.glIsBuffer                               = MakeRegalProc(obj_glIsBuffer, layer);
  dt.glIsBufferARB                            = MakeRegalProc(obj_glIsBufferARB, layer);
  dt.glIsTexture                              = MakeRegalProc(obj_glIsTexture, layer);
  dt.glIsVertexArray                          = MakeRegalProc(obj_glIsVertexArray, layer);
}

REGAL_NAMESPACE_END
