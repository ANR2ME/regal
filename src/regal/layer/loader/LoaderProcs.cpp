/* NOTE: Do not edit this file, it is generated by a script:
   L.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_DRIVER && REGAL_LOADER

REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalBreak.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalContext.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

// GL_VERSION_1_0

  static void REGAL_CALL missing_glAccum(GLenum op, GLfloat value)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(value);
    Warning( "glAccum", " not available." );
  }

  PFNGLACCUMPROC driver_glAccum = NULL;

  static void REGAL_CALL loader_glAccum(Layer *_layer, GLenum op, GLfloat value)
  {
    driver_glAccum(op, value);
  }

  static void REGAL_CALL missing_glAlphaFunc(GLenum func, GLclampf ref)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    Warning( "glAlphaFunc", " not available." );
  }

  PFNGLALPHAFUNCPROC driver_glAlphaFunc = NULL;

  static void REGAL_CALL loader_glAlphaFunc(Layer *_layer, GLenum func, GLclampf ref)
  {
    driver_glAlphaFunc(func, ref);
  }

  static void REGAL_CALL missing_glBegin(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glBegin", " not available." );
  }

  PFNGLBEGINPROC driver_glBegin = NULL;

  static void REGAL_CALL loader_glBegin(Layer *_layer, GLenum mode)
  {
    driver_glBegin(mode);
  }

  static void REGAL_CALL missing_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
  {
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(xorig);
    UNUSED_PARAMETER(yorig);
    UNUSED_PARAMETER(xmove);
    UNUSED_PARAMETER(ymove);
    UNUSED_PARAMETER(bitmap);
    Warning( "glBitmap", " not available." );
  }

  PFNGLBITMAPPROC driver_glBitmap = NULL;

  static void REGAL_CALL loader_glBitmap(Layer *_layer, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
  {
    driver_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
  }

  static void REGAL_CALL missing_glBlendFunc(GLenum sfactor, GLenum dfactor)
  {
    UNUSED_PARAMETER(sfactor);
    UNUSED_PARAMETER(dfactor);
    Warning( "glBlendFunc", " not available." );
  }

  PFNGLBLENDFUNCPROC driver_glBlendFunc = NULL;

  static void REGAL_CALL loader_glBlendFunc(Layer *_layer, GLenum sfactor, GLenum dfactor)
  {
    driver_glBlendFunc(sfactor, dfactor);
  }

  static void REGAL_CALL missing_glCallList(GLuint list)
  {
    UNUSED_PARAMETER(list);
    Warning( "glCallList", " not available." );
  }

  PFNGLCALLLISTPROC driver_glCallList = NULL;

  static void REGAL_CALL loader_glCallList(Layer *_layer, GLuint list)
  {
    driver_glCallList(list);
  }

  static void REGAL_CALL missing_glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(lists);
    Warning( "glCallLists", " not available." );
  }

  PFNGLCALLLISTSPROC driver_glCallLists = NULL;

  static void REGAL_CALL loader_glCallLists(Layer *_layer, GLsizei n, GLenum type, const GLvoid *lists)
  {
    driver_glCallLists(n, type, lists);
  }

  static void REGAL_CALL missing_glClear(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glClear", " not available." );
  }

  PFNGLCLEARPROC driver_glClear = NULL;

  static void REGAL_CALL loader_glClear(Layer *_layer, GLbitfield mask)
  {
    driver_glClear(mask);
  }

  static void REGAL_CALL missing_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearAccum", " not available." );
  }

  PFNGLCLEARACCUMPROC driver_glClearAccum = NULL;

  static void REGAL_CALL loader_glClearAccum(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
  {
    driver_glClearAccum(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearColor", " not available." );
  }

  PFNGLCLEARCOLORPROC driver_glClearColor = NULL;

  static void REGAL_CALL loader_glClearColor(Layer *_layer, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    driver_glClearColor(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glClearDepth(GLclampd depth)
  {
    UNUSED_PARAMETER(depth);
    Warning( "glClearDepth", " not available." );
  }

  PFNGLCLEARDEPTHPROC driver_glClearDepth = NULL;

  static void REGAL_CALL loader_glClearDepth(Layer *_layer, GLclampd depth)
  {
    driver_glClearDepth(depth);
  }

  static void REGAL_CALL missing_glClearIndex(GLfloat c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glClearIndex", " not available." );
  }

  PFNGLCLEARINDEXPROC driver_glClearIndex = NULL;

  static void REGAL_CALL loader_glClearIndex(Layer *_layer, GLfloat c)
  {
    driver_glClearIndex(c);
  }

  static void REGAL_CALL missing_glClearStencil(GLint s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glClearStencil", " not available." );
  }

  PFNGLCLEARSTENCILPROC driver_glClearStencil = NULL;

  static void REGAL_CALL loader_glClearStencil(Layer *_layer, GLint s)
  {
    driver_glClearStencil(s);
  }

  static void REGAL_CALL missing_glClipPlane(GLenum plane, const GLdouble *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glClipPlane", " not available." );
  }

  PFNGLCLIPPLANEPROC driver_glClipPlane = NULL;

  static void REGAL_CALL loader_glClipPlane(Layer *_layer, GLenum plane, const GLdouble *equation)
  {
    driver_glClipPlane(plane, equation);
  }

  static void REGAL_CALL missing_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3b", " not available." );
  }

  PFNGLCOLOR3BPROC driver_glColor3b = NULL;

  static void REGAL_CALL loader_glColor3b(Layer *_layer, GLbyte red, GLbyte green, GLbyte blue)
  {
    driver_glColor3b(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3bv(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3bv", " not available." );
  }

  PFNGLCOLOR3BVPROC driver_glColor3bv = NULL;

  static void REGAL_CALL loader_glColor3bv(Layer *_layer, const GLbyte *v)
  {
    driver_glColor3bv(v);
  }

  static void REGAL_CALL missing_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3d", " not available." );
  }

  PFNGLCOLOR3DPROC driver_glColor3d = NULL;

  static void REGAL_CALL loader_glColor3d(Layer *_layer, GLdouble red, GLdouble green, GLdouble blue)
  {
    driver_glColor3d(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3dv", " not available." );
  }

  PFNGLCOLOR3DVPROC driver_glColor3dv = NULL;

  static void REGAL_CALL loader_glColor3dv(Layer *_layer, const GLdouble *v)
  {
    driver_glColor3dv(v);
  }

  static void REGAL_CALL missing_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3f", " not available." );
  }

  PFNGLCOLOR3FPROC driver_glColor3f = NULL;

  static void REGAL_CALL loader_glColor3f(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue)
  {
    driver_glColor3f(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3fv", " not available." );
  }

  PFNGLCOLOR3FVPROC driver_glColor3fv = NULL;

  static void REGAL_CALL loader_glColor3fv(Layer *_layer, const GLfloat *v)
  {
    driver_glColor3fv(v);
  }

  static void REGAL_CALL missing_glColor3i(GLint red, GLint green, GLint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3i", " not available." );
  }

  PFNGLCOLOR3IPROC driver_glColor3i = NULL;

  static void REGAL_CALL loader_glColor3i(Layer *_layer, GLint red, GLint green, GLint blue)
  {
    driver_glColor3i(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3iv", " not available." );
  }

  PFNGLCOLOR3IVPROC driver_glColor3iv = NULL;

  static void REGAL_CALL loader_glColor3iv(Layer *_layer, const GLint *v)
  {
    driver_glColor3iv(v);
  }

  static void REGAL_CALL missing_glColor3s(GLshort red, GLshort green, GLshort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3s", " not available." );
  }

  PFNGLCOLOR3SPROC driver_glColor3s = NULL;

  static void REGAL_CALL loader_glColor3s(Layer *_layer, GLshort red, GLshort green, GLshort blue)
  {
    driver_glColor3s(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3sv", " not available." );
  }

  PFNGLCOLOR3SVPROC driver_glColor3sv = NULL;

  static void REGAL_CALL loader_glColor3sv(Layer *_layer, const GLshort *v)
  {
    driver_glColor3sv(v);
  }

  static void REGAL_CALL missing_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3ub", " not available." );
  }

  PFNGLCOLOR3UBPROC driver_glColor3ub = NULL;

  static void REGAL_CALL loader_glColor3ub(Layer *_layer, GLubyte red, GLubyte green, GLubyte blue)
  {
    driver_glColor3ub(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3ubv(const GLubyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3ubv", " not available." );
  }

  PFNGLCOLOR3UBVPROC driver_glColor3ubv = NULL;

  static void REGAL_CALL loader_glColor3ubv(Layer *_layer, const GLubyte *v)
  {
    driver_glColor3ubv(v);
  }

  static void REGAL_CALL missing_glColor3ui(GLuint red, GLuint green, GLuint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3ui", " not available." );
  }

  PFNGLCOLOR3UIPROC driver_glColor3ui = NULL;

  static void REGAL_CALL loader_glColor3ui(Layer *_layer, GLuint red, GLuint green, GLuint blue)
  {
    driver_glColor3ui(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3uiv(const GLuint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3uiv", " not available." );
  }

  PFNGLCOLOR3UIVPROC driver_glColor3uiv = NULL;

  static void REGAL_CALL loader_glColor3uiv(Layer *_layer, const GLuint *v)
  {
    driver_glColor3uiv(v);
  }

  static void REGAL_CALL missing_glColor3us(GLushort red, GLushort green, GLushort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3us", " not available." );
  }

  PFNGLCOLOR3USPROC driver_glColor3us = NULL;

  static void REGAL_CALL loader_glColor3us(Layer *_layer, GLushort red, GLushort green, GLushort blue)
  {
    driver_glColor3us(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3usv(const GLushort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3usv", " not available." );
  }

  PFNGLCOLOR3USVPROC driver_glColor3usv = NULL;

  static void REGAL_CALL loader_glColor3usv(Layer *_layer, const GLushort *v)
  {
    driver_glColor3usv(v);
  }

  static void REGAL_CALL missing_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4b", " not available." );
  }

  PFNGLCOLOR4BPROC driver_glColor4b = NULL;

  static void REGAL_CALL loader_glColor4b(Layer *_layer, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
  {
    driver_glColor4b(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4bv(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4bv", " not available." );
  }

  PFNGLCOLOR4BVPROC driver_glColor4bv = NULL;

  static void REGAL_CALL loader_glColor4bv(Layer *_layer, const GLbyte *v)
  {
    driver_glColor4bv(v);
  }

  static void REGAL_CALL missing_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4d", " not available." );
  }

  PFNGLCOLOR4DPROC driver_glColor4d = NULL;

  static void REGAL_CALL loader_glColor4d(Layer *_layer, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
  {
    driver_glColor4d(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4dv", " not available." );
  }

  PFNGLCOLOR4DVPROC driver_glColor4dv = NULL;

  static void REGAL_CALL loader_glColor4dv(Layer *_layer, const GLdouble *v)
  {
    driver_glColor4dv(v);
  }

  static void REGAL_CALL missing_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4f", " not available." );
  }

  PFNGLCOLOR4FPROC driver_glColor4f = NULL;

  static void REGAL_CALL loader_glColor4f(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
  {
    driver_glColor4f(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4fv", " not available." );
  }

  PFNGLCOLOR4FVPROC driver_glColor4fv = NULL;

  static void REGAL_CALL loader_glColor4fv(Layer *_layer, const GLfloat *v)
  {
    driver_glColor4fv(v);
  }

  static void REGAL_CALL missing_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4i", " not available." );
  }

  PFNGLCOLOR4IPROC driver_glColor4i = NULL;

  static void REGAL_CALL loader_glColor4i(Layer *_layer, GLint red, GLint green, GLint blue, GLint alpha)
  {
    driver_glColor4i(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4iv", " not available." );
  }

  PFNGLCOLOR4IVPROC driver_glColor4iv = NULL;

  static void REGAL_CALL loader_glColor4iv(Layer *_layer, const GLint *v)
  {
    driver_glColor4iv(v);
  }

  static void REGAL_CALL missing_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4s", " not available." );
  }

  PFNGLCOLOR4SPROC driver_glColor4s = NULL;

  static void REGAL_CALL loader_glColor4s(Layer *_layer, GLshort red, GLshort green, GLshort blue, GLshort alpha)
  {
    driver_glColor4s(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4sv", " not available." );
  }

  PFNGLCOLOR4SVPROC driver_glColor4sv = NULL;

  static void REGAL_CALL loader_glColor4sv(Layer *_layer, const GLshort *v)
  {
    driver_glColor4sv(v);
  }

  static void REGAL_CALL missing_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4ub", " not available." );
  }

  PFNGLCOLOR4UBPROC driver_glColor4ub = NULL;

  static void REGAL_CALL loader_glColor4ub(Layer *_layer, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
  {
    driver_glColor4ub(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4ubv(const GLubyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4ubv", " not available." );
  }

  PFNGLCOLOR4UBVPROC driver_glColor4ubv = NULL;

  static void REGAL_CALL loader_glColor4ubv(Layer *_layer, const GLubyte *v)
  {
    driver_glColor4ubv(v);
  }

  static void REGAL_CALL missing_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4ui", " not available." );
  }

  PFNGLCOLOR4UIPROC driver_glColor4ui = NULL;

  static void REGAL_CALL loader_glColor4ui(Layer *_layer, GLuint red, GLuint green, GLuint blue, GLuint alpha)
  {
    driver_glColor4ui(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4uiv(const GLuint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4uiv", " not available." );
  }

  PFNGLCOLOR4UIVPROC driver_glColor4uiv = NULL;

  static void REGAL_CALL loader_glColor4uiv(Layer *_layer, const GLuint *v)
  {
    driver_glColor4uiv(v);
  }

  static void REGAL_CALL missing_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4us", " not available." );
  }

  PFNGLCOLOR4USPROC driver_glColor4us = NULL;

  static void REGAL_CALL loader_glColor4us(Layer *_layer, GLushort red, GLushort green, GLushort blue, GLushort alpha)
  {
    driver_glColor4us(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4usv(const GLushort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4usv", " not available." );
  }

  PFNGLCOLOR4USVPROC driver_glColor4usv = NULL;

  static void REGAL_CALL loader_glColor4usv(Layer *_layer, const GLushort *v)
  {
    driver_glColor4usv(v);
  }

  static void REGAL_CALL missing_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColorMask", " not available." );
  }

  PFNGLCOLORMASKPROC driver_glColorMask = NULL;

  static void REGAL_CALL loader_glColorMask(Layer *_layer, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
  {
    driver_glColorMask(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColorMaterial(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glColorMaterial", " not available." );
  }

  PFNGLCOLORMATERIALPROC driver_glColorMaterial = NULL;

  static void REGAL_CALL loader_glColorMaterial(Layer *_layer, GLenum face, GLenum mode)
  {
    driver_glColorMaterial(face, mode);
  }

  static void REGAL_CALL missing_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(type);
    Warning( "glCopyPixels", " not available." );
  }

  PFNGLCOPYPIXELSPROC driver_glCopyPixels = NULL;

  static void REGAL_CALL loader_glCopyPixels(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
  {
    driver_glCopyPixels(x, y, width, height, type);
  }

  static void REGAL_CALL missing_glCullFace(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glCullFace", " not available." );
  }

  PFNGLCULLFACEPROC driver_glCullFace = NULL;

  static void REGAL_CALL loader_glCullFace(Layer *_layer, GLenum mode)
  {
    driver_glCullFace(mode);
  }

  static void REGAL_CALL missing_glDeleteLists(GLuint list, GLsizei range)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(range);
    Warning( "glDeleteLists", " not available." );
  }

  PFNGLDELETELISTSPROC driver_glDeleteLists = NULL;

  static void REGAL_CALL loader_glDeleteLists(Layer *_layer, GLuint list, GLsizei range)
  {
    driver_glDeleteLists(list, range);
  }

  static void REGAL_CALL missing_glDepthFunc(GLenum func)
  {
    UNUSED_PARAMETER(func);
    Warning( "glDepthFunc", " not available." );
  }

  PFNGLDEPTHFUNCPROC driver_glDepthFunc = NULL;

  static void REGAL_CALL loader_glDepthFunc(Layer *_layer, GLenum func)
  {
    driver_glDepthFunc(func);
  }

  static void REGAL_CALL missing_glDepthMask(GLboolean flag)
  {
    UNUSED_PARAMETER(flag);
    Warning( "glDepthMask", " not available." );
  }

  PFNGLDEPTHMASKPROC driver_glDepthMask = NULL;

  static void REGAL_CALL loader_glDepthMask(Layer *_layer, GLboolean flag)
  {
    driver_glDepthMask(flag);
  }

  static void REGAL_CALL missing_glDepthRange(GLclampd zNear, GLclampd zFar)
  {
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glDepthRange", " not available." );
  }

  PFNGLDEPTHRANGEPROC driver_glDepthRange = NULL;

  static void REGAL_CALL loader_glDepthRange(Layer *_layer, GLclampd zNear, GLclampd zFar)
  {
    driver_glDepthRange(zNear, zFar);
  }

  static void REGAL_CALL missing_glDisable(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glDisable", " not available." );
  }

  PFNGLDISABLEPROC driver_glDisable = NULL;

  static void REGAL_CALL loader_glDisable(Layer *_layer, GLenum cap)
  {
    driver_glDisable(cap);
  }

  static void REGAL_CALL missing_glDrawBuffer(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glDrawBuffer", " not available." );
  }

  PFNGLDRAWBUFFERPROC driver_glDrawBuffer = NULL;

  static void REGAL_CALL loader_glDrawBuffer(Layer *_layer, GLenum mode)
  {
    driver_glDrawBuffer(mode);
  }

  static void REGAL_CALL missing_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glDrawPixels", " not available." );
  }

  PFNGLDRAWPIXELSPROC driver_glDrawPixels = NULL;

  static void REGAL_CALL loader_glDrawPixels(Layer *_layer, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glDrawPixels(width, height, format, type, pixels);
  }

  static void REGAL_CALL missing_glEdgeFlag(GLboolean flag)
  {
    UNUSED_PARAMETER(flag);
    Warning( "glEdgeFlag", " not available." );
  }

  PFNGLEDGEFLAGPROC driver_glEdgeFlag = NULL;

  static void REGAL_CALL loader_glEdgeFlag(Layer *_layer, GLboolean flag)
  {
    driver_glEdgeFlag(flag);
  }

  static void REGAL_CALL missing_glEdgeFlagv(const GLboolean *flag)
  {
    UNUSED_PARAMETER(flag);
    Warning( "glEdgeFlagv", " not available." );
  }

  PFNGLEDGEFLAGVPROC driver_glEdgeFlagv = NULL;

  static void REGAL_CALL loader_glEdgeFlagv(Layer *_layer, const GLboolean *flag)
  {
    driver_glEdgeFlagv(flag);
  }

  static void REGAL_CALL missing_glEnable(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glEnable", " not available." );
  }

  PFNGLENABLEPROC driver_glEnable = NULL;

  static void REGAL_CALL loader_glEnable(Layer *_layer, GLenum cap)
  {
    driver_glEnable(cap);
  }

  static void REGAL_CALL missing_glEnd(void)
  {
    Warning( "glEnd", " not available." );
  }

  PFNGLENDPROC driver_glEnd = NULL;

  static void REGAL_CALL loader_glEnd(Layer *_layer)
  {
    driver_glEnd();
  }

  static void REGAL_CALL missing_glEndList(void)
  {
    Warning( "glEndList", " not available." );
  }

  PFNGLENDLISTPROC driver_glEndList = NULL;

  static void REGAL_CALL loader_glEndList(Layer *_layer)
  {
    driver_glEndList();
  }

  static void REGAL_CALL missing_glEvalCoord1d(GLdouble u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord1d", " not available." );
  }

  PFNGLEVALCOORD1DPROC driver_glEvalCoord1d = NULL;

  static void REGAL_CALL loader_glEvalCoord1d(Layer *_layer, GLdouble u)
  {
    driver_glEvalCoord1d(u);
  }

  static void REGAL_CALL missing_glEvalCoord1dv(const GLdouble *u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord1dv", " not available." );
  }

  PFNGLEVALCOORD1DVPROC driver_glEvalCoord1dv = NULL;

  static void REGAL_CALL loader_glEvalCoord1dv(Layer *_layer, const GLdouble *u)
  {
    driver_glEvalCoord1dv(u);
  }

  static void REGAL_CALL missing_glEvalCoord1f(GLfloat u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord1f", " not available." );
  }

  PFNGLEVALCOORD1FPROC driver_glEvalCoord1f = NULL;

  static void REGAL_CALL loader_glEvalCoord1f(Layer *_layer, GLfloat u)
  {
    driver_glEvalCoord1f(u);
  }

  static void REGAL_CALL missing_glEvalCoord1fv(const GLfloat *u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord1fv", " not available." );
  }

  PFNGLEVALCOORD1FVPROC driver_glEvalCoord1fv = NULL;

  static void REGAL_CALL loader_glEvalCoord1fv(Layer *_layer, const GLfloat *u)
  {
    driver_glEvalCoord1fv(u);
  }

  static void REGAL_CALL missing_glEvalCoord2d(GLdouble u, GLdouble v)
  {
    UNUSED_PARAMETER(u);
    UNUSED_PARAMETER(v);
    Warning( "glEvalCoord2d", " not available." );
  }

  PFNGLEVALCOORD2DPROC driver_glEvalCoord2d = NULL;

  static void REGAL_CALL loader_glEvalCoord2d(Layer *_layer, GLdouble u, GLdouble v)
  {
    driver_glEvalCoord2d(u, v);
  }

  static void REGAL_CALL missing_glEvalCoord2dv(const GLdouble *u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord2dv", " not available." );
  }

  PFNGLEVALCOORD2DVPROC driver_glEvalCoord2dv = NULL;

  static void REGAL_CALL loader_glEvalCoord2dv(Layer *_layer, const GLdouble *u)
  {
    driver_glEvalCoord2dv(u);
  }

  static void REGAL_CALL missing_glEvalCoord2f(GLfloat u, GLfloat v)
  {
    UNUSED_PARAMETER(u);
    UNUSED_PARAMETER(v);
    Warning( "glEvalCoord2f", " not available." );
  }

  PFNGLEVALCOORD2FPROC driver_glEvalCoord2f = NULL;

  static void REGAL_CALL loader_glEvalCoord2f(Layer *_layer, GLfloat u, GLfloat v)
  {
    driver_glEvalCoord2f(u, v);
  }

  static void REGAL_CALL missing_glEvalCoord2fv(const GLfloat *u)
  {
    UNUSED_PARAMETER(u);
    Warning( "glEvalCoord2fv", " not available." );
  }

  PFNGLEVALCOORD2FVPROC driver_glEvalCoord2fv = NULL;

  static void REGAL_CALL loader_glEvalCoord2fv(Layer *_layer, const GLfloat *u)
  {
    driver_glEvalCoord2fv(u);
  }

  static void REGAL_CALL missing_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(i1);
    UNUSED_PARAMETER(i2);
    Warning( "glEvalMesh1", " not available." );
  }

  PFNGLEVALMESH1PROC driver_glEvalMesh1 = NULL;

  static void REGAL_CALL loader_glEvalMesh1(Layer *_layer, GLenum mode, GLint i1, GLint i2)
  {
    driver_glEvalMesh1(mode, i1, i2);
  }

  static void REGAL_CALL missing_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(i1);
    UNUSED_PARAMETER(i2);
    UNUSED_PARAMETER(j1);
    UNUSED_PARAMETER(j2);
    Warning( "glEvalMesh2", " not available." );
  }

  PFNGLEVALMESH2PROC driver_glEvalMesh2 = NULL;

  static void REGAL_CALL loader_glEvalMesh2(Layer *_layer, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
  {
    driver_glEvalMesh2(mode, i1, i2, j1, j2);
  }

  static void REGAL_CALL missing_glEvalPoint1(GLint i)
  {
    UNUSED_PARAMETER(i);
    Warning( "glEvalPoint1", " not available." );
  }

  PFNGLEVALPOINT1PROC driver_glEvalPoint1 = NULL;

  static void REGAL_CALL loader_glEvalPoint1(Layer *_layer, GLint i)
  {
    driver_glEvalPoint1(i);
  }

  static void REGAL_CALL missing_glEvalPoint2(GLint i, GLint j)
  {
    UNUSED_PARAMETER(i);
    UNUSED_PARAMETER(j);
    Warning( "glEvalPoint2", " not available." );
  }

  PFNGLEVALPOINT2PROC driver_glEvalPoint2 = NULL;

  static void REGAL_CALL loader_glEvalPoint2(Layer *_layer, GLint i, GLint j)
  {
    driver_glEvalPoint2(i, j);
  }

  static void REGAL_CALL missing_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(buffer);
    Warning( "glFeedbackBuffer", " not available." );
  }

  PFNGLFEEDBACKBUFFERPROC driver_glFeedbackBuffer = NULL;

  static void REGAL_CALL loader_glFeedbackBuffer(Layer *_layer, GLsizei size, GLenum type, GLfloat *buffer)
  {
    driver_glFeedbackBuffer(size, type, buffer);
  }

  static void REGAL_CALL missing_glFinish(void)
  {
    Warning( "glFinish", " not available." );
  }

  PFNGLFINISHPROC driver_glFinish = NULL;

  static void REGAL_CALL loader_glFinish(Layer *_layer)
  {
    driver_glFinish();
  }

  static void REGAL_CALL missing_glFlush(void)
  {
    Warning( "glFlush", " not available." );
  }

  PFNGLFLUSHPROC driver_glFlush = NULL;

  static void REGAL_CALL loader_glFlush(Layer *_layer)
  {
    driver_glFlush();
  }

  static void REGAL_CALL missing_glFogf(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFogf", " not available." );
  }

  PFNGLFOGFPROC driver_glFogf = NULL;

  static void REGAL_CALL loader_glFogf(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glFogf(pname, param);
  }

  static void REGAL_CALL missing_glFogfv(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFogfv", " not available." );
  }

  PFNGLFOGFVPROC driver_glFogfv = NULL;

  static void REGAL_CALL loader_glFogfv(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glFogfv(pname, params);
  }

  static void REGAL_CALL missing_glFogi(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFogi", " not available." );
  }

  PFNGLFOGIPROC driver_glFogi = NULL;

  static void REGAL_CALL loader_glFogi(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glFogi(pname, param);
  }

  static void REGAL_CALL missing_glFogiv(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFogiv", " not available." );
  }

  PFNGLFOGIVPROC driver_glFogiv = NULL;

  static void REGAL_CALL loader_glFogiv(Layer *_layer, GLenum pname, const GLint *params)
  {
    driver_glFogiv(pname, params);
  }

  static void REGAL_CALL missing_glFrontFace(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glFrontFace", " not available." );
  }

  PFNGLFRONTFACEPROC driver_glFrontFace = NULL;

  static void REGAL_CALL loader_glFrontFace(Layer *_layer, GLenum mode)
  {
    driver_glFrontFace(mode);
  }

  static void REGAL_CALL missing_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glFrustum", " not available." );
  }

  PFNGLFRUSTUMPROC driver_glFrustum = NULL;

  static void REGAL_CALL loader_glFrustum(Layer *_layer, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    driver_glFrustum(left, right, bottom, top, zNear, zFar);
  }

  static GLuint REGAL_CALL missing_glGenLists(GLsizei range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenLists", " not available." );
    return 0;
  }

  PFNGLGENLISTSPROC driver_glGenLists = NULL;

  static GLuint REGAL_CALL loader_glGenLists(Layer *_layer, GLsizei range)
  {
    return driver_glGenLists(range);
  }

  static void REGAL_CALL missing_glGetBooleanv(GLenum pname, GLboolean *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBooleanv", " not available." );
  }

  PFNGLGETBOOLEANVPROC driver_glGetBooleanv = NULL;

  static void REGAL_CALL loader_glGetBooleanv(Layer *_layer, GLenum pname, GLboolean *params)
  {
    driver_glGetBooleanv(pname, params);
  }

  static void REGAL_CALL missing_glGetClipPlane(GLenum plane, GLdouble *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glGetClipPlane", " not available." );
  }

  PFNGLGETCLIPPLANEPROC driver_glGetClipPlane = NULL;

  static void REGAL_CALL loader_glGetClipPlane(Layer *_layer, GLenum plane, GLdouble *equation)
  {
    driver_glGetClipPlane(plane, equation);
  }

  static void REGAL_CALL missing_glGetDoublev(GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetDoublev", " not available." );
  }

  PFNGLGETDOUBLEVPROC driver_glGetDoublev = NULL;

  static void REGAL_CALL loader_glGetDoublev(Layer *_layer, GLenum pname, GLdouble *params)
  {
    driver_glGetDoublev(pname, params);
  }

  static GLenum REGAL_CALL missing_glGetError(void)
  {
    Warning( "glGetError", " not available." );
    return 0;
  }

  PFNGLGETERRORPROC driver_glGetError = NULL;

  static GLenum REGAL_CALL loader_glGetError(Layer *_layer)
  {
    return driver_glGetError();
  }

  static void REGAL_CALL missing_glGetFloatv(GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFloatv", " not available." );
  }

  PFNGLGETFLOATVPROC driver_glGetFloatv = NULL;

  static void REGAL_CALL loader_glGetFloatv(Layer *_layer, GLenum pname, GLfloat *params)
  {
    driver_glGetFloatv(pname, params);
  }

  static void REGAL_CALL missing_glGetIntegerv(GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetIntegerv", " not available." );
  }

  PFNGLGETINTEGERVPROC driver_glGetIntegerv = NULL;

  static void REGAL_CALL loader_glGetIntegerv(Layer *_layer, GLenum pname, GLint *params)
  {
    driver_glGetIntegerv(pname, params);
  }

  static void REGAL_CALL missing_glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetLightfv", " not available." );
  }

  PFNGLGETLIGHTFVPROC driver_glGetLightfv = NULL;

  static void REGAL_CALL loader_glGetLightfv(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
  {
    driver_glGetLightfv(light, pname, params);
  }

  static void REGAL_CALL missing_glGetLightiv(GLenum light, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetLightiv", " not available." );
  }

  PFNGLGETLIGHTIVPROC driver_glGetLightiv = NULL;

  static void REGAL_CALL loader_glGetLightiv(Layer *_layer, GLenum light, GLenum pname, GLint *params)
  {
    driver_glGetLightiv(light, pname, params);
  }

  static void REGAL_CALL missing_glGetMapdv(GLenum target, GLenum query, GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(v);
    Warning( "glGetMapdv", " not available." );
  }

  PFNGLGETMAPDVPROC driver_glGetMapdv = NULL;

  static void REGAL_CALL loader_glGetMapdv(Layer *_layer, GLenum target, GLenum query, GLdouble *v)
  {
    driver_glGetMapdv(target, query, v);
  }

  static void REGAL_CALL missing_glGetMapfv(GLenum target, GLenum query, GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(v);
    Warning( "glGetMapfv", " not available." );
  }

  PFNGLGETMAPFVPROC driver_glGetMapfv = NULL;

  static void REGAL_CALL loader_glGetMapfv(Layer *_layer, GLenum target, GLenum query, GLfloat *v)
  {
    driver_glGetMapfv(target, query, v);
  }

  static void REGAL_CALL missing_glGetMapiv(GLenum target, GLenum query, GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(v);
    Warning( "glGetMapiv", " not available." );
  }

  PFNGLGETMAPIVPROC driver_glGetMapiv = NULL;

  static void REGAL_CALL loader_glGetMapiv(Layer *_layer, GLenum target, GLenum query, GLint *v)
  {
    driver_glGetMapiv(target, query, v);
  }

  static void REGAL_CALL missing_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMaterialfv", " not available." );
  }

  PFNGLGETMATERIALFVPROC driver_glGetMaterialfv = NULL;

  static void REGAL_CALL loader_glGetMaterialfv(Layer *_layer, GLenum face, GLenum pname, GLfloat *params)
  {
    driver_glGetMaterialfv(face, pname, params);
  }

  static void REGAL_CALL missing_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMaterialiv", " not available." );
  }

  PFNGLGETMATERIALIVPROC driver_glGetMaterialiv = NULL;

  static void REGAL_CALL loader_glGetMaterialiv(Layer *_layer, GLenum face, GLenum pname, GLint *params)
  {
    driver_glGetMaterialiv(face, pname, params);
  }

  static void REGAL_CALL missing_glGetPixelMapfv(GLenum map, GLfloat *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(values);
    Warning( "glGetPixelMapfv", " not available." );
  }

  PFNGLGETPIXELMAPFVPROC driver_glGetPixelMapfv = NULL;

  static void REGAL_CALL loader_glGetPixelMapfv(Layer *_layer, GLenum map, GLfloat *values)
  {
    driver_glGetPixelMapfv(map, values);
  }

  static void REGAL_CALL missing_glGetPixelMapuiv(GLenum map, GLuint *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(values);
    Warning( "glGetPixelMapuiv", " not available." );
  }

  PFNGLGETPIXELMAPUIVPROC driver_glGetPixelMapuiv = NULL;

  static void REGAL_CALL loader_glGetPixelMapuiv(Layer *_layer, GLenum map, GLuint *values)
  {
    driver_glGetPixelMapuiv(map, values);
  }

  static void REGAL_CALL missing_glGetPixelMapusv(GLenum map, GLushort *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(values);
    Warning( "glGetPixelMapusv", " not available." );
  }

  PFNGLGETPIXELMAPUSVPROC driver_glGetPixelMapusv = NULL;

  static void REGAL_CALL loader_glGetPixelMapusv(Layer *_layer, GLenum map, GLushort *values)
  {
    driver_glGetPixelMapusv(map, values);
  }

  static void REGAL_CALL missing_glGetPolygonStipple(GLubyte *mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glGetPolygonStipple", " not available." );
  }

  PFNGLGETPOLYGONSTIPPLEPROC driver_glGetPolygonStipple = NULL;

  static void REGAL_CALL loader_glGetPolygonStipple(Layer *_layer, GLubyte *mask)
  {
    driver_glGetPolygonStipple(mask);
  }

  static const GLubyte *REGAL_CALL missing_glGetString(GLenum name)
  {
    UNUSED_PARAMETER(name);
    Warning( "glGetString", " not available." );
    return NULL;
  }

  PFNGLGETSTRINGPROC driver_glGetString = NULL;

  static const GLubyte *REGAL_CALL loader_glGetString(Layer *_layer, GLenum name)
  {
    return driver_glGetString(name);
  }

  static void REGAL_CALL missing_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexEnvfv", " not available." );
  }

  PFNGLGETTEXENVFVPROC driver_glGetTexEnvfv = NULL;

  static void REGAL_CALL loader_glGetTexEnvfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetTexEnvfv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexEnviv", " not available." );
  }

  PFNGLGETTEXENVIVPROC driver_glGetTexEnviv = NULL;

  static void REGAL_CALL loader_glGetTexEnviv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetTexEnviv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGendv", " not available." );
  }

  PFNGLGETTEXGENDVPROC driver_glGetTexGendv = NULL;

  static void REGAL_CALL loader_glGetTexGendv(Layer *_layer, GLenum coord, GLenum pname, GLdouble *params)
  {
    driver_glGetTexGendv(coord, pname, params);
  }

  static void REGAL_CALL missing_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGenfv", " not available." );
  }

  PFNGLGETTEXGENFVPROC driver_glGetTexGenfv = NULL;

  static void REGAL_CALL loader_glGetTexGenfv(Layer *_layer, GLenum coord, GLenum pname, GLfloat *params)
  {
    driver_glGetTexGenfv(coord, pname, params);
  }

  static void REGAL_CALL missing_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGeniv", " not available." );
  }

  PFNGLGETTEXGENIVPROC driver_glGetTexGeniv = NULL;

  static void REGAL_CALL loader_glGetTexGeniv(Layer *_layer, GLenum coord, GLenum pname, GLint *params)
  {
    driver_glGetTexGeniv(coord, pname, params);
  }

  static void REGAL_CALL missing_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glGetTexImage", " not available." );
  }

  PFNGLGETTEXIMAGEPROC driver_glGetTexImage = NULL;

  static void REGAL_CALL loader_glGetTexImage(Layer *_layer, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    driver_glGetTexImage(target, level, format, type, pixels);
  }

  static void REGAL_CALL missing_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexLevelParameterfv", " not available." );
  }

  PFNGLGETTEXLEVELPARAMETERFVPROC driver_glGetTexLevelParameterfv = NULL;

  static void REGAL_CALL loader_glGetTexLevelParameterfv(Layer *_layer, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    driver_glGetTexLevelParameterfv(target, level, pname, params);
  }

  static void REGAL_CALL missing_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexLevelParameteriv", " not available." );
  }

  PFNGLGETTEXLEVELPARAMETERIVPROC driver_glGetTexLevelParameteriv = NULL;

  static void REGAL_CALL loader_glGetTexLevelParameteriv(Layer *_layer, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    driver_glGetTexLevelParameteriv(target, level, pname, params);
  }

  static void REGAL_CALL missing_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterfv", " not available." );
  }

  PFNGLGETTEXPARAMETERFVPROC driver_glGetTexParameterfv = NULL;

  static void REGAL_CALL loader_glGetTexParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetTexParameterfv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameteriv", " not available." );
  }

  PFNGLGETTEXPARAMETERIVPROC driver_glGetTexParameteriv = NULL;

  static void REGAL_CALL loader_glGetTexParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetTexParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glHint(GLenum target, GLenum mode)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(mode);
    Warning( "glHint", " not available." );
  }

  PFNGLHINTPROC driver_glHint = NULL;

  static void REGAL_CALL loader_glHint(Layer *_layer, GLenum target, GLenum mode)
  {
    driver_glHint(target, mode);
  }

  static void REGAL_CALL missing_glIndexMask(GLuint mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glIndexMask", " not available." );
  }

  PFNGLINDEXMASKPROC driver_glIndexMask = NULL;

  static void REGAL_CALL loader_glIndexMask(Layer *_layer, GLuint mask)
  {
    driver_glIndexMask(mask);
  }

  static void REGAL_CALL missing_glIndexd(GLdouble c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexd", " not available." );
  }

  PFNGLINDEXDPROC driver_glIndexd = NULL;

  static void REGAL_CALL loader_glIndexd(Layer *_layer, GLdouble c)
  {
    driver_glIndexd(c);
  }

  static void REGAL_CALL missing_glIndexdv(const GLdouble *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexdv", " not available." );
  }

  PFNGLINDEXDVPROC driver_glIndexdv = NULL;

  static void REGAL_CALL loader_glIndexdv(Layer *_layer, const GLdouble *c)
  {
    driver_glIndexdv(c);
  }

  static void REGAL_CALL missing_glIndexf(GLfloat c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexf", " not available." );
  }

  PFNGLINDEXFPROC driver_glIndexf = NULL;

  static void REGAL_CALL loader_glIndexf(Layer *_layer, GLfloat c)
  {
    driver_glIndexf(c);
  }

  static void REGAL_CALL missing_glIndexfv(const GLfloat *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexfv", " not available." );
  }

  PFNGLINDEXFVPROC driver_glIndexfv = NULL;

  static void REGAL_CALL loader_glIndexfv(Layer *_layer, const GLfloat *c)
  {
    driver_glIndexfv(c);
  }

  static void REGAL_CALL missing_glIndexi(GLint c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexi", " not available." );
  }

  PFNGLINDEXIPROC driver_glIndexi = NULL;

  static void REGAL_CALL loader_glIndexi(Layer *_layer, GLint c)
  {
    driver_glIndexi(c);
  }

  static void REGAL_CALL missing_glIndexiv(const GLint *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexiv", " not available." );
  }

  PFNGLINDEXIVPROC driver_glIndexiv = NULL;

  static void REGAL_CALL loader_glIndexiv(Layer *_layer, const GLint *c)
  {
    driver_glIndexiv(c);
  }

  static void REGAL_CALL missing_glIndexs(GLshort c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexs", " not available." );
  }

  PFNGLINDEXSPROC driver_glIndexs = NULL;

  static void REGAL_CALL loader_glIndexs(Layer *_layer, GLshort c)
  {
    driver_glIndexs(c);
  }

  static void REGAL_CALL missing_glIndexsv(const GLshort *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexsv", " not available." );
  }

  PFNGLINDEXSVPROC driver_glIndexsv = NULL;

  static void REGAL_CALL loader_glIndexsv(Layer *_layer, const GLshort *c)
  {
    driver_glIndexsv(c);
  }

  static void REGAL_CALL missing_glInitNames(void)
  {
    Warning( "glInitNames", " not available." );
  }

  PFNGLINITNAMESPROC driver_glInitNames = NULL;

  static void REGAL_CALL loader_glInitNames(Layer *_layer)
  {
    driver_glInitNames();
  }

  static GLboolean REGAL_CALL missing_glIsEnabled(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glIsEnabled", " not available." );
    return GL_FALSE;
  }

  PFNGLISENABLEDPROC driver_glIsEnabled = NULL;

  static GLboolean REGAL_CALL loader_glIsEnabled(Layer *_layer, GLenum cap)
  {
    return driver_glIsEnabled(cap);
  }

  static GLboolean REGAL_CALL missing_glIsList(GLuint list)
  {
    UNUSED_PARAMETER(list);
    Warning( "glIsList", " not available." );
    return GL_FALSE;
  }

  PFNGLISLISTPROC driver_glIsList = NULL;

  static GLboolean REGAL_CALL loader_glIsList(Layer *_layer, GLuint list)
  {
    return driver_glIsList(list);
  }

  static void REGAL_CALL missing_glLightModelf(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightModelf", " not available." );
  }

  PFNGLLIGHTMODELFPROC driver_glLightModelf = NULL;

  static void REGAL_CALL loader_glLightModelf(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glLightModelf(pname, param);
  }

  static void REGAL_CALL missing_glLightModelfv(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightModelfv", " not available." );
  }

  PFNGLLIGHTMODELFVPROC driver_glLightModelfv = NULL;

  static void REGAL_CALL loader_glLightModelfv(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glLightModelfv(pname, params);
  }

  static void REGAL_CALL missing_glLightModeli(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightModeli", " not available." );
  }

  PFNGLLIGHTMODELIPROC driver_glLightModeli = NULL;

  static void REGAL_CALL loader_glLightModeli(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glLightModeli(pname, param);
  }

  static void REGAL_CALL missing_glLightModeliv(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightModeliv", " not available." );
  }

  PFNGLLIGHTMODELIVPROC driver_glLightModeliv = NULL;

  static void REGAL_CALL loader_glLightModeliv(Layer *_layer, GLenum pname, const GLint *params)
  {
    driver_glLightModeliv(pname, params);
  }

  static void REGAL_CALL missing_glLightf(GLenum light, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightf", " not available." );
  }

  PFNGLLIGHTFPROC driver_glLightf = NULL;

  static void REGAL_CALL loader_glLightf(Layer *_layer, GLenum light, GLenum pname, GLfloat param)
  {
    driver_glLightf(light, pname, param);
  }

  static void REGAL_CALL missing_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightfv", " not available." );
  }

  PFNGLLIGHTFVPROC driver_glLightfv = NULL;

  static void REGAL_CALL loader_glLightfv(Layer *_layer, GLenum light, GLenum pname, const GLfloat *params)
  {
    driver_glLightfv(light, pname, params);
  }

  static void REGAL_CALL missing_glLighti(GLenum light, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLighti", " not available." );
  }

  PFNGLLIGHTIPROC driver_glLighti = NULL;

  static void REGAL_CALL loader_glLighti(Layer *_layer, GLenum light, GLenum pname, GLint param)
  {
    driver_glLighti(light, pname, param);
  }

  static void REGAL_CALL missing_glLightiv(GLenum light, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightiv", " not available." );
  }

  PFNGLLIGHTIVPROC driver_glLightiv = NULL;

  static void REGAL_CALL loader_glLightiv(Layer *_layer, GLenum light, GLenum pname, const GLint *params)
  {
    driver_glLightiv(light, pname, params);
  }

  static void REGAL_CALL missing_glLineStipple(GLint factor, GLushort pattern)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(pattern);
    Warning( "glLineStipple", " not available." );
  }

  PFNGLLINESTIPPLEPROC driver_glLineStipple = NULL;

  static void REGAL_CALL loader_glLineStipple(Layer *_layer, GLint factor, GLushort pattern)
  {
    driver_glLineStipple(factor, pattern);
  }

  static void REGAL_CALL missing_glLineWidth(GLfloat width)
  {
    UNUSED_PARAMETER(width);
    Warning( "glLineWidth", " not available." );
  }

  PFNGLLINEWIDTHPROC driver_glLineWidth = NULL;

  static void REGAL_CALL loader_glLineWidth(Layer *_layer, GLfloat width)
  {
    driver_glLineWidth(width);
  }

  static void REGAL_CALL missing_glListBase(GLuint base)
  {
    UNUSED_PARAMETER(base);
    Warning( "glListBase", " not available." );
  }

  PFNGLLISTBASEPROC driver_glListBase = NULL;

  static void REGAL_CALL loader_glListBase(Layer *_layer, GLuint base)
  {
    driver_glListBase(base);
  }

  static void REGAL_CALL missing_glLoadIdentity(void)
  {
    Warning( "glLoadIdentity", " not available." );
  }

  PFNGLLOADIDENTITYPROC driver_glLoadIdentity = NULL;

  static void REGAL_CALL loader_glLoadIdentity(Layer *_layer)
  {
    driver_glLoadIdentity();
  }

  static void REGAL_CALL missing_glLoadMatrixd(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadMatrixd", " not available." );
  }

  PFNGLLOADMATRIXDPROC driver_glLoadMatrixd = NULL;

  static void REGAL_CALL loader_glLoadMatrixd(Layer *_layer, const GLdouble *m)
  {
    driver_glLoadMatrixd(m);
  }

  static void REGAL_CALL missing_glLoadMatrixf(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadMatrixf", " not available." );
  }

  PFNGLLOADMATRIXFPROC driver_glLoadMatrixf = NULL;

  static void REGAL_CALL loader_glLoadMatrixf(Layer *_layer, const GLfloat *m)
  {
    driver_glLoadMatrixf(m);
  }

  static void REGAL_CALL missing_glLoadName(GLuint name)
  {
    UNUSED_PARAMETER(name);
    Warning( "glLoadName", " not available." );
  }

  PFNGLLOADNAMEPROC driver_glLoadName = NULL;

  static void REGAL_CALL loader_glLoadName(Layer *_layer, GLuint name)
  {
    driver_glLoadName(name);
  }

  static void REGAL_CALL missing_glLogicOp(GLenum opcode)
  {
    UNUSED_PARAMETER(opcode);
    Warning( "glLogicOp", " not available." );
  }

  PFNGLLOGICOPPROC driver_glLogicOp = NULL;

  static void REGAL_CALL loader_glLogicOp(Layer *_layer, GLenum opcode)
  {
    driver_glLogicOp(opcode);
  }

  static void REGAL_CALL missing_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(order);
    UNUSED_PARAMETER(points);
    Warning( "glMap1d", " not available." );
  }

  PFNGLMAP1DPROC driver_glMap1d = NULL;

  static void REGAL_CALL loader_glMap1d(Layer *_layer, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
  {
    driver_glMap1d(target, u1, u2, stride, order, points);
  }

  static void REGAL_CALL missing_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(order);
    UNUSED_PARAMETER(points);
    Warning( "glMap1f", " not available." );
  }

  PFNGLMAP1FPROC driver_glMap1f = NULL;

  static void REGAL_CALL loader_glMap1f(Layer *_layer, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
  {
    driver_glMap1f(target, u1, u2, stride, order, points);
  }

  static void REGAL_CALL missing_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(points);
    Warning( "glMap2d", " not available." );
  }

  PFNGLMAP2DPROC driver_glMap2d = NULL;

  static void REGAL_CALL loader_glMap2d(Layer *_layer, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
  {
    driver_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }

  static void REGAL_CALL missing_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(points);
    Warning( "glMap2f", " not available." );
  }

  PFNGLMAP2FPROC driver_glMap2f = NULL;

  static void REGAL_CALL loader_glMap2f(Layer *_layer, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
  {
    driver_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }

  static void REGAL_CALL missing_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
  {
    UNUSED_PARAMETER(un);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    Warning( "glMapGrid1d", " not available." );
  }

  PFNGLMAPGRID1DPROC driver_glMapGrid1d = NULL;

  static void REGAL_CALL loader_glMapGrid1d(Layer *_layer, GLint un, GLdouble u1, GLdouble u2)
  {
    driver_glMapGrid1d(un, u1, u2);
  }

  static void REGAL_CALL missing_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
  {
    UNUSED_PARAMETER(un);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    Warning( "glMapGrid1f", " not available." );
  }

  PFNGLMAPGRID1FPROC driver_glMapGrid1f = NULL;

  static void REGAL_CALL loader_glMapGrid1f(Layer *_layer, GLint un, GLfloat u1, GLfloat u2)
  {
    driver_glMapGrid1f(un, u1, u2);
  }

  static void REGAL_CALL missing_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
  {
    UNUSED_PARAMETER(un);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(vn);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glMapGrid2d", " not available." );
  }

  PFNGLMAPGRID2DPROC driver_glMapGrid2d = NULL;

  static void REGAL_CALL loader_glMapGrid2d(Layer *_layer, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
  {
    driver_glMapGrid2d(un, u1, u2, vn, v1, v2);
  }

  static void REGAL_CALL missing_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
  {
    UNUSED_PARAMETER(un);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(vn);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glMapGrid2f", " not available." );
  }

  PFNGLMAPGRID2FPROC driver_glMapGrid2f = NULL;

  static void REGAL_CALL loader_glMapGrid2f(Layer *_layer, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
  {
    driver_glMapGrid2f(un, u1, u2, vn, v1, v2);
  }

  static void REGAL_CALL missing_glMaterialf(GLenum face, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMaterialf", " not available." );
  }

  PFNGLMATERIALFPROC driver_glMaterialf = NULL;

  static void REGAL_CALL loader_glMaterialf(Layer *_layer, GLenum face, GLenum pname, GLfloat param)
  {
    driver_glMaterialf(face, pname, param);
  }

  static void REGAL_CALL missing_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMaterialfv", " not available." );
  }

  PFNGLMATERIALFVPROC driver_glMaterialfv = NULL;

  static void REGAL_CALL loader_glMaterialfv(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
  {
    driver_glMaterialfv(face, pname, params);
  }

  static void REGAL_CALL missing_glMateriali(GLenum face, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMateriali", " not available." );
  }

  PFNGLMATERIALIPROC driver_glMateriali = NULL;

  static void REGAL_CALL loader_glMateriali(Layer *_layer, GLenum face, GLenum pname, GLint param)
  {
    driver_glMateriali(face, pname, param);
  }

  static void REGAL_CALL missing_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMaterialiv", " not available." );
  }

  PFNGLMATERIALIVPROC driver_glMaterialiv = NULL;

  static void REGAL_CALL loader_glMaterialiv(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
  {
    driver_glMaterialiv(face, pname, params);
  }

  static void REGAL_CALL missing_glMatrixMode(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glMatrixMode", " not available." );
  }

  PFNGLMATRIXMODEPROC driver_glMatrixMode = NULL;

  static void REGAL_CALL loader_glMatrixMode(Layer *_layer, GLenum mode)
  {
    driver_glMatrixMode(mode);
  }

  static void REGAL_CALL missing_glMultMatrixd(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultMatrixd", " not available." );
  }

  PFNGLMULTMATRIXDPROC driver_glMultMatrixd = NULL;

  static void REGAL_CALL loader_glMultMatrixd(Layer *_layer, const GLdouble *m)
  {
    driver_glMultMatrixd(m);
  }

  static void REGAL_CALL missing_glMultMatrixf(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultMatrixf", " not available." );
  }

  PFNGLMULTMATRIXFPROC driver_glMultMatrixf = NULL;

  static void REGAL_CALL loader_glMultMatrixf(Layer *_layer, const GLfloat *m)
  {
    driver_glMultMatrixf(m);
  }

  static void REGAL_CALL missing_glNewList(GLuint list, GLenum mode)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(mode);
    Warning( "glNewList", " not available." );
  }

  PFNGLNEWLISTPROC driver_glNewList = NULL;

  static void REGAL_CALL loader_glNewList(Layer *_layer, GLuint list, GLenum mode)
  {
    driver_glNewList(list, mode);
  }

  static void REGAL_CALL missing_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3b", " not available." );
  }

  PFNGLNORMAL3BPROC driver_glNormal3b = NULL;

  static void REGAL_CALL loader_glNormal3b(Layer *_layer, GLbyte nx, GLbyte ny, GLbyte nz)
  {
    driver_glNormal3b(nx, ny, nz);
  }

  static void REGAL_CALL missing_glNormal3bv(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3bv", " not available." );
  }

  PFNGLNORMAL3BVPROC driver_glNormal3bv = NULL;

  static void REGAL_CALL loader_glNormal3bv(Layer *_layer, const GLbyte *v)
  {
    driver_glNormal3bv(v);
  }

  static void REGAL_CALL missing_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3d", " not available." );
  }

  PFNGLNORMAL3DPROC driver_glNormal3d = NULL;

  static void REGAL_CALL loader_glNormal3d(Layer *_layer, GLdouble nx, GLdouble ny, GLdouble nz)
  {
    driver_glNormal3d(nx, ny, nz);
  }

  static void REGAL_CALL missing_glNormal3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3dv", " not available." );
  }

  PFNGLNORMAL3DVPROC driver_glNormal3dv = NULL;

  static void REGAL_CALL loader_glNormal3dv(Layer *_layer, const GLdouble *v)
  {
    driver_glNormal3dv(v);
  }

  static void REGAL_CALL missing_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3f", " not available." );
  }

  PFNGLNORMAL3FPROC driver_glNormal3f = NULL;

  static void REGAL_CALL loader_glNormal3f(Layer *_layer, GLfloat nx, GLfloat ny, GLfloat nz)
  {
    driver_glNormal3f(nx, ny, nz);
  }

  static void REGAL_CALL missing_glNormal3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3fv", " not available." );
  }

  PFNGLNORMAL3FVPROC driver_glNormal3fv = NULL;

  static void REGAL_CALL loader_glNormal3fv(Layer *_layer, const GLfloat *v)
  {
    driver_glNormal3fv(v);
  }

  static void REGAL_CALL missing_glNormal3i(GLint nx, GLint ny, GLint nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3i", " not available." );
  }

  PFNGLNORMAL3IPROC driver_glNormal3i = NULL;

  static void REGAL_CALL loader_glNormal3i(Layer *_layer, GLint nx, GLint ny, GLint nz)
  {
    driver_glNormal3i(nx, ny, nz);
  }

  static void REGAL_CALL missing_glNormal3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3iv", " not available." );
  }

  PFNGLNORMAL3IVPROC driver_glNormal3iv = NULL;

  static void REGAL_CALL loader_glNormal3iv(Layer *_layer, const GLint *v)
  {
    driver_glNormal3iv(v);
  }

  static void REGAL_CALL missing_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3s", " not available." );
  }

  PFNGLNORMAL3SPROC driver_glNormal3s = NULL;

  static void REGAL_CALL loader_glNormal3s(Layer *_layer, GLshort nx, GLshort ny, GLshort nz)
  {
    driver_glNormal3s(nx, ny, nz);
  }

  static void REGAL_CALL missing_glNormal3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3sv", " not available." );
  }

  PFNGLNORMAL3SVPROC driver_glNormal3sv = NULL;

  static void REGAL_CALL loader_glNormal3sv(Layer *_layer, const GLshort *v)
  {
    driver_glNormal3sv(v);
  }

  static void REGAL_CALL missing_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glOrtho", " not available." );
  }

  PFNGLORTHOPROC driver_glOrtho = NULL;

  static void REGAL_CALL loader_glOrtho(Layer *_layer, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    driver_glOrtho(left, right, bottom, top, zNear, zFar);
  }

  static void REGAL_CALL missing_glPassThrough(GLfloat token)
  {
    UNUSED_PARAMETER(token);
    Warning( "glPassThrough", " not available." );
  }

  PFNGLPASSTHROUGHPROC driver_glPassThrough = NULL;

  static void REGAL_CALL loader_glPassThrough(Layer *_layer, GLfloat token)
  {
    driver_glPassThrough(token);
  }

  static void REGAL_CALL missing_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(mapsize);
    UNUSED_PARAMETER(values);
    Warning( "glPixelMapfv", " not available." );
  }

  PFNGLPIXELMAPFVPROC driver_glPixelMapfv = NULL;

  static void REGAL_CALL loader_glPixelMapfv(Layer *_layer, GLenum map, GLsizei mapsize, const GLfloat *values)
  {
    driver_glPixelMapfv(map, mapsize, values);
  }

  static void REGAL_CALL missing_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(mapsize);
    UNUSED_PARAMETER(values);
    Warning( "glPixelMapuiv", " not available." );
  }

  PFNGLPIXELMAPUIVPROC driver_glPixelMapuiv = NULL;

  static void REGAL_CALL loader_glPixelMapuiv(Layer *_layer, GLenum map, GLsizei mapsize, const GLuint *values)
  {
    driver_glPixelMapuiv(map, mapsize, values);
  }

  static void REGAL_CALL missing_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(mapsize);
    UNUSED_PARAMETER(values);
    Warning( "glPixelMapusv", " not available." );
  }

  PFNGLPIXELMAPUSVPROC driver_glPixelMapusv = NULL;

  static void REGAL_CALL loader_glPixelMapusv(Layer *_layer, GLenum map, GLsizei mapsize, const GLushort *values)
  {
    driver_glPixelMapusv(map, mapsize, values);
  }

  static void REGAL_CALL missing_glPixelStoref(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelStoref", " not available." );
  }

  PFNGLPIXELSTOREFPROC driver_glPixelStoref = NULL;

  static void REGAL_CALL loader_glPixelStoref(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glPixelStoref(pname, param);
  }

  static void REGAL_CALL missing_glPixelStorei(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelStorei", " not available." );
  }

  PFNGLPIXELSTOREIPROC driver_glPixelStorei = NULL;

  static void REGAL_CALL loader_glPixelStorei(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glPixelStorei(pname, param);
  }

  static void REGAL_CALL missing_glPixelTransferf(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTransferf", " not available." );
  }

  PFNGLPIXELTRANSFERFPROC driver_glPixelTransferf = NULL;

  static void REGAL_CALL loader_glPixelTransferf(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glPixelTransferf(pname, param);
  }

  static void REGAL_CALL missing_glPixelTransferi(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTransferi", " not available." );
  }

  PFNGLPIXELTRANSFERIPROC driver_glPixelTransferi = NULL;

  static void REGAL_CALL loader_glPixelTransferi(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glPixelTransferi(pname, param);
  }

  static void REGAL_CALL missing_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
  {
    UNUSED_PARAMETER(xfactor);
    UNUSED_PARAMETER(yfactor);
    Warning( "glPixelZoom", " not available." );
  }

  PFNGLPIXELZOOMPROC driver_glPixelZoom = NULL;

  static void REGAL_CALL loader_glPixelZoom(Layer *_layer, GLfloat xfactor, GLfloat yfactor)
  {
    driver_glPixelZoom(xfactor, yfactor);
  }

  static void REGAL_CALL missing_glPointSize(GLfloat size)
  {
    UNUSED_PARAMETER(size);
    Warning( "glPointSize", " not available." );
  }

  PFNGLPOINTSIZEPROC driver_glPointSize = NULL;

  static void REGAL_CALL loader_glPointSize(Layer *_layer, GLfloat size)
  {
    driver_glPointSize(size);
  }

  static void REGAL_CALL missing_glPolygonMode(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glPolygonMode", " not available." );
  }

  PFNGLPOLYGONMODEPROC driver_glPolygonMode = NULL;

  static void REGAL_CALL loader_glPolygonMode(Layer *_layer, GLenum face, GLenum mode)
  {
    driver_glPolygonMode(face, mode);
  }

  static void REGAL_CALL missing_glPolygonStipple(const GLubyte *mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glPolygonStipple", " not available." );
  }

  PFNGLPOLYGONSTIPPLEPROC driver_glPolygonStipple = NULL;

  static void REGAL_CALL loader_glPolygonStipple(Layer *_layer, const GLubyte *mask)
  {
    driver_glPolygonStipple(mask);
  }

  static void REGAL_CALL missing_glPopAttrib(void)
  {
    Warning( "glPopAttrib", " not available." );
  }

  PFNGLPOPATTRIBPROC driver_glPopAttrib = NULL;

  static void REGAL_CALL loader_glPopAttrib(Layer *_layer)
  {
    driver_glPopAttrib();
  }

  static void REGAL_CALL missing_glPopMatrix(void)
  {
    Warning( "glPopMatrix", " not available." );
  }

  PFNGLPOPMATRIXPROC driver_glPopMatrix = NULL;

  static void REGAL_CALL loader_glPopMatrix(Layer *_layer)
  {
    driver_glPopMatrix();
  }

  static void REGAL_CALL missing_glPopName(void)
  {
    Warning( "glPopName", " not available." );
  }

  PFNGLPOPNAMEPROC driver_glPopName = NULL;

  static void REGAL_CALL loader_glPopName(Layer *_layer)
  {
    driver_glPopName();
  }

  static void REGAL_CALL missing_glPushAttrib(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glPushAttrib", " not available." );
  }

  PFNGLPUSHATTRIBPROC driver_glPushAttrib = NULL;

  static void REGAL_CALL loader_glPushAttrib(Layer *_layer, GLbitfield mask)
  {
    driver_glPushAttrib(mask);
  }

  static void REGAL_CALL missing_glPushMatrix(void)
  {
    Warning( "glPushMatrix", " not available." );
  }

  PFNGLPUSHMATRIXPROC driver_glPushMatrix = NULL;

  static void REGAL_CALL loader_glPushMatrix(Layer *_layer)
  {
    driver_glPushMatrix();
  }

  static void REGAL_CALL missing_glPushName(GLuint name)
  {
    UNUSED_PARAMETER(name);
    Warning( "glPushName", " not available." );
  }

  PFNGLPUSHNAMEPROC driver_glPushName = NULL;

  static void REGAL_CALL loader_glPushName(Layer *_layer, GLuint name)
  {
    driver_glPushName(name);
  }

  static void REGAL_CALL missing_glRasterPos2d(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glRasterPos2d", " not available." );
  }

  PFNGLRASTERPOS2DPROC driver_glRasterPos2d = NULL;

  static void REGAL_CALL loader_glRasterPos2d(Layer *_layer, GLdouble x, GLdouble y)
  {
    driver_glRasterPos2d(x, y);
  }

  static void REGAL_CALL missing_glRasterPos2dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos2dv", " not available." );
  }

  PFNGLRASTERPOS2DVPROC driver_glRasterPos2dv = NULL;

  static void REGAL_CALL loader_glRasterPos2dv(Layer *_layer, const GLdouble *v)
  {
    driver_glRasterPos2dv(v);
  }

  static void REGAL_CALL missing_glRasterPos2f(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glRasterPos2f", " not available." );
  }

  PFNGLRASTERPOS2FPROC driver_glRasterPos2f = NULL;

  static void REGAL_CALL loader_glRasterPos2f(Layer *_layer, GLfloat x, GLfloat y)
  {
    driver_glRasterPos2f(x, y);
  }

  static void REGAL_CALL missing_glRasterPos2fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos2fv", " not available." );
  }

  PFNGLRASTERPOS2FVPROC driver_glRasterPos2fv = NULL;

  static void REGAL_CALL loader_glRasterPos2fv(Layer *_layer, const GLfloat *v)
  {
    driver_glRasterPos2fv(v);
  }

  static void REGAL_CALL missing_glRasterPos2i(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glRasterPos2i", " not available." );
  }

  PFNGLRASTERPOS2IPROC driver_glRasterPos2i = NULL;

  static void REGAL_CALL loader_glRasterPos2i(Layer *_layer, GLint x, GLint y)
  {
    driver_glRasterPos2i(x, y);
  }

  static void REGAL_CALL missing_glRasterPos2iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos2iv", " not available." );
  }

  PFNGLRASTERPOS2IVPROC driver_glRasterPos2iv = NULL;

  static void REGAL_CALL loader_glRasterPos2iv(Layer *_layer, const GLint *v)
  {
    driver_glRasterPos2iv(v);
  }

  static void REGAL_CALL missing_glRasterPos2s(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glRasterPos2s", " not available." );
  }

  PFNGLRASTERPOS2SPROC driver_glRasterPos2s = NULL;

  static void REGAL_CALL loader_glRasterPos2s(Layer *_layer, GLshort x, GLshort y)
  {
    driver_glRasterPos2s(x, y);
  }

  static void REGAL_CALL missing_glRasterPos2sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos2sv", " not available." );
  }

  PFNGLRASTERPOS2SVPROC driver_glRasterPos2sv = NULL;

  static void REGAL_CALL loader_glRasterPos2sv(Layer *_layer, const GLshort *v)
  {
    driver_glRasterPos2sv(v);
  }

  static void REGAL_CALL missing_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRasterPos3d", " not available." );
  }

  PFNGLRASTERPOS3DPROC driver_glRasterPos3d = NULL;

  static void REGAL_CALL loader_glRasterPos3d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glRasterPos3d(x, y, z);
  }

  static void REGAL_CALL missing_glRasterPos3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos3dv", " not available." );
  }

  PFNGLRASTERPOS3DVPROC driver_glRasterPos3dv = NULL;

  static void REGAL_CALL loader_glRasterPos3dv(Layer *_layer, const GLdouble *v)
  {
    driver_glRasterPos3dv(v);
  }

  static void REGAL_CALL missing_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRasterPos3f", " not available." );
  }

  PFNGLRASTERPOS3FPROC driver_glRasterPos3f = NULL;

  static void REGAL_CALL loader_glRasterPos3f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glRasterPos3f(x, y, z);
  }

  static void REGAL_CALL missing_glRasterPos3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos3fv", " not available." );
  }

  PFNGLRASTERPOS3FVPROC driver_glRasterPos3fv = NULL;

  static void REGAL_CALL loader_glRasterPos3fv(Layer *_layer, const GLfloat *v)
  {
    driver_glRasterPos3fv(v);
  }

  static void REGAL_CALL missing_glRasterPos3i(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRasterPos3i", " not available." );
  }

  PFNGLRASTERPOS3IPROC driver_glRasterPos3i = NULL;

  static void REGAL_CALL loader_glRasterPos3i(Layer *_layer, GLint x, GLint y, GLint z)
  {
    driver_glRasterPos3i(x, y, z);
  }

  static void REGAL_CALL missing_glRasterPos3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos3iv", " not available." );
  }

  PFNGLRASTERPOS3IVPROC driver_glRasterPos3iv = NULL;

  static void REGAL_CALL loader_glRasterPos3iv(Layer *_layer, const GLint *v)
  {
    driver_glRasterPos3iv(v);
  }

  static void REGAL_CALL missing_glRasterPos3s(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRasterPos3s", " not available." );
  }

  PFNGLRASTERPOS3SPROC driver_glRasterPos3s = NULL;

  static void REGAL_CALL loader_glRasterPos3s(Layer *_layer, GLshort x, GLshort y, GLshort z)
  {
    driver_glRasterPos3s(x, y, z);
  }

  static void REGAL_CALL missing_glRasterPos3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos3sv", " not available." );
  }

  PFNGLRASTERPOS3SVPROC driver_glRasterPos3sv = NULL;

  static void REGAL_CALL loader_glRasterPos3sv(Layer *_layer, const GLshort *v)
  {
    driver_glRasterPos3sv(v);
  }

  static void REGAL_CALL missing_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glRasterPos4d", " not available." );
  }

  PFNGLRASTERPOS4DPROC driver_glRasterPos4d = NULL;

  static void REGAL_CALL loader_glRasterPos4d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glRasterPos4d(x, y, z, w);
  }

  static void REGAL_CALL missing_glRasterPos4dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos4dv", " not available." );
  }

  PFNGLRASTERPOS4DVPROC driver_glRasterPos4dv = NULL;

  static void REGAL_CALL loader_glRasterPos4dv(Layer *_layer, const GLdouble *v)
  {
    driver_glRasterPos4dv(v);
  }

  static void REGAL_CALL missing_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glRasterPos4f", " not available." );
  }

  PFNGLRASTERPOS4FPROC driver_glRasterPos4f = NULL;

  static void REGAL_CALL loader_glRasterPos4f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glRasterPos4f(x, y, z, w);
  }

  static void REGAL_CALL missing_glRasterPos4fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos4fv", " not available." );
  }

  PFNGLRASTERPOS4FVPROC driver_glRasterPos4fv = NULL;

  static void REGAL_CALL loader_glRasterPos4fv(Layer *_layer, const GLfloat *v)
  {
    driver_glRasterPos4fv(v);
  }

  static void REGAL_CALL missing_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glRasterPos4i", " not available." );
  }

  PFNGLRASTERPOS4IPROC driver_glRasterPos4i = NULL;

  static void REGAL_CALL loader_glRasterPos4i(Layer *_layer, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glRasterPos4i(x, y, z, w);
  }

  static void REGAL_CALL missing_glRasterPos4iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos4iv", " not available." );
  }

  PFNGLRASTERPOS4IVPROC driver_glRasterPos4iv = NULL;

  static void REGAL_CALL loader_glRasterPos4iv(Layer *_layer, const GLint *v)
  {
    driver_glRasterPos4iv(v);
  }

  static void REGAL_CALL missing_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glRasterPos4s", " not available." );
  }

  PFNGLRASTERPOS4SPROC driver_glRasterPos4s = NULL;

  static void REGAL_CALL loader_glRasterPos4s(Layer *_layer, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    driver_glRasterPos4s(x, y, z, w);
  }

  static void REGAL_CALL missing_glRasterPos4sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glRasterPos4sv", " not available." );
  }

  PFNGLRASTERPOS4SVPROC driver_glRasterPos4sv = NULL;

  static void REGAL_CALL loader_glRasterPos4sv(Layer *_layer, const GLshort *v)
  {
    driver_glRasterPos4sv(v);
  }

  static void REGAL_CALL missing_glReadBuffer(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glReadBuffer", " not available." );
  }

  PFNGLREADBUFFERPROC driver_glReadBuffer = NULL;

  static void REGAL_CALL loader_glReadBuffer(Layer *_layer, GLenum mode)
  {
    driver_glReadBuffer(mode);
  }

  static void REGAL_CALL missing_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glReadPixels", " not available." );
  }

  PFNGLREADPIXELSPROC driver_glReadPixels = NULL;

  static void REGAL_CALL loader_glReadPixels(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
  {
    driver_glReadPixels(x, y, width, height, format, type, pixels);
  }

  static void REGAL_CALL missing_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
  {
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(x2);
    UNUSED_PARAMETER(y2);
    Warning( "glRectd", " not available." );
  }

  PFNGLRECTDPROC driver_glRectd = NULL;

  static void REGAL_CALL loader_glRectd(Layer *_layer, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
  {
    driver_glRectd(x1, y1, x2, y2);
  }

  static void REGAL_CALL missing_glRectdv(const GLdouble *v1, const GLdouble *v2)
  {
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glRectdv", " not available." );
  }

  PFNGLRECTDVPROC driver_glRectdv = NULL;

  static void REGAL_CALL loader_glRectdv(Layer *_layer, const GLdouble *v1, const GLdouble *v2)
  {
    driver_glRectdv(v1, v2);
  }

  static void REGAL_CALL missing_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
  {
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(x2);
    UNUSED_PARAMETER(y2);
    Warning( "glRectf", " not available." );
  }

  PFNGLRECTFPROC driver_glRectf = NULL;

  static void REGAL_CALL loader_glRectf(Layer *_layer, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
  {
    driver_glRectf(x1, y1, x2, y2);
  }

  static void REGAL_CALL missing_glRectfv(const GLfloat *v1, const GLfloat *v2)
  {
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glRectfv", " not available." );
  }

  PFNGLRECTFVPROC driver_glRectfv = NULL;

  static void REGAL_CALL loader_glRectfv(Layer *_layer, const GLfloat *v1, const GLfloat *v2)
  {
    driver_glRectfv(v1, v2);
  }

  static void REGAL_CALL missing_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
  {
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(x2);
    UNUSED_PARAMETER(y2);
    Warning( "glRecti", " not available." );
  }

  PFNGLRECTIPROC driver_glRecti = NULL;

  static void REGAL_CALL loader_glRecti(Layer *_layer, GLint x1, GLint y1, GLint x2, GLint y2)
  {
    driver_glRecti(x1, y1, x2, y2);
  }

  static void REGAL_CALL missing_glRectiv(const GLint *v1, const GLint *v2)
  {
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glRectiv", " not available." );
  }

  PFNGLRECTIVPROC driver_glRectiv = NULL;

  static void REGAL_CALL loader_glRectiv(Layer *_layer, const GLint *v1, const GLint *v2)
  {
    driver_glRectiv(v1, v2);
  }

  static void REGAL_CALL missing_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
  {
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(x2);
    UNUSED_PARAMETER(y2);
    Warning( "glRects", " not available." );
  }

  PFNGLRECTSPROC driver_glRects = NULL;

  static void REGAL_CALL loader_glRects(Layer *_layer, GLshort x1, GLshort y1, GLshort x2, GLshort y2)
  {
    driver_glRects(x1, y1, x2, y2);
  }

  static void REGAL_CALL missing_glRectsv(const GLshort *v1, const GLshort *v2)
  {
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glRectsv", " not available." );
  }

  PFNGLRECTSVPROC driver_glRectsv = NULL;

  static void REGAL_CALL loader_glRectsv(Layer *_layer, const GLshort *v1, const GLshort *v2)
  {
    driver_glRectsv(v1, v2);
  }

  static GLint REGAL_CALL missing_glRenderMode(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glRenderMode", " not available." );
    return 0;
  }

  PFNGLRENDERMODEPROC driver_glRenderMode = NULL;

  static GLint REGAL_CALL loader_glRenderMode(Layer *_layer, GLenum mode)
  {
    return driver_glRenderMode(mode);
  }

  static void REGAL_CALL missing_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRotated", " not available." );
  }

  PFNGLROTATEDPROC driver_glRotated = NULL;

  static void REGAL_CALL loader_glRotated(Layer *_layer, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glRotated(angle, x, y, z);
  }

  static void REGAL_CALL missing_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRotatef", " not available." );
  }

  PFNGLROTATEFPROC driver_glRotatef = NULL;

  static void REGAL_CALL loader_glRotatef(Layer *_layer, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glRotatef(angle, x, y, z);
  }

  static void REGAL_CALL missing_glScaled(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glScaled", " not available." );
  }

  PFNGLSCALEDPROC driver_glScaled = NULL;

  static void REGAL_CALL loader_glScaled(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glScaled(x, y, z);
  }

  static void REGAL_CALL missing_glScalef(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glScalef", " not available." );
  }

  PFNGLSCALEFPROC driver_glScalef = NULL;

  static void REGAL_CALL loader_glScalef(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glScalef(x, y, z);
  }

  static void REGAL_CALL missing_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glScissor", " not available." );
  }

  PFNGLSCISSORPROC driver_glScissor = NULL;

  static void REGAL_CALL loader_glScissor(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glScissor(x, y, width, height);
  }

  static void REGAL_CALL missing_glSelectBuffer(GLsizei size, GLuint *buffer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(buffer);
    Warning( "glSelectBuffer", " not available." );
  }

  PFNGLSELECTBUFFERPROC driver_glSelectBuffer = NULL;

  static void REGAL_CALL loader_glSelectBuffer(Layer *_layer, GLsizei size, GLuint *buffer)
  {
    driver_glSelectBuffer(size, buffer);
  }

  static void REGAL_CALL missing_glShadeModel(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glShadeModel", " not available." );
  }

  PFNGLSHADEMODELPROC driver_glShadeModel = NULL;

  static void REGAL_CALL loader_glShadeModel(Layer *_layer, GLenum mode)
  {
    driver_glShadeModel(mode);
  }

  static void REGAL_CALL missing_glStencilFunc(GLenum func, GLint ref, GLuint mask)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilFunc", " not available." );
  }

  PFNGLSTENCILFUNCPROC driver_glStencilFunc = NULL;

  static void REGAL_CALL loader_glStencilFunc(Layer *_layer, GLenum func, GLint ref, GLuint mask)
  {
    driver_glStencilFunc(func, ref, mask);
  }

  static void REGAL_CALL missing_glStencilMask(GLuint mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glStencilMask", " not available." );
  }

  PFNGLSTENCILMASKPROC driver_glStencilMask = NULL;

  static void REGAL_CALL loader_glStencilMask(Layer *_layer, GLuint mask)
  {
    driver_glStencilMask(mask);
  }

  static void REGAL_CALL missing_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
  {
    UNUSED_PARAMETER(fail);
    UNUSED_PARAMETER(zfail);
    UNUSED_PARAMETER(zpass);
    Warning( "glStencilOp", " not available." );
  }

  PFNGLSTENCILOPPROC driver_glStencilOp = NULL;

  static void REGAL_CALL loader_glStencilOp(Layer *_layer, GLenum fail, GLenum zfail, GLenum zpass)
  {
    driver_glStencilOp(fail, zfail, zpass);
  }

  static void REGAL_CALL missing_glTexCoord1d(GLdouble s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1d", " not available." );
  }

  PFNGLTEXCOORD1DPROC driver_glTexCoord1d = NULL;

  static void REGAL_CALL loader_glTexCoord1d(Layer *_layer, GLdouble s)
  {
    driver_glTexCoord1d(s);
  }

  static void REGAL_CALL missing_glTexCoord1dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1dv", " not available." );
  }

  PFNGLTEXCOORD1DVPROC driver_glTexCoord1dv = NULL;

  static void REGAL_CALL loader_glTexCoord1dv(Layer *_layer, const GLdouble *v)
  {
    driver_glTexCoord1dv(v);
  }

  static void REGAL_CALL missing_glTexCoord1f(GLfloat s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1f", " not available." );
  }

  PFNGLTEXCOORD1FPROC driver_glTexCoord1f = NULL;

  static void REGAL_CALL loader_glTexCoord1f(Layer *_layer, GLfloat s)
  {
    driver_glTexCoord1f(s);
  }

  static void REGAL_CALL missing_glTexCoord1fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1fv", " not available." );
  }

  PFNGLTEXCOORD1FVPROC driver_glTexCoord1fv = NULL;

  static void REGAL_CALL loader_glTexCoord1fv(Layer *_layer, const GLfloat *v)
  {
    driver_glTexCoord1fv(v);
  }

  static void REGAL_CALL missing_glTexCoord1i(GLint s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1i", " not available." );
  }

  PFNGLTEXCOORD1IPROC driver_glTexCoord1i = NULL;

  static void REGAL_CALL loader_glTexCoord1i(Layer *_layer, GLint s)
  {
    driver_glTexCoord1i(s);
  }

  static void REGAL_CALL missing_glTexCoord1iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1iv", " not available." );
  }

  PFNGLTEXCOORD1IVPROC driver_glTexCoord1iv = NULL;

  static void REGAL_CALL loader_glTexCoord1iv(Layer *_layer, const GLint *v)
  {
    driver_glTexCoord1iv(v);
  }

  static void REGAL_CALL missing_glTexCoord1s(GLshort s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1s", " not available." );
  }

  PFNGLTEXCOORD1SPROC driver_glTexCoord1s = NULL;

  static void REGAL_CALL loader_glTexCoord1s(Layer *_layer, GLshort s)
  {
    driver_glTexCoord1s(s);
  }

  static void REGAL_CALL missing_glTexCoord1sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1sv", " not available." );
  }

  PFNGLTEXCOORD1SVPROC driver_glTexCoord1sv = NULL;

  static void REGAL_CALL loader_glTexCoord1sv(Layer *_layer, const GLshort *v)
  {
    driver_glTexCoord1sv(v);
  }

  static void REGAL_CALL missing_glTexCoord2d(GLdouble s, GLdouble t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2d", " not available." );
  }

  PFNGLTEXCOORD2DPROC driver_glTexCoord2d = NULL;

  static void REGAL_CALL loader_glTexCoord2d(Layer *_layer, GLdouble s, GLdouble t)
  {
    driver_glTexCoord2d(s, t);
  }

  static void REGAL_CALL missing_glTexCoord2dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2dv", " not available." );
  }

  PFNGLTEXCOORD2DVPROC driver_glTexCoord2dv = NULL;

  static void REGAL_CALL loader_glTexCoord2dv(Layer *_layer, const GLdouble *v)
  {
    driver_glTexCoord2dv(v);
  }

  static void REGAL_CALL missing_glTexCoord2f(GLfloat s, GLfloat t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2f", " not available." );
  }

  PFNGLTEXCOORD2FPROC driver_glTexCoord2f = NULL;

  static void REGAL_CALL loader_glTexCoord2f(Layer *_layer, GLfloat s, GLfloat t)
  {
    driver_glTexCoord2f(s, t);
  }

  static void REGAL_CALL missing_glTexCoord2fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fv", " not available." );
  }

  PFNGLTEXCOORD2FVPROC driver_glTexCoord2fv = NULL;

  static void REGAL_CALL loader_glTexCoord2fv(Layer *_layer, const GLfloat *v)
  {
    driver_glTexCoord2fv(v);
  }

  static void REGAL_CALL missing_glTexCoord2i(GLint s, GLint t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2i", " not available." );
  }

  PFNGLTEXCOORD2IPROC driver_glTexCoord2i = NULL;

  static void REGAL_CALL loader_glTexCoord2i(Layer *_layer, GLint s, GLint t)
  {
    driver_glTexCoord2i(s, t);
  }

  static void REGAL_CALL missing_glTexCoord2iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2iv", " not available." );
  }

  PFNGLTEXCOORD2IVPROC driver_glTexCoord2iv = NULL;

  static void REGAL_CALL loader_glTexCoord2iv(Layer *_layer, const GLint *v)
  {
    driver_glTexCoord2iv(v);
  }

  static void REGAL_CALL missing_glTexCoord2s(GLshort s, GLshort t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2s", " not available." );
  }

  PFNGLTEXCOORD2SPROC driver_glTexCoord2s = NULL;

  static void REGAL_CALL loader_glTexCoord2s(Layer *_layer, GLshort s, GLshort t)
  {
    driver_glTexCoord2s(s, t);
  }

  static void REGAL_CALL missing_glTexCoord2sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2sv", " not available." );
  }

  PFNGLTEXCOORD2SVPROC driver_glTexCoord2sv = NULL;

  static void REGAL_CALL loader_glTexCoord2sv(Layer *_layer, const GLshort *v)
  {
    driver_glTexCoord2sv(v);
  }

  static void REGAL_CALL missing_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3d", " not available." );
  }

  PFNGLTEXCOORD3DPROC driver_glTexCoord3d = NULL;

  static void REGAL_CALL loader_glTexCoord3d(Layer *_layer, GLdouble s, GLdouble t, GLdouble r)
  {
    driver_glTexCoord3d(s, t, r);
  }

  static void REGAL_CALL missing_glTexCoord3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3dv", " not available." );
  }

  PFNGLTEXCOORD3DVPROC driver_glTexCoord3dv = NULL;

  static void REGAL_CALL loader_glTexCoord3dv(Layer *_layer, const GLdouble *v)
  {
    driver_glTexCoord3dv(v);
  }

  static void REGAL_CALL missing_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3f", " not available." );
  }

  PFNGLTEXCOORD3FPROC driver_glTexCoord3f = NULL;

  static void REGAL_CALL loader_glTexCoord3f(Layer *_layer, GLfloat s, GLfloat t, GLfloat r)
  {
    driver_glTexCoord3f(s, t, r);
  }

  static void REGAL_CALL missing_glTexCoord3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3fv", " not available." );
  }

  PFNGLTEXCOORD3FVPROC driver_glTexCoord3fv = NULL;

  static void REGAL_CALL loader_glTexCoord3fv(Layer *_layer, const GLfloat *v)
  {
    driver_glTexCoord3fv(v);
  }

  static void REGAL_CALL missing_glTexCoord3i(GLint s, GLint t, GLint r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3i", " not available." );
  }

  PFNGLTEXCOORD3IPROC driver_glTexCoord3i = NULL;

  static void REGAL_CALL loader_glTexCoord3i(Layer *_layer, GLint s, GLint t, GLint r)
  {
    driver_glTexCoord3i(s, t, r);
  }

  static void REGAL_CALL missing_glTexCoord3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3iv", " not available." );
  }

  PFNGLTEXCOORD3IVPROC driver_glTexCoord3iv = NULL;

  static void REGAL_CALL loader_glTexCoord3iv(Layer *_layer, const GLint *v)
  {
    driver_glTexCoord3iv(v);
  }

  static void REGAL_CALL missing_glTexCoord3s(GLshort s, GLshort t, GLshort r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3s", " not available." );
  }

  PFNGLTEXCOORD3SPROC driver_glTexCoord3s = NULL;

  static void REGAL_CALL loader_glTexCoord3s(Layer *_layer, GLshort s, GLshort t, GLshort r)
  {
    driver_glTexCoord3s(s, t, r);
  }

  static void REGAL_CALL missing_glTexCoord3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3sv", " not available." );
  }

  PFNGLTEXCOORD3SVPROC driver_glTexCoord3sv = NULL;

  static void REGAL_CALL loader_glTexCoord3sv(Layer *_layer, const GLshort *v)
  {
    driver_glTexCoord3sv(v);
  }

  static void REGAL_CALL missing_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4d", " not available." );
  }

  PFNGLTEXCOORD4DPROC driver_glTexCoord4d = NULL;

  static void REGAL_CALL loader_glTexCoord4d(Layer *_layer, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    driver_glTexCoord4d(s, t, r, q);
  }

  static void REGAL_CALL missing_glTexCoord4dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4dv", " not available." );
  }

  PFNGLTEXCOORD4DVPROC driver_glTexCoord4dv = NULL;

  static void REGAL_CALL loader_glTexCoord4dv(Layer *_layer, const GLdouble *v)
  {
    driver_glTexCoord4dv(v);
  }

  static void REGAL_CALL missing_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4f", " not available." );
  }

  PFNGLTEXCOORD4FPROC driver_glTexCoord4f = NULL;

  static void REGAL_CALL loader_glTexCoord4f(Layer *_layer, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    driver_glTexCoord4f(s, t, r, q);
  }

  static void REGAL_CALL missing_glTexCoord4fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4fv", " not available." );
  }

  PFNGLTEXCOORD4FVPROC driver_glTexCoord4fv = NULL;

  static void REGAL_CALL loader_glTexCoord4fv(Layer *_layer, const GLfloat *v)
  {
    driver_glTexCoord4fv(v);
  }

  static void REGAL_CALL missing_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4i", " not available." );
  }

  PFNGLTEXCOORD4IPROC driver_glTexCoord4i = NULL;

  static void REGAL_CALL loader_glTexCoord4i(Layer *_layer, GLint s, GLint t, GLint r, GLint q)
  {
    driver_glTexCoord4i(s, t, r, q);
  }

  static void REGAL_CALL missing_glTexCoord4iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4iv", " not available." );
  }

  PFNGLTEXCOORD4IVPROC driver_glTexCoord4iv = NULL;

  static void REGAL_CALL loader_glTexCoord4iv(Layer *_layer, const GLint *v)
  {
    driver_glTexCoord4iv(v);
  }

  static void REGAL_CALL missing_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4s", " not available." );
  }

  PFNGLTEXCOORD4SPROC driver_glTexCoord4s = NULL;

  static void REGAL_CALL loader_glTexCoord4s(Layer *_layer, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    driver_glTexCoord4s(s, t, r, q);
  }

  static void REGAL_CALL missing_glTexCoord4sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4sv", " not available." );
  }

  PFNGLTEXCOORD4SVPROC driver_glTexCoord4sv = NULL;

  static void REGAL_CALL loader_glTexCoord4sv(Layer *_layer, const GLshort *v)
  {
    driver_glTexCoord4sv(v);
  }

  static void REGAL_CALL missing_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexEnvf", " not available." );
  }

  PFNGLTEXENVFPROC driver_glTexEnvf = NULL;

  static void REGAL_CALL loader_glTexEnvf(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
  {
    driver_glTexEnvf(target, pname, param);
  }

  static void REGAL_CALL missing_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexEnvfv", " not available." );
  }

  PFNGLTEXENVFVPROC driver_glTexEnvfv = NULL;

  static void REGAL_CALL loader_glTexEnvfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glTexEnvfv(target, pname, params);
  }

  static void REGAL_CALL missing_glTexEnvi(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexEnvi", " not available." );
  }

  PFNGLTEXENVIPROC driver_glTexEnvi = NULL;

  static void REGAL_CALL loader_glTexEnvi(Layer *_layer, GLenum target, GLenum pname, GLint param)
  {
    driver_glTexEnvi(target, pname, param);
  }

  static void REGAL_CALL missing_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexEnviv", " not available." );
  }

  PFNGLTEXENVIVPROC driver_glTexEnviv = NULL;

  static void REGAL_CALL loader_glTexEnviv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glTexEnviv(target, pname, params);
  }

  static void REGAL_CALL missing_glTexGend(GLenum coord, GLenum pname, GLdouble param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGend", " not available." );
  }

  PFNGLTEXGENDPROC driver_glTexGend = NULL;

  static void REGAL_CALL loader_glTexGend(Layer *_layer, GLenum coord, GLenum pname, GLdouble param)
  {
    driver_glTexGend(coord, pname, param);
  }

  static void REGAL_CALL missing_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGendv", " not available." );
  }

  PFNGLTEXGENDVPROC driver_glTexGendv = NULL;

  static void REGAL_CALL loader_glTexGendv(Layer *_layer, GLenum coord, GLenum pname, const GLdouble *params)
  {
    driver_glTexGendv(coord, pname, params);
  }

  static void REGAL_CALL missing_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGenf", " not available." );
  }

  PFNGLTEXGENFPROC driver_glTexGenf = NULL;

  static void REGAL_CALL loader_glTexGenf(Layer *_layer, GLenum coord, GLenum pname, GLfloat param)
  {
    driver_glTexGenf(coord, pname, param);
  }

  static void REGAL_CALL missing_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGenfv", " not available." );
  }

  PFNGLTEXGENFVPROC driver_glTexGenfv = NULL;

  static void REGAL_CALL loader_glTexGenfv(Layer *_layer, GLenum coord, GLenum pname, const GLfloat *params)
  {
    driver_glTexGenfv(coord, pname, params);
  }

  static void REGAL_CALL missing_glTexGeni(GLenum coord, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGeni", " not available." );
  }

  PFNGLTEXGENIPROC driver_glTexGeni = NULL;

  static void REGAL_CALL loader_glTexGeni(Layer *_layer, GLenum coord, GLenum pname, GLint param)
  {
    driver_glTexGeni(coord, pname, param);
  }

  static void REGAL_CALL missing_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGeniv", " not available." );
  }

  PFNGLTEXGENIVPROC driver_glTexGeniv = NULL;

  static void REGAL_CALL loader_glTexGeniv(Layer *_layer, GLenum coord, GLenum pname, const GLint *params)
  {
    driver_glTexGeniv(coord, pname, params);
  }

  static void REGAL_CALL missing_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage1D", " not available." );
  }

  PFNGLTEXIMAGE1DPROC driver_glTexImage1D = NULL;

  static void REGAL_CALL loader_glTexImage1D(Layer *_layer, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage2D", " not available." );
  }

  PFNGLTEXIMAGE2DPROC driver_glTexImage2D = NULL;

  static void REGAL_CALL loader_glTexImage2D(Layer *_layer, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexParameterf", " not available." );
  }

  PFNGLTEXPARAMETERFPROC driver_glTexParameterf = NULL;

  static void REGAL_CALL loader_glTexParameterf(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
  {
    driver_glTexParameterf(target, pname, param);
  }

  static void REGAL_CALL missing_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterfv", " not available." );
  }

  PFNGLTEXPARAMETERFVPROC driver_glTexParameterfv = NULL;

  static void REGAL_CALL loader_glTexParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glTexParameterfv(target, pname, params);
  }

  static void REGAL_CALL missing_glTexParameteri(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexParameteri", " not available." );
  }

  PFNGLTEXPARAMETERIPROC driver_glTexParameteri = NULL;

  static void REGAL_CALL loader_glTexParameteri(Layer *_layer, GLenum target, GLenum pname, GLint param)
  {
    driver_glTexParameteri(target, pname, param);
  }

  static void REGAL_CALL missing_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameteriv", " not available." );
  }

  PFNGLTEXPARAMETERIVPROC driver_glTexParameteriv = NULL;

  static void REGAL_CALL loader_glTexParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glTexParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glTranslated(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTranslated", " not available." );
  }

  PFNGLTRANSLATEDPROC driver_glTranslated = NULL;

  static void REGAL_CALL loader_glTranslated(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glTranslated(x, y, z);
  }

  static void REGAL_CALL missing_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTranslatef", " not available." );
  }

  PFNGLTRANSLATEFPROC driver_glTranslatef = NULL;

  static void REGAL_CALL loader_glTranslatef(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glTranslatef(x, y, z);
  }

  static void REGAL_CALL missing_glVertex2d(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2d", " not available." );
  }

  PFNGLVERTEX2DPROC driver_glVertex2d = NULL;

  static void REGAL_CALL loader_glVertex2d(Layer *_layer, GLdouble x, GLdouble y)
  {
    driver_glVertex2d(x, y);
  }

  static void REGAL_CALL missing_glVertex2dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2dv", " not available." );
  }

  PFNGLVERTEX2DVPROC driver_glVertex2dv = NULL;

  static void REGAL_CALL loader_glVertex2dv(Layer *_layer, const GLdouble *v)
  {
    driver_glVertex2dv(v);
  }

  static void REGAL_CALL missing_glVertex2f(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2f", " not available." );
  }

  PFNGLVERTEX2FPROC driver_glVertex2f = NULL;

  static void REGAL_CALL loader_glVertex2f(Layer *_layer, GLfloat x, GLfloat y)
  {
    driver_glVertex2f(x, y);
  }

  static void REGAL_CALL missing_glVertex2fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2fv", " not available." );
  }

  PFNGLVERTEX2FVPROC driver_glVertex2fv = NULL;

  static void REGAL_CALL loader_glVertex2fv(Layer *_layer, const GLfloat *v)
  {
    driver_glVertex2fv(v);
  }

  static void REGAL_CALL missing_glVertex2i(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2i", " not available." );
  }

  PFNGLVERTEX2IPROC driver_glVertex2i = NULL;

  static void REGAL_CALL loader_glVertex2i(Layer *_layer, GLint x, GLint y)
  {
    driver_glVertex2i(x, y);
  }

  static void REGAL_CALL missing_glVertex2iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2iv", " not available." );
  }

  PFNGLVERTEX2IVPROC driver_glVertex2iv = NULL;

  static void REGAL_CALL loader_glVertex2iv(Layer *_layer, const GLint *v)
  {
    driver_glVertex2iv(v);
  }

  static void REGAL_CALL missing_glVertex2s(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2s", " not available." );
  }

  PFNGLVERTEX2SPROC driver_glVertex2s = NULL;

  static void REGAL_CALL loader_glVertex2s(Layer *_layer, GLshort x, GLshort y)
  {
    driver_glVertex2s(x, y);
  }

  static void REGAL_CALL missing_glVertex2sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2sv", " not available." );
  }

  PFNGLVERTEX2SVPROC driver_glVertex2sv = NULL;

  static void REGAL_CALL loader_glVertex2sv(Layer *_layer, const GLshort *v)
  {
    driver_glVertex2sv(v);
  }

  static void REGAL_CALL missing_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3d", " not available." );
  }

  PFNGLVERTEX3DPROC driver_glVertex3d = NULL;

  static void REGAL_CALL loader_glVertex3d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glVertex3d(x, y, z);
  }

  static void REGAL_CALL missing_glVertex3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3dv", " not available." );
  }

  PFNGLVERTEX3DVPROC driver_glVertex3dv = NULL;

  static void REGAL_CALL loader_glVertex3dv(Layer *_layer, const GLdouble *v)
  {
    driver_glVertex3dv(v);
  }

  static void REGAL_CALL missing_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3f", " not available." );
  }

  PFNGLVERTEX3FPROC driver_glVertex3f = NULL;

  static void REGAL_CALL loader_glVertex3f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glVertex3f(x, y, z);
  }

  static void REGAL_CALL missing_glVertex3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3fv", " not available." );
  }

  PFNGLVERTEX3FVPROC driver_glVertex3fv = NULL;

  static void REGAL_CALL loader_glVertex3fv(Layer *_layer, const GLfloat *v)
  {
    driver_glVertex3fv(v);
  }

  static void REGAL_CALL missing_glVertex3i(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3i", " not available." );
  }

  PFNGLVERTEX3IPROC driver_glVertex3i = NULL;

  static void REGAL_CALL loader_glVertex3i(Layer *_layer, GLint x, GLint y, GLint z)
  {
    driver_glVertex3i(x, y, z);
  }

  static void REGAL_CALL missing_glVertex3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3iv", " not available." );
  }

  PFNGLVERTEX3IVPROC driver_glVertex3iv = NULL;

  static void REGAL_CALL loader_glVertex3iv(Layer *_layer, const GLint *v)
  {
    driver_glVertex3iv(v);
  }

  static void REGAL_CALL missing_glVertex3s(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3s", " not available." );
  }

  PFNGLVERTEX3SPROC driver_glVertex3s = NULL;

  static void REGAL_CALL loader_glVertex3s(Layer *_layer, GLshort x, GLshort y, GLshort z)
  {
    driver_glVertex3s(x, y, z);
  }

  static void REGAL_CALL missing_glVertex3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3sv", " not available." );
  }

  PFNGLVERTEX3SVPROC driver_glVertex3sv = NULL;

  static void REGAL_CALL loader_glVertex3sv(Layer *_layer, const GLshort *v)
  {
    driver_glVertex3sv(v);
  }

  static void REGAL_CALL missing_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4d", " not available." );
  }

  PFNGLVERTEX4DPROC driver_glVertex4d = NULL;

  static void REGAL_CALL loader_glVertex4d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glVertex4d(x, y, z, w);
  }

  static void REGAL_CALL missing_glVertex4dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4dv", " not available." );
  }

  PFNGLVERTEX4DVPROC driver_glVertex4dv = NULL;

  static void REGAL_CALL loader_glVertex4dv(Layer *_layer, const GLdouble *v)
  {
    driver_glVertex4dv(v);
  }

  static void REGAL_CALL missing_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4f", " not available." );
  }

  PFNGLVERTEX4FPROC driver_glVertex4f = NULL;

  static void REGAL_CALL loader_glVertex4f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glVertex4f(x, y, z, w);
  }

  static void REGAL_CALL missing_glVertex4fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4fv", " not available." );
  }

  PFNGLVERTEX4FVPROC driver_glVertex4fv = NULL;

  static void REGAL_CALL loader_glVertex4fv(Layer *_layer, const GLfloat *v)
  {
    driver_glVertex4fv(v);
  }

  static void REGAL_CALL missing_glVertex4i(GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4i", " not available." );
  }

  PFNGLVERTEX4IPROC driver_glVertex4i = NULL;

  static void REGAL_CALL loader_glVertex4i(Layer *_layer, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glVertex4i(x, y, z, w);
  }

  static void REGAL_CALL missing_glVertex4iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4iv", " not available." );
  }

  PFNGLVERTEX4IVPROC driver_glVertex4iv = NULL;

  static void REGAL_CALL loader_glVertex4iv(Layer *_layer, const GLint *v)
  {
    driver_glVertex4iv(v);
  }

  static void REGAL_CALL missing_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4s", " not available." );
  }

  PFNGLVERTEX4SPROC driver_glVertex4s = NULL;

  static void REGAL_CALL loader_glVertex4s(Layer *_layer, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    driver_glVertex4s(x, y, z, w);
  }

  static void REGAL_CALL missing_glVertex4sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4sv", " not available." );
  }

  PFNGLVERTEX4SVPROC driver_glVertex4sv = NULL;

  static void REGAL_CALL loader_glVertex4sv(Layer *_layer, const GLshort *v)
  {
    driver_glVertex4sv(v);
  }

  static void REGAL_CALL missing_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glViewport", " not available." );
  }

  PFNGLVIEWPORTPROC driver_glViewport = NULL;

  static void REGAL_CALL loader_glViewport(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glViewport(x, y, width, height);
  }

// GL_VERSION_1_1

  static GLboolean REGAL_CALL missing_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(residences);
    Warning( "glAreTexturesResident", " not available." );
    return GL_FALSE;
  }

  PFNGLARETEXTURESRESIDENTPROC driver_glAreTexturesResident = NULL;

  static GLboolean REGAL_CALL loader_glAreTexturesResident(Layer *_layer, GLsizei n, const GLuint *textures, GLboolean *residences)
  {
    return driver_glAreTexturesResident(n, textures, residences);
  }

  static void REGAL_CALL missing_glArrayElement(GLint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glArrayElement", " not available." );
  }

  PFNGLARRAYELEMENTPROC driver_glArrayElement = NULL;

  static void REGAL_CALL loader_glArrayElement(Layer *_layer, GLint index)
  {
    driver_glArrayElement(index);
  }

  static void REGAL_CALL missing_glBindTexture(GLenum target, GLuint texture)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(texture);
    Warning( "glBindTexture", " not available." );
  }

  PFNGLBINDTEXTUREPROC driver_glBindTexture = NULL;

  static void REGAL_CALL loader_glBindTexture(Layer *_layer, GLenum target, GLuint texture)
  {
    driver_glBindTexture(target, texture);
  }

  static void REGAL_CALL missing_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glColorPointer", " not available." );
  }

  PFNGLCOLORPOINTERPROC driver_glColorPointer = NULL;

  static void REGAL_CALL loader_glColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glColorPointer(size, type, stride, pointer);
  }

  static void REGAL_CALL missing_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTexImage1D", " not available." );
  }

  PFNGLCOPYTEXIMAGE1DPROC driver_glCopyTexImage1D = NULL;

  static void REGAL_CALL loader_glCopyTexImage1D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    driver_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
  }

  static void REGAL_CALL missing_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTexImage2D", " not available." );
  }

  PFNGLCOPYTEXIMAGE2DPROC driver_glCopyTexImage2D = NULL;

  static void REGAL_CALL loader_glCopyTexImage2D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    driver_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  }

  static void REGAL_CALL missing_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyTexSubImage1D", " not available." );
  }

  PFNGLCOPYTEXSUBIMAGE1DPROC driver_glCopyTexSubImage1D = NULL;

  static void REGAL_CALL loader_glCopyTexSubImage1D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  }

  static void REGAL_CALL missing_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage2D", " not available." );
  }

  PFNGLCOPYTEXSUBIMAGE2DPROC driver_glCopyTexSubImage2D = NULL;

  static void REGAL_CALL loader_glCopyTexSubImage2D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  }

  static void REGAL_CALL missing_glDeleteTextures(GLsizei n, const GLuint *textures)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    Warning( "glDeleteTextures", " not available." );
  }

  PFNGLDELETETEXTURESPROC driver_glDeleteTextures = NULL;

  static void REGAL_CALL loader_glDeleteTextures(Layer *_layer, GLsizei n, const GLuint *textures)
  {
    driver_glDeleteTextures(n, textures);
  }

  static void REGAL_CALL missing_glDisableClientState(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glDisableClientState", " not available." );
  }

  PFNGLDISABLECLIENTSTATEPROC driver_glDisableClientState = NULL;

  static void REGAL_CALL loader_glDisableClientState(Layer *_layer, GLenum cap)
  {
    driver_glDisableClientState(cap);
  }

  static void REGAL_CALL missing_glDrawArrays(GLenum mode, GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glDrawArrays", " not available." );
  }

  PFNGLDRAWARRAYSPROC driver_glDrawArrays = NULL;

  static void REGAL_CALL loader_glDrawArrays(Layer *_layer, GLenum mode, GLint first, GLsizei count)
  {
    driver_glDrawArrays(mode, first, count);
  }

  static void REGAL_CALL missing_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    Warning( "glDrawElements", " not available." );
  }

  PFNGLDRAWELEMENTSPROC driver_glDrawElements = NULL;

  static void REGAL_CALL loader_glDrawElements(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
  {
    driver_glDrawElements(mode, count, type, indices);
  }

  static void REGAL_CALL missing_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glEdgeFlagPointer", " not available." );
  }

  PFNGLEDGEFLAGPOINTERPROC driver_glEdgeFlagPointer = NULL;

  static void REGAL_CALL loader_glEdgeFlagPointer(Layer *_layer, GLsizei stride, const GLvoid *pointer)
  {
    driver_glEdgeFlagPointer(stride, pointer);
  }

  static void REGAL_CALL missing_glEnableClientState(GLenum cap)
  {
    UNUSED_PARAMETER(cap);
    Warning( "glEnableClientState", " not available." );
  }

  PFNGLENABLECLIENTSTATEPROC driver_glEnableClientState = NULL;

  static void REGAL_CALL loader_glEnableClientState(Layer *_layer, GLenum cap)
  {
    driver_glEnableClientState(cap);
  }

  static void REGAL_CALL missing_glGenTextures(GLsizei n, GLuint *textures)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    Warning( "glGenTextures", " not available." );
  }

  PFNGLGENTEXTURESPROC driver_glGenTextures = NULL;

  static void REGAL_CALL loader_glGenTextures(Layer *_layer, GLsizei n, GLuint *textures)
  {
    driver_glGenTextures(n, textures);
  }

  static void REGAL_CALL missing_glGetPointerv(GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPointerv", " not available." );
  }

  PFNGLGETPOINTERVPROC driver_glGetPointerv = NULL;

  static void REGAL_CALL loader_glGetPointerv(Layer *_layer, GLenum pname, GLvoid **params)
  {
    driver_glGetPointerv(pname, params);
  }

  static void REGAL_CALL missing_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glIndexPointer", " not available." );
  }

  PFNGLINDEXPOINTERPROC driver_glIndexPointer = NULL;

  static void REGAL_CALL loader_glIndexPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glIndexPointer(type, stride, pointer);
  }

  static void REGAL_CALL missing_glIndexub(GLubyte c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexub", " not available." );
  }

  PFNGLINDEXUBPROC driver_glIndexub = NULL;

  static void REGAL_CALL loader_glIndexub(Layer *_layer, GLubyte c)
  {
    driver_glIndexub(c);
  }

  static void REGAL_CALL missing_glIndexubv(const GLubyte *c)
  {
    UNUSED_PARAMETER(c);
    Warning( "glIndexubv", " not available." );
  }

  PFNGLINDEXUBVPROC driver_glIndexubv = NULL;

  static void REGAL_CALL loader_glIndexubv(Layer *_layer, const GLubyte *c)
  {
    driver_glIndexubv(c);
  }

  static void REGAL_CALL missing_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glInterleavedArrays", " not available." );
  }

  PFNGLINTERLEAVEDARRAYSPROC driver_glInterleavedArrays = NULL;

  static void REGAL_CALL loader_glInterleavedArrays(Layer *_layer, GLenum format, GLsizei stride, const GLvoid *pointer)
  {
    driver_glInterleavedArrays(format, stride, pointer);
  }

  static GLboolean REGAL_CALL missing_glIsTexture(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glIsTexture", " not available." );
    return GL_FALSE;
  }

  PFNGLISTEXTUREPROC driver_glIsTexture = NULL;

  static GLboolean REGAL_CALL loader_glIsTexture(Layer *_layer, GLuint texture)
  {
    return driver_glIsTexture(texture);
  }

  static void REGAL_CALL missing_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glNormalPointer", " not available." );
  }

  PFNGLNORMALPOINTERPROC driver_glNormalPointer = NULL;

  static void REGAL_CALL loader_glNormalPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glNormalPointer(type, stride, pointer);
  }

  static void REGAL_CALL missing_glPolygonOffset(GLfloat factor, GLfloat units)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(units);
    Warning( "glPolygonOffset", " not available." );
  }

  PFNGLPOLYGONOFFSETPROC driver_glPolygonOffset = NULL;

  static void REGAL_CALL loader_glPolygonOffset(Layer *_layer, GLfloat factor, GLfloat units)
  {
    driver_glPolygonOffset(factor, units);
  }

  static void REGAL_CALL missing_glPopClientAttrib(void)
  {
    Warning( "glPopClientAttrib", " not available." );
  }

  PFNGLPOPCLIENTATTRIBPROC driver_glPopClientAttrib = NULL;

  static void REGAL_CALL loader_glPopClientAttrib(Layer *_layer)
  {
    driver_glPopClientAttrib();
  }

  static void REGAL_CALL missing_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(priorities);
    Warning( "glPrioritizeTextures", " not available." );
  }

  PFNGLPRIORITIZETEXTURESPROC driver_glPrioritizeTextures = NULL;

  static void REGAL_CALL loader_glPrioritizeTextures(Layer *_layer, GLsizei n, const GLuint *textures, const GLclampf *priorities)
  {
    driver_glPrioritizeTextures(n, textures, priorities);
  }

  static void REGAL_CALL missing_glPushClientAttrib(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glPushClientAttrib", " not available." );
  }

  PFNGLPUSHCLIENTATTRIBPROC driver_glPushClientAttrib = NULL;

  static void REGAL_CALL loader_glPushClientAttrib(Layer *_layer, GLbitfield mask)
  {
    driver_glPushClientAttrib(mask);
  }

  static void REGAL_CALL missing_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glTexCoordPointer", " not available." );
  }

  PFNGLTEXCOORDPOINTERPROC driver_glTexCoordPointer = NULL;

  static void REGAL_CALL loader_glTexCoordPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glTexCoordPointer(size, type, stride, pointer);
  }

  static void REGAL_CALL missing_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage1D", " not available." );
  }

  PFNGLTEXSUBIMAGE1DPROC driver_glTexSubImage1D = NULL;

  static void REGAL_CALL loader_glTexSubImage1D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
  }

  static void REGAL_CALL missing_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage2D", " not available." );
  }

  PFNGLTEXSUBIMAGE2DPROC driver_glTexSubImage2D = NULL;

  static void REGAL_CALL loader_glTexSubImage2D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
  }

  static void REGAL_CALL missing_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexPointer", " not available." );
  }

  PFNGLVERTEXPOINTERPROC driver_glVertexPointer = NULL;

  static void REGAL_CALL loader_glVertexPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexPointer(size, type, stride, pointer);
  }

// GL_VERSION_1_2

  static void REGAL_CALL missing_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glBlendColor", " not available." );
  }

  PFNGLBLENDCOLORPROC driver_glBlendColor = NULL;

  static void REGAL_CALL loader_glBlendColor(Layer *_layer, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    driver_glBlendColor(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glBlendEquation(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquation", " not available." );
  }

  PFNGLBLENDEQUATIONPROC driver_glBlendEquation = NULL;

  static void REGAL_CALL loader_glBlendEquation(Layer *_layer, GLenum mode)
  {
    driver_glBlendEquation(mode);
  }

  static void REGAL_CALL missing_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage3D", " not available." );
  }

  PFNGLCOPYTEXSUBIMAGE3DPROC driver_glCopyTexSubImage3D = NULL;

  static void REGAL_CALL loader_glCopyTexSubImage3D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  static void REGAL_CALL missing_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    Warning( "glDrawRangeElements", " not available." );
  }

  PFNGLDRAWRANGEELEMENTSPROC driver_glDrawRangeElements = NULL;

  static void REGAL_CALL loader_glDrawRangeElements(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
  {
    driver_glDrawRangeElements(mode, start, end, count, type, indices);
  }

  static void REGAL_CALL missing_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage3D", " not available." );
  }

  PFNGLTEXIMAGE3DPROC driver_glTexImage3D = NULL;

  static void REGAL_CALL loader_glTexImage3D(Layer *_layer, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage3D", " not available." );
  }

  PFNGLTEXSUBIMAGE3DPROC driver_glTexSubImage3D = NULL;

  static void REGAL_CALL loader_glTexSubImage3D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

// GL_VERSION_1_3

  static void REGAL_CALL missing_glActiveTexture(GLenum texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glActiveTexture", " not available." );
  }

  PFNGLACTIVETEXTUREPROC driver_glActiveTexture = NULL;

  static void REGAL_CALL loader_glActiveTexture(Layer *_layer, GLenum texture)
  {
    driver_glActiveTexture(texture);
  }

  static void REGAL_CALL missing_glClientActiveTexture(GLenum texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glClientActiveTexture", " not available." );
  }

  PFNGLCLIENTACTIVETEXTUREPROC driver_glClientActiveTexture = NULL;

  static void REGAL_CALL loader_glClientActiveTexture(Layer *_layer, GLenum texture)
  {
    driver_glClientActiveTexture(texture);
  }

  static void REGAL_CALL missing_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage1D", " not available." );
  }

  PFNGLCOMPRESSEDTEXIMAGE1DPROC driver_glCompressedTexImage1D = NULL;

  static void REGAL_CALL loader_glCompressedTexImage1D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage2D", " not available." );
  }

  PFNGLCOMPRESSEDTEXIMAGE2DPROC driver_glCompressedTexImage2D = NULL;

  static void REGAL_CALL loader_glCompressedTexImage2D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage3D", " not available." );
  }

  PFNGLCOMPRESSEDTEXIMAGE3DPROC driver_glCompressedTexImage3D = NULL;

  static void REGAL_CALL loader_glCompressedTexImage3D(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage1D", " not available." );
  }

  PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC driver_glCompressedTexSubImage1D = NULL;

  static void REGAL_CALL loader_glCompressedTexSubImage1D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage2D", " not available." );
  }

  PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC driver_glCompressedTexSubImage2D = NULL;

  static void REGAL_CALL loader_glCompressedTexSubImage2D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage3D", " not available." );
  }

  PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC driver_glCompressedTexSubImage3D = NULL;

  static void REGAL_CALL loader_glCompressedTexSubImage3D(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }

  static void REGAL_CALL missing_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(img);
    Warning( "glGetCompressedTexImage", " not available." );
  }

  PFNGLGETCOMPRESSEDTEXIMAGEPROC driver_glGetCompressedTexImage = NULL;

  static void REGAL_CALL loader_glGetCompressedTexImage(Layer *_layer, GLenum target, GLint lod, GLvoid *img)
  {
    driver_glGetCompressedTexImage(target, lod, img);
  }

  static void REGAL_CALL missing_glLoadTransposeMatrixd(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadTransposeMatrixd", " not available." );
  }

  PFNGLLOADTRANSPOSEMATRIXDPROC driver_glLoadTransposeMatrixd = NULL;

  static void REGAL_CALL loader_glLoadTransposeMatrixd(Layer *_layer, const GLdouble *m)
  {
    driver_glLoadTransposeMatrixd(m);
  }

  static void REGAL_CALL missing_glLoadTransposeMatrixf(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadTransposeMatrixf", " not available." );
  }

  PFNGLLOADTRANSPOSEMATRIXFPROC driver_glLoadTransposeMatrixf = NULL;

  static void REGAL_CALL loader_glLoadTransposeMatrixf(Layer *_layer, const GLfloat *m)
  {
    driver_glLoadTransposeMatrixf(m);
  }

  static void REGAL_CALL missing_glMultTransposeMatrixd(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultTransposeMatrixd", " not available." );
  }

  PFNGLMULTTRANSPOSEMATRIXDPROC driver_glMultTransposeMatrixd = NULL;

  static void REGAL_CALL loader_glMultTransposeMatrixd(Layer *_layer, const GLdouble *m)
  {
    driver_glMultTransposeMatrixd(m);
  }

  static void REGAL_CALL missing_glMultTransposeMatrixf(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultTransposeMatrixf", " not available." );
  }

  PFNGLMULTTRANSPOSEMATRIXFPROC driver_glMultTransposeMatrixf = NULL;

  static void REGAL_CALL loader_glMultTransposeMatrixf(Layer *_layer, const GLfloat *m)
  {
    driver_glMultTransposeMatrixf(m);
  }

  static void REGAL_CALL missing_glMultiTexCoord1d(GLenum target, GLdouble s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1d", " not available." );
  }

  PFNGLMULTITEXCOORD1DPROC driver_glMultiTexCoord1d = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1d(Layer *_layer, GLenum target, GLdouble s)
  {
    driver_glMultiTexCoord1d(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1dv", " not available." );
  }

  PFNGLMULTITEXCOORD1DVPROC driver_glMultiTexCoord1dv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1dv(Layer *_layer, GLenum target, const GLdouble *v)
  {
    driver_glMultiTexCoord1dv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord1f(GLenum target, GLfloat s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1f", " not available." );
  }

  PFNGLMULTITEXCOORD1FPROC driver_glMultiTexCoord1f = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1f(Layer *_layer, GLenum target, GLfloat s)
  {
    driver_glMultiTexCoord1f(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1fv", " not available." );
  }

  PFNGLMULTITEXCOORD1FVPROC driver_glMultiTexCoord1fv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1fv(Layer *_layer, GLenum target, const GLfloat *v)
  {
    driver_glMultiTexCoord1fv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord1i(GLenum target, GLint s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1i", " not available." );
  }

  PFNGLMULTITEXCOORD1IPROC driver_glMultiTexCoord1i = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1i(Layer *_layer, GLenum target, GLint s)
  {
    driver_glMultiTexCoord1i(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1iv(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1iv", " not available." );
  }

  PFNGLMULTITEXCOORD1IVPROC driver_glMultiTexCoord1iv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1iv(Layer *_layer, GLenum target, const GLint *v)
  {
    driver_glMultiTexCoord1iv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord1s(GLenum target, GLshort s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1s", " not available." );
  }

  PFNGLMULTITEXCOORD1SPROC driver_glMultiTexCoord1s = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1s(Layer *_layer, GLenum target, GLshort s)
  {
    driver_glMultiTexCoord1s(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1sv(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1sv", " not available." );
  }

  PFNGLMULTITEXCOORD1SVPROC driver_glMultiTexCoord1sv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1sv(Layer *_layer, GLenum target, const GLshort *v)
  {
    driver_glMultiTexCoord1sv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2d", " not available." );
  }

  PFNGLMULTITEXCOORD2DPROC driver_glMultiTexCoord2d = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2d(Layer *_layer, GLenum target, GLdouble s, GLdouble t)
  {
    driver_glMultiTexCoord2d(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2dv", " not available." );
  }

  PFNGLMULTITEXCOORD2DVPROC driver_glMultiTexCoord2dv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2dv(Layer *_layer, GLenum target, const GLdouble *v)
  {
    driver_glMultiTexCoord2dv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2f", " not available." );
  }

  PFNGLMULTITEXCOORD2FPROC driver_glMultiTexCoord2f = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2f(Layer *_layer, GLenum target, GLfloat s, GLfloat t)
  {
    driver_glMultiTexCoord2f(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2fv", " not available." );
  }

  PFNGLMULTITEXCOORD2FVPROC driver_glMultiTexCoord2fv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2fv(Layer *_layer, GLenum target, const GLfloat *v)
  {
    driver_glMultiTexCoord2fv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2i", " not available." );
  }

  PFNGLMULTITEXCOORD2IPROC driver_glMultiTexCoord2i = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2i(Layer *_layer, GLenum target, GLint s, GLint t)
  {
    driver_glMultiTexCoord2i(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2iv(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2iv", " not available." );
  }

  PFNGLMULTITEXCOORD2IVPROC driver_glMultiTexCoord2iv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2iv(Layer *_layer, GLenum target, const GLint *v)
  {
    driver_glMultiTexCoord2iv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2s", " not available." );
  }

  PFNGLMULTITEXCOORD2SPROC driver_glMultiTexCoord2s = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2s(Layer *_layer, GLenum target, GLshort s, GLshort t)
  {
    driver_glMultiTexCoord2s(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2sv(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2sv", " not available." );
  }

  PFNGLMULTITEXCOORD2SVPROC driver_glMultiTexCoord2sv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2sv(Layer *_layer, GLenum target, const GLshort *v)
  {
    driver_glMultiTexCoord2sv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3d", " not available." );
  }

  PFNGLMULTITEXCOORD3DPROC driver_glMultiTexCoord3d = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3d(Layer *_layer, GLenum target, GLdouble s, GLdouble t, GLdouble r)
  {
    driver_glMultiTexCoord3d(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3dv", " not available." );
  }

  PFNGLMULTITEXCOORD3DVPROC driver_glMultiTexCoord3dv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3dv(Layer *_layer, GLenum target, const GLdouble *v)
  {
    driver_glMultiTexCoord3dv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3f", " not available." );
  }

  PFNGLMULTITEXCOORD3FPROC driver_glMultiTexCoord3f = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3f(Layer *_layer, GLenum target, GLfloat s, GLfloat t, GLfloat r)
  {
    driver_glMultiTexCoord3f(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3fv", " not available." );
  }

  PFNGLMULTITEXCOORD3FVPROC driver_glMultiTexCoord3fv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3fv(Layer *_layer, GLenum target, const GLfloat *v)
  {
    driver_glMultiTexCoord3fv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3i", " not available." );
  }

  PFNGLMULTITEXCOORD3IPROC driver_glMultiTexCoord3i = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3i(Layer *_layer, GLenum target, GLint s, GLint t, GLint r)
  {
    driver_glMultiTexCoord3i(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3iv(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3iv", " not available." );
  }

  PFNGLMULTITEXCOORD3IVPROC driver_glMultiTexCoord3iv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3iv(Layer *_layer, GLenum target, const GLint *v)
  {
    driver_glMultiTexCoord3iv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3s", " not available." );
  }

  PFNGLMULTITEXCOORD3SPROC driver_glMultiTexCoord3s = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3s(Layer *_layer, GLenum target, GLshort s, GLshort t, GLshort r)
  {
    driver_glMultiTexCoord3s(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3sv(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3sv", " not available." );
  }

  PFNGLMULTITEXCOORD3SVPROC driver_glMultiTexCoord3sv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3sv(Layer *_layer, GLenum target, const GLshort *v)
  {
    driver_glMultiTexCoord3sv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4d", " not available." );
  }

  PFNGLMULTITEXCOORD4DPROC driver_glMultiTexCoord4d = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4d(Layer *_layer, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    driver_glMultiTexCoord4d(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4dv", " not available." );
  }

  PFNGLMULTITEXCOORD4DVPROC driver_glMultiTexCoord4dv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4dv(Layer *_layer, GLenum target, const GLdouble *v)
  {
    driver_glMultiTexCoord4dv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4f", " not available." );
  }

  PFNGLMULTITEXCOORD4FPROC driver_glMultiTexCoord4f = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4f(Layer *_layer, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    driver_glMultiTexCoord4f(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4fv", " not available." );
  }

  PFNGLMULTITEXCOORD4FVPROC driver_glMultiTexCoord4fv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4fv(Layer *_layer, GLenum target, const GLfloat *v)
  {
    driver_glMultiTexCoord4fv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4i", " not available." );
  }

  PFNGLMULTITEXCOORD4IPROC driver_glMultiTexCoord4i = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4i(Layer *_layer, GLenum target, GLint s, GLint t, GLint r, GLint q)
  {
    driver_glMultiTexCoord4i(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4iv(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4iv", " not available." );
  }

  PFNGLMULTITEXCOORD4IVPROC driver_glMultiTexCoord4iv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4iv(Layer *_layer, GLenum target, const GLint *v)
  {
    driver_glMultiTexCoord4iv(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4s", " not available." );
  }

  PFNGLMULTITEXCOORD4SPROC driver_glMultiTexCoord4s = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4s(Layer *_layer, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    driver_glMultiTexCoord4s(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4sv(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4sv", " not available." );
  }

  PFNGLMULTITEXCOORD4SVPROC driver_glMultiTexCoord4sv = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4sv(Layer *_layer, GLenum target, const GLshort *v)
  {
    driver_glMultiTexCoord4sv(target, v);
  }

  static void REGAL_CALL missing_glSampleCoverage(GLclampf value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleCoverage", " not available." );
  }

  PFNGLSAMPLECOVERAGEPROC driver_glSampleCoverage = NULL;

  static void REGAL_CALL loader_glSampleCoverage(Layer *_layer, GLclampf value, GLboolean invert)
  {
    driver_glSampleCoverage(value, invert);
  }

// GL_VERSION_1_4

  static void REGAL_CALL missing_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    UNUSED_PARAMETER(sfactorRGB);
    UNUSED_PARAMETER(dfactorRGB);
    UNUSED_PARAMETER(sfactorAlpha);
    UNUSED_PARAMETER(dfactorAlpha);
    Warning( "glBlendFuncSeparate", " not available." );
  }

  PFNGLBLENDFUNCSEPARATEPROC driver_glBlendFuncSeparate = NULL;

  static void REGAL_CALL loader_glBlendFuncSeparate(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    driver_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }

  static void REGAL_CALL missing_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glFogCoordPointer", " not available." );
  }

  PFNGLFOGCOORDPOINTERPROC driver_glFogCoordPointer = NULL;

  static void REGAL_CALL loader_glFogCoordPointer(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glFogCoordPointer(type, stride, pointer);
  }

  static void REGAL_CALL missing_glFogCoordd(GLdouble coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordd", " not available." );
  }

  PFNGLFOGCOORDDPROC driver_glFogCoordd = NULL;

  static void REGAL_CALL loader_glFogCoordd(Layer *_layer, GLdouble coord)
  {
    driver_glFogCoordd(coord);
  }

  static void REGAL_CALL missing_glFogCoorddv(const GLdouble *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoorddv", " not available." );
  }

  PFNGLFOGCOORDDVPROC driver_glFogCoorddv = NULL;

  static void REGAL_CALL loader_glFogCoorddv(Layer *_layer, const GLdouble *coord)
  {
    driver_glFogCoorddv(coord);
  }

  static void REGAL_CALL missing_glFogCoordf(GLfloat coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordf", " not available." );
  }

  PFNGLFOGCOORDFPROC driver_glFogCoordf = NULL;

  static void REGAL_CALL loader_glFogCoordf(Layer *_layer, GLfloat coord)
  {
    driver_glFogCoordf(coord);
  }

  static void REGAL_CALL missing_glFogCoordfv(const GLfloat *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordfv", " not available." );
  }

  PFNGLFOGCOORDFVPROC driver_glFogCoordfv = NULL;

  static void REGAL_CALL loader_glFogCoordfv(Layer *_layer, const GLfloat *coord)
  {
    driver_glFogCoordfv(coord);
  }

  static void REGAL_CALL missing_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawArrays", " not available." );
  }

  PFNGLMULTIDRAWARRAYSPROC driver_glMultiDrawArrays = NULL;

  static void REGAL_CALL loader_glMultiDrawArrays(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    driver_glMultiDrawArrays(mode, first, count, primcount);
  }

  static void REGAL_CALL missing_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawElements", " not available." );
  }

  PFNGLMULTIDRAWELEMENTSPROC driver_glMultiDrawElements = NULL;

  static void REGAL_CALL loader_glMultiDrawElements(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
  {
    driver_glMultiDrawElements(mode, count, type, indices, primcount);
  }

  static void REGAL_CALL missing_glPointParameterf(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterf", " not available." );
  }

  PFNGLPOINTPARAMETERFPROC driver_glPointParameterf = NULL;

  static void REGAL_CALL loader_glPointParameterf(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glPointParameterf(pname, param);
  }

  static void REGAL_CALL missing_glPointParameterfv(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterfv", " not available." );
  }

  PFNGLPOINTPARAMETERFVPROC driver_glPointParameterfv = NULL;

  static void REGAL_CALL loader_glPointParameterfv(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glPointParameterfv(pname, params);
  }

  static void REGAL_CALL missing_glPointParameteri(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameteri", " not available." );
  }

  PFNGLPOINTPARAMETERIPROC driver_glPointParameteri = NULL;

  static void REGAL_CALL loader_glPointParameteri(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glPointParameteri(pname, param);
  }

  static void REGAL_CALL missing_glPointParameteriv(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameteriv", " not available." );
  }

  PFNGLPOINTPARAMETERIVPROC driver_glPointParameteriv = NULL;

  static void REGAL_CALL loader_glPointParameteriv(Layer *_layer, GLenum pname, const GLint *params)
  {
    driver_glPointParameteriv(pname, params);
  }

  static void REGAL_CALL missing_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3b", " not available." );
  }

  PFNGLSECONDARYCOLOR3BPROC driver_glSecondaryColor3b = NULL;

  static void REGAL_CALL loader_glSecondaryColor3b(Layer *_layer, GLbyte red, GLbyte green, GLbyte blue)
  {
    driver_glSecondaryColor3b(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3bv(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3bv", " not available." );
  }

  PFNGLSECONDARYCOLOR3BVPROC driver_glSecondaryColor3bv = NULL;

  static void REGAL_CALL loader_glSecondaryColor3bv(Layer *_layer, const GLbyte *v)
  {
    driver_glSecondaryColor3bv(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3d", " not available." );
  }

  PFNGLSECONDARYCOLOR3DPROC driver_glSecondaryColor3d = NULL;

  static void REGAL_CALL loader_glSecondaryColor3d(Layer *_layer, GLdouble red, GLdouble green, GLdouble blue)
  {
    driver_glSecondaryColor3d(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3dv(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3dv", " not available." );
  }

  PFNGLSECONDARYCOLOR3DVPROC driver_glSecondaryColor3dv = NULL;

  static void REGAL_CALL loader_glSecondaryColor3dv(Layer *_layer, const GLdouble *v)
  {
    driver_glSecondaryColor3dv(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3f", " not available." );
  }

  PFNGLSECONDARYCOLOR3FPROC driver_glSecondaryColor3f = NULL;

  static void REGAL_CALL loader_glSecondaryColor3f(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue)
  {
    driver_glSecondaryColor3f(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3fv(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3fv", " not available." );
  }

  PFNGLSECONDARYCOLOR3FVPROC driver_glSecondaryColor3fv = NULL;

  static void REGAL_CALL loader_glSecondaryColor3fv(Layer *_layer, const GLfloat *v)
  {
    driver_glSecondaryColor3fv(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3i(GLint red, GLint green, GLint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3i", " not available." );
  }

  PFNGLSECONDARYCOLOR3IPROC driver_glSecondaryColor3i = NULL;

  static void REGAL_CALL loader_glSecondaryColor3i(Layer *_layer, GLint red, GLint green, GLint blue)
  {
    driver_glSecondaryColor3i(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3iv(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3iv", " not available." );
  }

  PFNGLSECONDARYCOLOR3IVPROC driver_glSecondaryColor3iv = NULL;

  static void REGAL_CALL loader_glSecondaryColor3iv(Layer *_layer, const GLint *v)
  {
    driver_glSecondaryColor3iv(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3s", " not available." );
  }

  PFNGLSECONDARYCOLOR3SPROC driver_glSecondaryColor3s = NULL;

  static void REGAL_CALL loader_glSecondaryColor3s(Layer *_layer, GLshort red, GLshort green, GLshort blue)
  {
    driver_glSecondaryColor3s(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3sv(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3sv", " not available." );
  }

  PFNGLSECONDARYCOLOR3SVPROC driver_glSecondaryColor3sv = NULL;

  static void REGAL_CALL loader_glSecondaryColor3sv(Layer *_layer, const GLshort *v)
  {
    driver_glSecondaryColor3sv(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3ub", " not available." );
  }

  PFNGLSECONDARYCOLOR3UBPROC driver_glSecondaryColor3ub = NULL;

  static void REGAL_CALL loader_glSecondaryColor3ub(Layer *_layer, GLubyte red, GLubyte green, GLubyte blue)
  {
    driver_glSecondaryColor3ub(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3ubv(const GLubyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3ubv", " not available." );
  }

  PFNGLSECONDARYCOLOR3UBVPROC driver_glSecondaryColor3ubv = NULL;

  static void REGAL_CALL loader_glSecondaryColor3ubv(Layer *_layer, const GLubyte *v)
  {
    driver_glSecondaryColor3ubv(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3ui", " not available." );
  }

  PFNGLSECONDARYCOLOR3UIPROC driver_glSecondaryColor3ui = NULL;

  static void REGAL_CALL loader_glSecondaryColor3ui(Layer *_layer, GLuint red, GLuint green, GLuint blue)
  {
    driver_glSecondaryColor3ui(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3uiv(const GLuint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3uiv", " not available." );
  }

  PFNGLSECONDARYCOLOR3UIVPROC driver_glSecondaryColor3uiv = NULL;

  static void REGAL_CALL loader_glSecondaryColor3uiv(Layer *_layer, const GLuint *v)
  {
    driver_glSecondaryColor3uiv(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3us", " not available." );
  }

  PFNGLSECONDARYCOLOR3USPROC driver_glSecondaryColor3us = NULL;

  static void REGAL_CALL loader_glSecondaryColor3us(Layer *_layer, GLushort red, GLushort green, GLushort blue)
  {
    driver_glSecondaryColor3us(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3usv(const GLushort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3usv", " not available." );
  }

  PFNGLSECONDARYCOLOR3USVPROC driver_glSecondaryColor3usv = NULL;

  static void REGAL_CALL loader_glSecondaryColor3usv(Layer *_layer, const GLushort *v)
  {
    driver_glSecondaryColor3usv(v);
  }

  static void REGAL_CALL missing_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glSecondaryColorPointer", " not available." );
  }

  PFNGLSECONDARYCOLORPOINTERPROC driver_glSecondaryColorPointer = NULL;

  static void REGAL_CALL loader_glSecondaryColorPointer(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glSecondaryColorPointer(size, type, stride, pointer);
  }

  static void REGAL_CALL missing_glWindowPos2d(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2d", " not available." );
  }

  PFNGLWINDOWPOS2DPROC driver_glWindowPos2d = NULL;

  static void REGAL_CALL loader_glWindowPos2d(Layer *_layer, GLdouble x, GLdouble y)
  {
    driver_glWindowPos2d(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2dv(const GLdouble *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2dv", " not available." );
  }

  PFNGLWINDOWPOS2DVPROC driver_glWindowPos2dv = NULL;

  static void REGAL_CALL loader_glWindowPos2dv(Layer *_layer, const GLdouble *p)
  {
    driver_glWindowPos2dv(p);
  }

  static void REGAL_CALL missing_glWindowPos2f(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2f", " not available." );
  }

  PFNGLWINDOWPOS2FPROC driver_glWindowPos2f = NULL;

  static void REGAL_CALL loader_glWindowPos2f(Layer *_layer, GLfloat x, GLfloat y)
  {
    driver_glWindowPos2f(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2fv(const GLfloat *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2fv", " not available." );
  }

  PFNGLWINDOWPOS2FVPROC driver_glWindowPos2fv = NULL;

  static void REGAL_CALL loader_glWindowPos2fv(Layer *_layer, const GLfloat *p)
  {
    driver_glWindowPos2fv(p);
  }

  static void REGAL_CALL missing_glWindowPos2i(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2i", " not available." );
  }

  PFNGLWINDOWPOS2IPROC driver_glWindowPos2i = NULL;

  static void REGAL_CALL loader_glWindowPos2i(Layer *_layer, GLint x, GLint y)
  {
    driver_glWindowPos2i(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2iv(const GLint *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2iv", " not available." );
  }

  PFNGLWINDOWPOS2IVPROC driver_glWindowPos2iv = NULL;

  static void REGAL_CALL loader_glWindowPos2iv(Layer *_layer, const GLint *p)
  {
    driver_glWindowPos2iv(p);
  }

  static void REGAL_CALL missing_glWindowPos2s(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2s", " not available." );
  }

  PFNGLWINDOWPOS2SPROC driver_glWindowPos2s = NULL;

  static void REGAL_CALL loader_glWindowPos2s(Layer *_layer, GLshort x, GLshort y)
  {
    driver_glWindowPos2s(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2sv(const GLshort *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2sv", " not available." );
  }

  PFNGLWINDOWPOS2SVPROC driver_glWindowPos2sv = NULL;

  static void REGAL_CALL loader_glWindowPos2sv(Layer *_layer, const GLshort *p)
  {
    driver_glWindowPos2sv(p);
  }

  static void REGAL_CALL missing_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3d", " not available." );
  }

  PFNGLWINDOWPOS3DPROC driver_glWindowPos3d = NULL;

  static void REGAL_CALL loader_glWindowPos3d(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glWindowPos3d(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3dv(const GLdouble *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3dv", " not available." );
  }

  PFNGLWINDOWPOS3DVPROC driver_glWindowPos3dv = NULL;

  static void REGAL_CALL loader_glWindowPos3dv(Layer *_layer, const GLdouble *p)
  {
    driver_glWindowPos3dv(p);
  }

  static void REGAL_CALL missing_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3f", " not available." );
  }

  PFNGLWINDOWPOS3FPROC driver_glWindowPos3f = NULL;

  static void REGAL_CALL loader_glWindowPos3f(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glWindowPos3f(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3fv(const GLfloat *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3fv", " not available." );
  }

  PFNGLWINDOWPOS3FVPROC driver_glWindowPos3fv = NULL;

  static void REGAL_CALL loader_glWindowPos3fv(Layer *_layer, const GLfloat *p)
  {
    driver_glWindowPos3fv(p);
  }

  static void REGAL_CALL missing_glWindowPos3i(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3i", " not available." );
  }

  PFNGLWINDOWPOS3IPROC driver_glWindowPos3i = NULL;

  static void REGAL_CALL loader_glWindowPos3i(Layer *_layer, GLint x, GLint y, GLint z)
  {
    driver_glWindowPos3i(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3iv(const GLint *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3iv", " not available." );
  }

  PFNGLWINDOWPOS3IVPROC driver_glWindowPos3iv = NULL;

  static void REGAL_CALL loader_glWindowPos3iv(Layer *_layer, const GLint *p)
  {
    driver_glWindowPos3iv(p);
  }

  static void REGAL_CALL missing_glWindowPos3s(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3s", " not available." );
  }

  PFNGLWINDOWPOS3SPROC driver_glWindowPos3s = NULL;

  static void REGAL_CALL loader_glWindowPos3s(Layer *_layer, GLshort x, GLshort y, GLshort z)
  {
    driver_glWindowPos3s(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3sv(const GLshort *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3sv", " not available." );
  }

  PFNGLWINDOWPOS3SVPROC driver_glWindowPos3sv = NULL;

  static void REGAL_CALL loader_glWindowPos3sv(Layer *_layer, const GLshort *p)
  {
    driver_glWindowPos3sv(p);
  }

// GL_VERSION_1_5

  static void REGAL_CALL missing_glBeginQuery(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQuery", " not available." );
  }

  PFNGLBEGINQUERYPROC driver_glBeginQuery = NULL;

  static void REGAL_CALL loader_glBeginQuery(Layer *_layer, GLenum target, GLuint id)
  {
    driver_glBeginQuery(target, id);
  }

  static void REGAL_CALL missing_glBindBuffer(GLenum target, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBuffer", " not available." );
  }

  PFNGLBINDBUFFERPROC driver_glBindBuffer = NULL;

  static void REGAL_CALL loader_glBindBuffer(Layer *_layer, GLenum target, GLuint buffer)
  {
    driver_glBindBuffer(target, buffer);
  }

  static void REGAL_CALL missing_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(usage);
    Warning( "glBufferData", " not available." );
  }

  PFNGLBUFFERDATAPROC driver_glBufferData = NULL;

  static void REGAL_CALL loader_glBufferData(Layer *_layer, GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
  {
    driver_glBufferData(target, size, data, usage);
  }

  static void REGAL_CALL missing_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glBufferSubData", " not available." );
  }

  PFNGLBUFFERSUBDATAPROC driver_glBufferSubData = NULL;

  static void REGAL_CALL loader_glBufferSubData(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
  {
    driver_glBufferSubData(target, offset, size, data);
  }

  static void REGAL_CALL missing_glDeleteBuffers(GLsizei n, const GLuint *buffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(buffers);
    Warning( "glDeleteBuffers", " not available." );
  }

  PFNGLDELETEBUFFERSPROC driver_glDeleteBuffers = NULL;

  static void REGAL_CALL loader_glDeleteBuffers(Layer *_layer, GLsizei n, const GLuint *buffers)
  {
    driver_glDeleteBuffers(n, buffers);
  }

  static void REGAL_CALL missing_glDeleteQueries(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteQueries", " not available." );
  }

  PFNGLDELETEQUERIESPROC driver_glDeleteQueries = NULL;

  static void REGAL_CALL loader_glDeleteQueries(Layer *_layer, GLsizei n, const GLuint *ids)
  {
    driver_glDeleteQueries(n, ids);
  }

  static void REGAL_CALL missing_glEndQuery(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glEndQuery", " not available." );
  }

  PFNGLENDQUERYPROC driver_glEndQuery = NULL;

  static void REGAL_CALL loader_glEndQuery(Layer *_layer, GLenum target)
  {
    driver_glEndQuery(target);
  }

  static void REGAL_CALL missing_glGenBuffers(GLsizei n, GLuint *buffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(buffers);
    Warning( "glGenBuffers", " not available." );
  }

  PFNGLGENBUFFERSPROC driver_glGenBuffers = NULL;

  static void REGAL_CALL loader_glGenBuffers(Layer *_layer, GLsizei n, GLuint *buffers)
  {
    driver_glGenBuffers(n, buffers);
  }

  static void REGAL_CALL missing_glGenQueries(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenQueries", " not available." );
  }

  PFNGLGENQUERIESPROC driver_glGenQueries = NULL;

  static void REGAL_CALL loader_glGenQueries(Layer *_layer, GLsizei n, GLuint *ids)
  {
    driver_glGenQueries(n, ids);
  }

  static void REGAL_CALL missing_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferParameteriv", " not available." );
  }

  PFNGLGETBUFFERPARAMETERIVPROC driver_glGetBufferParameteriv = NULL;

  static void REGAL_CALL loader_glGetBufferParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetBufferParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferPointerv", " not available." );
  }

  PFNGLGETBUFFERPOINTERVPROC driver_glGetBufferPointerv = NULL;

  static void REGAL_CALL loader_glGetBufferPointerv(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
  {
    driver_glGetBufferPointerv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glGetBufferSubData", " not available." );
  }

  PFNGLGETBUFFERSUBDATAPROC driver_glGetBufferSubData = NULL;

  static void REGAL_CALL loader_glGetBufferSubData(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
  {
    driver_glGetBufferSubData(target, offset, size, data);
  }

  static void REGAL_CALL missing_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectiv", " not available." );
  }

  PFNGLGETQUERYOBJECTIVPROC driver_glGetQueryObjectiv = NULL;

  static void REGAL_CALL loader_glGetQueryObjectiv(Layer *_layer, GLuint id, GLenum pname, GLint *params)
  {
    driver_glGetQueryObjectiv(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectuiv", " not available." );
  }

  PFNGLGETQUERYOBJECTUIVPROC driver_glGetQueryObjectuiv = NULL;

  static void REGAL_CALL loader_glGetQueryObjectuiv(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
  {
    driver_glGetQueryObjectuiv(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryiv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryiv", " not available." );
  }

  PFNGLGETQUERYIVPROC driver_glGetQueryiv = NULL;

  static void REGAL_CALL loader_glGetQueryiv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetQueryiv(target, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsBuffer(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glIsBuffer", " not available." );
    return GL_FALSE;
  }

  PFNGLISBUFFERPROC driver_glIsBuffer = NULL;

  static GLboolean REGAL_CALL loader_glIsBuffer(Layer *_layer, GLuint buffer)
  {
    return driver_glIsBuffer(buffer);
  }

  static GLboolean REGAL_CALL missing_glIsQuery(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsQuery", " not available." );
    return GL_FALSE;
  }

  PFNGLISQUERYPROC driver_glIsQuery = NULL;

  static GLboolean REGAL_CALL loader_glIsQuery(Layer *_layer, GLuint id)
  {
    return driver_glIsQuery(id);
  }

  static GLvoid *REGAL_CALL missing_glMapBuffer(GLenum target, GLenum access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(access);
    Warning( "glMapBuffer", " not available." );
    return NULL;
  }

  PFNGLMAPBUFFERPROC driver_glMapBuffer = NULL;

  static GLvoid *REGAL_CALL loader_glMapBuffer(Layer *_layer, GLenum target, GLenum access)
  {
    return driver_glMapBuffer(target, access);
  }

  static GLboolean REGAL_CALL missing_glUnmapBuffer(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glUnmapBuffer", " not available." );
    return GL_FALSE;
  }

  PFNGLUNMAPBUFFERPROC driver_glUnmapBuffer = NULL;

  static GLboolean REGAL_CALL loader_glUnmapBuffer(Layer *_layer, GLenum target)
  {
    return driver_glUnmapBuffer(target);
  }

// GL_VERSION_2_0

  static void REGAL_CALL missing_glAttachShader(GLuint program, GLuint shader)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shader);
    Warning( "glAttachShader", " not available." );
  }

  PFNGLATTACHSHADERPROC driver_glAttachShader = NULL;

  static void REGAL_CALL loader_glAttachShader(Layer *_layer, GLuint program, GLuint shader)
  {
    driver_glAttachShader(program, shader);
  }

  static void REGAL_CALL missing_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(name);
    Warning( "glBindAttribLocation", " not available." );
  }

  PFNGLBINDATTRIBLOCATIONPROC driver_glBindAttribLocation = NULL;

  static void REGAL_CALL loader_glBindAttribLocation(Layer *_layer, GLuint program, GLuint index, const GLchar *name)
  {
    driver_glBindAttribLocation(program, index, name);
  }

  static void REGAL_CALL missing_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparate", " not available." );
  }

  PFNGLBLENDEQUATIONSEPARATEPROC driver_glBlendEquationSeparate = NULL;

  static void REGAL_CALL loader_glBlendEquationSeparate(Layer *_layer, GLenum modeRGB, GLenum modeAlpha)
  {
    driver_glBlendEquationSeparate(modeRGB, modeAlpha);
  }

  static void REGAL_CALL missing_glCompileShader(GLuint shader)
  {
    UNUSED_PARAMETER(shader);
    Warning( "glCompileShader", " not available." );
  }

  PFNGLCOMPILESHADERPROC driver_glCompileShader = NULL;

  static void REGAL_CALL loader_glCompileShader(Layer *_layer, GLuint shader)
  {
    driver_glCompileShader(shader);
  }

  static GLuint REGAL_CALL missing_glCreateProgram(void)
  {
    Warning( "glCreateProgram", " not available." );
    return 0;
  }

  PFNGLCREATEPROGRAMPROC driver_glCreateProgram = NULL;

  static GLuint REGAL_CALL loader_glCreateProgram(Layer *_layer)
  {
    return driver_glCreateProgram();
  }

  static GLuint REGAL_CALL missing_glCreateShader(GLenum type)
  {
    UNUSED_PARAMETER(type);
    Warning( "glCreateShader", " not available." );
    return 0;
  }

  PFNGLCREATESHADERPROC driver_glCreateShader = NULL;

  static GLuint REGAL_CALL loader_glCreateShader(Layer *_layer, GLenum type)
  {
    return driver_glCreateShader(type);
  }

  static void REGAL_CALL missing_glDeleteProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glDeleteProgram", " not available." );
  }

  PFNGLDELETEPROGRAMPROC driver_glDeleteProgram = NULL;

  static void REGAL_CALL loader_glDeleteProgram(Layer *_layer, GLuint program)
  {
    driver_glDeleteProgram(program);
  }

  static void REGAL_CALL missing_glDeleteShader(GLuint shader)
  {
    UNUSED_PARAMETER(shader);
    Warning( "glDeleteShader", " not available." );
  }

  PFNGLDELETESHADERPROC driver_glDeleteShader = NULL;

  static void REGAL_CALL loader_glDeleteShader(Layer *_layer, GLuint shader)
  {
    driver_glDeleteShader(shader);
  }

  static void REGAL_CALL missing_glDetachShader(GLuint program, GLuint shader)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shader);
    Warning( "glDetachShader", " not available." );
  }

  PFNGLDETACHSHADERPROC driver_glDetachShader = NULL;

  static void REGAL_CALL loader_glDetachShader(Layer *_layer, GLuint program, GLuint shader)
  {
    driver_glDetachShader(program, shader);
  }

  static void REGAL_CALL missing_glDisableVertexAttribArray(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glDisableVertexAttribArray", " not available." );
  }

  PFNGLDISABLEVERTEXATTRIBARRAYPROC driver_glDisableVertexAttribArray = NULL;

  static void REGAL_CALL loader_glDisableVertexAttribArray(Layer *_layer, GLuint index)
  {
    driver_glDisableVertexAttribArray(index);
  }

  static void REGAL_CALL missing_glDrawBuffers(GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glDrawBuffers", " not available." );
  }

  PFNGLDRAWBUFFERSPROC driver_glDrawBuffers = NULL;

  static void REGAL_CALL loader_glDrawBuffers(Layer *_layer, GLsizei n, const GLenum *bufs)
  {
    driver_glDrawBuffers(n, bufs);
  }

  static void REGAL_CALL missing_glEnableVertexAttribArray(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glEnableVertexAttribArray", " not available." );
  }

  PFNGLENABLEVERTEXATTRIBARRAYPROC driver_glEnableVertexAttribArray = NULL;

  static void REGAL_CALL loader_glEnableVertexAttribArray(Layer *_layer, GLuint index)
  {
    driver_glEnableVertexAttribArray(index);
  }

  static void REGAL_CALL missing_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveAttrib", " not available." );
  }

  PFNGLGETACTIVEATTRIBPROC driver_glGetActiveAttrib = NULL;

  static void REGAL_CALL loader_glGetActiveAttrib(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
  {
    driver_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
  }

  static void REGAL_CALL missing_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveUniform", " not available." );
  }

  PFNGLGETACTIVEUNIFORMPROC driver_glGetActiveUniform = NULL;

  static void REGAL_CALL loader_glGetActiveUniform(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
  {
    driver_glGetActiveUniform(program, index, bufSize, length, size, type, name);
  }

  static void REGAL_CALL missing_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(maxCount);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(shaders);
    Warning( "glGetAttachedShaders", " not available." );
  }

  PFNGLGETATTACHEDSHADERSPROC driver_glGetAttachedShaders = NULL;

  static void REGAL_CALL loader_glGetAttachedShaders(Layer *_layer, GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
  {
    driver_glGetAttachedShaders(program, maxCount, count, shaders);
  }

  static GLint REGAL_CALL missing_glGetAttribLocation(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetAttribLocation", " not available." );
    return 0;
  }

  PFNGLGETATTRIBLOCATIONPROC driver_glGetAttribLocation = NULL;

  static GLint REGAL_CALL loader_glGetAttribLocation(Layer *_layer, GLuint program, const GLchar *name)
  {
    return driver_glGetAttribLocation(program, name);
  }

  static void REGAL_CALL missing_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(infoLog);
    Warning( "glGetProgramInfoLog", " not available." );
  }

  PFNGLGETPROGRAMINFOLOGPROC driver_glGetProgramInfoLog = NULL;

  static void REGAL_CALL loader_glGetProgramInfoLog(Layer *_layer, GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    driver_glGetProgramInfoLog(program, bufSize, length, infoLog);
  }

  static void REGAL_CALL missing_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramiv", " not available." );
  }

  PFNGLGETPROGRAMIVPROC driver_glGetProgramiv = NULL;

  static void REGAL_CALL loader_glGetProgramiv(Layer *_layer, GLuint program, GLenum pname, GLint *params)
  {
    driver_glGetProgramiv(program, pname, params);
  }

  static void REGAL_CALL missing_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(infoLog);
    Warning( "glGetShaderInfoLog", " not available." );
  }

  PFNGLGETSHADERINFOLOGPROC driver_glGetShaderInfoLog = NULL;

  static void REGAL_CALL loader_glGetShaderInfoLog(Layer *_layer, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    driver_glGetShaderInfoLog(shader, bufSize, length, infoLog);
  }

  static void REGAL_CALL missing_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(source);
    Warning( "glGetShaderSource", " not available." );
  }

  PFNGLGETSHADERSOURCEPROC driver_glGetShaderSource = NULL;

  static void REGAL_CALL loader_glGetShaderSource(Layer *_layer, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
  {
    driver_glGetShaderSource(shader, bufSize, length, source);
  }

  static void REGAL_CALL missing_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetShaderiv", " not available." );
  }

  PFNGLGETSHADERIVPROC driver_glGetShaderiv = NULL;

  static void REGAL_CALL loader_glGetShaderiv(Layer *_layer, GLuint shader, GLenum pname, GLint *params)
  {
    driver_glGetShaderiv(shader, pname, params);
  }

  static GLint REGAL_CALL missing_glGetUniformLocation(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetUniformLocation", " not available." );
    return 0;
  }

  PFNGLGETUNIFORMLOCATIONPROC driver_glGetUniformLocation = NULL;

  static GLint REGAL_CALL loader_glGetUniformLocation(Layer *_layer, GLuint program, const GLchar *name)
  {
    return driver_glGetUniformLocation(program, name);
  }

  static void REGAL_CALL missing_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformfv", " not available." );
  }

  PFNGLGETUNIFORMFVPROC driver_glGetUniformfv = NULL;

  static void REGAL_CALL loader_glGetUniformfv(Layer *_layer, GLuint program, GLint location, GLfloat *params)
  {
    driver_glGetUniformfv(program, location, params);
  }

  static void REGAL_CALL missing_glGetUniformiv(GLuint program, GLint location, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformiv", " not available." );
  }

  PFNGLGETUNIFORMIVPROC driver_glGetUniformiv = NULL;

  static void REGAL_CALL loader_glGetUniformiv(Layer *_layer, GLuint program, GLint location, GLint *params)
  {
    driver_glGetUniformiv(program, location, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(pointer);
    Warning( "glGetVertexAttribPointerv", " not available." );
  }

  PFNGLGETVERTEXATTRIBPOINTERVPROC driver_glGetVertexAttribPointerv = NULL;

  static void REGAL_CALL loader_glGetVertexAttribPointerv(Layer *_layer, GLuint index, GLenum pname, GLvoid **pointer)
  {
    driver_glGetVertexAttribPointerv(index, pname, pointer);
  }

  static void REGAL_CALL missing_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribdv", " not available." );
  }

  PFNGLGETVERTEXATTRIBDVPROC driver_glGetVertexAttribdv = NULL;

  static void REGAL_CALL loader_glGetVertexAttribdv(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
  {
    driver_glGetVertexAttribdv(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribfv", " not available." );
  }

  PFNGLGETVERTEXATTRIBFVPROC driver_glGetVertexAttribfv = NULL;

  static void REGAL_CALL loader_glGetVertexAttribfv(Layer *_layer, GLuint index, GLenum pname, GLfloat *params)
  {
    driver_glGetVertexAttribfv(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribiv", " not available." );
  }

  PFNGLGETVERTEXATTRIBIVPROC driver_glGetVertexAttribiv = NULL;

  static void REGAL_CALL loader_glGetVertexAttribiv(Layer *_layer, GLuint index, GLenum pname, GLint *params)
  {
    driver_glGetVertexAttribiv(index, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glIsProgram", " not available." );
    return GL_FALSE;
  }

  PFNGLISPROGRAMPROC driver_glIsProgram = NULL;

  static GLboolean REGAL_CALL loader_glIsProgram(Layer *_layer, GLuint program)
  {
    return driver_glIsProgram(program);
  }

  static GLboolean REGAL_CALL missing_glIsShader(GLuint shader)
  {
    UNUSED_PARAMETER(shader);
    Warning( "glIsShader", " not available." );
    return GL_FALSE;
  }

  PFNGLISSHADERPROC driver_glIsShader = NULL;

  static GLboolean REGAL_CALL loader_glIsShader(Layer *_layer, GLuint shader)
  {
    return driver_glIsShader(shader);
  }

  static void REGAL_CALL missing_glLinkProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glLinkProgram", " not available." );
  }

  PFNGLLINKPROGRAMPROC driver_glLinkProgram = NULL;

  static void REGAL_CALL loader_glLinkProgram(Layer *_layer, GLuint program)
  {
    driver_glLinkProgram(program);
  }

  static void REGAL_CALL missing_glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(string);
    UNUSED_PARAMETER(length);
    Warning( "glShaderSource", " not available." );
  }

  PFNGLSHADERSOURCEPROC driver_glShaderSource = NULL;

  static void REGAL_CALL loader_glShaderSource(Layer *_layer, GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
  {
    driver_glShaderSource(shader, count, string, length);
  }

  static void REGAL_CALL missing_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilFuncSeparate", " not available." );
  }

  PFNGLSTENCILFUNCSEPARATEPROC driver_glStencilFuncSeparate = NULL;

  static void REGAL_CALL loader_glStencilFuncSeparate(Layer *_layer, GLenum face, GLenum func, GLint ref, GLuint mask)
  {
    driver_glStencilFuncSeparate(face, func, ref, mask);
  }

  static void REGAL_CALL missing_glStencilMaskSeparate(GLenum face, GLuint mask)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilMaskSeparate", " not available." );
  }

  PFNGLSTENCILMASKSEPARATEPROC driver_glStencilMaskSeparate = NULL;

  static void REGAL_CALL loader_glStencilMaskSeparate(Layer *_layer, GLenum face, GLuint mask)
  {
    driver_glStencilMaskSeparate(face, mask);
  }

  static void REGAL_CALL missing_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(fail);
    UNUSED_PARAMETER(zfail);
    UNUSED_PARAMETER(zpass);
    Warning( "glStencilOpSeparate", " not available." );
  }

  PFNGLSTENCILOPSEPARATEPROC driver_glStencilOpSeparate = NULL;

  static void REGAL_CALL loader_glStencilOpSeparate(Layer *_layer, GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
  {
    driver_glStencilOpSeparate(face, fail, zfail, zpass);
  }

  static void REGAL_CALL missing_glUniform1f(GLint location, GLfloat v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1f", " not available." );
  }

  PFNGLUNIFORM1FPROC driver_glUniform1f = NULL;

  static void REGAL_CALL loader_glUniform1f(Layer *_layer, GLint location, GLfloat v0)
  {
    driver_glUniform1f(location, v0);
  }

  static void REGAL_CALL missing_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1fv", " not available." );
  }

  PFNGLUNIFORM1FVPROC driver_glUniform1fv = NULL;

  static void REGAL_CALL loader_glUniform1fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glUniform1fv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform1i(GLint location, GLint v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1i", " not available." );
  }

  PFNGLUNIFORM1IPROC driver_glUniform1i = NULL;

  static void REGAL_CALL loader_glUniform1i(Layer *_layer, GLint location, GLint v0)
  {
    driver_glUniform1i(location, v0);
  }

  static void REGAL_CALL missing_glUniform1iv(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1iv", " not available." );
  }

  PFNGLUNIFORM1IVPROC driver_glUniform1iv = NULL;

  static void REGAL_CALL loader_glUniform1iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
  {
    driver_glUniform1iv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2f", " not available." );
  }

  PFNGLUNIFORM2FPROC driver_glUniform2f = NULL;

  static void REGAL_CALL loader_glUniform2f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1)
  {
    driver_glUniform2f(location, v0, v1);
  }

  static void REGAL_CALL missing_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2fv", " not available." );
  }

  PFNGLUNIFORM2FVPROC driver_glUniform2fv = NULL;

  static void REGAL_CALL loader_glUniform2fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glUniform2fv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2i(GLint location, GLint v0, GLint v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2i", " not available." );
  }

  PFNGLUNIFORM2IPROC driver_glUniform2i = NULL;

  static void REGAL_CALL loader_glUniform2i(Layer *_layer, GLint location, GLint v0, GLint v1)
  {
    driver_glUniform2i(location, v0, v1);
  }

  static void REGAL_CALL missing_glUniform2iv(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2iv", " not available." );
  }

  PFNGLUNIFORM2IVPROC driver_glUniform2iv = NULL;

  static void REGAL_CALL loader_glUniform2iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
  {
    driver_glUniform2iv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3f", " not available." );
  }

  PFNGLUNIFORM3FPROC driver_glUniform3f = NULL;

  static void REGAL_CALL loader_glUniform3f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    driver_glUniform3f(location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3fv", " not available." );
  }

  PFNGLUNIFORM3FVPROC driver_glUniform3fv = NULL;

  static void REGAL_CALL loader_glUniform3fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glUniform3fv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3i", " not available." );
  }

  PFNGLUNIFORM3IPROC driver_glUniform3i = NULL;

  static void REGAL_CALL loader_glUniform3i(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2)
  {
    driver_glUniform3i(location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glUniform3iv(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3iv", " not available." );
  }

  PFNGLUNIFORM3IVPROC driver_glUniform3iv = NULL;

  static void REGAL_CALL loader_glUniform3iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
  {
    driver_glUniform3iv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4f", " not available." );
  }

  PFNGLUNIFORM4FPROC driver_glUniform4f = NULL;

  static void REGAL_CALL loader_glUniform4f(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    driver_glUniform4f(location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4fv", " not available." );
  }

  PFNGLUNIFORM4FVPROC driver_glUniform4fv = NULL;

  static void REGAL_CALL loader_glUniform4fv(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glUniform4fv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4i", " not available." );
  }

  PFNGLUNIFORM4IPROC driver_glUniform4i = NULL;

  static void REGAL_CALL loader_glUniform4i(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    driver_glUniform4i(location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glUniform4iv(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4iv", " not available." );
  }

  PFNGLUNIFORM4IVPROC driver_glUniform4iv = NULL;

  static void REGAL_CALL loader_glUniform4iv(Layer *_layer, GLint location, GLsizei count, const GLint *value)
  {
    driver_glUniform4iv(location, count, value);
  }

  static void REGAL_CALL missing_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2fv", " not available." );
  }

  PFNGLUNIFORMMATRIX2FVPROC driver_glUniformMatrix2fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix2fv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3fv", " not available." );
  }

  PFNGLUNIFORMMATRIX3FVPROC driver_glUniformMatrix3fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix3fv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4fv", " not available." );
  }

  PFNGLUNIFORMMATRIX4FVPROC driver_glUniformMatrix4fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix4fv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUseProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glUseProgram", " not available." );
  }

  PFNGLUSEPROGRAMPROC driver_glUseProgram = NULL;

  static void REGAL_CALL loader_glUseProgram(Layer *_layer, GLuint program)
  {
    driver_glUseProgram(program);
  }

  static void REGAL_CALL missing_glValidateProgram(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glValidateProgram", " not available." );
  }

  PFNGLVALIDATEPROGRAMPROC driver_glValidateProgram = NULL;

  static void REGAL_CALL loader_glValidateProgram(Layer *_layer, GLuint program)
  {
    driver_glValidateProgram(program);
  }

  static void REGAL_CALL missing_glVertexAttrib1d(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1d", " not available." );
  }

  PFNGLVERTEXATTRIB1DPROC driver_glVertexAttrib1d = NULL;

  static void REGAL_CALL loader_glVertexAttrib1d(Layer *_layer, GLuint index, GLdouble x)
  {
    driver_glVertexAttrib1d(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1dv", " not available." );
  }

  PFNGLVERTEXATTRIB1DVPROC driver_glVertexAttrib1dv = NULL;

  static void REGAL_CALL loader_glVertexAttrib1dv(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib1dv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib1f(GLuint index, GLfloat x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1f", " not available." );
  }

  PFNGLVERTEXATTRIB1FPROC driver_glVertexAttrib1f = NULL;

  static void REGAL_CALL loader_glVertexAttrib1f(Layer *_layer, GLuint index, GLfloat x)
  {
    driver_glVertexAttrib1f(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1fv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1fv", " not available." );
  }

  PFNGLVERTEXATTRIB1FVPROC driver_glVertexAttrib1fv = NULL;

  static void REGAL_CALL loader_glVertexAttrib1fv(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib1fv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib1s(GLuint index, GLshort x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1s", " not available." );
  }

  PFNGLVERTEXATTRIB1SPROC driver_glVertexAttrib1s = NULL;

  static void REGAL_CALL loader_glVertexAttrib1s(Layer *_layer, GLuint index, GLshort x)
  {
    driver_glVertexAttrib1s(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1sv", " not available." );
  }

  PFNGLVERTEXATTRIB1SVPROC driver_glVertexAttrib1sv = NULL;

  static void REGAL_CALL loader_glVertexAttrib1sv(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib1sv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2d", " not available." );
  }

  PFNGLVERTEXATTRIB2DPROC driver_glVertexAttrib2d = NULL;

  static void REGAL_CALL loader_glVertexAttrib2d(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
  {
    driver_glVertexAttrib2d(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2dv", " not available." );
  }

  PFNGLVERTEXATTRIB2DVPROC driver_glVertexAttrib2dv = NULL;

  static void REGAL_CALL loader_glVertexAttrib2dv(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib2dv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2f", " not available." );
  }

  PFNGLVERTEXATTRIB2FPROC driver_glVertexAttrib2f = NULL;

  static void REGAL_CALL loader_glVertexAttrib2f(Layer *_layer, GLuint index, GLfloat x, GLfloat y)
  {
    driver_glVertexAttrib2f(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2fv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2fv", " not available." );
  }

  PFNGLVERTEXATTRIB2FVPROC driver_glVertexAttrib2fv = NULL;

  static void REGAL_CALL loader_glVertexAttrib2fv(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib2fv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2s", " not available." );
  }

  PFNGLVERTEXATTRIB2SPROC driver_glVertexAttrib2s = NULL;

  static void REGAL_CALL loader_glVertexAttrib2s(Layer *_layer, GLuint index, GLshort x, GLshort y)
  {
    driver_glVertexAttrib2s(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2sv", " not available." );
  }

  PFNGLVERTEXATTRIB2SVPROC driver_glVertexAttrib2sv = NULL;

  static void REGAL_CALL loader_glVertexAttrib2sv(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib2sv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3d", " not available." );
  }

  PFNGLVERTEXATTRIB3DPROC driver_glVertexAttrib3d = NULL;

  static void REGAL_CALL loader_glVertexAttrib3d(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glVertexAttrib3d(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3dv", " not available." );
  }

  PFNGLVERTEXATTRIB3DVPROC driver_glVertexAttrib3dv = NULL;

  static void REGAL_CALL loader_glVertexAttrib3dv(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib3dv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3f", " not available." );
  }

  PFNGLVERTEXATTRIB3FPROC driver_glVertexAttrib3f = NULL;

  static void REGAL_CALL loader_glVertexAttrib3f(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glVertexAttrib3f(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3fv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3fv", " not available." );
  }

  PFNGLVERTEXATTRIB3FVPROC driver_glVertexAttrib3fv = NULL;

  static void REGAL_CALL loader_glVertexAttrib3fv(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib3fv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3s", " not available." );
  }

  PFNGLVERTEXATTRIB3SPROC driver_glVertexAttrib3s = NULL;

  static void REGAL_CALL loader_glVertexAttrib3s(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z)
  {
    driver_glVertexAttrib3s(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3sv", " not available." );
  }

  PFNGLVERTEXATTRIB3SVPROC driver_glVertexAttrib3sv = NULL;

  static void REGAL_CALL loader_glVertexAttrib3sv(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib3sv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nbv", " not available." );
  }

  PFNGLVERTEXATTRIB4NBVPROC driver_glVertexAttrib4Nbv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4Nbv(Layer *_layer, GLuint index, const GLbyte *v)
  {
    driver_glVertexAttrib4Nbv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4Niv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Niv", " not available." );
  }

  PFNGLVERTEXATTRIB4NIVPROC driver_glVertexAttrib4Niv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4Niv(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttrib4Niv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nsv", " not available." );
  }

  PFNGLVERTEXATTRIB4NSVPROC driver_glVertexAttrib4Nsv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4Nsv(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib4Nsv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4Nub", " not available." );
  }

  PFNGLVERTEXATTRIB4NUBPROC driver_glVertexAttrib4Nub = NULL;

  static void REGAL_CALL loader_glVertexAttrib4Nub(Layer *_layer, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    driver_glVertexAttrib4Nub(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nubv", " not available." );
  }

  PFNGLVERTEXATTRIB4NUBVPROC driver_glVertexAttrib4Nubv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4Nubv(Layer *_layer, GLuint index, const GLubyte *v)
  {
    driver_glVertexAttrib4Nubv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nuiv", " not available." );
  }

  PFNGLVERTEXATTRIB4NUIVPROC driver_glVertexAttrib4Nuiv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4Nuiv(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttrib4Nuiv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4Nusv", " not available." );
  }

  PFNGLVERTEXATTRIB4NUSVPROC driver_glVertexAttrib4Nusv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4Nusv(Layer *_layer, GLuint index, const GLushort *v)
  {
    driver_glVertexAttrib4Nusv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4bv(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4bv", " not available." );
  }

  PFNGLVERTEXATTRIB4BVPROC driver_glVertexAttrib4bv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4bv(Layer *_layer, GLuint index, const GLbyte *v)
  {
    driver_glVertexAttrib4bv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4d", " not available." );
  }

  PFNGLVERTEXATTRIB4DPROC driver_glVertexAttrib4d = NULL;

  static void REGAL_CALL loader_glVertexAttrib4d(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glVertexAttrib4d(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4dv", " not available." );
  }

  PFNGLVERTEXATTRIB4DVPROC driver_glVertexAttrib4dv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4dv(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib4dv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4f", " not available." );
  }

  PFNGLVERTEXATTRIB4FPROC driver_glVertexAttrib4f = NULL;

  static void REGAL_CALL loader_glVertexAttrib4f(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glVertexAttrib4f(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4fv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4fv", " not available." );
  }

  PFNGLVERTEXATTRIB4FVPROC driver_glVertexAttrib4fv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4fv(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib4fv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4iv", " not available." );
  }

  PFNGLVERTEXATTRIB4IVPROC driver_glVertexAttrib4iv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4iv(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttrib4iv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4s", " not available." );
  }

  PFNGLVERTEXATTRIB4SPROC driver_glVertexAttrib4s = NULL;

  static void REGAL_CALL loader_glVertexAttrib4s(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    driver_glVertexAttrib4s(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4sv", " not available." );
  }

  PFNGLVERTEXATTRIB4SVPROC driver_glVertexAttrib4sv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4sv(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib4sv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4ubv", " not available." );
  }

  PFNGLVERTEXATTRIB4UBVPROC driver_glVertexAttrib4ubv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4ubv(Layer *_layer, GLuint index, const GLubyte *v)
  {
    driver_glVertexAttrib4ubv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4uiv", " not available." );
  }

  PFNGLVERTEXATTRIB4UIVPROC driver_glVertexAttrib4uiv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4uiv(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttrib4uiv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4usv(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4usv", " not available." );
  }

  PFNGLVERTEXATTRIB4USVPROC driver_glVertexAttrib4usv = NULL;

  static void REGAL_CALL loader_glVertexAttrib4usv(Layer *_layer, GLuint index, const GLushort *v)
  {
    driver_glVertexAttrib4usv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribPointer", " not available." );
  }

  PFNGLVERTEXATTRIBPOINTERPROC driver_glVertexAttribPointer = NULL;

  static void REGAL_CALL loader_glVertexAttribPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  }

// GL_VERSION_2_1

  static void REGAL_CALL missing_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x3fv", " not available." );
  }

  PFNGLUNIFORMMATRIX2X3FVPROC driver_glUniformMatrix2x3fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix2x3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix2x3fv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x4fv", " not available." );
  }

  PFNGLUNIFORMMATRIX2X4FVPROC driver_glUniformMatrix2x4fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix2x4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix2x4fv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x2fv", " not available." );
  }

  PFNGLUNIFORMMATRIX3X2FVPROC driver_glUniformMatrix3x2fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix3x2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix3x2fv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x4fv", " not available." );
  }

  PFNGLUNIFORMMATRIX3X4FVPROC driver_glUniformMatrix3x4fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix3x4fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix3x4fv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x2fv", " not available." );
  }

  PFNGLUNIFORMMATRIX4X2FVPROC driver_glUniformMatrix4x2fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix4x2fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix4x2fv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x3fv", " not available." );
  }

  PFNGLUNIFORMMATRIX4X3FVPROC driver_glUniformMatrix4x3fv = NULL;

  static void REGAL_CALL loader_glUniformMatrix4x3fv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix4x3fv(location, count, transpose, value);
  }

// GL_VERSION_3_0

  static void REGAL_CALL missing_glBeginConditionalRender(GLuint id, GLenum mode)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(mode);
    Warning( "glBeginConditionalRender", " not available." );
  }

  PFNGLBEGINCONDITIONALRENDERPROC driver_glBeginConditionalRender = NULL;

  static void REGAL_CALL loader_glBeginConditionalRender(Layer *_layer, GLuint id, GLenum mode)
  {
    driver_glBeginConditionalRender(id, mode);
  }

  static void REGAL_CALL missing_glBeginTransformFeedback(GLenum primitiveMode)
  {
    UNUSED_PARAMETER(primitiveMode);
    Warning( "glBeginTransformFeedback", " not available." );
  }

  PFNGLBEGINTRANSFORMFEEDBACKPROC driver_glBeginTransformFeedback = NULL;

  static void REGAL_CALL loader_glBeginTransformFeedback(Layer *_layer, GLenum primitiveMode)
  {
    driver_glBeginTransformFeedback(primitiveMode);
  }

  static void REGAL_CALL missing_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(name);
    Warning( "glBindFragDataLocation", " not available." );
  }

  PFNGLBINDFRAGDATALOCATIONPROC driver_glBindFragDataLocation = NULL;

  static void REGAL_CALL loader_glBindFragDataLocation(Layer *_layer, GLuint program, GLuint color, const GLchar *name)
  {
    driver_glBindFragDataLocation(program, color, name);
  }

  static void REGAL_CALL missing_glClampColor(GLenum target, GLenum clamp)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(clamp);
    Warning( "glClampColor", " not available." );
  }

  PFNGLCLAMPCOLORPROC driver_glClampColor = NULL;

  static void REGAL_CALL loader_glClampColor(Layer *_layer, GLenum target, GLenum clamp)
  {
    driver_glClampColor(target, clamp);
  }

  static void REGAL_CALL missing_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(drawbuffer);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(stencil);
    Warning( "glClearBufferfi", " not available." );
  }

  PFNGLCLEARBUFFERFIPROC driver_glClearBufferfi = NULL;

  static void REGAL_CALL loader_glClearBufferfi(Layer *_layer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
  {
    driver_glClearBufferfi(buffer, drawbuffer, depth, stencil);
  }

  static void REGAL_CALL missing_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(drawbuffer);
    UNUSED_PARAMETER(value);
    Warning( "glClearBufferfv", " not available." );
  }

  PFNGLCLEARBUFFERFVPROC driver_glClearBufferfv = NULL;

  static void REGAL_CALL loader_glClearBufferfv(Layer *_layer, GLenum buffer, GLint drawbuffer, const GLfloat *value)
  {
    driver_glClearBufferfv(buffer, drawbuffer, value);
  }

  static void REGAL_CALL missing_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(drawbuffer);
    UNUSED_PARAMETER(value);
    Warning( "glClearBufferiv", " not available." );
  }

  PFNGLCLEARBUFFERIVPROC driver_glClearBufferiv = NULL;

  static void REGAL_CALL loader_glClearBufferiv(Layer *_layer, GLenum buffer, GLint drawbuffer, const GLint *value)
  {
    driver_glClearBufferiv(buffer, drawbuffer, value);
  }

  static void REGAL_CALL missing_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(drawbuffer);
    UNUSED_PARAMETER(value);
    Warning( "glClearBufferuiv", " not available." );
  }

  PFNGLCLEARBUFFERUIVPROC driver_glClearBufferuiv = NULL;

  static void REGAL_CALL loader_glClearBufferuiv(Layer *_layer, GLenum buffer, GLint drawbuffer, const GLuint *value)
  {
    driver_glClearBufferuiv(buffer, drawbuffer, value);
  }

  static void REGAL_CALL missing_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    Warning( "glColorMaski", " not available." );
  }

  PFNGLCOLORMASKIPROC driver_glColorMaski = NULL;

  static void REGAL_CALL loader_glColorMaski(Layer *_layer, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
  {
    driver_glColorMaski(index, r, g, b, a);
  }

  static void REGAL_CALL missing_glDisablei(GLenum cap, GLuint index)
  {
    UNUSED_PARAMETER(cap);
    UNUSED_PARAMETER(index);
    Warning( "glDisablei", " not available." );
  }

  PFNGLDISABLEIPROC driver_glDisablei = NULL;

  static void REGAL_CALL loader_glDisablei(Layer *_layer, GLenum cap, GLuint index)
  {
    driver_glDisablei(cap, index);
  }

  static void REGAL_CALL missing_glEnablei(GLenum cap, GLuint index)
  {
    UNUSED_PARAMETER(cap);
    UNUSED_PARAMETER(index);
    Warning( "glEnablei", " not available." );
  }

  PFNGLENABLEIPROC driver_glEnablei = NULL;

  static void REGAL_CALL loader_glEnablei(Layer *_layer, GLenum cap, GLuint index)
  {
    driver_glEnablei(cap, index);
  }

  static void REGAL_CALL missing_glEndConditionalRender(void)
  {
    Warning( "glEndConditionalRender", " not available." );
  }

  PFNGLENDCONDITIONALRENDERPROC driver_glEndConditionalRender = NULL;

  static void REGAL_CALL loader_glEndConditionalRender(Layer *_layer)
  {
    driver_glEndConditionalRender();
  }

  static void REGAL_CALL missing_glEndTransformFeedback(void)
  {
    Warning( "glEndTransformFeedback", " not available." );
  }

  PFNGLENDTRANSFORMFEEDBACKPROC driver_glEndTransformFeedback = NULL;

  static void REGAL_CALL loader_glEndTransformFeedback(Layer *_layer)
  {
    driver_glEndTransformFeedback();
  }

  static void REGAL_CALL missing_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetBooleani_v", " not available." );
  }

  PFNGLGETBOOLEANI_VPROC driver_glGetBooleani_v = NULL;

  static void REGAL_CALL loader_glGetBooleani_v(Layer *_layer, GLenum target, GLuint index, GLboolean *data)
  {
    driver_glGetBooleani_v(target, index, data);
  }

  static GLint REGAL_CALL missing_glGetFragDataLocation(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetFragDataLocation", " not available." );
    return 0;
  }

  PFNGLGETFRAGDATALOCATIONPROC driver_glGetFragDataLocation = NULL;

  static GLint REGAL_CALL loader_glGetFragDataLocation(Layer *_layer, GLuint program, const GLchar *name)
  {
    return driver_glGetFragDataLocation(program, name);
  }

  static const GLubyte *REGAL_CALL missing_glGetStringi(GLenum name, GLuint index)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(index);
    Warning( "glGetStringi", " not available." );
    return NULL;
  }

  PFNGLGETSTRINGIPROC driver_glGetStringi = NULL;

  static const GLubyte *REGAL_CALL loader_glGetStringi(Layer *_layer, GLenum name, GLuint index)
  {
    return driver_glGetStringi(name, index);
  }

  static void REGAL_CALL missing_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterIiv", " not available." );
  }

  PFNGLGETTEXPARAMETERIIVPROC driver_glGetTexParameterIiv = NULL;

  static void REGAL_CALL loader_glGetTexParameterIiv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetTexParameterIiv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterIuiv", " not available." );
  }

  PFNGLGETTEXPARAMETERIUIVPROC driver_glGetTexParameterIuiv = NULL;

  static void REGAL_CALL loader_glGetTexParameterIuiv(Layer *_layer, GLenum target, GLenum pname, GLuint *params)
  {
    driver_glGetTexParameterIuiv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetTransformFeedbackVarying", " not available." );
  }

  PFNGLGETTRANSFORMFEEDBACKVARYINGPROC driver_glGetTransformFeedbackVarying = NULL;

  static void REGAL_CALL loader_glGetTransformFeedbackVarying(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    driver_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
  }

  static void REGAL_CALL missing_glGetUniformuiv(GLuint program, GLint location, GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformuiv", " not available." );
  }

  PFNGLGETUNIFORMUIVPROC driver_glGetUniformuiv = NULL;

  static void REGAL_CALL loader_glGetUniformuiv(Layer *_layer, GLuint program, GLint location, GLuint *params)
  {
    driver_glGetUniformuiv(program, location, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribIiv", " not available." );
  }

  PFNGLGETVERTEXATTRIBIIVPROC driver_glGetVertexAttribIiv = NULL;

  static void REGAL_CALL loader_glGetVertexAttribIiv(Layer *_layer, GLuint index, GLenum pname, GLint *params)
  {
    driver_glGetVertexAttribIiv(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribIuiv", " not available." );
  }

  PFNGLGETVERTEXATTRIBIUIVPROC driver_glGetVertexAttribIuiv = NULL;

  static void REGAL_CALL loader_glGetVertexAttribIuiv(Layer *_layer, GLuint index, GLenum pname, GLuint *params)
  {
    driver_glGetVertexAttribIuiv(index, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsEnabledi(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glIsEnabledi", " not available." );
    return GL_FALSE;
  }

  PFNGLISENABLEDIPROC driver_glIsEnabledi = NULL;

  static GLboolean REGAL_CALL loader_glIsEnabledi(Layer *_layer, GLenum target, GLuint index)
  {
    return driver_glIsEnabledi(target, index);
  }

  static void REGAL_CALL missing_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterIiv", " not available." );
  }

  PFNGLTEXPARAMETERIIVPROC driver_glTexParameterIiv = NULL;

  static void REGAL_CALL loader_glTexParameterIiv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glTexParameterIiv(target, pname, params);
  }

  static void REGAL_CALL missing_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterIuiv", " not available." );
  }

  PFNGLTEXPARAMETERIUIVPROC driver_glTexParameterIuiv = NULL;

  static void REGAL_CALL loader_glTexParameterIuiv(Layer *_layer, GLenum target, GLenum pname, const GLuint *params)
  {
    driver_glTexParameterIuiv(target, pname, params);
  }

  static void REGAL_CALL missing_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(varyings);
    UNUSED_PARAMETER(bufferMode);
    Warning( "glTransformFeedbackVaryings", " not available." );
  }

  PFNGLTRANSFORMFEEDBACKVARYINGSPROC driver_glTransformFeedbackVaryings = NULL;

  static void REGAL_CALL loader_glTransformFeedbackVaryings(Layer *_layer, GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
  {
    driver_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
  }

  static void REGAL_CALL missing_glUniform1ui(GLint location, GLuint v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1ui", " not available." );
  }

  PFNGLUNIFORM1UIPROC driver_glUniform1ui = NULL;

  static void REGAL_CALL loader_glUniform1ui(Layer *_layer, GLint location, GLuint v0)
  {
    driver_glUniform1ui(location, v0);
  }

  static void REGAL_CALL missing_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1uiv", " not available." );
  }

  PFNGLUNIFORM1UIVPROC driver_glUniform1uiv = NULL;

  static void REGAL_CALL loader_glUniform1uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glUniform1uiv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2ui(GLint location, GLuint v0, GLuint v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2ui", " not available." );
  }

  PFNGLUNIFORM2UIPROC driver_glUniform2ui = NULL;

  static void REGAL_CALL loader_glUniform2ui(Layer *_layer, GLint location, GLuint v0, GLuint v1)
  {
    driver_glUniform2ui(location, v0, v1);
  }

  static void REGAL_CALL missing_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2uiv", " not available." );
  }

  PFNGLUNIFORM2UIVPROC driver_glUniform2uiv = NULL;

  static void REGAL_CALL loader_glUniform2uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glUniform2uiv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3ui", " not available." );
  }

  PFNGLUNIFORM3UIPROC driver_glUniform3ui = NULL;

  static void REGAL_CALL loader_glUniform3ui(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    driver_glUniform3ui(location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3uiv", " not available." );
  }

  PFNGLUNIFORM3UIVPROC driver_glUniform3uiv = NULL;

  static void REGAL_CALL loader_glUniform3uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glUniform3uiv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4ui", " not available." );
  }

  PFNGLUNIFORM4UIPROC driver_glUniform4ui = NULL;

  static void REGAL_CALL loader_glUniform4ui(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    driver_glUniform4ui(location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4uiv", " not available." );
  }

  PFNGLUNIFORM4UIVPROC driver_glUniform4uiv = NULL;

  static void REGAL_CALL loader_glUniform4uiv(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glUniform4uiv(location, count, value);
  }

  static void REGAL_CALL missing_glVertexAttribI1i(GLuint index, GLint x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribI1i", " not available." );
  }

  PFNGLVERTEXATTRIBI1IPROC driver_glVertexAttribI1i = NULL;

  static void REGAL_CALL loader_glVertexAttribI1i(Layer *_layer, GLuint index, GLint x)
  {
    driver_glVertexAttribI1i(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribI1iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI1iv", " not available." );
  }

  PFNGLVERTEXATTRIBI1IVPROC driver_glVertexAttribI1iv = NULL;

  static void REGAL_CALL loader_glVertexAttribI1iv(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttribI1iv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI1ui(GLuint index, GLuint x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribI1ui", " not available." );
  }

  PFNGLVERTEXATTRIBI1UIPROC driver_glVertexAttribI1ui = NULL;

  static void REGAL_CALL loader_glVertexAttribI1ui(Layer *_layer, GLuint index, GLuint x)
  {
    driver_glVertexAttribI1ui(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribI1uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI1uiv", " not available." );
  }

  PFNGLVERTEXATTRIBI1UIVPROC driver_glVertexAttribI1uiv = NULL;

  static void REGAL_CALL loader_glVertexAttribI1uiv(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttribI1uiv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI2i(GLuint index, GLint x, GLint y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribI2i", " not available." );
  }

  PFNGLVERTEXATTRIBI2IPROC driver_glVertexAttribI2i = NULL;

  static void REGAL_CALL loader_glVertexAttribI2i(Layer *_layer, GLuint index, GLint x, GLint y)
  {
    driver_glVertexAttribI2i(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttribI2iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI2iv", " not available." );
  }

  PFNGLVERTEXATTRIBI2IVPROC driver_glVertexAttribI2iv = NULL;

  static void REGAL_CALL loader_glVertexAttribI2iv(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttribI2iv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribI2ui", " not available." );
  }

  PFNGLVERTEXATTRIBI2UIPROC driver_glVertexAttribI2ui = NULL;

  static void REGAL_CALL loader_glVertexAttribI2ui(Layer *_layer, GLuint index, GLuint x, GLuint y)
  {
    driver_glVertexAttribI2ui(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttribI2uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI2uiv", " not available." );
  }

  PFNGLVERTEXATTRIBI2UIVPROC driver_glVertexAttribI2uiv = NULL;

  static void REGAL_CALL loader_glVertexAttribI2uiv(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttribI2uiv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribI3i", " not available." );
  }

  PFNGLVERTEXATTRIBI3IPROC driver_glVertexAttribI3i = NULL;

  static void REGAL_CALL loader_glVertexAttribI3i(Layer *_layer, GLuint index, GLint x, GLint y, GLint z)
  {
    driver_glVertexAttribI3i(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttribI3iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI3iv", " not available." );
  }

  PFNGLVERTEXATTRIBI3IVPROC driver_glVertexAttribI3iv = NULL;

  static void REGAL_CALL loader_glVertexAttribI3iv(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttribI3iv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribI3ui", " not available." );
  }

  PFNGLVERTEXATTRIBI3UIPROC driver_glVertexAttribI3ui = NULL;

  static void REGAL_CALL loader_glVertexAttribI3ui(Layer *_layer, GLuint index, GLuint x, GLuint y, GLuint z)
  {
    driver_glVertexAttribI3ui(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttribI3uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI3uiv", " not available." );
  }

  PFNGLVERTEXATTRIBI3UIVPROC driver_glVertexAttribI3uiv = NULL;

  static void REGAL_CALL loader_glVertexAttribI3uiv(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttribI3uiv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4bv(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4bv", " not available." );
  }

  PFNGLVERTEXATTRIBI4BVPROC driver_glVertexAttribI4bv = NULL;

  static void REGAL_CALL loader_glVertexAttribI4bv(Layer *_layer, GLuint index, const GLbyte *v)
  {
    driver_glVertexAttribI4bv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribI4i", " not available." );
  }

  PFNGLVERTEXATTRIBI4IPROC driver_glVertexAttribI4i = NULL;

  static void REGAL_CALL loader_glVertexAttribI4i(Layer *_layer, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glVertexAttribI4i(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttribI4iv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4iv", " not available." );
  }

  PFNGLVERTEXATTRIBI4IVPROC driver_glVertexAttribI4iv = NULL;

  static void REGAL_CALL loader_glVertexAttribI4iv(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttribI4iv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4sv(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4sv", " not available." );
  }

  PFNGLVERTEXATTRIBI4SVPROC driver_glVertexAttribI4sv = NULL;

  static void REGAL_CALL loader_glVertexAttribI4sv(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttribI4sv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4ubv(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4ubv", " not available." );
  }

  PFNGLVERTEXATTRIBI4UBVPROC driver_glVertexAttribI4ubv = NULL;

  static void REGAL_CALL loader_glVertexAttribI4ubv(Layer *_layer, GLuint index, const GLubyte *v)
  {
    driver_glVertexAttribI4ubv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribI4ui", " not available." );
  }

  PFNGLVERTEXATTRIBI4UIPROC driver_glVertexAttribI4ui = NULL;

  static void REGAL_CALL loader_glVertexAttribI4ui(Layer *_layer, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    driver_glVertexAttribI4ui(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttribI4uiv(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4uiv", " not available." );
  }

  PFNGLVERTEXATTRIBI4UIVPROC driver_glVertexAttribI4uiv = NULL;

  static void REGAL_CALL loader_glVertexAttribI4uiv(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttribI4uiv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4usv(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4usv", " not available." );
  }

  PFNGLVERTEXATTRIBI4USVPROC driver_glVertexAttribI4usv = NULL;

  static void REGAL_CALL loader_glVertexAttribI4usv(Layer *_layer, GLuint index, const GLushort *v)
  {
    driver_glVertexAttribI4usv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribIPointer", " not available." );
  }

  PFNGLVERTEXATTRIBIPOINTERPROC driver_glVertexAttribIPointer = NULL;

  static void REGAL_CALL loader_glVertexAttribIPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexAttribIPointer(index, size, type, stride, pointer);
  }

// GL_VERSION_3_1

  static void REGAL_CALL missing_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawArraysInstanced", " not available." );
  }

  PFNGLDRAWARRAYSINSTANCEDPROC driver_glDrawArraysInstanced = NULL;

  static void REGAL_CALL loader_glDrawArraysInstanced(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    driver_glDrawArraysInstanced(mode, start, count, primcount);
  }

  static void REGAL_CALL missing_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawElementsInstanced", " not available." );
  }

  PFNGLDRAWELEMENTSINSTANCEDPROC driver_glDrawElementsInstanced = NULL;

  static void REGAL_CALL loader_glDrawElementsInstanced(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    driver_glDrawElementsInstanced(mode, count, type, indices, primcount);
  }

  static void REGAL_CALL missing_glPrimitiveRestartIndex(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glPrimitiveRestartIndex", " not available." );
  }

  PFNGLPRIMITIVERESTARTINDEXPROC driver_glPrimitiveRestartIndex = NULL;

  static void REGAL_CALL loader_glPrimitiveRestartIndex(Layer *_layer, GLuint index)
  {
    driver_glPrimitiveRestartIndex(index);
  }

  static void REGAL_CALL missing_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glTexBuffer", " not available." );
  }

  PFNGLTEXBUFFERPROC driver_glTexBuffer = NULL;

  static void REGAL_CALL loader_glTexBuffer(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer)
  {
    driver_glTexBuffer(target, internalformat, buffer);
  }

// GL_VERSION_3_2

  static void REGAL_CALL missing_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTUREPROC driver_glFramebufferTexture = NULL;

  static void REGAL_CALL loader_glFramebufferTexture(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    driver_glFramebufferTexture(target, attachment, texture, level);
  }

  static void REGAL_CALL missing_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(face);
    Warning( "glFramebufferTextureFace", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTUREFACEPROC driver_glFramebufferTextureFace = NULL;

  static void REGAL_CALL loader_glFramebufferTextureFace(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    driver_glFramebufferTextureFace(target, attachment, texture, level, face);
  }

  static void REGAL_CALL missing_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferParameteri64v", " not available." );
  }

  PFNGLGETBUFFERPARAMETERI64VPROC driver_glGetBufferParameteri64v = NULL;

  static void REGAL_CALL loader_glGetBufferParameteri64v(Layer *_layer, GLenum target, GLenum pname, GLint64 *params)
  {
    driver_glGetBufferParameteri64v(target, pname, params);
  }

  static void REGAL_CALL missing_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetInteger64i_v", " not available." );
  }

  PFNGLGETINTEGER64I_VPROC driver_glGetInteger64i_v = NULL;

  static void REGAL_CALL loader_glGetInteger64i_v(Layer *_layer, GLenum target, GLuint index, GLint64 *data)
  {
    driver_glGetInteger64i_v(target, index, data);
  }

// GL_VERSION_3_3

  static void REGAL_CALL missing_glVertexAttribDivisor(GLuint index, GLuint divisor)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexAttribDivisor", " not available." );
  }

  PFNGLVERTEXATTRIBDIVISORPROC driver_glVertexAttribDivisor = NULL;

  static void REGAL_CALL loader_glVertexAttribDivisor(Layer *_layer, GLuint index, GLuint divisor)
  {
    driver_glVertexAttribDivisor(index, divisor);
  }

// GL_VERSION_4_0

  static void REGAL_CALL missing_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparatei", " not available." );
  }

  PFNGLBLENDEQUATIONSEPARATEIPROC driver_glBlendEquationSeparatei = NULL;

  static void REGAL_CALL loader_glBlendEquationSeparatei(Layer *_layer, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    driver_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
  }

  static void REGAL_CALL missing_glBlendEquationi(GLuint buf, GLenum mode)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationi", " not available." );
  }

  PFNGLBLENDEQUATIONIPROC driver_glBlendEquationi = NULL;

  static void REGAL_CALL loader_glBlendEquationi(Layer *_layer, GLuint buf, GLenum mode)
  {
    driver_glBlendEquationi(buf, mode);
  }

  static void REGAL_CALL missing_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(srcRGB);
    UNUSED_PARAMETER(dstRGB);
    UNUSED_PARAMETER(srcAlpha);
    UNUSED_PARAMETER(dstAlpha);
    Warning( "glBlendFuncSeparatei", " not available." );
  }

  PFNGLBLENDFUNCSEPARATEIPROC driver_glBlendFuncSeparatei = NULL;

  static void REGAL_CALL loader_glBlendFuncSeparatei(Layer *_layer, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    driver_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }

  static void REGAL_CALL missing_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    Warning( "glBlendFunci", " not available." );
  }

  PFNGLBLENDFUNCIPROC driver_glBlendFunci = NULL;

  static void REGAL_CALL loader_glBlendFunci(Layer *_layer, GLuint buf, GLenum src, GLenum dst)
  {
    driver_glBlendFunci(buf, src, dst);
  }

// GL_3DFX_tbuffer

  static void REGAL_CALL missing_glTbufferMask3DFX(GLuint mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glTbufferMask3DFX", " not available." );
  }

  PFNGLTBUFFERMASK3DFXPROC driver_glTbufferMask3DFX = NULL;

  static void REGAL_CALL loader_glTbufferMask3DFX(Layer *_layer, GLuint mask)
  {
    driver_glTbufferMask3DFX(mask);
  }

// GL_AMD_debug_output

  static void REGAL_CALL missing_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam)
  {
    UNUSED_PARAMETER(callback);
    UNUSED_PARAMETER(userParam);
    Warning( "glDebugMessageCallbackAMD", " not available." );
  }

  PFNGLDEBUGMESSAGECALLBACKAMDPROC driver_glDebugMessageCallbackAMD = NULL;

  static void REGAL_CALL loader_glDebugMessageCallbackAMD(Layer *_layer, GLDEBUGPROCAMD callback, GLvoid *userParam)
  {
    driver_glDebugMessageCallbackAMD(callback, userParam);
  }

  static void REGAL_CALL missing_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    UNUSED_PARAMETER(category);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(enabled);
    Warning( "glDebugMessageEnableAMD", " not available." );
  }

  PFNGLDEBUGMESSAGEENABLEAMDPROC driver_glDebugMessageEnableAMD = NULL;

  static void REGAL_CALL loader_glDebugMessageEnableAMD(Layer *_layer, GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    driver_glDebugMessageEnableAMD(category, severity, count, ids, enabled);
  }

  static void REGAL_CALL missing_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
  {
    UNUSED_PARAMETER(category);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(buf);
    Warning( "glDebugMessageInsertAMD", " not available." );
  }

  PFNGLDEBUGMESSAGEINSERTAMDPROC driver_glDebugMessageInsertAMD = NULL;

  static void REGAL_CALL loader_glDebugMessageInsertAMD(Layer *_layer, GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
  {
    driver_glDebugMessageInsertAMD(category, severity, id, length, buf);
  }

  static GLuint REGAL_CALL missing_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(bufsize);
    UNUSED_PARAMETER(categories);
    UNUSED_PARAMETER(severities);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(lengths);
    UNUSED_PARAMETER(message);
    Warning( "glGetDebugMessageLogAMD", " not available." );
    return 0;
  }

  PFNGLGETDEBUGMESSAGELOGAMDPROC driver_glGetDebugMessageLogAMD = NULL;

  static GLuint REGAL_CALL loader_glGetDebugMessageLogAMD(Layer *_layer, GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
  {
    return driver_glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
  }

// GL_AMD_draw_buffers_blend

  static void REGAL_CALL missing_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationIndexedAMD", " not available." );
  }

  PFNGLBLENDEQUATIONINDEXEDAMDPROC driver_glBlendEquationIndexedAMD = NULL;

  static void REGAL_CALL loader_glBlendEquationIndexedAMD(Layer *_layer, GLuint buf, GLenum mode)
  {
    driver_glBlendEquationIndexedAMD(buf, mode);
  }

  static void REGAL_CALL missing_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparateIndexedAMD", " not available." );
  }

  PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC driver_glBlendEquationSeparateIndexedAMD = NULL;

  static void REGAL_CALL loader_glBlendEquationSeparateIndexedAMD(Layer *_layer, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    driver_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
  }

  static void REGAL_CALL missing_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    Warning( "glBlendFuncIndexedAMD", " not available." );
  }

  PFNGLBLENDFUNCINDEXEDAMDPROC driver_glBlendFuncIndexedAMD = NULL;

  static void REGAL_CALL loader_glBlendFuncIndexedAMD(Layer *_layer, GLuint buf, GLenum src, GLenum dst)
  {
    driver_glBlendFuncIndexedAMD(buf, src, dst);
  }

  static void REGAL_CALL missing_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(srcRGB);
    UNUSED_PARAMETER(dstRGB);
    UNUSED_PARAMETER(srcAlpha);
    UNUSED_PARAMETER(dstAlpha);
    Warning( "glBlendFuncSeparateIndexedAMD", " not available." );
  }

  PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC driver_glBlendFuncSeparateIndexedAMD = NULL;

  static void REGAL_CALL loader_glBlendFuncSeparateIndexedAMD(Layer *_layer, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    driver_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }

// GL_AMD_interleaved_elements

  static void REGAL_CALL missing_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glVertexAttribParameteriAMD", " not available." );
  }

  PFNGLVERTEXATTRIBPARAMETERIAMDPROC driver_glVertexAttribParameteriAMD = NULL;

  static void REGAL_CALL loader_glVertexAttribParameteriAMD(Layer *_layer, GLuint index, GLenum pname, GLint param)
  {
    driver_glVertexAttribParameteriAMD(index, pname, param);
  }

// GL_AMD_multi_draw_indirect

  static void REGAL_CALL missing_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawArraysIndirectAMD", " not available." );
  }

  PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC driver_glMultiDrawArraysIndirectAMD = NULL;

  static void REGAL_CALL loader_glMultiDrawArraysIndirectAMD(Layer *_layer, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    driver_glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
  }

  static void REGAL_CALL missing_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawElementsIndirectAMD", " not available." );
  }

  PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC driver_glMultiDrawElementsIndirectAMD = NULL;

  static void REGAL_CALL loader_glMultiDrawElementsIndirectAMD(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    driver_glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
  }

// GL_AMD_name_gen_delete

  static void REGAL_CALL missing_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(num);
    UNUSED_PARAMETER(names);
    Warning( "glDeleteNamesAMD", " not available." );
  }

  PFNGLDELETENAMESAMDPROC driver_glDeleteNamesAMD = NULL;

  static void REGAL_CALL loader_glDeleteNamesAMD(Layer *_layer, GLenum identifier, GLuint num, const GLuint *names)
  {
    driver_glDeleteNamesAMD(identifier, num, names);
  }

  static void REGAL_CALL missing_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(num);
    UNUSED_PARAMETER(names);
    Warning( "glGenNamesAMD", " not available." );
  }

  PFNGLGENNAMESAMDPROC driver_glGenNamesAMD = NULL;

  static void REGAL_CALL loader_glGenNamesAMD(Layer *_layer, GLenum identifier, GLuint num, GLuint *names)
  {
    driver_glGenNamesAMD(identifier, num, names);
  }

  static GLboolean REGAL_CALL missing_glIsNameAMD(GLenum identifier, GLuint name)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(name);
    Warning( "glIsNameAMD", " not available." );
    return GL_FALSE;
  }

  PFNGLISNAMEAMDPROC driver_glIsNameAMD = NULL;

  static GLboolean REGAL_CALL loader_glIsNameAMD(Layer *_layer, GLenum identifier, GLuint name)
  {
    return driver_glIsNameAMD(identifier, name);
  }

// GL_AMD_performance_monitor

  static void REGAL_CALL missing_glBeginPerfMonitorAMD(GLuint monitor)
  {
    UNUSED_PARAMETER(monitor);
    Warning( "glBeginPerfMonitorAMD", " not available." );
  }

  PFNGLBEGINPERFMONITORAMDPROC driver_glBeginPerfMonitorAMD = NULL;

  static void REGAL_CALL loader_glBeginPerfMonitorAMD(Layer *_layer, GLuint monitor)
  {
    driver_glBeginPerfMonitorAMD(monitor);
  }

  static void REGAL_CALL missing_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(monitors);
    Warning( "glDeletePerfMonitorsAMD", " not available." );
  }

  PFNGLDELETEPERFMONITORSAMDPROC driver_glDeletePerfMonitorsAMD = NULL;

  static void REGAL_CALL loader_glDeletePerfMonitorsAMD(Layer *_layer, GLsizei n, GLuint *monitors)
  {
    driver_glDeletePerfMonitorsAMD(n, monitors);
  }

  static void REGAL_CALL missing_glEndPerfMonitorAMD(GLuint monitor)
  {
    UNUSED_PARAMETER(monitor);
    Warning( "glEndPerfMonitorAMD", " not available." );
  }

  PFNGLENDPERFMONITORAMDPROC driver_glEndPerfMonitorAMD = NULL;

  static void REGAL_CALL loader_glEndPerfMonitorAMD(Layer *_layer, GLuint monitor)
  {
    driver_glEndPerfMonitorAMD(monitor);
  }

  static void REGAL_CALL missing_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(monitors);
    Warning( "glGenPerfMonitorsAMD", " not available." );
  }

  PFNGLGENPERFMONITORSAMDPROC driver_glGenPerfMonitorsAMD = NULL;

  static void REGAL_CALL loader_glGenPerfMonitorsAMD(Layer *_layer, GLsizei n, GLuint *monitors)
  {
    driver_glGenPerfMonitorsAMD(n, monitors);
  }

  static void REGAL_CALL missing_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
  {
    UNUSED_PARAMETER(monitor);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(dataSize);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(bytesWritten);
    Warning( "glGetPerfMonitorCounterDataAMD", " not available." );
  }

  PFNGLGETPERFMONITORCOUNTERDATAAMDPROC driver_glGetPerfMonitorCounterDataAMD = NULL;

  static void REGAL_CALL loader_glGetPerfMonitorCounterDataAMD(Layer *_layer, GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
  {
    driver_glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
  }

  static void REGAL_CALL missing_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(counter);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(data);
    Warning( "glGetPerfMonitorCounterInfoAMD", " not available." );
  }

  PFNGLGETPERFMONITORCOUNTERINFOAMDPROC driver_glGetPerfMonitorCounterInfoAMD = NULL;

  static void REGAL_CALL loader_glGetPerfMonitorCounterInfoAMD(Layer *_layer, GLuint group, GLuint counter, GLenum pname, GLvoid *data)
  {
    driver_glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
  }

  static void REGAL_CALL missing_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(counter);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(counterString);
    Warning( "glGetPerfMonitorCounterStringAMD", " not available." );
  }

  PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC driver_glGetPerfMonitorCounterStringAMD = NULL;

  static void REGAL_CALL loader_glGetPerfMonitorCounterStringAMD(Layer *_layer, GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
  {
    driver_glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
  }

  static void REGAL_CALL missing_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(numCounters);
    UNUSED_PARAMETER(maxActiveCounters);
    UNUSED_PARAMETER(countersSize);
    UNUSED_PARAMETER(counters);
    Warning( "glGetPerfMonitorCountersAMD", " not available." );
  }

  PFNGLGETPERFMONITORCOUNTERSAMDPROC driver_glGetPerfMonitorCountersAMD = NULL;

  static void REGAL_CALL loader_glGetPerfMonitorCountersAMD(Layer *_layer, GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
  {
    driver_glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, countersSize, counters);
  }

  static void REGAL_CALL missing_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(groupString);
    Warning( "glGetPerfMonitorGroupStringAMD", " not available." );
  }

  PFNGLGETPERFMONITORGROUPSTRINGAMDPROC driver_glGetPerfMonitorGroupStringAMD = NULL;

  static void REGAL_CALL loader_glGetPerfMonitorGroupStringAMD(Layer *_layer, GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
  {
    driver_glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
  }

  static void REGAL_CALL missing_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
  {
    UNUSED_PARAMETER(numGroups);
    UNUSED_PARAMETER(groupsSize);
    UNUSED_PARAMETER(groups);
    Warning( "glGetPerfMonitorGroupsAMD", " not available." );
  }

  PFNGLGETPERFMONITORGROUPSAMDPROC driver_glGetPerfMonitorGroupsAMD = NULL;

  static void REGAL_CALL loader_glGetPerfMonitorGroupsAMD(Layer *_layer, GLint *numGroups, GLsizei groupsSize, GLuint *groups)
  {
    driver_glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
  }

  static void REGAL_CALL missing_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
  {
    UNUSED_PARAMETER(monitor);
    UNUSED_PARAMETER(enable);
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(numCounters);
    UNUSED_PARAMETER(counterList);
    Warning( "glSelectPerfMonitorCountersAMD", " not available." );
  }

  PFNGLSELECTPERFMONITORCOUNTERSAMDPROC driver_glSelectPerfMonitorCountersAMD = NULL;

  static void REGAL_CALL loader_glSelectPerfMonitorCountersAMD(Layer *_layer, GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
  {
    driver_glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
  }

// GL_AMD_sample_positions

  static void REGAL_CALL missing_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(val);
    Warning( "glSetMultisamplefvAMD", " not available." );
  }

  PFNGLSETMULTISAMPLEFVAMDPROC driver_glSetMultisamplefvAMD = NULL;

  static void REGAL_CALL loader_glSetMultisamplefvAMD(Layer *_layer, GLenum pname, GLuint index, const GLfloat *val)
  {
    driver_glSetMultisamplefvAMD(pname, index, val);
  }

// GL_AMD_sparse_texture

  static void REGAL_CALL missing_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(layers);
    UNUSED_PARAMETER(flags);
    Warning( "glTexStorageSparseAMD", " not available." );
  }

  PFNGLTEXSTORAGESPARSEAMDPROC driver_glTexStorageSparseAMD = NULL;

  static void REGAL_CALL loader_glTexStorageSparseAMD(Layer *_layer, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
  {
    driver_glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
  }

  static void REGAL_CALL missing_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(layers);
    UNUSED_PARAMETER(flags);
    Warning( "glTextureStorageSparseAMD", " not available." );
  }

  PFNGLTEXTURESTORAGESPARSEAMDPROC driver_glTextureStorageSparseAMD = NULL;

  static void REGAL_CALL loader_glTextureStorageSparseAMD(Layer *_layer, GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
  {
    driver_glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
  }

// GL_AMD_stencil_operation_extended

  static void REGAL_CALL missing_glStencilOpValueAMD(GLenum face, GLuint value)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(value);
    Warning( "glStencilOpValueAMD", " not available." );
  }

  PFNGLSTENCILOPVALUEAMDPROC driver_glStencilOpValueAMD = NULL;

  static void REGAL_CALL loader_glStencilOpValueAMD(Layer *_layer, GLenum face, GLuint value)
  {
    driver_glStencilOpValueAMD(face, value);
  }

// GL_AMD_vertex_shader_tessellator

  static void REGAL_CALL missing_glTessellationFactorAMD(GLfloat factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glTessellationFactorAMD", " not available." );
  }

  PFNGLTESSELLATIONFACTORAMDPROC driver_glTessellationFactorAMD = NULL;

  static void REGAL_CALL loader_glTessellationFactorAMD(Layer *_layer, GLfloat factor)
  {
    driver_glTessellationFactorAMD(factor);
  }

  static void REGAL_CALL missing_glTessellationModeAMD(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glTessellationModeAMD", " not available." );
  }

  PFNGLTESSELLATIONMODEAMDPROC driver_glTessellationModeAMD = NULL;

  static void REGAL_CALL loader_glTessellationModeAMD(Layer *_layer, GLenum mode)
  {
    driver_glTessellationModeAMD(mode);
  }

// GL_ANGLE_framebuffer_blit

  static void REGAL_CALL missing_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glBlitFramebufferANGLE", " not available." );
  }

  PFNGLBLITFRAMEBUFFERANGLEPROC driver_glBlitFramebufferANGLE = NULL;

  static void REGAL_CALL loader_glBlitFramebufferANGLE(Layer *_layer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    driver_glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

// GL_ANGLE_framebuffer_multisample

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleANGLE", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC driver_glRenderbufferStorageMultisampleANGLE = NULL;

  static void REGAL_CALL loader_glRenderbufferStorageMultisampleANGLE(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
  }

// GL_ANGLE_instanced_arrays

  static void REGAL_CALL missing_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawArraysInstancedANGLE", " not available." );
  }

  PFNGLDRAWARRAYSINSTANCEDANGLEPROC driver_glDrawArraysInstancedANGLE = NULL;

  static void REGAL_CALL loader_glDrawArraysInstancedANGLE(Layer *_layer, GLenum mode, GLint first, GLsizei count, GLsizei primcount)
  {
    driver_glDrawArraysInstancedANGLE(mode, first, count, primcount);
  }

  static void REGAL_CALL missing_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawElementsInstancedANGLE", " not available." );
  }

  PFNGLDRAWELEMENTSINSTANCEDANGLEPROC driver_glDrawElementsInstancedANGLE = NULL;

  static void REGAL_CALL loader_glDrawElementsInstancedANGLE(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    driver_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount);
  }

  static void REGAL_CALL missing_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexAttribDivisorANGLE", " not available." );
  }

  PFNGLVERTEXATTRIBDIVISORANGLEPROC driver_glVertexAttribDivisorANGLE = NULL;

  static void REGAL_CALL loader_glVertexAttribDivisorANGLE(Layer *_layer, GLuint index, GLuint divisor)
  {
    driver_glVertexAttribDivisorANGLE(index, divisor);
  }

// GL_ANGLE_timer_query

  static void REGAL_CALL missing_glBeginQueryANGLE(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQueryANGLE", " not available." );
  }

  PFNGLBEGINQUERYANGLEPROC driver_glBeginQueryANGLE = NULL;

  static void REGAL_CALL loader_glBeginQueryANGLE(Layer *_layer, GLenum target, GLuint id)
  {
    driver_glBeginQueryANGLE(target, id);
  }

  static void REGAL_CALL missing_glDeleteQueriesANGLE(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteQueriesANGLE", " not available." );
  }

  PFNGLDELETEQUERIESANGLEPROC driver_glDeleteQueriesANGLE = NULL;

  static void REGAL_CALL loader_glDeleteQueriesANGLE(Layer *_layer, GLsizei n, const GLuint *ids)
  {
    driver_glDeleteQueriesANGLE(n, ids);
  }

  static void REGAL_CALL missing_glEndQueryANGLE(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glEndQueryANGLE", " not available." );
  }

  PFNGLENDQUERYANGLEPROC driver_glEndQueryANGLE = NULL;

  static void REGAL_CALL loader_glEndQueryANGLE(Layer *_layer, GLenum target)
  {
    driver_glEndQueryANGLE(target);
  }

  static void REGAL_CALL missing_glGenQueriesANGLE(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenQueriesANGLE", " not available." );
  }

  PFNGLGENQUERIESANGLEPROC driver_glGenQueriesANGLE = NULL;

  static void REGAL_CALL loader_glGenQueriesANGLE(Layer *_layer, GLsizei n, GLuint *ids)
  {
    driver_glGenQueriesANGLE(n, ids);
  }

  static void REGAL_CALL missing_glGetQueryObjecti64vANGLE(GLuint id, GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjecti64vANGLE", " not available." );
  }

  PFNGLGETQUERYOBJECTI64VANGLEPROC driver_glGetQueryObjecti64vANGLE = NULL;

  static void REGAL_CALL loader_glGetQueryObjecti64vANGLE(Layer *_layer, GLuint id, GLenum pname, GLint64 *params)
  {
    driver_glGetQueryObjecti64vANGLE(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryObjectivANGLE(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectivANGLE", " not available." );
  }

  PFNGLGETQUERYOBJECTIVANGLEPROC driver_glGetQueryObjectivANGLE = NULL;

  static void REGAL_CALL loader_glGetQueryObjectivANGLE(Layer *_layer, GLuint id, GLenum pname, GLint *params)
  {
    driver_glGetQueryObjectivANGLE(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryObjectui64vANGLE(GLuint id, GLenum pname, GLuint64 *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectui64vANGLE", " not available." );
  }

  PFNGLGETQUERYOBJECTUI64VANGLEPROC driver_glGetQueryObjectui64vANGLE = NULL;

  static void REGAL_CALL loader_glGetQueryObjectui64vANGLE(Layer *_layer, GLuint id, GLenum pname, GLuint64 *params)
  {
    driver_glGetQueryObjectui64vANGLE(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryObjectuivANGLE(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectuivANGLE", " not available." );
  }

  PFNGLGETQUERYOBJECTUIVANGLEPROC driver_glGetQueryObjectuivANGLE = NULL;

  static void REGAL_CALL loader_glGetQueryObjectuivANGLE(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
  {
    driver_glGetQueryObjectuivANGLE(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryivANGLE(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryivANGLE", " not available." );
  }

  PFNGLGETQUERYIVANGLEPROC driver_glGetQueryivANGLE = NULL;

  static void REGAL_CALL loader_glGetQueryivANGLE(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetQueryivANGLE(target, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsQueryANGLE(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsQueryANGLE", " not available." );
    return GL_FALSE;
  }

  PFNGLISQUERYANGLEPROC driver_glIsQueryANGLE = NULL;

  static GLboolean REGAL_CALL loader_glIsQueryANGLE(Layer *_layer, GLuint id)
  {
    return driver_glIsQueryANGLE(id);
  }

  static void REGAL_CALL missing_glQueryCounterANGLE(GLuint id, GLenum target)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(target);
    Warning( "glQueryCounterANGLE", " not available." );
  }

  PFNGLQUERYCOUNTERANGLEPROC driver_glQueryCounterANGLE = NULL;

  static void REGAL_CALL loader_glQueryCounterANGLE(Layer *_layer, GLuint id, GLenum target)
  {
    driver_glQueryCounterANGLE(id, target);
  }

// GL_ANGLE_translated_shader_source

  static void REGAL_CALL missing_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(bufsize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(source);
    Warning( "glGetTranslatedShaderSourceANGLE", " not available." );
  }

  PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC driver_glGetTranslatedShaderSourceANGLE = NULL;

  static void REGAL_CALL loader_glGetTranslatedShaderSourceANGLE(Layer *_layer, GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
  {
    driver_glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source);
  }

// GL_APPLE_copy_texture_levels

  static void REGAL_CALL missing_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
  {
    UNUSED_PARAMETER(destinationTexture);
    UNUSED_PARAMETER(sourceTexture);
    UNUSED_PARAMETER(sourceBaseLevel);
    UNUSED_PARAMETER(sourceLevelCount);
    Warning( "glCopyTextureLevelsAPPLE", " not available." );
  }

  PFNGLCOPYTEXTURELEVELSAPPLEPROC driver_glCopyTextureLevelsAPPLE = NULL;

  static void REGAL_CALL loader_glCopyTextureLevelsAPPLE(Layer *_layer, GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
  {
    driver_glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
  }

// GL_APPLE_element_array

  static void REGAL_CALL missing_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glDrawElementArrayAPPLE", " not available." );
  }

  PFNGLDRAWELEMENTARRAYAPPLEPROC driver_glDrawElementArrayAPPLE = NULL;

  static void REGAL_CALL loader_glDrawElementArrayAPPLE(Layer *_layer, GLenum mode, GLint first, GLsizei count)
  {
    driver_glDrawElementArrayAPPLE(mode, first, count);
  }

  static void REGAL_CALL missing_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glDrawRangeElementArrayAPPLE", " not available." );
  }

  PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC driver_glDrawRangeElementArrayAPPLE = NULL;

  static void REGAL_CALL loader_glDrawRangeElementArrayAPPLE(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
  {
    driver_glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
  }

  static void REGAL_CALL missing_glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glElementPointerAPPLE", " not available." );
  }

  PFNGLELEMENTPOINTERAPPLEPROC driver_glElementPointerAPPLE = NULL;

  static void REGAL_CALL loader_glElementPointerAPPLE(Layer *_layer, GLenum type, const GLvoid *pointer)
  {
    driver_glElementPointerAPPLE(type, pointer);
  }

  static void REGAL_CALL missing_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawElementArrayAPPLE", " not available." );
  }

  PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC driver_glMultiDrawElementArrayAPPLE = NULL;

  static void REGAL_CALL loader_glMultiDrawElementArrayAPPLE(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    driver_glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
  }

  static void REGAL_CALL missing_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawRangeElementArrayAPPLE", " not available." );
  }

  PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC driver_glMultiDrawRangeElementArrayAPPLE = NULL;

  static void REGAL_CALL loader_glMultiDrawRangeElementArrayAPPLE(Layer *_layer, GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    driver_glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
  }

// GL_APPLE_fence

  static void REGAL_CALL missing_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(fences);
    Warning( "glDeleteFencesAPPLE", " not available." );
  }

  PFNGLDELETEFENCESAPPLEPROC driver_glDeleteFencesAPPLE = NULL;

  static void REGAL_CALL loader_glDeleteFencesAPPLE(Layer *_layer, GLsizei n, const GLuint *fences)
  {
    driver_glDeleteFencesAPPLE(n, fences);
  }

  static void REGAL_CALL missing_glFinishFenceAPPLE(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glFinishFenceAPPLE", " not available." );
  }

  PFNGLFINISHFENCEAPPLEPROC driver_glFinishFenceAPPLE = NULL;

  static void REGAL_CALL loader_glFinishFenceAPPLE(Layer *_layer, GLuint fence)
  {
    driver_glFinishFenceAPPLE(fence);
  }

  static void REGAL_CALL missing_glFinishObjectAPPLE(GLenum object, GLint name)
  {
    UNUSED_PARAMETER(object);
    UNUSED_PARAMETER(name);
    Warning( "glFinishObjectAPPLE", " not available." );
  }

  PFNGLFINISHOBJECTAPPLEPROC driver_glFinishObjectAPPLE = NULL;

  static void REGAL_CALL loader_glFinishObjectAPPLE(Layer *_layer, GLenum object, GLint name)
  {
    driver_glFinishObjectAPPLE(object, name);
  }

  static void REGAL_CALL missing_glGenFencesAPPLE(GLsizei n, GLuint *fences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(fences);
    Warning( "glGenFencesAPPLE", " not available." );
  }

  PFNGLGENFENCESAPPLEPROC driver_glGenFencesAPPLE = NULL;

  static void REGAL_CALL loader_glGenFencesAPPLE(Layer *_layer, GLsizei n, GLuint *fences)
  {
    driver_glGenFencesAPPLE(n, fences);
  }

  static GLboolean REGAL_CALL missing_glIsFenceAPPLE(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glIsFenceAPPLE", " not available." );
    return GL_FALSE;
  }

  PFNGLISFENCEAPPLEPROC driver_glIsFenceAPPLE = NULL;

  static GLboolean REGAL_CALL loader_glIsFenceAPPLE(Layer *_layer, GLuint fence)
  {
    return driver_glIsFenceAPPLE(fence);
  }

  static void REGAL_CALL missing_glSetFenceAPPLE(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glSetFenceAPPLE", " not available." );
  }

  PFNGLSETFENCEAPPLEPROC driver_glSetFenceAPPLE = NULL;

  static void REGAL_CALL loader_glSetFenceAPPLE(Layer *_layer, GLuint fence)
  {
    driver_glSetFenceAPPLE(fence);
  }

  static GLboolean REGAL_CALL missing_glTestFenceAPPLE(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glTestFenceAPPLE", " not available." );
    return GL_FALSE;
  }

  PFNGLTESTFENCEAPPLEPROC driver_glTestFenceAPPLE = NULL;

  static GLboolean REGAL_CALL loader_glTestFenceAPPLE(Layer *_layer, GLuint fence)
  {
    return driver_glTestFenceAPPLE(fence);
  }

  static GLboolean REGAL_CALL missing_glTestObjectAPPLE(GLenum object, GLuint name)
  {
    UNUSED_PARAMETER(object);
    UNUSED_PARAMETER(name);
    Warning( "glTestObjectAPPLE", " not available." );
    return GL_FALSE;
  }

  PFNGLTESTOBJECTAPPLEPROC driver_glTestObjectAPPLE = NULL;

  static GLboolean REGAL_CALL loader_glTestObjectAPPLE(Layer *_layer, GLenum object, GLuint name)
  {
    return driver_glTestObjectAPPLE(object, name);
  }

// GL_APPLE_flush_buffer_range

  static void REGAL_CALL missing_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glBufferParameteriAPPLE", " not available." );
  }

  PFNGLBUFFERPARAMETERIAPPLEPROC driver_glBufferParameteriAPPLE = NULL;

  static void REGAL_CALL loader_glBufferParameteriAPPLE(Layer *_layer, GLenum target, GLenum pname, GLint param)
  {
    driver_glBufferParameteriAPPLE(target, pname, param);
  }

  static void REGAL_CALL missing_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glFlushMappedBufferRangeAPPLE", " not available." );
  }

  PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC driver_glFlushMappedBufferRangeAPPLE = NULL;

  static void REGAL_CALL loader_glFlushMappedBufferRangeAPPLE(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr size)
  {
    driver_glFlushMappedBufferRangeAPPLE(target, offset, size);
  }

// GL_APPLE_flush_render

  static void REGAL_CALL missing_glFinishRenderAPPLE(void)
  {
    Warning( "glFinishRenderAPPLE", " not available." );
  }

  PFNGLFINISHRENDERAPPLEPROC driver_glFinishRenderAPPLE = NULL;

  static void REGAL_CALL loader_glFinishRenderAPPLE(Layer *_layer)
  {
    driver_glFinishRenderAPPLE();
  }

  static void REGAL_CALL missing_glFlushRenderAPPLE(void)
  {
    Warning( "glFlushRenderAPPLE", " not available." );
  }

  PFNGLFLUSHRENDERAPPLEPROC driver_glFlushRenderAPPLE = NULL;

  static void REGAL_CALL loader_glFlushRenderAPPLE(Layer *_layer)
  {
    driver_glFlushRenderAPPLE();
  }

  static void REGAL_CALL missing_glSwapAPPLE(void)
  {
    Warning( "glSwapAPPLE", " not available." );
  }

  PFNGLSWAPAPPLEPROC driver_glSwapAPPLE = NULL;

  static void REGAL_CALL loader_glSwapAPPLE(Layer *_layer)
  {
    driver_glSwapAPPLE();
  }

// GL_APPLE_framebuffer_multisample

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleAPPLE", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC driver_glRenderbufferStorageMultisampleAPPLE = NULL;

  static void REGAL_CALL loader_glRenderbufferStorageMultisampleAPPLE(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
  }

  static void REGAL_CALL missing_glResolveMultisampleFramebufferAPPLE(void)
  {
    Warning( "glResolveMultisampleFramebufferAPPLE", " not available." );
  }

  PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC driver_glResolveMultisampleFramebufferAPPLE = NULL;

  static void REGAL_CALL loader_glResolveMultisampleFramebufferAPPLE(Layer *_layer)
  {
    driver_glResolveMultisampleFramebufferAPPLE();
  }

// GL_APPLE_object_purgeable

  static void REGAL_CALL missing_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(objectType);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectParameterivAPPLE", " not available." );
  }

  PFNGLGETOBJECTPARAMETERIVAPPLEPROC driver_glGetObjectParameterivAPPLE = NULL;

  static void REGAL_CALL loader_glGetObjectParameterivAPPLE(Layer *_layer, GLenum objectType, GLuint name, GLenum pname, GLint *params)
  {
    driver_glGetObjectParameterivAPPLE(objectType, name, pname, params);
  }

  static GLenum REGAL_CALL missing_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
  {
    UNUSED_PARAMETER(objectType);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(option);
    Warning( "glObjectPurgeableAPPLE", " not available." );
    return 0;
  }

  PFNGLOBJECTPURGEABLEAPPLEPROC driver_glObjectPurgeableAPPLE = NULL;

  static GLenum REGAL_CALL loader_glObjectPurgeableAPPLE(Layer *_layer, GLenum objectType, GLuint name, GLenum option)
  {
    return driver_glObjectPurgeableAPPLE(objectType, name, option);
  }

  static GLenum REGAL_CALL missing_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
  {
    UNUSED_PARAMETER(objectType);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(option);
    Warning( "glObjectUnpurgeableAPPLE", " not available." );
    return 0;
  }

  PFNGLOBJECTUNPURGEABLEAPPLEPROC driver_glObjectUnpurgeableAPPLE = NULL;

  static GLenum REGAL_CALL loader_glObjectUnpurgeableAPPLE(Layer *_layer, GLenum objectType, GLuint name, GLenum option)
  {
    return driver_glObjectUnpurgeableAPPLE(objectType, name, option);
  }

// GL_APPLE_sync

  static GLenum REGAL_CALL missing_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "glClientWaitSyncAPPLE", " not available." );
    return 0;
  }

  PFNGLCLIENTWAITSYNCAPPLEPROC driver_glClientWaitSyncAPPLE = NULL;

  static GLenum REGAL_CALL loader_glClientWaitSyncAPPLE(Layer *_layer, GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    return driver_glClientWaitSyncAPPLE(sync, flags, timeout);
  }

  static void REGAL_CALL missing_glDeleteSyncAPPLE(GLsync sync)
  {
    UNUSED_PARAMETER(sync);
    Warning( "glDeleteSyncAPPLE", " not available." );
  }

  PFNGLDELETESYNCAPPLEPROC driver_glDeleteSyncAPPLE = NULL;

  static void REGAL_CALL loader_glDeleteSyncAPPLE(Layer *_layer, GLsync sync)
  {
    driver_glDeleteSyncAPPLE(sync);
  }

  static GLsync REGAL_CALL missing_glFenceSyncAPPLE(GLenum condition, GLbitfield flags)
  {
    UNUSED_PARAMETER(condition);
    UNUSED_PARAMETER(flags);
    Warning( "glFenceSyncAPPLE", " not available." );
    return NULL;
  }

  PFNGLFENCESYNCAPPLEPROC driver_glFenceSyncAPPLE = NULL;

  static GLsync REGAL_CALL loader_glFenceSyncAPPLE(Layer *_layer, GLenum condition, GLbitfield flags)
  {
    return driver_glFenceSyncAPPLE(condition, flags);
  }

  static void REGAL_CALL missing_glGetInteger64vAPPLE(GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetInteger64vAPPLE", " not available." );
  }

  PFNGLGETINTEGER64VAPPLEPROC driver_glGetInteger64vAPPLE = NULL;

  static void REGAL_CALL loader_glGetInteger64vAPPLE(Layer *_layer, GLenum pname, GLint64 *params)
  {
    driver_glGetInteger64vAPPLE(pname, params);
  }

  static void REGAL_CALL missing_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(values);
    Warning( "glGetSyncivAPPLE", " not available." );
  }

  PFNGLGETSYNCIVAPPLEPROC driver_glGetSyncivAPPLE = NULL;

  static void REGAL_CALL loader_glGetSyncivAPPLE(Layer *_layer, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    driver_glGetSyncivAPPLE(sync, pname, bufSize, length, values);
  }

  static GLboolean REGAL_CALL missing_glIsSyncAPPLE(GLsync sync)
  {
    UNUSED_PARAMETER(sync);
    Warning( "glIsSyncAPPLE", " not available." );
    return GL_FALSE;
  }

  PFNGLISSYNCAPPLEPROC driver_glIsSyncAPPLE = NULL;

  static GLboolean REGAL_CALL loader_glIsSyncAPPLE(Layer *_layer, GLsync sync)
  {
    return driver_glIsSyncAPPLE(sync);
  }

  static void REGAL_CALL missing_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "glWaitSyncAPPLE", " not available." );
  }

  PFNGLWAITSYNCAPPLEPROC driver_glWaitSyncAPPLE = NULL;

  static void REGAL_CALL loader_glWaitSyncAPPLE(Layer *_layer, GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    driver_glWaitSyncAPPLE(sync, flags, timeout);
  }

// GL_APPLE_texture_range

  static void REGAL_CALL missing_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterPointervAPPLE", " not available." );
  }

  PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC driver_glGetTexParameterPointervAPPLE = NULL;

  static void REGAL_CALL loader_glGetTexParameterPointervAPPLE(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
  {
    driver_glGetTexParameterPointervAPPLE(target, pname, params);
  }

  static void REGAL_CALL missing_glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(pointer);
    Warning( "glTextureRangeAPPLE", " not available." );
  }

  PFNGLTEXTURERANGEAPPLEPROC driver_glTextureRangeAPPLE = NULL;

  static void REGAL_CALL loader_glTextureRangeAPPLE(Layer *_layer, GLenum target, GLsizei length, const GLvoid *pointer)
  {
    driver_glTextureRangeAPPLE(target, length, pointer);
  }

// GL_APPLE_vertex_array_object

  static void REGAL_CALL missing_glBindVertexArrayAPPLE(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glBindVertexArrayAPPLE", " not available." );
  }

  PFNGLBINDVERTEXARRAYAPPLEPROC driver_glBindVertexArrayAPPLE = NULL;

  static void REGAL_CALL loader_glBindVertexArrayAPPLE(Layer *_layer, GLuint array)
  {
    driver_glBindVertexArrayAPPLE(array);
  }

  static void REGAL_CALL missing_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glDeleteVertexArraysAPPLE", " not available." );
  }

  PFNGLDELETEVERTEXARRAYSAPPLEPROC driver_glDeleteVertexArraysAPPLE = NULL;

  static void REGAL_CALL loader_glDeleteVertexArraysAPPLE(Layer *_layer, GLsizei n, const GLuint *arrays)
  {
    driver_glDeleteVertexArraysAPPLE(n, arrays);
  }

  static void REGAL_CALL missing_glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glGenVertexArraysAPPLE", " not available." );
  }

  PFNGLGENVERTEXARRAYSAPPLEPROC driver_glGenVertexArraysAPPLE = NULL;

  static void REGAL_CALL loader_glGenVertexArraysAPPLE(Layer *_layer, GLsizei n, GLuint *arrays)
  {
    driver_glGenVertexArraysAPPLE(n, arrays);
  }

  static GLboolean REGAL_CALL missing_glIsVertexArrayAPPLE(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glIsVertexArrayAPPLE", " not available." );
    return GL_FALSE;
  }

  PFNGLISVERTEXARRAYAPPLEPROC driver_glIsVertexArrayAPPLE = NULL;

  static GLboolean REGAL_CALL loader_glIsVertexArrayAPPLE(Layer *_layer, GLuint array)
  {
    return driver_glIsVertexArrayAPPLE(array);
  }

// GL_APPLE_vertex_array_range

  static void REGAL_CALL missing_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
  {
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(pointer);
    Warning( "glFlushVertexArrayRangeAPPLE", " not available." );
  }

  PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC driver_glFlushVertexArrayRangeAPPLE = NULL;

  static void REGAL_CALL loader_glFlushVertexArrayRangeAPPLE(Layer *_layer, GLsizei length, GLvoid *pointer)
  {
    driver_glFlushVertexArrayRangeAPPLE(length, pointer);
  }

  static void REGAL_CALL missing_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glVertexArrayParameteriAPPLE", " not available." );
  }

  PFNGLVERTEXARRAYPARAMETERIAPPLEPROC driver_glVertexArrayParameteriAPPLE = NULL;

  static void REGAL_CALL loader_glVertexArrayParameteriAPPLE(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glVertexArrayParameteriAPPLE(pname, param);
  }

  static void REGAL_CALL missing_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
  {
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexArrayRangeAPPLE", " not available." );
  }

  PFNGLVERTEXARRAYRANGEAPPLEPROC driver_glVertexArrayRangeAPPLE = NULL;

  static void REGAL_CALL loader_glVertexArrayRangeAPPLE(Layer *_layer, GLsizei length, GLvoid *pointer)
  {
    driver_glVertexArrayRangeAPPLE(length, pointer);
  }

// GL_APPLE_vertex_program_evaluators

  static void REGAL_CALL missing_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    Warning( "glDisableVertexAttribAPPLE", " not available." );
  }

  PFNGLDISABLEVERTEXATTRIBAPPLEPROC driver_glDisableVertexAttribAPPLE = NULL;

  static void REGAL_CALL loader_glDisableVertexAttribAPPLE(Layer *_layer, GLuint index, GLenum pname)
  {
    driver_glDisableVertexAttribAPPLE(index, pname);
  }

  static void REGAL_CALL missing_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    Warning( "glEnableVertexAttribAPPLE", " not available." );
  }

  PFNGLENABLEVERTEXATTRIBAPPLEPROC driver_glEnableVertexAttribAPPLE = NULL;

  static void REGAL_CALL loader_glEnableVertexAttribAPPLE(Layer *_layer, GLuint index, GLenum pname)
  {
    driver_glEnableVertexAttribAPPLE(index, pname);
  }

  static GLboolean REGAL_CALL missing_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    Warning( "glIsVertexAttribEnabledAPPLE", " not available." );
    return GL_FALSE;
  }

  PFNGLISVERTEXATTRIBENABLEDAPPLEPROC driver_glIsVertexAttribEnabledAPPLE = NULL;

  static GLboolean REGAL_CALL loader_glIsVertexAttribEnabledAPPLE(Layer *_layer, GLuint index, GLenum pname)
  {
    return driver_glIsVertexAttribEnabledAPPLE(index, pname);
  }

  static void REGAL_CALL missing_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(order);
    UNUSED_PARAMETER(points);
    Warning( "glMapVertexAttrib1dAPPLE", " not available." );
  }

  PFNGLMAPVERTEXATTRIB1DAPPLEPROC driver_glMapVertexAttrib1dAPPLE = NULL;

  static void REGAL_CALL loader_glMapVertexAttrib1dAPPLE(Layer *_layer, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
  {
    driver_glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
  }

  static void REGAL_CALL missing_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(order);
    UNUSED_PARAMETER(points);
    Warning( "glMapVertexAttrib1fAPPLE", " not available." );
  }

  PFNGLMAPVERTEXATTRIB1FAPPLEPROC driver_glMapVertexAttrib1fAPPLE = NULL;

  static void REGAL_CALL loader_glMapVertexAttrib1fAPPLE(Layer *_layer, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
  {
    driver_glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
  }

  static void REGAL_CALL missing_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(points);
    Warning( "glMapVertexAttrib2dAPPLE", " not available." );
  }

  PFNGLMAPVERTEXATTRIB2DAPPLEPROC driver_glMapVertexAttrib2dAPPLE = NULL;

  static void REGAL_CALL loader_glMapVertexAttrib2dAPPLE(Layer *_layer, GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
  {
    driver_glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }

  static void REGAL_CALL missing_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(points);
    Warning( "glMapVertexAttrib2fAPPLE", " not available." );
  }

  PFNGLMAPVERTEXATTRIB2FAPPLEPROC driver_glMapVertexAttrib2fAPPLE = NULL;

  static void REGAL_CALL loader_glMapVertexAttrib2fAPPLE(Layer *_layer, GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
  {
    driver_glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }

// GL_ARB_ES2_compatibility

  static void REGAL_CALL missing_glClearDepthf(GLclampf d)
  {
    UNUSED_PARAMETER(d);
    Warning( "glClearDepthf", " not available." );
  }

  PFNGLCLEARDEPTHFPROC driver_glClearDepthf = NULL;

  static void REGAL_CALL loader_glClearDepthf(Layer *_layer, GLclampf d)
  {
    driver_glClearDepthf(d);
  }

  static void REGAL_CALL missing_glDepthRangef(GLclampf n, GLclampf f)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glDepthRangef", " not available." );
  }

  PFNGLDEPTHRANGEFPROC driver_glDepthRangef = NULL;

  static void REGAL_CALL loader_glDepthRangef(Layer *_layer, GLclampf n, GLclampf f)
  {
    driver_glDepthRangef(n, f);
  }

  static void REGAL_CALL missing_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
  {
    UNUSED_PARAMETER(shadertype);
    UNUSED_PARAMETER(precisiontype);
    UNUSED_PARAMETER(range);
    UNUSED_PARAMETER(precision);
    Warning( "glGetShaderPrecisionFormat", " not available." );
  }

  PFNGLGETSHADERPRECISIONFORMATPROC driver_glGetShaderPrecisionFormat = NULL;

  static void REGAL_CALL loader_glGetShaderPrecisionFormat(Layer *_layer, GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
  {
    driver_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
  }

  static void REGAL_CALL missing_glReleaseShaderCompiler(void)
  {
    Warning( "glReleaseShaderCompiler", " not available." );
  }

  PFNGLRELEASESHADERCOMPILERPROC driver_glReleaseShaderCompiler = NULL;

  static void REGAL_CALL loader_glReleaseShaderCompiler(Layer *_layer)
  {
    driver_glReleaseShaderCompiler();
  }

  static void REGAL_CALL missing_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(shaders);
    UNUSED_PARAMETER(binaryformat);
    UNUSED_PARAMETER(binary);
    UNUSED_PARAMETER(length);
    Warning( "glShaderBinary", " not available." );
  }

  PFNGLSHADERBINARYPROC driver_glShaderBinary = NULL;

  static void REGAL_CALL loader_glShaderBinary(Layer *_layer, GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
  {
    driver_glShaderBinary(count, shaders, binaryformat, binary, length);
  }

// GL_ARB_base_instance

  static void REGAL_CALL missing_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(baseinstance);
    Warning( "glDrawArraysInstancedBaseInstance", " not available." );
  }

  PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC driver_glDrawArraysInstancedBaseInstance = NULL;

  static void REGAL_CALL loader_glDrawArraysInstancedBaseInstance(Layer *_layer, GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
  {
    driver_glDrawArraysInstancedBaseInstance(mode, first, count, primcount, baseinstance);
  }

  static void REGAL_CALL missing_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(baseinstance);
    Warning( "glDrawElementsInstancedBaseInstance", " not available." );
  }

  PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC driver_glDrawElementsInstancedBaseInstance = NULL;

  static void REGAL_CALL loader_glDrawElementsInstancedBaseInstance(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
  {
    driver_glDrawElementsInstancedBaseInstance(mode, count, type, indices, primcount, baseinstance);
  }

  static void REGAL_CALL missing_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(basevertex);
    UNUSED_PARAMETER(baseinstance);
    Warning( "glDrawElementsInstancedBaseVertexBaseInstance", " not available." );
  }

  PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC driver_glDrawElementsInstancedBaseVertexBaseInstance = NULL;

  static void REGAL_CALL loader_glDrawElementsInstancedBaseVertexBaseInstance(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
  {
    driver_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, primcount, basevertex, baseinstance);
  }

// GL_ARB_bindless_texture

  static GLuint64 REGAL_CALL missing_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layered);
    UNUSED_PARAMETER(layer);
    UNUSED_PARAMETER(format);
    Warning( "glGetImageHandleARB", " not available." );
    return 0;
  }

  PFNGLGETIMAGEHANDLEARBPROC driver_glGetImageHandleARB = NULL;

  static GLuint64 REGAL_CALL loader_glGetImageHandleARB(Layer *_layer, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
  {
    return driver_glGetImageHandleARB(texture, level, layered, layer, format);
  }

  static GLuint64 REGAL_CALL missing_glGetTextureHandleARB(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glGetTextureHandleARB", " not available." );
    return 0;
  }

  PFNGLGETTEXTUREHANDLEARBPROC driver_glGetTextureHandleARB = NULL;

  static GLuint64 REGAL_CALL loader_glGetTextureHandleARB(Layer *_layer, GLuint texture)
  {
    return driver_glGetTextureHandleARB(texture);
  }

  static GLuint64 REGAL_CALL missing_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(sampler);
    Warning( "glGetTextureSamplerHandleARB", " not available." );
    return 0;
  }

  PFNGLGETTEXTURESAMPLERHANDLEARBPROC driver_glGetTextureSamplerHandleARB = NULL;

  static GLuint64 REGAL_CALL loader_glGetTextureSamplerHandleARB(Layer *_layer, GLuint texture, GLuint sampler)
  {
    return driver_glGetTextureSamplerHandleARB(texture, sampler);
  }

  static void REGAL_CALL missing_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLui64vARB", " not available." );
  }

  PFNGLGETVERTEXATTRIBLUI64VARBPROC driver_glGetVertexAttribLui64vARB = NULL;

  static void REGAL_CALL loader_glGetVertexAttribLui64vARB(Layer *_layer, GLuint index, GLenum pname, GLuint64EXT *params)
  {
    driver_glGetVertexAttribLui64vARB(index, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsImageHandleResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glIsImageHandleResidentARB", " not available." );
    return GL_FALSE;
  }

  PFNGLISIMAGEHANDLERESIDENTARBPROC driver_glIsImageHandleResidentARB = NULL;

  static GLboolean REGAL_CALL loader_glIsImageHandleResidentARB(Layer *_layer, GLuint64 handle)
  {
    return driver_glIsImageHandleResidentARB(handle);
  }

  static GLboolean REGAL_CALL missing_glIsTextureHandleResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glIsTextureHandleResidentARB", " not available." );
    return GL_FALSE;
  }

  PFNGLISTEXTUREHANDLERESIDENTARBPROC driver_glIsTextureHandleResidentARB = NULL;

  static GLboolean REGAL_CALL loader_glIsTextureHandleResidentARB(Layer *_layer, GLuint64 handle)
  {
    return driver_glIsTextureHandleResidentARB(handle);
  }

  static void REGAL_CALL missing_glMakeImageHandleNonResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeImageHandleNonResidentARB", " not available." );
  }

  PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC driver_glMakeImageHandleNonResidentARB = NULL;

  static void REGAL_CALL loader_glMakeImageHandleNonResidentARB(Layer *_layer, GLuint64 handle)
  {
    driver_glMakeImageHandleNonResidentARB(handle);
  }

  static void REGAL_CALL missing_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
  {
    UNUSED_PARAMETER(handle);
    UNUSED_PARAMETER(access);
    Warning( "glMakeImageHandleResidentARB", " not available." );
  }

  PFNGLMAKEIMAGEHANDLERESIDENTARBPROC driver_glMakeImageHandleResidentARB = NULL;

  static void REGAL_CALL loader_glMakeImageHandleResidentARB(Layer *_layer, GLuint64 handle, GLenum access)
  {
    driver_glMakeImageHandleResidentARB(handle, access);
  }

  static void REGAL_CALL missing_glMakeTextureHandleNonResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeTextureHandleNonResidentARB", " not available." );
  }

  PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC driver_glMakeTextureHandleNonResidentARB = NULL;

  static void REGAL_CALL loader_glMakeTextureHandleNonResidentARB(Layer *_layer, GLuint64 handle)
  {
    driver_glMakeTextureHandleNonResidentARB(handle);
  }

  static void REGAL_CALL missing_glMakeTextureHandleResidentARB(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeTextureHandleResidentARB", " not available." );
  }

  PFNGLMAKETEXTUREHANDLERESIDENTARBPROC driver_glMakeTextureHandleResidentARB = NULL;

  static void REGAL_CALL loader_glMakeTextureHandleResidentARB(Layer *_layer, GLuint64 handle)
  {
    driver_glMakeTextureHandleResidentARB(handle);
  }

  static void REGAL_CALL missing_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformHandleui64ARB", " not available." );
  }

  PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC driver_glProgramUniformHandleui64ARB = NULL;

  static void REGAL_CALL loader_glProgramUniformHandleui64ARB(Layer *_layer, GLuint program, GLint location, GLuint64 value)
  {
    driver_glProgramUniformHandleui64ARB(program, location, value);
  }

  static void REGAL_CALL missing_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(values);
    Warning( "glProgramUniformHandleui64vARB", " not available." );
  }

  PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC driver_glProgramUniformHandleui64vARB = NULL;

  static void REGAL_CALL loader_glProgramUniformHandleui64vARB(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64 *values)
  {
    driver_glProgramUniformHandleui64vARB(program, location, count, values);
  }

  static void REGAL_CALL missing_glUniformHandleui64ARB(GLint location, GLuint64 value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(value);
    Warning( "glUniformHandleui64ARB", " not available." );
  }

  PFNGLUNIFORMHANDLEUI64ARBPROC driver_glUniformHandleui64ARB = NULL;

  static void REGAL_CALL loader_glUniformHandleui64ARB(Layer *_layer, GLint location, GLuint64 value)
  {
    driver_glUniformHandleui64ARB(location, value);
  }

  static void REGAL_CALL missing_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniformHandleui64vARB", " not available." );
  }

  PFNGLUNIFORMHANDLEUI64VARBPROC driver_glUniformHandleui64vARB = NULL;

  static void REGAL_CALL loader_glUniformHandleui64vARB(Layer *_layer, GLint location, GLsizei count, const GLuint64 *value)
  {
    driver_glUniformHandleui64vARB(location, count, value);
  }

  static void REGAL_CALL missing_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1ui64ARB", " not available." );
  }

  PFNGLVERTEXATTRIBL1UI64ARBPROC driver_glVertexAttribL1ui64ARB = NULL;

  static void REGAL_CALL loader_glVertexAttribL1ui64ARB(Layer *_layer, GLuint index, GLuint64EXT x)
  {
    driver_glVertexAttribL1ui64ARB(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1ui64vARB", " not available." );
  }

  PFNGLVERTEXATTRIBL1UI64VARBPROC driver_glVertexAttribL1ui64vARB = NULL;

  static void REGAL_CALL loader_glVertexAttribL1ui64vARB(Layer *_layer, GLuint index, const GLuint64EXT *v)
  {
    driver_glVertexAttribL1ui64vARB(index, v);
  }

// GL_ARB_blend_func_extended

  static void REGAL_CALL missing_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(colorNumber);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(name);
    Warning( "glBindFragDataLocationIndexed", " not available." );
  }

  PFNGLBINDFRAGDATALOCATIONINDEXEDPROC driver_glBindFragDataLocationIndexed = NULL;

  static void REGAL_CALL loader_glBindFragDataLocationIndexed(Layer *_layer, GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
  {
    driver_glBindFragDataLocationIndexed(program, colorNumber, index, name);
  }

  static GLint REGAL_CALL missing_glGetFragDataIndex(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetFragDataIndex", " not available." );
    return 0;
  }

  PFNGLGETFRAGDATAINDEXPROC driver_glGetFragDataIndex = NULL;

  static GLint REGAL_CALL loader_glGetFragDataIndex(Layer *_layer, GLuint program, const GLchar *name)
  {
    return driver_glGetFragDataIndex(program, name);
  }

// GL_ARB_buffer_storage

  static void REGAL_CALL missing_glBufferStorage(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(flags);
    Warning( "glBufferStorage", " not available." );
  }

  PFNGLBUFFERSTORAGEPROC driver_glBufferStorage = NULL;

  static void REGAL_CALL loader_glBufferStorage(Layer *_layer, GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
  {
    driver_glBufferStorage(target, size, data, flags);
  }

  static void REGAL_CALL missing_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(flags);
    Warning( "glNamedBufferStorageEXT", " not available." );
  }

  PFNGLNAMEDBUFFERSTORAGEEXTPROC driver_glNamedBufferStorageEXT = NULL;

  static void REGAL_CALL loader_glNamedBufferStorageEXT(Layer *_layer, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
  {
    driver_glNamedBufferStorageEXT(buffer, size, data, flags);
  }

// GL_ARB_cl_event

  static GLsync REGAL_CALL missing_glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags)
  {
    UNUSED_PARAMETER(context);
    UNUSED_PARAMETER(event);
    UNUSED_PARAMETER(flags);
    Warning( "glCreateSyncFromCLeventARB", " not available." );
    return NULL;
  }

  PFNGLCREATESYNCFROMCLEVENTARBPROC driver_glCreateSyncFromCLeventARB = NULL;

  static GLsync REGAL_CALL loader_glCreateSyncFromCLeventARB(Layer *_layer, cl_context context, cl_event event, GLbitfield flags)
  {
    return driver_glCreateSyncFromCLeventARB(context, event, flags);
  }

// GL_ARB_clear_buffer_object

  static void REGAL_CALL missing_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearBufferData", " not available." );
  }

  PFNGLCLEARBUFFERDATAPROC driver_glClearBufferData = NULL;

  static void REGAL_CALL loader_glClearBufferData(Layer *_layer, GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
  {
    driver_glClearBufferData(target, internalformat, format, type, data);
  }

  static void REGAL_CALL missing_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearBufferSubData", " not available." );
  }

  PFNGLCLEARBUFFERSUBDATAPROC driver_glClearBufferSubData = NULL;

  static void REGAL_CALL loader_glClearBufferSubData(Layer *_layer, GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
  {
    driver_glClearBufferSubData(target, internalformat, offset, size, format, type, data);
  }

  static void REGAL_CALL missing_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearNamedBufferDataEXT", " not available." );
  }

  PFNGLCLEARNAMEDBUFFERDATAEXTPROC driver_glClearNamedBufferDataEXT = NULL;

  static void REGAL_CALL loader_glClearNamedBufferDataEXT(Layer *_layer, GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
  {
    driver_glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
  }

  static void REGAL_CALL missing_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearNamedBufferSubDataEXT", " not available." );
  }

  PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC driver_glClearNamedBufferSubDataEXT = NULL;

  static void REGAL_CALL loader_glClearNamedBufferSubDataEXT(Layer *_layer, GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
  {
    driver_glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
  }

// GL_ARB_clear_texture

  static void REGAL_CALL missing_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearTexImage", " not available." );
  }

  PFNGLCLEARTEXIMAGEPROC driver_glClearTexImage = NULL;

  static void REGAL_CALL loader_glClearTexImage(Layer *_layer, GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
  {
    driver_glClearTexImage(texture, level, format, type, data);
  }

  static void REGAL_CALL missing_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glClearTexSubImage", " not available." );
  }

  PFNGLCLEARTEXSUBIMAGEPROC driver_glClearTexSubImage = NULL;

  static void REGAL_CALL loader_glClearTexSubImage(Layer *_layer, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
  {
    driver_glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  }

// GL_ARB_color_buffer_float

  static void REGAL_CALL missing_glClampColorARB(GLenum target, GLenum clamp)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(clamp);
    Warning( "glClampColorARB", " not available." );
  }

  PFNGLCLAMPCOLORARBPROC driver_glClampColorARB = NULL;

  static void REGAL_CALL loader_glClampColorARB(Layer *_layer, GLenum target, GLenum clamp)
  {
    driver_glClampColorARB(target, clamp);
  }

// GL_ARB_compute_shader

  static void REGAL_CALL missing_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
  {
    UNUSED_PARAMETER(num_groups_x);
    UNUSED_PARAMETER(num_groups_y);
    UNUSED_PARAMETER(num_groups_z);
    Warning( "glDispatchCompute", " not available." );
  }

  PFNGLDISPATCHCOMPUTEPROC driver_glDispatchCompute = NULL;

  static void REGAL_CALL loader_glDispatchCompute(Layer *_layer, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
  {
    driver_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
  }

  static void REGAL_CALL missing_glDispatchComputeIndirect(GLintptr indirect)
  {
    UNUSED_PARAMETER(indirect);
    Warning( "glDispatchComputeIndirect", " not available." );
  }

  PFNGLDISPATCHCOMPUTEINDIRECTPROC driver_glDispatchComputeIndirect = NULL;

  static void REGAL_CALL loader_glDispatchComputeIndirect(Layer *_layer, GLintptr indirect)
  {
    driver_glDispatchComputeIndirect(indirect);
  }

// GL_ARB_compute_variable_group_size

  static void REGAL_CALL missing_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
  {
    UNUSED_PARAMETER(num_groups_x);
    UNUSED_PARAMETER(num_groups_y);
    UNUSED_PARAMETER(num_groups_z);
    UNUSED_PARAMETER(group_size_x);
    UNUSED_PARAMETER(group_size_y);
    UNUSED_PARAMETER(group_size_z);
    Warning( "glDispatchComputeGroupSizeARB", " not available." );
  }

  PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC driver_glDispatchComputeGroupSizeARB = NULL;

  static void REGAL_CALL loader_glDispatchComputeGroupSizeARB(Layer *_layer, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
  {
    driver_glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  }

// GL_ARB_copy_buffer

  static void REGAL_CALL missing_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(readtarget);
    UNUSED_PARAMETER(writetarget);
    UNUSED_PARAMETER(readoffset);
    UNUSED_PARAMETER(writeoffset);
    UNUSED_PARAMETER(size);
    Warning( "glCopyBufferSubData", " not available." );
  }

  PFNGLCOPYBUFFERSUBDATAPROC driver_glCopyBufferSubData = NULL;

  static void REGAL_CALL loader_glCopyBufferSubData(Layer *_layer, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
  {
    driver_glCopyBufferSubData(readtarget, writetarget, readoffset, writeoffset, size);
  }

// GL_ARB_copy_image

  static void REGAL_CALL missing_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
  {
    UNUSED_PARAMETER(srcName);
    UNUSED_PARAMETER(srcTarget);
    UNUSED_PARAMETER(srcLevel);
    UNUSED_PARAMETER(srcX);
    UNUSED_PARAMETER(srcY);
    UNUSED_PARAMETER(srcZ);
    UNUSED_PARAMETER(dstName);
    UNUSED_PARAMETER(dstTarget);
    UNUSED_PARAMETER(dstLevel);
    UNUSED_PARAMETER(dstX);
    UNUSED_PARAMETER(dstY);
    UNUSED_PARAMETER(dstZ);
    UNUSED_PARAMETER(srcWidth);
    UNUSED_PARAMETER(srcHeight);
    UNUSED_PARAMETER(srcDepth);
    Warning( "glCopyImageSubData", " not available." );
  }

  PFNGLCOPYIMAGESUBDATAPROC driver_glCopyImageSubData = NULL;

  static void REGAL_CALL loader_glCopyImageSubData(Layer *_layer, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
  {
    driver_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }

// GL_ARB_debug_output

  static void REGAL_CALL missing_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam)
  {
    UNUSED_PARAMETER(callback);
    UNUSED_PARAMETER(userParam);
    Warning( "glDebugMessageCallbackARB", " not available." );
  }

  PFNGLDEBUGMESSAGECALLBACKARBPROC driver_glDebugMessageCallbackARB = NULL;

  static void REGAL_CALL loader_glDebugMessageCallbackARB(Layer *_layer, GLDEBUGPROCARB callback, const GLvoid *userParam)
  {
    driver_glDebugMessageCallbackARB(callback, userParam);
  }

  static void REGAL_CALL missing_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(enabled);
    Warning( "glDebugMessageControlARB", " not available." );
  }

  PFNGLDEBUGMESSAGECONTROLARBPROC driver_glDebugMessageControlARB = NULL;

  static void REGAL_CALL loader_glDebugMessageControlARB(Layer *_layer, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    driver_glDebugMessageControlARB(source, type, severity, count, ids, enabled);
  }

  static void REGAL_CALL missing_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(buf);
    Warning( "glDebugMessageInsertARB", " not available." );
  }

  PFNGLDEBUGMESSAGEINSERTARBPROC driver_glDebugMessageInsertARB = NULL;

  static void REGAL_CALL loader_glDebugMessageInsertARB(Layer *_layer, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
  {
    driver_glDebugMessageInsertARB(source, type, id, severity, length, buf);
  }

  static GLuint REGAL_CALL missing_glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(bufsize);
    UNUSED_PARAMETER(sources);
    UNUSED_PARAMETER(types);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(severities);
    UNUSED_PARAMETER(lengths);
    UNUSED_PARAMETER(messageLog);
    Warning( "glGetDebugMessageLogARB", " not available." );
    return 0;
  }

  PFNGLGETDEBUGMESSAGELOGARBPROC driver_glGetDebugMessageLogARB = NULL;

  static GLuint REGAL_CALL loader_glGetDebugMessageLogARB(Layer *_layer, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
  {
    return driver_glGetDebugMessageLogARB(count, bufsize, sources, types, ids, severities, lengths, messageLog);
  }

// GL_ARB_draw_buffers

  static void REGAL_CALL missing_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glDrawBuffersARB", " not available." );
  }

  PFNGLDRAWBUFFERSARBPROC driver_glDrawBuffersARB = NULL;

  static void REGAL_CALL loader_glDrawBuffersARB(Layer *_layer, GLsizei n, const GLenum *bufs)
  {
    driver_glDrawBuffersARB(n, bufs);
  }

// GL_ARB_draw_buffers_blend

  static void REGAL_CALL missing_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparateiARB", " not available." );
  }

  PFNGLBLENDEQUATIONSEPARATEIARBPROC driver_glBlendEquationSeparateiARB = NULL;

  static void REGAL_CALL loader_glBlendEquationSeparateiARB(Layer *_layer, GLuint buf, GLenum modeRGB, GLenum modeAlpha)
  {
    driver_glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
  }

  static void REGAL_CALL missing_glBlendEquationiARB(GLuint buf, GLenum mode)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationiARB", " not available." );
  }

  PFNGLBLENDEQUATIONIARBPROC driver_glBlendEquationiARB = NULL;

  static void REGAL_CALL loader_glBlendEquationiARB(Layer *_layer, GLuint buf, GLenum mode)
  {
    driver_glBlendEquationiARB(buf, mode);
  }

  static void REGAL_CALL missing_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(srcRGB);
    UNUSED_PARAMETER(dstRGB);
    UNUSED_PARAMETER(srcAlpha);
    UNUSED_PARAMETER(dstAlpha);
    Warning( "glBlendFuncSeparateiARB", " not available." );
  }

  PFNGLBLENDFUNCSEPARATEIARBPROC driver_glBlendFuncSeparateiARB = NULL;

  static void REGAL_CALL loader_glBlendFuncSeparateiARB(Layer *_layer, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
  {
    driver_glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }

  static void REGAL_CALL missing_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    Warning( "glBlendFunciARB", " not available." );
  }

  PFNGLBLENDFUNCIARBPROC driver_glBlendFunciARB = NULL;

  static void REGAL_CALL loader_glBlendFunciARB(Layer *_layer, GLuint buf, GLenum src, GLenum dst)
  {
    driver_glBlendFunciARB(buf, src, dst);
  }

// GL_ARB_draw_elements_base_vertex

  static void REGAL_CALL missing_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(basevertex);
    Warning( "glDrawElementsBaseVertex", " not available." );
  }

  PFNGLDRAWELEMENTSBASEVERTEXPROC driver_glDrawElementsBaseVertex = NULL;

  static void REGAL_CALL loader_glDrawElementsBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
  {
    driver_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
  }

  static void REGAL_CALL missing_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(basevertex);
    Warning( "glDrawElementsInstancedBaseVertex", " not available." );
  }

  PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC driver_glDrawElementsInstancedBaseVertex = NULL;

  static void REGAL_CALL loader_glDrawElementsInstancedBaseVertex(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
  {
    driver_glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex);
  }

  static void REGAL_CALL missing_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(basevertex);
    Warning( "glDrawRangeElementsBaseVertex", " not available." );
  }

  PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC driver_glDrawRangeElementsBaseVertex = NULL;

  static void REGAL_CALL loader_glDrawRangeElementsBaseVertex(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
  {
    driver_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
  }

  static void REGAL_CALL missing_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(basevertex);
    Warning( "glMultiDrawElementsBaseVertex", " not available." );
  }

  PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC driver_glMultiDrawElementsBaseVertex = NULL;

  static void REGAL_CALL loader_glMultiDrawElementsBaseVertex(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
  {
    driver_glMultiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);
  }

// GL_ARB_draw_indirect

  static void REGAL_CALL missing_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(indirect);
    Warning( "glDrawArraysIndirect", " not available." );
  }

  PFNGLDRAWARRAYSINDIRECTPROC driver_glDrawArraysIndirect = NULL;

  static void REGAL_CALL loader_glDrawArraysIndirect(Layer *_layer, GLenum mode, const GLvoid *indirect)
  {
    driver_glDrawArraysIndirect(mode, indirect);
  }

  static void REGAL_CALL missing_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indirect);
    Warning( "glDrawElementsIndirect", " not available." );
  }

  PFNGLDRAWELEMENTSINDIRECTPROC driver_glDrawElementsIndirect = NULL;

  static void REGAL_CALL loader_glDrawElementsIndirect(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect)
  {
    driver_glDrawElementsIndirect(mode, type, indirect);
  }

// GL_ARB_draw_instanced

  static void REGAL_CALL missing_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawArraysInstancedARB", " not available." );
  }

  PFNGLDRAWARRAYSINSTANCEDARBPROC driver_glDrawArraysInstancedARB = NULL;

  static void REGAL_CALL loader_glDrawArraysInstancedARB(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    driver_glDrawArraysInstancedARB(mode, start, count, primcount);
  }

  static void REGAL_CALL missing_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawElementsInstancedARB", " not available." );
  }

  PFNGLDRAWELEMENTSINSTANCEDARBPROC driver_glDrawElementsInstancedARB = NULL;

  static void REGAL_CALL loader_glDrawElementsInstancedARB(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    driver_glDrawElementsInstancedARB(mode, count, type, indices, primcount);
  }

// GL_ARB_framebuffer_no_attachments

  static void REGAL_CALL missing_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFramebufferParameteri", " not available." );
  }

  PFNGLFRAMEBUFFERPARAMETERIPROC driver_glFramebufferParameteri = NULL;

  static void REGAL_CALL loader_glFramebufferParameteri(Layer *_layer, GLenum target, GLenum pname, GLint param)
  {
    driver_glFramebufferParameteri(target, pname, param);
  }

  static void REGAL_CALL missing_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferParameteriv", " not available." );
  }

  PFNGLGETFRAMEBUFFERPARAMETERIVPROC driver_glGetFramebufferParameteriv = NULL;

  static void REGAL_CALL loader_glGetFramebufferParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetFramebufferParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedFramebufferParameterivEXT", " not available." );
  }

  PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC driver_glGetNamedFramebufferParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetNamedFramebufferParameterivEXT(Layer *_layer, GLuint framebuffer, GLenum pname, GLint *params)
  {
    driver_glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
  }

  static void REGAL_CALL missing_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glNamedFramebufferParameteriEXT", " not available." );
  }

  PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC driver_glNamedFramebufferParameteriEXT = NULL;

  static void REGAL_CALL loader_glNamedFramebufferParameteriEXT(Layer *_layer, GLuint framebuffer, GLenum pname, GLint param)
  {
    driver_glNamedFramebufferParameteriEXT(framebuffer, pname, param);
  }

// GL_ARB_framebuffer_object

  static void REGAL_CALL missing_glBindFramebuffer(GLenum target, GLuint framebuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(framebuffer);
    Warning( "glBindFramebuffer", " not available." );
  }

  PFNGLBINDFRAMEBUFFERPROC driver_glBindFramebuffer = NULL;

  static void REGAL_CALL loader_glBindFramebuffer(Layer *_layer, GLenum target, GLuint framebuffer)
  {
    driver_glBindFramebuffer(target, framebuffer);
  }

  static void REGAL_CALL missing_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glBindRenderbuffer", " not available." );
  }

  PFNGLBINDRENDERBUFFERPROC driver_glBindRenderbuffer = NULL;

  static void REGAL_CALL loader_glBindRenderbuffer(Layer *_layer, GLenum target, GLuint renderbuffer)
  {
    driver_glBindRenderbuffer(target, renderbuffer);
  }

  static void REGAL_CALL missing_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glBlitFramebuffer", " not available." );
  }

  PFNGLBLITFRAMEBUFFERPROC driver_glBlitFramebuffer = NULL;

  static void REGAL_CALL loader_glBlitFramebuffer(Layer *_layer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    driver_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  static GLenum REGAL_CALL missing_glCheckFramebufferStatus(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glCheckFramebufferStatus", " not available." );
    return 0;
  }

  PFNGLCHECKFRAMEBUFFERSTATUSPROC driver_glCheckFramebufferStatus = NULL;

  static GLenum REGAL_CALL loader_glCheckFramebufferStatus(Layer *_layer, GLenum target)
  {
    return driver_glCheckFramebufferStatus(target);
  }

  static void REGAL_CALL missing_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glDeleteFramebuffers", " not available." );
  }

  PFNGLDELETEFRAMEBUFFERSPROC driver_glDeleteFramebuffers = NULL;

  static void REGAL_CALL loader_glDeleteFramebuffers(Layer *_layer, GLsizei n, const GLuint *framebuffers)
  {
    driver_glDeleteFramebuffers(n, framebuffers);
  }

  static void REGAL_CALL missing_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glDeleteRenderbuffers", " not available." );
  }

  PFNGLDELETERENDERBUFFERSPROC driver_glDeleteRenderbuffers = NULL;

  static void REGAL_CALL loader_glDeleteRenderbuffers(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
  {
    driver_glDeleteRenderbuffers(n, renderbuffers);
  }

  static void REGAL_CALL missing_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(renderbuffertarget);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glFramebufferRenderbuffer", " not available." );
  }

  PFNGLFRAMEBUFFERRENDERBUFFERPROC driver_glFramebufferRenderbuffer = NULL;

  static void REGAL_CALL loader_glFramebufferRenderbuffer(Layer *_layer, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    driver_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  }

  static void REGAL_CALL missing_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture1D", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE1DPROC driver_glFramebufferTexture1D = NULL;

  static void REGAL_CALL loader_glFramebufferTexture1D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    driver_glFramebufferTexture1D(target, attachment, textarget, texture, level);
  }

  static void REGAL_CALL missing_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture2D", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE2DPROC driver_glFramebufferTexture2D = NULL;

  static void REGAL_CALL loader_glFramebufferTexture2D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    driver_glFramebufferTexture2D(target, attachment, textarget, texture, level);
  }

  static void REGAL_CALL missing_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glFramebufferTexture3D", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE3DPROC driver_glFramebufferTexture3D = NULL;

  static void REGAL_CALL loader_glFramebufferTexture3D(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
  {
    driver_glFramebufferTexture3D(target, attachment, textarget, texture, level, layer);
  }

  static void REGAL_CALL missing_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glFramebufferTextureLayer", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURELAYERPROC driver_glFramebufferTextureLayer = NULL;

  static void REGAL_CALL loader_glFramebufferTextureLayer(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    driver_glFramebufferTextureLayer(target, attachment, texture, level, layer);
  }

  static void REGAL_CALL missing_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glGenFramebuffers", " not available." );
  }

  PFNGLGENFRAMEBUFFERSPROC driver_glGenFramebuffers = NULL;

  static void REGAL_CALL loader_glGenFramebuffers(Layer *_layer, GLsizei n, GLuint *framebuffers)
  {
    driver_glGenFramebuffers(n, framebuffers);
  }

  static void REGAL_CALL missing_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glGenRenderbuffers", " not available." );
  }

  PFNGLGENRENDERBUFFERSPROC driver_glGenRenderbuffers = NULL;

  static void REGAL_CALL loader_glGenRenderbuffers(Layer *_layer, GLsizei n, GLuint *renderbuffers)
  {
    driver_glGenRenderbuffers(n, renderbuffers);
  }

  static void REGAL_CALL missing_glGenerateMipmap(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glGenerateMipmap", " not available." );
  }

  PFNGLGENERATEMIPMAPPROC driver_glGenerateMipmap = NULL;

  static void REGAL_CALL loader_glGenerateMipmap(Layer *_layer, GLenum target)
  {
    driver_glGenerateMipmap(target);
  }

  static void REGAL_CALL missing_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferAttachmentParameteriv", " not available." );
  }

  PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC driver_glGetFramebufferAttachmentParameteriv = NULL;

  static void REGAL_CALL loader_glGetFramebufferAttachmentParameteriv(Layer *_layer, GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    driver_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
  }

  static void REGAL_CALL missing_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetRenderbufferParameteriv", " not available." );
  }

  PFNGLGETRENDERBUFFERPARAMETERIVPROC driver_glGetRenderbufferParameteriv = NULL;

  static void REGAL_CALL loader_glGetRenderbufferParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetRenderbufferParameteriv(target, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsFramebuffer(GLuint framebuffer)
  {
    UNUSED_PARAMETER(framebuffer);
    Warning( "glIsFramebuffer", " not available." );
    return GL_FALSE;
  }

  PFNGLISFRAMEBUFFERPROC driver_glIsFramebuffer = NULL;

  static GLboolean REGAL_CALL loader_glIsFramebuffer(Layer *_layer, GLuint framebuffer)
  {
    return driver_glIsFramebuffer(framebuffer);
  }

  static GLboolean REGAL_CALL missing_glIsRenderbuffer(GLuint renderbuffer)
  {
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glIsRenderbuffer", " not available." );
    return GL_FALSE;
  }

  PFNGLISRENDERBUFFERPROC driver_glIsRenderbuffer = NULL;

  static GLboolean REGAL_CALL loader_glIsRenderbuffer(Layer *_layer, GLuint renderbuffer)
  {
    return driver_glIsRenderbuffer(renderbuffer);
  }

  static void REGAL_CALL missing_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorage", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEPROC driver_glRenderbufferStorage = NULL;

  static void REGAL_CALL loader_glRenderbufferStorage(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorage(target, internalformat, width, height);
  }

  static void REGAL_CALL missing_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisample", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC driver_glRenderbufferStorageMultisample = NULL;

  static void REGAL_CALL loader_glRenderbufferStorageMultisample(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  }

// GL_ARB_geometry_shader4

  static void REGAL_CALL missing_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTextureARB", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTUREARBPROC driver_glFramebufferTextureARB = NULL;

  static void REGAL_CALL loader_glFramebufferTextureARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    driver_glFramebufferTextureARB(target, attachment, texture, level);
  }

  static void REGAL_CALL missing_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(face);
    Warning( "glFramebufferTextureFaceARB", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTUREFACEARBPROC driver_glFramebufferTextureFaceARB = NULL;

  static void REGAL_CALL loader_glFramebufferTextureFaceARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    driver_glFramebufferTextureFaceARB(target, attachment, texture, level, face);
  }

  static void REGAL_CALL missing_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glFramebufferTextureLayerARB", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURELAYERARBPROC driver_glFramebufferTextureLayerARB = NULL;

  static void REGAL_CALL loader_glFramebufferTextureLayerARB(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    driver_glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
  }

  static void REGAL_CALL missing_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glProgramParameteriARB", " not available." );
  }

  PFNGLPROGRAMPARAMETERIARBPROC driver_glProgramParameteriARB = NULL;

  static void REGAL_CALL loader_glProgramParameteriARB(Layer *_layer, GLuint program, GLenum pname, GLint value)
  {
    driver_glProgramParameteriARB(program, pname, value);
  }

// GL_ARB_get_program_binary

  static void REGAL_CALL missing_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(binaryFormat);
    UNUSED_PARAMETER(binary);
    Warning( "glGetProgramBinary", " not available." );
  }

  PFNGLGETPROGRAMBINARYPROC driver_glGetProgramBinary = NULL;

  static void REGAL_CALL loader_glGetProgramBinary(Layer *_layer, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
  {
    driver_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
  }

  static void REGAL_CALL missing_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(binaryFormat);
    UNUSED_PARAMETER(binary);
    UNUSED_PARAMETER(length);
    Warning( "glProgramBinary", " not available." );
  }

  PFNGLPROGRAMBINARYPROC driver_glProgramBinary = NULL;

  static void REGAL_CALL loader_glProgramBinary(Layer *_layer, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
  {
    driver_glProgramBinary(program, binaryFormat, binary, length);
  }

  static void REGAL_CALL missing_glProgramParameteri(GLuint program, GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glProgramParameteri", " not available." );
  }

  PFNGLPROGRAMPARAMETERIPROC driver_glProgramParameteri = NULL;

  static void REGAL_CALL loader_glProgramParameteri(Layer *_layer, GLuint program, GLenum pname, GLint value)
  {
    driver_glProgramParameteri(program, pname, value);
  }

// GL_ARB_gpu_shader_fp64

  static void REGAL_CALL missing_glGetUniformdv(GLuint program, GLint location, GLdouble *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformdv", " not available." );
  }

  PFNGLGETUNIFORMDVPROC driver_glGetUniformdv = NULL;

  static void REGAL_CALL loader_glGetUniformdv(Layer *_layer, GLuint program, GLint location, GLdouble *params)
  {
    driver_glGetUniformdv(program, location, params);
  }

  static void REGAL_CALL missing_glUniform1d(GLint location, GLdouble x)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glUniform1d", " not available." );
  }

  PFNGLUNIFORM1DPROC driver_glUniform1d = NULL;

  static void REGAL_CALL loader_glUniform1d(Layer *_layer, GLint location, GLdouble x)
  {
    driver_glUniform1d(location, x);
  }

  static void REGAL_CALL missing_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1dv", " not available." );
  }

  PFNGLUNIFORM1DVPROC driver_glUniform1dv = NULL;

  static void REGAL_CALL loader_glUniform1dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glUniform1dv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2d(GLint location, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glUniform2d", " not available." );
  }

  PFNGLUNIFORM2DPROC driver_glUniform2d = NULL;

  static void REGAL_CALL loader_glUniform2d(Layer *_layer, GLint location, GLdouble x, GLdouble y)
  {
    driver_glUniform2d(location, x, y);
  }

  static void REGAL_CALL missing_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2dv", " not available." );
  }

  PFNGLUNIFORM2DVPROC driver_glUniform2dv = NULL;

  static void REGAL_CALL loader_glUniform2dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glUniform2dv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glUniform3d", " not available." );
  }

  PFNGLUNIFORM3DPROC driver_glUniform3d = NULL;

  static void REGAL_CALL loader_glUniform3d(Layer *_layer, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glUniform3d(location, x, y, z);
  }

  static void REGAL_CALL missing_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3dv", " not available." );
  }

  PFNGLUNIFORM3DVPROC driver_glUniform3dv = NULL;

  static void REGAL_CALL loader_glUniform3dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glUniform3dv(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glUniform4d", " not available." );
  }

  PFNGLUNIFORM4DPROC driver_glUniform4d = NULL;

  static void REGAL_CALL loader_glUniform4d(Layer *_layer, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glUniform4d(location, x, y, z, w);
  }

  static void REGAL_CALL missing_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4dv", " not available." );
  }

  PFNGLUNIFORM4DVPROC driver_glUniform4dv = NULL;

  static void REGAL_CALL loader_glUniform4dv(Layer *_layer, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glUniform4dv(location, count, value);
  }

  static void REGAL_CALL missing_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2dv", " not available." );
  }

  PFNGLUNIFORMMATRIX2DVPROC driver_glUniformMatrix2dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix2dv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x3dv", " not available." );
  }

  PFNGLUNIFORMMATRIX2X3DVPROC driver_glUniformMatrix2x3dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix2x3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix2x3dv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x4dv", " not available." );
  }

  PFNGLUNIFORMMATRIX2X4DVPROC driver_glUniformMatrix2x4dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix2x4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix2x4dv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3dv", " not available." );
  }

  PFNGLUNIFORMMATRIX3DVPROC driver_glUniformMatrix3dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix3dv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x2dv", " not available." );
  }

  PFNGLUNIFORMMATRIX3X2DVPROC driver_glUniformMatrix3x2dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix3x2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix3x2dv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x4dv", " not available." );
  }

  PFNGLUNIFORMMATRIX3X4DVPROC driver_glUniformMatrix3x4dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix3x4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix3x4dv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4dv", " not available." );
  }

  PFNGLUNIFORMMATRIX4DVPROC driver_glUniformMatrix4dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix4dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix4dv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x2dv", " not available." );
  }

  PFNGLUNIFORMMATRIX4X2DVPROC driver_glUniformMatrix4x2dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix4x2dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix4x2dv(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x3dv", " not available." );
  }

  PFNGLUNIFORMMATRIX4X3DVPROC driver_glUniformMatrix4x3dv = NULL;

  static void REGAL_CALL loader_glUniformMatrix4x3dv(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glUniformMatrix4x3dv(location, count, transpose, value);
  }

// GL_ARB_imaging

  static void REGAL_CALL missing_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glColorSubTable", " not available." );
  }

  PFNGLCOLORSUBTABLEPROC driver_glColorSubTable = NULL;

  static void REGAL_CALL loader_glColorSubTable(Layer *_layer, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
  {
    driver_glColorSubTable(target, start, count, format, type, data);
  }

  static void REGAL_CALL missing_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glColorTable", " not available." );
  }

  PFNGLCOLORTABLEPROC driver_glColorTable = NULL;

  static void REGAL_CALL loader_glColorTable(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    driver_glColorTable(target, internalformat, width, format, type, table);
  }

  static void REGAL_CALL missing_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glColorTableParameterfv", " not available." );
  }

  PFNGLCOLORTABLEPARAMETERFVPROC driver_glColorTableParameterfv = NULL;

  static void REGAL_CALL loader_glColorTableParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glColorTableParameterfv(target, pname, params);
  }

  static void REGAL_CALL missing_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glColorTableParameteriv", " not available." );
  }

  PFNGLCOLORTABLEPARAMETERIVPROC driver_glColorTableParameteriv = NULL;

  static void REGAL_CALL loader_glColorTableParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glColorTableParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glConvolutionFilter1D", " not available." );
  }

  PFNGLCONVOLUTIONFILTER1DPROC driver_glConvolutionFilter1D = NULL;

  static void REGAL_CALL loader_glConvolutionFilter1D(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
  {
    driver_glConvolutionFilter1D(target, internalformat, width, format, type, image);
  }

  static void REGAL_CALL missing_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glConvolutionFilter2D", " not available." );
  }

  PFNGLCONVOLUTIONFILTER2DPROC driver_glConvolutionFilter2D = NULL;

  static void REGAL_CALL loader_glConvolutionFilter2D(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
  {
    driver_glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
  }

  static void REGAL_CALL missing_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameterf", " not available." );
  }

  PFNGLCONVOLUTIONPARAMETERFPROC driver_glConvolutionParameterf = NULL;

  static void REGAL_CALL loader_glConvolutionParameterf(Layer *_layer, GLenum target, GLenum pname, GLfloat params)
  {
    driver_glConvolutionParameterf(target, pname, params);
  }

  static void REGAL_CALL missing_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameterfv", " not available." );
  }

  PFNGLCONVOLUTIONPARAMETERFVPROC driver_glConvolutionParameterfv = NULL;

  static void REGAL_CALL loader_glConvolutionParameterfv(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glConvolutionParameterfv(target, pname, params);
  }

  static void REGAL_CALL missing_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameteri", " not available." );
  }

  PFNGLCONVOLUTIONPARAMETERIPROC driver_glConvolutionParameteri = NULL;

  static void REGAL_CALL loader_glConvolutionParameteri(Layer *_layer, GLenum target, GLenum pname, GLint params)
  {
    driver_glConvolutionParameteri(target, pname, params);
  }

  static void REGAL_CALL missing_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameteriv", " not available." );
  }

  PFNGLCONVOLUTIONPARAMETERIVPROC driver_glConvolutionParameteriv = NULL;

  static void REGAL_CALL loader_glConvolutionParameteriv(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glConvolutionParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyColorSubTable", " not available." );
  }

  PFNGLCOPYCOLORSUBTABLEPROC driver_glCopyColorSubTable = NULL;

  static void REGAL_CALL loader_glCopyColorSubTable(Layer *_layer, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyColorSubTable(target, start, x, y, width);
  }

  static void REGAL_CALL missing_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyColorTable", " not available." );
  }

  PFNGLCOPYCOLORTABLEPROC driver_glCopyColorTable = NULL;

  static void REGAL_CALL loader_glCopyColorTable(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyColorTable(target, internalformat, x, y, width);
  }

  static void REGAL_CALL missing_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyConvolutionFilter1D", " not available." );
  }

  PFNGLCOPYCONVOLUTIONFILTER1DPROC driver_glCopyConvolutionFilter1D = NULL;

  static void REGAL_CALL loader_glCopyConvolutionFilter1D(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyConvolutionFilter1D(target, internalformat, x, y, width);
  }

  static void REGAL_CALL missing_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyConvolutionFilter2D", " not available." );
  }

  PFNGLCOPYCONVOLUTIONFILTER2DPROC driver_glCopyConvolutionFilter2D = NULL;

  static void REGAL_CALL loader_glCopyConvolutionFilter2D(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
  }

  static void REGAL_CALL missing_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glGetColorTable", " not available." );
  }

  PFNGLGETCOLORTABLEPROC driver_glGetColorTable = NULL;

  static void REGAL_CALL loader_glGetColorTable(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *table)
  {
    driver_glGetColorTable(target, format, type, table);
  }

  static void REGAL_CALL missing_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterfv", " not available." );
  }

  PFNGLGETCOLORTABLEPARAMETERFVPROC driver_glGetColorTableParameterfv = NULL;

  static void REGAL_CALL loader_glGetColorTableParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetColorTableParameterfv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameteriv", " not available." );
  }

  PFNGLGETCOLORTABLEPARAMETERIVPROC driver_glGetColorTableParameteriv = NULL;

  static void REGAL_CALL loader_glGetColorTableParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetColorTableParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glGetConvolutionFilter", " not available." );
  }

  PFNGLGETCONVOLUTIONFILTERPROC driver_glGetConvolutionFilter = NULL;

  static void REGAL_CALL loader_glGetConvolutionFilter(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *image)
  {
    driver_glGetConvolutionFilter(target, format, type, image);
  }

  static void REGAL_CALL missing_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetConvolutionParameterfv", " not available." );
  }

  PFNGLGETCONVOLUTIONPARAMETERFVPROC driver_glGetConvolutionParameterfv = NULL;

  static void REGAL_CALL loader_glGetConvolutionParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetConvolutionParameterfv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetConvolutionParameteriv", " not available." );
  }

  PFNGLGETCONVOLUTIONPARAMETERIVPROC driver_glGetConvolutionParameteriv = NULL;

  static void REGAL_CALL loader_glGetConvolutionParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetConvolutionParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(values);
    Warning( "glGetHistogram", " not available." );
  }

  PFNGLGETHISTOGRAMPROC driver_glGetHistogram = NULL;

  static void REGAL_CALL loader_glGetHistogram(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    driver_glGetHistogram(target, reset, format, type, values);
  }

  static void REGAL_CALL missing_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetHistogramParameterfv", " not available." );
  }

  PFNGLGETHISTOGRAMPARAMETERFVPROC driver_glGetHistogramParameterfv = NULL;

  static void REGAL_CALL loader_glGetHistogramParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetHistogramParameterfv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetHistogramParameteriv", " not available." );
  }

  PFNGLGETHISTOGRAMPARAMETERIVPROC driver_glGetHistogramParameteriv = NULL;

  static void REGAL_CALL loader_glGetHistogramParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetHistogramParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(types);
    UNUSED_PARAMETER(values);
    Warning( "glGetMinmax", " not available." );
  }

  PFNGLGETMINMAXPROC driver_glGetMinmax = NULL;

  static void REGAL_CALL loader_glGetMinmax(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
  {
    driver_glGetMinmax(target, reset, format, types, values);
  }

  static void REGAL_CALL missing_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMinmaxParameterfv", " not available." );
  }

  PFNGLGETMINMAXPARAMETERFVPROC driver_glGetMinmaxParameterfv = NULL;

  static void REGAL_CALL loader_glGetMinmaxParameterfv(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetMinmaxParameterfv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMinmaxParameteriv", " not available." );
  }

  PFNGLGETMINMAXPARAMETERIVPROC driver_glGetMinmaxParameteriv = NULL;

  static void REGAL_CALL loader_glGetMinmaxParameteriv(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetMinmaxParameteriv(target, pname, params);
  }

  static void REGAL_CALL missing_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(column);
    UNUSED_PARAMETER(span);
    Warning( "glGetSeparableFilter", " not available." );
  }

  PFNGLGETSEPARABLEFILTERPROC driver_glGetSeparableFilter = NULL;

  static void REGAL_CALL loader_glGetSeparableFilter(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
  {
    driver_glGetSeparableFilter(target, format, type, row, column, span);
  }

  static void REGAL_CALL missing_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(sink);
    Warning( "glHistogram", " not available." );
  }

  PFNGLHISTOGRAMPROC driver_glHistogram = NULL;

  static void REGAL_CALL loader_glHistogram(Layer *_layer, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
  {
    driver_glHistogram(target, width, internalformat, sink);
  }

  static void REGAL_CALL missing_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(sink);
    Warning( "glMinmax", " not available." );
  }

  PFNGLMINMAXPROC driver_glMinmax = NULL;

  static void REGAL_CALL loader_glMinmax(Layer *_layer, GLenum target, GLenum internalformat, GLboolean sink)
  {
    driver_glMinmax(target, internalformat, sink);
  }

  static void REGAL_CALL missing_glResetHistogram(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glResetHistogram", " not available." );
  }

  PFNGLRESETHISTOGRAMPROC driver_glResetHistogram = NULL;

  static void REGAL_CALL loader_glResetHistogram(Layer *_layer, GLenum target)
  {
    driver_glResetHistogram(target);
  }

  static void REGAL_CALL missing_glResetMinmax(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glResetMinmax", " not available." );
  }

  PFNGLRESETMINMAXPROC driver_glResetMinmax = NULL;

  static void REGAL_CALL loader_glResetMinmax(Layer *_layer, GLenum target)
  {
    driver_glResetMinmax(target);
  }

  static void REGAL_CALL missing_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(column);
    Warning( "glSeparableFilter2D", " not available." );
  }

  PFNGLSEPARABLEFILTER2DPROC driver_glSeparableFilter2D = NULL;

  static void REGAL_CALL loader_glSeparableFilter2D(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
  {
    driver_glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
  }

// GL_ARB_indirect_parameters

  static void REGAL_CALL missing_glMultiDrawArraysIndirectCountARB(GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(drawcount);
    UNUSED_PARAMETER(maxdrawcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawArraysIndirectCountARB", " not available." );
  }

  PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC driver_glMultiDrawArraysIndirectCountARB = NULL;

  static void REGAL_CALL loader_glMultiDrawArraysIndirectCountARB(Layer *_layer, GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
  {
    driver_glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
  }

  static void REGAL_CALL missing_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(drawcount);
    UNUSED_PARAMETER(maxdrawcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawElementsIndirectCountARB", " not available." );
  }

  PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC driver_glMultiDrawElementsIndirectCountARB = NULL;

  static void REGAL_CALL loader_glMultiDrawElementsIndirectCountARB(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
  {
    driver_glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
  }

// GL_ARB_instanced_arrays

  static void REGAL_CALL missing_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexAttribDivisorARB", " not available." );
  }

  PFNGLVERTEXATTRIBDIVISORARBPROC driver_glVertexAttribDivisorARB = NULL;

  static void REGAL_CALL loader_glVertexAttribDivisorARB(Layer *_layer, GLuint index, GLuint divisor)
  {
    driver_glVertexAttribDivisorARB(index, divisor);
  }

// GL_ARB_internalformat_query

  static void REGAL_CALL missing_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetInternalformativ", " not available." );
  }

  PFNGLGETINTERNALFORMATIVPROC driver_glGetInternalformativ = NULL;

  static void REGAL_CALL loader_glGetInternalformativ(Layer *_layer, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
  {
    driver_glGetInternalformativ(target, internalformat, pname, bufSize, params);
  }

// GL_ARB_internalformat_query2

  static void REGAL_CALL missing_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetInternalformati64v", " not available." );
  }

  PFNGLGETINTERNALFORMATI64VPROC driver_glGetInternalformati64v = NULL;

  static void REGAL_CALL loader_glGetInternalformati64v(Layer *_layer, GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
  {
    driver_glGetInternalformati64v(target, internalformat, pname, bufSize, params);
  }

// GL_ARB_invalidate_subdata

  static void REGAL_CALL missing_glInvalidateBufferData(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glInvalidateBufferData", " not available." );
  }

  PFNGLINVALIDATEBUFFERDATAPROC driver_glInvalidateBufferData = NULL;

  static void REGAL_CALL loader_glInvalidateBufferData(Layer *_layer, GLuint buffer)
  {
    driver_glInvalidateBufferData(buffer);
  }

  static void REGAL_CALL missing_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    Warning( "glInvalidateBufferSubData", " not available." );
  }

  PFNGLINVALIDATEBUFFERSUBDATAPROC driver_glInvalidateBufferSubData = NULL;

  static void REGAL_CALL loader_glInvalidateBufferSubData(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr length)
  {
    driver_glInvalidateBufferSubData(buffer, offset, length);
  }

  static void REGAL_CALL missing_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numAttachments);
    UNUSED_PARAMETER(attachments);
    Warning( "glInvalidateFramebuffer", " not available." );
  }

  PFNGLINVALIDATEFRAMEBUFFERPROC driver_glInvalidateFramebuffer = NULL;

  static void REGAL_CALL loader_glInvalidateFramebuffer(Layer *_layer, GLenum target, GLsizei numAttachments, const GLenum *attachments)
  {
    driver_glInvalidateFramebuffer(target, numAttachments, attachments);
  }

  static void REGAL_CALL missing_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numAttachments);
    UNUSED_PARAMETER(attachments);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glInvalidateSubFramebuffer", " not available." );
  }

  PFNGLINVALIDATESUBFRAMEBUFFERPROC driver_glInvalidateSubFramebuffer = NULL;

  static void REGAL_CALL loader_glInvalidateSubFramebuffer(Layer *_layer, GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
  }

  static void REGAL_CALL missing_glInvalidateTexImage(GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glInvalidateTexImage", " not available." );
  }

  PFNGLINVALIDATETEXIMAGEPROC driver_glInvalidateTexImage = NULL;

  static void REGAL_CALL loader_glInvalidateTexImage(Layer *_layer, GLuint texture, GLint level)
  {
    driver_glInvalidateTexImage(texture, level);
  }

  static void REGAL_CALL missing_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glInvalidateTexSubImage", " not available." );
  }

  PFNGLINVALIDATETEXSUBIMAGEPROC driver_glInvalidateTexSubImage = NULL;

  static void REGAL_CALL loader_glInvalidateTexSubImage(Layer *_layer, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
  {
    driver_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
  }

// GL_ARB_map_buffer_range

  static void REGAL_CALL missing_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    Warning( "glFlushMappedBufferRange", " not available." );
  }

  PFNGLFLUSHMAPPEDBUFFERRANGEPROC driver_glFlushMappedBufferRange = NULL;

  static void REGAL_CALL loader_glFlushMappedBufferRange(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length)
  {
    driver_glFlushMappedBufferRange(target, offset, length);
  }

  static GLvoid *REGAL_CALL missing_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(access);
    Warning( "glMapBufferRange", " not available." );
    return NULL;
  }

  PFNGLMAPBUFFERRANGEPROC driver_glMapBufferRange = NULL;

  static GLvoid *REGAL_CALL loader_glMapBufferRange(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    return driver_glMapBufferRange(target, offset, length, access);
  }

// GL_ARB_matrix_palette

  static void REGAL_CALL missing_glCurrentPaletteMatrixARB(GLint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glCurrentPaletteMatrixARB", " not available." );
  }

  PFNGLCURRENTPALETTEMATRIXARBPROC driver_glCurrentPaletteMatrixARB = NULL;

  static void REGAL_CALL loader_glCurrentPaletteMatrixARB(Layer *_layer, GLint index)
  {
    driver_glCurrentPaletteMatrixARB(index);
  }

  static void REGAL_CALL missing_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glMatrixIndexPointerARB", " not available." );
  }

  PFNGLMATRIXINDEXPOINTERARBPROC driver_glMatrixIndexPointerARB = NULL;

  static void REGAL_CALL loader_glMatrixIndexPointerARB(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glMatrixIndexPointerARB(size, type, stride, pointer);
  }

  static void REGAL_CALL missing_glMatrixIndexubvARB(GLint size, const GLubyte *indices)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(indices);
    Warning( "glMatrixIndexubvARB", " not available." );
  }

  PFNGLMATRIXINDEXUBVARBPROC driver_glMatrixIndexubvARB = NULL;

  static void REGAL_CALL loader_glMatrixIndexubvARB(Layer *_layer, GLint size, const GLubyte *indices)
  {
    driver_glMatrixIndexubvARB(size, indices);
  }

  static void REGAL_CALL missing_glMatrixIndexuivARB(GLint size, const GLuint *indices)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(indices);
    Warning( "glMatrixIndexuivARB", " not available." );
  }

  PFNGLMATRIXINDEXUIVARBPROC driver_glMatrixIndexuivARB = NULL;

  static void REGAL_CALL loader_glMatrixIndexuivARB(Layer *_layer, GLint size, const GLuint *indices)
  {
    driver_glMatrixIndexuivARB(size, indices);
  }

  static void REGAL_CALL missing_glMatrixIndexusvARB(GLint size, const GLushort *indices)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(indices);
    Warning( "glMatrixIndexusvARB", " not available." );
  }

  PFNGLMATRIXINDEXUSVARBPROC driver_glMatrixIndexusvARB = NULL;

  static void REGAL_CALL loader_glMatrixIndexusvARB(Layer *_layer, GLint size, const GLushort *indices)
  {
    driver_glMatrixIndexusvARB(size, indices);
  }

// GL_ARB_multi_bind

  static void REGAL_CALL missing_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(buffers);
    Warning( "glBindBuffersBase", " not available." );
  }

  PFNGLBINDBUFFERSBASEPROC driver_glBindBuffersBase = NULL;

  static void REGAL_CALL loader_glBindBuffersBase(Layer *_layer, GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
  {
    driver_glBindBuffersBase(target, first, count, buffers);
  }

  static void REGAL_CALL missing_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(buffers);
    UNUSED_PARAMETER(offsets);
    UNUSED_PARAMETER(sizes);
    Warning( "glBindBuffersRange", " not available." );
  }

  PFNGLBINDBUFFERSRANGEPROC driver_glBindBuffersRange = NULL;

  static void REGAL_CALL loader_glBindBuffersRange(Layer *_layer, GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
  {
    driver_glBindBuffersRange(target, first, count, buffers, offsets, sizes);
  }

  static void REGAL_CALL missing_glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(textures);
    Warning( "glBindImageTextures", " not available." );
  }

  PFNGLBINDIMAGETEXTURESPROC driver_glBindImageTextures = NULL;

  static void REGAL_CALL loader_glBindImageTextures(Layer *_layer, GLuint first, GLsizei count, const GLuint *textures)
  {
    driver_glBindImageTextures(first, count, textures);
  }

  static void REGAL_CALL missing_glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(samplers);
    Warning( "glBindSamplers", " not available." );
  }

  PFNGLBINDSAMPLERSPROC driver_glBindSamplers = NULL;

  static void REGAL_CALL loader_glBindSamplers(Layer *_layer, GLuint first, GLsizei count, const GLuint *samplers)
  {
    driver_glBindSamplers(first, count, samplers);
  }

  static void REGAL_CALL missing_glBindTextures(GLuint first, GLsizei count, const GLuint *textures)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(textures);
    Warning( "glBindTextures", " not available." );
  }

  PFNGLBINDTEXTURESPROC driver_glBindTextures = NULL;

  static void REGAL_CALL loader_glBindTextures(Layer *_layer, GLuint first, GLsizei count, const GLuint *textures)
  {
    driver_glBindTextures(first, count, textures);
  }

  static void REGAL_CALL missing_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(buffers);
    UNUSED_PARAMETER(offsets);
    UNUSED_PARAMETER(strides);
    Warning( "glBindVertexBuffers", " not available." );
  }

  PFNGLBINDVERTEXBUFFERSPROC driver_glBindVertexBuffers = NULL;

  static void REGAL_CALL loader_glBindVertexBuffers(Layer *_layer, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
  {
    driver_glBindVertexBuffers(first, count, buffers, offsets, strides);
  }

// GL_ARB_multi_draw_indirect

  static void REGAL_CALL missing_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawArraysIndirect", " not available." );
  }

  PFNGLMULTIDRAWARRAYSINDIRECTPROC driver_glMultiDrawArraysIndirect = NULL;

  static void REGAL_CALL loader_glMultiDrawArraysIndirect(Layer *_layer, GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    driver_glMultiDrawArraysIndirect(mode, indirect, primcount, stride);
  }

  static void REGAL_CALL missing_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indirect);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(stride);
    Warning( "glMultiDrawElementsIndirect", " not available." );
  }

  PFNGLMULTIDRAWELEMENTSINDIRECTPROC driver_glMultiDrawElementsIndirect = NULL;

  static void REGAL_CALL loader_glMultiDrawElementsIndirect(Layer *_layer, GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
  {
    driver_glMultiDrawElementsIndirect(mode, type, indirect, primcount, stride);
  }

// GL_ARB_multisample

  static void REGAL_CALL missing_glSampleCoverageARB(GLclampf value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleCoverageARB", " not available." );
  }

  PFNGLSAMPLECOVERAGEARBPROC driver_glSampleCoverageARB = NULL;

  static void REGAL_CALL loader_glSampleCoverageARB(Layer *_layer, GLclampf value, GLboolean invert)
  {
    driver_glSampleCoverageARB(value, invert);
  }

// GL_ARB_multitexture

  static void REGAL_CALL missing_glActiveTextureARB(GLenum texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glActiveTextureARB", " not available." );
  }

  PFNGLACTIVETEXTUREARBPROC driver_glActiveTextureARB = NULL;

  static void REGAL_CALL loader_glActiveTextureARB(Layer *_layer, GLenum texture)
  {
    driver_glActiveTextureARB(texture);
  }

  static void REGAL_CALL missing_glClientActiveTextureARB(GLenum texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glClientActiveTextureARB", " not available." );
  }

  PFNGLCLIENTACTIVETEXTUREARBPROC driver_glClientActiveTextureARB = NULL;

  static void REGAL_CALL loader_glClientActiveTextureARB(Layer *_layer, GLenum texture)
  {
    driver_glClientActiveTextureARB(texture);
  }

  static void REGAL_CALL missing_glMultiTexCoord1dARB(GLenum target, GLdouble s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1dARB", " not available." );
  }

  PFNGLMULTITEXCOORD1DARBPROC driver_glMultiTexCoord1dARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1dARB(Layer *_layer, GLenum target, GLdouble s)
  {
    driver_glMultiTexCoord1dARB(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1dvARB", " not available." );
  }

  PFNGLMULTITEXCOORD1DVARBPROC driver_glMultiTexCoord1dvARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1dvARB(Layer *_layer, GLenum target, const GLdouble *v)
  {
    driver_glMultiTexCoord1dvARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord1fARB(GLenum target, GLfloat s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1fARB", " not available." );
  }

  PFNGLMULTITEXCOORD1FARBPROC driver_glMultiTexCoord1fARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1fARB(Layer *_layer, GLenum target, GLfloat s)
  {
    driver_glMultiTexCoord1fARB(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1fvARB", " not available." );
  }

  PFNGLMULTITEXCOORD1FVARBPROC driver_glMultiTexCoord1fvARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1fvARB(Layer *_layer, GLenum target, const GLfloat *v)
  {
    driver_glMultiTexCoord1fvARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord1iARB(GLenum target, GLint s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1iARB", " not available." );
  }

  PFNGLMULTITEXCOORD1IARBPROC driver_glMultiTexCoord1iARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1iARB(Layer *_layer, GLenum target, GLint s)
  {
    driver_glMultiTexCoord1iARB(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1ivARB(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1ivARB", " not available." );
  }

  PFNGLMULTITEXCOORD1IVARBPROC driver_glMultiTexCoord1ivARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1ivARB(Layer *_layer, GLenum target, const GLint *v)
  {
    driver_glMultiTexCoord1ivARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord1sARB(GLenum target, GLshort s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1sARB", " not available." );
  }

  PFNGLMULTITEXCOORD1SARBPROC driver_glMultiTexCoord1sARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1sARB(Layer *_layer, GLenum target, GLshort s)
  {
    driver_glMultiTexCoord1sARB(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1svARB(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1svARB", " not available." );
  }

  PFNGLMULTITEXCOORD1SVARBPROC driver_glMultiTexCoord1svARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1svARB(Layer *_layer, GLenum target, const GLshort *v)
  {
    driver_glMultiTexCoord1svARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2dARB", " not available." );
  }

  PFNGLMULTITEXCOORD2DARBPROC driver_glMultiTexCoord2dARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2dARB(Layer *_layer, GLenum target, GLdouble s, GLdouble t)
  {
    driver_glMultiTexCoord2dARB(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2dvARB", " not available." );
  }

  PFNGLMULTITEXCOORD2DVARBPROC driver_glMultiTexCoord2dvARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2dvARB(Layer *_layer, GLenum target, const GLdouble *v)
  {
    driver_glMultiTexCoord2dvARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2fARB", " not available." );
  }

  PFNGLMULTITEXCOORD2FARBPROC driver_glMultiTexCoord2fARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2fARB(Layer *_layer, GLenum target, GLfloat s, GLfloat t)
  {
    driver_glMultiTexCoord2fARB(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2fvARB", " not available." );
  }

  PFNGLMULTITEXCOORD2FVARBPROC driver_glMultiTexCoord2fvARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2fvARB(Layer *_layer, GLenum target, const GLfloat *v)
  {
    driver_glMultiTexCoord2fvARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2iARB", " not available." );
  }

  PFNGLMULTITEXCOORD2IARBPROC driver_glMultiTexCoord2iARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2iARB(Layer *_layer, GLenum target, GLint s, GLint t)
  {
    driver_glMultiTexCoord2iARB(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2ivARB(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2ivARB", " not available." );
  }

  PFNGLMULTITEXCOORD2IVARBPROC driver_glMultiTexCoord2ivARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2ivARB(Layer *_layer, GLenum target, const GLint *v)
  {
    driver_glMultiTexCoord2ivARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2sARB", " not available." );
  }

  PFNGLMULTITEXCOORD2SARBPROC driver_glMultiTexCoord2sARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2sARB(Layer *_layer, GLenum target, GLshort s, GLshort t)
  {
    driver_glMultiTexCoord2sARB(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2svARB(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2svARB", " not available." );
  }

  PFNGLMULTITEXCOORD2SVARBPROC driver_glMultiTexCoord2svARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2svARB(Layer *_layer, GLenum target, const GLshort *v)
  {
    driver_glMultiTexCoord2svARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3dARB", " not available." );
  }

  PFNGLMULTITEXCOORD3DARBPROC driver_glMultiTexCoord3dARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3dARB(Layer *_layer, GLenum target, GLdouble s, GLdouble t, GLdouble r)
  {
    driver_glMultiTexCoord3dARB(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3dvARB", " not available." );
  }

  PFNGLMULTITEXCOORD3DVARBPROC driver_glMultiTexCoord3dvARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3dvARB(Layer *_layer, GLenum target, const GLdouble *v)
  {
    driver_glMultiTexCoord3dvARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3fARB", " not available." );
  }

  PFNGLMULTITEXCOORD3FARBPROC driver_glMultiTexCoord3fARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3fARB(Layer *_layer, GLenum target, GLfloat s, GLfloat t, GLfloat r)
  {
    driver_glMultiTexCoord3fARB(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3fvARB", " not available." );
  }

  PFNGLMULTITEXCOORD3FVARBPROC driver_glMultiTexCoord3fvARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3fvARB(Layer *_layer, GLenum target, const GLfloat *v)
  {
    driver_glMultiTexCoord3fvARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3iARB", " not available." );
  }

  PFNGLMULTITEXCOORD3IARBPROC driver_glMultiTexCoord3iARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3iARB(Layer *_layer, GLenum target, GLint s, GLint t, GLint r)
  {
    driver_glMultiTexCoord3iARB(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3ivARB(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3ivARB", " not available." );
  }

  PFNGLMULTITEXCOORD3IVARBPROC driver_glMultiTexCoord3ivARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3ivARB(Layer *_layer, GLenum target, const GLint *v)
  {
    driver_glMultiTexCoord3ivARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3sARB", " not available." );
  }

  PFNGLMULTITEXCOORD3SARBPROC driver_glMultiTexCoord3sARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3sARB(Layer *_layer, GLenum target, GLshort s, GLshort t, GLshort r)
  {
    driver_glMultiTexCoord3sARB(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3svARB(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3svARB", " not available." );
  }

  PFNGLMULTITEXCOORD3SVARBPROC driver_glMultiTexCoord3svARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3svARB(Layer *_layer, GLenum target, const GLshort *v)
  {
    driver_glMultiTexCoord3svARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4dARB", " not available." );
  }

  PFNGLMULTITEXCOORD4DARBPROC driver_glMultiTexCoord4dARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4dARB(Layer *_layer, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
  {
    driver_glMultiTexCoord4dARB(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4dvARB", " not available." );
  }

  PFNGLMULTITEXCOORD4DVARBPROC driver_glMultiTexCoord4dvARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4dvARB(Layer *_layer, GLenum target, const GLdouble *v)
  {
    driver_glMultiTexCoord4dvARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4fARB", " not available." );
  }

  PFNGLMULTITEXCOORD4FARBPROC driver_glMultiTexCoord4fARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4fARB(Layer *_layer, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
  {
    driver_glMultiTexCoord4fARB(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4fvARB", " not available." );
  }

  PFNGLMULTITEXCOORD4FVARBPROC driver_glMultiTexCoord4fvARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4fvARB(Layer *_layer, GLenum target, const GLfloat *v)
  {
    driver_glMultiTexCoord4fvARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4iARB", " not available." );
  }

  PFNGLMULTITEXCOORD4IARBPROC driver_glMultiTexCoord4iARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4iARB(Layer *_layer, GLenum target, GLint s, GLint t, GLint r, GLint q)
  {
    driver_glMultiTexCoord4iARB(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4ivARB(GLenum target, const GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4ivARB", " not available." );
  }

  PFNGLMULTITEXCOORD4IVARBPROC driver_glMultiTexCoord4ivARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4ivARB(Layer *_layer, GLenum target, const GLint *v)
  {
    driver_glMultiTexCoord4ivARB(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4sARB", " not available." );
  }

  PFNGLMULTITEXCOORD4SARBPROC driver_glMultiTexCoord4sARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4sARB(Layer *_layer, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
  {
    driver_glMultiTexCoord4sARB(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4svARB(GLenum target, const GLshort *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4svARB", " not available." );
  }

  PFNGLMULTITEXCOORD4SVARBPROC driver_glMultiTexCoord4svARB = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4svARB(Layer *_layer, GLenum target, const GLshort *v)
  {
    driver_glMultiTexCoord4svARB(target, v);
  }

// GL_ARB_occlusion_query

  static void REGAL_CALL missing_glBeginQueryARB(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQueryARB", " not available." );
  }

  PFNGLBEGINQUERYARBPROC driver_glBeginQueryARB = NULL;

  static void REGAL_CALL loader_glBeginQueryARB(Layer *_layer, GLenum target, GLuint id)
  {
    driver_glBeginQueryARB(target, id);
  }

  static void REGAL_CALL missing_glDeleteQueriesARB(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteQueriesARB", " not available." );
  }

  PFNGLDELETEQUERIESARBPROC driver_glDeleteQueriesARB = NULL;

  static void REGAL_CALL loader_glDeleteQueriesARB(Layer *_layer, GLsizei n, const GLuint *ids)
  {
    driver_glDeleteQueriesARB(n, ids);
  }

  static void REGAL_CALL missing_glEndQueryARB(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glEndQueryARB", " not available." );
  }

  PFNGLENDQUERYARBPROC driver_glEndQueryARB = NULL;

  static void REGAL_CALL loader_glEndQueryARB(Layer *_layer, GLenum target)
  {
    driver_glEndQueryARB(target);
  }

  static void REGAL_CALL missing_glGenQueriesARB(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenQueriesARB", " not available." );
  }

  PFNGLGENQUERIESARBPROC driver_glGenQueriesARB = NULL;

  static void REGAL_CALL loader_glGenQueriesARB(Layer *_layer, GLsizei n, GLuint *ids)
  {
    driver_glGenQueriesARB(n, ids);
  }

  static void REGAL_CALL missing_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectivARB", " not available." );
  }

  PFNGLGETQUERYOBJECTIVARBPROC driver_glGetQueryObjectivARB = NULL;

  static void REGAL_CALL loader_glGetQueryObjectivARB(Layer *_layer, GLuint id, GLenum pname, GLint *params)
  {
    driver_glGetQueryObjectivARB(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectuivARB", " not available." );
  }

  PFNGLGETQUERYOBJECTUIVARBPROC driver_glGetQueryObjectuivARB = NULL;

  static void REGAL_CALL loader_glGetQueryObjectuivARB(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
  {
    driver_glGetQueryObjectuivARB(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryivARB", " not available." );
  }

  PFNGLGETQUERYIVARBPROC driver_glGetQueryivARB = NULL;

  static void REGAL_CALL loader_glGetQueryivARB(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetQueryivARB(target, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsQueryARB(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsQueryARB", " not available." );
    return GL_FALSE;
  }

  PFNGLISQUERYARBPROC driver_glIsQueryARB = NULL;

  static GLboolean REGAL_CALL loader_glIsQueryARB(Layer *_layer, GLuint id)
  {
    return driver_glIsQueryARB(id);
  }

// GL_ARB_point_parameters

  static void REGAL_CALL missing_glPointParameterfARB(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterfARB", " not available." );
  }

  PFNGLPOINTPARAMETERFARBPROC driver_glPointParameterfARB = NULL;

  static void REGAL_CALL loader_glPointParameterfARB(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glPointParameterfARB(pname, param);
  }

  static void REGAL_CALL missing_glPointParameterfvARB(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterfvARB", " not available." );
  }

  PFNGLPOINTPARAMETERFVARBPROC driver_glPointParameterfvARB = NULL;

  static void REGAL_CALL loader_glPointParameterfvARB(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glPointParameterfvARB(pname, params);
  }

// GL_ARB_program_interface_query

  static void REGAL_CALL missing_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramInterfaceiv", " not available." );
  }

  PFNGLGETPROGRAMINTERFACEIVPROC driver_glGetProgramInterfaceiv = NULL;

  static void REGAL_CALL loader_glGetProgramInterfaceiv(Layer *_layer, GLuint program, GLenum programInterface, GLenum pname, GLint *params)
  {
    driver_glGetProgramInterfaceiv(program, programInterface, pname, params);
  }

  static GLuint REGAL_CALL missing_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(name);
    Warning( "glGetProgramResourceIndex", " not available." );
    return 0;
  }

  PFNGLGETPROGRAMRESOURCEINDEXPROC driver_glGetProgramResourceIndex = NULL;

  static GLuint REGAL_CALL loader_glGetProgramResourceIndex(Layer *_layer, GLuint program, GLenum programInterface, const GLchar *name)
  {
    return driver_glGetProgramResourceIndex(program, programInterface, name);
  }

  static GLint REGAL_CALL missing_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(name);
    Warning( "glGetProgramResourceLocation", " not available." );
    return 0;
  }

  PFNGLGETPROGRAMRESOURCELOCATIONPROC driver_glGetProgramResourceLocation = NULL;

  static GLint REGAL_CALL loader_glGetProgramResourceLocation(Layer *_layer, GLuint program, GLenum programInterface, const GLchar *name)
  {
    return driver_glGetProgramResourceLocation(program, programInterface, name);
  }

  static GLint REGAL_CALL missing_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(name);
    Warning( "glGetProgramResourceLocationIndex", " not available." );
    return 0;
  }

  PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC driver_glGetProgramResourceLocationIndex = NULL;

  static GLint REGAL_CALL loader_glGetProgramResourceLocationIndex(Layer *_layer, GLuint program, GLenum programInterface, const GLchar *name)
  {
    return driver_glGetProgramResourceLocationIndex(program, programInterface, name);
  }

  static void REGAL_CALL missing_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(name);
    Warning( "glGetProgramResourceName", " not available." );
  }

  PFNGLGETPROGRAMRESOURCENAMEPROC driver_glGetProgramResourceName = NULL;

  static void REGAL_CALL loader_glGetProgramResourceName(Layer *_layer, GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    driver_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
  }

  static void REGAL_CALL missing_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(programInterface);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(propCount);
    UNUSED_PARAMETER(props);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramResourceiv", " not available." );
  }

  PFNGLGETPROGRAMRESOURCEIVPROC driver_glGetProgramResourceiv = NULL;

  static void REGAL_CALL loader_glGetProgramResourceiv(Layer *_layer, GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
  {
    driver_glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
  }

// GL_ARB_provoking_vertex

  static void REGAL_CALL missing_glProvokingVertex(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glProvokingVertex", " not available." );
  }

  PFNGLPROVOKINGVERTEXPROC driver_glProvokingVertex = NULL;

  static void REGAL_CALL loader_glProvokingVertex(Layer *_layer, GLenum mode)
  {
    driver_glProvokingVertex(mode);
  }

// GL_ARB_robustness

  static GLenum REGAL_CALL missing_glGetGraphicsResetStatusARB(void)
  {
    Warning( "glGetGraphicsResetStatusARB", " not available." );
    return 0;
  }

  PFNGLGETGRAPHICSRESETSTATUSARBPROC driver_glGetGraphicsResetStatusARB = NULL;

  static GLenum REGAL_CALL loader_glGetGraphicsResetStatusARB(Layer *_layer)
  {
    return driver_glGetGraphicsResetStatusARB();
  }

  static void REGAL_CALL missing_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(table);
    Warning( "glGetnColorTableARB", " not available." );
  }

  PFNGLGETNCOLORTABLEARBPROC driver_glGetnColorTableARB = NULL;

  static void REGAL_CALL loader_glGetnColorTableARB(Layer *_layer, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
  {
    driver_glGetnColorTableARB(target, format, type, bufSize, table);
  }

  static void REGAL_CALL missing_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(img);
    Warning( "glGetnCompressedTexImageARB", " not available." );
  }

  PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC driver_glGetnCompressedTexImageARB = NULL;

  static void REGAL_CALL loader_glGetnCompressedTexImageARB(Layer *_layer, GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
  {
    driver_glGetnCompressedTexImageARB(target, lod, bufSize, img);
  }

  static void REGAL_CALL missing_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(image);
    Warning( "glGetnConvolutionFilterARB", " not available." );
  }

  PFNGLGETNCONVOLUTIONFILTERARBPROC driver_glGetnConvolutionFilterARB = NULL;

  static void REGAL_CALL loader_glGetnConvolutionFilterARB(Layer *_layer, GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
  {
    driver_glGetnConvolutionFilterARB(target, format, type, bufSize, image);
  }

  static void REGAL_CALL missing_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnHistogramARB", " not available." );
  }

  PFNGLGETNHISTOGRAMARBPROC driver_glGetnHistogramARB = NULL;

  static void REGAL_CALL loader_glGetnHistogramARB(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
  {
    driver_glGetnHistogramARB(target, reset, format, type, bufSize, values);
  }

  static void REGAL_CALL missing_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(v);
    Warning( "glGetnMapdvARB", " not available." );
  }

  PFNGLGETNMAPDVARBPROC driver_glGetnMapdvARB = NULL;

  static void REGAL_CALL loader_glGetnMapdvARB(Layer *_layer, GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
  {
    driver_glGetnMapdvARB(target, query, bufSize, v);
  }

  static void REGAL_CALL missing_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(v);
    Warning( "glGetnMapfvARB", " not available." );
  }

  PFNGLGETNMAPFVARBPROC driver_glGetnMapfvARB = NULL;

  static void REGAL_CALL loader_glGetnMapfvARB(Layer *_layer, GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
  {
    driver_glGetnMapfvARB(target, query, bufSize, v);
  }

  static void REGAL_CALL missing_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(query);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(v);
    Warning( "glGetnMapivARB", " not available." );
  }

  PFNGLGETNMAPIVARBPROC driver_glGetnMapivARB = NULL;

  static void REGAL_CALL loader_glGetnMapivARB(Layer *_layer, GLenum target, GLenum query, GLsizei bufSize, GLint *v)
  {
    driver_glGetnMapivARB(target, query, bufSize, v);
  }

  static void REGAL_CALL missing_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnMinmaxARB", " not available." );
  }

  PFNGLGETNMINMAXARBPROC driver_glGetnMinmaxARB = NULL;

  static void REGAL_CALL loader_glGetnMinmaxARB(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
  {
    driver_glGetnMinmaxARB(target, reset, format, type, bufSize, values);
  }

  static void REGAL_CALL missing_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnPixelMapfvARB", " not available." );
  }

  PFNGLGETNPIXELMAPFVARBPROC driver_glGetnPixelMapfvARB = NULL;

  static void REGAL_CALL loader_glGetnPixelMapfvARB(Layer *_layer, GLenum map, GLsizei bufSize, GLfloat *values)
  {
    driver_glGetnPixelMapfvARB(map, bufSize, values);
  }

  static void REGAL_CALL missing_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnPixelMapuivARB", " not available." );
  }

  PFNGLGETNPIXELMAPUIVARBPROC driver_glGetnPixelMapuivARB = NULL;

  static void REGAL_CALL loader_glGetnPixelMapuivARB(Layer *_layer, GLenum map, GLsizei bufSize, GLuint *values)
  {
    driver_glGetnPixelMapuivARB(map, bufSize, values);
  }

  static void REGAL_CALL missing_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
  {
    UNUSED_PARAMETER(map);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(values);
    Warning( "glGetnPixelMapusvARB", " not available." );
  }

  PFNGLGETNPIXELMAPUSVARBPROC driver_glGetnPixelMapusvARB = NULL;

  static void REGAL_CALL loader_glGetnPixelMapusvARB(Layer *_layer, GLenum map, GLsizei bufSize, GLushort *values)
  {
    driver_glGetnPixelMapusvARB(map, bufSize, values);
  }

  static void REGAL_CALL missing_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
  {
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(pattern);
    Warning( "glGetnPolygonStippleARB", " not available." );
  }

  PFNGLGETNPOLYGONSTIPPLEARBPROC driver_glGetnPolygonStippleARB = NULL;

  static void REGAL_CALL loader_glGetnPolygonStippleARB(Layer *_layer, GLsizei bufSize, GLubyte *pattern)
  {
    driver_glGetnPolygonStippleARB(bufSize, pattern);
  }

  static void REGAL_CALL missing_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(rowBufSize);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(columnBufSize);
    UNUSED_PARAMETER(column);
    UNUSED_PARAMETER(span);
    Warning( "glGetnSeparableFilterARB", " not available." );
  }

  PFNGLGETNSEPARABLEFILTERARBPROC driver_glGetnSeparableFilterARB = NULL;

  static void REGAL_CALL loader_glGetnSeparableFilterARB(Layer *_layer, GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
  {
    driver_glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
  }

  static void REGAL_CALL missing_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(img);
    Warning( "glGetnTexImageARB", " not available." );
  }

  PFNGLGETNTEXIMAGEARBPROC driver_glGetnTexImageARB = NULL;

  static void REGAL_CALL loader_glGetnTexImageARB(Layer *_layer, GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
  {
    driver_glGetnTexImageARB(target, level, format, type, bufSize, img);
  }

  static void REGAL_CALL missing_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformdvARB", " not available." );
  }

  PFNGLGETNUNIFORMDVARBPROC driver_glGetnUniformdvARB = NULL;

  static void REGAL_CALL loader_glGetnUniformdvARB(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
  {
    driver_glGetnUniformdvARB(program, location, bufSize, params);
  }

  static void REGAL_CALL missing_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformfvARB", " not available." );
  }

  PFNGLGETNUNIFORMFVARBPROC driver_glGetnUniformfvARB = NULL;

  static void REGAL_CALL loader_glGetnUniformfvARB(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
  {
    driver_glGetnUniformfvARB(program, location, bufSize, params);
  }

  static void REGAL_CALL missing_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformivARB", " not available." );
  }

  PFNGLGETNUNIFORMIVARBPROC driver_glGetnUniformivARB = NULL;

  static void REGAL_CALL loader_glGetnUniformivARB(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLint *params)
  {
    driver_glGetnUniformivARB(program, location, bufSize, params);
  }

  static void REGAL_CALL missing_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformuivARB", " not available." );
  }

  PFNGLGETNUNIFORMUIVARBPROC driver_glGetnUniformuivARB = NULL;

  static void REGAL_CALL loader_glGetnUniformuivARB(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLuint *params)
  {
    driver_glGetnUniformuivARB(program, location, bufSize, params);
  }

  static void REGAL_CALL missing_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(data);
    Warning( "glReadnPixelsARB", " not available." );
  }

  PFNGLREADNPIXELSARBPROC driver_glReadnPixelsARB = NULL;

  static void REGAL_CALL loader_glReadnPixelsARB(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
  {
    driver_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
  }

// GL_ARB_sample_shading

  static void REGAL_CALL missing_glMinSampleShading(GLclampf value)
  {
    UNUSED_PARAMETER(value);
    Warning( "glMinSampleShading", " not available." );
  }

  PFNGLMINSAMPLESHADINGPROC driver_glMinSampleShading = NULL;

  static void REGAL_CALL loader_glMinSampleShading(Layer *_layer, GLclampf value)
  {
    driver_glMinSampleShading(value);
  }

  static void REGAL_CALL missing_glMinSampleShadingARB(GLclampf value)
  {
    UNUSED_PARAMETER(value);
    Warning( "glMinSampleShadingARB", " not available." );
  }

  PFNGLMINSAMPLESHADINGARBPROC driver_glMinSampleShadingARB = NULL;

  static void REGAL_CALL loader_glMinSampleShadingARB(Layer *_layer, GLclampf value)
  {
    driver_glMinSampleShadingARB(value);
  }

// GL_ARB_sampler_objects

  static void REGAL_CALL missing_glBindSampler(GLuint unit, GLuint sampler)
  {
    UNUSED_PARAMETER(unit);
    UNUSED_PARAMETER(sampler);
    Warning( "glBindSampler", " not available." );
  }

  PFNGLBINDSAMPLERPROC driver_glBindSampler = NULL;

  static void REGAL_CALL loader_glBindSampler(Layer *_layer, GLuint unit, GLuint sampler)
  {
    driver_glBindSampler(unit, sampler);
  }

  static void REGAL_CALL missing_glDeleteSamplers(GLsizei count, const GLuint *samplers)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(samplers);
    Warning( "glDeleteSamplers", " not available." );
  }

  PFNGLDELETESAMPLERSPROC driver_glDeleteSamplers = NULL;

  static void REGAL_CALL loader_glDeleteSamplers(Layer *_layer, GLsizei count, const GLuint *samplers)
  {
    driver_glDeleteSamplers(count, samplers);
  }

  static void REGAL_CALL missing_glGenSamplers(GLsizei count, GLuint *samplers)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(samplers);
    Warning( "glGenSamplers", " not available." );
  }

  PFNGLGENSAMPLERSPROC driver_glGenSamplers = NULL;

  static void REGAL_CALL loader_glGenSamplers(Layer *_layer, GLsizei count, GLuint *samplers)
  {
    driver_glGenSamplers(count, samplers);
  }

  static void REGAL_CALL missing_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetSamplerParameterIiv", " not available." );
  }

  PFNGLGETSAMPLERPARAMETERIIVPROC driver_glGetSamplerParameterIiv = NULL;

  static void REGAL_CALL loader_glGetSamplerParameterIiv(Layer *_layer, GLuint sampler, GLenum pname, GLint *params)
  {
    driver_glGetSamplerParameterIiv(sampler, pname, params);
  }

  static void REGAL_CALL missing_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetSamplerParameterIuiv", " not available." );
  }

  PFNGLGETSAMPLERPARAMETERIUIVPROC driver_glGetSamplerParameterIuiv = NULL;

  static void REGAL_CALL loader_glGetSamplerParameterIuiv(Layer *_layer, GLuint sampler, GLenum pname, GLuint *params)
  {
    driver_glGetSamplerParameterIuiv(sampler, pname, params);
  }

  static void REGAL_CALL missing_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetSamplerParameterfv", " not available." );
  }

  PFNGLGETSAMPLERPARAMETERFVPROC driver_glGetSamplerParameterfv = NULL;

  static void REGAL_CALL loader_glGetSamplerParameterfv(Layer *_layer, GLuint sampler, GLenum pname, GLfloat *params)
  {
    driver_glGetSamplerParameterfv(sampler, pname, params);
  }

  static void REGAL_CALL missing_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetSamplerParameteriv", " not available." );
  }

  PFNGLGETSAMPLERPARAMETERIVPROC driver_glGetSamplerParameteriv = NULL;

  static void REGAL_CALL loader_glGetSamplerParameteriv(Layer *_layer, GLuint sampler, GLenum pname, GLint *params)
  {
    driver_glGetSamplerParameteriv(sampler, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsSampler(GLuint sampler)
  {
    UNUSED_PARAMETER(sampler);
    Warning( "glIsSampler", " not available." );
    return GL_FALSE;
  }

  PFNGLISSAMPLERPROC driver_glIsSampler = NULL;

  static GLboolean REGAL_CALL loader_glIsSampler(Layer *_layer, GLuint sampler)
  {
    return driver_glIsSampler(sampler);
  }

  static void REGAL_CALL missing_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSamplerParameterIiv", " not available." );
  }

  PFNGLSAMPLERPARAMETERIIVPROC driver_glSamplerParameterIiv = NULL;

  static void REGAL_CALL loader_glSamplerParameterIiv(Layer *_layer, GLuint sampler, GLenum pname, const GLint *params)
  {
    driver_glSamplerParameterIiv(sampler, pname, params);
  }

  static void REGAL_CALL missing_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSamplerParameterIuiv", " not available." );
  }

  PFNGLSAMPLERPARAMETERIUIVPROC driver_glSamplerParameterIuiv = NULL;

  static void REGAL_CALL loader_glSamplerParameterIuiv(Layer *_layer, GLuint sampler, GLenum pname, const GLuint *params)
  {
    driver_glSamplerParameterIuiv(sampler, pname, params);
  }

  static void REGAL_CALL missing_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glSamplerParameterf", " not available." );
  }

  PFNGLSAMPLERPARAMETERFPROC driver_glSamplerParameterf = NULL;

  static void REGAL_CALL loader_glSamplerParameterf(Layer *_layer, GLuint sampler, GLenum pname, GLfloat param)
  {
    driver_glSamplerParameterf(sampler, pname, param);
  }

  static void REGAL_CALL missing_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSamplerParameterfv", " not available." );
  }

  PFNGLSAMPLERPARAMETERFVPROC driver_glSamplerParameterfv = NULL;

  static void REGAL_CALL loader_glSamplerParameterfv(Layer *_layer, GLuint sampler, GLenum pname, const GLfloat *params)
  {
    driver_glSamplerParameterfv(sampler, pname, params);
  }

  static void REGAL_CALL missing_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glSamplerParameteri", " not available." );
  }

  PFNGLSAMPLERPARAMETERIPROC driver_glSamplerParameteri = NULL;

  static void REGAL_CALL loader_glSamplerParameteri(Layer *_layer, GLuint sampler, GLenum pname, GLint param)
  {
    driver_glSamplerParameteri(sampler, pname, param);
  }

  static void REGAL_CALL missing_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSamplerParameteriv", " not available." );
  }

  PFNGLSAMPLERPARAMETERIVPROC driver_glSamplerParameteriv = NULL;

  static void REGAL_CALL loader_glSamplerParameteriv(Layer *_layer, GLuint sampler, GLenum pname, const GLint *params)
  {
    driver_glSamplerParameteriv(sampler, pname, params);
  }

// GL_ARB_separate_shader_objects

  static void REGAL_CALL missing_glActiveShaderProgram(GLuint pipeline, GLuint program)
  {
    UNUSED_PARAMETER(pipeline);
    UNUSED_PARAMETER(program);
    Warning( "glActiveShaderProgram", " not available." );
  }

  PFNGLACTIVESHADERPROGRAMPROC driver_glActiveShaderProgram = NULL;

  static void REGAL_CALL loader_glActiveShaderProgram(Layer *_layer, GLuint pipeline, GLuint program)
  {
    driver_glActiveShaderProgram(pipeline, program);
  }

  static void REGAL_CALL missing_glBindProgramPipeline(GLuint pipeline)
  {
    UNUSED_PARAMETER(pipeline);
    Warning( "glBindProgramPipeline", " not available." );
  }

  PFNGLBINDPROGRAMPIPELINEPROC driver_glBindProgramPipeline = NULL;

  static void REGAL_CALL loader_glBindProgramPipeline(Layer *_layer, GLuint pipeline)
  {
    driver_glBindProgramPipeline(pipeline);
  }

  static GLuint REGAL_CALL missing_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const *strings)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(strings);
    Warning( "glCreateShaderProgramv", " not available." );
    return 0;
  }

  PFNGLCREATESHADERPROGRAMVPROC driver_glCreateShaderProgramv = NULL;

  static GLuint REGAL_CALL loader_glCreateShaderProgramv(Layer *_layer, GLenum type, GLsizei count, const GLchar * const *strings)
  {
    return driver_glCreateShaderProgramv(type, count, strings);
  }

  static void REGAL_CALL missing_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(pipelines);
    Warning( "glDeleteProgramPipelines", " not available." );
  }

  PFNGLDELETEPROGRAMPIPELINESPROC driver_glDeleteProgramPipelines = NULL;

  static void REGAL_CALL loader_glDeleteProgramPipelines(Layer *_layer, GLsizei n, const GLuint *pipelines)
  {
    driver_glDeleteProgramPipelines(n, pipelines);
  }

  static void REGAL_CALL missing_glGenProgramPipelines(GLsizei n, GLuint *pipelines)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(pipelines);
    Warning( "glGenProgramPipelines", " not available." );
  }

  PFNGLGENPROGRAMPIPELINESPROC driver_glGenProgramPipelines = NULL;

  static void REGAL_CALL loader_glGenProgramPipelines(Layer *_layer, GLsizei n, GLuint *pipelines)
  {
    driver_glGenProgramPipelines(n, pipelines);
  }

  static void REGAL_CALL missing_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    UNUSED_PARAMETER(pipeline);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(infoLog);
    Warning( "glGetProgramPipelineInfoLog", " not available." );
  }

  PFNGLGETPROGRAMPIPELINEINFOLOGPROC driver_glGetProgramPipelineInfoLog = NULL;

  static void REGAL_CALL loader_glGetProgramPipelineInfoLog(Layer *_layer, GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
  {
    driver_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
  }

  static void REGAL_CALL missing_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(pipeline);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramPipelineiv", " not available." );
  }

  PFNGLGETPROGRAMPIPELINEIVPROC driver_glGetProgramPipelineiv = NULL;

  static void REGAL_CALL loader_glGetProgramPipelineiv(Layer *_layer, GLuint pipeline, GLenum pname, GLint *params)
  {
    driver_glGetProgramPipelineiv(pipeline, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsProgramPipeline(GLuint pipeline)
  {
    UNUSED_PARAMETER(pipeline);
    Warning( "glIsProgramPipeline", " not available." );
    return GL_FALSE;
  }

  PFNGLISPROGRAMPIPELINEPROC driver_glIsProgramPipeline = NULL;

  static GLboolean REGAL_CALL loader_glIsProgramPipeline(Layer *_layer, GLuint pipeline)
  {
    return driver_glIsProgramPipeline(pipeline);
  }

  static void REGAL_CALL missing_glProgramUniform1d(GLuint program, GLint location, GLdouble x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1d", " not available." );
  }

  PFNGLPROGRAMUNIFORM1DPROC driver_glProgramUniform1d = NULL;

  static void REGAL_CALL loader_glProgramUniform1d(Layer *_layer, GLuint program, GLint location, GLdouble x)
  {
    driver_glProgramUniform1d(program, location, x);
  }

  static void REGAL_CALL missing_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1dv", " not available." );
  }

  PFNGLPROGRAMUNIFORM1DVPROC driver_glProgramUniform1dv = NULL;

  static void REGAL_CALL loader_glProgramUniform1dv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glProgramUniform1dv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform1f(GLuint program, GLint location, GLfloat x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1f", " not available." );
  }

  PFNGLPROGRAMUNIFORM1FPROC driver_glProgramUniform1f = NULL;

  static void REGAL_CALL loader_glProgramUniform1f(Layer *_layer, GLuint program, GLint location, GLfloat x)
  {
    driver_glProgramUniform1f(program, location, x);
  }

  static void REGAL_CALL missing_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1fv", " not available." );
  }

  PFNGLPROGRAMUNIFORM1FVPROC driver_glProgramUniform1fv = NULL;

  static void REGAL_CALL loader_glProgramUniform1fv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glProgramUniform1fv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform1i(GLuint program, GLint location, GLint x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1i", " not available." );
  }

  PFNGLPROGRAMUNIFORM1IPROC driver_glProgramUniform1i = NULL;

  static void REGAL_CALL loader_glProgramUniform1i(Layer *_layer, GLuint program, GLint location, GLint x)
  {
    driver_glProgramUniform1i(program, location, x);
  }

  static void REGAL_CALL missing_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1iv", " not available." );
  }

  PFNGLPROGRAMUNIFORM1IVPROC driver_glProgramUniform1iv = NULL;

  static void REGAL_CALL loader_glProgramUniform1iv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    driver_glProgramUniform1iv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniform1ui", " not available." );
  }

  PFNGLPROGRAMUNIFORM1UIPROC driver_glProgramUniform1ui = NULL;

  static void REGAL_CALL loader_glProgramUniform1ui(Layer *_layer, GLuint program, GLint location, GLuint v0)
  {
    driver_glProgramUniform1ui(program, location, v0);
  }

  static void REGAL_CALL missing_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1uiv", " not available." );
  }

  PFNGLPROGRAMUNIFORM1UIVPROC driver_glProgramUniform1uiv = NULL;

  static void REGAL_CALL loader_glProgramUniform1uiv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glProgramUniform1uiv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2d", " not available." );
  }

  PFNGLPROGRAMUNIFORM2DPROC driver_glProgramUniform2d = NULL;

  static void REGAL_CALL loader_glProgramUniform2d(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y)
  {
    driver_glProgramUniform2d(program, location, x, y);
  }

  static void REGAL_CALL missing_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2dv", " not available." );
  }

  PFNGLPROGRAMUNIFORM2DVPROC driver_glProgramUniform2dv = NULL;

  static void REGAL_CALL loader_glProgramUniform2dv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glProgramUniform2dv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2f", " not available." );
  }

  PFNGLPROGRAMUNIFORM2FPROC driver_glProgramUniform2f = NULL;

  static void REGAL_CALL loader_glProgramUniform2f(Layer *_layer, GLuint program, GLint location, GLfloat x, GLfloat y)
  {
    driver_glProgramUniform2f(program, location, x, y);
  }

  static void REGAL_CALL missing_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2fv", " not available." );
  }

  PFNGLPROGRAMUNIFORM2FVPROC driver_glProgramUniform2fv = NULL;

  static void REGAL_CALL loader_glProgramUniform2fv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glProgramUniform2fv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2i", " not available." );
  }

  PFNGLPROGRAMUNIFORM2IPROC driver_glProgramUniform2i = NULL;

  static void REGAL_CALL loader_glProgramUniform2i(Layer *_layer, GLuint program, GLint location, GLint x, GLint y)
  {
    driver_glProgramUniform2i(program, location, x, y);
  }

  static void REGAL_CALL missing_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2iv", " not available." );
  }

  PFNGLPROGRAMUNIFORM2IVPROC driver_glProgramUniform2iv = NULL;

  static void REGAL_CALL loader_glProgramUniform2iv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    driver_glProgramUniform2iv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2ui", " not available." );
  }

  PFNGLPROGRAMUNIFORM2UIPROC driver_glProgramUniform2ui = NULL;

  static void REGAL_CALL loader_glProgramUniform2ui(Layer *_layer, GLuint program, GLint location, GLuint x, GLuint y)
  {
    driver_glProgramUniform2ui(program, location, x, y);
  }

  static void REGAL_CALL missing_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2uiv", " not available." );
  }

  PFNGLPROGRAMUNIFORM2UIVPROC driver_glProgramUniform2uiv = NULL;

  static void REGAL_CALL loader_glProgramUniform2uiv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glProgramUniform2uiv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3d", " not available." );
  }

  PFNGLPROGRAMUNIFORM3DPROC driver_glProgramUniform3d = NULL;

  static void REGAL_CALL loader_glProgramUniform3d(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glProgramUniform3d(program, location, x, y, z);
  }

  static void REGAL_CALL missing_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3dv", " not available." );
  }

  PFNGLPROGRAMUNIFORM3DVPROC driver_glProgramUniform3dv = NULL;

  static void REGAL_CALL loader_glProgramUniform3dv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glProgramUniform3dv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3f", " not available." );
  }

  PFNGLPROGRAMUNIFORM3FPROC driver_glProgramUniform3f = NULL;

  static void REGAL_CALL loader_glProgramUniform3f(Layer *_layer, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glProgramUniform3f(program, location, x, y, z);
  }

  static void REGAL_CALL missing_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3fv", " not available." );
  }

  PFNGLPROGRAMUNIFORM3FVPROC driver_glProgramUniform3fv = NULL;

  static void REGAL_CALL loader_glProgramUniform3fv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glProgramUniform3fv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3i", " not available." );
  }

  PFNGLPROGRAMUNIFORM3IPROC driver_glProgramUniform3i = NULL;

  static void REGAL_CALL loader_glProgramUniform3i(Layer *_layer, GLuint program, GLint location, GLint x, GLint y, GLint z)
  {
    driver_glProgramUniform3i(program, location, x, y, z);
  }

  static void REGAL_CALL missing_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3iv", " not available." );
  }

  PFNGLPROGRAMUNIFORM3IVPROC driver_glProgramUniform3iv = NULL;

  static void REGAL_CALL loader_glProgramUniform3iv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    driver_glProgramUniform3iv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3ui", " not available." );
  }

  PFNGLPROGRAMUNIFORM3UIPROC driver_glProgramUniform3ui = NULL;

  static void REGAL_CALL loader_glProgramUniform3ui(Layer *_layer, GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
  {
    driver_glProgramUniform3ui(program, location, x, y, z);
  }

  static void REGAL_CALL missing_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3uiv", " not available." );
  }

  PFNGLPROGRAMUNIFORM3UIVPROC driver_glProgramUniform3uiv = NULL;

  static void REGAL_CALL loader_glProgramUniform3uiv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glProgramUniform3uiv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4d", " not available." );
  }

  PFNGLPROGRAMUNIFORM4DPROC driver_glProgramUniform4d = NULL;

  static void REGAL_CALL loader_glProgramUniform4d(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glProgramUniform4d(program, location, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4dv", " not available." );
  }

  PFNGLPROGRAMUNIFORM4DVPROC driver_glProgramUniform4dv = NULL;

  static void REGAL_CALL loader_glProgramUniform4dv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glProgramUniform4dv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4f", " not available." );
  }

  PFNGLPROGRAMUNIFORM4FPROC driver_glProgramUniform4f = NULL;

  static void REGAL_CALL loader_glProgramUniform4f(Layer *_layer, GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glProgramUniform4f(program, location, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4fv", " not available." );
  }

  PFNGLPROGRAMUNIFORM4FVPROC driver_glProgramUniform4fv = NULL;

  static void REGAL_CALL loader_glProgramUniform4fv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glProgramUniform4fv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4i", " not available." );
  }

  PFNGLPROGRAMUNIFORM4IPROC driver_glProgramUniform4i = NULL;

  static void REGAL_CALL loader_glProgramUniform4i(Layer *_layer, GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glProgramUniform4i(program, location, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4iv", " not available." );
  }

  PFNGLPROGRAMUNIFORM4IVPROC driver_glProgramUniform4iv = NULL;

  static void REGAL_CALL loader_glProgramUniform4iv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    driver_glProgramUniform4iv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4ui", " not available." );
  }

  PFNGLPROGRAMUNIFORM4UIPROC driver_glProgramUniform4ui = NULL;

  static void REGAL_CALL loader_glProgramUniform4ui(Layer *_layer, GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    driver_glProgramUniform4ui(program, location, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4uiv", " not available." );
  }

  PFNGLPROGRAMUNIFORM4UIVPROC driver_glProgramUniform4uiv = NULL;

  static void REGAL_CALL loader_glProgramUniform4uiv(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glProgramUniform4uiv(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2DVPROC driver_glProgramUniformMatrix2dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix2dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2FVPROC driver_glProgramUniformMatrix2fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix2fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x3dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC driver_glProgramUniformMatrix2x3dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2x3dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x3fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC driver_glProgramUniformMatrix2x3fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2x3fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x4dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC driver_glProgramUniformMatrix2x4dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2x4dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x4fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC driver_glProgramUniformMatrix2x4fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2x4fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3DVPROC driver_glProgramUniformMatrix3dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix3dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3FVPROC driver_glProgramUniformMatrix3fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix3fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x2dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC driver_glProgramUniformMatrix3x2dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3x2dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x2fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC driver_glProgramUniformMatrix3x2fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3x2fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x4dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC driver_glProgramUniformMatrix3x4dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3x4dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x4fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC driver_glProgramUniformMatrix3x4fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3x4fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4DVPROC driver_glProgramUniformMatrix4dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix4dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4FVPROC driver_glProgramUniformMatrix4fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix4fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x2dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC driver_glProgramUniformMatrix4x2dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4x2dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x2fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC driver_glProgramUniformMatrix4x2fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4x2fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x3dv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC driver_glProgramUniformMatrix4x3dv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4x3dv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x3fv", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC driver_glProgramUniformMatrix4x3fv = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4x3fv(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
  {
    UNUSED_PARAMETER(pipeline);
    UNUSED_PARAMETER(stages);
    UNUSED_PARAMETER(program);
    Warning( "glUseProgramStages", " not available." );
  }

  PFNGLUSEPROGRAMSTAGESPROC driver_glUseProgramStages = NULL;

  static void REGAL_CALL loader_glUseProgramStages(Layer *_layer, GLuint pipeline, GLbitfield stages, GLuint program)
  {
    driver_glUseProgramStages(pipeline, stages, program);
  }

  static void REGAL_CALL missing_glValidateProgramPipeline(GLuint pipeline)
  {
    UNUSED_PARAMETER(pipeline);
    Warning( "glValidateProgramPipeline", " not available." );
  }

  PFNGLVALIDATEPROGRAMPIPELINEPROC driver_glValidateProgramPipeline = NULL;

  static void REGAL_CALL loader_glValidateProgramPipeline(Layer *_layer, GLuint pipeline)
  {
    driver_glValidateProgramPipeline(pipeline);
  }

// GL_ARB_shader_atomic_counters

  static void REGAL_CALL missing_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(bufferIndex);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetActiveAtomicCounterBufferiv", " not available." );
  }

  PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC driver_glGetActiveAtomicCounterBufferiv = NULL;

  static void REGAL_CALL loader_glGetActiveAtomicCounterBufferiv(Layer *_layer, GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
  {
    driver_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
  }

// GL_ARB_shader_image_load_store

  static void REGAL_CALL missing_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
  {
    UNUSED_PARAMETER(unit);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layered);
    UNUSED_PARAMETER(layer);
    UNUSED_PARAMETER(access);
    UNUSED_PARAMETER(format);
    Warning( "glBindImageTexture", " not available." );
  }

  PFNGLBINDIMAGETEXTUREPROC driver_glBindImageTexture = NULL;

  static void REGAL_CALL loader_glBindImageTexture(Layer *_layer, GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
  {
    driver_glBindImageTexture(unit, texture, level, layered, layer, access, format);
  }

  static void REGAL_CALL missing_glMemoryBarrier(GLbitfield barriers)
  {
    UNUSED_PARAMETER(barriers);
    Warning( "glMemoryBarrier", " not available." );
  }

  PFNGLMEMORYBARRIERPROC driver_glMemoryBarrier = NULL;

  static void REGAL_CALL loader_glMemoryBarrier(Layer *_layer, GLbitfield barriers)
  {
    driver_glMemoryBarrier(barriers);
  }

// GL_ARB_shader_objects

  static void REGAL_CALL missing_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
  {
    UNUSED_PARAMETER(containerObj);
    UNUSED_PARAMETER(obj);
    Warning( "glAttachObjectARB", " not available." );
  }

  PFNGLATTACHOBJECTARBPROC driver_glAttachObjectARB = NULL;

  static void REGAL_CALL loader_glAttachObjectARB(Layer *_layer, GLhandleARB containerObj, GLhandleARB obj)
  {
    driver_glAttachObjectARB(containerObj, obj);
  }

  static void REGAL_CALL missing_glCompileShaderARB(GLhandleARB shaderObj)
  {
    UNUSED_PARAMETER(shaderObj);
    Warning( "glCompileShaderARB", " not available." );
  }

  PFNGLCOMPILESHADERARBPROC driver_glCompileShaderARB = NULL;

  static void REGAL_CALL loader_glCompileShaderARB(Layer *_layer, GLhandleARB shaderObj)
  {
    driver_glCompileShaderARB(shaderObj);
  }

  static GLhandleARB REGAL_CALL missing_glCreateProgramObjectARB(void)
  {
    Warning( "glCreateProgramObjectARB", " not available." );
    return 0;
  }

  PFNGLCREATEPROGRAMOBJECTARBPROC driver_glCreateProgramObjectARB = NULL;

  static GLhandleARB REGAL_CALL loader_glCreateProgramObjectARB(Layer *_layer)
  {
    return driver_glCreateProgramObjectARB();
  }

  static GLhandleARB REGAL_CALL missing_glCreateShaderObjectARB(GLenum shaderType)
  {
    UNUSED_PARAMETER(shaderType);
    Warning( "glCreateShaderObjectARB", " not available." );
    return 0;
  }

  PFNGLCREATESHADEROBJECTARBPROC driver_glCreateShaderObjectARB = NULL;

  static GLhandleARB REGAL_CALL loader_glCreateShaderObjectARB(Layer *_layer, GLenum shaderType)
  {
    return driver_glCreateShaderObjectARB(shaderType);
  }

  static void REGAL_CALL missing_glDeleteObjectARB(GLhandleARB obj)
  {
    UNUSED_PARAMETER(obj);
    Warning( "glDeleteObjectARB", " not available." );
  }

  PFNGLDELETEOBJECTARBPROC driver_glDeleteObjectARB = NULL;

  static void REGAL_CALL loader_glDeleteObjectARB(Layer *_layer, GLhandleARB obj)
  {
    driver_glDeleteObjectARB(obj);
  }

  static void REGAL_CALL missing_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
  {
    UNUSED_PARAMETER(containerObj);
    UNUSED_PARAMETER(attachedObj);
    Warning( "glDetachObjectARB", " not available." );
  }

  PFNGLDETACHOBJECTARBPROC driver_glDetachObjectARB = NULL;

  static void REGAL_CALL loader_glDetachObjectARB(Layer *_layer, GLhandleARB containerObj, GLhandleARB attachedObj)
  {
    driver_glDetachObjectARB(containerObj, attachedObj);
  }

  static void REGAL_CALL missing_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(maxLength);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveUniformARB", " not available." );
  }

  PFNGLGETACTIVEUNIFORMARBPROC driver_glGetActiveUniformARB = NULL;

  static void REGAL_CALL loader_glGetActiveUniformARB(Layer *_layer, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
  {
    driver_glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
  }

  static void REGAL_CALL missing_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
  {
    UNUSED_PARAMETER(containerObj);
    UNUSED_PARAMETER(maxCount);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(obj);
    Warning( "glGetAttachedObjectsARB", " not available." );
  }

  PFNGLGETATTACHEDOBJECTSARBPROC driver_glGetAttachedObjectsARB = NULL;

  static void REGAL_CALL loader_glGetAttachedObjectsARB(Layer *_layer, GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
  {
    driver_glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
  }

  static GLhandleARB REGAL_CALL missing_glGetHandleARB(GLenum pname)
  {
    UNUSED_PARAMETER(pname);
    Warning( "glGetHandleARB", " not available." );
    return 0;
  }

  PFNGLGETHANDLEARBPROC driver_glGetHandleARB = NULL;

  static GLhandleARB REGAL_CALL loader_glGetHandleARB(Layer *_layer, GLenum pname)
  {
    return driver_glGetHandleARB(pname);
  }

  static void REGAL_CALL missing_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
  {
    UNUSED_PARAMETER(obj);
    UNUSED_PARAMETER(maxLength);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(infoLog);
    Warning( "glGetInfoLogARB", " not available." );
  }

  PFNGLGETINFOLOGARBPROC driver_glGetInfoLogARB = NULL;

  static void REGAL_CALL loader_glGetInfoLogARB(Layer *_layer, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
  {
    driver_glGetInfoLogARB(obj, maxLength, length, infoLog);
  }

  static void REGAL_CALL missing_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(obj);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectParameterfvARB", " not available." );
  }

  PFNGLGETOBJECTPARAMETERFVARBPROC driver_glGetObjectParameterfvARB = NULL;

  static void REGAL_CALL loader_glGetObjectParameterfvARB(Layer *_layer, GLhandleARB obj, GLenum pname, GLfloat *params)
  {
    driver_glGetObjectParameterfvARB(obj, pname, params);
  }

  static void REGAL_CALL missing_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(obj);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectParameterivARB", " not available." );
  }

  PFNGLGETOBJECTPARAMETERIVARBPROC driver_glGetObjectParameterivARB = NULL;

  static void REGAL_CALL loader_glGetObjectParameterivARB(Layer *_layer, GLhandleARB obj, GLenum pname, GLint *params)
  {
    driver_glGetObjectParameterivARB(obj, pname, params);
  }

  static void REGAL_CALL missing_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
  {
    UNUSED_PARAMETER(obj);
    UNUSED_PARAMETER(maxLength);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(source);
    Warning( "glGetShaderSourceARB", " not available." );
  }

  PFNGLGETSHADERSOURCEARBPROC driver_glGetShaderSourceARB = NULL;

  static void REGAL_CALL loader_glGetShaderSourceARB(Layer *_layer, GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
  {
    driver_glGetShaderSourceARB(obj, maxLength, length, source);
  }

  static GLint REGAL_CALL missing_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(name);
    Warning( "glGetUniformLocationARB", " not available." );
    return 0;
  }

  PFNGLGETUNIFORMLOCATIONARBPROC driver_glGetUniformLocationARB = NULL;

  static GLint REGAL_CALL loader_glGetUniformLocationARB(Layer *_layer, GLhandleARB programObj, const GLcharARB *name)
  {
    return driver_glGetUniformLocationARB(programObj, name);
  }

  static void REGAL_CALL missing_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformfvARB", " not available." );
  }

  PFNGLGETUNIFORMFVARBPROC driver_glGetUniformfvARB = NULL;

  static void REGAL_CALL loader_glGetUniformfvARB(Layer *_layer, GLhandleARB programObj, GLint location, GLfloat *params)
  {
    driver_glGetUniformfvARB(programObj, location, params);
  }

  static void REGAL_CALL missing_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformivARB", " not available." );
  }

  PFNGLGETUNIFORMIVARBPROC driver_glGetUniformivARB = NULL;

  static void REGAL_CALL loader_glGetUniformivARB(Layer *_layer, GLhandleARB programObj, GLint location, GLint *params)
  {
    driver_glGetUniformivARB(programObj, location, params);
  }

  static void REGAL_CALL missing_glLinkProgramARB(GLhandleARB programObj)
  {
    UNUSED_PARAMETER(programObj);
    Warning( "glLinkProgramARB", " not available." );
  }

  PFNGLLINKPROGRAMARBPROC driver_glLinkProgramARB = NULL;

  static void REGAL_CALL loader_glLinkProgramARB(Layer *_layer, GLhandleARB programObj)
  {
    driver_glLinkProgramARB(programObj);
  }

  static void REGAL_CALL missing_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
  {
    UNUSED_PARAMETER(shaderObj);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(string);
    UNUSED_PARAMETER(length);
    Warning( "glShaderSourceARB", " not available." );
  }

  PFNGLSHADERSOURCEARBPROC driver_glShaderSourceARB = NULL;

  static void REGAL_CALL loader_glShaderSourceARB(Layer *_layer, GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
  {
    driver_glShaderSourceARB(shaderObj, count, string, length);
  }

  static void REGAL_CALL missing_glUniform1fARB(GLint location, GLfloat v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1fARB", " not available." );
  }

  PFNGLUNIFORM1FARBPROC driver_glUniform1fARB = NULL;

  static void REGAL_CALL loader_glUniform1fARB(Layer *_layer, GLint location, GLfloat v0)
  {
    driver_glUniform1fARB(location, v0);
  }

  static void REGAL_CALL missing_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1fvARB", " not available." );
  }

  PFNGLUNIFORM1FVARBPROC driver_glUniform1fvARB = NULL;

  static void REGAL_CALL loader_glUniform1fvARB(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glUniform1fvARB(location, count, value);
  }

  static void REGAL_CALL missing_glUniform1iARB(GLint location, GLint v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1iARB", " not available." );
  }

  PFNGLUNIFORM1IARBPROC driver_glUniform1iARB = NULL;

  static void REGAL_CALL loader_glUniform1iARB(Layer *_layer, GLint location, GLint v0)
  {
    driver_glUniform1iARB(location, v0);
  }

  static void REGAL_CALL missing_glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1ivARB", " not available." );
  }

  PFNGLUNIFORM1IVARBPROC driver_glUniform1ivARB = NULL;

  static void REGAL_CALL loader_glUniform1ivARB(Layer *_layer, GLint location, GLsizei count, const GLint *value)
  {
    driver_glUniform1ivARB(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2fARB", " not available." );
  }

  PFNGLUNIFORM2FARBPROC driver_glUniform2fARB = NULL;

  static void REGAL_CALL loader_glUniform2fARB(Layer *_layer, GLint location, GLfloat v0, GLfloat v1)
  {
    driver_glUniform2fARB(location, v0, v1);
  }

  static void REGAL_CALL missing_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2fvARB", " not available." );
  }

  PFNGLUNIFORM2FVARBPROC driver_glUniform2fvARB = NULL;

  static void REGAL_CALL loader_glUniform2fvARB(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glUniform2fvARB(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2iARB(GLint location, GLint v0, GLint v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2iARB", " not available." );
  }

  PFNGLUNIFORM2IARBPROC driver_glUniform2iARB = NULL;

  static void REGAL_CALL loader_glUniform2iARB(Layer *_layer, GLint location, GLint v0, GLint v1)
  {
    driver_glUniform2iARB(location, v0, v1);
  }

  static void REGAL_CALL missing_glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2ivARB", " not available." );
  }

  PFNGLUNIFORM2IVARBPROC driver_glUniform2ivARB = NULL;

  static void REGAL_CALL loader_glUniform2ivARB(Layer *_layer, GLint location, GLsizei count, const GLint *value)
  {
    driver_glUniform2ivARB(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3fARB", " not available." );
  }

  PFNGLUNIFORM3FARBPROC driver_glUniform3fARB = NULL;

  static void REGAL_CALL loader_glUniform3fARB(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    driver_glUniform3fARB(location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3fvARB", " not available." );
  }

  PFNGLUNIFORM3FVARBPROC driver_glUniform3fvARB = NULL;

  static void REGAL_CALL loader_glUniform3fvARB(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glUniform3fvARB(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3iARB", " not available." );
  }

  PFNGLUNIFORM3IARBPROC driver_glUniform3iARB = NULL;

  static void REGAL_CALL loader_glUniform3iARB(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2)
  {
    driver_glUniform3iARB(location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3ivARB", " not available." );
  }

  PFNGLUNIFORM3IVARBPROC driver_glUniform3ivARB = NULL;

  static void REGAL_CALL loader_glUniform3ivARB(Layer *_layer, GLint location, GLsizei count, const GLint *value)
  {
    driver_glUniform3ivARB(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4fARB", " not available." );
  }

  PFNGLUNIFORM4FARBPROC driver_glUniform4fARB = NULL;

  static void REGAL_CALL loader_glUniform4fARB(Layer *_layer, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    driver_glUniform4fARB(location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4fvARB", " not available." );
  }

  PFNGLUNIFORM4FVARBPROC driver_glUniform4fvARB = NULL;

  static void REGAL_CALL loader_glUniform4fvARB(Layer *_layer, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glUniform4fvARB(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4iARB", " not available." );
  }

  PFNGLUNIFORM4IARBPROC driver_glUniform4iARB = NULL;

  static void REGAL_CALL loader_glUniform4iARB(Layer *_layer, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    driver_glUniform4iARB(location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4ivARB", " not available." );
  }

  PFNGLUNIFORM4IVARBPROC driver_glUniform4ivARB = NULL;

  static void REGAL_CALL loader_glUniform4ivARB(Layer *_layer, GLint location, GLsizei count, const GLint *value)
  {
    driver_glUniform4ivARB(location, count, value);
  }

  static void REGAL_CALL missing_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2fvARB", " not available." );
  }

  PFNGLUNIFORMMATRIX2FVARBPROC driver_glUniformMatrix2fvARB = NULL;

  static void REGAL_CALL loader_glUniformMatrix2fvARB(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix2fvARB(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3fvARB", " not available." );
  }

  PFNGLUNIFORMMATRIX3FVARBPROC driver_glUniformMatrix3fvARB = NULL;

  static void REGAL_CALL loader_glUniformMatrix3fvARB(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix3fvARB(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4fvARB", " not available." );
  }

  PFNGLUNIFORMMATRIX4FVARBPROC driver_glUniformMatrix4fvARB = NULL;

  static void REGAL_CALL loader_glUniformMatrix4fvARB(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix4fvARB(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUseProgramObjectARB(GLhandleARB programObj)
  {
    UNUSED_PARAMETER(programObj);
    Warning( "glUseProgramObjectARB", " not available." );
  }

  PFNGLUSEPROGRAMOBJECTARBPROC driver_glUseProgramObjectARB = NULL;

  static void REGAL_CALL loader_glUseProgramObjectARB(Layer *_layer, GLhandleARB programObj)
  {
    driver_glUseProgramObjectARB(programObj);
  }

  static void REGAL_CALL missing_glValidateProgramARB(GLhandleARB programObj)
  {
    UNUSED_PARAMETER(programObj);
    Warning( "glValidateProgramARB", " not available." );
  }

  PFNGLVALIDATEPROGRAMARBPROC driver_glValidateProgramARB = NULL;

  static void REGAL_CALL loader_glValidateProgramARB(Layer *_layer, GLhandleARB programObj)
  {
    driver_glValidateProgramARB(programObj);
  }

// GL_ARB_shader_storage_buffer_object

  static void REGAL_CALL missing_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(storageBlockIndex);
    UNUSED_PARAMETER(storageBlockBinding);
    Warning( "glShaderStorageBlockBinding", " not available." );
  }

  PFNGLSHADERSTORAGEBLOCKBINDINGPROC driver_glShaderStorageBlockBinding = NULL;

  static void REGAL_CALL loader_glShaderStorageBlockBinding(Layer *_layer, GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
  {
    driver_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
  }

// GL_ARB_shader_subroutine

  static void REGAL_CALL missing_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveSubroutineName", " not available." );
  }

  PFNGLGETACTIVESUBROUTINENAMEPROC driver_glGetActiveSubroutineName = NULL;

  static void REGAL_CALL loader_glGetActiveSubroutineName(Layer *_layer, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    driver_glGetActiveSubroutineName(program, shaderType, index, bufSize, length, name);
  }

  static void REGAL_CALL missing_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveSubroutineUniformName", " not available." );
  }

  PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC driver_glGetActiveSubroutineUniformName = NULL;

  static void REGAL_CALL loader_glGetActiveSubroutineUniformName(Layer *_layer, GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
  {
    driver_glGetActiveSubroutineUniformName(program, shaderType, index, bufSize, length, name);
  }

  static void REGAL_CALL missing_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(values);
    Warning( "glGetActiveSubroutineUniformiv", " not available." );
  }

  PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC driver_glGetActiveSubroutineUniformiv = NULL;

  static void REGAL_CALL loader_glGetActiveSubroutineUniformiv(Layer *_layer, GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
  {
    driver_glGetActiveSubroutineUniformiv(program, shaderType, index, pname, values);
  }

  static void REGAL_CALL missing_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(values);
    Warning( "glGetProgramStageiv", " not available." );
  }

  PFNGLGETPROGRAMSTAGEIVPROC driver_glGetProgramStageiv = NULL;

  static void REGAL_CALL loader_glGetProgramStageiv(Layer *_layer, GLuint program, GLenum shaderType, GLenum pname, GLint *values)
  {
    driver_glGetProgramStageiv(program, shaderType, pname, values);
  }

  static void REGAL_CALL missing_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramSubroutineParameteruivNV", " not available." );
  }

  PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC driver_glGetProgramSubroutineParameteruivNV = NULL;

  static void REGAL_CALL loader_glGetProgramSubroutineParameteruivNV(Layer *_layer, GLenum target, GLuint index, GLuint *params)
  {
    driver_glGetProgramSubroutineParameteruivNV(target, index, params);
  }

  static GLuint REGAL_CALL missing_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(name);
    Warning( "glGetSubroutineIndex", " not available." );
    return 0;
  }

  PFNGLGETSUBROUTINEINDEXPROC driver_glGetSubroutineIndex = NULL;

  static GLuint REGAL_CALL loader_glGetSubroutineIndex(Layer *_layer, GLuint program, GLenum shaderType, const GLchar *name)
  {
    return driver_glGetSubroutineIndex(program, shaderType, name);
  }

  static GLint REGAL_CALL missing_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(name);
    Warning( "glGetSubroutineUniformLocation", " not available." );
    return 0;
  }

  PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC driver_glGetSubroutineUniformLocation = NULL;

  static GLint REGAL_CALL loader_glGetSubroutineUniformLocation(Layer *_layer, GLuint program, GLenum shaderType, const GLchar *name)
  {
    return driver_glGetSubroutineUniformLocation(program, shaderType, name);
  }

  static void REGAL_CALL missing_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
  {
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformSubroutineuiv", " not available." );
  }

  PFNGLGETUNIFORMSUBROUTINEUIVPROC driver_glGetUniformSubroutineuiv = NULL;

  static void REGAL_CALL loader_glGetUniformSubroutineuiv(Layer *_layer, GLenum shaderType, GLint location, GLuint *params)
  {
    driver_glGetUniformSubroutineuiv(shaderType, location, params);
  }

  static void REGAL_CALL missing_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramSubroutineParametersuivNV", " not available." );
  }

  PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC driver_glProgramSubroutineParametersuivNV = NULL;

  static void REGAL_CALL loader_glProgramSubroutineParametersuivNV(Layer *_layer, GLenum target, GLsizei count, const GLuint *params)
  {
    driver_glProgramSubroutineParametersuivNV(target, count, params);
  }

  static void REGAL_CALL missing_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
  {
    UNUSED_PARAMETER(shaderType);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(indices);
    Warning( "glUniformSubroutinesuiv", " not available." );
  }

  PFNGLUNIFORMSUBROUTINESUIVPROC driver_glUniformSubroutinesuiv = NULL;

  static void REGAL_CALL loader_glUniformSubroutinesuiv(Layer *_layer, GLenum shaderType, GLsizei count, const GLuint *indices)
  {
    driver_glUniformSubroutinesuiv(shaderType, count, indices);
  }

// GL_ARB_shading_language_include

  static void REGAL_CALL missing_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
  {
    UNUSED_PARAMETER(shader);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(length);
    Warning( "glCompileShaderIncludeARB", " not available." );
  }

  PFNGLCOMPILESHADERINCLUDEARBPROC driver_glCompileShaderIncludeARB = NULL;

  static void REGAL_CALL loader_glCompileShaderIncludeARB(Layer *_layer, GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
  {
    driver_glCompileShaderIncludeARB(shader, count, path, length);
  }

  static void REGAL_CALL missing_glDeleteNamedStringARB(GLint namelen, const GLchar *name)
  {
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    Warning( "glDeleteNamedStringARB", " not available." );
  }

  PFNGLDELETENAMEDSTRINGARBPROC driver_glDeleteNamedStringARB = NULL;

  static void REGAL_CALL loader_glDeleteNamedStringARB(Layer *_layer, GLint namelen, const GLchar *name)
  {
    driver_glDeleteNamedStringARB(namelen, name);
  }

  static void REGAL_CALL missing_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
  {
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(stringlen);
    UNUSED_PARAMETER(string);
    Warning( "glGetNamedStringARB", " not available." );
  }

  PFNGLGETNAMEDSTRINGARBPROC driver_glGetNamedStringARB = NULL;

  static void REGAL_CALL loader_glGetNamedStringARB(Layer *_layer, GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
  {
    driver_glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
  }

  static void REGAL_CALL missing_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedStringivARB", " not available." );
  }

  PFNGLGETNAMEDSTRINGIVARBPROC driver_glGetNamedStringivARB = NULL;

  static void REGAL_CALL loader_glGetNamedStringivARB(Layer *_layer, GLint namelen, const GLchar *name, GLenum pname, GLint *params)
  {
    driver_glGetNamedStringivARB(namelen, name, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsNamedStringARB(GLint namelen, const GLchar *name)
  {
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    Warning( "glIsNamedStringARB", " not available." );
    return GL_FALSE;
  }

  PFNGLISNAMEDSTRINGARBPROC driver_glIsNamedStringARB = NULL;

  static GLboolean REGAL_CALL loader_glIsNamedStringARB(Layer *_layer, GLint namelen, const GLchar *name)
  {
    return driver_glIsNamedStringARB(namelen, name);
  }

  static void REGAL_CALL missing_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(namelen);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(stringlen);
    UNUSED_PARAMETER(string);
    Warning( "glNamedStringARB", " not available." );
  }

  PFNGLNAMEDSTRINGARBPROC driver_glNamedStringARB = NULL;

  static void REGAL_CALL loader_glNamedStringARB(Layer *_layer, GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
  {
    driver_glNamedStringARB(type, namelen, name, stringlen, string);
  }

// GL_ARB_sparse_texture

  static void REGAL_CALL missing_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(commit);
    Warning( "glTexPageCommitmentARB", " not available." );
  }

  PFNGLTEXPAGECOMMITMENTARBPROC driver_glTexPageCommitmentARB = NULL;

  static void REGAL_CALL loader_glTexPageCommitmentARB(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
  {
    driver_glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }

  static void REGAL_CALL missing_glTexturePageCommitmentEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(commit);
    Warning( "glTexturePageCommitmentEXT", " not available." );
  }

  PFNGLTEXTUREPAGECOMMITMENTEXTPROC driver_glTexturePageCommitmentEXT = NULL;

  static void REGAL_CALL loader_glTexturePageCommitmentEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
  {
    driver_glTexturePageCommitmentEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }

// GL_ARB_sync

  static GLenum REGAL_CALL missing_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "glClientWaitSync", " not available." );
    return 0;
  }

  PFNGLCLIENTWAITSYNCPROC driver_glClientWaitSync = NULL;

  static GLenum REGAL_CALL loader_glClientWaitSync(Layer *_layer, GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    return driver_glClientWaitSync(sync, flags, timeout);
  }

  static void REGAL_CALL missing_glDeleteSync(GLsync sync)
  {
    UNUSED_PARAMETER(sync);
    Warning( "glDeleteSync", " not available." );
  }

  PFNGLDELETESYNCPROC driver_glDeleteSync = NULL;

  static void REGAL_CALL loader_glDeleteSync(Layer *_layer, GLsync sync)
  {
    driver_glDeleteSync(sync);
  }

  static GLsync REGAL_CALL missing_glFenceSync(GLenum condition, GLbitfield flags)
  {
    UNUSED_PARAMETER(condition);
    UNUSED_PARAMETER(flags);
    Warning( "glFenceSync", " not available." );
    return NULL;
  }

  PFNGLFENCESYNCPROC driver_glFenceSync = NULL;

  static GLsync REGAL_CALL loader_glFenceSync(Layer *_layer, GLenum condition, GLbitfield flags)
  {
    return driver_glFenceSync(condition, flags);
  }

  static void REGAL_CALL missing_glGetInteger64v(GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetInteger64v", " not available." );
  }

  PFNGLGETINTEGER64VPROC driver_glGetInteger64v = NULL;

  static void REGAL_CALL loader_glGetInteger64v(Layer *_layer, GLenum pname, GLint64 *params)
  {
    driver_glGetInteger64v(pname, params);
  }

  static void REGAL_CALL missing_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(values);
    Warning( "glGetSynciv", " not available." );
  }

  PFNGLGETSYNCIVPROC driver_glGetSynciv = NULL;

  static void REGAL_CALL loader_glGetSynciv(Layer *_layer, GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    driver_glGetSynciv(sync, pname, bufSize, length, values);
  }

  static GLboolean REGAL_CALL missing_glIsSync(GLsync sync)
  {
    UNUSED_PARAMETER(sync);
    Warning( "glIsSync", " not available." );
    return GL_FALSE;
  }

  PFNGLISSYNCPROC driver_glIsSync = NULL;

  static GLboolean REGAL_CALL loader_glIsSync(Layer *_layer, GLsync sync)
  {
    return driver_glIsSync(sync);
  }

  static void REGAL_CALL missing_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    UNUSED_PARAMETER(sync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "glWaitSync", " not available." );
  }

  PFNGLWAITSYNCPROC driver_glWaitSync = NULL;

  static void REGAL_CALL loader_glWaitSync(Layer *_layer, GLsync sync, GLbitfield flags, GLuint64 timeout)
  {
    driver_glWaitSync(sync, flags, timeout);
  }

// GL_ARB_tessellation_shader

  static void REGAL_CALL missing_glPatchParameterfv(GLenum pname, const GLfloat *values)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(values);
    Warning( "glPatchParameterfv", " not available." );
  }

  PFNGLPATCHPARAMETERFVPROC driver_glPatchParameterfv = NULL;

  static void REGAL_CALL loader_glPatchParameterfv(Layer *_layer, GLenum pname, const GLfloat *values)
  {
    driver_glPatchParameterfv(pname, values);
  }

  static void REGAL_CALL missing_glPatchParameteri(GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPatchParameteri", " not available." );
  }

  PFNGLPATCHPARAMETERIPROC driver_glPatchParameteri = NULL;

  static void REGAL_CALL loader_glPatchParameteri(Layer *_layer, GLenum pname, GLint value)
  {
    driver_glPatchParameteri(pname, value);
  }

// GL_ARB_texture_buffer_object

  static void REGAL_CALL missing_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glTexBufferARB", " not available." );
  }

  PFNGLTEXBUFFERARBPROC driver_glTexBufferARB = NULL;

  static void REGAL_CALL loader_glTexBufferARB(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer)
  {
    driver_glTexBufferARB(target, internalformat, buffer);
  }

// GL_ARB_texture_buffer_range

  static void REGAL_CALL missing_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glTexBufferRange", " not available." );
  }

  PFNGLTEXBUFFERRANGEPROC driver_glTexBufferRange = NULL;

  static void REGAL_CALL loader_glTexBufferRange(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    driver_glTexBufferRange(target, internalformat, buffer, offset, size);
  }

  static void REGAL_CALL missing_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glTextureBufferRangeEXT", " not available." );
  }

  PFNGLTEXTUREBUFFERRANGEEXTPROC driver_glTextureBufferRangeEXT = NULL;

  static void REGAL_CALL loader_glTextureBufferRangeEXT(Layer *_layer, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    driver_glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
  }

// GL_ARB_texture_compression

  static void REGAL_CALL missing_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage1DARB", " not available." );
  }

  PFNGLCOMPRESSEDTEXIMAGE1DARBPROC driver_glCompressedTexImage1DARB = NULL;

  static void REGAL_CALL loader_glCompressedTexImage1DARB(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage2DARB", " not available." );
  }

  PFNGLCOMPRESSEDTEXIMAGE2DARBPROC driver_glCompressedTexImage2DARB = NULL;

  static void REGAL_CALL loader_glCompressedTexImage2DARB(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage3DARB", " not available." );
  }

  PFNGLCOMPRESSEDTEXIMAGE3DARBPROC driver_glCompressedTexImage3DARB = NULL;

  static void REGAL_CALL loader_glCompressedTexImage3DARB(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage1DARB", " not available." );
  }

  PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC driver_glCompressedTexSubImage1DARB = NULL;

  static void REGAL_CALL loader_glCompressedTexSubImage1DARB(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage2DARB", " not available." );
  }

  PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC driver_glCompressedTexSubImage2DARB = NULL;

  static void REGAL_CALL loader_glCompressedTexSubImage2DARB(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage3DARB", " not available." );
  }

  PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC driver_glCompressedTexSubImage3DARB = NULL;

  static void REGAL_CALL loader_glCompressedTexSubImage3DARB(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }

  static void REGAL_CALL missing_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(img);
    Warning( "glGetCompressedTexImageARB", " not available." );
  }

  PFNGLGETCOMPRESSEDTEXIMAGEARBPROC driver_glGetCompressedTexImageARB = NULL;

  static void REGAL_CALL loader_glGetCompressedTexImageARB(Layer *_layer, GLenum target, GLint lod, GLvoid *img)
  {
    driver_glGetCompressedTexImageARB(target, lod, img);
  }

// GL_ARB_texture_multisample

  static void REGAL_CALL missing_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(val);
    Warning( "glGetMultisamplefv", " not available." );
  }

  PFNGLGETMULTISAMPLEFVPROC driver_glGetMultisamplefv = NULL;

  static void REGAL_CALL loader_glGetMultisamplefv(Layer *_layer, GLenum pname, GLuint index, GLfloat *val)
  {
    driver_glGetMultisamplefv(pname, index, val);
  }

  static void REGAL_CALL missing_glSampleMaski(GLuint index, GLbitfield mask)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(mask);
    Warning( "glSampleMaski", " not available." );
  }

  PFNGLSAMPLEMASKIPROC driver_glSampleMaski = NULL;

  static void REGAL_CALL loader_glSampleMaski(Layer *_layer, GLuint index, GLbitfield mask)
  {
    driver_glSampleMaski(index, mask);
  }

  static void REGAL_CALL missing_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTexImage2DMultisample", " not available." );
  }

  PFNGLTEXIMAGE2DMULTISAMPLEPROC driver_glTexImage2DMultisample = NULL;

  static void REGAL_CALL loader_glTexImage2DMultisample(Layer *_layer, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    driver_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  }

  static void REGAL_CALL missing_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTexImage3DMultisample", " not available." );
  }

  PFNGLTEXIMAGE3DMULTISAMPLEPROC driver_glTexImage3DMultisample = NULL;

  static void REGAL_CALL loader_glTexImage3DMultisample(Layer *_layer, GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    driver_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }

// GL_ARB_texture_storage

  static void REGAL_CALL missing_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    Warning( "glTexStorage1D", " not available." );
  }

  PFNGLTEXSTORAGE1DPROC driver_glTexStorage1D = NULL;

  static void REGAL_CALL loader_glTexStorage1D(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    driver_glTexStorage1D(target, levels, internalformat, width);
  }

  static void REGAL_CALL missing_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glTexStorage2D", " not available." );
  }

  PFNGLTEXSTORAGE2DPROC driver_glTexStorage2D = NULL;

  static void REGAL_CALL loader_glTexStorage2D(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glTexStorage2D(target, levels, internalformat, width, height);
  }

  static void REGAL_CALL missing_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glTexStorage3D", " not available." );
  }

  PFNGLTEXSTORAGE3DPROC driver_glTexStorage3D = NULL;

  static void REGAL_CALL loader_glTexStorage3D(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    driver_glTexStorage3D(target, levels, internalformat, width, height, depth);
  }

  static void REGAL_CALL missing_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    Warning( "glTextureStorage1DEXT", " not available." );
  }

  PFNGLTEXTURESTORAGE1DEXTPROC driver_glTextureStorage1DEXT = NULL;

  static void REGAL_CALL loader_glTextureStorage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    driver_glTextureStorage1DEXT(texture, target, levels, internalformat, width);
  }

  static void REGAL_CALL missing_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glTextureStorage2DEXT", " not available." );
  }

  PFNGLTEXTURESTORAGE2DEXTPROC driver_glTextureStorage2DEXT = NULL;

  static void REGAL_CALL loader_glTextureStorage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
  }

  static void REGAL_CALL missing_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glTextureStorage3DEXT", " not available." );
  }

  PFNGLTEXTURESTORAGE3DEXTPROC driver_glTextureStorage3DEXT = NULL;

  static void REGAL_CALL loader_glTextureStorage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    driver_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
  }

// GL_ARB_texture_storage_multisample

  static void REGAL_CALL missing_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTexStorage2DMultisample", " not available." );
  }

  PFNGLTEXSTORAGE2DMULTISAMPLEPROC driver_glTexStorage2DMultisample = NULL;

  static void REGAL_CALL loader_glTexStorage2DMultisample(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    driver_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  }

  static void REGAL_CALL missing_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTexStorage3DMultisample", " not available." );
  }

  PFNGLTEXSTORAGE3DMULTISAMPLEPROC driver_glTexStorage3DMultisample = NULL;

  static void REGAL_CALL loader_glTexStorage3DMultisample(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    driver_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }

  static void REGAL_CALL missing_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTextureStorage2DMultisampleEXT", " not available." );
  }

  PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC driver_glTextureStorage2DMultisampleEXT = NULL;

  static void REGAL_CALL loader_glTextureStorage2DMultisampleEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
  {
    driver_glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
  }

  static void REGAL_CALL missing_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedsamplelocations);
    Warning( "glTextureStorage3DMultisampleEXT", " not available." );
  }

  PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC driver_glTextureStorage3DMultisampleEXT = NULL;

  static void REGAL_CALL loader_glTextureStorage3DMultisampleEXT(Layer *_layer, GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
  {
    driver_glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }

// GL_ARB_texture_view

  static void REGAL_CALL missing_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(origtexture);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(minlevel);
    UNUSED_PARAMETER(numlevels);
    UNUSED_PARAMETER(minlayer);
    UNUSED_PARAMETER(numlayers);
    Warning( "glTextureView", " not available." );
  }

  PFNGLTEXTUREVIEWPROC driver_glTextureView = NULL;

  static void REGAL_CALL loader_glTextureView(Layer *_layer, GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
  {
    driver_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }

// GL_ARB_timer_query

  static void REGAL_CALL missing_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjecti64v", " not available." );
  }

  PFNGLGETQUERYOBJECTI64VPROC driver_glGetQueryObjecti64v = NULL;

  static void REGAL_CALL loader_glGetQueryObjecti64v(Layer *_layer, GLuint id, GLenum pname, GLint64 *params)
  {
    driver_glGetQueryObjecti64v(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectui64v", " not available." );
  }

  PFNGLGETQUERYOBJECTUI64VPROC driver_glGetQueryObjectui64v = NULL;

  static void REGAL_CALL loader_glGetQueryObjectui64v(Layer *_layer, GLuint id, GLenum pname, GLuint64 *params)
  {
    driver_glGetQueryObjectui64v(id, pname, params);
  }

  static void REGAL_CALL missing_glQueryCounter(GLuint id, GLenum target)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(target);
    Warning( "glQueryCounter", " not available." );
  }

  PFNGLQUERYCOUNTERPROC driver_glQueryCounter = NULL;

  static void REGAL_CALL loader_glQueryCounter(Layer *_layer, GLuint id, GLenum target)
  {
    driver_glQueryCounter(id, target);
  }

// GL_ARB_transform_feedback2

  static void REGAL_CALL missing_glBindTransformFeedback(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBindTransformFeedback", " not available." );
  }

  PFNGLBINDTRANSFORMFEEDBACKPROC driver_glBindTransformFeedback = NULL;

  static void REGAL_CALL loader_glBindTransformFeedback(Layer *_layer, GLenum target, GLuint id)
  {
    driver_glBindTransformFeedback(target, id);
  }

  static void REGAL_CALL missing_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteTransformFeedbacks", " not available." );
  }

  PFNGLDELETETRANSFORMFEEDBACKSPROC driver_glDeleteTransformFeedbacks = NULL;

  static void REGAL_CALL loader_glDeleteTransformFeedbacks(Layer *_layer, GLsizei n, const GLuint *ids)
  {
    driver_glDeleteTransformFeedbacks(n, ids);
  }

  static void REGAL_CALL missing_glDrawTransformFeedback(GLenum mode, GLuint name)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(name);
    Warning( "glDrawTransformFeedback", " not available." );
  }

  PFNGLDRAWTRANSFORMFEEDBACKPROC driver_glDrawTransformFeedback = NULL;

  static void REGAL_CALL loader_glDrawTransformFeedback(Layer *_layer, GLenum mode, GLuint name)
  {
    driver_glDrawTransformFeedback(mode, name);
  }

  static void REGAL_CALL missing_glGenTransformFeedbacks(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenTransformFeedbacks", " not available." );
  }

  PFNGLGENTRANSFORMFEEDBACKSPROC driver_glGenTransformFeedbacks = NULL;

  static void REGAL_CALL loader_glGenTransformFeedbacks(Layer *_layer, GLsizei n, GLuint *ids)
  {
    driver_glGenTransformFeedbacks(n, ids);
  }

  static GLboolean REGAL_CALL missing_glIsTransformFeedback(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsTransformFeedback", " not available." );
    return GL_FALSE;
  }

  PFNGLISTRANSFORMFEEDBACKPROC driver_glIsTransformFeedback = NULL;

  static GLboolean REGAL_CALL loader_glIsTransformFeedback(Layer *_layer, GLuint id)
  {
    return driver_glIsTransformFeedback(id);
  }

  static void REGAL_CALL missing_glPauseTransformFeedback(void)
  {
    Warning( "glPauseTransformFeedback", " not available." );
  }

  PFNGLPAUSETRANSFORMFEEDBACKPROC driver_glPauseTransformFeedback = NULL;

  static void REGAL_CALL loader_glPauseTransformFeedback(Layer *_layer)
  {
    driver_glPauseTransformFeedback();
  }

  static void REGAL_CALL missing_glResumeTransformFeedback(void)
  {
    Warning( "glResumeTransformFeedback", " not available." );
  }

  PFNGLRESUMETRANSFORMFEEDBACKPROC driver_glResumeTransformFeedback = NULL;

  static void REGAL_CALL loader_glResumeTransformFeedback(Layer *_layer)
  {
    driver_glResumeTransformFeedback();
  }

// GL_ARB_transform_feedback3

  static void REGAL_CALL missing_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQueryIndexed", " not available." );
  }

  PFNGLBEGINQUERYINDEXEDPROC driver_glBeginQueryIndexed = NULL;

  static void REGAL_CALL loader_glBeginQueryIndexed(Layer *_layer, GLenum target, GLuint index, GLuint id)
  {
    driver_glBeginQueryIndexed(target, index, id);
  }

  static void REGAL_CALL missing_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(stream);
    Warning( "glDrawTransformFeedbackStream", " not available." );
  }

  PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC driver_glDrawTransformFeedbackStream = NULL;

  static void REGAL_CALL loader_glDrawTransformFeedbackStream(Layer *_layer, GLenum mode, GLuint id, GLuint stream)
  {
    driver_glDrawTransformFeedbackStream(mode, id, stream);
  }

  static void REGAL_CALL missing_glEndQueryIndexed(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glEndQueryIndexed", " not available." );
  }

  PFNGLENDQUERYINDEXEDPROC driver_glEndQueryIndexed = NULL;

  static void REGAL_CALL loader_glEndQueryIndexed(Layer *_layer, GLenum target, GLuint index)
  {
    driver_glEndQueryIndexed(target, index);
  }

  static void REGAL_CALL missing_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryIndexediv", " not available." );
  }

  PFNGLGETQUERYINDEXEDIVPROC driver_glGetQueryIndexediv = NULL;

  static void REGAL_CALL loader_glGetQueryIndexediv(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLint *params)
  {
    driver_glGetQueryIndexediv(target, index, pname, params);
  }

// GL_ARB_transform_feedback_instanced

  static void REGAL_CALL missing_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawTransformFeedbackInstanced", " not available." );
  }

  PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC driver_glDrawTransformFeedbackInstanced = NULL;

  static void REGAL_CALL loader_glDrawTransformFeedbackInstanced(Layer *_layer, GLenum mode, GLuint id, GLsizei primcount)
  {
    driver_glDrawTransformFeedbackInstanced(mode, id, primcount);
  }

  static void REGAL_CALL missing_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawTransformFeedbackStreamInstanced", " not available." );
  }

  PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC driver_glDrawTransformFeedbackStreamInstanced = NULL;

  static void REGAL_CALL loader_glDrawTransformFeedbackStreamInstanced(Layer *_layer, GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
  {
    driver_glDrawTransformFeedbackStreamInstanced(mode, id, stream, primcount);
  }

// GL_ARB_transpose_matrix

  static void REGAL_CALL missing_glLoadTransposeMatrixdARB(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadTransposeMatrixdARB", " not available." );
  }

  PFNGLLOADTRANSPOSEMATRIXDARBPROC driver_glLoadTransposeMatrixdARB = NULL;

  static void REGAL_CALL loader_glLoadTransposeMatrixdARB(Layer *_layer, const GLdouble *m)
  {
    driver_glLoadTransposeMatrixdARB(m);
  }

  static void REGAL_CALL missing_glLoadTransposeMatrixfARB(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadTransposeMatrixfARB", " not available." );
  }

  PFNGLLOADTRANSPOSEMATRIXFARBPROC driver_glLoadTransposeMatrixfARB = NULL;

  static void REGAL_CALL loader_glLoadTransposeMatrixfARB(Layer *_layer, const GLfloat *m)
  {
    driver_glLoadTransposeMatrixfARB(m);
  }

  static void REGAL_CALL missing_glMultTransposeMatrixdARB(const GLdouble *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultTransposeMatrixdARB", " not available." );
  }

  PFNGLMULTTRANSPOSEMATRIXDARBPROC driver_glMultTransposeMatrixdARB = NULL;

  static void REGAL_CALL loader_glMultTransposeMatrixdARB(Layer *_layer, const GLdouble *m)
  {
    driver_glMultTransposeMatrixdARB(m);
  }

  static void REGAL_CALL missing_glMultTransposeMatrixfARB(const GLfloat *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultTransposeMatrixfARB", " not available." );
  }

  PFNGLMULTTRANSPOSEMATRIXFARBPROC driver_glMultTransposeMatrixfARB = NULL;

  static void REGAL_CALL loader_glMultTransposeMatrixfARB(Layer *_layer, const GLfloat *m)
  {
    driver_glMultTransposeMatrixfARB(m);
  }

// GL_ARB_uniform_buffer_object

  static void REGAL_CALL missing_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBufferBase", " not available." );
  }

  PFNGLBINDBUFFERBASEPROC driver_glBindBufferBase = NULL;

  static void REGAL_CALL loader_glBindBufferBase(Layer *_layer, GLenum target, GLuint index, GLuint buffer)
  {
    driver_glBindBufferBase(target, index, buffer);
  }

  static void REGAL_CALL missing_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glBindBufferRange", " not available." );
  }

  PFNGLBINDBUFFERRANGEPROC driver_glBindBufferRange = NULL;

  static void REGAL_CALL loader_glBindBufferRange(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    driver_glBindBufferRange(target, index, buffer, offset, size);
  }

  static void REGAL_CALL missing_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformBlockIndex);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(uniformBlockName);
    Warning( "glGetActiveUniformBlockName", " not available." );
  }

  PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC driver_glGetActiveUniformBlockName = NULL;

  static void REGAL_CALL loader_glGetActiveUniformBlockName(Layer *_layer, GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
  {
    driver_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }

  static void REGAL_CALL missing_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformBlockIndex);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetActiveUniformBlockiv", " not available." );
  }

  PFNGLGETACTIVEUNIFORMBLOCKIVPROC driver_glGetActiveUniformBlockiv = NULL;

  static void REGAL_CALL loader_glGetActiveUniformBlockiv(Layer *_layer, GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
  {
    driver_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
  }

  static void REGAL_CALL missing_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformIndex);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(uniformName);
    Warning( "glGetActiveUniformName", " not available." );
  }

  PFNGLGETACTIVEUNIFORMNAMEPROC driver_glGetActiveUniformName = NULL;

  static void REGAL_CALL loader_glGetActiveUniformName(Layer *_layer, GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
  {
    driver_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
  }

  static void REGAL_CALL missing_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformCount);
    UNUSED_PARAMETER(uniformIndices);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetActiveUniformsiv", " not available." );
  }

  PFNGLGETACTIVEUNIFORMSIVPROC driver_glGetActiveUniformsiv = NULL;

  static void REGAL_CALL loader_glGetActiveUniformsiv(Layer *_layer, GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
  {
    driver_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
  }

  static void REGAL_CALL missing_glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegeri_v", " not available." );
  }

  PFNGLGETINTEGERI_VPROC driver_glGetIntegeri_v = NULL;

  static void REGAL_CALL loader_glGetIntegeri_v(Layer *_layer, GLenum target, GLuint index, GLint *data)
  {
    driver_glGetIntegeri_v(target, index, data);
  }

  static GLuint REGAL_CALL missing_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformBlockName);
    Warning( "glGetUniformBlockIndex", " not available." );
    return 0;
  }

  PFNGLGETUNIFORMBLOCKINDEXPROC driver_glGetUniformBlockIndex = NULL;

  static GLuint REGAL_CALL loader_glGetUniformBlockIndex(Layer *_layer, GLuint program, const GLchar *uniformBlockName)
  {
    return driver_glGetUniformBlockIndex(program, uniformBlockName);
  }

  static void REGAL_CALL missing_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformCount);
    UNUSED_PARAMETER(uniformNames);
    UNUSED_PARAMETER(uniformIndices);
    Warning( "glGetUniformIndices", " not available." );
  }

  PFNGLGETUNIFORMINDICESPROC driver_glGetUniformIndices = NULL;

  static void REGAL_CALL loader_glGetUniformIndices(Layer *_layer, GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
  {
    driver_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
  }

  static void REGAL_CALL missing_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(uniformBlockIndex);
    UNUSED_PARAMETER(uniformBlockBinding);
    Warning( "glUniformBlockBinding", " not available." );
  }

  PFNGLUNIFORMBLOCKBINDINGPROC driver_glUniformBlockBinding = NULL;

  static void REGAL_CALL loader_glUniformBlockBinding(Layer *_layer, GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
  {
    driver_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  }

// GL_ARB_vertex_array_object

  static void REGAL_CALL missing_glBindVertexArray(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glBindVertexArray", " not available." );
  }

  PFNGLBINDVERTEXARRAYPROC driver_glBindVertexArray = NULL;

  static void REGAL_CALL loader_glBindVertexArray(Layer *_layer, GLuint array)
  {
    driver_glBindVertexArray(array);
  }

  static void REGAL_CALL missing_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glDeleteVertexArrays", " not available." );
  }

  PFNGLDELETEVERTEXARRAYSPROC driver_glDeleteVertexArrays = NULL;

  static void REGAL_CALL loader_glDeleteVertexArrays(Layer *_layer, GLsizei n, const GLuint *arrays)
  {
    driver_glDeleteVertexArrays(n, arrays);
  }

  static void REGAL_CALL missing_glGenVertexArrays(GLsizei n, GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glGenVertexArrays", " not available." );
  }

  PFNGLGENVERTEXARRAYSPROC driver_glGenVertexArrays = NULL;

  static void REGAL_CALL loader_glGenVertexArrays(Layer *_layer, GLsizei n, GLuint *arrays)
  {
    driver_glGenVertexArrays(n, arrays);
  }

  static GLboolean REGAL_CALL missing_glIsVertexArray(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glIsVertexArray", " not available." );
    return GL_FALSE;
  }

  PFNGLISVERTEXARRAYPROC driver_glIsVertexArray = NULL;

  static GLboolean REGAL_CALL loader_glIsVertexArray(Layer *_layer, GLuint array)
  {
    return driver_glIsVertexArray(array);
  }

// GL_ARB_vertex_attrib_64bit

  static void REGAL_CALL missing_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLdv", " not available." );
  }

  PFNGLGETVERTEXATTRIBLDVPROC driver_glGetVertexAttribLdv = NULL;

  static void REGAL_CALL loader_glGetVertexAttribLdv(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
  {
    driver_glGetVertexAttribLdv(index, pname, params);
  }

  static void REGAL_CALL missing_glVertexAttribL1d(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1d", " not available." );
  }

  PFNGLVERTEXATTRIBL1DPROC driver_glVertexAttribL1d = NULL;

  static void REGAL_CALL loader_glVertexAttribL1d(Layer *_layer, GLuint index, GLdouble x)
  {
    driver_glVertexAttribL1d(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribL1dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1dv", " not available." );
  }

  PFNGLVERTEXATTRIBL1DVPROC driver_glVertexAttribL1dv = NULL;

  static void REGAL_CALL loader_glVertexAttribL1dv(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttribL1dv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribL2d", " not available." );
  }

  PFNGLVERTEXATTRIBL2DPROC driver_glVertexAttribL2d = NULL;

  static void REGAL_CALL loader_glVertexAttribL2d(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
  {
    driver_glVertexAttribL2d(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttribL2dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL2dv", " not available." );
  }

  PFNGLVERTEXATTRIBL2DVPROC driver_glVertexAttribL2dv = NULL;

  static void REGAL_CALL loader_glVertexAttribL2dv(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttribL2dv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribL3d", " not available." );
  }

  PFNGLVERTEXATTRIBL3DPROC driver_glVertexAttribL3d = NULL;

  static void REGAL_CALL loader_glVertexAttribL3d(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glVertexAttribL3d(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttribL3dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL3dv", " not available." );
  }

  PFNGLVERTEXATTRIBL3DVPROC driver_glVertexAttribL3dv = NULL;

  static void REGAL_CALL loader_glVertexAttribL3dv(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttribL3dv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribL4d", " not available." );
  }

  PFNGLVERTEXATTRIBL4DPROC driver_glVertexAttribL4d = NULL;

  static void REGAL_CALL loader_glVertexAttribL4d(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glVertexAttribL4d(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttribL4dv(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL4dv", " not available." );
  }

  PFNGLVERTEXATTRIBL4DVPROC driver_glVertexAttribL4dv = NULL;

  static void REGAL_CALL loader_glVertexAttribL4dv(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttribL4dv(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribLPointer", " not available." );
  }

  PFNGLVERTEXATTRIBLPOINTERPROC driver_glVertexAttribLPointer = NULL;

  static void REGAL_CALL loader_glVertexAttribLPointer(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexAttribLPointer(index, size, type, stride, pointer);
  }

// GL_ARB_vertex_attrib_binding

  static void REGAL_CALL missing_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
  {
    UNUSED_PARAMETER(bindingindex);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(stride);
    Warning( "glBindVertexBuffer", " not available." );
  }

  PFNGLBINDVERTEXBUFFERPROC driver_glBindVertexBuffer = NULL;

  static void REGAL_CALL loader_glBindVertexBuffer(Layer *_layer, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
  {
    driver_glBindVertexBuffer(bindingindex, buffer, offset, stride);
  }

  static void REGAL_CALL missing_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(bindingindex);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexArrayBindVertexBufferEXT", " not available." );
  }

  PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC driver_glVertexArrayBindVertexBufferEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayBindVertexBufferEXT(Layer *_layer, GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
  {
    driver_glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(bindingindex);
    Warning( "glVertexArrayVertexAttribBindingEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC driver_glVertexArrayVertexAttribBindingEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexAttribBindingEXT(Layer *_layer, GLuint vaobj, GLuint attribindex, GLuint bindingindex)
  {
    driver_glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexArrayVertexAttribFormatEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC driver_glVertexArrayVertexAttribFormatEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexAttribFormatEXT(Layer *_layer, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
  {
    driver_glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexArrayVertexAttribIFormatEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC driver_glVertexArrayVertexAttribIFormatEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexAttribIFormatEXT(Layer *_layer, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    driver_glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexArrayVertexAttribLFormatEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC driver_glVertexArrayVertexAttribLFormatEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexAttribLFormatEXT(Layer *_layer, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    driver_glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  }

  static void REGAL_CALL missing_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(bindingindex);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexArrayVertexBindingDivisorEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC driver_glVertexArrayVertexBindingDivisorEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexBindingDivisorEXT(Layer *_layer, GLuint vaobj, GLuint bindingindex, GLuint divisor)
  {
    driver_glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
  }

  static void REGAL_CALL missing_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
  {
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(bindingindex);
    Warning( "glVertexAttribBinding", " not available." );
  }

  PFNGLVERTEXATTRIBBINDINGPROC driver_glVertexAttribBinding = NULL;

  static void REGAL_CALL loader_glVertexAttribBinding(Layer *_layer, GLuint attribindex, GLuint bindingindex)
  {
    driver_glVertexAttribBinding(attribindex, bindingindex);
  }

  static void REGAL_CALL missing_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexAttribFormat", " not available." );
  }

  PFNGLVERTEXATTRIBFORMATPROC driver_glVertexAttribFormat = NULL;

  static void REGAL_CALL loader_glVertexAttribFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
  {
    driver_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
  }

  static void REGAL_CALL missing_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexAttribIFormat", " not available." );
  }

  PFNGLVERTEXATTRIBIFORMATPROC driver_glVertexAttribIFormat = NULL;

  static void REGAL_CALL loader_glVertexAttribIFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    driver_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
  }

  static void REGAL_CALL missing_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    UNUSED_PARAMETER(attribindex);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(relativeoffset);
    Warning( "glVertexAttribLFormat", " not available." );
  }

  PFNGLVERTEXATTRIBLFORMATPROC driver_glVertexAttribLFormat = NULL;

  static void REGAL_CALL loader_glVertexAttribLFormat(Layer *_layer, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
  {
    driver_glVertexAttribLFormat(attribindex, size, type, relativeoffset);
  }

  static void REGAL_CALL missing_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
  {
    UNUSED_PARAMETER(bindingindex);
    UNUSED_PARAMETER(divisor);
    Warning( "glVertexBindingDivisor", " not available." );
  }

  PFNGLVERTEXBINDINGDIVISORPROC driver_glVertexBindingDivisor = NULL;

  static void REGAL_CALL loader_glVertexBindingDivisor(Layer *_layer, GLuint bindingindex, GLuint divisor)
  {
    driver_glVertexBindingDivisor(bindingindex, divisor);
  }

// GL_ARB_vertex_blend

  static void REGAL_CALL missing_glVertexBlendARB(GLint count)
  {
    UNUSED_PARAMETER(count);
    Warning( "glVertexBlendARB", " not available." );
  }

  PFNGLVERTEXBLENDARBPROC driver_glVertexBlendARB = NULL;

  static void REGAL_CALL loader_glVertexBlendARB(Layer *_layer, GLint count)
  {
    driver_glVertexBlendARB(count);
  }

  static void REGAL_CALL missing_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glWeightPointerARB", " not available." );
  }

  PFNGLWEIGHTPOINTERARBPROC driver_glWeightPointerARB = NULL;

  static void REGAL_CALL loader_glWeightPointerARB(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glWeightPointerARB(size, type, stride, pointer);
  }

  static void REGAL_CALL missing_glWeightbvARB(GLint size, const GLbyte *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightbvARB", " not available." );
  }

  PFNGLWEIGHTBVARBPROC driver_glWeightbvARB = NULL;

  static void REGAL_CALL loader_glWeightbvARB(Layer *_layer, GLint size, const GLbyte *weights)
  {
    driver_glWeightbvARB(size, weights);
  }

  static void REGAL_CALL missing_glWeightdvARB(GLint size, const GLdouble *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightdvARB", " not available." );
  }

  PFNGLWEIGHTDVARBPROC driver_glWeightdvARB = NULL;

  static void REGAL_CALL loader_glWeightdvARB(Layer *_layer, GLint size, const GLdouble *weights)
  {
    driver_glWeightdvARB(size, weights);
  }

  static void REGAL_CALL missing_glWeightfvARB(GLint size, const GLfloat *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightfvARB", " not available." );
  }

  PFNGLWEIGHTFVARBPROC driver_glWeightfvARB = NULL;

  static void REGAL_CALL loader_glWeightfvARB(Layer *_layer, GLint size, const GLfloat *weights)
  {
    driver_glWeightfvARB(size, weights);
  }

  static void REGAL_CALL missing_glWeightivARB(GLint size, const GLint *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightivARB", " not available." );
  }

  PFNGLWEIGHTIVARBPROC driver_glWeightivARB = NULL;

  static void REGAL_CALL loader_glWeightivARB(Layer *_layer, GLint size, const GLint *weights)
  {
    driver_glWeightivARB(size, weights);
  }

  static void REGAL_CALL missing_glWeightsvARB(GLint size, const GLshort *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightsvARB", " not available." );
  }

  PFNGLWEIGHTSVARBPROC driver_glWeightsvARB = NULL;

  static void REGAL_CALL loader_glWeightsvARB(Layer *_layer, GLint size, const GLshort *weights)
  {
    driver_glWeightsvARB(size, weights);
  }

  static void REGAL_CALL missing_glWeightubvARB(GLint size, const GLubyte *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightubvARB", " not available." );
  }

  PFNGLWEIGHTUBVARBPROC driver_glWeightubvARB = NULL;

  static void REGAL_CALL loader_glWeightubvARB(Layer *_layer, GLint size, const GLubyte *weights)
  {
    driver_glWeightubvARB(size, weights);
  }

  static void REGAL_CALL missing_glWeightuivARB(GLint size, const GLuint *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightuivARB", " not available." );
  }

  PFNGLWEIGHTUIVARBPROC driver_glWeightuivARB = NULL;

  static void REGAL_CALL loader_glWeightuivARB(Layer *_layer, GLint size, const GLuint *weights)
  {
    driver_glWeightuivARB(size, weights);
  }

  static void REGAL_CALL missing_glWeightusvARB(GLint size, const GLushort *weights)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightusvARB", " not available." );
  }

  PFNGLWEIGHTUSVARBPROC driver_glWeightusvARB = NULL;

  static void REGAL_CALL loader_glWeightusvARB(Layer *_layer, GLint size, const GLushort *weights)
  {
    driver_glWeightusvARB(size, weights);
  }

// GL_ARB_vertex_buffer_object

  static void REGAL_CALL missing_glBindBufferARB(GLenum target, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBufferARB", " not available." );
  }

  PFNGLBINDBUFFERARBPROC driver_glBindBufferARB = NULL;

  static void REGAL_CALL loader_glBindBufferARB(Layer *_layer, GLenum target, GLuint buffer)
  {
    driver_glBindBufferARB(target, buffer);
  }

  static void REGAL_CALL missing_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(usage);
    Warning( "glBufferDataARB", " not available." );
  }

  PFNGLBUFFERDATAARBPROC driver_glBufferDataARB = NULL;

  static void REGAL_CALL loader_glBufferDataARB(Layer *_layer, GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
  {
    driver_glBufferDataARB(target, size, data, usage);
  }

  static void REGAL_CALL missing_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glBufferSubDataARB", " not available." );
  }

  PFNGLBUFFERSUBDATAARBPROC driver_glBufferSubDataARB = NULL;

  static void REGAL_CALL loader_glBufferSubDataARB(Layer *_layer, GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
  {
    driver_glBufferSubDataARB(target, offset, size, data);
  }

  static void REGAL_CALL missing_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(buffers);
    Warning( "glDeleteBuffersARB", " not available." );
  }

  PFNGLDELETEBUFFERSARBPROC driver_glDeleteBuffersARB = NULL;

  static void REGAL_CALL loader_glDeleteBuffersARB(Layer *_layer, GLsizei n, const GLuint *buffers)
  {
    driver_glDeleteBuffersARB(n, buffers);
  }

  static void REGAL_CALL missing_glGenBuffersARB(GLsizei n, GLuint *buffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(buffers);
    Warning( "glGenBuffersARB", " not available." );
  }

  PFNGLGENBUFFERSARBPROC driver_glGenBuffersARB = NULL;

  static void REGAL_CALL loader_glGenBuffersARB(Layer *_layer, GLsizei n, GLuint *buffers)
  {
    driver_glGenBuffersARB(n, buffers);
  }

  static void REGAL_CALL missing_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferParameterivARB", " not available." );
  }

  PFNGLGETBUFFERPARAMETERIVARBPROC driver_glGetBufferParameterivARB = NULL;

  static void REGAL_CALL loader_glGetBufferParameterivARB(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetBufferParameterivARB(target, pname, params);
  }

  static void REGAL_CALL missing_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferPointervARB", " not available." );
  }

  PFNGLGETBUFFERPOINTERVARBPROC driver_glGetBufferPointervARB = NULL;

  static void REGAL_CALL loader_glGetBufferPointervARB(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
  {
    driver_glGetBufferPointervARB(target, pname, params);
  }

  static void REGAL_CALL missing_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glGetBufferSubDataARB", " not available." );
  }

  PFNGLGETBUFFERSUBDATAARBPROC driver_glGetBufferSubDataARB = NULL;

  static void REGAL_CALL loader_glGetBufferSubDataARB(Layer *_layer, GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
  {
    driver_glGetBufferSubDataARB(target, offset, size, data);
  }

  static GLboolean REGAL_CALL missing_glIsBufferARB(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glIsBufferARB", " not available." );
    return GL_FALSE;
  }

  PFNGLISBUFFERARBPROC driver_glIsBufferARB = NULL;

  static GLboolean REGAL_CALL loader_glIsBufferARB(Layer *_layer, GLuint buffer)
  {
    return driver_glIsBufferARB(buffer);
  }

  static GLvoid *REGAL_CALL missing_glMapBufferARB(GLenum target, GLenum access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(access);
    Warning( "glMapBufferARB", " not available." );
    return NULL;
  }

  PFNGLMAPBUFFERARBPROC driver_glMapBufferARB = NULL;

  static GLvoid *REGAL_CALL loader_glMapBufferARB(Layer *_layer, GLenum target, GLenum access)
  {
    return driver_glMapBufferARB(target, access);
  }

  static GLboolean REGAL_CALL missing_glUnmapBufferARB(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glUnmapBufferARB", " not available." );
    return GL_FALSE;
  }

  PFNGLUNMAPBUFFERARBPROC driver_glUnmapBufferARB = NULL;

  static GLboolean REGAL_CALL loader_glUnmapBufferARB(Layer *_layer, GLenum target)
  {
    return driver_glUnmapBufferARB(target);
  }

// GL_ARB_vertex_program

  static void REGAL_CALL missing_glBindProgramARB(GLenum target, GLuint program)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(program);
    Warning( "glBindProgramARB", " not available." );
  }

  PFNGLBINDPROGRAMARBPROC driver_glBindProgramARB = NULL;

  static void REGAL_CALL loader_glBindProgramARB(Layer *_layer, GLenum target, GLuint program)
  {
    driver_glBindProgramARB(target, program);
  }

  static void REGAL_CALL missing_glDeleteProgramsARB(GLsizei n, const GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glDeleteProgramsARB", " not available." );
  }

  PFNGLDELETEPROGRAMSARBPROC driver_glDeleteProgramsARB = NULL;

  static void REGAL_CALL loader_glDeleteProgramsARB(Layer *_layer, GLsizei n, const GLuint *programs)
  {
    driver_glDeleteProgramsARB(n, programs);
  }

  static void REGAL_CALL missing_glDisableVertexAttribArrayARB(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glDisableVertexAttribArrayARB", " not available." );
  }

  PFNGLDISABLEVERTEXATTRIBARRAYARBPROC driver_glDisableVertexAttribArrayARB = NULL;

  static void REGAL_CALL loader_glDisableVertexAttribArrayARB(Layer *_layer, GLuint index)
  {
    driver_glDisableVertexAttribArrayARB(index);
  }

  static void REGAL_CALL missing_glEnableVertexAttribArrayARB(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glEnableVertexAttribArrayARB", " not available." );
  }

  PFNGLENABLEVERTEXATTRIBARRAYARBPROC driver_glEnableVertexAttribArrayARB = NULL;

  static void REGAL_CALL loader_glEnableVertexAttribArrayARB(Layer *_layer, GLuint index)
  {
    driver_glEnableVertexAttribArrayARB(index);
  }

  static void REGAL_CALL missing_glGenProgramsARB(GLsizei n, GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glGenProgramsARB", " not available." );
  }

  PFNGLGENPROGRAMSARBPROC driver_glGenProgramsARB = NULL;

  static void REGAL_CALL loader_glGenProgramsARB(Layer *_layer, GLsizei n, GLuint *programs)
  {
    driver_glGenProgramsARB(n, programs);
  }

  static void REGAL_CALL missing_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramEnvParameterdvARB", " not available." );
  }

  PFNGLGETPROGRAMENVPARAMETERDVARBPROC driver_glGetProgramEnvParameterdvARB = NULL;

  static void REGAL_CALL loader_glGetProgramEnvParameterdvARB(Layer *_layer, GLenum target, GLuint index, GLdouble *params)
  {
    driver_glGetProgramEnvParameterdvARB(target, index, params);
  }

  static void REGAL_CALL missing_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramEnvParameterfvARB", " not available." );
  }

  PFNGLGETPROGRAMENVPARAMETERFVARBPROC driver_glGetProgramEnvParameterfvARB = NULL;

  static void REGAL_CALL loader_glGetProgramEnvParameterfvARB(Layer *_layer, GLenum target, GLuint index, GLfloat *params)
  {
    driver_glGetProgramEnvParameterfvARB(target, index, params);
  }

  static void REGAL_CALL missing_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramLocalParameterdvARB", " not available." );
  }

  PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC driver_glGetProgramLocalParameterdvARB = NULL;

  static void REGAL_CALL loader_glGetProgramLocalParameterdvARB(Layer *_layer, GLenum target, GLuint index, GLdouble *params)
  {
    driver_glGetProgramLocalParameterdvARB(target, index, params);
  }

  static void REGAL_CALL missing_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramLocalParameterfvARB", " not available." );
  }

  PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC driver_glGetProgramLocalParameterfvARB = NULL;

  static void REGAL_CALL loader_glGetProgramLocalParameterfvARB(Layer *_layer, GLenum target, GLuint index, GLfloat *params)
  {
    driver_glGetProgramLocalParameterfvARB(target, index, params);
  }

  static void REGAL_CALL missing_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(string);
    Warning( "glGetProgramStringARB", " not available." );
  }

  PFNGLGETPROGRAMSTRINGARBPROC driver_glGetProgramStringARB = NULL;

  static void REGAL_CALL loader_glGetProgramStringARB(Layer *_layer, GLenum target, GLenum pname, GLvoid *string)
  {
    driver_glGetProgramStringARB(target, pname, string);
  }

  static void REGAL_CALL missing_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramivARB", " not available." );
  }

  PFNGLGETPROGRAMIVARBPROC driver_glGetProgramivARB = NULL;

  static void REGAL_CALL loader_glGetProgramivARB(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetProgramivARB(target, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(pointer);
    Warning( "glGetVertexAttribPointervARB", " not available." );
  }

  PFNGLGETVERTEXATTRIBPOINTERVARBPROC driver_glGetVertexAttribPointervARB = NULL;

  static void REGAL_CALL loader_glGetVertexAttribPointervARB(Layer *_layer, GLuint index, GLenum pname, GLvoid **pointer)
  {
    driver_glGetVertexAttribPointervARB(index, pname, pointer);
  }

  static void REGAL_CALL missing_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribdvARB", " not available." );
  }

  PFNGLGETVERTEXATTRIBDVARBPROC driver_glGetVertexAttribdvARB = NULL;

  static void REGAL_CALL loader_glGetVertexAttribdvARB(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
  {
    driver_glGetVertexAttribdvARB(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribfvARB", " not available." );
  }

  PFNGLGETVERTEXATTRIBFVARBPROC driver_glGetVertexAttribfvARB = NULL;

  static void REGAL_CALL loader_glGetVertexAttribfvARB(Layer *_layer, GLuint index, GLenum pname, GLfloat *params)
  {
    driver_glGetVertexAttribfvARB(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribivARB", " not available." );
  }

  PFNGLGETVERTEXATTRIBIVARBPROC driver_glGetVertexAttribivARB = NULL;

  static void REGAL_CALL loader_glGetVertexAttribivARB(Layer *_layer, GLuint index, GLenum pname, GLint *params)
  {
    driver_glGetVertexAttribivARB(index, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsProgramARB(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glIsProgramARB", " not available." );
    return GL_FALSE;
  }

  PFNGLISPROGRAMARBPROC driver_glIsProgramARB = NULL;

  static GLboolean REGAL_CALL loader_glIsProgramARB(Layer *_layer, GLuint program)
  {
    return driver_glIsProgramARB(program);
  }

  static void REGAL_CALL missing_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramEnvParameter4dARB", " not available." );
  }

  PFNGLPROGRAMENVPARAMETER4DARBPROC driver_glProgramEnvParameter4dARB = NULL;

  static void REGAL_CALL loader_glProgramEnvParameter4dARB(Layer *_layer, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glProgramEnvParameter4dARB(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameter4dvARB", " not available." );
  }

  PFNGLPROGRAMENVPARAMETER4DVARBPROC driver_glProgramEnvParameter4dvARB = NULL;

  static void REGAL_CALL loader_glProgramEnvParameter4dvARB(Layer *_layer, GLenum target, GLuint index, const GLdouble *params)
  {
    driver_glProgramEnvParameter4dvARB(target, index, params);
  }

  static void REGAL_CALL missing_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramEnvParameter4fARB", " not available." );
  }

  PFNGLPROGRAMENVPARAMETER4FARBPROC driver_glProgramEnvParameter4fARB = NULL;

  static void REGAL_CALL loader_glProgramEnvParameter4fARB(Layer *_layer, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glProgramEnvParameter4fARB(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameter4fvARB", " not available." );
  }

  PFNGLPROGRAMENVPARAMETER4FVARBPROC driver_glProgramEnvParameter4fvARB = NULL;

  static void REGAL_CALL loader_glProgramEnvParameter4fvARB(Layer *_layer, GLenum target, GLuint index, const GLfloat *params)
  {
    driver_glProgramEnvParameter4fvARB(target, index, params);
  }

  static void REGAL_CALL missing_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramLocalParameter4dARB", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETER4DARBPROC driver_glProgramLocalParameter4dARB = NULL;

  static void REGAL_CALL loader_glProgramLocalParameter4dARB(Layer *_layer, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glProgramLocalParameter4dARB(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameter4dvARB", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETER4DVARBPROC driver_glProgramLocalParameter4dvARB = NULL;

  static void REGAL_CALL loader_glProgramLocalParameter4dvARB(Layer *_layer, GLenum target, GLuint index, const GLdouble *params)
  {
    driver_glProgramLocalParameter4dvARB(target, index, params);
  }

  static void REGAL_CALL missing_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramLocalParameter4fARB", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETER4FARBPROC driver_glProgramLocalParameter4fARB = NULL;

  static void REGAL_CALL loader_glProgramLocalParameter4fARB(Layer *_layer, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glProgramLocalParameter4fARB(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameter4fvARB", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETER4FVARBPROC driver_glProgramLocalParameter4fvARB = NULL;

  static void REGAL_CALL loader_glProgramLocalParameter4fvARB(Layer *_layer, GLenum target, GLuint index, const GLfloat *params)
  {
    driver_glProgramLocalParameter4fvARB(target, index, params);
  }

  static void REGAL_CALL missing_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(string);
    Warning( "glProgramStringARB", " not available." );
  }

  PFNGLPROGRAMSTRINGARBPROC driver_glProgramStringARB = NULL;

  static void REGAL_CALL loader_glProgramStringARB(Layer *_layer, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
  {
    driver_glProgramStringARB(target, format, len, string);
  }

  static void REGAL_CALL missing_glVertexAttrib1dARB(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1dARB", " not available." );
  }

  PFNGLVERTEXATTRIB1DARBPROC driver_glVertexAttrib1dARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib1dARB(Layer *_layer, GLuint index, GLdouble x)
  {
    driver_glVertexAttrib1dARB(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1dvARB", " not available." );
  }

  PFNGLVERTEXATTRIB1DVARBPROC driver_glVertexAttrib1dvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib1dvARB(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib1dvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib1fARB(GLuint index, GLfloat x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1fARB", " not available." );
  }

  PFNGLVERTEXATTRIB1FARBPROC driver_glVertexAttrib1fARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib1fARB(Layer *_layer, GLuint index, GLfloat x)
  {
    driver_glVertexAttrib1fARB(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1fvARB", " not available." );
  }

  PFNGLVERTEXATTRIB1FVARBPROC driver_glVertexAttrib1fvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib1fvARB(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib1fvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib1sARB(GLuint index, GLshort x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1sARB", " not available." );
  }

  PFNGLVERTEXATTRIB1SARBPROC driver_glVertexAttrib1sARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib1sARB(Layer *_layer, GLuint index, GLshort x)
  {
    driver_glVertexAttrib1sARB(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1svARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1svARB", " not available." );
  }

  PFNGLVERTEXATTRIB1SVARBPROC driver_glVertexAttrib1svARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib1svARB(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib1svARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2dARB", " not available." );
  }

  PFNGLVERTEXATTRIB2DARBPROC driver_glVertexAttrib2dARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib2dARB(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
  {
    driver_glVertexAttrib2dARB(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2dvARB", " not available." );
  }

  PFNGLVERTEXATTRIB2DVARBPROC driver_glVertexAttrib2dvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib2dvARB(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib2dvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2fARB", " not available." );
  }

  PFNGLVERTEXATTRIB2FARBPROC driver_glVertexAttrib2fARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib2fARB(Layer *_layer, GLuint index, GLfloat x, GLfloat y)
  {
    driver_glVertexAttrib2fARB(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2fvARB", " not available." );
  }

  PFNGLVERTEXATTRIB2FVARBPROC driver_glVertexAttrib2fvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib2fvARB(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib2fvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2sARB", " not available." );
  }

  PFNGLVERTEXATTRIB2SARBPROC driver_glVertexAttrib2sARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib2sARB(Layer *_layer, GLuint index, GLshort x, GLshort y)
  {
    driver_glVertexAttrib2sARB(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2svARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2svARB", " not available." );
  }

  PFNGLVERTEXATTRIB2SVARBPROC driver_glVertexAttrib2svARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib2svARB(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib2svARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3dARB", " not available." );
  }

  PFNGLVERTEXATTRIB3DARBPROC driver_glVertexAttrib3dARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib3dARB(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glVertexAttrib3dARB(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3dvARB", " not available." );
  }

  PFNGLVERTEXATTRIB3DVARBPROC driver_glVertexAttrib3dvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib3dvARB(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib3dvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3fARB", " not available." );
  }

  PFNGLVERTEXATTRIB3FARBPROC driver_glVertexAttrib3fARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib3fARB(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glVertexAttrib3fARB(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3fvARB", " not available." );
  }

  PFNGLVERTEXATTRIB3FVARBPROC driver_glVertexAttrib3fvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib3fvARB(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib3fvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3sARB", " not available." );
  }

  PFNGLVERTEXATTRIB3SARBPROC driver_glVertexAttrib3sARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib3sARB(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z)
  {
    driver_glVertexAttrib3sARB(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3svARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3svARB", " not available." );
  }

  PFNGLVERTEXATTRIB3SVARBPROC driver_glVertexAttrib3svARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib3svARB(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib3svARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NbvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4NBVARBPROC driver_glVertexAttrib4NbvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4NbvARB(Layer *_layer, GLuint index, const GLbyte *v)
  {
    driver_glVertexAttrib4NbvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4NivARB(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NivARB", " not available." );
  }

  PFNGLVERTEXATTRIB4NIVARBPROC driver_glVertexAttrib4NivARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4NivARB(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttrib4NivARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NsvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4NSVARBPROC driver_glVertexAttrib4NsvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4NsvARB(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib4NsvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4NubARB", " not available." );
  }

  PFNGLVERTEXATTRIB4NUBARBPROC driver_glVertexAttrib4NubARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4NubARB(Layer *_layer, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    driver_glVertexAttrib4NubARB(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NubvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4NUBVARBPROC driver_glVertexAttrib4NubvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4NubvARB(Layer *_layer, GLuint index, const GLubyte *v)
  {
    driver_glVertexAttrib4NubvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NuivARB", " not available." );
  }

  PFNGLVERTEXATTRIB4NUIVARBPROC driver_glVertexAttrib4NuivARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4NuivARB(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttrib4NuivARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4NusvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4NUSVARBPROC driver_glVertexAttrib4NusvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4NusvARB(Layer *_layer, GLuint index, const GLushort *v)
  {
    driver_glVertexAttrib4NusvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4bvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4BVARBPROC driver_glVertexAttrib4bvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4bvARB(Layer *_layer, GLuint index, const GLbyte *v)
  {
    driver_glVertexAttrib4bvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4dARB", " not available." );
  }

  PFNGLVERTEXATTRIB4DARBPROC driver_glVertexAttrib4dARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4dARB(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glVertexAttrib4dARB(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4dvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4DVARBPROC driver_glVertexAttrib4dvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4dvARB(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib4dvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4fARB", " not available." );
  }

  PFNGLVERTEXATTRIB4FARBPROC driver_glVertexAttrib4fARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4fARB(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glVertexAttrib4fARB(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4fvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4FVARBPROC driver_glVertexAttrib4fvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4fvARB(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib4fvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4ivARB(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4ivARB", " not available." );
  }

  PFNGLVERTEXATTRIB4IVARBPROC driver_glVertexAttrib4ivARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4ivARB(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttrib4ivARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4sARB", " not available." );
  }

  PFNGLVERTEXATTRIB4SARBPROC driver_glVertexAttrib4sARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4sARB(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    driver_glVertexAttrib4sARB(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4svARB(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4svARB", " not available." );
  }

  PFNGLVERTEXATTRIB4SVARBPROC driver_glVertexAttrib4svARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4svARB(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib4svARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4ubvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4UBVARBPROC driver_glVertexAttrib4ubvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4ubvARB(Layer *_layer, GLuint index, const GLubyte *v)
  {
    driver_glVertexAttrib4ubvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4uivARB(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4uivARB", " not available." );
  }

  PFNGLVERTEXATTRIB4UIVARBPROC driver_glVertexAttrib4uivARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4uivARB(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttrib4uivARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4usvARB(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4usvARB", " not available." );
  }

  PFNGLVERTEXATTRIB4USVARBPROC driver_glVertexAttrib4usvARB = NULL;

  static void REGAL_CALL loader_glVertexAttrib4usvARB(Layer *_layer, GLuint index, const GLushort *v)
  {
    driver_glVertexAttrib4usvARB(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribPointerARB", " not available." );
  }

  PFNGLVERTEXATTRIBPOINTERARBPROC driver_glVertexAttribPointerARB = NULL;

  static void REGAL_CALL loader_glVertexAttribPointerARB(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
  }

// GL_ARB_vertex_shader

  static void REGAL_CALL missing_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(name);
    Warning( "glBindAttribLocationARB", " not available." );
  }

  PFNGLBINDATTRIBLOCATIONARBPROC driver_glBindAttribLocationARB = NULL;

  static void REGAL_CALL loader_glBindAttribLocationARB(Layer *_layer, GLhandleARB programObj, GLuint index, const GLcharARB *name)
  {
    driver_glBindAttribLocationARB(programObj, index, name);
  }

  static void REGAL_CALL missing_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(maxLength);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveAttribARB", " not available." );
  }

  PFNGLGETACTIVEATTRIBARBPROC driver_glGetActiveAttribARB = NULL;

  static void REGAL_CALL loader_glGetActiveAttribARB(Layer *_layer, GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
  {
    driver_glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
  }

  static GLint REGAL_CALL missing_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
  {
    UNUSED_PARAMETER(programObj);
    UNUSED_PARAMETER(name);
    Warning( "glGetAttribLocationARB", " not available." );
    return 0;
  }

  PFNGLGETATTRIBLOCATIONARBPROC driver_glGetAttribLocationARB = NULL;

  static GLint REGAL_CALL loader_glGetAttribLocationARB(Layer *_layer, GLhandleARB programObj, const GLcharARB *name)
  {
    return driver_glGetAttribLocationARB(programObj, name);
  }

// GL_ARB_vertex_type_2_10_10_10_rev

  static void REGAL_CALL missing_glColorP3ui(GLenum type, GLuint color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glColorP3ui", " not available." );
  }

  PFNGLCOLORP3UIPROC driver_glColorP3ui = NULL;

  static void REGAL_CALL loader_glColorP3ui(Layer *_layer, GLenum type, GLuint color)
  {
    driver_glColorP3ui(type, color);
  }

  static void REGAL_CALL missing_glColorP3uiv(GLenum type, const GLuint *color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glColorP3uiv", " not available." );
  }

  PFNGLCOLORP3UIVPROC driver_glColorP3uiv = NULL;

  static void REGAL_CALL loader_glColorP3uiv(Layer *_layer, GLenum type, const GLuint *color)
  {
    driver_glColorP3uiv(type, color);
  }

  static void REGAL_CALL missing_glColorP4ui(GLenum type, GLuint color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glColorP4ui", " not available." );
  }

  PFNGLCOLORP4UIPROC driver_glColorP4ui = NULL;

  static void REGAL_CALL loader_glColorP4ui(Layer *_layer, GLenum type, GLuint color)
  {
    driver_glColorP4ui(type, color);
  }

  static void REGAL_CALL missing_glColorP4uiv(GLenum type, const GLuint *color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glColorP4uiv", " not available." );
  }

  PFNGLCOLORP4UIVPROC driver_glColorP4uiv = NULL;

  static void REGAL_CALL loader_glColorP4uiv(Layer *_layer, GLenum type, const GLuint *color)
  {
    driver_glColorP4uiv(type, color);
  }

  static void REGAL_CALL missing_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP1ui", " not available." );
  }

  PFNGLMULTITEXCOORDP1UIPROC driver_glMultiTexCoordP1ui = NULL;

  static void REGAL_CALL loader_glMultiTexCoordP1ui(Layer *_layer, GLenum texture, GLenum type, GLuint coords)
  {
    driver_glMultiTexCoordP1ui(texture, type, coords);
  }

  static void REGAL_CALL missing_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP1uiv", " not available." );
  }

  PFNGLMULTITEXCOORDP1UIVPROC driver_glMultiTexCoordP1uiv = NULL;

  static void REGAL_CALL loader_glMultiTexCoordP1uiv(Layer *_layer, GLenum texture, GLenum type, const GLuint *coords)
  {
    driver_glMultiTexCoordP1uiv(texture, type, coords);
  }

  static void REGAL_CALL missing_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP2ui", " not available." );
  }

  PFNGLMULTITEXCOORDP2UIPROC driver_glMultiTexCoordP2ui = NULL;

  static void REGAL_CALL loader_glMultiTexCoordP2ui(Layer *_layer, GLenum texture, GLenum type, GLuint coords)
  {
    driver_glMultiTexCoordP2ui(texture, type, coords);
  }

  static void REGAL_CALL missing_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP2uiv", " not available." );
  }

  PFNGLMULTITEXCOORDP2UIVPROC driver_glMultiTexCoordP2uiv = NULL;

  static void REGAL_CALL loader_glMultiTexCoordP2uiv(Layer *_layer, GLenum texture, GLenum type, const GLuint *coords)
  {
    driver_glMultiTexCoordP2uiv(texture, type, coords);
  }

  static void REGAL_CALL missing_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP3ui", " not available." );
  }

  PFNGLMULTITEXCOORDP3UIPROC driver_glMultiTexCoordP3ui = NULL;

  static void REGAL_CALL loader_glMultiTexCoordP3ui(Layer *_layer, GLenum texture, GLenum type, GLuint coords)
  {
    driver_glMultiTexCoordP3ui(texture, type, coords);
  }

  static void REGAL_CALL missing_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP3uiv", " not available." );
  }

  PFNGLMULTITEXCOORDP3UIVPROC driver_glMultiTexCoordP3uiv = NULL;

  static void REGAL_CALL loader_glMultiTexCoordP3uiv(Layer *_layer, GLenum texture, GLenum type, const GLuint *coords)
  {
    driver_glMultiTexCoordP3uiv(texture, type, coords);
  }

  static void REGAL_CALL missing_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP4ui", " not available." );
  }

  PFNGLMULTITEXCOORDP4UIPROC driver_glMultiTexCoordP4ui = NULL;

  static void REGAL_CALL loader_glMultiTexCoordP4ui(Layer *_layer, GLenum texture, GLenum type, GLuint coords)
  {
    driver_glMultiTexCoordP4ui(texture, type, coords);
  }

  static void REGAL_CALL missing_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glMultiTexCoordP4uiv", " not available." );
  }

  PFNGLMULTITEXCOORDP4UIVPROC driver_glMultiTexCoordP4uiv = NULL;

  static void REGAL_CALL loader_glMultiTexCoordP4uiv(Layer *_layer, GLenum texture, GLenum type, const GLuint *coords)
  {
    driver_glMultiTexCoordP4uiv(texture, type, coords);
  }

  static void REGAL_CALL missing_glNormalP3ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalP3ui", " not available." );
  }

  PFNGLNORMALP3UIPROC driver_glNormalP3ui = NULL;

  static void REGAL_CALL loader_glNormalP3ui(Layer *_layer, GLenum type, GLuint coords)
  {
    driver_glNormalP3ui(type, coords);
  }

  static void REGAL_CALL missing_glNormalP3uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalP3uiv", " not available." );
  }

  PFNGLNORMALP3UIVPROC driver_glNormalP3uiv = NULL;

  static void REGAL_CALL loader_glNormalP3uiv(Layer *_layer, GLenum type, const GLuint *coords)
  {
    driver_glNormalP3uiv(type, coords);
  }

  static void REGAL_CALL missing_glSecondaryColorP3ui(GLenum type, GLuint color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glSecondaryColorP3ui", " not available." );
  }

  PFNGLSECONDARYCOLORP3UIPROC driver_glSecondaryColorP3ui = NULL;

  static void REGAL_CALL loader_glSecondaryColorP3ui(Layer *_layer, GLenum type, GLuint color)
  {
    driver_glSecondaryColorP3ui(type, color);
  }

  static void REGAL_CALL missing_glSecondaryColorP3uiv(GLenum type, const GLuint *color)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(color);
    Warning( "glSecondaryColorP3uiv", " not available." );
  }

  PFNGLSECONDARYCOLORP3UIVPROC driver_glSecondaryColorP3uiv = NULL;

  static void REGAL_CALL loader_glSecondaryColorP3uiv(Layer *_layer, GLenum type, const GLuint *color)
  {
    driver_glSecondaryColorP3uiv(type, color);
  }

  static void REGAL_CALL missing_glTexCoordP1ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP1ui", " not available." );
  }

  PFNGLTEXCOORDP1UIPROC driver_glTexCoordP1ui = NULL;

  static void REGAL_CALL loader_glTexCoordP1ui(Layer *_layer, GLenum type, GLuint coords)
  {
    driver_glTexCoordP1ui(type, coords);
  }

  static void REGAL_CALL missing_glTexCoordP1uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP1uiv", " not available." );
  }

  PFNGLTEXCOORDP1UIVPROC driver_glTexCoordP1uiv = NULL;

  static void REGAL_CALL loader_glTexCoordP1uiv(Layer *_layer, GLenum type, const GLuint *coords)
  {
    driver_glTexCoordP1uiv(type, coords);
  }

  static void REGAL_CALL missing_glTexCoordP2ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP2ui", " not available." );
  }

  PFNGLTEXCOORDP2UIPROC driver_glTexCoordP2ui = NULL;

  static void REGAL_CALL loader_glTexCoordP2ui(Layer *_layer, GLenum type, GLuint coords)
  {
    driver_glTexCoordP2ui(type, coords);
  }

  static void REGAL_CALL missing_glTexCoordP2uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP2uiv", " not available." );
  }

  PFNGLTEXCOORDP2UIVPROC driver_glTexCoordP2uiv = NULL;

  static void REGAL_CALL loader_glTexCoordP2uiv(Layer *_layer, GLenum type, const GLuint *coords)
  {
    driver_glTexCoordP2uiv(type, coords);
  }

  static void REGAL_CALL missing_glTexCoordP3ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP3ui", " not available." );
  }

  PFNGLTEXCOORDP3UIPROC driver_glTexCoordP3ui = NULL;

  static void REGAL_CALL loader_glTexCoordP3ui(Layer *_layer, GLenum type, GLuint coords)
  {
    driver_glTexCoordP3ui(type, coords);
  }

  static void REGAL_CALL missing_glTexCoordP3uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP3uiv", " not available." );
  }

  PFNGLTEXCOORDP3UIVPROC driver_glTexCoordP3uiv = NULL;

  static void REGAL_CALL loader_glTexCoordP3uiv(Layer *_layer, GLenum type, const GLuint *coords)
  {
    driver_glTexCoordP3uiv(type, coords);
  }

  static void REGAL_CALL missing_glTexCoordP4ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP4ui", " not available." );
  }

  PFNGLTEXCOORDP4UIPROC driver_glTexCoordP4ui = NULL;

  static void REGAL_CALL loader_glTexCoordP4ui(Layer *_layer, GLenum type, GLuint coords)
  {
    driver_glTexCoordP4ui(type, coords);
  }

  static void REGAL_CALL missing_glTexCoordP4uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glTexCoordP4uiv", " not available." );
  }

  PFNGLTEXCOORDP4UIVPROC driver_glTexCoordP4uiv = NULL;

  static void REGAL_CALL loader_glTexCoordP4uiv(Layer *_layer, GLenum type, const GLuint *coords)
  {
    driver_glTexCoordP4uiv(type, coords);
  }

  static void REGAL_CALL missing_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP1ui", " not available." );
  }

  PFNGLVERTEXATTRIBP1UIPROC driver_glVertexAttribP1ui = NULL;

  static void REGAL_CALL loader_glVertexAttribP1ui(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    driver_glVertexAttribP1ui(index, type, normalized, value);
  }

  static void REGAL_CALL missing_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP1uiv", " not available." );
  }

  PFNGLVERTEXATTRIBP1UIVPROC driver_glVertexAttribP1uiv = NULL;

  static void REGAL_CALL loader_glVertexAttribP1uiv(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    driver_glVertexAttribP1uiv(index, type, normalized, value);
  }

  static void REGAL_CALL missing_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP2ui", " not available." );
  }

  PFNGLVERTEXATTRIBP2UIPROC driver_glVertexAttribP2ui = NULL;

  static void REGAL_CALL loader_glVertexAttribP2ui(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    driver_glVertexAttribP2ui(index, type, normalized, value);
  }

  static void REGAL_CALL missing_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP2uiv", " not available." );
  }

  PFNGLVERTEXATTRIBP2UIVPROC driver_glVertexAttribP2uiv = NULL;

  static void REGAL_CALL loader_glVertexAttribP2uiv(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    driver_glVertexAttribP2uiv(index, type, normalized, value);
  }

  static void REGAL_CALL missing_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP3ui", " not available." );
  }

  PFNGLVERTEXATTRIBP3UIPROC driver_glVertexAttribP3ui = NULL;

  static void REGAL_CALL loader_glVertexAttribP3ui(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    driver_glVertexAttribP3ui(index, type, normalized, value);
  }

  static void REGAL_CALL missing_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP3uiv", " not available." );
  }

  PFNGLVERTEXATTRIBP3UIVPROC driver_glVertexAttribP3uiv = NULL;

  static void REGAL_CALL loader_glVertexAttribP3uiv(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    driver_glVertexAttribP3uiv(index, type, normalized, value);
  }

  static void REGAL_CALL missing_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP4ui", " not available." );
  }

  PFNGLVERTEXATTRIBP4UIPROC driver_glVertexAttribP4ui = NULL;

  static void REGAL_CALL loader_glVertexAttribP4ui(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, GLuint value)
  {
    driver_glVertexAttribP4ui(index, type, normalized, value);
  }

  static void REGAL_CALL missing_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(value);
    Warning( "glVertexAttribP4uiv", " not available." );
  }

  PFNGLVERTEXATTRIBP4UIVPROC driver_glVertexAttribP4uiv = NULL;

  static void REGAL_CALL loader_glVertexAttribP4uiv(Layer *_layer, GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
  {
    driver_glVertexAttribP4uiv(index, type, normalized, value);
  }

  static void REGAL_CALL missing_glVertexP2ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP2ui", " not available." );
  }

  PFNGLVERTEXP2UIPROC driver_glVertexP2ui = NULL;

  static void REGAL_CALL loader_glVertexP2ui(Layer *_layer, GLenum type, GLuint coords)
  {
    driver_glVertexP2ui(type, coords);
  }

  static void REGAL_CALL missing_glVertexP2uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP2uiv", " not available." );
  }

  PFNGLVERTEXP2UIVPROC driver_glVertexP2uiv = NULL;

  static void REGAL_CALL loader_glVertexP2uiv(Layer *_layer, GLenum type, const GLuint *coords)
  {
    driver_glVertexP2uiv(type, coords);
  }

  static void REGAL_CALL missing_glVertexP3ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP3ui", " not available." );
  }

  PFNGLVERTEXP3UIPROC driver_glVertexP3ui = NULL;

  static void REGAL_CALL loader_glVertexP3ui(Layer *_layer, GLenum type, GLuint coords)
  {
    driver_glVertexP3ui(type, coords);
  }

  static void REGAL_CALL missing_glVertexP3uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP3uiv", " not available." );
  }

  PFNGLVERTEXP3UIVPROC driver_glVertexP3uiv = NULL;

  static void REGAL_CALL loader_glVertexP3uiv(Layer *_layer, GLenum type, const GLuint *coords)
  {
    driver_glVertexP3uiv(type, coords);
  }

  static void REGAL_CALL missing_glVertexP4ui(GLenum type, GLuint coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP4ui", " not available." );
  }

  PFNGLVERTEXP4UIPROC driver_glVertexP4ui = NULL;

  static void REGAL_CALL loader_glVertexP4ui(Layer *_layer, GLenum type, GLuint coords)
  {
    driver_glVertexP4ui(type, coords);
  }

  static void REGAL_CALL missing_glVertexP4uiv(GLenum type, const GLuint *coords)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexP4uiv", " not available." );
  }

  PFNGLVERTEXP4UIVPROC driver_glVertexP4uiv = NULL;

  static void REGAL_CALL loader_glVertexP4uiv(Layer *_layer, GLenum type, const GLuint *coords)
  {
    driver_glVertexP4uiv(type, coords);
  }

// GL_ARB_viewport_array

  static void REGAL_CALL missing_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glDepthRangeArrayv", " not available." );
  }

  PFNGLDEPTHRANGEARRAYVPROC driver_glDepthRangeArrayv = NULL;

  static void REGAL_CALL loader_glDepthRangeArrayv(Layer *_layer, GLuint first, GLsizei count, const GLclampd *v)
  {
    driver_glDepthRangeArrayv(first, count, v);
  }

  static void REGAL_CALL missing_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glDepthRangeIndexed", " not available." );
  }

  PFNGLDEPTHRANGEINDEXEDPROC driver_glDepthRangeIndexed = NULL;

  static void REGAL_CALL loader_glDepthRangeIndexed(Layer *_layer, GLuint index, GLclampd n, GLclampd f)
  {
    driver_glDepthRangeIndexed(index, n, f);
  }

  static void REGAL_CALL missing_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glGetDoublei_v", " not available." );
  }

  PFNGLGETDOUBLEI_VPROC driver_glGetDoublei_v = NULL;

  static void REGAL_CALL loader_glGetDoublei_v(Layer *_layer, GLenum target, GLuint index, GLdouble *v)
  {
    driver_glGetDoublei_v(target, index, v);
  }

  static void REGAL_CALL missing_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glGetFloati_v", " not available." );
  }

  PFNGLGETFLOATI_VPROC driver_glGetFloati_v = NULL;

  static void REGAL_CALL loader_glGetFloati_v(Layer *_layer, GLenum target, GLuint index, GLfloat *v)
  {
    driver_glGetFloati_v(target, index, v);
  }

  static void REGAL_CALL missing_glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glScissorArrayv", " not available." );
  }

  PFNGLSCISSORARRAYVPROC driver_glScissorArrayv = NULL;

  static void REGAL_CALL loader_glScissorArrayv(Layer *_layer, GLuint first, GLsizei count, const GLint *v)
  {
    driver_glScissorArrayv(first, count, v);
  }

  static void REGAL_CALL missing_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glScissorIndexed", " not available." );
  }

  PFNGLSCISSORINDEXEDPROC driver_glScissorIndexed = NULL;

  static void REGAL_CALL loader_glScissorIndexed(Layer *_layer, GLuint index, GLint left, GLint bottom, GLint width, GLint height)
  {
    driver_glScissorIndexed(index, left, bottom, width, height);
  }

  static void REGAL_CALL missing_glScissorIndexedv(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glScissorIndexedv", " not available." );
  }

  PFNGLSCISSORINDEXEDVPROC driver_glScissorIndexedv = NULL;

  static void REGAL_CALL loader_glScissorIndexedv(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glScissorIndexedv(index, v);
  }

  static void REGAL_CALL missing_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glViewportArrayv", " not available." );
  }

  PFNGLVIEWPORTARRAYVPROC driver_glViewportArrayv = NULL;

  static void REGAL_CALL loader_glViewportArrayv(Layer *_layer, GLuint first, GLsizei count, const GLfloat *v)
  {
    driver_glViewportArrayv(first, count, v);
  }

  static void REGAL_CALL missing_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(w);
    UNUSED_PARAMETER(h);
    Warning( "glViewportIndexedf", " not available." );
  }

  PFNGLVIEWPORTINDEXEDFPROC driver_glViewportIndexedf = NULL;

  static void REGAL_CALL loader_glViewportIndexedf(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
  {
    driver_glViewportIndexedf(index, x, y, w, h);
  }

  static void REGAL_CALL missing_glViewportIndexedfv(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glViewportIndexedfv", " not available." );
  }

  PFNGLVIEWPORTINDEXEDFVPROC driver_glViewportIndexedfv = NULL;

  static void REGAL_CALL loader_glViewportIndexedfv(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glViewportIndexedfv(index, v);
  }

// GL_ARB_window_pos

  static void REGAL_CALL missing_glWindowPos2dARB(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2dARB", " not available." );
  }

  PFNGLWINDOWPOS2DARBPROC driver_glWindowPos2dARB = NULL;

  static void REGAL_CALL loader_glWindowPos2dARB(Layer *_layer, GLdouble x, GLdouble y)
  {
    driver_glWindowPos2dARB(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2dvARB(const GLdouble *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2dvARB", " not available." );
  }

  PFNGLWINDOWPOS2DVARBPROC driver_glWindowPos2dvARB = NULL;

  static void REGAL_CALL loader_glWindowPos2dvARB(Layer *_layer, const GLdouble *p)
  {
    driver_glWindowPos2dvARB(p);
  }

  static void REGAL_CALL missing_glWindowPos2fARB(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2fARB", " not available." );
  }

  PFNGLWINDOWPOS2FARBPROC driver_glWindowPos2fARB = NULL;

  static void REGAL_CALL loader_glWindowPos2fARB(Layer *_layer, GLfloat x, GLfloat y)
  {
    driver_glWindowPos2fARB(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2fvARB(const GLfloat *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2fvARB", " not available." );
  }

  PFNGLWINDOWPOS2FVARBPROC driver_glWindowPos2fvARB = NULL;

  static void REGAL_CALL loader_glWindowPos2fvARB(Layer *_layer, const GLfloat *p)
  {
    driver_glWindowPos2fvARB(p);
  }

  static void REGAL_CALL missing_glWindowPos2iARB(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2iARB", " not available." );
  }

  PFNGLWINDOWPOS2IARBPROC driver_glWindowPos2iARB = NULL;

  static void REGAL_CALL loader_glWindowPos2iARB(Layer *_layer, GLint x, GLint y)
  {
    driver_glWindowPos2iARB(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2ivARB(const GLint *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2ivARB", " not available." );
  }

  PFNGLWINDOWPOS2IVARBPROC driver_glWindowPos2ivARB = NULL;

  static void REGAL_CALL loader_glWindowPos2ivARB(Layer *_layer, const GLint *p)
  {
    driver_glWindowPos2ivARB(p);
  }

  static void REGAL_CALL missing_glWindowPos2sARB(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2sARB", " not available." );
  }

  PFNGLWINDOWPOS2SARBPROC driver_glWindowPos2sARB = NULL;

  static void REGAL_CALL loader_glWindowPos2sARB(Layer *_layer, GLshort x, GLshort y)
  {
    driver_glWindowPos2sARB(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2svARB(const GLshort *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos2svARB", " not available." );
  }

  PFNGLWINDOWPOS2SVARBPROC driver_glWindowPos2svARB = NULL;

  static void REGAL_CALL loader_glWindowPos2svARB(Layer *_layer, const GLshort *p)
  {
    driver_glWindowPos2svARB(p);
  }

  static void REGAL_CALL missing_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3dARB", " not available." );
  }

  PFNGLWINDOWPOS3DARBPROC driver_glWindowPos3dARB = NULL;

  static void REGAL_CALL loader_glWindowPos3dARB(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glWindowPos3dARB(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3dvARB(const GLdouble *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3dvARB", " not available." );
  }

  PFNGLWINDOWPOS3DVARBPROC driver_glWindowPos3dvARB = NULL;

  static void REGAL_CALL loader_glWindowPos3dvARB(Layer *_layer, const GLdouble *p)
  {
    driver_glWindowPos3dvARB(p);
  }

  static void REGAL_CALL missing_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3fARB", " not available." );
  }

  PFNGLWINDOWPOS3FARBPROC driver_glWindowPos3fARB = NULL;

  static void REGAL_CALL loader_glWindowPos3fARB(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glWindowPos3fARB(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3fvARB(const GLfloat *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3fvARB", " not available." );
  }

  PFNGLWINDOWPOS3FVARBPROC driver_glWindowPos3fvARB = NULL;

  static void REGAL_CALL loader_glWindowPos3fvARB(Layer *_layer, const GLfloat *p)
  {
    driver_glWindowPos3fvARB(p);
  }

  static void REGAL_CALL missing_glWindowPos3iARB(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3iARB", " not available." );
  }

  PFNGLWINDOWPOS3IARBPROC driver_glWindowPos3iARB = NULL;

  static void REGAL_CALL loader_glWindowPos3iARB(Layer *_layer, GLint x, GLint y, GLint z)
  {
    driver_glWindowPos3iARB(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3ivARB(const GLint *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3ivARB", " not available." );
  }

  PFNGLWINDOWPOS3IVARBPROC driver_glWindowPos3ivARB = NULL;

  static void REGAL_CALL loader_glWindowPos3ivARB(Layer *_layer, const GLint *p)
  {
    driver_glWindowPos3ivARB(p);
  }

  static void REGAL_CALL missing_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3sARB", " not available." );
  }

  PFNGLWINDOWPOS3SARBPROC driver_glWindowPos3sARB = NULL;

  static void REGAL_CALL loader_glWindowPos3sARB(Layer *_layer, GLshort x, GLshort y, GLshort z)
  {
    driver_glWindowPos3sARB(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3svARB(const GLshort *p)
  {
    UNUSED_PARAMETER(p);
    Warning( "glWindowPos3svARB", " not available." );
  }

  PFNGLWINDOWPOS3SVARBPROC driver_glWindowPos3svARB = NULL;

  static void REGAL_CALL loader_glWindowPos3svARB(Layer *_layer, const GLshort *p)
  {
    driver_glWindowPos3svARB(p);
  }

// GL_ATI_draw_buffers

  static void REGAL_CALL missing_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glDrawBuffersATI", " not available." );
  }

  PFNGLDRAWBUFFERSATIPROC driver_glDrawBuffersATI = NULL;

  static void REGAL_CALL loader_glDrawBuffersATI(Layer *_layer, GLsizei n, const GLenum *bufs)
  {
    driver_glDrawBuffersATI(n, bufs);
  }

// GL_ATI_element_array

  static void REGAL_CALL missing_glDrawElementArrayATI(GLenum mode, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    Warning( "glDrawElementArrayATI", " not available." );
  }

  PFNGLDRAWELEMENTARRAYATIPROC driver_glDrawElementArrayATI = NULL;

  static void REGAL_CALL loader_glDrawElementArrayATI(Layer *_layer, GLenum mode, GLsizei count)
  {
    driver_glDrawElementArrayATI(mode, count);
  }

  static void REGAL_CALL missing_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(count);
    Warning( "glDrawRangeElementArrayATI", " not available." );
  }

  PFNGLDRAWRANGEELEMENTARRAYATIPROC driver_glDrawRangeElementArrayATI = NULL;

  static void REGAL_CALL loader_glDrawRangeElementArrayATI(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count)
  {
    driver_glDrawRangeElementArrayATI(mode, start, end, count);
  }

  static void REGAL_CALL missing_glElementPointerATI(GLenum type, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glElementPointerATI", " not available." );
  }

  PFNGLELEMENTPOINTERATIPROC driver_glElementPointerATI = NULL;

  static void REGAL_CALL loader_glElementPointerATI(Layer *_layer, GLenum type, const GLvoid *pointer)
  {
    driver_glElementPointerATI(type, pointer);
  }

// GL_ATI_envmap_bumpmap

  static void REGAL_CALL missing_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetTexBumpParameterfvATI", " not available." );
  }

  PFNGLGETTEXBUMPPARAMETERFVATIPROC driver_glGetTexBumpParameterfvATI = NULL;

  static void REGAL_CALL loader_glGetTexBumpParameterfvATI(Layer *_layer, GLenum pname, GLfloat *param)
  {
    driver_glGetTexBumpParameterfvATI(pname, param);
  }

  static void REGAL_CALL missing_glGetTexBumpParameterivATI(GLenum pname, GLint *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetTexBumpParameterivATI", " not available." );
  }

  PFNGLGETTEXBUMPPARAMETERIVATIPROC driver_glGetTexBumpParameterivATI = NULL;

  static void REGAL_CALL loader_glGetTexBumpParameterivATI(Layer *_layer, GLenum pname, GLint *param)
  {
    driver_glGetTexBumpParameterivATI(pname, param);
  }

  static void REGAL_CALL missing_glTexBumpParameterfvATI(GLenum pname, const GLfloat *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexBumpParameterfvATI", " not available." );
  }

  PFNGLTEXBUMPPARAMETERFVATIPROC driver_glTexBumpParameterfvATI = NULL;

  static void REGAL_CALL loader_glTexBumpParameterfvATI(Layer *_layer, GLenum pname, const GLfloat *param)
  {
    driver_glTexBumpParameterfvATI(pname, param);
  }

  static void REGAL_CALL missing_glTexBumpParameterivATI(GLenum pname, const GLint *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexBumpParameterivATI", " not available." );
  }

  PFNGLTEXBUMPPARAMETERIVATIPROC driver_glTexBumpParameterivATI = NULL;

  static void REGAL_CALL loader_glTexBumpParameterivATI(Layer *_layer, GLenum pname, const GLint *param)
  {
    driver_glTexBumpParameterivATI(pname, param);
  }

// GL_ATI_fragment_shader

  static void REGAL_CALL missing_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    Warning( "glAlphaFragmentOp1ATI", " not available." );
  }

  PFNGLALPHAFRAGMENTOP1ATIPROC driver_glAlphaFragmentOp1ATI = NULL;

  static void REGAL_CALL loader_glAlphaFragmentOp1ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
  {
    driver_glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
  }

  static void REGAL_CALL missing_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg2Rep);
    UNUSED_PARAMETER(arg2Mod);
    Warning( "glAlphaFragmentOp2ATI", " not available." );
  }

  PFNGLALPHAFRAGMENTOP2ATIPROC driver_glAlphaFragmentOp2ATI = NULL;

  static void REGAL_CALL loader_glAlphaFragmentOp2ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
  {
    driver_glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  }

  static void REGAL_CALL missing_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg2Rep);
    UNUSED_PARAMETER(arg2Mod);
    UNUSED_PARAMETER(arg3);
    UNUSED_PARAMETER(arg3Rep);
    UNUSED_PARAMETER(arg3Mod);
    Warning( "glAlphaFragmentOp3ATI", " not available." );
  }

  PFNGLALPHAFRAGMENTOP3ATIPROC driver_glAlphaFragmentOp3ATI = NULL;

  static void REGAL_CALL loader_glAlphaFragmentOp3ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
  {
    driver_glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  }

  static void REGAL_CALL missing_glBeginFragmentShaderATI(void)
  {
    Warning( "glBeginFragmentShaderATI", " not available." );
  }

  PFNGLBEGINFRAGMENTSHADERATIPROC driver_glBeginFragmentShaderATI = NULL;

  static void REGAL_CALL loader_glBeginFragmentShaderATI(Layer *_layer)
  {
    driver_glBeginFragmentShaderATI();
  }

  static void REGAL_CALL missing_glBindFragmentShaderATI(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glBindFragmentShaderATI", " not available." );
  }

  PFNGLBINDFRAGMENTSHADERATIPROC driver_glBindFragmentShaderATI = NULL;

  static void REGAL_CALL loader_glBindFragmentShaderATI(Layer *_layer, GLuint id)
  {
    driver_glBindFragmentShaderATI(id);
  }

  static void REGAL_CALL missing_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMask);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    Warning( "glColorFragmentOp1ATI", " not available." );
  }

  PFNGLCOLORFRAGMENTOP1ATIPROC driver_glColorFragmentOp1ATI = NULL;

  static void REGAL_CALL loader_glColorFragmentOp1ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
  {
    driver_glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
  }

  static void REGAL_CALL missing_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMask);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg2Rep);
    UNUSED_PARAMETER(arg2Mod);
    Warning( "glColorFragmentOp2ATI", " not available." );
  }

  PFNGLCOLORFRAGMENTOP2ATIPROC driver_glColorFragmentOp2ATI = NULL;

  static void REGAL_CALL loader_glColorFragmentOp2ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
  {
    driver_glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  }

  static void REGAL_CALL missing_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(dstMask);
    UNUSED_PARAMETER(dstMod);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg1Rep);
    UNUSED_PARAMETER(arg1Mod);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg2Rep);
    UNUSED_PARAMETER(arg2Mod);
    UNUSED_PARAMETER(arg3);
    UNUSED_PARAMETER(arg3Rep);
    UNUSED_PARAMETER(arg3Mod);
    Warning( "glColorFragmentOp3ATI", " not available." );
  }

  PFNGLCOLORFRAGMENTOP3ATIPROC driver_glColorFragmentOp3ATI = NULL;

  static void REGAL_CALL loader_glColorFragmentOp3ATI(Layer *_layer, GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
  {
    driver_glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  }

  static void REGAL_CALL missing_glDeleteFragmentShaderATI(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glDeleteFragmentShaderATI", " not available." );
  }

  PFNGLDELETEFRAGMENTSHADERATIPROC driver_glDeleteFragmentShaderATI = NULL;

  static void REGAL_CALL loader_glDeleteFragmentShaderATI(Layer *_layer, GLuint id)
  {
    driver_glDeleteFragmentShaderATI(id);
  }

  static void REGAL_CALL missing_glEndFragmentShaderATI(void)
  {
    Warning( "glEndFragmentShaderATI", " not available." );
  }

  PFNGLENDFRAGMENTSHADERATIPROC driver_glEndFragmentShaderATI = NULL;

  static void REGAL_CALL loader_glEndFragmentShaderATI(Layer *_layer)
  {
    driver_glEndFragmentShaderATI();
  }

  static GLuint REGAL_CALL missing_glGenFragmentShadersATI(GLuint range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenFragmentShadersATI", " not available." );
    return 0;
  }

  PFNGLGENFRAGMENTSHADERSATIPROC driver_glGenFragmentShadersATI = NULL;

  static GLuint REGAL_CALL loader_glGenFragmentShadersATI(Layer *_layer, GLuint range)
  {
    return driver_glGenFragmentShadersATI(range);
  }

  static void REGAL_CALL missing_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
  {
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(swizzle);
    Warning( "glPassTexCoordATI", " not available." );
  }

  PFNGLPASSTEXCOORDATIPROC driver_glPassTexCoordATI = NULL;

  static void REGAL_CALL loader_glPassTexCoordATI(Layer *_layer, GLuint dst, GLuint coord, GLenum swizzle)
  {
    driver_glPassTexCoordATI(dst, coord, swizzle);
  }

  static void REGAL_CALL missing_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
  {
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(interp);
    UNUSED_PARAMETER(swizzle);
    Warning( "glSampleMapATI", " not available." );
  }

  PFNGLSAMPLEMAPATIPROC driver_glSampleMapATI = NULL;

  static void REGAL_CALL loader_glSampleMapATI(Layer *_layer, GLuint dst, GLuint interp, GLenum swizzle)
  {
    driver_glSampleMapATI(dst, interp, swizzle);
  }

  static void REGAL_CALL missing_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
  {
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(value);
    Warning( "glSetFragmentShaderConstantATI", " not available." );
  }

  PFNGLSETFRAGMENTSHADERCONSTANTATIPROC driver_glSetFragmentShaderConstantATI = NULL;

  static void REGAL_CALL loader_glSetFragmentShaderConstantATI(Layer *_layer, GLuint dst, const GLfloat *value)
  {
    driver_glSetFragmentShaderConstantATI(dst, value);
  }

// GL_ATI_map_object_buffer

  static GLvoid *REGAL_CALL missing_glMapObjectBufferATI(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glMapObjectBufferATI", " not available." );
    return NULL;
  }

  PFNGLMAPOBJECTBUFFERATIPROC driver_glMapObjectBufferATI = NULL;

  static GLvoid *REGAL_CALL loader_glMapObjectBufferATI(Layer *_layer, GLuint buffer)
  {
    return driver_glMapObjectBufferATI(buffer);
  }

  static void REGAL_CALL missing_glUnmapObjectBufferATI(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glUnmapObjectBufferATI", " not available." );
  }

  PFNGLUNMAPOBJECTBUFFERATIPROC driver_glUnmapObjectBufferATI = NULL;

  static void REGAL_CALL loader_glUnmapObjectBufferATI(Layer *_layer, GLuint buffer)
  {
    driver_glUnmapObjectBufferATI(buffer);
  }

// GL_ATI_pn_triangles

  static void REGAL_CALL missing_glPNTrianglesfATI(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPNTrianglesfATI", " not available." );
  }

  PFNGLPNTRIANGLESFATIPROC driver_glPNTrianglesfATI = NULL;

  static void REGAL_CALL loader_glPNTrianglesfATI(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glPNTrianglesfATI(pname, param);
  }

  static void REGAL_CALL missing_glPNTrianglesiATI(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPNTrianglesiATI", " not available." );
  }

  PFNGLPNTRIANGLESIATIPROC driver_glPNTrianglesiATI = NULL;

  static void REGAL_CALL loader_glPNTrianglesiATI(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glPNTrianglesiATI(pname, param);
  }

// GL_ATI_separate_stencil

  static void REGAL_CALL missing_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
  {
    UNUSED_PARAMETER(frontfunc);
    UNUSED_PARAMETER(backfunc);
    UNUSED_PARAMETER(ref);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilFuncSeparateATI", " not available." );
  }

  PFNGLSTENCILFUNCSEPARATEATIPROC driver_glStencilFuncSeparateATI = NULL;

  static void REGAL_CALL loader_glStencilFuncSeparateATI(Layer *_layer, GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
  {
    driver_glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
  }

  static void REGAL_CALL missing_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(sfail);
    UNUSED_PARAMETER(dpfail);
    UNUSED_PARAMETER(dppass);
    Warning( "glStencilOpSeparateATI", " not available." );
  }

  PFNGLSTENCILOPSEPARATEATIPROC driver_glStencilOpSeparateATI = NULL;

  static void REGAL_CALL loader_glStencilOpSeparateATI(Layer *_layer, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
  {
    driver_glStencilOpSeparateATI(face, sfail, dpfail, dppass);
  }

// GL_ATI_vertex_array_object

  static void REGAL_CALL missing_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glArrayObjectATI", " not available." );
  }

  PFNGLARRAYOBJECTATIPROC driver_glArrayObjectATI = NULL;

  static void REGAL_CALL loader_glArrayObjectATI(Layer *_layer, GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
  {
    driver_glArrayObjectATI(array, size, type, stride, buffer, offset);
  }

  static void REGAL_CALL missing_glFreeObjectBufferATI(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glFreeObjectBufferATI", " not available." );
  }

  PFNGLFREEOBJECTBUFFERATIPROC driver_glFreeObjectBufferATI = NULL;

  static void REGAL_CALL loader_glFreeObjectBufferATI(Layer *_layer, GLuint buffer)
  {
    driver_glFreeObjectBufferATI(buffer);
  }

  static void REGAL_CALL missing_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetArrayObjectfvATI", " not available." );
  }

  PFNGLGETARRAYOBJECTFVATIPROC driver_glGetArrayObjectfvATI = NULL;

  static void REGAL_CALL loader_glGetArrayObjectfvATI(Layer *_layer, GLenum array, GLenum pname, GLfloat *params)
  {
    driver_glGetArrayObjectfvATI(array, pname, params);
  }

  static void REGAL_CALL missing_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetArrayObjectivATI", " not available." );
  }

  PFNGLGETARRAYOBJECTIVATIPROC driver_glGetArrayObjectivATI = NULL;

  static void REGAL_CALL loader_glGetArrayObjectivATI(Layer *_layer, GLenum array, GLenum pname, GLint *params)
  {
    driver_glGetArrayObjectivATI(array, pname, params);
  }

  static void REGAL_CALL missing_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectBufferfvATI", " not available." );
  }

  PFNGLGETOBJECTBUFFERFVATIPROC driver_glGetObjectBufferfvATI = NULL;

  static void REGAL_CALL loader_glGetObjectBufferfvATI(Layer *_layer, GLuint buffer, GLenum pname, GLfloat *params)
  {
    driver_glGetObjectBufferfvATI(buffer, pname, params);
  }

  static void REGAL_CALL missing_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetObjectBufferivATI", " not available." );
  }

  PFNGLGETOBJECTBUFFERIVATIPROC driver_glGetObjectBufferivATI = NULL;

  static void REGAL_CALL loader_glGetObjectBufferivATI(Layer *_layer, GLuint buffer, GLenum pname, GLint *params)
  {
    driver_glGetObjectBufferivATI(buffer, pname, params);
  }

  static void REGAL_CALL missing_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVariantArrayObjectfvATI", " not available." );
  }

  PFNGLGETVARIANTARRAYOBJECTFVATIPROC driver_glGetVariantArrayObjectfvATI = NULL;

  static void REGAL_CALL loader_glGetVariantArrayObjectfvATI(Layer *_layer, GLuint id, GLenum pname, GLfloat *params)
  {
    driver_glGetVariantArrayObjectfvATI(id, pname, params);
  }

  static void REGAL_CALL missing_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVariantArrayObjectivATI", " not available." );
  }

  PFNGLGETVARIANTARRAYOBJECTIVATIPROC driver_glGetVariantArrayObjectivATI = NULL;

  static void REGAL_CALL loader_glGetVariantArrayObjectivATI(Layer *_layer, GLuint id, GLenum pname, GLint *params)
  {
    driver_glGetVariantArrayObjectivATI(id, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsObjectBufferATI(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glIsObjectBufferATI", " not available." );
    return GL_FALSE;
  }

  PFNGLISOBJECTBUFFERATIPROC driver_glIsObjectBufferATI = NULL;

  static GLboolean REGAL_CALL loader_glIsObjectBufferATI(Layer *_layer, GLuint buffer)
  {
    return driver_glIsObjectBufferATI(buffer);
  }

  static GLuint REGAL_CALL missing_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(usage);
    Warning( "glNewObjectBufferATI", " not available." );
    return 0;
  }

  PFNGLNEWOBJECTBUFFERATIPROC driver_glNewObjectBufferATI = NULL;

  static GLuint REGAL_CALL loader_glNewObjectBufferATI(Layer *_layer, GLsizei size, const GLvoid *pointer, GLenum usage)
  {
    return driver_glNewObjectBufferATI(size, pointer, usage);
  }

  static void REGAL_CALL missing_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(preserve);
    Warning( "glUpdateObjectBufferATI", " not available." );
  }

  PFNGLUPDATEOBJECTBUFFERATIPROC driver_glUpdateObjectBufferATI = NULL;

  static void REGAL_CALL loader_glUpdateObjectBufferATI(Layer *_layer, GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
  {
    driver_glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
  }

  static void REGAL_CALL missing_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glVariantArrayObjectATI", " not available." );
  }

  PFNGLVARIANTARRAYOBJECTATIPROC driver_glVariantArrayObjectATI = NULL;

  static void REGAL_CALL loader_glVariantArrayObjectATI(Layer *_layer, GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
  {
    driver_glVariantArrayObjectATI(id, type, stride, buffer, offset);
  }

// GL_ATI_vertex_attrib_array_object

  static void REGAL_CALL missing_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribArrayObjectfvATI", " not available." );
  }

  PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC driver_glGetVertexAttribArrayObjectfvATI = NULL;

  static void REGAL_CALL loader_glGetVertexAttribArrayObjectfvATI(Layer *_layer, GLuint index, GLenum pname, GLfloat *params)
  {
    driver_glGetVertexAttribArrayObjectfvATI(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribArrayObjectivATI", " not available." );
  }

  PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC driver_glGetVertexAttribArrayObjectivATI = NULL;

  static void REGAL_CALL loader_glGetVertexAttribArrayObjectivATI(Layer *_layer, GLuint index, GLenum pname, GLint *params)
  {
    driver_glGetVertexAttribArrayObjectivATI(index, pname, params);
  }

  static void REGAL_CALL missing_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexAttribArrayObjectATI", " not available." );
  }

  PFNGLVERTEXATTRIBARRAYOBJECTATIPROC driver_glVertexAttribArrayObjectATI = NULL;

  static void REGAL_CALL loader_glVertexAttribArrayObjectATI(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
  {
    driver_glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
  }

// GL_ATI_vertex_streams

  static void REGAL_CALL missing_glClientActiveVertexStreamATI(GLenum stream)
  {
    UNUSED_PARAMETER(stream);
    Warning( "glClientActiveVertexStreamATI", " not available." );
  }

  PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC driver_glClientActiveVertexStreamATI = NULL;

  static void REGAL_CALL loader_glClientActiveVertexStreamATI(Layer *_layer, GLenum stream)
  {
    driver_glClientActiveVertexStreamATI(stream);
  }

  static void REGAL_CALL missing_glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3bATI", " not available." );
  }

  PFNGLNORMALSTREAM3BATIPROC driver_glNormalStream3bATI = NULL;

  static void REGAL_CALL loader_glNormalStream3bATI(Layer *_layer, GLenum stream, GLbyte x, GLbyte y, GLbyte z)
  {
    driver_glNormalStream3bATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3bvATI", " not available." );
  }

  PFNGLNORMALSTREAM3BVATIPROC driver_glNormalStream3bvATI = NULL;

  static void REGAL_CALL loader_glNormalStream3bvATI(Layer *_layer, GLenum stream, const GLbyte *coords)
  {
    driver_glNormalStream3bvATI(stream, coords);
  }

  static void REGAL_CALL missing_glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3dATI", " not available." );
  }

  PFNGLNORMALSTREAM3DATIPROC driver_glNormalStream3dATI = NULL;

  static void REGAL_CALL loader_glNormalStream3dATI(Layer *_layer, GLenum stream, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glNormalStream3dATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3dvATI", " not available." );
  }

  PFNGLNORMALSTREAM3DVATIPROC driver_glNormalStream3dvATI = NULL;

  static void REGAL_CALL loader_glNormalStream3dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
  {
    driver_glNormalStream3dvATI(stream, coords);
  }

  static void REGAL_CALL missing_glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3fATI", " not available." );
  }

  PFNGLNORMALSTREAM3FATIPROC driver_glNormalStream3fATI = NULL;

  static void REGAL_CALL loader_glNormalStream3fATI(Layer *_layer, GLenum stream, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glNormalStream3fATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3fvATI", " not available." );
  }

  PFNGLNORMALSTREAM3FVATIPROC driver_glNormalStream3fvATI = NULL;

  static void REGAL_CALL loader_glNormalStream3fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
  {
    driver_glNormalStream3fvATI(stream, coords);
  }

  static void REGAL_CALL missing_glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3iATI", " not available." );
  }

  PFNGLNORMALSTREAM3IATIPROC driver_glNormalStream3iATI = NULL;

  static void REGAL_CALL loader_glNormalStream3iATI(Layer *_layer, GLenum stream, GLint x, GLint y, GLint z)
  {
    driver_glNormalStream3iATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glNormalStream3ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3ivATI", " not available." );
  }

  PFNGLNORMALSTREAM3IVATIPROC driver_glNormalStream3ivATI = NULL;

  static void REGAL_CALL loader_glNormalStream3ivATI(Layer *_layer, GLenum stream, const GLint *coords)
  {
    driver_glNormalStream3ivATI(stream, coords);
  }

  static void REGAL_CALL missing_glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormalStream3sATI", " not available." );
  }

  PFNGLNORMALSTREAM3SATIPROC driver_glNormalStream3sATI = NULL;

  static void REGAL_CALL loader_glNormalStream3sATI(Layer *_layer, GLenum stream, GLshort x, GLshort y, GLshort z)
  {
    driver_glNormalStream3sATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glNormalStream3svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glNormalStream3svATI", " not available." );
  }

  PFNGLNORMALSTREAM3SVATIPROC driver_glNormalStream3svATI = NULL;

  static void REGAL_CALL loader_glNormalStream3svATI(Layer *_layer, GLenum stream, const GLshort *coords)
  {
    driver_glNormalStream3svATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glVertexBlendEnvfATI", " not available." );
  }

  PFNGLVERTEXBLENDENVFATIPROC driver_glVertexBlendEnvfATI = NULL;

  static void REGAL_CALL loader_glVertexBlendEnvfATI(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glVertexBlendEnvfATI(pname, param);
  }

  static void REGAL_CALL missing_glVertexBlendEnviATI(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glVertexBlendEnviATI", " not available." );
  }

  PFNGLVERTEXBLENDENVIATIPROC driver_glVertexBlendEnviATI = NULL;

  static void REGAL_CALL loader_glVertexBlendEnviATI(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glVertexBlendEnviATI(pname, param);
  }

  static void REGAL_CALL missing_glVertexStream1dATI(GLenum stream, GLdouble x)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    Warning( "glVertexStream1dATI", " not available." );
  }

  PFNGLVERTEXSTREAM1DATIPROC driver_glVertexStream1dATI = NULL;

  static void REGAL_CALL loader_glVertexStream1dATI(Layer *_layer, GLenum stream, GLdouble x)
  {
    driver_glVertexStream1dATI(stream, x);
  }

  static void REGAL_CALL missing_glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream1dvATI", " not available." );
  }

  PFNGLVERTEXSTREAM1DVATIPROC driver_glVertexStream1dvATI = NULL;

  static void REGAL_CALL loader_glVertexStream1dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
  {
    driver_glVertexStream1dvATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream1fATI(GLenum stream, GLfloat x)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    Warning( "glVertexStream1fATI", " not available." );
  }

  PFNGLVERTEXSTREAM1FATIPROC driver_glVertexStream1fATI = NULL;

  static void REGAL_CALL loader_glVertexStream1fATI(Layer *_layer, GLenum stream, GLfloat x)
  {
    driver_glVertexStream1fATI(stream, x);
  }

  static void REGAL_CALL missing_glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream1fvATI", " not available." );
  }

  PFNGLVERTEXSTREAM1FVATIPROC driver_glVertexStream1fvATI = NULL;

  static void REGAL_CALL loader_glVertexStream1fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
  {
    driver_glVertexStream1fvATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream1iATI(GLenum stream, GLint x)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    Warning( "glVertexStream1iATI", " not available." );
  }

  PFNGLVERTEXSTREAM1IATIPROC driver_glVertexStream1iATI = NULL;

  static void REGAL_CALL loader_glVertexStream1iATI(Layer *_layer, GLenum stream, GLint x)
  {
    driver_glVertexStream1iATI(stream, x);
  }

  static void REGAL_CALL missing_glVertexStream1ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream1ivATI", " not available." );
  }

  PFNGLVERTEXSTREAM1IVATIPROC driver_glVertexStream1ivATI = NULL;

  static void REGAL_CALL loader_glVertexStream1ivATI(Layer *_layer, GLenum stream, const GLint *coords)
  {
    driver_glVertexStream1ivATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream1sATI(GLenum stream, GLshort x)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    Warning( "glVertexStream1sATI", " not available." );
  }

  PFNGLVERTEXSTREAM1SATIPROC driver_glVertexStream1sATI = NULL;

  static void REGAL_CALL loader_glVertexStream1sATI(Layer *_layer, GLenum stream, GLshort x)
  {
    driver_glVertexStream1sATI(stream, x);
  }

  static void REGAL_CALL missing_glVertexStream1svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream1svATI", " not available." );
  }

  PFNGLVERTEXSTREAM1SVATIPROC driver_glVertexStream1svATI = NULL;

  static void REGAL_CALL loader_glVertexStream1svATI(Layer *_layer, GLenum stream, const GLshort *coords)
  {
    driver_glVertexStream1svATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexStream2dATI", " not available." );
  }

  PFNGLVERTEXSTREAM2DATIPROC driver_glVertexStream2dATI = NULL;

  static void REGAL_CALL loader_glVertexStream2dATI(Layer *_layer, GLenum stream, GLdouble x, GLdouble y)
  {
    driver_glVertexStream2dATI(stream, x, y);
  }

  static void REGAL_CALL missing_glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream2dvATI", " not available." );
  }

  PFNGLVERTEXSTREAM2DVATIPROC driver_glVertexStream2dvATI = NULL;

  static void REGAL_CALL loader_glVertexStream2dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
  {
    driver_glVertexStream2dvATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexStream2fATI", " not available." );
  }

  PFNGLVERTEXSTREAM2FATIPROC driver_glVertexStream2fATI = NULL;

  static void REGAL_CALL loader_glVertexStream2fATI(Layer *_layer, GLenum stream, GLfloat x, GLfloat y)
  {
    driver_glVertexStream2fATI(stream, x, y);
  }

  static void REGAL_CALL missing_glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream2fvATI", " not available." );
  }

  PFNGLVERTEXSTREAM2FVATIPROC driver_glVertexStream2fvATI = NULL;

  static void REGAL_CALL loader_glVertexStream2fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
  {
    driver_glVertexStream2fvATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexStream2iATI", " not available." );
  }

  PFNGLVERTEXSTREAM2IATIPROC driver_glVertexStream2iATI = NULL;

  static void REGAL_CALL loader_glVertexStream2iATI(Layer *_layer, GLenum stream, GLint x, GLint y)
  {
    driver_glVertexStream2iATI(stream, x, y);
  }

  static void REGAL_CALL missing_glVertexStream2ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream2ivATI", " not available." );
  }

  PFNGLVERTEXSTREAM2IVATIPROC driver_glVertexStream2ivATI = NULL;

  static void REGAL_CALL loader_glVertexStream2ivATI(Layer *_layer, GLenum stream, const GLint *coords)
  {
    driver_glVertexStream2ivATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexStream2sATI", " not available." );
  }

  PFNGLVERTEXSTREAM2SATIPROC driver_glVertexStream2sATI = NULL;

  static void REGAL_CALL loader_glVertexStream2sATI(Layer *_layer, GLenum stream, GLshort x, GLshort y)
  {
    driver_glVertexStream2sATI(stream, x, y);
  }

  static void REGAL_CALL missing_glVertexStream2svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream2svATI", " not available." );
  }

  PFNGLVERTEXSTREAM2SVATIPROC driver_glVertexStream2svATI = NULL;

  static void REGAL_CALL loader_glVertexStream2svATI(Layer *_layer, GLenum stream, const GLshort *coords)
  {
    driver_glVertexStream2svATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexStream3dATI", " not available." );
  }

  PFNGLVERTEXSTREAM3DATIPROC driver_glVertexStream3dATI = NULL;

  static void REGAL_CALL loader_glVertexStream3dATI(Layer *_layer, GLenum stream, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glVertexStream3dATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream3dvATI", " not available." );
  }

  PFNGLVERTEXSTREAM3DVATIPROC driver_glVertexStream3dvATI = NULL;

  static void REGAL_CALL loader_glVertexStream3dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
  {
    driver_glVertexStream3dvATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexStream3fATI", " not available." );
  }

  PFNGLVERTEXSTREAM3FATIPROC driver_glVertexStream3fATI = NULL;

  static void REGAL_CALL loader_glVertexStream3fATI(Layer *_layer, GLenum stream, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glVertexStream3fATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream3fvATI", " not available." );
  }

  PFNGLVERTEXSTREAM3FVATIPROC driver_glVertexStream3fvATI = NULL;

  static void REGAL_CALL loader_glVertexStream3fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
  {
    driver_glVertexStream3fvATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexStream3iATI", " not available." );
  }

  PFNGLVERTEXSTREAM3IATIPROC driver_glVertexStream3iATI = NULL;

  static void REGAL_CALL loader_glVertexStream3iATI(Layer *_layer, GLenum stream, GLint x, GLint y, GLint z)
  {
    driver_glVertexStream3iATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glVertexStream3ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream3ivATI", " not available." );
  }

  PFNGLVERTEXSTREAM3IVATIPROC driver_glVertexStream3ivATI = NULL;

  static void REGAL_CALL loader_glVertexStream3ivATI(Layer *_layer, GLenum stream, const GLint *coords)
  {
    driver_glVertexStream3ivATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexStream3sATI", " not available." );
  }

  PFNGLVERTEXSTREAM3SATIPROC driver_glVertexStream3sATI = NULL;

  static void REGAL_CALL loader_glVertexStream3sATI(Layer *_layer, GLenum stream, GLshort x, GLshort y, GLshort z)
  {
    driver_glVertexStream3sATI(stream, x, y, z);
  }

  static void REGAL_CALL missing_glVertexStream3svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream3svATI", " not available." );
  }

  PFNGLVERTEXSTREAM3SVATIPROC driver_glVertexStream3svATI = NULL;

  static void REGAL_CALL loader_glVertexStream3svATI(Layer *_layer, GLenum stream, const GLshort *coords)
  {
    driver_glVertexStream3svATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexStream4dATI", " not available." );
  }

  PFNGLVERTEXSTREAM4DATIPROC driver_glVertexStream4dATI = NULL;

  static void REGAL_CALL loader_glVertexStream4dATI(Layer *_layer, GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glVertexStream4dATI(stream, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream4dvATI", " not available." );
  }

  PFNGLVERTEXSTREAM4DVATIPROC driver_glVertexStream4dvATI = NULL;

  static void REGAL_CALL loader_glVertexStream4dvATI(Layer *_layer, GLenum stream, const GLdouble *coords)
  {
    driver_glVertexStream4dvATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexStream4fATI", " not available." );
  }

  PFNGLVERTEXSTREAM4FATIPROC driver_glVertexStream4fATI = NULL;

  static void REGAL_CALL loader_glVertexStream4fATI(Layer *_layer, GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glVertexStream4fATI(stream, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream4fvATI", " not available." );
  }

  PFNGLVERTEXSTREAM4FVATIPROC driver_glVertexStream4fvATI = NULL;

  static void REGAL_CALL loader_glVertexStream4fvATI(Layer *_layer, GLenum stream, const GLfloat *coords)
  {
    driver_glVertexStream4fvATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexStream4iATI", " not available." );
  }

  PFNGLVERTEXSTREAM4IATIPROC driver_glVertexStream4iATI = NULL;

  static void REGAL_CALL loader_glVertexStream4iATI(Layer *_layer, GLenum stream, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glVertexStream4iATI(stream, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexStream4ivATI(GLenum stream, const GLint *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream4ivATI", " not available." );
  }

  PFNGLVERTEXSTREAM4IVATIPROC driver_glVertexStream4ivATI = NULL;

  static void REGAL_CALL loader_glVertexStream4ivATI(Layer *_layer, GLenum stream, const GLint *coords)
  {
    driver_glVertexStream4ivATI(stream, coords);
  }

  static void REGAL_CALL missing_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexStream4sATI", " not available." );
  }

  PFNGLVERTEXSTREAM4SATIPROC driver_glVertexStream4sATI = NULL;

  static void REGAL_CALL loader_glVertexStream4sATI(Layer *_layer, GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    driver_glVertexStream4sATI(stream, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexStream4svATI(GLenum stream, const GLshort *coords)
  {
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(coords);
    Warning( "glVertexStream4svATI", " not available." );
  }

  PFNGLVERTEXSTREAM4SVATIPROC driver_glVertexStream4svATI = NULL;

  static void REGAL_CALL loader_glVertexStream4svATI(Layer *_layer, GLenum stream, const GLshort *coords)
  {
    driver_glVertexStream4svATI(stream, coords);
  }

// GL_EXT_bindable_uniform

  static GLint REGAL_CALL missing_glGetUniformBufferSizeEXT(GLuint program, GLint location)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    Warning( "glGetUniformBufferSizeEXT", " not available." );
    return 0;
  }

  PFNGLGETUNIFORMBUFFERSIZEEXTPROC driver_glGetUniformBufferSizeEXT = NULL;

  static GLint REGAL_CALL loader_glGetUniformBufferSizeEXT(Layer *_layer, GLuint program, GLint location)
  {
    return driver_glGetUniformBufferSizeEXT(program, location);
  }

  static GLintptr REGAL_CALL missing_glGetUniformOffsetEXT(GLuint program, GLint location)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    Warning( "glGetUniformOffsetEXT", " not available." );
    return 0;
  }

  PFNGLGETUNIFORMOFFSETEXTPROC driver_glGetUniformOffsetEXT = NULL;

  static GLintptr REGAL_CALL loader_glGetUniformOffsetEXT(Layer *_layer, GLuint program, GLint location)
  {
    return driver_glGetUniformOffsetEXT(program, location);
  }

  static void REGAL_CALL missing_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(buffer);
    Warning( "glUniformBufferEXT", " not available." );
  }

  PFNGLUNIFORMBUFFEREXTPROC driver_glUniformBufferEXT = NULL;

  static void REGAL_CALL loader_glUniformBufferEXT(Layer *_layer, GLuint program, GLint location, GLuint buffer)
  {
    driver_glUniformBufferEXT(program, location, buffer);
  }

// GL_EXT_blend_color

  static void REGAL_CALL missing_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glBlendColorEXT", " not available." );
  }

  PFNGLBLENDCOLOREXTPROC driver_glBlendColorEXT = NULL;

  static void REGAL_CALL loader_glBlendColorEXT(Layer *_layer, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
  {
    driver_glBlendColorEXT(red, green, blue, alpha);
  }

// GL_EXT_blend_equation_separate

  static void REGAL_CALL missing_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparateEXT", " not available." );
  }

  PFNGLBLENDEQUATIONSEPARATEEXTPROC driver_glBlendEquationSeparateEXT = NULL;

  static void REGAL_CALL loader_glBlendEquationSeparateEXT(Layer *_layer, GLenum modeRGB, GLenum modeAlpha)
  {
    driver_glBlendEquationSeparateEXT(modeRGB, modeAlpha);
  }

// GL_EXT_blend_func_separate

  static void REGAL_CALL missing_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    UNUSED_PARAMETER(sfactorRGB);
    UNUSED_PARAMETER(dfactorRGB);
    UNUSED_PARAMETER(sfactorAlpha);
    UNUSED_PARAMETER(dfactorAlpha);
    Warning( "glBlendFuncSeparateEXT", " not available." );
  }

  PFNGLBLENDFUNCSEPARATEEXTPROC driver_glBlendFuncSeparateEXT = NULL;

  static void REGAL_CALL loader_glBlendFuncSeparateEXT(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    driver_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }

// GL_EXT_blend_minmax

  static void REGAL_CALL missing_glBlendEquationEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationEXT", " not available." );
  }

  PFNGLBLENDEQUATIONEXTPROC driver_glBlendEquationEXT = NULL;

  static void REGAL_CALL loader_glBlendEquationEXT(Layer *_layer, GLenum mode)
  {
    driver_glBlendEquationEXT(mode);
  }

// GL_EXT_color_subtable

  static void REGAL_CALL missing_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glColorSubTableEXT", " not available." );
  }

  PFNGLCOLORSUBTABLEEXTPROC driver_glColorSubTableEXT = NULL;

  static void REGAL_CALL loader_glColorSubTableEXT(Layer *_layer, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
  {
    driver_glColorSubTableEXT(target, start, count, format, type, table);
  }

  static void REGAL_CALL missing_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyColorSubTableEXT", " not available." );
  }

  PFNGLCOPYCOLORSUBTABLEEXTPROC driver_glCopyColorSubTableEXT = NULL;

  static void REGAL_CALL loader_glCopyColorSubTableEXT(Layer *_layer, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyColorSubTableEXT(target, start, x, y, width);
  }

// GL_EXT_compiled_vertex_array

  static void REGAL_CALL missing_glLockArraysEXT(GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glLockArraysEXT", " not available." );
  }

  PFNGLLOCKARRAYSEXTPROC driver_glLockArraysEXT = NULL;

  static void REGAL_CALL loader_glLockArraysEXT(Layer *_layer, GLint first, GLsizei count)
  {
    driver_glLockArraysEXT(first, count);
  }

  static void REGAL_CALL missing_glUnlockArraysEXT(void)
  {
    Warning( "glUnlockArraysEXT", " not available." );
  }

  PFNGLUNLOCKARRAYSEXTPROC driver_glUnlockArraysEXT = NULL;

  static void REGAL_CALL loader_glUnlockArraysEXT(Layer *_layer)
  {
    driver_glUnlockArraysEXT();
  }

// GL_EXT_convolution

  static void REGAL_CALL missing_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glConvolutionFilter1DEXT", " not available." );
  }

  PFNGLCONVOLUTIONFILTER1DEXTPROC driver_glConvolutionFilter1DEXT = NULL;

  static void REGAL_CALL loader_glConvolutionFilter1DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
  {
    driver_glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
  }

  static void REGAL_CALL missing_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glConvolutionFilter2DEXT", " not available." );
  }

  PFNGLCONVOLUTIONFILTER2DEXTPROC driver_glConvolutionFilter2DEXT = NULL;

  static void REGAL_CALL loader_glConvolutionFilter2DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
  {
    driver_glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
  }

  static void REGAL_CALL missing_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glConvolutionParameterfEXT", " not available." );
  }

  PFNGLCONVOLUTIONPARAMETERFEXTPROC driver_glConvolutionParameterfEXT = NULL;

  static void REGAL_CALL loader_glConvolutionParameterfEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
  {
    driver_glConvolutionParameterfEXT(target, pname, param);
  }

  static void REGAL_CALL missing_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameterfvEXT", " not available." );
  }

  PFNGLCONVOLUTIONPARAMETERFVEXTPROC driver_glConvolutionParameterfvEXT = NULL;

  static void REGAL_CALL loader_glConvolutionParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glConvolutionParameterfvEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glConvolutionParameteriEXT", " not available." );
  }

  PFNGLCONVOLUTIONPARAMETERIEXTPROC driver_glConvolutionParameteriEXT = NULL;

  static void REGAL_CALL loader_glConvolutionParameteriEXT(Layer *_layer, GLenum target, GLenum pname, GLint param)
  {
    driver_glConvolutionParameteriEXT(target, pname, param);
  }

  static void REGAL_CALL missing_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glConvolutionParameterivEXT", " not available." );
  }

  PFNGLCONVOLUTIONPARAMETERIVEXTPROC driver_glConvolutionParameterivEXT = NULL;

  static void REGAL_CALL loader_glConvolutionParameterivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glConvolutionParameterivEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyConvolutionFilter1DEXT", " not available." );
  }

  PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC driver_glCopyConvolutionFilter1DEXT = NULL;

  static void REGAL_CALL loader_glCopyConvolutionFilter1DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
  }

  static void REGAL_CALL missing_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyConvolutionFilter2DEXT", " not available." );
  }

  PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC driver_glCopyConvolutionFilter2DEXT = NULL;

  static void REGAL_CALL loader_glCopyConvolutionFilter2DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
  }

  static void REGAL_CALL missing_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(image);
    Warning( "glGetConvolutionFilterEXT", " not available." );
  }

  PFNGLGETCONVOLUTIONFILTEREXTPROC driver_glGetConvolutionFilterEXT = NULL;

  static void REGAL_CALL loader_glGetConvolutionFilterEXT(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *image)
  {
    driver_glGetConvolutionFilterEXT(target, format, type, image);
  }

  static void REGAL_CALL missing_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetConvolutionParameterfvEXT", " not available." );
  }

  PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC driver_glGetConvolutionParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetConvolutionParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetConvolutionParameterfvEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetConvolutionParameterivEXT", " not available." );
  }

  PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC driver_glGetConvolutionParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetConvolutionParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetConvolutionParameterivEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(column);
    UNUSED_PARAMETER(span);
    Warning( "glGetSeparableFilterEXT", " not available." );
  }

  PFNGLGETSEPARABLEFILTEREXTPROC driver_glGetSeparableFilterEXT = NULL;

  static void REGAL_CALL loader_glGetSeparableFilterEXT(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
  {
    driver_glGetSeparableFilterEXT(target, format, type, row, column, span);
  }

  static void REGAL_CALL missing_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(row);
    UNUSED_PARAMETER(column);
    Warning( "glSeparableFilter2DEXT", " not available." );
  }

  PFNGLSEPARABLEFILTER2DEXTPROC driver_glSeparableFilter2DEXT = NULL;

  static void REGAL_CALL loader_glSeparableFilter2DEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
  {
    driver_glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
  }

// GL_EXT_coordinate_frame

  static void REGAL_CALL missing_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3bEXT", " not available." );
  }

  PFNGLBINORMAL3BEXTPROC driver_glBinormal3bEXT = NULL;

  static void REGAL_CALL loader_glBinormal3bEXT(Layer *_layer, GLbyte bx, GLbyte by, GLbyte bz)
  {
    driver_glBinormal3bEXT(bx, by, bz);
  }

  static void REGAL_CALL missing_glBinormal3bvEXT(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3bvEXT", " not available." );
  }

  PFNGLBINORMAL3BVEXTPROC driver_glBinormal3bvEXT = NULL;

  static void REGAL_CALL loader_glBinormal3bvEXT(Layer *_layer, const GLbyte *v)
  {
    driver_glBinormal3bvEXT(v);
  }

  static void REGAL_CALL missing_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3dEXT", " not available." );
  }

  PFNGLBINORMAL3DEXTPROC driver_glBinormal3dEXT = NULL;

  static void REGAL_CALL loader_glBinormal3dEXT(Layer *_layer, GLdouble bx, GLdouble by, GLdouble bz)
  {
    driver_glBinormal3dEXT(bx, by, bz);
  }

  static void REGAL_CALL missing_glBinormal3dvEXT(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3dvEXT", " not available." );
  }

  PFNGLBINORMAL3DVEXTPROC driver_glBinormal3dvEXT = NULL;

  static void REGAL_CALL loader_glBinormal3dvEXT(Layer *_layer, const GLdouble *v)
  {
    driver_glBinormal3dvEXT(v);
  }

  static void REGAL_CALL missing_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3fEXT", " not available." );
  }

  PFNGLBINORMAL3FEXTPROC driver_glBinormal3fEXT = NULL;

  static void REGAL_CALL loader_glBinormal3fEXT(Layer *_layer, GLfloat bx, GLfloat by, GLfloat bz)
  {
    driver_glBinormal3fEXT(bx, by, bz);
  }

  static void REGAL_CALL missing_glBinormal3fvEXT(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3fvEXT", " not available." );
  }

  PFNGLBINORMAL3FVEXTPROC driver_glBinormal3fvEXT = NULL;

  static void REGAL_CALL loader_glBinormal3fvEXT(Layer *_layer, const GLfloat *v)
  {
    driver_glBinormal3fvEXT(v);
  }

  static void REGAL_CALL missing_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3iEXT", " not available." );
  }

  PFNGLBINORMAL3IEXTPROC driver_glBinormal3iEXT = NULL;

  static void REGAL_CALL loader_glBinormal3iEXT(Layer *_layer, GLint bx, GLint by, GLint bz)
  {
    driver_glBinormal3iEXT(bx, by, bz);
  }

  static void REGAL_CALL missing_glBinormal3ivEXT(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3ivEXT", " not available." );
  }

  PFNGLBINORMAL3IVEXTPROC driver_glBinormal3ivEXT = NULL;

  static void REGAL_CALL loader_glBinormal3ivEXT(Layer *_layer, const GLint *v)
  {
    driver_glBinormal3ivEXT(v);
  }

  static void REGAL_CALL missing_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
  {
    UNUSED_PARAMETER(bx);
    UNUSED_PARAMETER(by);
    UNUSED_PARAMETER(bz);
    Warning( "glBinormal3sEXT", " not available." );
  }

  PFNGLBINORMAL3SEXTPROC driver_glBinormal3sEXT = NULL;

  static void REGAL_CALL loader_glBinormal3sEXT(Layer *_layer, GLshort bx, GLshort by, GLshort bz)
  {
    driver_glBinormal3sEXT(bx, by, bz);
  }

  static void REGAL_CALL missing_glBinormal3svEXT(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glBinormal3svEXT", " not available." );
  }

  PFNGLBINORMAL3SVEXTPROC driver_glBinormal3svEXT = NULL;

  static void REGAL_CALL loader_glBinormal3svEXT(Layer *_layer, const GLshort *v)
  {
    driver_glBinormal3svEXT(v);
  }

  static void REGAL_CALL missing_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glBinormalPointerEXT", " not available." );
  }

  PFNGLBINORMALPOINTEREXTPROC driver_glBinormalPointerEXT = NULL;

  static void REGAL_CALL loader_glBinormalPointerEXT(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glBinormalPointerEXT(type, stride, pointer);
  }

  static void REGAL_CALL missing_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3bEXT", " not available." );
  }

  PFNGLTANGENT3BEXTPROC driver_glTangent3bEXT = NULL;

  static void REGAL_CALL loader_glTangent3bEXT(Layer *_layer, GLbyte tx, GLbyte ty, GLbyte tz)
  {
    driver_glTangent3bEXT(tx, ty, tz);
  }

  static void REGAL_CALL missing_glTangent3bvEXT(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3bvEXT", " not available." );
  }

  PFNGLTANGENT3BVEXTPROC driver_glTangent3bvEXT = NULL;

  static void REGAL_CALL loader_glTangent3bvEXT(Layer *_layer, const GLbyte *v)
  {
    driver_glTangent3bvEXT(v);
  }

  static void REGAL_CALL missing_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3dEXT", " not available." );
  }

  PFNGLTANGENT3DEXTPROC driver_glTangent3dEXT = NULL;

  static void REGAL_CALL loader_glTangent3dEXT(Layer *_layer, GLdouble tx, GLdouble ty, GLdouble tz)
  {
    driver_glTangent3dEXT(tx, ty, tz);
  }

  static void REGAL_CALL missing_glTangent3dvEXT(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3dvEXT", " not available." );
  }

  PFNGLTANGENT3DVEXTPROC driver_glTangent3dvEXT = NULL;

  static void REGAL_CALL loader_glTangent3dvEXT(Layer *_layer, const GLdouble *v)
  {
    driver_glTangent3dvEXT(v);
  }

  static void REGAL_CALL missing_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3fEXT", " not available." );
  }

  PFNGLTANGENT3FEXTPROC driver_glTangent3fEXT = NULL;

  static void REGAL_CALL loader_glTangent3fEXT(Layer *_layer, GLfloat tx, GLfloat ty, GLfloat tz)
  {
    driver_glTangent3fEXT(tx, ty, tz);
  }

  static void REGAL_CALL missing_glTangent3fvEXT(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3fvEXT", " not available." );
  }

  PFNGLTANGENT3FVEXTPROC driver_glTangent3fvEXT = NULL;

  static void REGAL_CALL loader_glTangent3fvEXT(Layer *_layer, const GLfloat *v)
  {
    driver_glTangent3fvEXT(v);
  }

  static void REGAL_CALL missing_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3iEXT", " not available." );
  }

  PFNGLTANGENT3IEXTPROC driver_glTangent3iEXT = NULL;

  static void REGAL_CALL loader_glTangent3iEXT(Layer *_layer, GLint tx, GLint ty, GLint tz)
  {
    driver_glTangent3iEXT(tx, ty, tz);
  }

  static void REGAL_CALL missing_glTangent3ivEXT(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3ivEXT", " not available." );
  }

  PFNGLTANGENT3IVEXTPROC driver_glTangent3ivEXT = NULL;

  static void REGAL_CALL loader_glTangent3ivEXT(Layer *_layer, const GLint *v)
  {
    driver_glTangent3ivEXT(v);
  }

  static void REGAL_CALL missing_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
  {
    UNUSED_PARAMETER(tx);
    UNUSED_PARAMETER(ty);
    UNUSED_PARAMETER(tz);
    Warning( "glTangent3sEXT", " not available." );
  }

  PFNGLTANGENT3SEXTPROC driver_glTangent3sEXT = NULL;

  static void REGAL_CALL loader_glTangent3sEXT(Layer *_layer, GLshort tx, GLshort ty, GLshort tz)
  {
    driver_glTangent3sEXT(tx, ty, tz);
  }

  static void REGAL_CALL missing_glTangent3svEXT(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTangent3svEXT", " not available." );
  }

  PFNGLTANGENT3SVEXTPROC driver_glTangent3svEXT = NULL;

  static void REGAL_CALL loader_glTangent3svEXT(Layer *_layer, const GLshort *v)
  {
    driver_glTangent3svEXT(v);
  }

  static void REGAL_CALL missing_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glTangentPointerEXT", " not available." );
  }

  PFNGLTANGENTPOINTEREXTPROC driver_glTangentPointerEXT = NULL;

  static void REGAL_CALL loader_glTangentPointerEXT(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glTangentPointerEXT(type, stride, pointer);
  }

// GL_EXT_copy_texture

  static void REGAL_CALL missing_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTexImage1DEXT", " not available." );
  }

  PFNGLCOPYTEXIMAGE1DEXTPROC driver_glCopyTexImage1DEXT = NULL;

  static void REGAL_CALL loader_glCopyTexImage1DEXT(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    driver_glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
  }

  static void REGAL_CALL missing_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTexImage2DEXT", " not available." );
  }

  PFNGLCOPYTEXIMAGE2DEXTPROC driver_glCopyTexImage2DEXT = NULL;

  static void REGAL_CALL loader_glCopyTexImage2DEXT(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    driver_glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
  }

  static void REGAL_CALL missing_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyTexSubImage1DEXT", " not available." );
  }

  PFNGLCOPYTEXSUBIMAGE1DEXTPROC driver_glCopyTexSubImage1DEXT = NULL;

  static void REGAL_CALL loader_glCopyTexSubImage1DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
  }

  static void REGAL_CALL missing_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage2DEXT", " not available." );
  }

  PFNGLCOPYTEXSUBIMAGE2DEXTPROC driver_glCopyTexSubImage2DEXT = NULL;

  static void REGAL_CALL loader_glCopyTexSubImage2DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
  }

  static void REGAL_CALL missing_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage3DEXT", " not available." );
  }

  PFNGLCOPYTEXSUBIMAGE3DEXTPROC driver_glCopyTexSubImage3DEXT = NULL;

  static void REGAL_CALL loader_glCopyTexSubImage3DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

// GL_EXT_cull_vertex

  static void REGAL_CALL missing_glCullParameterdvEXT(GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCullParameterdvEXT", " not available." );
  }

  PFNGLCULLPARAMETERDVEXTPROC driver_glCullParameterdvEXT = NULL;

  static void REGAL_CALL loader_glCullParameterdvEXT(Layer *_layer, GLenum pname, GLdouble *params)
  {
    driver_glCullParameterdvEXT(pname, params);
  }

  static void REGAL_CALL missing_glCullParameterfvEXT(GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCullParameterfvEXT", " not available." );
  }

  PFNGLCULLPARAMETERFVEXTPROC driver_glCullParameterfvEXT = NULL;

  static void REGAL_CALL loader_glCullParameterfvEXT(Layer *_layer, GLenum pname, GLfloat *params)
  {
    driver_glCullParameterfvEXT(pname, params);
  }

// GL_EXT_debug_label

  static void REGAL_CALL missing_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(object);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glGetObjectLabelEXT", " not available." );
  }

  PFNGLGETOBJECTLABELEXTPROC driver_glGetObjectLabelEXT = NULL;

  static void REGAL_CALL loader_glGetObjectLabelEXT(Layer *_layer, GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    driver_glGetObjectLabelEXT(type, object, bufSize, length, label);
  }

  static void REGAL_CALL missing_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(object);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glLabelObjectEXT", " not available." );
  }

  PFNGLLABELOBJECTEXTPROC driver_glLabelObjectEXT = NULL;

  static void REGAL_CALL loader_glLabelObjectEXT(Layer *_layer, GLenum type, GLuint object, GLsizei length, const GLchar *label)
  {
    driver_glLabelObjectEXT(type, object, length, label);
  }

// GL_EXT_debug_marker

  static void REGAL_CALL missing_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)
  {
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(marker);
    Warning( "glInsertEventMarkerEXT", " not available." );
  }

  PFNGLINSERTEVENTMARKEREXTPROC driver_glInsertEventMarkerEXT = NULL;

  static void REGAL_CALL loader_glInsertEventMarkerEXT(Layer *_layer, GLsizei length, const GLchar *marker)
  {
    driver_glInsertEventMarkerEXT(length, marker);
  }

  static void REGAL_CALL missing_glPopGroupMarkerEXT(void)
  {
    Warning( "glPopGroupMarkerEXT", " not available." );
  }

  PFNGLPOPGROUPMARKEREXTPROC driver_glPopGroupMarkerEXT = NULL;

  static void REGAL_CALL loader_glPopGroupMarkerEXT(Layer *_layer)
  {
    driver_glPopGroupMarkerEXT();
  }

  static void REGAL_CALL missing_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
  {
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(marker);
    Warning( "glPushGroupMarkerEXT", " not available." );
  }

  PFNGLPUSHGROUPMARKEREXTPROC driver_glPushGroupMarkerEXT = NULL;

  static void REGAL_CALL loader_glPushGroupMarkerEXT(Layer *_layer, GLsizei length, const GLchar *marker)
  {
    driver_glPushGroupMarkerEXT(length, marker);
  }

// GL_EXT_depth_bounds_test

  static void REGAL_CALL missing_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
  {
    UNUSED_PARAMETER(zmin);
    UNUSED_PARAMETER(zmax);
    Warning( "glDepthBoundsEXT", " not available." );
  }

  PFNGLDEPTHBOUNDSEXTPROC driver_glDepthBoundsEXT = NULL;

  static void REGAL_CALL loader_glDepthBoundsEXT(Layer *_layer, GLclampd zmin, GLclampd zmax)
  {
    driver_glDepthBoundsEXT(zmin, zmax);
  }

// GL_EXT_direct_state_access

  static void REGAL_CALL missing_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(texture);
    Warning( "glBindMultiTextureEXT", " not available." );
  }

  PFNGLBINDMULTITEXTUREEXTPROC driver_glBindMultiTextureEXT = NULL;

  static void REGAL_CALL loader_glBindMultiTextureEXT(Layer *_layer, GLenum texunit, GLenum target, GLuint texture)
  {
    driver_glBindMultiTextureEXT(texunit, target, texture);
  }

  static GLenum REGAL_CALL missing_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(target);
    Warning( "glCheckNamedFramebufferStatusEXT", " not available." );
    return 0;
  }

  PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC driver_glCheckNamedFramebufferStatusEXT = NULL;

  static GLenum REGAL_CALL loader_glCheckNamedFramebufferStatusEXT(Layer *_layer, GLuint framebuffer, GLenum target)
  {
    return driver_glCheckNamedFramebufferStatusEXT(framebuffer, target);
  }

  static void REGAL_CALL missing_glClientAttribDefaultEXT(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glClientAttribDefaultEXT", " not available." );
  }

  PFNGLCLIENTATTRIBDEFAULTEXTPROC driver_glClientAttribDefaultEXT = NULL;

  static void REGAL_CALL loader_glClientAttribDefaultEXT(Layer *_layer, GLbitfield mask)
  {
    driver_glClientAttribDefaultEXT(mask);
  }

  static void REGAL_CALL missing_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedMultiTexImage1DEXT", " not available." );
  }

  PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC driver_glCompressedMultiTexImage1DEXT = NULL;

  static void REGAL_CALL loader_glCompressedMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedMultiTexImage2DEXT", " not available." );
  }

  PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC driver_glCompressedMultiTexImage2DEXT = NULL;

  static void REGAL_CALL loader_glCompressedMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    driver_glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
  }

  static void REGAL_CALL missing_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedMultiTexImage3DEXT", " not available." );
  }

  PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC driver_glCompressedMultiTexImage3DEXT = NULL;

  static void REGAL_CALL loader_glCompressedMultiTexImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    driver_glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
  }

  static void REGAL_CALL missing_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedMultiTexSubImage1DEXT", " not available." );
  }

  PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC driver_glCompressedMultiTexSubImage1DEXT = NULL;

  static void REGAL_CALL loader_glCompressedMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedMultiTexSubImage2DEXT", " not available." );
  }

  PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC driver_glCompressedMultiTexSubImage2DEXT = NULL;

  static void REGAL_CALL loader_glCompressedMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedMultiTexSubImage3DEXT", " not available." );
  }

  PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC driver_glCompressedMultiTexSubImage3DEXT = NULL;

  static void REGAL_CALL loader_glCompressedMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureImage1DEXT", " not available." );
  }

  PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC driver_glCompressedTextureImage1DEXT = NULL;

  static void REGAL_CALL loader_glCompressedTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    driver_glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
  }

  static void REGAL_CALL missing_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureImage2DEXT", " not available." );
  }

  PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC driver_glCompressedTextureImage2DEXT = NULL;

  static void REGAL_CALL loader_glCompressedTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    driver_glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
  }

  static void REGAL_CALL missing_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureImage3DEXT", " not available." );
  }

  PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC driver_glCompressedTextureImage3DEXT = NULL;

  static void REGAL_CALL loader_glCompressedTextureImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
  {
    driver_glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
  }

  static void REGAL_CALL missing_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureSubImage1DEXT", " not available." );
  }

  PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC driver_glCompressedTextureSubImage1DEXT = NULL;

  static void REGAL_CALL loader_glCompressedTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    driver_glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
  }

  static void REGAL_CALL missing_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureSubImage2DEXT", " not available." );
  }

  PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC driver_glCompressedTextureSubImage2DEXT = NULL;

  static void REGAL_CALL loader_glCompressedTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    driver_glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  }

  static void REGAL_CALL missing_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(bits);
    Warning( "glCompressedTextureSubImage3DEXT", " not available." );
  }

  PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC driver_glCompressedTextureSubImage3DEXT = NULL;

  static void REGAL_CALL loader_glCompressedTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
  {
    driver_glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  }

  static void REGAL_CALL missing_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    Warning( "glCopyMultiTexImage1DEXT", " not available." );
  }

  PFNGLCOPYMULTITEXIMAGE1DEXTPROC driver_glCopyMultiTexImage1DEXT = NULL;

  static void REGAL_CALL loader_glCopyMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    driver_glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
  }

  static void REGAL_CALL missing_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    Warning( "glCopyMultiTexImage2DEXT", " not available." );
  }

  PFNGLCOPYMULTITEXIMAGE2DEXTPROC driver_glCopyMultiTexImage2DEXT = NULL;

  static void REGAL_CALL loader_glCopyMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    driver_glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
  }

  static void REGAL_CALL missing_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyMultiTexSubImage1DEXT", " not available." );
  }

  PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC driver_glCopyMultiTexSubImage1DEXT = NULL;

  static void REGAL_CALL loader_glCopyMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
  }

  static void REGAL_CALL missing_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyMultiTexSubImage2DEXT", " not available." );
  }

  PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC driver_glCopyMultiTexSubImage2DEXT = NULL;

  static void REGAL_CALL loader_glCopyMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
  }

  static void REGAL_CALL missing_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyMultiTexSubImage3DEXT", " not available." );
  }

  PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC driver_glCopyMultiTexSubImage3DEXT = NULL;

  static void REGAL_CALL loader_glCopyMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  static void REGAL_CALL missing_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTextureImage1DEXT", " not available." );
  }

  PFNGLCOPYTEXTUREIMAGE1DEXTPROC driver_glCopyTextureImage1DEXT = NULL;

  static void REGAL_CALL loader_glCopyTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
  {
    driver_glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
  }

  static void REGAL_CALL missing_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    Warning( "glCopyTextureImage2DEXT", " not available." );
  }

  PFNGLCOPYTEXTUREIMAGE2DEXTPROC driver_glCopyTextureImage2DEXT = NULL;

  static void REGAL_CALL loader_glCopyTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
  {
    driver_glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
  }

  static void REGAL_CALL missing_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyTextureSubImage1DEXT", " not available." );
  }

  PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC driver_glCopyTextureSubImage1DEXT = NULL;

  static void REGAL_CALL loader_glCopyTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
  }

  static void REGAL_CALL missing_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTextureSubImage2DEXT", " not available." );
  }

  PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC driver_glCopyTextureSubImage2DEXT = NULL;

  static void REGAL_CALL loader_glCopyTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
  }

  static void REGAL_CALL missing_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTextureSubImage3DEXT", " not available." );
  }

  PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC driver_glCopyTextureSubImage3DEXT = NULL;

  static void REGAL_CALL loader_glCopyTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  static void REGAL_CALL missing_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(index);
    Warning( "glDisableClientStateIndexedEXT", " not available." );
  }

  PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC driver_glDisableClientStateIndexedEXT = NULL;

  static void REGAL_CALL loader_glDisableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
  {
    driver_glDisableClientStateIndexedEXT(array, index);
  }

  static void REGAL_CALL missing_glDisableClientStateiEXT(GLenum array, GLuint index)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(index);
    Warning( "glDisableClientStateiEXT", " not available." );
  }

  PFNGLDISABLECLIENTSTATEIEXTPROC driver_glDisableClientStateiEXT = NULL;

  static void REGAL_CALL loader_glDisableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
  {
    driver_glDisableClientStateiEXT(array, index);
  }

  static void REGAL_CALL missing_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(array);
    Warning( "glDisableVertexArrayAttribEXT", " not available." );
  }

  PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC driver_glDisableVertexArrayAttribEXT = NULL;

  static void REGAL_CALL loader_glDisableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
  {
    driver_glDisableVertexArrayAttribEXT(vaobj, array);
  }

  static void REGAL_CALL missing_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(array);
    Warning( "glDisableVertexArrayEXT", " not available." );
  }

  PFNGLDISABLEVERTEXARRAYEXTPROC driver_glDisableVertexArrayEXT = NULL;

  static void REGAL_CALL loader_glDisableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
  {
    driver_glDisableVertexArrayEXT(vaobj, array);
  }

  static void REGAL_CALL missing_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(index);
    Warning( "glEnableClientStateIndexedEXT", " not available." );
  }

  PFNGLENABLECLIENTSTATEINDEXEDEXTPROC driver_glEnableClientStateIndexedEXT = NULL;

  static void REGAL_CALL loader_glEnableClientStateIndexedEXT(Layer *_layer, GLenum array, GLuint index)
  {
    driver_glEnableClientStateIndexedEXT(array, index);
  }

  static void REGAL_CALL missing_glEnableClientStateiEXT(GLenum array, GLuint index)
  {
    UNUSED_PARAMETER(array);
    UNUSED_PARAMETER(index);
    Warning( "glEnableClientStateiEXT", " not available." );
  }

  PFNGLENABLECLIENTSTATEIEXTPROC driver_glEnableClientStateiEXT = NULL;

  static void REGAL_CALL loader_glEnableClientStateiEXT(Layer *_layer, GLenum array, GLuint index)
  {
    driver_glEnableClientStateiEXT(array, index);
  }

  static void REGAL_CALL missing_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(array);
    Warning( "glEnableVertexArrayAttribEXT", " not available." );
  }

  PFNGLENABLEVERTEXARRAYATTRIBEXTPROC driver_glEnableVertexArrayAttribEXT = NULL;

  static void REGAL_CALL loader_glEnableVertexArrayAttribEXT(Layer *_layer, GLuint vaobj, GLenum array)
  {
    driver_glEnableVertexArrayAttribEXT(vaobj, array);
  }

  static void REGAL_CALL missing_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(array);
    Warning( "glEnableVertexArrayEXT", " not available." );
  }

  PFNGLENABLEVERTEXARRAYEXTPROC driver_glEnableVertexArrayEXT = NULL;

  static void REGAL_CALL loader_glEnableVertexArrayEXT(Layer *_layer, GLuint vaobj, GLenum array)
  {
    driver_glEnableVertexArrayEXT(vaobj, array);
  }

  static void REGAL_CALL missing_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    Warning( "glFlushMappedNamedBufferRangeEXT", " not available." );
  }

  PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC driver_glFlushMappedNamedBufferRangeEXT = NULL;

  static void REGAL_CALL loader_glFlushMappedNamedBufferRangeEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr length)
  {
    driver_glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
  }

  static void REGAL_CALL missing_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(mode);
    Warning( "glFramebufferDrawBufferEXT", " not available." );
  }

  PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC driver_glFramebufferDrawBufferEXT = NULL;

  static void REGAL_CALL loader_glFramebufferDrawBufferEXT(Layer *_layer, GLuint framebuffer, GLenum mode)
  {
    driver_glFramebufferDrawBufferEXT(framebuffer, mode);
  }

  static void REGAL_CALL missing_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glFramebufferDrawBuffersEXT", " not available." );
  }

  PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC driver_glFramebufferDrawBuffersEXT = NULL;

  static void REGAL_CALL loader_glFramebufferDrawBuffersEXT(Layer *_layer, GLuint framebuffer, GLsizei n, const GLenum *bufs)
  {
    driver_glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
  }

  static void REGAL_CALL missing_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(mode);
    Warning( "glFramebufferReadBufferEXT", " not available." );
  }

  PFNGLFRAMEBUFFERREADBUFFEREXTPROC driver_glFramebufferReadBufferEXT = NULL;

  static void REGAL_CALL loader_glFramebufferReadBufferEXT(Layer *_layer, GLuint framebuffer, GLenum mode)
  {
    driver_glFramebufferReadBufferEXT(framebuffer, mode);
  }

  static void REGAL_CALL missing_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    Warning( "glGenerateMultiTexMipmapEXT", " not available." );
  }

  PFNGLGENERATEMULTITEXMIPMAPEXTPROC driver_glGenerateMultiTexMipmapEXT = NULL;

  static void REGAL_CALL loader_glGenerateMultiTexMipmapEXT(Layer *_layer, GLenum texunit, GLenum target)
  {
    driver_glGenerateMultiTexMipmapEXT(texunit, target);
  }

  static void REGAL_CALL missing_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    Warning( "glGenerateTextureMipmapEXT", " not available." );
  }

  PFNGLGENERATETEXTUREMIPMAPEXTPROC driver_glGenerateTextureMipmapEXT = NULL;

  static void REGAL_CALL loader_glGenerateTextureMipmapEXT(Layer *_layer, GLuint texture, GLenum target)
  {
    driver_glGenerateTextureMipmapEXT(texture, target);
  }

  static void REGAL_CALL missing_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(img);
    Warning( "glGetCompressedMultiTexImageEXT", " not available." );
  }

  PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC driver_glGetCompressedMultiTexImageEXT = NULL;

  static void REGAL_CALL loader_glGetCompressedMultiTexImageEXT(Layer *_layer, GLenum texunit, GLenum target, GLint lod, GLvoid *img)
  {
    driver_glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
  }

  static void REGAL_CALL missing_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lod);
    UNUSED_PARAMETER(img);
    Warning( "glGetCompressedTextureImageEXT", " not available." );
  }

  PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC driver_glGetCompressedTextureImageEXT = NULL;

  static void REGAL_CALL loader_glGetCompressedTextureImageEXT(Layer *_layer, GLuint texture, GLenum target, GLint lod, GLvoid *img)
  {
    driver_glGetCompressedTextureImageEXT(texture, target, lod, img);
  }

  static void REGAL_CALL missing_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetDoubleIndexedvEXT", " not available." );
  }

  PFNGLGETDOUBLEINDEXEDVEXTPROC driver_glGetDoubleIndexedvEXT = NULL;

  static void REGAL_CALL loader_glGetDoubleIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLdouble *data)
  {
    driver_glGetDoubleIndexedvEXT(target, index, data);
  }

  static void REGAL_CALL missing_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetDoublei_vEXT", " not available." );
  }

  PFNGLGETDOUBLEI_VEXTPROC driver_glGetDoublei_vEXT = NULL;

  static void REGAL_CALL loader_glGetDoublei_vEXT(Layer *_layer, GLenum target, GLuint index, GLdouble *data)
  {
    driver_glGetDoublei_vEXT(target, index, data);
  }

  static void REGAL_CALL missing_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetFloatIndexedvEXT", " not available." );
  }

  PFNGLGETFLOATINDEXEDVEXTPROC driver_glGetFloatIndexedvEXT = NULL;

  static void REGAL_CALL loader_glGetFloatIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLfloat *data)
  {
    driver_glGetFloatIndexedvEXT(target, index, data);
  }

  static void REGAL_CALL missing_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetFloati_vEXT", " not available." );
  }

  PFNGLGETFLOATI_VEXTPROC driver_glGetFloati_vEXT = NULL;

  static void REGAL_CALL loader_glGetFloati_vEXT(Layer *_layer, GLenum target, GLuint index, GLfloat *data)
  {
    driver_glGetFloati_vEXT(target, index, data);
  }

  static void REGAL_CALL missing_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferParameterivEXT", " not available." );
  }

  PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC driver_glGetFramebufferParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetFramebufferParameterivEXT(Layer *_layer, GLuint framebuffer, GLenum pname, GLint *params)
  {
    driver_glGetFramebufferParameterivEXT(framebuffer, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexEnvfvEXT", " not available." );
  }

  PFNGLGETMULTITEXENVFVEXTPROC driver_glGetMultiTexEnvfvEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexEnvfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetMultiTexEnvfvEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexEnvivEXT", " not available." );
  }

  PFNGLGETMULTITEXENVIVEXTPROC driver_glGetMultiTexEnvivEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexEnvivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetMultiTexEnvivEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexGendvEXT", " not available." );
  }

  PFNGLGETMULTITEXGENDVEXTPROC driver_glGetMultiTexGendvEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexGendvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
  {
    driver_glGetMultiTexGendvEXT(texunit, coord, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexGenfvEXT", " not available." );
  }

  PFNGLGETMULTITEXGENFVEXTPROC driver_glGetMultiTexGenfvEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexGenfvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
  {
    driver_glGetMultiTexGenfvEXT(texunit, coord, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexGenivEXT", " not available." );
  }

  PFNGLGETMULTITEXGENIVEXTPROC driver_glGetMultiTexGenivEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexGenivEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLint *params)
  {
    driver_glGetMultiTexGenivEXT(texunit, coord, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glGetMultiTexImageEXT", " not available." );
  }

  PFNGLGETMULTITEXIMAGEEXTPROC driver_glGetMultiTexImageEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexImageEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    driver_glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
  }

  static void REGAL_CALL missing_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexLevelParameterfvEXT", " not available." );
  }

  PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC driver_glGetMultiTexLevelParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexLevelParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    driver_glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexLevelParameterivEXT", " not available." );
  }

  PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC driver_glGetMultiTexLevelParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexLevelParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    driver_glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexParameterIivEXT", " not available." );
  }

  PFNGLGETMULTITEXPARAMETERIIVEXTPROC driver_glGetMultiTexParameterIivEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexParameterIivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetMultiTexParameterIivEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexParameterIuivEXT", " not available." );
  }

  PFNGLGETMULTITEXPARAMETERIUIVEXTPROC driver_glGetMultiTexParameterIuivEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexParameterIuivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLuint *params)
  {
    driver_glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexParameterfvEXT", " not available." );
  }

  PFNGLGETMULTITEXPARAMETERFVEXTPROC driver_glGetMultiTexParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetMultiTexParameterfvEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMultiTexParameterivEXT", " not available." );
  }

  PFNGLGETMULTITEXPARAMETERIVEXTPROC driver_glGetMultiTexParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetMultiTexParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetMultiTexParameterivEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedBufferParameterivEXT", " not available." );
  }

  PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC driver_glGetNamedBufferParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetNamedBufferParameterivEXT(Layer *_layer, GLuint buffer, GLenum pname, GLint *params)
  {
    driver_glGetNamedBufferParameterivEXT(buffer, pname, params);
  }

  static void REGAL_CALL missing_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedBufferPointervEXT", " not available." );
  }

  PFNGLGETNAMEDBUFFERPOINTERVEXTPROC driver_glGetNamedBufferPointervEXT = NULL;

  static void REGAL_CALL loader_glGetNamedBufferPointervEXT(Layer *_layer, GLuint buffer, GLenum pname, GLvoid **params)
  {
    driver_glGetNamedBufferPointervEXT(buffer, pname, params);
  }

  static void REGAL_CALL missing_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glGetNamedBufferSubDataEXT", " not available." );
  }

  PFNGLGETNAMEDBUFFERSUBDATAEXTPROC driver_glGetNamedBufferSubDataEXT = NULL;

  static void REGAL_CALL loader_glGetNamedBufferSubDataEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
  {
    driver_glGetNamedBufferSubDataEXT(buffer, offset, size, data);
  }

  static void REGAL_CALL missing_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedFramebufferAttachmentParameterivEXT", " not available." );
  }

  PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC driver_glGetNamedFramebufferAttachmentParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetNamedFramebufferAttachmentParameterivEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
  {
    driver_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
  }

  static void REGAL_CALL missing_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramLocalParameterIivEXT", " not available." );
  }

  PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC driver_glGetNamedProgramLocalParameterIivEXT = NULL;

  static void REGAL_CALL loader_glGetNamedProgramLocalParameterIivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLint *params)
  {
    driver_glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
  }

  static void REGAL_CALL missing_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramLocalParameterIuivEXT", " not available." );
  }

  PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC driver_glGetNamedProgramLocalParameterIuivEXT = NULL;

  static void REGAL_CALL loader_glGetNamedProgramLocalParameterIuivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLuint *params)
  {
    driver_glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
  }

  static void REGAL_CALL missing_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramLocalParameterdvEXT", " not available." );
  }

  PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC driver_glGetNamedProgramLocalParameterdvEXT = NULL;

  static void REGAL_CALL loader_glGetNamedProgramLocalParameterdvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLdouble *params)
  {
    driver_glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
  }

  static void REGAL_CALL missing_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramLocalParameterfvEXT", " not available." );
  }

  PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC driver_glGetNamedProgramLocalParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetNamedProgramLocalParameterfvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLfloat *params)
  {
    driver_glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
  }

  static void REGAL_CALL missing_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(string);
    Warning( "glGetNamedProgramStringEXT", " not available." );
  }

  PFNGLGETNAMEDPROGRAMSTRINGEXTPROC driver_glGetNamedProgramStringEXT = NULL;

  static void REGAL_CALL loader_glGetNamedProgramStringEXT(Layer *_layer, GLuint program, GLenum target, GLenum pname, GLvoid *string)
  {
    driver_glGetNamedProgramStringEXT(program, target, pname, string);
  }

  static void REGAL_CALL missing_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedProgramivEXT", " not available." );
  }

  PFNGLGETNAMEDPROGRAMIVEXTPROC driver_glGetNamedProgramivEXT = NULL;

  static void REGAL_CALL loader_glGetNamedProgramivEXT(Layer *_layer, GLuint program, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetNamedProgramivEXT(program, target, pname, params);
  }

  static void REGAL_CALL missing_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(renderbuffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedRenderbufferParameterivEXT", " not available." );
  }

  PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC driver_glGetNamedRenderbufferParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetNamedRenderbufferParameterivEXT(Layer *_layer, GLuint renderbuffer, GLenum pname, GLint *params)
  {
    driver_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
  }

  static void REGAL_CALL missing_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetPointerIndexedvEXT", " not available." );
  }

  PFNGLGETPOINTERINDEXEDVEXTPROC driver_glGetPointerIndexedvEXT = NULL;

  static void REGAL_CALL loader_glGetPointerIndexedvEXT(Layer *_layer, GLenum target, GLuint index, GLvoid **data)
  {
    driver_glGetPointerIndexedvEXT(target, index, data);
  }

  static void REGAL_CALL missing_glGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid **params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetPointeri_vEXT", " not available." );
  }

  PFNGLGETPOINTERI_VEXTPROC driver_glGetPointeri_vEXT = NULL;

  static void REGAL_CALL loader_glGetPointeri_vEXT(Layer *_layer, GLenum pname, GLuint index, GLvoid **params)
  {
    driver_glGetPointeri_vEXT(pname, index, params);
  }

  static void REGAL_CALL missing_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glGetTextureImageEXT", " not available." );
  }

  PFNGLGETTEXTUREIMAGEEXTPROC driver_glGetTextureImageEXT = NULL;

  static void REGAL_CALL loader_glGetTextureImageEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
  {
    driver_glGetTextureImageEXT(texture, target, level, format, type, pixels);
  }

  static void REGAL_CALL missing_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureLevelParameterfvEXT", " not available." );
  }

  PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC driver_glGetTextureLevelParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetTextureLevelParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
  {
    driver_glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
  }

  static void REGAL_CALL missing_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureLevelParameterivEXT", " not available." );
  }

  PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC driver_glGetTextureLevelParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetTextureLevelParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
  {
    driver_glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
  }

  static void REGAL_CALL missing_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureParameterIivEXT", " not available." );
  }

  PFNGLGETTEXTUREPARAMETERIIVEXTPROC driver_glGetTextureParameterIivEXT = NULL;

  static void REGAL_CALL loader_glGetTextureParameterIivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetTextureParameterIivEXT(texture, target, pname, params);
  }

  static void REGAL_CALL missing_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureParameterIuivEXT", " not available." );
  }

  PFNGLGETTEXTUREPARAMETERIUIVEXTPROC driver_glGetTextureParameterIuivEXT = NULL;

  static void REGAL_CALL loader_glGetTextureParameterIuivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLuint *params)
  {
    driver_glGetTextureParameterIuivEXT(texture, target, pname, params);
  }

  static void REGAL_CALL missing_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureParameterfvEXT", " not available." );
  }

  PFNGLGETTEXTUREPARAMETERFVEXTPROC driver_glGetTextureParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetTextureParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetTextureParameterfvEXT(texture, target, pname, params);
  }

  static void REGAL_CALL missing_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTextureParameterivEXT", " not available." );
  }

  PFNGLGETTEXTUREPARAMETERIVEXTPROC driver_glGetTextureParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetTextureParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetTextureParameterivEXT(texture, target, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetVertexArrayIntegeri_vEXT", " not available." );
  }

  PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC driver_glGetVertexArrayIntegeri_vEXT = NULL;

  static void REGAL_CALL loader_glGetVertexArrayIntegeri_vEXT(Layer *_layer, GLuint vaobj, GLuint index, GLenum pname, GLint *param)
  {
    driver_glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
  }

  static void REGAL_CALL missing_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetVertexArrayIntegervEXT", " not available." );
  }

  PFNGLGETVERTEXARRAYINTEGERVEXTPROC driver_glGetVertexArrayIntegervEXT = NULL;

  static void REGAL_CALL loader_glGetVertexArrayIntegervEXT(Layer *_layer, GLuint vaobj, GLenum pname, GLint *param)
  {
    driver_glGetVertexArrayIntegervEXT(vaobj, pname, param);
  }

  static void REGAL_CALL missing_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetVertexArrayPointeri_vEXT", " not available." );
  }

  PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC driver_glGetVertexArrayPointeri_vEXT = NULL;

  static void REGAL_CALL loader_glGetVertexArrayPointeri_vEXT(Layer *_layer, GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
  {
    driver_glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
  }

  static void REGAL_CALL missing_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid **param)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glGetVertexArrayPointervEXT", " not available." );
  }

  PFNGLGETVERTEXARRAYPOINTERVEXTPROC driver_glGetVertexArrayPointervEXT = NULL;

  static void REGAL_CALL loader_glGetVertexArrayPointervEXT(Layer *_layer, GLuint vaobj, GLenum pname, GLvoid **param)
  {
    driver_glGetVertexArrayPointervEXT(vaobj, pname, param);
  }

  static GLvoid *REGAL_CALL missing_glMapNamedBufferEXT(GLuint buffer, GLenum access)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(access);
    Warning( "glMapNamedBufferEXT", " not available." );
    return NULL;
  }

  PFNGLMAPNAMEDBUFFEREXTPROC driver_glMapNamedBufferEXT = NULL;

  static GLvoid *REGAL_CALL loader_glMapNamedBufferEXT(Layer *_layer, GLuint buffer, GLenum access)
  {
    return driver_glMapNamedBufferEXT(buffer, access);
  }

  static GLvoid *REGAL_CALL missing_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(access);
    Warning( "glMapNamedBufferRangeEXT", " not available." );
    return NULL;
  }

  PFNGLMAPNAMEDBUFFERRANGEEXTPROC driver_glMapNamedBufferRangeEXT = NULL;

  static GLvoid *REGAL_CALL loader_glMapNamedBufferRangeEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    return driver_glMapNamedBufferRangeEXT(buffer, offset, length, access);
  }

  static void REGAL_CALL missing_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glMatrixFrustumEXT", " not available." );
  }

  PFNGLMATRIXFRUSTUMEXTPROC driver_glMatrixFrustumEXT = NULL;

  static void REGAL_CALL loader_glMatrixFrustumEXT(Layer *_layer, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    driver_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
  }

  static void REGAL_CALL missing_glMatrixLoadIdentityEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glMatrixLoadIdentityEXT", " not available." );
  }

  PFNGLMATRIXLOADIDENTITYEXTPROC driver_glMatrixLoadIdentityEXT = NULL;

  static void REGAL_CALL loader_glMatrixLoadIdentityEXT(Layer *_layer, GLenum mode)
  {
    driver_glMatrixLoadIdentityEXT(mode);
  }

  static void REGAL_CALL missing_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixLoadTransposedEXT", " not available." );
  }

  PFNGLMATRIXLOADTRANSPOSEDEXTPROC driver_glMatrixLoadTransposedEXT = NULL;

  static void REGAL_CALL loader_glMatrixLoadTransposedEXT(Layer *_layer, GLenum mode, const GLdouble *m)
  {
    driver_glMatrixLoadTransposedEXT(mode, m);
  }

  static void REGAL_CALL missing_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixLoadTransposefEXT", " not available." );
  }

  PFNGLMATRIXLOADTRANSPOSEFEXTPROC driver_glMatrixLoadTransposefEXT = NULL;

  static void REGAL_CALL loader_glMatrixLoadTransposefEXT(Layer *_layer, GLenum mode, const GLfloat *m)
  {
    driver_glMatrixLoadTransposefEXT(mode, m);
  }

  static void REGAL_CALL missing_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixLoaddEXT", " not available." );
  }

  PFNGLMATRIXLOADDEXTPROC driver_glMatrixLoaddEXT = NULL;

  static void REGAL_CALL loader_glMatrixLoaddEXT(Layer *_layer, GLenum mode, const GLdouble *m)
  {
    driver_glMatrixLoaddEXT(mode, m);
  }

  static void REGAL_CALL missing_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixLoadfEXT", " not available." );
  }

  PFNGLMATRIXLOADFEXTPROC driver_glMatrixLoadfEXT = NULL;

  static void REGAL_CALL loader_glMatrixLoadfEXT(Layer *_layer, GLenum mode, const GLfloat *m)
  {
    driver_glMatrixLoadfEXT(mode, m);
  }

  static void REGAL_CALL missing_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixMultTransposedEXT", " not available." );
  }

  PFNGLMATRIXMULTTRANSPOSEDEXTPROC driver_glMatrixMultTransposedEXT = NULL;

  static void REGAL_CALL loader_glMatrixMultTransposedEXT(Layer *_layer, GLenum mode, const GLdouble *m)
  {
    driver_glMatrixMultTransposedEXT(mode, m);
  }

  static void REGAL_CALL missing_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixMultTransposefEXT", " not available." );
  }

  PFNGLMATRIXMULTTRANSPOSEFEXTPROC driver_glMatrixMultTransposefEXT = NULL;

  static void REGAL_CALL loader_glMatrixMultTransposefEXT(Layer *_layer, GLenum mode, const GLfloat *m)
  {
    driver_glMatrixMultTransposefEXT(mode, m);
  }

  static void REGAL_CALL missing_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixMultdEXT", " not available." );
  }

  PFNGLMATRIXMULTDEXTPROC driver_glMatrixMultdEXT = NULL;

  static void REGAL_CALL loader_glMatrixMultdEXT(Layer *_layer, GLenum mode, const GLdouble *m)
  {
    driver_glMatrixMultdEXT(mode, m);
  }

  static void REGAL_CALL missing_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(m);
    Warning( "glMatrixMultfEXT", " not available." );
  }

  PFNGLMATRIXMULTFEXTPROC driver_glMatrixMultfEXT = NULL;

  static void REGAL_CALL loader_glMatrixMultfEXT(Layer *_layer, GLenum mode, const GLfloat *m)
  {
    driver_glMatrixMultfEXT(mode, m);
  }

  static void REGAL_CALL missing_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glMatrixOrthoEXT", " not available." );
  }

  PFNGLMATRIXORTHOEXTPROC driver_glMatrixOrthoEXT = NULL;

  static void REGAL_CALL loader_glMatrixOrthoEXT(Layer *_layer, GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
  {
    driver_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
  }

  static void REGAL_CALL missing_glMatrixPopEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glMatrixPopEXT", " not available." );
  }

  PFNGLMATRIXPOPEXTPROC driver_glMatrixPopEXT = NULL;

  static void REGAL_CALL loader_glMatrixPopEXT(Layer *_layer, GLenum mode)
  {
    driver_glMatrixPopEXT(mode);
  }

  static void REGAL_CALL missing_glMatrixPushEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glMatrixPushEXT", " not available." );
  }

  PFNGLMATRIXPUSHEXTPROC driver_glMatrixPushEXT = NULL;

  static void REGAL_CALL loader_glMatrixPushEXT(Layer *_layer, GLenum mode)
  {
    driver_glMatrixPushEXT(mode);
  }

  static void REGAL_CALL missing_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixRotatedEXT", " not available." );
  }

  PFNGLMATRIXROTATEDEXTPROC driver_glMatrixRotatedEXT = NULL;

  static void REGAL_CALL loader_glMatrixRotatedEXT(Layer *_layer, GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glMatrixRotatedEXT(mode, angle, x, y, z);
  }

  static void REGAL_CALL missing_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixRotatefEXT", " not available." );
  }

  PFNGLMATRIXROTATEFEXTPROC driver_glMatrixRotatefEXT = NULL;

  static void REGAL_CALL loader_glMatrixRotatefEXT(Layer *_layer, GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glMatrixRotatefEXT(mode, angle, x, y, z);
  }

  static void REGAL_CALL missing_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixScaledEXT", " not available." );
  }

  PFNGLMATRIXSCALEDEXTPROC driver_glMatrixScaledEXT = NULL;

  static void REGAL_CALL loader_glMatrixScaledEXT(Layer *_layer, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glMatrixScaledEXT(mode, x, y, z);
  }

  static void REGAL_CALL missing_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixScalefEXT", " not available." );
  }

  PFNGLMATRIXSCALEFEXTPROC driver_glMatrixScalefEXT = NULL;

  static void REGAL_CALL loader_glMatrixScalefEXT(Layer *_layer, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glMatrixScalefEXT(mode, x, y, z);
  }

  static void REGAL_CALL missing_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixTranslatedEXT", " not available." );
  }

  PFNGLMATRIXTRANSLATEDEXTPROC driver_glMatrixTranslatedEXT = NULL;

  static void REGAL_CALL loader_glMatrixTranslatedEXT(Layer *_layer, GLenum mode, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glMatrixTranslatedEXT(mode, x, y, z);
  }

  static void REGAL_CALL missing_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glMatrixTranslatefEXT", " not available." );
  }

  PFNGLMATRIXTRANSLATEFEXTPROC driver_glMatrixTranslatefEXT = NULL;

  static void REGAL_CALL loader_glMatrixTranslatefEXT(Layer *_layer, GLenum mode, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glMatrixTranslatefEXT(mode, x, y, z);
  }

  static void REGAL_CALL missing_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glMultiTexBufferEXT", " not available." );
  }

  PFNGLMULTITEXBUFFEREXTPROC driver_glMultiTexBufferEXT = NULL;

  static void REGAL_CALL loader_glMultiTexBufferEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
  {
    driver_glMultiTexBufferEXT(texunit, target, internalformat, buffer);
  }

  static void REGAL_CALL missing_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glMultiTexCoordPointerEXT", " not available." );
  }

  PFNGLMULTITEXCOORDPOINTEREXTPROC driver_glMultiTexCoordPointerEXT = NULL;

  static void REGAL_CALL loader_glMultiTexCoordPointerEXT(Layer *_layer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
  }

  static void REGAL_CALL missing_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexEnvfEXT", " not available." );
  }

  PFNGLMULTITEXENVFEXTPROC driver_glMultiTexEnvfEXT = NULL;

  static void REGAL_CALL loader_glMultiTexEnvfEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
  {
    driver_glMultiTexEnvfEXT(texunit, target, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexEnvfvEXT", " not available." );
  }

  PFNGLMULTITEXENVFVEXTPROC driver_glMultiTexEnvfvEXT = NULL;

  static void REGAL_CALL loader_glMultiTexEnvfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glMultiTexEnvfvEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexEnviEXT", " not available." );
  }

  PFNGLMULTITEXENVIEXTPROC driver_glMultiTexEnviEXT = NULL;

  static void REGAL_CALL loader_glMultiTexEnviEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint param)
  {
    driver_glMultiTexEnviEXT(texunit, target, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexEnvivEXT", " not available." );
  }

  PFNGLMULTITEXENVIVEXTPROC driver_glMultiTexEnvivEXT = NULL;

  static void REGAL_CALL loader_glMultiTexEnvivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glMultiTexEnvivEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexGendEXT", " not available." );
  }

  PFNGLMULTITEXGENDEXTPROC driver_glMultiTexGendEXT = NULL;

  static void REGAL_CALL loader_glMultiTexGendEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
  {
    driver_glMultiTexGendEXT(texunit, coord, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexGendvEXT", " not available." );
  }

  PFNGLMULTITEXGENDVEXTPROC driver_glMultiTexGendvEXT = NULL;

  static void REGAL_CALL loader_glMultiTexGendvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
  {
    driver_glMultiTexGendvEXT(texunit, coord, pname, params);
  }

  static void REGAL_CALL missing_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexGenfEXT", " not available." );
  }

  PFNGLMULTITEXGENFEXTPROC driver_glMultiTexGenfEXT = NULL;

  static void REGAL_CALL loader_glMultiTexGenfEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
  {
    driver_glMultiTexGenfEXT(texunit, coord, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexGenfvEXT", " not available." );
  }

  PFNGLMULTITEXGENFVEXTPROC driver_glMultiTexGenfvEXT = NULL;

  static void REGAL_CALL loader_glMultiTexGenfvEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
  {
    driver_glMultiTexGenfvEXT(texunit, coord, pname, params);
  }

  static void REGAL_CALL missing_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexGeniEXT", " not available." );
  }

  PFNGLMULTITEXGENIEXTPROC driver_glMultiTexGeniEXT = NULL;

  static void REGAL_CALL loader_glMultiTexGeniEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, GLint param)
  {
    driver_glMultiTexGeniEXT(texunit, coord, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexGenivEXT", " not available." );
  }

  PFNGLMULTITEXGENIVEXTPROC driver_glMultiTexGenivEXT = NULL;

  static void REGAL_CALL loader_glMultiTexGenivEXT(Layer *_layer, GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
  {
    driver_glMultiTexGenivEXT(texunit, coord, pname, params);
  }

  static void REGAL_CALL missing_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexImage1DEXT", " not available." );
  }

  PFNGLMULTITEXIMAGE1DEXTPROC driver_glMultiTexImage1DEXT = NULL;

  static void REGAL_CALL loader_glMultiTexImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexImage2DEXT", " not available." );
  }

  PFNGLMULTITEXIMAGE2DEXTPROC driver_glMultiTexImage2DEXT = NULL;

  static void REGAL_CALL loader_glMultiTexImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexImage3DEXT", " not available." );
  }

  PFNGLMULTITEXIMAGE3DEXTPROC driver_glMultiTexImage3DEXT = NULL;

  static void REGAL_CALL loader_glMultiTexImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexParameterIivEXT", " not available." );
  }

  PFNGLMULTITEXPARAMETERIIVEXTPROC driver_glMultiTexParameterIivEXT = NULL;

  static void REGAL_CALL loader_glMultiTexParameterIivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glMultiTexParameterIivEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMultiTexParameterIuivEXT", " not available." );
  }

  PFNGLMULTITEXPARAMETERIUIVEXTPROC driver_glMultiTexParameterIuivEXT = NULL;

  static void REGAL_CALL loader_glMultiTexParameterIuivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
  {
    driver_glMultiTexParameterIuivEXT(texunit, target, pname, params);
  }

  static void REGAL_CALL missing_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexParameterfEXT", " not available." );
  }

  PFNGLMULTITEXPARAMETERFEXTPROC driver_glMultiTexParameterfEXT = NULL;

  static void REGAL_CALL loader_glMultiTexParameterfEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLfloat param)
  {
    driver_glMultiTexParameterfEXT(texunit, target, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexParameterfvEXT", " not available." );
  }

  PFNGLMULTITEXPARAMETERFVEXTPROC driver_glMultiTexParameterfvEXT = NULL;

  static void REGAL_CALL loader_glMultiTexParameterfvEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
  {
    driver_glMultiTexParameterfvEXT(texunit, target, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexParameteriEXT", " not available." );
  }

  PFNGLMULTITEXPARAMETERIEXTPROC driver_glMultiTexParameteriEXT = NULL;

  static void REGAL_CALL loader_glMultiTexParameteriEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, GLint param)
  {
    driver_glMultiTexParameteriEXT(texunit, target, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMultiTexParameterivEXT", " not available." );
  }

  PFNGLMULTITEXPARAMETERIVEXTPROC driver_glMultiTexParameterivEXT = NULL;

  static void REGAL_CALL loader_glMultiTexParameterivEXT(Layer *_layer, GLenum texunit, GLenum target, GLenum pname, const GLint *param)
  {
    driver_glMultiTexParameterivEXT(texunit, target, pname, param);
  }

  static void REGAL_CALL missing_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glMultiTexRenderbufferEXT", " not available." );
  }

  PFNGLMULTITEXRENDERBUFFEREXTPROC driver_glMultiTexRenderbufferEXT = NULL;

  static void REGAL_CALL loader_glMultiTexRenderbufferEXT(Layer *_layer, GLenum texunit, GLenum target, GLuint renderbuffer)
  {
    driver_glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
  }

  static void REGAL_CALL missing_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexSubImage1DEXT", " not available." );
  }

  PFNGLMULTITEXSUBIMAGE1DEXTPROC driver_glMultiTexSubImage1DEXT = NULL;

  static void REGAL_CALL loader_glMultiTexSubImage1DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
  }

  static void REGAL_CALL missing_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexSubImage2DEXT", " not available." );
  }

  PFNGLMULTITEXSUBIMAGE2DEXTPROC driver_glMultiTexSubImage2DEXT = NULL;

  static void REGAL_CALL loader_glMultiTexSubImage2DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
  }

  static void REGAL_CALL missing_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glMultiTexSubImage3DEXT", " not available." );
  }

  PFNGLMULTITEXSUBIMAGE3DEXTPROC driver_glMultiTexSubImage3DEXT = NULL;

  static void REGAL_CALL loader_glMultiTexSubImage3DEXT(Layer *_layer, GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

  static void REGAL_CALL missing_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    UNUSED_PARAMETER(usage);
    Warning( "glNamedBufferDataEXT", " not available." );
  }

  PFNGLNAMEDBUFFERDATAEXTPROC driver_glNamedBufferDataEXT = NULL;

  static void REGAL_CALL loader_glNamedBufferDataEXT(Layer *_layer, GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
  {
    driver_glNamedBufferDataEXT(buffer, size, data, usage);
  }

  static void REGAL_CALL missing_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glNamedBufferSubDataEXT", " not available." );
  }

  PFNGLNAMEDBUFFERSUBDATAEXTPROC driver_glNamedBufferSubDataEXT = NULL;

  static void REGAL_CALL loader_glNamedBufferSubDataEXT(Layer *_layer, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
  {
    driver_glNamedBufferSubDataEXT(buffer, offset, size, data);
  }

  static void REGAL_CALL missing_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(readBuffer);
    UNUSED_PARAMETER(writeBuffer);
    UNUSED_PARAMETER(readOffset);
    UNUSED_PARAMETER(writeOffset);
    UNUSED_PARAMETER(size);
    Warning( "glNamedCopyBufferSubDataEXT", " not available." );
  }

  PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC driver_glNamedCopyBufferSubDataEXT = NULL;

  static void REGAL_CALL loader_glNamedCopyBufferSubDataEXT(Layer *_layer, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
  {
    driver_glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
  }

  static void REGAL_CALL missing_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(renderbuffertarget);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glNamedFramebufferRenderbufferEXT", " not available." );
  }

  PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC driver_glNamedFramebufferRenderbufferEXT = NULL;

  static void REGAL_CALL loader_glNamedFramebufferRenderbufferEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    driver_glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
  }

  static void REGAL_CALL missing_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glNamedFramebufferTexture1DEXT", " not available." );
  }

  PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC driver_glNamedFramebufferTexture1DEXT = NULL;

  static void REGAL_CALL loader_glNamedFramebufferTexture1DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    driver_glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
  }

  static void REGAL_CALL missing_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glNamedFramebufferTexture2DEXT", " not available." );
  }

  PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC driver_glNamedFramebufferTexture2DEXT = NULL;

  static void REGAL_CALL loader_glNamedFramebufferTexture2DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    driver_glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
  }

  static void REGAL_CALL missing_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(zoffset);
    Warning( "glNamedFramebufferTexture3DEXT", " not available." );
  }

  PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC driver_glNamedFramebufferTexture3DEXT = NULL;

  static void REGAL_CALL loader_glNamedFramebufferTexture3DEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    driver_glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
  }

  static void REGAL_CALL missing_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glNamedFramebufferTextureEXT", " not available." );
  }

  PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC driver_glNamedFramebufferTextureEXT = NULL;

  static void REGAL_CALL loader_glNamedFramebufferTextureEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
  {
    driver_glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
  }

  static void REGAL_CALL missing_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(face);
    Warning( "glNamedFramebufferTextureFaceEXT", " not available." );
  }

  PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC driver_glNamedFramebufferTextureFaceEXT = NULL;

  static void REGAL_CALL loader_glNamedFramebufferTextureFaceEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    driver_glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
  }

  static void REGAL_CALL missing_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(framebuffer);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glNamedFramebufferTextureLayerEXT", " not available." );
  }

  PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC driver_glNamedFramebufferTextureLayerEXT = NULL;

  static void REGAL_CALL loader_glNamedFramebufferTextureLayerEXT(Layer *_layer, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    driver_glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glNamedProgramLocalParameter4dEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC driver_glNamedProgramLocalParameter4dEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameter4dEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameter4dvEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC driver_glNamedProgramLocalParameter4dvEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameter4dvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLdouble *params)
  {
    driver_glNamedProgramLocalParameter4dvEXT(program, target, index, params);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glNamedProgramLocalParameter4fEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC driver_glNamedProgramLocalParameter4fEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameter4fEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameter4fvEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC driver_glNamedProgramLocalParameter4fvEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameter4fvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLfloat *params)
  {
    driver_glNamedProgramLocalParameter4fvEXT(program, target, index, params);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glNamedProgramLocalParameterI4iEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC driver_glNamedProgramLocalParameterI4iEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameterI4iEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameterI4ivEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC driver_glNamedProgramLocalParameterI4ivEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameterI4ivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLint *params)
  {
    driver_glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glNamedProgramLocalParameterI4uiEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC driver_glNamedProgramLocalParameterI4uiEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameterI4uiEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    driver_glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameterI4uivEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC driver_glNamedProgramLocalParameterI4uivEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameterI4uivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, const GLuint *params)
  {
    driver_glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParameters4fvEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC driver_glNamedProgramLocalParameters4fvEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParameters4fvEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    driver_glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParametersI4ivEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC driver_glNamedProgramLocalParametersI4ivEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParametersI4ivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    driver_glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
  }

  static void REGAL_CALL missing_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glNamedProgramLocalParametersI4uivEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC driver_glNamedProgramLocalParametersI4uivEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramLocalParametersI4uivEXT(Layer *_layer, GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    driver_glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
  }

  static void REGAL_CALL missing_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(string);
    Warning( "glNamedProgramStringEXT", " not available." );
  }

  PFNGLNAMEDPROGRAMSTRINGEXTPROC driver_glNamedProgramStringEXT = NULL;

  static void REGAL_CALL loader_glNamedProgramStringEXT(Layer *_layer, GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
  {
    driver_glNamedProgramStringEXT(program, target, format, len, string);
  }

  static void REGAL_CALL missing_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(renderbuffer);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glNamedRenderbufferStorageEXT", " not available." );
  }

  PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC driver_glNamedRenderbufferStorageEXT = NULL;

  static void REGAL_CALL loader_glNamedRenderbufferStorageEXT(Layer *_layer, GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
  }

  static void REGAL_CALL missing_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(renderbuffer);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glNamedRenderbufferStorageMultisampleCoverageEXT", " not available." );
  }

  PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC driver_glNamedRenderbufferStorageMultisampleCoverageEXT = NULL;

  static void REGAL_CALL loader_glNamedRenderbufferStorageMultisampleCoverageEXT(Layer *_layer, GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
  }

  static void REGAL_CALL missing_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(renderbuffer);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glNamedRenderbufferStorageMultisampleEXT", " not available." );
  }

  PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC driver_glNamedRenderbufferStorageMultisampleEXT = NULL;

  static void REGAL_CALL loader_glNamedRenderbufferStorageMultisampleEXT(Layer *_layer, GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
  }

  static void REGAL_CALL missing_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1dEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM1DEXTPROC driver_glProgramUniform1dEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform1dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x)
  {
    driver_glProgramUniform1dEXT(program, location, x);
  }

  static void REGAL_CALL missing_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM1DVEXTPROC driver_glProgramUniform1dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform1dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glProgramUniform1dvEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniform1fEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM1FEXTPROC driver_glProgramUniform1fEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform1fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0)
  {
    driver_glProgramUniform1fEXT(program, location, v0);
  }

  static void REGAL_CALL missing_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM1FVEXTPROC driver_glProgramUniform1fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform1fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glProgramUniform1fvEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniform1iEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM1IEXTPROC driver_glProgramUniform1iEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform1iEXT(Layer *_layer, GLuint program, GLint location, GLint v0)
  {
    driver_glProgramUniform1iEXT(program, location, v0);
  }

  static void REGAL_CALL missing_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1ivEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM1IVEXTPROC driver_glProgramUniform1ivEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform1ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    driver_glProgramUniform1ivEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniform1uiEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM1UIEXTPROC driver_glProgramUniform1uiEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform1uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0)
  {
    driver_glProgramUniform1uiEXT(program, location, v0);
  }

  static void REGAL_CALL missing_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1uivEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM1UIVEXTPROC driver_glProgramUniform1uivEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform1uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glProgramUniform1uivEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2dEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM2DEXTPROC driver_glProgramUniform2dEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform2dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y)
  {
    driver_glProgramUniform2dEXT(program, location, x, y);
  }

  static void REGAL_CALL missing_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM2DVEXTPROC driver_glProgramUniform2dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glProgramUniform2dvEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glProgramUniform2fEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM2FEXTPROC driver_glProgramUniform2fEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform2fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1)
  {
    driver_glProgramUniform2fEXT(program, location, v0, v1);
  }

  static void REGAL_CALL missing_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM2FVEXTPROC driver_glProgramUniform2fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glProgramUniform2fvEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glProgramUniform2iEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM2IEXTPROC driver_glProgramUniform2iEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform2iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1)
  {
    driver_glProgramUniform2iEXT(program, location, v0, v1);
  }

  static void REGAL_CALL missing_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2ivEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM2IVEXTPROC driver_glProgramUniform2ivEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform2ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    driver_glProgramUniform2ivEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glProgramUniform2uiEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM2UIEXTPROC driver_glProgramUniform2uiEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform2uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1)
  {
    driver_glProgramUniform2uiEXT(program, location, v0, v1);
  }

  static void REGAL_CALL missing_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2uivEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM2UIVEXTPROC driver_glProgramUniform2uivEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform2uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glProgramUniform2uivEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3dEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM3DEXTPROC driver_glProgramUniform3dEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform3dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glProgramUniform3dEXT(program, location, x, y, z);
  }

  static void REGAL_CALL missing_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM3DVEXTPROC driver_glProgramUniform3dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glProgramUniform3dvEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glProgramUniform3fEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM3FEXTPROC driver_glProgramUniform3fEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform3fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
  {
    driver_glProgramUniform3fEXT(program, location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM3FVEXTPROC driver_glProgramUniform3fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glProgramUniform3fvEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glProgramUniform3iEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM3IEXTPROC driver_glProgramUniform3iEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform3iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
  {
    driver_glProgramUniform3iEXT(program, location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3ivEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM3IVEXTPROC driver_glProgramUniform3ivEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform3ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    driver_glProgramUniform3ivEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glProgramUniform3uiEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM3UIEXTPROC driver_glProgramUniform3uiEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform3uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    driver_glProgramUniform3uiEXT(program, location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3uivEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM3UIVEXTPROC driver_glProgramUniform3uivEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform3uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glProgramUniform3uivEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4dEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM4DEXTPROC driver_glProgramUniform4dEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform4dEXT(Layer *_layer, GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glProgramUniform4dEXT(program, location, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM4DVEXTPROC driver_glProgramUniform4dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLdouble *value)
  {
    driver_glProgramUniform4dvEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glProgramUniform4fEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM4FEXTPROC driver_glProgramUniform4fEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform4fEXT(Layer *_layer, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
  {
    driver_glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM4FVEXTPROC driver_glProgramUniform4fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLfloat *value)
  {
    driver_glProgramUniform4fvEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glProgramUniform4iEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM4IEXTPROC driver_glProgramUniform4iEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform4iEXT(Layer *_layer, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
  {
    driver_glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4ivEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM4IVEXTPROC driver_glProgramUniform4ivEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform4ivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint *value)
  {
    driver_glProgramUniform4ivEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glProgramUniform4uiEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM4UIEXTPROC driver_glProgramUniform4uiEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform4uiEXT(Layer *_layer, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    driver_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4uivEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORM4UIVEXTPROC driver_glProgramUniform4uivEXT = NULL;

  static void REGAL_CALL loader_glProgramUniform4uivEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glProgramUniform4uivEXT(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC driver_glProgramUniformMatrix2dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC driver_glProgramUniformMatrix2fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x3dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC driver_glProgramUniformMatrix2x3dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2x3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x3fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC driver_glProgramUniformMatrix2x3fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2x3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x4dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC driver_glProgramUniformMatrix2x4dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2x4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix2x4fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC driver_glProgramUniformMatrix2x4fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix2x4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC driver_glProgramUniformMatrix3dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC driver_glProgramUniformMatrix3fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x2dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC driver_glProgramUniformMatrix3x2dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3x2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x2fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC driver_glProgramUniformMatrix3x2fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3x2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x4dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC driver_glProgramUniformMatrix3x4dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3x4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix3x4fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC driver_glProgramUniformMatrix3x4fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix3x4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC driver_glProgramUniformMatrix4dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC driver_glProgramUniformMatrix4fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x2dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC driver_glProgramUniformMatrix4x2dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4x2dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x2fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC driver_glProgramUniformMatrix4x2fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4x2fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x3dvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC driver_glProgramUniformMatrix4x3dvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4x3dvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
  {
    driver_glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformMatrix4x3fvEXT", " not available." );
  }

  PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC driver_glProgramUniformMatrix4x3fvEXT = NULL;

  static void REGAL_CALL loader_glProgramUniformMatrix4x3fvEXT(Layer *_layer, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
  }

  static void REGAL_CALL missing_glPushClientAttribDefaultEXT(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glPushClientAttribDefaultEXT", " not available." );
  }

  PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC driver_glPushClientAttribDefaultEXT = NULL;

  static void REGAL_CALL loader_glPushClientAttribDefaultEXT(Layer *_layer, GLbitfield mask)
  {
    driver_glPushClientAttribDefaultEXT(mask);
  }

  static void REGAL_CALL missing_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glTextureBufferEXT", " not available." );
  }

  PFNGLTEXTUREBUFFEREXTPROC driver_glTextureBufferEXT = NULL;

  static void REGAL_CALL loader_glTextureBufferEXT(Layer *_layer, GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
  {
    driver_glTextureBufferEXT(texture, target, internalformat, buffer);
  }

  static void REGAL_CALL missing_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureImage1DEXT", " not available." );
  }

  PFNGLTEXTUREIMAGE1DEXTPROC driver_glTextureImage1DEXT = NULL;

  static void REGAL_CALL loader_glTextureImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureImage2DEXT", " not available." );
  }

  PFNGLTEXTUREIMAGE2DEXTPROC driver_glTextureImage2DEXT = NULL;

  static void REGAL_CALL loader_glTextureImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureImage3DEXT", " not available." );
  }

  PFNGLTEXTUREIMAGE3DEXTPROC driver_glTextureImage3DEXT = NULL;

  static void REGAL_CALL loader_glTextureImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTextureParameterIivEXT", " not available." );
  }

  PFNGLTEXTUREPARAMETERIIVEXTPROC driver_glTextureParameterIivEXT = NULL;

  static void REGAL_CALL loader_glTextureParameterIivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glTextureParameterIivEXT(texture, target, pname, params);
  }

  static void REGAL_CALL missing_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTextureParameterIuivEXT", " not available." );
  }

  PFNGLTEXTUREPARAMETERIUIVEXTPROC driver_glTextureParameterIuivEXT = NULL;

  static void REGAL_CALL loader_glTextureParameterIuivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLuint *params)
  {
    driver_glTextureParameterIuivEXT(texture, target, pname, params);
  }

  static void REGAL_CALL missing_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTextureParameterfEXT", " not available." );
  }

  PFNGLTEXTUREPARAMETERFEXTPROC driver_glTextureParameterfEXT = NULL;

  static void REGAL_CALL loader_glTextureParameterfEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLfloat param)
  {
    driver_glTextureParameterfEXT(texture, target, pname, param);
  }

  static void REGAL_CALL missing_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTextureParameterfvEXT", " not available." );
  }

  PFNGLTEXTUREPARAMETERFVEXTPROC driver_glTextureParameterfvEXT = NULL;

  static void REGAL_CALL loader_glTextureParameterfvEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
  {
    driver_glTextureParameterfvEXT(texture, target, pname, param);
  }

  static void REGAL_CALL missing_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTextureParameteriEXT", " not available." );
  }

  PFNGLTEXTUREPARAMETERIEXTPROC driver_glTextureParameteriEXT = NULL;

  static void REGAL_CALL loader_glTextureParameteriEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, GLint param)
  {
    driver_glTextureParameteriEXT(texture, target, pname, param);
  }

  static void REGAL_CALL missing_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTextureParameterivEXT", " not available." );
  }

  PFNGLTEXTUREPARAMETERIVEXTPROC driver_glTextureParameterivEXT = NULL;

  static void REGAL_CALL loader_glTextureParameterivEXT(Layer *_layer, GLuint texture, GLenum target, GLenum pname, const GLint *param)
  {
    driver_glTextureParameterivEXT(texture, target, pname, param);
  }

  static void REGAL_CALL missing_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glTextureRenderbufferEXT", " not available." );
  }

  PFNGLTEXTURERENDERBUFFEREXTPROC driver_glTextureRenderbufferEXT = NULL;

  static void REGAL_CALL loader_glTextureRenderbufferEXT(Layer *_layer, GLuint texture, GLenum target, GLuint renderbuffer)
  {
    driver_glTextureRenderbufferEXT(texture, target, renderbuffer);
  }

  static void REGAL_CALL missing_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureSubImage1DEXT", " not available." );
  }

  PFNGLTEXTURESUBIMAGE1DEXTPROC driver_glTextureSubImage1DEXT = NULL;

  static void REGAL_CALL loader_glTextureSubImage1DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
  }

  static void REGAL_CALL missing_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureSubImage2DEXT", " not available." );
  }

  PFNGLTEXTURESUBIMAGE2DEXTPROC driver_glTextureSubImage2DEXT = NULL;

  static void REGAL_CALL loader_glTextureSubImage2DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
  }

  static void REGAL_CALL missing_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTextureSubImage3DEXT", " not available." );
  }

  PFNGLTEXTURESUBIMAGE3DEXTPROC driver_glTextureSubImage3DEXT = NULL;

  static void REGAL_CALL loader_glTextureSubImage3DEXT(Layer *_layer, GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

  static GLboolean REGAL_CALL missing_glUnmapNamedBufferEXT(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glUnmapNamedBufferEXT", " not available." );
    return GL_FALSE;
  }

  PFNGLUNMAPNAMEDBUFFEREXTPROC driver_glUnmapNamedBufferEXT = NULL;

  static GLboolean REGAL_CALL loader_glUnmapNamedBufferEXT(Layer *_layer, GLuint buffer)
  {
    return driver_glUnmapNamedBufferEXT(buffer);
  }

  static void REGAL_CALL missing_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayColorOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYCOLOROFFSETEXTPROC driver_glVertexArrayColorOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayEdgeFlagOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC driver_glVertexArrayEdgeFlagOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayEdgeFlagOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayFogCoordOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC driver_glVertexArrayFogCoordOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayFogCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayIndexOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYINDEXOFFSETEXTPROC driver_glVertexArrayIndexOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayIndexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(texunit);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayMultiTexCoordOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC driver_glVertexArrayMultiTexCoordOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayMultiTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayNormalOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYNORMALOFFSETEXTPROC driver_glVertexArrayNormalOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayNormalOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArraySecondaryColorOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC driver_glVertexArraySecondaryColorOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArraySecondaryColorOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayTexCoordOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC driver_glVertexArrayTexCoordOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayTexCoordOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayVertexAttribIOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC driver_glVertexArrayVertexAttribIOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexAttribIOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayVertexAttribOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC driver_glVertexArrayVertexAttribOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexAttribOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
  }

  static void REGAL_CALL missing_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayVertexOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC driver_glVertexArrayVertexOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
  {
    driver_glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
  }

// GL_EXT_discard_framebuffer

  static void REGAL_CALL missing_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numAttachments);
    UNUSED_PARAMETER(attachments);
    Warning( "glDiscardFramebufferEXT", " not available." );
  }

  PFNGLDISCARDFRAMEBUFFEREXTPROC driver_glDiscardFramebufferEXT = NULL;

  static void REGAL_CALL loader_glDiscardFramebufferEXT(Layer *_layer, GLenum target, GLsizei numAttachments, const GLenum *attachments)
  {
    driver_glDiscardFramebufferEXT(target, numAttachments, attachments);
  }

// GL_EXT_disjoint_timer_query

  static void REGAL_CALL missing_glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectivEXT", " not available." );
  }

  PFNGLGETQUERYOBJECTIVEXTPROC driver_glGetQueryObjectivEXT = NULL;

  static void REGAL_CALL loader_glGetQueryObjectivEXT(Layer *_layer, GLuint id, GLenum pname, GLint *params)
  {
    driver_glGetQueryObjectivEXT(id, pname, params);
  }

  static void REGAL_CALL missing_glQueryCounterEXT(GLuint id, GLenum target)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(target);
    Warning( "glQueryCounterEXT", " not available." );
  }

  PFNGLQUERYCOUNTEREXTPROC driver_glQueryCounterEXT = NULL;

  static void REGAL_CALL loader_glQueryCounterEXT(Layer *_layer, GLuint id, GLenum target)
  {
    driver_glQueryCounterEXT(id, target);
  }

// GL_EXT_draw_buffers2

  static void REGAL_CALL missing_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
  {
    UNUSED_PARAMETER(buf);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    Warning( "glColorMaskIndexedEXT", " not available." );
  }

  PFNGLCOLORMASKINDEXEDEXTPROC driver_glColorMaskIndexedEXT = NULL;

  static void REGAL_CALL loader_glColorMaskIndexedEXT(Layer *_layer, GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
  {
    driver_glColorMaskIndexedEXT(buf, r, g, b, a);
  }

  static void REGAL_CALL missing_glDisableIndexedEXT(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glDisableIndexedEXT", " not available." );
  }

  PFNGLDISABLEINDEXEDEXTPROC driver_glDisableIndexedEXT = NULL;

  static void REGAL_CALL loader_glDisableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
  {
    driver_glDisableIndexedEXT(target, index);
  }

  static void REGAL_CALL missing_glEnableIndexedEXT(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glEnableIndexedEXT", " not available." );
  }

  PFNGLENABLEINDEXEDEXTPROC driver_glEnableIndexedEXT = NULL;

  static void REGAL_CALL loader_glEnableIndexedEXT(Layer *_layer, GLenum target, GLuint index)
  {
    driver_glEnableIndexedEXT(target, index);
  }

  static void REGAL_CALL missing_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetBooleanIndexedvEXT", " not available." );
  }

  PFNGLGETBOOLEANINDEXEDVEXTPROC driver_glGetBooleanIndexedvEXT = NULL;

  static void REGAL_CALL loader_glGetBooleanIndexedvEXT(Layer *_layer, GLenum value, GLuint index, GLboolean *data)
  {
    driver_glGetBooleanIndexedvEXT(value, index, data);
  }

  static void REGAL_CALL missing_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegerIndexedvEXT", " not available." );
  }

  PFNGLGETINTEGERINDEXEDVEXTPROC driver_glGetIntegerIndexedvEXT = NULL;

  static void REGAL_CALL loader_glGetIntegerIndexedvEXT(Layer *_layer, GLenum value, GLuint index, GLint *data)
  {
    driver_glGetIntegerIndexedvEXT(value, index, data);
  }

  static GLboolean REGAL_CALL missing_glIsEnabledIndexedEXT(GLenum target, GLuint index)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    Warning( "glIsEnabledIndexedEXT", " not available." );
    return GL_FALSE;
  }

  PFNGLISENABLEDINDEXEDEXTPROC driver_glIsEnabledIndexedEXT = NULL;

  static GLboolean REGAL_CALL loader_glIsEnabledIndexedEXT(Layer *_layer, GLenum target, GLuint index)
  {
    return driver_glIsEnabledIndexedEXT(target, index);
  }

// GL_EXT_draw_instanced

  static void REGAL_CALL missing_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawArraysInstancedEXT", " not available." );
  }

  PFNGLDRAWARRAYSINSTANCEDEXTPROC driver_glDrawArraysInstancedEXT = NULL;

  static void REGAL_CALL loader_glDrawArraysInstancedEXT(Layer *_layer, GLenum mode, GLint start, GLsizei count, GLsizei primcount)
  {
    driver_glDrawArraysInstancedEXT(mode, start, count, primcount);
  }

  static void REGAL_CALL missing_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glDrawElementsInstancedEXT", " not available." );
  }

  PFNGLDRAWELEMENTSINSTANCEDEXTPROC driver_glDrawElementsInstancedEXT = NULL;

  static void REGAL_CALL loader_glDrawElementsInstancedEXT(Layer *_layer, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
  {
    driver_glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
  }

// GL_EXT_draw_range_elements

  static void REGAL_CALL missing_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(start);
    UNUSED_PARAMETER(end);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    Warning( "glDrawRangeElementsEXT", " not available." );
  }

  PFNGLDRAWRANGEELEMENTSEXTPROC driver_glDrawRangeElementsEXT = NULL;

  static void REGAL_CALL loader_glDrawRangeElementsEXT(Layer *_layer, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
  {
    driver_glDrawRangeElementsEXT(mode, start, end, count, type, indices);
  }

// GL_EXT_fog_coord

  static void REGAL_CALL missing_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glFogCoordPointerEXT", " not available." );
  }

  PFNGLFOGCOORDPOINTEREXTPROC driver_glFogCoordPointerEXT = NULL;

  static void REGAL_CALL loader_glFogCoordPointerEXT(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glFogCoordPointerEXT(type, stride, pointer);
  }

  static void REGAL_CALL missing_glFogCoorddEXT(GLdouble coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoorddEXT", " not available." );
  }

  PFNGLFOGCOORDDEXTPROC driver_glFogCoorddEXT = NULL;

  static void REGAL_CALL loader_glFogCoorddEXT(Layer *_layer, GLdouble coord)
  {
    driver_glFogCoorddEXT(coord);
  }

  static void REGAL_CALL missing_glFogCoorddvEXT(const GLdouble *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoorddvEXT", " not available." );
  }

  PFNGLFOGCOORDDVEXTPROC driver_glFogCoorddvEXT = NULL;

  static void REGAL_CALL loader_glFogCoorddvEXT(Layer *_layer, const GLdouble *coord)
  {
    driver_glFogCoorddvEXT(coord);
  }

  static void REGAL_CALL missing_glFogCoordfEXT(GLfloat coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordfEXT", " not available." );
  }

  PFNGLFOGCOORDFEXTPROC driver_glFogCoordfEXT = NULL;

  static void REGAL_CALL loader_glFogCoordfEXT(Layer *_layer, GLfloat coord)
  {
    driver_glFogCoordfEXT(coord);
  }

  static void REGAL_CALL missing_glFogCoordfvEXT(const GLfloat *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordfvEXT", " not available." );
  }

  PFNGLFOGCOORDFVEXTPROC driver_glFogCoordfvEXT = NULL;

  static void REGAL_CALL loader_glFogCoordfvEXT(Layer *_layer, const GLfloat *coord)
  {
    driver_glFogCoordfvEXT(coord);
  }

// GL_EXT_fragment_lighting

  static void REGAL_CALL missing_glFragmentColorMaterialEXT(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glFragmentColorMaterialEXT", " not available." );
  }

  PFNGLFRAGMENTCOLORMATERIALEXTPROC driver_glFragmentColorMaterialEXT = NULL;

  static void REGAL_CALL loader_glFragmentColorMaterialEXT(Layer *_layer, GLenum face, GLenum mode)
  {
    driver_glFragmentColorMaterialEXT(face, mode);
  }

  static void REGAL_CALL missing_glFragmentLightModelfEXT(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightModelfEXT", " not available." );
  }

  PFNGLFRAGMENTLIGHTMODELFEXTPROC driver_glFragmentLightModelfEXT = NULL;

  static void REGAL_CALL loader_glFragmentLightModelfEXT(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glFragmentLightModelfEXT(pname, param);
  }

  static void REGAL_CALL missing_glFragmentLightModelfvEXT(GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightModelfvEXT", " not available." );
  }

  PFNGLFRAGMENTLIGHTMODELFVEXTPROC driver_glFragmentLightModelfvEXT = NULL;

  static void REGAL_CALL loader_glFragmentLightModelfvEXT(Layer *_layer, GLenum pname, GLfloat *params)
  {
    driver_glFragmentLightModelfvEXT(pname, params);
  }

  static void REGAL_CALL missing_glFragmentLightModeliEXT(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightModeliEXT", " not available." );
  }

  PFNGLFRAGMENTLIGHTMODELIEXTPROC driver_glFragmentLightModeliEXT = NULL;

  static void REGAL_CALL loader_glFragmentLightModeliEXT(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glFragmentLightModeliEXT(pname, param);
  }

  static void REGAL_CALL missing_glFragmentLightModelivEXT(GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightModelivEXT", " not available." );
  }

  PFNGLFRAGMENTLIGHTMODELIVEXTPROC driver_glFragmentLightModelivEXT = NULL;

  static void REGAL_CALL loader_glFragmentLightModelivEXT(Layer *_layer, GLenum pname, GLint *params)
  {
    driver_glFragmentLightModelivEXT(pname, params);
  }

  static void REGAL_CALL missing_glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightfEXT", " not available." );
  }

  PFNGLFRAGMENTLIGHTFEXTPROC driver_glFragmentLightfEXT = NULL;

  static void REGAL_CALL loader_glFragmentLightfEXT(Layer *_layer, GLenum light, GLenum pname, GLfloat param)
  {
    driver_glFragmentLightfEXT(light, pname, param);
  }

  static void REGAL_CALL missing_glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightfvEXT", " not available." );
  }

  PFNGLFRAGMENTLIGHTFVEXTPROC driver_glFragmentLightfvEXT = NULL;

  static void REGAL_CALL loader_glFragmentLightfvEXT(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
  {
    driver_glFragmentLightfvEXT(light, pname, params);
  }

  static void REGAL_CALL missing_glFragmentLightiEXT(GLenum light, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightiEXT", " not available." );
  }

  PFNGLFRAGMENTLIGHTIEXTPROC driver_glFragmentLightiEXT = NULL;

  static void REGAL_CALL loader_glFragmentLightiEXT(Layer *_layer, GLenum light, GLenum pname, GLint param)
  {
    driver_glFragmentLightiEXT(light, pname, param);
  }

  static void REGAL_CALL missing_glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightivEXT", " not available." );
  }

  PFNGLFRAGMENTLIGHTIVEXTPROC driver_glFragmentLightivEXT = NULL;

  static void REGAL_CALL loader_glFragmentLightivEXT(Layer *_layer, GLenum light, GLenum pname, GLint *params)
  {
    driver_glFragmentLightivEXT(light, pname, params);
  }

  static void REGAL_CALL missing_glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentMaterialfEXT", " not available." );
  }

  PFNGLFRAGMENTMATERIALFEXTPROC driver_glFragmentMaterialfEXT = NULL;

  static void REGAL_CALL loader_glFragmentMaterialfEXT(Layer *_layer, GLenum face, GLenum pname, const GLfloat param)
  {
    driver_glFragmentMaterialfEXT(face, pname, param);
  }

  static void REGAL_CALL missing_glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentMaterialfvEXT", " not available." );
  }

  PFNGLFRAGMENTMATERIALFVEXTPROC driver_glFragmentMaterialfvEXT = NULL;

  static void REGAL_CALL loader_glFragmentMaterialfvEXT(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
  {
    driver_glFragmentMaterialfvEXT(face, pname, params);
  }

  static void REGAL_CALL missing_glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentMaterialiEXT", " not available." );
  }

  PFNGLFRAGMENTMATERIALIEXTPROC driver_glFragmentMaterialiEXT = NULL;

  static void REGAL_CALL loader_glFragmentMaterialiEXT(Layer *_layer, GLenum face, GLenum pname, const GLint param)
  {
    driver_glFragmentMaterialiEXT(face, pname, param);
  }

  static void REGAL_CALL missing_glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentMaterialivEXT", " not available." );
  }

  PFNGLFRAGMENTMATERIALIVEXTPROC driver_glFragmentMaterialivEXT = NULL;

  static void REGAL_CALL loader_glFragmentMaterialivEXT(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
  {
    driver_glFragmentMaterialivEXT(face, pname, params);
  }

  static void REGAL_CALL missing_glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentLightfvEXT", " not available." );
  }

  PFNGLGETFRAGMENTLIGHTFVEXTPROC driver_glGetFragmentLightfvEXT = NULL;

  static void REGAL_CALL loader_glGetFragmentLightfvEXT(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
  {
    driver_glGetFragmentLightfvEXT(light, pname, params);
  }

  static void REGAL_CALL missing_glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentLightivEXT", " not available." );
  }

  PFNGLGETFRAGMENTLIGHTIVEXTPROC driver_glGetFragmentLightivEXT = NULL;

  static void REGAL_CALL loader_glGetFragmentLightivEXT(Layer *_layer, GLenum light, GLenum pname, GLint *params)
  {
    driver_glGetFragmentLightivEXT(light, pname, params);
  }

  static void REGAL_CALL missing_glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentMaterialfvEXT", " not available." );
  }

  PFNGLGETFRAGMENTMATERIALFVEXTPROC driver_glGetFragmentMaterialfvEXT = NULL;

  static void REGAL_CALL loader_glGetFragmentMaterialfvEXT(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
  {
    driver_glGetFragmentMaterialfvEXT(face, pname, params);
  }

  static void REGAL_CALL missing_glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentMaterialivEXT", " not available." );
  }

  PFNGLGETFRAGMENTMATERIALIVEXTPROC driver_glGetFragmentMaterialivEXT = NULL;

  static void REGAL_CALL loader_glGetFragmentMaterialivEXT(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
  {
    driver_glGetFragmentMaterialivEXT(face, pname, params);
  }

  static void REGAL_CALL missing_glLightEnviEXT(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightEnviEXT", " not available." );
  }

  PFNGLLIGHTENVIEXTPROC driver_glLightEnviEXT = NULL;

  static void REGAL_CALL loader_glLightEnviEXT(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glLightEnviEXT(pname, param);
  }

// GL_EXT_framebuffer_blit

  static void REGAL_CALL missing_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glBlitFramebufferEXT", " not available." );
  }

  PFNGLBLITFRAMEBUFFEREXTPROC driver_glBlitFramebufferEXT = NULL;

  static void REGAL_CALL loader_glBlitFramebufferEXT(Layer *_layer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    driver_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

// GL_EXT_framebuffer_multisample

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleEXT", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC driver_glRenderbufferStorageMultisampleEXT = NULL;

  static void REGAL_CALL loader_glRenderbufferStorageMultisampleEXT(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
  }

// GL_EXT_framebuffer_object

  static void REGAL_CALL missing_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(framebuffer);
    Warning( "glBindFramebufferEXT", " not available." );
  }

  PFNGLBINDFRAMEBUFFEREXTPROC driver_glBindFramebufferEXT = NULL;

  static void REGAL_CALL loader_glBindFramebufferEXT(Layer *_layer, GLenum target, GLuint framebuffer)
  {
    driver_glBindFramebufferEXT(target, framebuffer);
  }

  static void REGAL_CALL missing_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glBindRenderbufferEXT", " not available." );
  }

  PFNGLBINDRENDERBUFFEREXTPROC driver_glBindRenderbufferEXT = NULL;

  static void REGAL_CALL loader_glBindRenderbufferEXT(Layer *_layer, GLenum target, GLuint renderbuffer)
  {
    driver_glBindRenderbufferEXT(target, renderbuffer);
  }

  static GLenum REGAL_CALL missing_glCheckFramebufferStatusEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glCheckFramebufferStatusEXT", " not available." );
    return 0;
  }

  PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC driver_glCheckFramebufferStatusEXT = NULL;

  static GLenum REGAL_CALL loader_glCheckFramebufferStatusEXT(Layer *_layer, GLenum target)
  {
    return driver_glCheckFramebufferStatusEXT(target);
  }

  static void REGAL_CALL missing_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glDeleteFramebuffersEXT", " not available." );
  }

  PFNGLDELETEFRAMEBUFFERSEXTPROC driver_glDeleteFramebuffersEXT = NULL;

  static void REGAL_CALL loader_glDeleteFramebuffersEXT(Layer *_layer, GLsizei n, const GLuint *framebuffers)
  {
    driver_glDeleteFramebuffersEXT(n, framebuffers);
  }

  static void REGAL_CALL missing_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glDeleteRenderbuffersEXT", " not available." );
  }

  PFNGLDELETERENDERBUFFERSEXTPROC driver_glDeleteRenderbuffersEXT = NULL;

  static void REGAL_CALL loader_glDeleteRenderbuffersEXT(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
  {
    driver_glDeleteRenderbuffersEXT(n, renderbuffers);
  }

  static void REGAL_CALL missing_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(renderbuffertarget);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glFramebufferRenderbufferEXT", " not available." );
  }

  PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC driver_glFramebufferRenderbufferEXT = NULL;

  static void REGAL_CALL loader_glFramebufferRenderbufferEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    driver_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
  }

  static void REGAL_CALL missing_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture1DEXT", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE1DEXTPROC driver_glFramebufferTexture1DEXT = NULL;

  static void REGAL_CALL loader_glFramebufferTexture1DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    driver_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
  }

  static void REGAL_CALL missing_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture2DEXT", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE2DEXTPROC driver_glFramebufferTexture2DEXT = NULL;

  static void REGAL_CALL loader_glFramebufferTexture2DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    driver_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
  }

  static void REGAL_CALL missing_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(zoffset);
    Warning( "glFramebufferTexture3DEXT", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE3DEXTPROC driver_glFramebufferTexture3DEXT = NULL;

  static void REGAL_CALL loader_glFramebufferTexture3DEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    driver_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
  }

  static void REGAL_CALL missing_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glGenFramebuffersEXT", " not available." );
  }

  PFNGLGENFRAMEBUFFERSEXTPROC driver_glGenFramebuffersEXT = NULL;

  static void REGAL_CALL loader_glGenFramebuffersEXT(Layer *_layer, GLsizei n, GLuint *framebuffers)
  {
    driver_glGenFramebuffersEXT(n, framebuffers);
  }

  static void REGAL_CALL missing_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glGenRenderbuffersEXT", " not available." );
  }

  PFNGLGENRENDERBUFFERSEXTPROC driver_glGenRenderbuffersEXT = NULL;

  static void REGAL_CALL loader_glGenRenderbuffersEXT(Layer *_layer, GLsizei n, GLuint *renderbuffers)
  {
    driver_glGenRenderbuffersEXT(n, renderbuffers);
  }

  static void REGAL_CALL missing_glGenerateMipmapEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glGenerateMipmapEXT", " not available." );
  }

  PFNGLGENERATEMIPMAPEXTPROC driver_glGenerateMipmapEXT = NULL;

  static void REGAL_CALL loader_glGenerateMipmapEXT(Layer *_layer, GLenum target)
  {
    driver_glGenerateMipmapEXT(target);
  }

  static void REGAL_CALL missing_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferAttachmentParameterivEXT", " not available." );
  }

  PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC driver_glGetFramebufferAttachmentParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetFramebufferAttachmentParameterivEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    driver_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
  }

  static void REGAL_CALL missing_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetRenderbufferParameterivEXT", " not available." );
  }

  PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC driver_glGetRenderbufferParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetRenderbufferParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetRenderbufferParameterivEXT(target, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsFramebufferEXT(GLuint framebuffer)
  {
    UNUSED_PARAMETER(framebuffer);
    Warning( "glIsFramebufferEXT", " not available." );
    return GL_FALSE;
  }

  PFNGLISFRAMEBUFFEREXTPROC driver_glIsFramebufferEXT = NULL;

  static GLboolean REGAL_CALL loader_glIsFramebufferEXT(Layer *_layer, GLuint framebuffer)
  {
    return driver_glIsFramebufferEXT(framebuffer);
  }

  static GLboolean REGAL_CALL missing_glIsRenderbufferEXT(GLuint renderbuffer)
  {
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glIsRenderbufferEXT", " not available." );
    return GL_FALSE;
  }

  PFNGLISRENDERBUFFEREXTPROC driver_glIsRenderbufferEXT = NULL;

  static GLboolean REGAL_CALL loader_glIsRenderbufferEXT(Layer *_layer, GLuint renderbuffer)
  {
    return driver_glIsRenderbufferEXT(renderbuffer);
  }

  static void REGAL_CALL missing_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageEXT", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEEXTPROC driver_glRenderbufferStorageEXT = NULL;

  static void REGAL_CALL loader_glRenderbufferStorageEXT(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorageEXT(target, internalformat, width, height);
  }

// GL_EXT_geometry_shader4

  static void REGAL_CALL missing_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTextureEXT", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTUREEXTPROC driver_glFramebufferTextureEXT = NULL;

  static void REGAL_CALL loader_glFramebufferTextureEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level)
  {
    driver_glFramebufferTextureEXT(target, attachment, texture, level);
  }

  static void REGAL_CALL missing_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(face);
    Warning( "glFramebufferTextureFaceEXT", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC driver_glFramebufferTextureFaceEXT = NULL;

  static void REGAL_CALL loader_glFramebufferTextureFaceEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
  {
    driver_glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
  }

  static void REGAL_CALL missing_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glProgramParameteriEXT", " not available." );
  }

  PFNGLPROGRAMPARAMETERIEXTPROC driver_glProgramParameteriEXT = NULL;

  static void REGAL_CALL loader_glProgramParameteriEXT(Layer *_layer, GLuint program, GLenum pname, GLint value)
  {
    driver_glProgramParameteriEXT(program, pname, value);
  }

// GL_EXT_gpu_program_parameters

  static void REGAL_CALL missing_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameters4fvEXT", " not available." );
  }

  PFNGLPROGRAMENVPARAMETERS4FVEXTPROC driver_glProgramEnvParameters4fvEXT = NULL;

  static void REGAL_CALL loader_glProgramEnvParameters4fvEXT(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    driver_glProgramEnvParameters4fvEXT(target, index, count, params);
  }

  static void REGAL_CALL missing_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameters4fvEXT", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC driver_glProgramLocalParameters4fvEXT = NULL;

  static void REGAL_CALL loader_glProgramLocalParameters4fvEXT(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
  {
    driver_glProgramLocalParameters4fvEXT(target, index, count, params);
  }

// GL_EXT_gpu_shader4

  static void REGAL_CALL missing_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(name);
    Warning( "glBindFragDataLocationEXT", " not available." );
  }

  PFNGLBINDFRAGDATALOCATIONEXTPROC driver_glBindFragDataLocationEXT = NULL;

  static void REGAL_CALL loader_glBindFragDataLocationEXT(Layer *_layer, GLuint program, GLuint color, const GLchar *name)
  {
    driver_glBindFragDataLocationEXT(program, color, name);
  }

  static GLint REGAL_CALL missing_glGetFragDataLocationEXT(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetFragDataLocationEXT", " not available." );
    return 0;
  }

  PFNGLGETFRAGDATALOCATIONEXTPROC driver_glGetFragDataLocationEXT = NULL;

  static GLint REGAL_CALL loader_glGetFragDataLocationEXT(Layer *_layer, GLuint program, const GLchar *name)
  {
    return driver_glGetFragDataLocationEXT(program, name);
  }

  static void REGAL_CALL missing_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformuivEXT", " not available." );
  }

  PFNGLGETUNIFORMUIVEXTPROC driver_glGetUniformuivEXT = NULL;

  static void REGAL_CALL loader_glGetUniformuivEXT(Layer *_layer, GLuint program, GLint location, GLuint *params)
  {
    driver_glGetUniformuivEXT(program, location, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribIivEXT", " not available." );
  }

  PFNGLGETVERTEXATTRIBIIVEXTPROC driver_glGetVertexAttribIivEXT = NULL;

  static void REGAL_CALL loader_glGetVertexAttribIivEXT(Layer *_layer, GLuint index, GLenum pname, GLint *params)
  {
    driver_glGetVertexAttribIivEXT(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribIuivEXT", " not available." );
  }

  PFNGLGETVERTEXATTRIBIUIVEXTPROC driver_glGetVertexAttribIuivEXT = NULL;

  static void REGAL_CALL loader_glGetVertexAttribIuivEXT(Layer *_layer, GLuint index, GLenum pname, GLuint *params)
  {
    driver_glGetVertexAttribIuivEXT(index, pname, params);
  }

  static void REGAL_CALL missing_glUniform1uiEXT(GLint location, GLuint v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniform1uiEXT", " not available." );
  }

  PFNGLUNIFORM1UIEXTPROC driver_glUniform1uiEXT = NULL;

  static void REGAL_CALL loader_glUniform1uiEXT(Layer *_layer, GLint location, GLuint v0)
  {
    driver_glUniform1uiEXT(location, v0);
  }

  static void REGAL_CALL missing_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1uivEXT", " not available." );
  }

  PFNGLUNIFORM1UIVEXTPROC driver_glUniform1uivEXT = NULL;

  static void REGAL_CALL loader_glUniform1uivEXT(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glUniform1uivEXT(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    Warning( "glUniform2uiEXT", " not available." );
  }

  PFNGLUNIFORM2UIEXTPROC driver_glUniform2uiEXT = NULL;

  static void REGAL_CALL loader_glUniform2uiEXT(Layer *_layer, GLint location, GLuint v0, GLuint v1)
  {
    driver_glUniform2uiEXT(location, v0, v1);
  }

  static void REGAL_CALL missing_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2uivEXT", " not available." );
  }

  PFNGLUNIFORM2UIVEXTPROC driver_glUniform2uivEXT = NULL;

  static void REGAL_CALL loader_glUniform2uivEXT(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glUniform2uivEXT(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    Warning( "glUniform3uiEXT", " not available." );
  }

  PFNGLUNIFORM3UIEXTPROC driver_glUniform3uiEXT = NULL;

  static void REGAL_CALL loader_glUniform3uiEXT(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2)
  {
    driver_glUniform3uiEXT(location, v0, v1, v2);
  }

  static void REGAL_CALL missing_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3uivEXT", " not available." );
  }

  PFNGLUNIFORM3UIVEXTPROC driver_glUniform3uivEXT = NULL;

  static void REGAL_CALL loader_glUniform3uivEXT(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glUniform3uivEXT(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(v3);
    Warning( "glUniform4uiEXT", " not available." );
  }

  PFNGLUNIFORM4UIEXTPROC driver_glUniform4uiEXT = NULL;

  static void REGAL_CALL loader_glUniform4uiEXT(Layer *_layer, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
  {
    driver_glUniform4uiEXT(location, v0, v1, v2, v3);
  }

  static void REGAL_CALL missing_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4uivEXT", " not available." );
  }

  PFNGLUNIFORM4UIVEXTPROC driver_glUniform4uivEXT = NULL;

  static void REGAL_CALL loader_glUniform4uivEXT(Layer *_layer, GLint location, GLsizei count, const GLuint *value)
  {
    driver_glUniform4uivEXT(location, count, value);
  }

  static void REGAL_CALL missing_glVertexAttribI1iEXT(GLuint index, GLint x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribI1iEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI1IEXTPROC driver_glVertexAttribI1iEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI1iEXT(Layer *_layer, GLuint index, GLint x)
  {
    driver_glVertexAttribI1iEXT(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribI1ivEXT(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI1ivEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI1IVEXTPROC driver_glVertexAttribI1ivEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI1ivEXT(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttribI1ivEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI1uiEXT(GLuint index, GLuint x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribI1uiEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI1UIEXTPROC driver_glVertexAttribI1uiEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI1uiEXT(Layer *_layer, GLuint index, GLuint x)
  {
    driver_glVertexAttribI1uiEXT(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI1uivEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI1UIVEXTPROC driver_glVertexAttribI1uivEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI1uivEXT(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttribI1uivEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribI2iEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI2IEXTPROC driver_glVertexAttribI2iEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI2iEXT(Layer *_layer, GLuint index, GLint x, GLint y)
  {
    driver_glVertexAttribI2iEXT(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttribI2ivEXT(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI2ivEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI2IVEXTPROC driver_glVertexAttribI2ivEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI2ivEXT(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttribI2ivEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribI2uiEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI2UIEXTPROC driver_glVertexAttribI2uiEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI2uiEXT(Layer *_layer, GLuint index, GLuint x, GLuint y)
  {
    driver_glVertexAttribI2uiEXT(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI2uivEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI2UIVEXTPROC driver_glVertexAttribI2uivEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI2uivEXT(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttribI2uivEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribI3iEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI3IEXTPROC driver_glVertexAttribI3iEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI3iEXT(Layer *_layer, GLuint index, GLint x, GLint y, GLint z)
  {
    driver_glVertexAttribI3iEXT(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttribI3ivEXT(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI3ivEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI3IVEXTPROC driver_glVertexAttribI3ivEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI3ivEXT(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttribI3ivEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribI3uiEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI3UIEXTPROC driver_glVertexAttribI3uiEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI3uiEXT(Layer *_layer, GLuint index, GLuint x, GLuint y, GLuint z)
  {
    driver_glVertexAttribI3uiEXT(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI3uivEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI3UIVEXTPROC driver_glVertexAttribI3uivEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI3uivEXT(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttribI3uivEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4bvEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI4BVEXTPROC driver_glVertexAttribI4bvEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI4bvEXT(Layer *_layer, GLuint index, const GLbyte *v)
  {
    driver_glVertexAttribI4bvEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribI4iEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI4IEXTPROC driver_glVertexAttribI4iEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI4iEXT(Layer *_layer, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glVertexAttribI4iEXT(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttribI4ivEXT(GLuint index, const GLint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4ivEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI4IVEXTPROC driver_glVertexAttribI4ivEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI4ivEXT(Layer *_layer, GLuint index, const GLint *v)
  {
    driver_glVertexAttribI4ivEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4svEXT(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4svEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI4SVEXTPROC driver_glVertexAttribI4svEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI4svEXT(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttribI4svEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4ubvEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI4UBVEXTPROC driver_glVertexAttribI4ubvEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI4ubvEXT(Layer *_layer, GLuint index, const GLubyte *v)
  {
    driver_glVertexAttribI4ubvEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribI4uiEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI4UIEXTPROC driver_glVertexAttribI4uiEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI4uiEXT(Layer *_layer, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    driver_glVertexAttribI4uiEXT(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4uivEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI4UIVEXTPROC driver_glVertexAttribI4uivEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI4uivEXT(Layer *_layer, GLuint index, const GLuint *v)
  {
    driver_glVertexAttribI4uivEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribI4usvEXT", " not available." );
  }

  PFNGLVERTEXATTRIBI4USVEXTPROC driver_glVertexAttribI4usvEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribI4usvEXT(Layer *_layer, GLuint index, const GLushort *v)
  {
    driver_glVertexAttribI4usvEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribIPointerEXT", " not available." );
  }

  PFNGLVERTEXATTRIBIPOINTEREXTPROC driver_glVertexAttribIPointerEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribIPointerEXT(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexAttribIPointerEXT(index, size, type, stride, pointer);
  }

// GL_EXT_histogram

  static void REGAL_CALL missing_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(values);
    Warning( "glGetHistogramEXT", " not available." );
  }

  PFNGLGETHISTOGRAMEXTPROC driver_glGetHistogramEXT = NULL;

  static void REGAL_CALL loader_glGetHistogramEXT(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    driver_glGetHistogramEXT(target, reset, format, type, values);
  }

  static void REGAL_CALL missing_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetHistogramParameterfvEXT", " not available." );
  }

  PFNGLGETHISTOGRAMPARAMETERFVEXTPROC driver_glGetHistogramParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetHistogramParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetHistogramParameterfvEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetHistogramParameterivEXT", " not available." );
  }

  PFNGLGETHISTOGRAMPARAMETERIVEXTPROC driver_glGetHistogramParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetHistogramParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetHistogramParameterivEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(reset);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(values);
    Warning( "glGetMinmaxEXT", " not available." );
  }

  PFNGLGETMINMAXEXTPROC driver_glGetMinmaxEXT = NULL;

  static void REGAL_CALL loader_glGetMinmaxEXT(Layer *_layer, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
  {
    driver_glGetMinmaxEXT(target, reset, format, type, values);
  }

  static void REGAL_CALL missing_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMinmaxParameterfvEXT", " not available." );
  }

  PFNGLGETMINMAXPARAMETERFVEXTPROC driver_glGetMinmaxParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetMinmaxParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetMinmaxParameterfvEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMinmaxParameterivEXT", " not available." );
  }

  PFNGLGETMINMAXPARAMETERIVEXTPROC driver_glGetMinmaxParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetMinmaxParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetMinmaxParameterivEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(sink);
    Warning( "glHistogramEXT", " not available." );
  }

  PFNGLHISTOGRAMEXTPROC driver_glHistogramEXT = NULL;

  static void REGAL_CALL loader_glHistogramEXT(Layer *_layer, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
  {
    driver_glHistogramEXT(target, width, internalformat, sink);
  }

  static void REGAL_CALL missing_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(sink);
    Warning( "glMinmaxEXT", " not available." );
  }

  PFNGLMINMAXEXTPROC driver_glMinmaxEXT = NULL;

  static void REGAL_CALL loader_glMinmaxEXT(Layer *_layer, GLenum target, GLenum internalformat, GLboolean sink)
  {
    driver_glMinmaxEXT(target, internalformat, sink);
  }

  static void REGAL_CALL missing_glResetHistogramEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glResetHistogramEXT", " not available." );
  }

  PFNGLRESETHISTOGRAMEXTPROC driver_glResetHistogramEXT = NULL;

  static void REGAL_CALL loader_glResetHistogramEXT(Layer *_layer, GLenum target)
  {
    driver_glResetHistogramEXT(target);
  }

  static void REGAL_CALL missing_glResetMinmaxEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glResetMinmaxEXT", " not available." );
  }

  PFNGLRESETMINMAXEXTPROC driver_glResetMinmaxEXT = NULL;

  static void REGAL_CALL loader_glResetMinmaxEXT(Layer *_layer, GLenum target)
  {
    driver_glResetMinmaxEXT(target);
  }

// GL_EXT_index_func

  static void REGAL_CALL missing_glIndexFuncEXT(GLenum func, GLfloat ref)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    Warning( "glIndexFuncEXT", " not available." );
  }

  PFNGLINDEXFUNCEXTPROC driver_glIndexFuncEXT = NULL;

  static void REGAL_CALL loader_glIndexFuncEXT(Layer *_layer, GLenum func, GLfloat ref)
  {
    driver_glIndexFuncEXT(func, ref);
  }

// GL_EXT_index_material

  static void REGAL_CALL missing_glIndexMaterialEXT(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glIndexMaterialEXT", " not available." );
  }

  PFNGLINDEXMATERIALEXTPROC driver_glIndexMaterialEXT = NULL;

  static void REGAL_CALL loader_glIndexMaterialEXT(Layer *_layer, GLenum face, GLenum mode)
  {
    driver_glIndexMaterialEXT(face, mode);
  }

// GL_EXT_light_texture

  static void REGAL_CALL missing_glApplyTextureEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glApplyTextureEXT", " not available." );
  }

  PFNGLAPPLYTEXTUREEXTPROC driver_glApplyTextureEXT = NULL;

  static void REGAL_CALL loader_glApplyTextureEXT(Layer *_layer, GLenum mode)
  {
    driver_glApplyTextureEXT(mode);
  }

  static void REGAL_CALL missing_glTextureLightEXT(GLenum pname)
  {
    UNUSED_PARAMETER(pname);
    Warning( "glTextureLightEXT", " not available." );
  }

  PFNGLTEXTURELIGHTEXTPROC driver_glTextureLightEXT = NULL;

  static void REGAL_CALL loader_glTextureLightEXT(Layer *_layer, GLenum pname)
  {
    driver_glTextureLightEXT(pname);
  }

  static void REGAL_CALL missing_glTextureMaterialEXT(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glTextureMaterialEXT", " not available." );
  }

  PFNGLTEXTUREMATERIALEXTPROC driver_glTextureMaterialEXT = NULL;

  static void REGAL_CALL loader_glTextureMaterialEXT(Layer *_layer, GLenum face, GLenum mode)
  {
    driver_glTextureMaterialEXT(face, mode);
  }

// GL_EXT_map_buffer_range

  static void REGAL_CALL missing_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    Warning( "glFlushMappedBufferRangeEXT", " not available." );
  }

  PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC driver_glFlushMappedBufferRangeEXT = NULL;

  static void REGAL_CALL loader_glFlushMappedBufferRangeEXT(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length)
  {
    driver_glFlushMappedBufferRangeEXT(target, offset, length);
  }

  static GLvoid *REGAL_CALL missing_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(access);
    Warning( "glMapBufferRangeEXT", " not available." );
    return NULL;
  }

  PFNGLMAPBUFFERRANGEEXTPROC driver_glMapBufferRangeEXT = NULL;

  static GLvoid *REGAL_CALL loader_glMapBufferRangeEXT(Layer *_layer, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
  {
    return driver_glMapBufferRangeEXT(target, offset, length, access);
  }

// GL_EXT_multi_draw_arrays

  static void REGAL_CALL missing_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawArraysEXT", " not available." );
  }

  PFNGLMULTIDRAWARRAYSEXTPROC driver_glMultiDrawArraysEXT = NULL;

  static void REGAL_CALL loader_glMultiDrawArraysEXT(Layer *_layer, GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
  {
    driver_glMultiDrawArraysEXT(mode, first, count, primcount);
  }

  static void REGAL_CALL missing_glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    Warning( "glMultiDrawElementsEXT", " not available." );
  }

  PFNGLMULTIDRAWELEMENTSEXTPROC driver_glMultiDrawElementsEXT = NULL;

  static void REGAL_CALL loader_glMultiDrawElementsEXT(Layer *_layer, GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
  {
    driver_glMultiDrawElementsEXT(mode, count, type, indices, primcount);
  }

// GL_EXT_multisample

  static void REGAL_CALL missing_glSampleMaskEXT(GLclampf value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleMaskEXT", " not available." );
  }

  PFNGLSAMPLEMASKEXTPROC driver_glSampleMaskEXT = NULL;

  static void REGAL_CALL loader_glSampleMaskEXT(Layer *_layer, GLclampf value, GLboolean invert)
  {
    driver_glSampleMaskEXT(value, invert);
  }

  static void REGAL_CALL missing_glSamplePatternEXT(GLenum pattern)
  {
    UNUSED_PARAMETER(pattern);
    Warning( "glSamplePatternEXT", " not available." );
  }

  PFNGLSAMPLEPATTERNEXTPROC driver_glSamplePatternEXT = NULL;

  static void REGAL_CALL loader_glSamplePatternEXT(Layer *_layer, GLenum pattern)
  {
    driver_glSamplePatternEXT(pattern);
  }

// GL_EXT_multisampled_render_to_texture

  static void REGAL_CALL missing_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(samples);
    Warning( "glFramebufferTexture2DMultisampleEXT", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC driver_glFramebufferTexture2DMultisampleEXT = NULL;

  static void REGAL_CALL loader_glFramebufferTexture2DMultisampleEXT(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
  {
    driver_glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
  }

// GL_EXT_multiview_draw_buffers

  static void REGAL_CALL missing_glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(indices);
    Warning( "glDrawBuffersIndexedEXT", " not available." );
  }

  PFNGLDRAWBUFFERSINDEXEDEXTPROC driver_glDrawBuffersIndexedEXT = NULL;

  static void REGAL_CALL loader_glDrawBuffersIndexedEXT(Layer *_layer, GLint n, const GLenum *location, const GLint *indices)
  {
    driver_glDrawBuffersIndexedEXT(n, location, indices);
  }

  static void REGAL_CALL missing_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegeri_vEXT", " not available." );
  }

  PFNGLGETINTEGERI_VEXTPROC driver_glGetIntegeri_vEXT = NULL;

  static void REGAL_CALL loader_glGetIntegeri_vEXT(Layer *_layer, GLenum target, GLuint index, GLint *data)
  {
    driver_glGetIntegeri_vEXT(target, index, data);
  }

  static void REGAL_CALL missing_glReadBufferIndexedEXT(GLenum src, GLint index)
  {
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(index);
    Warning( "glReadBufferIndexedEXT", " not available." );
  }

  PFNGLREADBUFFERINDEXEDEXTPROC driver_glReadBufferIndexedEXT = NULL;

  static void REGAL_CALL loader_glReadBufferIndexedEXT(Layer *_layer, GLenum src, GLint index)
  {
    driver_glReadBufferIndexedEXT(src, index);
  }

// GL_EXT_occlusion_query_boolean

  static void REGAL_CALL missing_glBeginQueryEXT(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBeginQueryEXT", " not available." );
  }

  PFNGLBEGINQUERYEXTPROC driver_glBeginQueryEXT = NULL;

  static void REGAL_CALL loader_glBeginQueryEXT(Layer *_layer, GLenum target, GLuint id)
  {
    driver_glBeginQueryEXT(target, id);
  }

  static void REGAL_CALL missing_glDeleteQueriesEXT(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteQueriesEXT", " not available." );
  }

  PFNGLDELETEQUERIESEXTPROC driver_glDeleteQueriesEXT = NULL;

  static void REGAL_CALL loader_glDeleteQueriesEXT(Layer *_layer, GLsizei n, const GLuint *ids)
  {
    driver_glDeleteQueriesEXT(n, ids);
  }

  static void REGAL_CALL missing_glEndQueryEXT(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glEndQueryEXT", " not available." );
  }

  PFNGLENDQUERYEXTPROC driver_glEndQueryEXT = NULL;

  static void REGAL_CALL loader_glEndQueryEXT(Layer *_layer, GLenum target)
  {
    driver_glEndQueryEXT(target);
  }

  static void REGAL_CALL missing_glGenQueriesEXT(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenQueriesEXT", " not available." );
  }

  PFNGLGENQUERIESEXTPROC driver_glGenQueriesEXT = NULL;

  static void REGAL_CALL loader_glGenQueriesEXT(Layer *_layer, GLsizei n, GLuint *ids)
  {
    driver_glGenQueriesEXT(n, ids);
  }

  static void REGAL_CALL missing_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectuivEXT", " not available." );
  }

  PFNGLGETQUERYOBJECTUIVEXTPROC driver_glGetQueryObjectuivEXT = NULL;

  static void REGAL_CALL loader_glGetQueryObjectuivEXT(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
  {
    driver_glGetQueryObjectuivEXT(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryivEXT", " not available." );
  }

  PFNGLGETQUERYIVEXTPROC driver_glGetQueryivEXT = NULL;

  static void REGAL_CALL loader_glGetQueryivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetQueryivEXT(target, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsQueryEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsQueryEXT", " not available." );
    return GL_FALSE;
  }

  PFNGLISQUERYEXTPROC driver_glIsQueryEXT = NULL;

  static GLboolean REGAL_CALL loader_glIsQueryEXT(Layer *_layer, GLuint id)
  {
    return driver_glIsQueryEXT(id);
  }

// GL_EXT_paletted_texture

  static void REGAL_CALL missing_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glColorTableEXT", " not available." );
  }

  PFNGLCOLORTABLEEXTPROC driver_glColorTableEXT = NULL;

  static void REGAL_CALL loader_glColorTableEXT(Layer *_layer, GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    driver_glColorTableEXT(target, internalFormat, width, format, type, table);
  }

  static void REGAL_CALL missing_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(data);
    Warning( "glGetColorTableEXT", " not available." );
  }

  PFNGLGETCOLORTABLEEXTPROC driver_glGetColorTableEXT = NULL;

  static void REGAL_CALL loader_glGetColorTableEXT(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *data)
  {
    driver_glGetColorTableEXT(target, format, type, data);
  }

  static void REGAL_CALL missing_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterfvEXT", " not available." );
  }

  PFNGLGETCOLORTABLEPARAMETERFVEXTPROC driver_glGetColorTableParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetColorTableParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetColorTableParameterfvEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterivEXT", " not available." );
  }

  PFNGLGETCOLORTABLEPARAMETERIVEXTPROC driver_glGetColorTableParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetColorTableParameterivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetColorTableParameterivEXT(target, pname, params);
  }

// GL_EXT_pixel_transform

  static void REGAL_CALL missing_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPixelTransformParameterfvEXT", " not available." );
  }

  PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC driver_glGetPixelTransformParameterfvEXT = NULL;

  static void REGAL_CALL loader_glGetPixelTransformParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glGetPixelTransformParameterfvEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPixelTransformParameterivEXT", " not available." );
  }

  PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC driver_glGetPixelTransformParameterivEXT = NULL;

  static void REGAL_CALL loader_glGetPixelTransformParameterivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glGetPixelTransformParameterivEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTransformParameterfEXT", " not available." );
  }

  PFNGLPIXELTRANSFORMPARAMETERFEXTPROC driver_glPixelTransformParameterfEXT = NULL;

  static void REGAL_CALL loader_glPixelTransformParameterfEXT(Layer *_layer, GLenum target, GLenum pname, const GLfloat param)
  {
    driver_glPixelTransformParameterfEXT(target, pname, param);
  }

  static void REGAL_CALL missing_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPixelTransformParameterfvEXT", " not available." );
  }

  PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC driver_glPixelTransformParameterfvEXT = NULL;

  static void REGAL_CALL loader_glPixelTransformParameterfvEXT(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glPixelTransformParameterfvEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTransformParameteriEXT", " not available." );
  }

  PFNGLPIXELTRANSFORMPARAMETERIEXTPROC driver_glPixelTransformParameteriEXT = NULL;

  static void REGAL_CALL loader_glPixelTransformParameteriEXT(Layer *_layer, GLenum target, GLenum pname, const GLint param)
  {
    driver_glPixelTransformParameteriEXT(target, pname, param);
  }

  static void REGAL_CALL missing_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPixelTransformParameterivEXT", " not available." );
  }

  PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC driver_glPixelTransformParameterivEXT = NULL;

  static void REGAL_CALL loader_glPixelTransformParameterivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glPixelTransformParameterivEXT(target, pname, params);
  }

// GL_EXT_point_parameters

  static void REGAL_CALL missing_glPointParameterfEXT(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterfEXT", " not available." );
  }

  PFNGLPOINTPARAMETERFEXTPROC driver_glPointParameterfEXT = NULL;

  static void REGAL_CALL loader_glPointParameterfEXT(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glPointParameterfEXT(pname, param);
  }

  static void REGAL_CALL missing_glPointParameterfvEXT(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterfvEXT", " not available." );
  }

  PFNGLPOINTPARAMETERFVEXTPROC driver_glPointParameterfvEXT = NULL;

  static void REGAL_CALL loader_glPointParameterfvEXT(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glPointParameterfvEXT(pname, params);
  }

// GL_EXT_polygon_offset

  static void REGAL_CALL missing_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(bias);
    Warning( "glPolygonOffsetEXT", " not available." );
  }

  PFNGLPOLYGONOFFSETEXTPROC driver_glPolygonOffsetEXT = NULL;

  static void REGAL_CALL loader_glPolygonOffsetEXT(Layer *_layer, GLfloat factor, GLfloat bias)
  {
    driver_glPolygonOffsetEXT(factor, bias);
  }

// GL_EXT_provoking_vertex

  static void REGAL_CALL missing_glProvokingVertexEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glProvokingVertexEXT", " not available." );
  }

  PFNGLPROVOKINGVERTEXEXTPROC driver_glProvokingVertexEXT = NULL;

  static void REGAL_CALL loader_glProvokingVertexEXT(Layer *_layer, GLenum mode)
  {
    driver_glProvokingVertexEXT(mode);
  }

// GL_EXT_robustness

  static void REGAL_CALL missing_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformfvEXT", " not available." );
  }

  PFNGLGETNUNIFORMFVEXTPROC driver_glGetnUniformfvEXT = NULL;

  static void REGAL_CALL loader_glGetnUniformfvEXT(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
  {
    driver_glGetnUniformfvEXT(program, location, bufSize, params);
  }

  static void REGAL_CALL missing_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(params);
    Warning( "glGetnUniformivEXT", " not available." );
  }

  PFNGLGETNUNIFORMIVEXTPROC driver_glGetnUniformivEXT = NULL;

  static void REGAL_CALL loader_glGetnUniformivEXT(Layer *_layer, GLuint program, GLint location, GLsizei bufSize, GLint *params)
  {
    driver_glGetnUniformivEXT(program, location, bufSize, params);
  }

  static void REGAL_CALL missing_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(data);
    Warning( "glReadnPixelsEXT", " not available." );
  }

  PFNGLREADNPIXELSEXTPROC driver_glReadnPixelsEXT = NULL;

  static void REGAL_CALL loader_glReadnPixelsEXT(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
  {
    driver_glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data);
  }

// GL_EXT_scene_marker

  static void REGAL_CALL missing_glBeginSceneEXT(void)
  {
    Warning( "glBeginSceneEXT", " not available." );
  }

  PFNGLBEGINSCENEEXTPROC driver_glBeginSceneEXT = NULL;

  static void REGAL_CALL loader_glBeginSceneEXT(Layer *_layer)
  {
    driver_glBeginSceneEXT();
  }

  static void REGAL_CALL missing_glEndSceneEXT(void)
  {
    Warning( "glEndSceneEXT", " not available." );
  }

  PFNGLENDSCENEEXTPROC driver_glEndSceneEXT = NULL;

  static void REGAL_CALL loader_glEndSceneEXT(Layer *_layer)
  {
    driver_glEndSceneEXT();
  }

// GL_EXT_secondary_color

  static void REGAL_CALL missing_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3bEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3BEXTPROC driver_glSecondaryColor3bEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3bEXT(Layer *_layer, GLbyte red, GLbyte green, GLbyte blue)
  {
    driver_glSecondaryColor3bEXT(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3bvEXT(const GLbyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3bvEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3BVEXTPROC driver_glSecondaryColor3bvEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3bvEXT(Layer *_layer, const GLbyte *v)
  {
    driver_glSecondaryColor3bvEXT(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3dEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3DEXTPROC driver_glSecondaryColor3dEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3dEXT(Layer *_layer, GLdouble red, GLdouble green, GLdouble blue)
  {
    driver_glSecondaryColor3dEXT(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3dvEXT(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3dvEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3DVEXTPROC driver_glSecondaryColor3dvEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3dvEXT(Layer *_layer, const GLdouble *v)
  {
    driver_glSecondaryColor3dvEXT(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3fEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3FEXTPROC driver_glSecondaryColor3fEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3fEXT(Layer *_layer, GLfloat red, GLfloat green, GLfloat blue)
  {
    driver_glSecondaryColor3fEXT(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3fvEXT(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3fvEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3FVEXTPROC driver_glSecondaryColor3fvEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3fvEXT(Layer *_layer, const GLfloat *v)
  {
    driver_glSecondaryColor3fvEXT(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3iEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3IEXTPROC driver_glSecondaryColor3iEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3iEXT(Layer *_layer, GLint red, GLint green, GLint blue)
  {
    driver_glSecondaryColor3iEXT(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3ivEXT(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3ivEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3IVEXTPROC driver_glSecondaryColor3ivEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3ivEXT(Layer *_layer, const GLint *v)
  {
    driver_glSecondaryColor3ivEXT(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3sEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3SEXTPROC driver_glSecondaryColor3sEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3sEXT(Layer *_layer, GLshort red, GLshort green, GLshort blue)
  {
    driver_glSecondaryColor3sEXT(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3svEXT(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3svEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3SVEXTPROC driver_glSecondaryColor3svEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3svEXT(Layer *_layer, const GLshort *v)
  {
    driver_glSecondaryColor3svEXT(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3ubEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3UBEXTPROC driver_glSecondaryColor3ubEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3ubEXT(Layer *_layer, GLubyte red, GLubyte green, GLubyte blue)
  {
    driver_glSecondaryColor3ubEXT(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3ubvEXT(const GLubyte *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3ubvEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3UBVEXTPROC driver_glSecondaryColor3ubvEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3ubvEXT(Layer *_layer, const GLubyte *v)
  {
    driver_glSecondaryColor3ubvEXT(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3uiEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3UIEXTPROC driver_glSecondaryColor3uiEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3uiEXT(Layer *_layer, GLuint red, GLuint green, GLuint blue)
  {
    driver_glSecondaryColor3uiEXT(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3uivEXT(const GLuint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3uivEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3UIVEXTPROC driver_glSecondaryColor3uivEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3uivEXT(Layer *_layer, const GLuint *v)
  {
    driver_glSecondaryColor3uivEXT(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3usEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3USEXTPROC driver_glSecondaryColor3usEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3usEXT(Layer *_layer, GLushort red, GLushort green, GLushort blue)
  {
    driver_glSecondaryColor3usEXT(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3usvEXT(const GLushort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3usvEXT", " not available." );
  }

  PFNGLSECONDARYCOLOR3USVEXTPROC driver_glSecondaryColor3usvEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColor3usvEXT(Layer *_layer, const GLushort *v)
  {
    driver_glSecondaryColor3usvEXT(v);
  }

  static void REGAL_CALL missing_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glSecondaryColorPointerEXT", " not available." );
  }

  PFNGLSECONDARYCOLORPOINTEREXTPROC driver_glSecondaryColorPointerEXT = NULL;

  static void REGAL_CALL loader_glSecondaryColorPointerEXT(Layer *_layer, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glSecondaryColorPointerEXT(size, type, stride, pointer);
  }

// GL_EXT_separate_shader_objects

  static void REGAL_CALL missing_glActiveProgramEXT(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glActiveProgramEXT", " not available." );
  }

  PFNGLACTIVEPROGRAMEXTPROC driver_glActiveProgramEXT = NULL;

  static void REGAL_CALL loader_glActiveProgramEXT(Layer *_layer, GLuint program)
  {
    driver_glActiveProgramEXT(program);
  }

  static GLuint REGAL_CALL missing_glCreateShaderProgramEXT(GLenum type, const GLchar *string)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(string);
    Warning( "glCreateShaderProgramEXT", " not available." );
    return 0;
  }

  PFNGLCREATESHADERPROGRAMEXTPROC driver_glCreateShaderProgramEXT = NULL;

  static GLuint REGAL_CALL loader_glCreateShaderProgramEXT(Layer *_layer, GLenum type, const GLchar *string)
  {
    return driver_glCreateShaderProgramEXT(type, string);
  }

  static void REGAL_CALL missing_glUseShaderProgramEXT(GLenum type, GLuint program)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(program);
    Warning( "glUseShaderProgramEXT", " not available." );
  }

  PFNGLUSESHADERPROGRAMEXTPROC driver_glUseShaderProgramEXT = NULL;

  static void REGAL_CALL loader_glUseShaderProgramEXT(Layer *_layer, GLenum type, GLuint program)
  {
    driver_glUseShaderProgramEXT(type, program);
  }

// GL_EXT_shader_image_load_store

  static void REGAL_CALL missing_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layered);
    UNUSED_PARAMETER(layer);
    UNUSED_PARAMETER(access);
    UNUSED_PARAMETER(format);
    Warning( "glBindImageTextureEXT", " not available." );
  }

  PFNGLBINDIMAGETEXTUREEXTPROC driver_glBindImageTextureEXT = NULL;

  static void REGAL_CALL loader_glBindImageTextureEXT(Layer *_layer, GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
  {
    driver_glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
  }

  static void REGAL_CALL missing_glMemoryBarrierEXT(GLbitfield barriers)
  {
    UNUSED_PARAMETER(barriers);
    Warning( "glMemoryBarrierEXT", " not available." );
  }

  PFNGLMEMORYBARRIEREXTPROC driver_glMemoryBarrierEXT = NULL;

  static void REGAL_CALL loader_glMemoryBarrierEXT(Layer *_layer, GLbitfield barriers)
  {
    driver_glMemoryBarrierEXT(barriers);
  }

// GL_EXT_stencil_clear_tag

  static void REGAL_CALL missing_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
  {
    UNUSED_PARAMETER(stencilTagBits);
    UNUSED_PARAMETER(stencilClearTag);
    Warning( "glStencilClearTagEXT", " not available." );
  }

  PFNGLSTENCILCLEARTAGEXTPROC driver_glStencilClearTagEXT = NULL;

  static void REGAL_CALL loader_glStencilClearTagEXT(Layer *_layer, GLsizei stencilTagBits, GLuint stencilClearTag)
  {
    driver_glStencilClearTagEXT(stencilTagBits, stencilClearTag);
  }

// GL_EXT_stencil_two_side

  static void REGAL_CALL missing_glActiveStencilFaceEXT(GLenum face)
  {
    UNUSED_PARAMETER(face);
    Warning( "glActiveStencilFaceEXT", " not available." );
  }

  PFNGLACTIVESTENCILFACEEXTPROC driver_glActiveStencilFaceEXT = NULL;

  static void REGAL_CALL loader_glActiveStencilFaceEXT(Layer *_layer, GLenum face)
  {
    driver_glActiveStencilFaceEXT(face);
  }

// GL_EXT_subtexture

  static void REGAL_CALL missing_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage1DEXT", " not available." );
  }

  PFNGLTEXSUBIMAGE1DEXTPROC driver_glTexSubImage1DEXT = NULL;

  static void REGAL_CALL loader_glTexSubImage1DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
  }

  static void REGAL_CALL missing_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage2DEXT", " not available." );
  }

  PFNGLTEXSUBIMAGE2DEXTPROC driver_glTexSubImage2DEXT = NULL;

  static void REGAL_CALL loader_glTexSubImage2DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
  }

  static void REGAL_CALL missing_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage3DEXT", " not available." );
  }

  PFNGLTEXSUBIMAGE3DEXTPROC driver_glTexSubImage3DEXT = NULL;

  static void REGAL_CALL loader_glTexSubImage3DEXT(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

// GL_EXT_texture3D

  static void REGAL_CALL missing_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage3DEXT", " not available." );
  }

  PFNGLTEXIMAGE3DEXTPROC driver_glTexImage3DEXT = NULL;

  static void REGAL_CALL loader_glTexImage3DEXT(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
  }

// GL_EXT_texture_array

  static void REGAL_CALL missing_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layer);
    Warning( "glFramebufferTextureLayerEXT", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC driver_glFramebufferTextureLayerEXT = NULL;

  static void REGAL_CALL loader_glFramebufferTextureLayerEXT(Layer *_layer, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
  {
    driver_glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
  }

// GL_EXT_texture_buffer_object

  static void REGAL_CALL missing_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(buffer);
    Warning( "glTexBufferEXT", " not available." );
  }

  PFNGLTEXBUFFEREXTPROC driver_glTexBufferEXT = NULL;

  static void REGAL_CALL loader_glTexBufferEXT(Layer *_layer, GLenum target, GLenum internalformat, GLuint buffer)
  {
    driver_glTexBufferEXT(target, internalformat, buffer);
  }

// GL_EXT_texture_integer

  static void REGAL_CALL missing_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearColorIiEXT", " not available." );
  }

  PFNGLCLEARCOLORIIEXTPROC driver_glClearColorIiEXT = NULL;

  static void REGAL_CALL loader_glClearColorIiEXT(Layer *_layer, GLint red, GLint green, GLint blue, GLint alpha)
  {
    driver_glClearColorIiEXT(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearColorIuiEXT", " not available." );
  }

  PFNGLCLEARCOLORIUIEXTPROC driver_glClearColorIuiEXT = NULL;

  static void REGAL_CALL loader_glClearColorIuiEXT(Layer *_layer, GLuint red, GLuint green, GLuint blue, GLuint alpha)
  {
    driver_glClearColorIuiEXT(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterIivEXT", " not available." );
  }

  PFNGLGETTEXPARAMETERIIVEXTPROC driver_glGetTexParameterIivEXT = NULL;

  static void REGAL_CALL loader_glGetTexParameterIivEXT(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetTexParameterIivEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterIuivEXT", " not available." );
  }

  PFNGLGETTEXPARAMETERIUIVEXTPROC driver_glGetTexParameterIuivEXT = NULL;

  static void REGAL_CALL loader_glGetTexParameterIuivEXT(Layer *_layer, GLenum target, GLenum pname, GLuint *params)
  {
    driver_glGetTexParameterIuivEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterIivEXT", " not available." );
  }

  PFNGLTEXPARAMETERIIVEXTPROC driver_glTexParameterIivEXT = NULL;

  static void REGAL_CALL loader_glTexParameterIivEXT(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glTexParameterIivEXT(target, pname, params);
  }

  static void REGAL_CALL missing_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterIuivEXT", " not available." );
  }

  PFNGLTEXPARAMETERIUIVEXTPROC driver_glTexParameterIuivEXT = NULL;

  static void REGAL_CALL loader_glTexParameterIuivEXT(Layer *_layer, GLenum target, GLenum pname, const GLuint *params)
  {
    driver_glTexParameterIuivEXT(target, pname, params);
  }

// GL_EXT_texture_object

  static GLboolean REGAL_CALL missing_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(residences);
    Warning( "glAreTexturesResidentEXT", " not available." );
    return GL_FALSE;
  }

  PFNGLARETEXTURESRESIDENTEXTPROC driver_glAreTexturesResidentEXT = NULL;

  static GLboolean REGAL_CALL loader_glAreTexturesResidentEXT(Layer *_layer, GLsizei n, const GLuint *textures, GLboolean *residences)
  {
    return driver_glAreTexturesResidentEXT(n, textures, residences);
  }

  static void REGAL_CALL missing_glBindTextureEXT(GLenum target, GLuint texture)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(texture);
    Warning( "glBindTextureEXT", " not available." );
  }

  PFNGLBINDTEXTUREEXTPROC driver_glBindTextureEXT = NULL;

  static void REGAL_CALL loader_glBindTextureEXT(Layer *_layer, GLenum target, GLuint texture)
  {
    driver_glBindTextureEXT(target, texture);
  }

  static void REGAL_CALL missing_glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    Warning( "glDeleteTexturesEXT", " not available." );
  }

  PFNGLDELETETEXTURESEXTPROC driver_glDeleteTexturesEXT = NULL;

  static void REGAL_CALL loader_glDeleteTexturesEXT(Layer *_layer, GLsizei n, const GLuint *textures)
  {
    driver_glDeleteTexturesEXT(n, textures);
  }

  static void REGAL_CALL missing_glGenTexturesEXT(GLsizei n, GLuint *textures)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    Warning( "glGenTexturesEXT", " not available." );
  }

  PFNGLGENTEXTURESEXTPROC driver_glGenTexturesEXT = NULL;

  static void REGAL_CALL loader_glGenTexturesEXT(Layer *_layer, GLsizei n, GLuint *textures)
  {
    driver_glGenTexturesEXT(n, textures);
  }

  static GLboolean REGAL_CALL missing_glIsTextureEXT(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glIsTextureEXT", " not available." );
    return GL_FALSE;
  }

  PFNGLISTEXTUREEXTPROC driver_glIsTextureEXT = NULL;

  static GLboolean REGAL_CALL loader_glIsTextureEXT(Layer *_layer, GLuint texture)
  {
    return driver_glIsTextureEXT(texture);
  }

  static void REGAL_CALL missing_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(priorities);
    Warning( "glPrioritizeTexturesEXT", " not available." );
  }

  PFNGLPRIORITIZETEXTURESEXTPROC driver_glPrioritizeTexturesEXT = NULL;

  static void REGAL_CALL loader_glPrioritizeTexturesEXT(Layer *_layer, GLsizei n, const GLuint *textures, const GLclampf *priorities)
  {
    driver_glPrioritizeTexturesEXT(n, textures, priorities);
  }

// GL_EXT_texture_perturb_normal

  static void REGAL_CALL missing_glTextureNormalEXT(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glTextureNormalEXT", " not available." );
  }

  PFNGLTEXTURENORMALEXTPROC driver_glTextureNormalEXT = NULL;

  static void REGAL_CALL loader_glTextureNormalEXT(Layer *_layer, GLenum mode)
  {
    driver_glTextureNormalEXT(mode);
  }

// GL_EXT_texture_storage

  static void REGAL_CALL missing_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    Warning( "glTexStorage1DEXT", " not available." );
  }

  PFNGLTEXSTORAGE1DEXTPROC driver_glTexStorage1DEXT = NULL;

  static void REGAL_CALL loader_glTexStorage1DEXT(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
  {
    driver_glTexStorage1DEXT(target, levels, internalformat, width);
  }

  static void REGAL_CALL missing_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glTexStorage2DEXT", " not available." );
  }

  PFNGLTEXSTORAGE2DEXTPROC driver_glTexStorage2DEXT = NULL;

  static void REGAL_CALL loader_glTexStorage2DEXT(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glTexStorage2DEXT(target, levels, internalformat, width, height);
  }

  static void REGAL_CALL missing_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(levels);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glTexStorage3DEXT", " not available." );
  }

  PFNGLTEXSTORAGE3DEXTPROC driver_glTexStorage3DEXT = NULL;

  static void REGAL_CALL loader_glTexStorage3DEXT(Layer *_layer, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
  {
    driver_glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
  }

// GL_EXT_timer_query

  static void REGAL_CALL missing_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjecti64vEXT", " not available." );
  }

  PFNGLGETQUERYOBJECTI64VEXTPROC driver_glGetQueryObjecti64vEXT = NULL;

  static void REGAL_CALL loader_glGetQueryObjecti64vEXT(Layer *_layer, GLuint id, GLenum pname, GLint64EXT *params)
  {
    driver_glGetQueryObjecti64vEXT(id, pname, params);
  }

  static void REGAL_CALL missing_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetQueryObjectui64vEXT", " not available." );
  }

  PFNGLGETQUERYOBJECTUI64VEXTPROC driver_glGetQueryObjectui64vEXT = NULL;

  static void REGAL_CALL loader_glGetQueryObjectui64vEXT(Layer *_layer, GLuint id, GLenum pname, GLuint64EXT *params)
  {
    driver_glGetQueryObjectui64vEXT(id, pname, params);
  }

// GL_EXT_transform_feedback

  static void REGAL_CALL missing_glBeginTransformFeedbackEXT(GLenum primitiveMode)
  {
    UNUSED_PARAMETER(primitiveMode);
    Warning( "glBeginTransformFeedbackEXT", " not available." );
  }

  PFNGLBEGINTRANSFORMFEEDBACKEXTPROC driver_glBeginTransformFeedbackEXT = NULL;

  static void REGAL_CALL loader_glBeginTransformFeedbackEXT(Layer *_layer, GLenum primitiveMode)
  {
    driver_glBeginTransformFeedbackEXT(primitiveMode);
  }

  static void REGAL_CALL missing_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBufferBaseEXT", " not available." );
  }

  PFNGLBINDBUFFERBASEEXTPROC driver_glBindBufferBaseEXT = NULL;

  static void REGAL_CALL loader_glBindBufferBaseEXT(Layer *_layer, GLenum target, GLuint index, GLuint buffer)
  {
    driver_glBindBufferBaseEXT(target, index, buffer);
  }

  static void REGAL_CALL missing_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glBindBufferOffsetEXT", " not available." );
  }

  PFNGLBINDBUFFEROFFSETEXTPROC driver_glBindBufferOffsetEXT = NULL;

  static void REGAL_CALL loader_glBindBufferOffsetEXT(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset)
  {
    driver_glBindBufferOffsetEXT(target, index, buffer, offset);
  }

  static void REGAL_CALL missing_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glBindBufferRangeEXT", " not available." );
  }

  PFNGLBINDBUFFERRANGEEXTPROC driver_glBindBufferRangeEXT = NULL;

  static void REGAL_CALL loader_glBindBufferRangeEXT(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    driver_glBindBufferRangeEXT(target, index, buffer, offset, size);
  }

  static void REGAL_CALL missing_glEndTransformFeedbackEXT(void)
  {
    Warning( "glEndTransformFeedbackEXT", " not available." );
  }

  PFNGLENDTRANSFORMFEEDBACKEXTPROC driver_glEndTransformFeedbackEXT = NULL;

  static void REGAL_CALL loader_glEndTransformFeedbackEXT(Layer *_layer)
  {
    driver_glEndTransformFeedbackEXT();
  }

  static void REGAL_CALL missing_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetTransformFeedbackVaryingEXT", " not available." );
  }

  PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC driver_glGetTransformFeedbackVaryingEXT = NULL;

  static void REGAL_CALL loader_glGetTransformFeedbackVaryingEXT(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    driver_glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
  }

  static void REGAL_CALL missing_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(varyings);
    UNUSED_PARAMETER(bufferMode);
    Warning( "glTransformFeedbackVaryingsEXT", " not available." );
  }

  PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC driver_glTransformFeedbackVaryingsEXT = NULL;

  static void REGAL_CALL loader_glTransformFeedbackVaryingsEXT(Layer *_layer, GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode)
  {
    driver_glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
  }

// GL_EXT_vertex_array

  static void REGAL_CALL missing_glArrayElementEXT(GLint i)
  {
    UNUSED_PARAMETER(i);
    Warning( "glArrayElementEXT", " not available." );
  }

  PFNGLARRAYELEMENTEXTPROC driver_glArrayElementEXT = NULL;

  static void REGAL_CALL loader_glArrayElementEXT(Layer *_layer, GLint i)
  {
    driver_glArrayElementEXT(i);
  }

  static void REGAL_CALL missing_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glColorPointerEXT", " not available." );
  }

  PFNGLCOLORPOINTEREXTPROC driver_glColorPointerEXT = NULL;

  static void REGAL_CALL loader_glColorPointerEXT(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    driver_glColorPointerEXT(size, type, stride, count, pointer);
  }

  static void REGAL_CALL missing_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    Warning( "glDrawArraysEXT", " not available." );
  }

  PFNGLDRAWARRAYSEXTPROC driver_glDrawArraysEXT = NULL;

  static void REGAL_CALL loader_glDrawArraysEXT(Layer *_layer, GLenum mode, GLint first, GLsizei count)
  {
    driver_glDrawArraysEXT(mode, first, count);
  }

  static void REGAL_CALL missing_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
  {
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glEdgeFlagPointerEXT", " not available." );
  }

  PFNGLEDGEFLAGPOINTEREXTPROC driver_glEdgeFlagPointerEXT = NULL;

  static void REGAL_CALL loader_glEdgeFlagPointerEXT(Layer *_layer, GLsizei stride, GLsizei count, const GLboolean *pointer)
  {
    driver_glEdgeFlagPointerEXT(stride, count, pointer);
  }

  static void REGAL_CALL missing_glGetPointervEXT(GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPointervEXT", " not available." );
  }

  PFNGLGETPOINTERVEXTPROC driver_glGetPointervEXT = NULL;

  static void REGAL_CALL loader_glGetPointervEXT(Layer *_layer, GLenum pname, GLvoid **params)
  {
    driver_glGetPointervEXT(pname, params);
  }

  static void REGAL_CALL missing_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glIndexPointerEXT", " not available." );
  }

  PFNGLINDEXPOINTEREXTPROC driver_glIndexPointerEXT = NULL;

  static void REGAL_CALL loader_glIndexPointerEXT(Layer *_layer, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    driver_glIndexPointerEXT(type, stride, count, pointer);
  }

  static void REGAL_CALL missing_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glNormalPointerEXT", " not available." );
  }

  PFNGLNORMALPOINTEREXTPROC driver_glNormalPointerEXT = NULL;

  static void REGAL_CALL loader_glNormalPointerEXT(Layer *_layer, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    driver_glNormalPointerEXT(type, stride, count, pointer);
  }

  static void REGAL_CALL missing_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glTexCoordPointerEXT", " not available." );
  }

  PFNGLTEXCOORDPOINTEREXTPROC driver_glTexCoordPointerEXT = NULL;

  static void REGAL_CALL loader_glTexCoordPointerEXT(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    driver_glTexCoordPointerEXT(size, type, stride, count, pointer);
  }

  static void REGAL_CALL missing_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexPointerEXT", " not available." );
  }

  PFNGLVERTEXPOINTEREXTPROC driver_glVertexPointerEXT = NULL;

  static void REGAL_CALL loader_glVertexPointerEXT(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
  {
    driver_glVertexPointerEXT(size, type, stride, count, pointer);
  }

// GL_EXT_vertex_attrib_64bit

  static void REGAL_CALL missing_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLdvEXT", " not available." );
  }

  PFNGLGETVERTEXATTRIBLDVEXTPROC driver_glGetVertexAttribLdvEXT = NULL;

  static void REGAL_CALL loader_glGetVertexAttribLdvEXT(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
  {
    driver_glGetVertexAttribLdvEXT(index, pname, params);
  }

  static void REGAL_CALL missing_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
  {
    UNUSED_PARAMETER(vaobj);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(offset);
    Warning( "glVertexArrayVertexAttribLOffsetEXT", " not available." );
  }

  PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC driver_glVertexArrayVertexAttribLOffsetEXT = NULL;

  static void REGAL_CALL loader_glVertexArrayVertexAttribLOffsetEXT(Layer *_layer, GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
  {
    driver_glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  }

  static void REGAL_CALL missing_glVertexAttribL1dEXT(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1dEXT", " not available." );
  }

  PFNGLVERTEXATTRIBL1DEXTPROC driver_glVertexAttribL1dEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribL1dEXT(Layer *_layer, GLuint index, GLdouble x)
  {
    driver_glVertexAttribL1dEXT(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1dvEXT", " not available." );
  }

  PFNGLVERTEXATTRIBL1DVEXTPROC driver_glVertexAttribL1dvEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribL1dvEXT(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttribL1dvEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribL2dEXT", " not available." );
  }

  PFNGLVERTEXATTRIBL2DEXTPROC driver_glVertexAttribL2dEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribL2dEXT(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
  {
    driver_glVertexAttribL2dEXT(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL2dvEXT", " not available." );
  }

  PFNGLVERTEXATTRIBL2DVEXTPROC driver_glVertexAttribL2dvEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribL2dvEXT(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttribL2dvEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribL3dEXT", " not available." );
  }

  PFNGLVERTEXATTRIBL3DEXTPROC driver_glVertexAttribL3dEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribL3dEXT(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glVertexAttribL3dEXT(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL3dvEXT", " not available." );
  }

  PFNGLVERTEXATTRIBL3DVEXTPROC driver_glVertexAttribL3dvEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribL3dvEXT(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttribL3dvEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribL4dEXT", " not available." );
  }

  PFNGLVERTEXATTRIBL4DEXTPROC driver_glVertexAttribL4dEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribL4dEXT(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glVertexAttribL4dEXT(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL4dvEXT", " not available." );
  }

  PFNGLVERTEXATTRIBL4DVEXTPROC driver_glVertexAttribL4dvEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribL4dvEXT(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttribL4dvEXT(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribLPointerEXT", " not available." );
  }

  PFNGLVERTEXATTRIBLPOINTEREXTPROC driver_glVertexAttribLPointerEXT = NULL;

  static void REGAL_CALL loader_glVertexAttribLPointerEXT(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexAttribLPointerEXT(index, size, type, stride, pointer);
  }

// GL_EXT_vertex_shader

  static void REGAL_CALL missing_glBeginVertexShaderEXT(void)
  {
    Warning( "glBeginVertexShaderEXT", " not available." );
  }

  PFNGLBEGINVERTEXSHADEREXTPROC driver_glBeginVertexShaderEXT = NULL;

  static void REGAL_CALL loader_glBeginVertexShaderEXT(Layer *_layer)
  {
    driver_glBeginVertexShaderEXT();
  }

  static GLuint REGAL_CALL missing_glBindLightParameterEXT(GLenum light, GLenum value)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(value);
    Warning( "glBindLightParameterEXT", " not available." );
    return 0;
  }

  PFNGLBINDLIGHTPARAMETEREXTPROC driver_glBindLightParameterEXT = NULL;

  static GLuint REGAL_CALL loader_glBindLightParameterEXT(Layer *_layer, GLenum light, GLenum value)
  {
    return driver_glBindLightParameterEXT(light, value);
  }

  static GLuint REGAL_CALL missing_glBindMaterialParameterEXT(GLenum face, GLenum value)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(value);
    Warning( "glBindMaterialParameterEXT", " not available." );
    return 0;
  }

  PFNGLBINDMATERIALPARAMETEREXTPROC driver_glBindMaterialParameterEXT = NULL;

  static GLuint REGAL_CALL loader_glBindMaterialParameterEXT(Layer *_layer, GLenum face, GLenum value)
  {
    return driver_glBindMaterialParameterEXT(face, value);
  }

  static GLuint REGAL_CALL missing_glBindParameterEXT(GLenum value)
  {
    UNUSED_PARAMETER(value);
    Warning( "glBindParameterEXT", " not available." );
    return 0;
  }

  PFNGLBINDPARAMETEREXTPROC driver_glBindParameterEXT = NULL;

  static GLuint REGAL_CALL loader_glBindParameterEXT(Layer *_layer, GLenum value)
  {
    return driver_glBindParameterEXT(value);
  }

  static GLuint REGAL_CALL missing_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
  {
    UNUSED_PARAMETER(unit);
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(value);
    Warning( "glBindTexGenParameterEXT", " not available." );
    return 0;
  }

  PFNGLBINDTEXGENPARAMETEREXTPROC driver_glBindTexGenParameterEXT = NULL;

  static GLuint REGAL_CALL loader_glBindTexGenParameterEXT(Layer *_layer, GLenum unit, GLenum coord, GLenum value)
  {
    return driver_glBindTexGenParameterEXT(unit, coord, value);
  }

  static GLuint REGAL_CALL missing_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
  {
    UNUSED_PARAMETER(unit);
    UNUSED_PARAMETER(value);
    Warning( "glBindTextureUnitParameterEXT", " not available." );
    return 0;
  }

  PFNGLBINDTEXTUREUNITPARAMETEREXTPROC driver_glBindTextureUnitParameterEXT = NULL;

  static GLuint REGAL_CALL loader_glBindTextureUnitParameterEXT(Layer *_layer, GLenum unit, GLenum value)
  {
    return driver_glBindTextureUnitParameterEXT(unit, value);
  }

  static void REGAL_CALL missing_glBindVertexShaderEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glBindVertexShaderEXT", " not available." );
  }

  PFNGLBINDVERTEXSHADEREXTPROC driver_glBindVertexShaderEXT = NULL;

  static void REGAL_CALL loader_glBindVertexShaderEXT(Layer *_layer, GLuint id)
  {
    driver_glBindVertexShaderEXT(id);
  }

  static void REGAL_CALL missing_glDeleteVertexShaderEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glDeleteVertexShaderEXT", " not available." );
  }

  PFNGLDELETEVERTEXSHADEREXTPROC driver_glDeleteVertexShaderEXT = NULL;

  static void REGAL_CALL loader_glDeleteVertexShaderEXT(Layer *_layer, GLuint id)
  {
    driver_glDeleteVertexShaderEXT(id);
  }

  static void REGAL_CALL missing_glDisableVariantClientStateEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glDisableVariantClientStateEXT", " not available." );
  }

  PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC driver_glDisableVariantClientStateEXT = NULL;

  static void REGAL_CALL loader_glDisableVariantClientStateEXT(Layer *_layer, GLuint id)
  {
    driver_glDisableVariantClientStateEXT(id);
  }

  static void REGAL_CALL missing_glEnableVariantClientStateEXT(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glEnableVariantClientStateEXT", " not available." );
  }

  PFNGLENABLEVARIANTCLIENTSTATEEXTPROC driver_glEnableVariantClientStateEXT = NULL;

  static void REGAL_CALL loader_glEnableVariantClientStateEXT(Layer *_layer, GLuint id)
  {
    driver_glEnableVariantClientStateEXT(id);
  }

  static void REGAL_CALL missing_glEndVertexShaderEXT(void)
  {
    Warning( "glEndVertexShaderEXT", " not available." );
  }

  PFNGLENDVERTEXSHADEREXTPROC driver_glEndVertexShaderEXT = NULL;

  static void REGAL_CALL loader_glEndVertexShaderEXT(Layer *_layer)
  {
    driver_glEndVertexShaderEXT();
  }

  static void REGAL_CALL missing_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
  {
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(num);
    Warning( "glExtractComponentEXT", " not available." );
  }

  PFNGLEXTRACTCOMPONENTEXTPROC driver_glExtractComponentEXT = NULL;

  static void REGAL_CALL loader_glExtractComponentEXT(Layer *_layer, GLuint res, GLuint src, GLuint num)
  {
    driver_glExtractComponentEXT(res, src, num);
  }

  static GLuint REGAL_CALL missing_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
  {
    UNUSED_PARAMETER(datatype);
    UNUSED_PARAMETER(storagetype);
    UNUSED_PARAMETER(range);
    UNUSED_PARAMETER(components);
    Warning( "glGenSymbolsEXT", " not available." );
    return 0;
  }

  PFNGLGENSYMBOLSEXTPROC driver_glGenSymbolsEXT = NULL;

  static GLuint REGAL_CALL loader_glGenSymbolsEXT(Layer *_layer, GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
  {
    return driver_glGenSymbolsEXT(datatype, storagetype, range, components);
  }

  static GLuint REGAL_CALL missing_glGenVertexShadersEXT(GLuint range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenVertexShadersEXT", " not available." );
    return 0;
  }

  PFNGLGENVERTEXSHADERSEXTPROC driver_glGenVertexShadersEXT = NULL;

  static GLuint REGAL_CALL loader_glGenVertexShadersEXT(Layer *_layer, GLuint range)
  {
    return driver_glGenVertexShadersEXT(range);
  }

  static void REGAL_CALL missing_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetInvariantBooleanvEXT", " not available." );
  }

  PFNGLGETINVARIANTBOOLEANVEXTPROC driver_glGetInvariantBooleanvEXT = NULL;

  static void REGAL_CALL loader_glGetInvariantBooleanvEXT(Layer *_layer, GLuint id, GLenum value, GLboolean *data)
  {
    driver_glGetInvariantBooleanvEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetInvariantFloatvEXT", " not available." );
  }

  PFNGLGETINVARIANTFLOATVEXTPROC driver_glGetInvariantFloatvEXT = NULL;

  static void REGAL_CALL loader_glGetInvariantFloatvEXT(Layer *_layer, GLuint id, GLenum value, GLfloat *data)
  {
    driver_glGetInvariantFloatvEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetInvariantIntegervEXT", " not available." );
  }

  PFNGLGETINVARIANTINTEGERVEXTPROC driver_glGetInvariantIntegervEXT = NULL;

  static void REGAL_CALL loader_glGetInvariantIntegervEXT(Layer *_layer, GLuint id, GLenum value, GLint *data)
  {
    driver_glGetInvariantIntegervEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetLocalConstantBooleanvEXT", " not available." );
  }

  PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC driver_glGetLocalConstantBooleanvEXT = NULL;

  static void REGAL_CALL loader_glGetLocalConstantBooleanvEXT(Layer *_layer, GLuint id, GLenum value, GLboolean *data)
  {
    driver_glGetLocalConstantBooleanvEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetLocalConstantFloatvEXT", " not available." );
  }

  PFNGLGETLOCALCONSTANTFLOATVEXTPROC driver_glGetLocalConstantFloatvEXT = NULL;

  static void REGAL_CALL loader_glGetLocalConstantFloatvEXT(Layer *_layer, GLuint id, GLenum value, GLfloat *data)
  {
    driver_glGetLocalConstantFloatvEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetLocalConstantIntegervEXT", " not available." );
  }

  PFNGLGETLOCALCONSTANTINTEGERVEXTPROC driver_glGetLocalConstantIntegervEXT = NULL;

  static void REGAL_CALL loader_glGetLocalConstantIntegervEXT(Layer *_layer, GLuint id, GLenum value, GLint *data)
  {
    driver_glGetLocalConstantIntegervEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetVariantBooleanvEXT", " not available." );
  }

  PFNGLGETVARIANTBOOLEANVEXTPROC driver_glGetVariantBooleanvEXT = NULL;

  static void REGAL_CALL loader_glGetVariantBooleanvEXT(Layer *_layer, GLuint id, GLenum value, GLboolean *data)
  {
    driver_glGetVariantBooleanvEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetVariantFloatvEXT", " not available." );
  }

  PFNGLGETVARIANTFLOATVEXTPROC driver_glGetVariantFloatvEXT = NULL;

  static void REGAL_CALL loader_glGetVariantFloatvEXT(Layer *_layer, GLuint id, GLenum value, GLfloat *data)
  {
    driver_glGetVariantFloatvEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetVariantIntegervEXT", " not available." );
  }

  PFNGLGETVARIANTINTEGERVEXTPROC driver_glGetVariantIntegervEXT = NULL;

  static void REGAL_CALL loader_glGetVariantIntegervEXT(Layer *_layer, GLuint id, GLenum value, GLint *data)
  {
    driver_glGetVariantIntegervEXT(id, value, data);
  }

  static void REGAL_CALL missing_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(data);
    Warning( "glGetVariantPointervEXT", " not available." );
  }

  PFNGLGETVARIANTPOINTERVEXTPROC driver_glGetVariantPointervEXT = NULL;

  static void REGAL_CALL loader_glGetVariantPointervEXT(Layer *_layer, GLuint id, GLenum value, GLvoid **data)
  {
    driver_glGetVariantPointervEXT(id, value, data);
  }

  static void REGAL_CALL missing_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
  {
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(num);
    Warning( "glInsertComponentEXT", " not available." );
  }

  PFNGLINSERTCOMPONENTEXTPROC driver_glInsertComponentEXT = NULL;

  static void REGAL_CALL loader_glInsertComponentEXT(Layer *_layer, GLuint res, GLuint src, GLuint num)
  {
    driver_glInsertComponentEXT(res, src, num);
  }

  static GLboolean REGAL_CALL missing_glIsVariantEnabledEXT(GLuint id, GLenum cap)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(cap);
    Warning( "glIsVariantEnabledEXT", " not available." );
    return GL_FALSE;
  }

  PFNGLISVARIANTENABLEDEXTPROC driver_glIsVariantEnabledEXT = NULL;

  static GLboolean REGAL_CALL loader_glIsVariantEnabledEXT(Layer *_layer, GLuint id, GLenum cap)
  {
    return driver_glIsVariantEnabledEXT(id, cap);
  }

  static void REGAL_CALL missing_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(addr);
    Warning( "glSetInvariantEXT", " not available." );
  }

  PFNGLSETINVARIANTEXTPROC driver_glSetInvariantEXT = NULL;

  static void REGAL_CALL loader_glSetInvariantEXT(Layer *_layer, GLuint id, GLenum type, const GLvoid *addr)
  {
    driver_glSetInvariantEXT(id, type, addr);
  }

  static void REGAL_CALL missing_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(addr);
    Warning( "glSetLocalConstantEXT", " not available." );
  }

  PFNGLSETLOCALCONSTANTEXTPROC driver_glSetLocalConstantEXT = NULL;

  static void REGAL_CALL loader_glSetLocalConstantEXT(Layer *_layer, GLuint id, GLenum type, const GLvoid *addr)
  {
    driver_glSetLocalConstantEXT(id, type, addr);
  }

  static void REGAL_CALL missing_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(arg1);
    Warning( "glShaderOp1EXT", " not available." );
  }

  PFNGLSHADEROP1EXTPROC driver_glShaderOp1EXT = NULL;

  static void REGAL_CALL loader_glShaderOp1EXT(Layer *_layer, GLenum op, GLuint res, GLuint arg1)
  {
    driver_glShaderOp1EXT(op, res, arg1);
  }

  static void REGAL_CALL missing_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg2);
    Warning( "glShaderOp2EXT", " not available." );
  }

  PFNGLSHADEROP2EXTPROC driver_glShaderOp2EXT = NULL;

  static void REGAL_CALL loader_glShaderOp2EXT(Layer *_layer, GLenum op, GLuint res, GLuint arg1, GLuint arg2)
  {
    driver_glShaderOp2EXT(op, res, arg1, arg2);
  }

  static void REGAL_CALL missing_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
  {
    UNUSED_PARAMETER(op);
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(arg1);
    UNUSED_PARAMETER(arg2);
    UNUSED_PARAMETER(arg3);
    Warning( "glShaderOp3EXT", " not available." );
  }

  PFNGLSHADEROP3EXTPROC driver_glShaderOp3EXT = NULL;

  static void REGAL_CALL loader_glShaderOp3EXT(Layer *_layer, GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
  {
    driver_glShaderOp3EXT(op, res, arg1, arg2, arg3);
  }

  static void REGAL_CALL missing_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
  {
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(in);
    UNUSED_PARAMETER(outX);
    UNUSED_PARAMETER(outY);
    UNUSED_PARAMETER(outZ);
    UNUSED_PARAMETER(outW);
    Warning( "glSwizzleEXT", " not available." );
  }

  PFNGLSWIZZLEEXTPROC driver_glSwizzleEXT = NULL;

  static void REGAL_CALL loader_glSwizzleEXT(Layer *_layer, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
  {
    driver_glSwizzleEXT(res, in, outX, outY, outZ, outW);
  }

  static void REGAL_CALL missing_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantPointerEXT", " not available." );
  }

  PFNGLVARIANTPOINTEREXTPROC driver_glVariantPointerEXT = NULL;

  static void REGAL_CALL loader_glVariantPointerEXT(Layer *_layer, GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
  {
    driver_glVariantPointerEXT(id, type, stride, addr);
  }

  static void REGAL_CALL missing_glVariantbvEXT(GLuint id, const GLbyte *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantbvEXT", " not available." );
  }

  PFNGLVARIANTBVEXTPROC driver_glVariantbvEXT = NULL;

  static void REGAL_CALL loader_glVariantbvEXT(Layer *_layer, GLuint id, const GLbyte *addr)
  {
    driver_glVariantbvEXT(id, addr);
  }

  static void REGAL_CALL missing_glVariantdvEXT(GLuint id, const GLdouble *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantdvEXT", " not available." );
  }

  PFNGLVARIANTDVEXTPROC driver_glVariantdvEXT = NULL;

  static void REGAL_CALL loader_glVariantdvEXT(Layer *_layer, GLuint id, const GLdouble *addr)
  {
    driver_glVariantdvEXT(id, addr);
  }

  static void REGAL_CALL missing_glVariantfvEXT(GLuint id, const GLfloat *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantfvEXT", " not available." );
  }

  PFNGLVARIANTFVEXTPROC driver_glVariantfvEXT = NULL;

  static void REGAL_CALL loader_glVariantfvEXT(Layer *_layer, GLuint id, const GLfloat *addr)
  {
    driver_glVariantfvEXT(id, addr);
  }

  static void REGAL_CALL missing_glVariantivEXT(GLuint id, const GLint *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantivEXT", " not available." );
  }

  PFNGLVARIANTIVEXTPROC driver_glVariantivEXT = NULL;

  static void REGAL_CALL loader_glVariantivEXT(Layer *_layer, GLuint id, const GLint *addr)
  {
    driver_glVariantivEXT(id, addr);
  }

  static void REGAL_CALL missing_glVariantsvEXT(GLuint id, const GLshort *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantsvEXT", " not available." );
  }

  PFNGLVARIANTSVEXTPROC driver_glVariantsvEXT = NULL;

  static void REGAL_CALL loader_glVariantsvEXT(Layer *_layer, GLuint id, const GLshort *addr)
  {
    driver_glVariantsvEXT(id, addr);
  }

  static void REGAL_CALL missing_glVariantubvEXT(GLuint id, const GLubyte *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantubvEXT", " not available." );
  }

  PFNGLVARIANTUBVEXTPROC driver_glVariantubvEXT = NULL;

  static void REGAL_CALL loader_glVariantubvEXT(Layer *_layer, GLuint id, const GLubyte *addr)
  {
    driver_glVariantubvEXT(id, addr);
  }

  static void REGAL_CALL missing_glVariantuivEXT(GLuint id, const GLuint *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantuivEXT", " not available." );
  }

  PFNGLVARIANTUIVEXTPROC driver_glVariantuivEXT = NULL;

  static void REGAL_CALL loader_glVariantuivEXT(Layer *_layer, GLuint id, const GLuint *addr)
  {
    driver_glVariantuivEXT(id, addr);
  }

  static void REGAL_CALL missing_glVariantusvEXT(GLuint id, const GLushort *addr)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(addr);
    Warning( "glVariantusvEXT", " not available." );
  }

  PFNGLVARIANTUSVEXTPROC driver_glVariantusvEXT = NULL;

  static void REGAL_CALL loader_glVariantusvEXT(Layer *_layer, GLuint id, const GLushort *addr)
  {
    driver_glVariantusvEXT(id, addr);
  }

  static void REGAL_CALL missing_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
  {
    UNUSED_PARAMETER(res);
    UNUSED_PARAMETER(in);
    UNUSED_PARAMETER(outX);
    UNUSED_PARAMETER(outY);
    UNUSED_PARAMETER(outZ);
    UNUSED_PARAMETER(outW);
    Warning( "glWriteMaskEXT", " not available." );
  }

  PFNGLWRITEMASKEXTPROC driver_glWriteMaskEXT = NULL;

  static void REGAL_CALL loader_glWriteMaskEXT(Layer *_layer, GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
  {
    driver_glWriteMaskEXT(res, in, outX, outY, outZ, outW);
  }

// GL_EXT_vertex_weighting

  static void REGAL_CALL missing_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexWeightPointerEXT", " not available." );
  }

  PFNGLVERTEXWEIGHTPOINTEREXTPROC driver_glVertexWeightPointerEXT = NULL;

  static void REGAL_CALL loader_glVertexWeightPointerEXT(Layer *_layer, GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexWeightPointerEXT(size, type, stride, pointer);
  }

  static void REGAL_CALL missing_glVertexWeightfEXT(GLfloat weight)
  {
    UNUSED_PARAMETER(weight);
    Warning( "glVertexWeightfEXT", " not available." );
  }

  PFNGLVERTEXWEIGHTFEXTPROC driver_glVertexWeightfEXT = NULL;

  static void REGAL_CALL loader_glVertexWeightfEXT(Layer *_layer, GLfloat weight)
  {
    driver_glVertexWeightfEXT(weight);
  }

  static void REGAL_CALL missing_glVertexWeightfvEXT(const GLfloat *weight)
  {
    UNUSED_PARAMETER(weight);
    Warning( "glVertexWeightfvEXT", " not available." );
  }

  PFNGLVERTEXWEIGHTFVEXTPROC driver_glVertexWeightfvEXT = NULL;

  static void REGAL_CALL loader_glVertexWeightfvEXT(Layer *_layer, const GLfloat *weight)
  {
    driver_glVertexWeightfvEXT(weight);
  }

// GL_EXT_x11_sync_object

  static GLsync REGAL_CALL missing_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
  {
    UNUSED_PARAMETER(external_sync_type);
    UNUSED_PARAMETER(external_sync);
    UNUSED_PARAMETER(flags);
    Warning( "glImportSyncEXT", " not available." );
    return NULL;
  }

  PFNGLIMPORTSYNCEXTPROC driver_glImportSyncEXT = NULL;

  static GLsync REGAL_CALL loader_glImportSyncEXT(Layer *_layer, GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
  {
    return driver_glImportSyncEXT(external_sync_type, external_sync, flags);
  }

// GL_GREMEDY_frame_terminator

  static void REGAL_CALL missing_glFrameTerminatorGREMEDY(void)
  {
    Warning( "glFrameTerminatorGREMEDY", " not available." );
  }

  PFNGLFRAMETERMINATORGREMEDYPROC driver_glFrameTerminatorGREMEDY = NULL;

  static void REGAL_CALL loader_glFrameTerminatorGREMEDY(Layer *_layer)
  {
    driver_glFrameTerminatorGREMEDY();
  }

// GL_GREMEDY_string_marker

  static void REGAL_CALL missing_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
  {
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(string);
    Warning( "glStringMarkerGREMEDY", " not available." );
  }

  PFNGLSTRINGMARKERGREMEDYPROC driver_glStringMarkerGREMEDY = NULL;

  static void REGAL_CALL loader_glStringMarkerGREMEDY(Layer *_layer, GLsizei len, const GLvoid *string)
  {
    driver_glStringMarkerGREMEDY(len, string);
  }

// GL_HP_image_transform

  static void REGAL_CALL missing_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetImageTransformParameterfvHP", " not available." );
  }

  PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC driver_glGetImageTransformParameterfvHP = NULL;

  static void REGAL_CALL loader_glGetImageTransformParameterfvHP(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetImageTransformParameterfvHP(target, pname, params);
  }

  static void REGAL_CALL missing_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetImageTransformParameterivHP", " not available." );
  }

  PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC driver_glGetImageTransformParameterivHP = NULL;

  static void REGAL_CALL loader_glGetImageTransformParameterivHP(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetImageTransformParameterivHP(target, pname, params);
  }

  static void REGAL_CALL missing_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glImageTransformParameterfHP", " not available." );
  }

  PFNGLIMAGETRANSFORMPARAMETERFHPPROC driver_glImageTransformParameterfHP = NULL;

  static void REGAL_CALL loader_glImageTransformParameterfHP(Layer *_layer, GLenum target, GLenum pname, GLfloat param)
  {
    driver_glImageTransformParameterfHP(target, pname, param);
  }

  static void REGAL_CALL missing_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glImageTransformParameterfvHP", " not available." );
  }

  PFNGLIMAGETRANSFORMPARAMETERFVHPPROC driver_glImageTransformParameterfvHP = NULL;

  static void REGAL_CALL loader_glImageTransformParameterfvHP(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glImageTransformParameterfvHP(target, pname, params);
  }

  static void REGAL_CALL missing_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glImageTransformParameteriHP", " not available." );
  }

  PFNGLIMAGETRANSFORMPARAMETERIHPPROC driver_glImageTransformParameteriHP = NULL;

  static void REGAL_CALL loader_glImageTransformParameteriHP(Layer *_layer, GLenum target, GLenum pname, GLint param)
  {
    driver_glImageTransformParameteriHP(target, pname, param);
  }

  static void REGAL_CALL missing_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glImageTransformParameterivHP", " not available." );
  }

  PFNGLIMAGETRANSFORMPARAMETERIVHPPROC driver_glImageTransformParameterivHP = NULL;

  static void REGAL_CALL loader_glImageTransformParameterivHP(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glImageTransformParameterivHP(target, pname, params);
  }

// GL_IBM_multimode_draw_arrays

  static void REGAL_CALL missing_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(modestride);
    Warning( "glMultiModeDrawArraysIBM", " not available." );
  }

  PFNGLMULTIMODEDRAWARRAYSIBMPROC driver_glMultiModeDrawArraysIBM = NULL;

  static void REGAL_CALL loader_glMultiModeDrawArraysIBM(Layer *_layer, const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
  {
    driver_glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
  }

  static void REGAL_CALL missing_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(indices);
    UNUSED_PARAMETER(primcount);
    UNUSED_PARAMETER(modestride);
    Warning( "glMultiModeDrawElementsIBM", " not available." );
  }

  PFNGLMULTIMODEDRAWELEMENTSIBMPROC driver_glMultiModeDrawElementsIBM = NULL;

  static void REGAL_CALL loader_glMultiModeDrawElementsIBM(Layer *_layer, const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
  {
    driver_glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
  }

// GL_IBM_vertex_array_lists

  static void REGAL_CALL missing_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glColorPointerListIBM", " not available." );
  }

  PFNGLCOLORPOINTERLISTIBMPROC driver_glColorPointerListIBM = NULL;

  static void REGAL_CALL loader_glColorPointerListIBM(Layer *_layer, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    driver_glColorPointerListIBM(size, type, stride, pointer, ptrstride);
  }

  static void REGAL_CALL missing_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glEdgeFlagPointerListIBM", " not available." );
  }

  PFNGLEDGEFLAGPOINTERLISTIBMPROC driver_glEdgeFlagPointerListIBM = NULL;

  static void REGAL_CALL loader_glEdgeFlagPointerListIBM(Layer *_layer, GLint stride, const GLboolean **pointer, GLint ptrstride)
  {
    driver_glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
  }

  static void REGAL_CALL missing_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glFogCoordPointerListIBM", " not available." );
  }

  PFNGLFOGCOORDPOINTERLISTIBMPROC driver_glFogCoordPointerListIBM = NULL;

  static void REGAL_CALL loader_glFogCoordPointerListIBM(Layer *_layer, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    driver_glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
  }

  static void REGAL_CALL missing_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glIndexPointerListIBM", " not available." );
  }

  PFNGLINDEXPOINTERLISTIBMPROC driver_glIndexPointerListIBM = NULL;

  static void REGAL_CALL loader_glIndexPointerListIBM(Layer *_layer, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    driver_glIndexPointerListIBM(type, stride, pointer, ptrstride);
  }

  static void REGAL_CALL missing_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glNormalPointerListIBM", " not available." );
  }

  PFNGLNORMALPOINTERLISTIBMPROC driver_glNormalPointerListIBM = NULL;

  static void REGAL_CALL loader_glNormalPointerListIBM(Layer *_layer, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    driver_glNormalPointerListIBM(type, stride, pointer, ptrstride);
  }

  static void REGAL_CALL missing_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glSecondaryColorPointerListIBM", " not available." );
  }

  PFNGLSECONDARYCOLORPOINTERLISTIBMPROC driver_glSecondaryColorPointerListIBM = NULL;

  static void REGAL_CALL loader_glSecondaryColorPointerListIBM(Layer *_layer, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    driver_glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
  }

  static void REGAL_CALL missing_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glTexCoordPointerListIBM", " not available." );
  }

  PFNGLTEXCOORDPOINTERLISTIBMPROC driver_glTexCoordPointerListIBM = NULL;

  static void REGAL_CALL loader_glTexCoordPointerListIBM(Layer *_layer, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    driver_glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
  }

  static void REGAL_CALL missing_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    UNUSED_PARAMETER(ptrstride);
    Warning( "glVertexPointerListIBM", " not available." );
  }

  PFNGLVERTEXPOINTERLISTIBMPROC driver_glVertexPointerListIBM = NULL;

  static void REGAL_CALL loader_glVertexPointerListIBM(Layer *_layer, GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
  {
    driver_glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
  }

// GL_IMG_multisampled_render_to_texture

  static void REGAL_CALL missing_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(samples);
    Warning( "glFramebufferTexture2DMultisampleIMG", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC driver_glFramebufferTexture2DMultisampleIMG = NULL;

  static void REGAL_CALL loader_glFramebufferTexture2DMultisampleIMG(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
  {
    driver_glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);
  }

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleIMG", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC driver_glRenderbufferStorageMultisampleIMG = NULL;

  static void REGAL_CALL loader_glRenderbufferStorageMultisampleIMG(Layer *_layer, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);
  }

// GL_INGR_blend_func_separate

  static void REGAL_CALL missing_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    UNUSED_PARAMETER(sfactorRGB);
    UNUSED_PARAMETER(dfactorRGB);
    UNUSED_PARAMETER(sfactorAlpha);
    UNUSED_PARAMETER(dfactorAlpha);
    Warning( "glBlendFuncSeparateINGR", " not available." );
  }

  PFNGLBLENDFUNCSEPARATEINGRPROC driver_glBlendFuncSeparateINGR = NULL;

  static void REGAL_CALL loader_glBlendFuncSeparateINGR(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    driver_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }

// GL_INTEL_map_texture

  static GLvoid *REGAL_CALL missing_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(access);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(layout);
    Warning( "glMapTexture2DINTEL", " not available." );
    return NULL;
  }

  PFNGLMAPTEXTURE2DINTELPROC driver_glMapTexture2DINTEL = NULL;

  static GLvoid *REGAL_CALL loader_glMapTexture2DINTEL(Layer *_layer, GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
  {
    return driver_glMapTexture2DINTEL(texture, level, access, stride, layout);
  }

  static void REGAL_CALL missing_glSyncTextureINTEL(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glSyncTextureINTEL", " not available." );
  }

  PFNGLSYNCTEXTUREINTELPROC driver_glSyncTextureINTEL = NULL;

  static void REGAL_CALL loader_glSyncTextureINTEL(Layer *_layer, GLuint texture)
  {
    driver_glSyncTextureINTEL(texture);
  }

  static void REGAL_CALL missing_glUnmapTexture2DINTEL(GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glUnmapTexture2DINTEL", " not available." );
  }

  PFNGLUNMAPTEXTURE2DINTELPROC driver_glUnmapTexture2DINTEL = NULL;

  static void REGAL_CALL loader_glUnmapTexture2DINTEL(Layer *_layer, GLuint texture, GLint level)
  {
    driver_glUnmapTexture2DINTEL(texture, level);
  }

// GL_INTEL_parallel_arrays

  static void REGAL_CALL missing_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glColorPointervINTEL", " not available." );
  }

  PFNGLCOLORPOINTERVINTELPROC driver_glColorPointervINTEL = NULL;

  static void REGAL_CALL loader_glColorPointervINTEL(Layer *_layer, GLint size, GLenum type, const GLvoid **pointer)
  {
    driver_glColorPointervINTEL(size, type, pointer);
  }

  static void REGAL_CALL missing_glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glNormalPointervINTEL", " not available." );
  }

  PFNGLNORMALPOINTERVINTELPROC driver_glNormalPointervINTEL = NULL;

  static void REGAL_CALL loader_glNormalPointervINTEL(Layer *_layer, GLenum type, const GLvoid **pointer)
  {
    driver_glNormalPointervINTEL(type, pointer);
  }

  static void REGAL_CALL missing_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glTexCoordPointervINTEL", " not available." );
  }

  PFNGLTEXCOORDPOINTERVINTELPROC driver_glTexCoordPointervINTEL = NULL;

  static void REGAL_CALL loader_glTexCoordPointervINTEL(Layer *_layer, GLint size, GLenum type, const GLvoid **pointer)
  {
    driver_glTexCoordPointervINTEL(size, type, pointer);
  }

  static void REGAL_CALL missing_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexPointervINTEL", " not available." );
  }

  PFNGLVERTEXPOINTERVINTELPROC driver_glVertexPointervINTEL = NULL;

  static void REGAL_CALL loader_glVertexPointervINTEL(Layer *_layer, GLint size, GLenum type, const GLvoid **pointer)
  {
    driver_glVertexPointervINTEL(size, type, pointer);
  }

// GL_INTEL_texture_scissor

  static void REGAL_CALL missing_glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(lfunc);
    UNUSED_PARAMETER(hfunc);
    Warning( "glTexScissorFuncINTEL", " not available." );
  }

  PFNGLTEXSCISSORFUNCINTELPROC driver_glTexScissorFuncINTEL = NULL;

  static void REGAL_CALL loader_glTexScissorFuncINTEL(Layer *_layer, GLenum target, GLenum lfunc, GLenum hfunc)
  {
    driver_glTexScissorFuncINTEL(target, lfunc, hfunc);
  }

  static void REGAL_CALL missing_glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(tlow);
    UNUSED_PARAMETER(thigh);
    Warning( "glTexScissorINTEL", " not available." );
  }

  PFNGLTEXSCISSORINTELPROC driver_glTexScissorINTEL = NULL;

  static void REGAL_CALL loader_glTexScissorINTEL(Layer *_layer, GLenum target, GLclampf tlow, GLclampf thigh)
  {
    driver_glTexScissorINTEL(target, tlow, thigh);
  }

// GL_KHR_debug

  static void REGAL_CALL missing_glDebugMessageCallback(GLDEBUGPROC callback, const GLvoid *userParam)
  {
    UNUSED_PARAMETER(callback);
    UNUSED_PARAMETER(userParam);
    Warning( "glDebugMessageCallback", " not available." );
  }

  PFNGLDEBUGMESSAGECALLBACKPROC driver_glDebugMessageCallback = NULL;

  static void REGAL_CALL loader_glDebugMessageCallback(Layer *_layer, GLDEBUGPROC callback, const GLvoid *userParam)
  {
    driver_glDebugMessageCallback(callback, userParam);
  }

  static void REGAL_CALL missing_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(enabled);
    Warning( "glDebugMessageControl", " not available." );
  }

  PFNGLDEBUGMESSAGECONTROLPROC driver_glDebugMessageControl = NULL;

  static void REGAL_CALL loader_glDebugMessageControl(Layer *_layer, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
  {
    driver_glDebugMessageControl(source, type, severity, count, ids, enabled);
  }

  static void REGAL_CALL missing_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(severity);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(buf);
    Warning( "glDebugMessageInsert", " not available." );
  }

  PFNGLDEBUGMESSAGEINSERTPROC driver_glDebugMessageInsert = NULL;

  static void REGAL_CALL loader_glDebugMessageInsert(Layer *_layer, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
  {
    driver_glDebugMessageInsert(source, type, id, severity, length, buf);
  }

  static GLuint REGAL_CALL missing_glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(bufsize);
    UNUSED_PARAMETER(sources);
    UNUSED_PARAMETER(types);
    UNUSED_PARAMETER(ids);
    UNUSED_PARAMETER(severities);
    UNUSED_PARAMETER(lengths);
    UNUSED_PARAMETER(messageLog);
    Warning( "glGetDebugMessageLog", " not available." );
    return 0;
  }

  PFNGLGETDEBUGMESSAGELOGPROC driver_glGetDebugMessageLog = NULL;

  static GLuint REGAL_CALL loader_glGetDebugMessageLog(Layer *_layer, GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
  {
    return driver_glGetDebugMessageLog(count, bufsize, sources, types, ids, severities, lengths, messageLog);
  }

  static void REGAL_CALL missing_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glGetObjectLabel", " not available." );
  }

  PFNGLGETOBJECTLABELPROC driver_glGetObjectLabel = NULL;

  static void REGAL_CALL loader_glGetObjectLabel(Layer *_layer, GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    driver_glGetObjectLabel(identifier, name, bufSize, length, label);
  }

  static void REGAL_CALL missing_glGetObjectPtrLabel(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    UNUSED_PARAMETER(ptr);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glGetObjectPtrLabel", " not available." );
  }

  PFNGLGETOBJECTPTRLABELPROC driver_glGetObjectPtrLabel = NULL;

  static void REGAL_CALL loader_glGetObjectPtrLabel(Layer *_layer, const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
  {
    driver_glGetObjectPtrLabel(ptr, bufSize, length, label);
  }

  static void REGAL_CALL missing_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
  {
    UNUSED_PARAMETER(identifier);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glObjectLabel", " not available." );
  }

  PFNGLOBJECTLABELPROC driver_glObjectLabel = NULL;

  static void REGAL_CALL loader_glObjectLabel(Layer *_layer, GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
  {
    driver_glObjectLabel(identifier, name, length, label);
  }

  static void REGAL_CALL missing_glObjectPtrLabel(const GLvoid *ptr, GLsizei length, const GLchar *label)
  {
    UNUSED_PARAMETER(ptr);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(label);
    Warning( "glObjectPtrLabel", " not available." );
  }

  PFNGLOBJECTPTRLABELPROC driver_glObjectPtrLabel = NULL;

  static void REGAL_CALL loader_glObjectPtrLabel(Layer *_layer, const GLvoid *ptr, GLsizei length, const GLchar *label)
  {
    driver_glObjectPtrLabel(ptr, length, label);
  }

  static void REGAL_CALL missing_glPopDebugGroup(void)
  {
    Warning( "glPopDebugGroup", " not available." );
  }

  PFNGLPOPDEBUGGROUPPROC driver_glPopDebugGroup = NULL;

  static void REGAL_CALL loader_glPopDebugGroup(Layer *_layer)
  {
    driver_glPopDebugGroup();
  }

  static void REGAL_CALL missing_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
  {
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(message);
    Warning( "glPushDebugGroup", " not available." );
  }

  PFNGLPUSHDEBUGGROUPPROC driver_glPushDebugGroup = NULL;

  static void REGAL_CALL loader_glPushDebugGroup(Layer *_layer, GLenum source, GLuint id, GLsizei length, const GLchar *message)
  {
    driver_glPushDebugGroup(source, id, length, message);
  }

// GL_KTX_buffer_region

  static GLuint REGAL_CALL missing_glBufferRegionEnabled(void)
  {
    Warning( "glBufferRegionEnabled", " not available." );
    return 0;
  }

  PFNGLBUFFERREGIONENABLEDPROC driver_glBufferRegionEnabled = NULL;

  static GLuint REGAL_CALL loader_glBufferRegionEnabled(Layer *_layer)
  {
    return driver_glBufferRegionEnabled();
  }

  static void REGAL_CALL missing_glDeleteBufferRegion(GLenum region)
  {
    UNUSED_PARAMETER(region);
    Warning( "glDeleteBufferRegion", " not available." );
  }

  PFNGLDELETEBUFFERREGIONPROC driver_glDeleteBufferRegion = NULL;

  static void REGAL_CALL loader_glDeleteBufferRegion(Layer *_layer, GLenum region)
  {
    driver_glDeleteBufferRegion(region);
  }

  static void REGAL_CALL missing_glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
  {
    UNUSED_PARAMETER(region);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(xDest);
    UNUSED_PARAMETER(yDest);
    Warning( "glDrawBufferRegion", " not available." );
  }

  PFNGLDRAWBUFFERREGIONPROC driver_glDrawBufferRegion = NULL;

  static void REGAL_CALL loader_glDrawBufferRegion(Layer *_layer, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
  {
    driver_glDrawBufferRegion(region, x, y, width, height, xDest, yDest);
  }

  static GLuint REGAL_CALL missing_glNewBufferRegion(GLenum region)
  {
    UNUSED_PARAMETER(region);
    Warning( "glNewBufferRegion", " not available." );
    return 0;
  }

  PFNGLNEWBUFFERREGIONPROC driver_glNewBufferRegion = NULL;

  static GLuint REGAL_CALL loader_glNewBufferRegion(Layer *_layer, GLenum region)
  {
    return driver_glNewBufferRegion(region);
  }

  static void REGAL_CALL missing_glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(region);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glReadBufferRegion", " not available." );
  }

  PFNGLREADBUFFERREGIONPROC driver_glReadBufferRegion = NULL;

  static void REGAL_CALL loader_glReadBufferRegion(Layer *_layer, GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glReadBufferRegion(region, x, y, width, height);
  }

// GL_MESA_resize_buffers

  static void REGAL_CALL missing_glResizeBuffersMESA(void)
  {
    Warning( "glResizeBuffersMESA", " not available." );
  }

  PFNGLRESIZEBUFFERSMESAPROC driver_glResizeBuffersMESA = NULL;

  static void REGAL_CALL loader_glResizeBuffersMESA(Layer *_layer)
  {
    driver_glResizeBuffersMESA();
  }

// GL_MESA_window_pos

  static void REGAL_CALL missing_glWindowPos2dMESA(GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2dMESA", " not available." );
  }

  PFNGLWINDOWPOS2DMESAPROC driver_glWindowPos2dMESA = NULL;

  static void REGAL_CALL loader_glWindowPos2dMESA(Layer *_layer, GLdouble x, GLdouble y)
  {
    driver_glWindowPos2dMESA(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2dvMESA(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos2dvMESA", " not available." );
  }

  PFNGLWINDOWPOS2DVMESAPROC driver_glWindowPos2dvMESA = NULL;

  static void REGAL_CALL loader_glWindowPos2dvMESA(Layer *_layer, const GLdouble *v)
  {
    driver_glWindowPos2dvMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos2fMESA(GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2fMESA", " not available." );
  }

  PFNGLWINDOWPOS2FMESAPROC driver_glWindowPos2fMESA = NULL;

  static void REGAL_CALL loader_glWindowPos2fMESA(Layer *_layer, GLfloat x, GLfloat y)
  {
    driver_glWindowPos2fMESA(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2fvMESA(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos2fvMESA", " not available." );
  }

  PFNGLWINDOWPOS2FVMESAPROC driver_glWindowPos2fvMESA = NULL;

  static void REGAL_CALL loader_glWindowPos2fvMESA(Layer *_layer, const GLfloat *v)
  {
    driver_glWindowPos2fvMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos2iMESA(GLint x, GLint y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2iMESA", " not available." );
  }

  PFNGLWINDOWPOS2IMESAPROC driver_glWindowPos2iMESA = NULL;

  static void REGAL_CALL loader_glWindowPos2iMESA(Layer *_layer, GLint x, GLint y)
  {
    driver_glWindowPos2iMESA(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2ivMESA(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos2ivMESA", " not available." );
  }

  PFNGLWINDOWPOS2IVMESAPROC driver_glWindowPos2ivMESA = NULL;

  static void REGAL_CALL loader_glWindowPos2ivMESA(Layer *_layer, const GLint *v)
  {
    driver_glWindowPos2ivMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos2sMESA(GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glWindowPos2sMESA", " not available." );
  }

  PFNGLWINDOWPOS2SMESAPROC driver_glWindowPos2sMESA = NULL;

  static void REGAL_CALL loader_glWindowPos2sMESA(Layer *_layer, GLshort x, GLshort y)
  {
    driver_glWindowPos2sMESA(x, y);
  }

  static void REGAL_CALL missing_glWindowPos2svMESA(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos2svMESA", " not available." );
  }

  PFNGLWINDOWPOS2SVMESAPROC driver_glWindowPos2svMESA = NULL;

  static void REGAL_CALL loader_glWindowPos2svMESA(Layer *_layer, const GLshort *v)
  {
    driver_glWindowPos2svMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3dMESA", " not available." );
  }

  PFNGLWINDOWPOS3DMESAPROC driver_glWindowPos3dMESA = NULL;

  static void REGAL_CALL loader_glWindowPos3dMESA(Layer *_layer, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glWindowPos3dMESA(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3dvMESA(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos3dvMESA", " not available." );
  }

  PFNGLWINDOWPOS3DVMESAPROC driver_glWindowPos3dvMESA = NULL;

  static void REGAL_CALL loader_glWindowPos3dvMESA(Layer *_layer, const GLdouble *v)
  {
    driver_glWindowPos3dvMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3fMESA", " not available." );
  }

  PFNGLWINDOWPOS3FMESAPROC driver_glWindowPos3fMESA = NULL;

  static void REGAL_CALL loader_glWindowPos3fMESA(Layer *_layer, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glWindowPos3fMESA(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3fvMESA(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos3fvMESA", " not available." );
  }

  PFNGLWINDOWPOS3FVMESAPROC driver_glWindowPos3fvMESA = NULL;

  static void REGAL_CALL loader_glWindowPos3fvMESA(Layer *_layer, const GLfloat *v)
  {
    driver_glWindowPos3fvMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos3iMESA(GLint x, GLint y, GLint z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3iMESA", " not available." );
  }

  PFNGLWINDOWPOS3IMESAPROC driver_glWindowPos3iMESA = NULL;

  static void REGAL_CALL loader_glWindowPos3iMESA(Layer *_layer, GLint x, GLint y, GLint z)
  {
    driver_glWindowPos3iMESA(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3ivMESA(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos3ivMESA", " not available." );
  }

  PFNGLWINDOWPOS3IVMESAPROC driver_glWindowPos3ivMESA = NULL;

  static void REGAL_CALL loader_glWindowPos3ivMESA(Layer *_layer, const GLint *v)
  {
    driver_glWindowPos3ivMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glWindowPos3sMESA", " not available." );
  }

  PFNGLWINDOWPOS3SMESAPROC driver_glWindowPos3sMESA = NULL;

  static void REGAL_CALL loader_glWindowPos3sMESA(Layer *_layer, GLshort x, GLshort y, GLshort z)
  {
    driver_glWindowPos3sMESA(x, y, z);
  }

  static void REGAL_CALL missing_glWindowPos3svMESA(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos3svMESA", " not available." );
  }

  PFNGLWINDOWPOS3SVMESAPROC driver_glWindowPos3svMESA = NULL;

  static void REGAL_CALL loader_glWindowPos3svMESA(Layer *_layer, const GLshort *v)
  {
    driver_glWindowPos3svMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glWindowPos4dMESA", " not available." );
  }

  PFNGLWINDOWPOS4DMESAPROC driver_glWindowPos4dMESA = NULL;

  static void REGAL_CALL loader_glWindowPos4dMESA(Layer *_layer, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glWindowPos4dMESA(x, y, z, w);
  }

  static void REGAL_CALL missing_glWindowPos4dvMESA(const GLdouble *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos4dvMESA", " not available." );
  }

  PFNGLWINDOWPOS4DVMESAPROC driver_glWindowPos4dvMESA = NULL;

  static void REGAL_CALL loader_glWindowPos4dvMESA(Layer *_layer, const GLdouble *v)
  {
    driver_glWindowPos4dvMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glWindowPos4fMESA", " not available." );
  }

  PFNGLWINDOWPOS4FMESAPROC driver_glWindowPos4fMESA = NULL;

  static void REGAL_CALL loader_glWindowPos4fMESA(Layer *_layer, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glWindowPos4fMESA(x, y, z, w);
  }

  static void REGAL_CALL missing_glWindowPos4fvMESA(const GLfloat *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos4fvMESA", " not available." );
  }

  PFNGLWINDOWPOS4FVMESAPROC driver_glWindowPos4fvMESA = NULL;

  static void REGAL_CALL loader_glWindowPos4fvMESA(Layer *_layer, const GLfloat *v)
  {
    driver_glWindowPos4fvMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glWindowPos4iMESA", " not available." );
  }

  PFNGLWINDOWPOS4IMESAPROC driver_glWindowPos4iMESA = NULL;

  static void REGAL_CALL loader_glWindowPos4iMESA(Layer *_layer, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glWindowPos4iMESA(x, y, z, w);
  }

  static void REGAL_CALL missing_glWindowPos4ivMESA(const GLint *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos4ivMESA", " not available." );
  }

  PFNGLWINDOWPOS4IVMESAPROC driver_glWindowPos4ivMESA = NULL;

  static void REGAL_CALL loader_glWindowPos4ivMESA(Layer *_layer, const GLint *v)
  {
    driver_glWindowPos4ivMESA(v);
  }

  static void REGAL_CALL missing_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glWindowPos4sMESA", " not available." );
  }

  PFNGLWINDOWPOS4SMESAPROC driver_glWindowPos4sMESA = NULL;

  static void REGAL_CALL loader_glWindowPos4sMESA(Layer *_layer, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    driver_glWindowPos4sMESA(x, y, z, w);
  }

  static void REGAL_CALL missing_glWindowPos4svMESA(const GLshort *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glWindowPos4svMESA", " not available." );
  }

  PFNGLWINDOWPOS4SVMESAPROC driver_glWindowPos4svMESA = NULL;

  static void REGAL_CALL loader_glWindowPos4svMESA(Layer *_layer, const GLshort *v)
  {
    driver_glWindowPos4svMESA(v);
  }

// GL_NVX_conditional_render

  static void REGAL_CALL missing_glBeginConditionalRenderNVX(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glBeginConditionalRenderNVX", " not available." );
  }

  PFNGLBEGINCONDITIONALRENDERNVXPROC driver_glBeginConditionalRenderNVX = NULL;

  static void REGAL_CALL loader_glBeginConditionalRenderNVX(Layer *_layer, GLuint id)
  {
    driver_glBeginConditionalRenderNVX(id);
  }

  static void REGAL_CALL missing_glEndConditionalRenderNVX(void)
  {
    Warning( "glEndConditionalRenderNVX", " not available." );
  }

  PFNGLENDCONDITIONALRENDERNVXPROC driver_glEndConditionalRenderNVX = NULL;

  static void REGAL_CALL loader_glEndConditionalRenderNVX(Layer *_layer)
  {
    driver_glEndConditionalRenderNVX();
  }

// GL_NV_bindless_texture

  static GLuint64 REGAL_CALL missing_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(layered);
    UNUSED_PARAMETER(layer);
    UNUSED_PARAMETER(format);
    Warning( "glGetImageHandleNV", " not available." );
    return 0;
  }

  PFNGLGETIMAGEHANDLENVPROC driver_glGetImageHandleNV = NULL;

  static GLuint64 REGAL_CALL loader_glGetImageHandleNV(Layer *_layer, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
  {
    return driver_glGetImageHandleNV(texture, level, layered, layer, format);
  }

  static GLuint64 REGAL_CALL missing_glGetTextureHandleNV(GLuint texture)
  {
    UNUSED_PARAMETER(texture);
    Warning( "glGetTextureHandleNV", " not available." );
    return 0;
  }

  PFNGLGETTEXTUREHANDLENVPROC driver_glGetTextureHandleNV = NULL;

  static GLuint64 REGAL_CALL loader_glGetTextureHandleNV(Layer *_layer, GLuint texture)
  {
    return driver_glGetTextureHandleNV(texture);
  }

  static GLuint64 REGAL_CALL missing_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(sampler);
    Warning( "glGetTextureSamplerHandleNV", " not available." );
    return 0;
  }

  PFNGLGETTEXTURESAMPLERHANDLENVPROC driver_glGetTextureSamplerHandleNV = NULL;

  static GLuint64 REGAL_CALL loader_glGetTextureSamplerHandleNV(Layer *_layer, GLuint texture, GLuint sampler)
  {
    return driver_glGetTextureSamplerHandleNV(texture, sampler);
  }

  static GLboolean REGAL_CALL missing_glIsImageHandleResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glIsImageHandleResidentNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISIMAGEHANDLERESIDENTNVPROC driver_glIsImageHandleResidentNV = NULL;

  static GLboolean REGAL_CALL loader_glIsImageHandleResidentNV(Layer *_layer, GLuint64 handle)
  {
    return driver_glIsImageHandleResidentNV(handle);
  }

  static GLboolean REGAL_CALL missing_glIsTextureHandleResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glIsTextureHandleResidentNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISTEXTUREHANDLERESIDENTNVPROC driver_glIsTextureHandleResidentNV = NULL;

  static GLboolean REGAL_CALL loader_glIsTextureHandleResidentNV(Layer *_layer, GLuint64 handle)
  {
    return driver_glIsTextureHandleResidentNV(handle);
  }

  static void REGAL_CALL missing_glMakeImageHandleNonResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeImageHandleNonResidentNV", " not available." );
  }

  PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC driver_glMakeImageHandleNonResidentNV = NULL;

  static void REGAL_CALL loader_glMakeImageHandleNonResidentNV(Layer *_layer, GLuint64 handle)
  {
    driver_glMakeImageHandleNonResidentNV(handle);
  }

  static void REGAL_CALL missing_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
  {
    UNUSED_PARAMETER(handle);
    UNUSED_PARAMETER(access);
    Warning( "glMakeImageHandleResidentNV", " not available." );
  }

  PFNGLMAKEIMAGEHANDLERESIDENTNVPROC driver_glMakeImageHandleResidentNV = NULL;

  static void REGAL_CALL loader_glMakeImageHandleResidentNV(Layer *_layer, GLuint64 handle, GLenum access)
  {
    driver_glMakeImageHandleResidentNV(handle, access);
  }

  static void REGAL_CALL missing_glMakeTextureHandleNonResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeTextureHandleNonResidentNV", " not available." );
  }

  PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC driver_glMakeTextureHandleNonResidentNV = NULL;

  static void REGAL_CALL loader_glMakeTextureHandleNonResidentNV(Layer *_layer, GLuint64 handle)
  {
    driver_glMakeTextureHandleNonResidentNV(handle);
  }

  static void REGAL_CALL missing_glMakeTextureHandleResidentNV(GLuint64 handle)
  {
    UNUSED_PARAMETER(handle);
    Warning( "glMakeTextureHandleResidentNV", " not available." );
  }

  PFNGLMAKETEXTUREHANDLERESIDENTNVPROC driver_glMakeTextureHandleResidentNV = NULL;

  static void REGAL_CALL loader_glMakeTextureHandleResidentNV(Layer *_layer, GLuint64 handle)
  {
    driver_glMakeTextureHandleResidentNV(handle);
  }

  static void REGAL_CALL missing_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformHandleui64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC driver_glProgramUniformHandleui64NV = NULL;

  static void REGAL_CALL loader_glProgramUniformHandleui64NV(Layer *_layer, GLuint program, GLint location, GLuint64 value)
  {
    driver_glProgramUniformHandleui64NV(program, location, value);
  }

  static void REGAL_CALL missing_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(values);
    Warning( "glProgramUniformHandleui64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC driver_glProgramUniformHandleui64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniformHandleui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64 *values)
  {
    driver_glProgramUniformHandleui64vNV(program, location, count, values);
  }

  static void REGAL_CALL missing_glUniformHandleui64NV(GLint location, GLuint64 value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(value);
    Warning( "glUniformHandleui64NV", " not available." );
  }

  PFNGLUNIFORMHANDLEUI64NVPROC driver_glUniformHandleui64NV = NULL;

  static void REGAL_CALL loader_glUniformHandleui64NV(Layer *_layer, GLint location, GLuint64 value)
  {
    driver_glUniformHandleui64NV(location, value);
  }

  static void REGAL_CALL missing_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniformHandleui64vNV", " not available." );
  }

  PFNGLUNIFORMHANDLEUI64VNVPROC driver_glUniformHandleui64vNV = NULL;

  static void REGAL_CALL loader_glUniformHandleui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64 *value)
  {
    driver_glUniformHandleui64vNV(location, count, value);
  }

// GL_NV_blend_equation_advanced

  static void REGAL_CALL missing_glBlendBarrierNV(void)
  {
    Warning( "glBlendBarrierNV", " not available." );
  }

  PFNGLBLENDBARRIERNVPROC driver_glBlendBarrierNV = NULL;

  static void REGAL_CALL loader_glBlendBarrierNV(Layer *_layer)
  {
    driver_glBlendBarrierNV();
  }

  static void REGAL_CALL missing_glBlendParameteriNV(GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glBlendParameteriNV", " not available." );
  }

  PFNGLBLENDPARAMETERINVPROC driver_glBlendParameteriNV = NULL;

  static void REGAL_CALL loader_glBlendParameteriNV(Layer *_layer, GLenum pname, GLint value)
  {
    driver_glBlendParameteriNV(pname, value);
  }

// GL_NV_conditional_render

  static void REGAL_CALL missing_glBeginConditionalRenderNV(GLuint id, GLenum mode)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(mode);
    Warning( "glBeginConditionalRenderNV", " not available." );
  }

  PFNGLBEGINCONDITIONALRENDERNVPROC driver_glBeginConditionalRenderNV = NULL;

  static void REGAL_CALL loader_glBeginConditionalRenderNV(Layer *_layer, GLuint id, GLenum mode)
  {
    driver_glBeginConditionalRenderNV(id, mode);
  }

  static void REGAL_CALL missing_glEndConditionalRenderNV(void)
  {
    Warning( "glEndConditionalRenderNV", " not available." );
  }

  PFNGLENDCONDITIONALRENDERNVPROC driver_glEndConditionalRenderNV = NULL;

  static void REGAL_CALL loader_glEndConditionalRenderNV(Layer *_layer)
  {
    driver_glEndConditionalRenderNV();
  }

// GL_NV_copy_buffer

  static void REGAL_CALL missing_glCopyBufferSubDataNV(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(readtarget);
    UNUSED_PARAMETER(writetarget);
    UNUSED_PARAMETER(readoffset);
    UNUSED_PARAMETER(writeoffset);
    UNUSED_PARAMETER(size);
    Warning( "glCopyBufferSubDataNV", " not available." );
  }

  PFNGLCOPYBUFFERSUBDATANVPROC driver_glCopyBufferSubDataNV = NULL;

  static void REGAL_CALL loader_glCopyBufferSubDataNV(Layer *_layer, GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
  {
    driver_glCopyBufferSubDataNV(readtarget, writetarget, readoffset, writeoffset, size);
  }

// GL_NV_copy_image

  static void REGAL_CALL missing_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(srcName);
    UNUSED_PARAMETER(srcTarget);
    UNUSED_PARAMETER(srcLevel);
    UNUSED_PARAMETER(srcX);
    UNUSED_PARAMETER(srcY);
    UNUSED_PARAMETER(srcZ);
    UNUSED_PARAMETER(dstName);
    UNUSED_PARAMETER(dstTarget);
    UNUSED_PARAMETER(dstLevel);
    UNUSED_PARAMETER(dstX);
    UNUSED_PARAMETER(dstY);
    UNUSED_PARAMETER(dstZ);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glCopyImageSubDataNV", " not available." );
  }

  PFNGLCOPYIMAGESUBDATANVPROC driver_glCopyImageSubDataNV = NULL;

  static void REGAL_CALL loader_glCopyImageSubDataNV(Layer *_layer, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    driver_glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }

// GL_NV_coverage_sample

  static void REGAL_CALL missing_glCoverageMaskNV(GLboolean mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glCoverageMaskNV", " not available." );
  }

  PFNGLCOVERAGEMASKNVPROC driver_glCoverageMaskNV = NULL;

  static void REGAL_CALL loader_glCoverageMaskNV(Layer *_layer, GLboolean mask)
  {
    driver_glCoverageMaskNV(mask);
  }

  static void REGAL_CALL missing_glCoverageOperationNV(GLenum operation)
  {
    UNUSED_PARAMETER(operation);
    Warning( "glCoverageOperationNV", " not available." );
  }

  PFNGLCOVERAGEOPERATIONNVPROC driver_glCoverageOperationNV = NULL;

  static void REGAL_CALL loader_glCoverageOperationNV(Layer *_layer, GLenum operation)
  {
    driver_glCoverageOperationNV(operation);
  }

// GL_NV_depth_buffer_float

  static void REGAL_CALL missing_glClearDepthdNV(GLdouble depth)
  {
    UNUSED_PARAMETER(depth);
    Warning( "glClearDepthdNV", " not available." );
  }

  PFNGLCLEARDEPTHDNVPROC driver_glClearDepthdNV = NULL;

  static void REGAL_CALL loader_glClearDepthdNV(Layer *_layer, GLdouble depth)
  {
    driver_glClearDepthdNV(depth);
  }

  static void REGAL_CALL missing_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
  {
    UNUSED_PARAMETER(zmin);
    UNUSED_PARAMETER(zmax);
    Warning( "glDepthBoundsdNV", " not available." );
  }

  PFNGLDEPTHBOUNDSDNVPROC driver_glDepthBoundsdNV = NULL;

  static void REGAL_CALL loader_glDepthBoundsdNV(Layer *_layer, GLdouble zmin, GLdouble zmax)
  {
    driver_glDepthBoundsdNV(zmin, zmax);
  }

  static void REGAL_CALL missing_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
  {
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glDepthRangedNV", " not available." );
  }

  PFNGLDEPTHRANGEDNVPROC driver_glDepthRangedNV = NULL;

  static void REGAL_CALL loader_glDepthRangedNV(Layer *_layer, GLdouble zNear, GLdouble zFar)
  {
    driver_glDepthRangedNV(zNear, zFar);
  }

// GL_NV_draw_buffers

  static void REGAL_CALL missing_glDrawBuffersNV(GLsizei n, const GLenum *bufs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(bufs);
    Warning( "glDrawBuffersNV", " not available." );
  }

  PFNGLDRAWBUFFERSNVPROC driver_glDrawBuffersNV = NULL;

  static void REGAL_CALL loader_glDrawBuffersNV(Layer *_layer, GLsizei n, const GLenum *bufs)
  {
    driver_glDrawBuffersNV(n, bufs);
  }

// GL_NV_draw_texture

  static void REGAL_CALL missing_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(sampler);
    UNUSED_PARAMETER(x0);
    UNUSED_PARAMETER(y0);
    UNUSED_PARAMETER(x1);
    UNUSED_PARAMETER(y1);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(s0);
    UNUSED_PARAMETER(t0);
    UNUSED_PARAMETER(s1);
    UNUSED_PARAMETER(t1);
    Warning( "glDrawTextureNV", " not available." );
  }

  PFNGLDRAWTEXTURENVPROC driver_glDrawTextureNV = NULL;

  static void REGAL_CALL loader_glDrawTextureNV(Layer *_layer, GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
  {
    driver_glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  }

// GL_NV_evaluators

  static void REGAL_CALL missing_glEvalMapsNV(GLenum target, GLenum mode)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(mode);
    Warning( "glEvalMapsNV", " not available." );
  }

  PFNGLEVALMAPSNVPROC driver_glEvalMapsNV = NULL;

  static void REGAL_CALL loader_glEvalMapsNV(Layer *_layer, GLenum target, GLenum mode)
  {
    driver_glEvalMapsNV(target, mode);
  }

  static void REGAL_CALL missing_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMapAttribParameterfvNV", " not available." );
  }

  PFNGLGETMAPATTRIBPARAMETERFVNVPROC driver_glGetMapAttribParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetMapAttribParameterfvNV(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLfloat *params)
  {
    driver_glGetMapAttribParameterfvNV(target, index, pname, params);
  }

  static void REGAL_CALL missing_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMapAttribParameterivNV", " not available." );
  }

  PFNGLGETMAPATTRIBPARAMETERIVNVPROC driver_glGetMapAttribParameterivNV = NULL;

  static void REGAL_CALL loader_glGetMapAttribParameterivNV(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLint *params)
  {
    driver_glGetMapAttribParameterivNV(target, index, pname, params);
  }

  static void REGAL_CALL missing_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(packed);
    UNUSED_PARAMETER(points);
    Warning( "glGetMapControlPointsNV", " not available." );
  }

  PFNGLGETMAPCONTROLPOINTSNVPROC driver_glGetMapControlPointsNV = NULL;

  static void REGAL_CALL loader_glGetMapControlPointsNV(Layer *_layer, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
  {
    driver_glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
  }

  static void REGAL_CALL missing_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMapParameterfvNV", " not available." );
  }

  PFNGLGETMAPPARAMETERFVNVPROC driver_glGetMapParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetMapParameterfvNV(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetMapParameterfvNV(target, pname, params);
  }

  static void REGAL_CALL missing_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMapParameterivNV", " not available." );
  }

  PFNGLGETMAPPARAMETERIVNVPROC driver_glGetMapParameterivNV = NULL;

  static void REGAL_CALL loader_glGetMapParameterivNV(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetMapParameterivNV(target, pname, params);
  }

  static void REGAL_CALL missing_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(packed);
    UNUSED_PARAMETER(points);
    Warning( "glMapControlPointsNV", " not available." );
  }

  PFNGLMAPCONTROLPOINTSNVPROC driver_glMapControlPointsNV = NULL;

  static void REGAL_CALL loader_glMapControlPointsNV(Layer *_layer, GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
  {
    driver_glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
  }

  static void REGAL_CALL missing_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMapParameterfvNV", " not available." );
  }

  PFNGLMAPPARAMETERFVNVPROC driver_glMapParameterfvNV = NULL;

  static void REGAL_CALL loader_glMapParameterfvNV(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glMapParameterfvNV(target, pname, params);
  }

  static void REGAL_CALL missing_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMapParameterivNV", " not available." );
  }

  PFNGLMAPPARAMETERIVNVPROC driver_glMapParameterivNV = NULL;

  static void REGAL_CALL loader_glMapParameterivNV(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glMapParameterivNV(target, pname, params);
  }

// GL_NV_explicit_multisample

  static void REGAL_CALL missing_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(val);
    Warning( "glGetMultisamplefvNV", " not available." );
  }

  PFNGLGETMULTISAMPLEFVNVPROC driver_glGetMultisamplefvNV = NULL;

  static void REGAL_CALL loader_glGetMultisamplefvNV(Layer *_layer, GLenum pname, GLuint index, GLfloat *val)
  {
    driver_glGetMultisamplefvNV(pname, index, val);
  }

  static void REGAL_CALL missing_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(mask);
    Warning( "glSampleMaskIndexedNV", " not available." );
  }

  PFNGLSAMPLEMASKINDEXEDNVPROC driver_glSampleMaskIndexedNV = NULL;

  static void REGAL_CALL loader_glSampleMaskIndexedNV(Layer *_layer, GLuint index, GLbitfield mask)
  {
    driver_glSampleMaskIndexedNV(index, mask);
  }

  static void REGAL_CALL missing_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glTexRenderbufferNV", " not available." );
  }

  PFNGLTEXRENDERBUFFERNVPROC driver_glTexRenderbufferNV = NULL;

  static void REGAL_CALL loader_glTexRenderbufferNV(Layer *_layer, GLenum target, GLuint renderbuffer)
  {
    driver_glTexRenderbufferNV(target, renderbuffer);
  }

// GL_NV_fence

  static void REGAL_CALL missing_glDeleteFencesNV(GLsizei n, const GLuint *fences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(fences);
    Warning( "glDeleteFencesNV", " not available." );
  }

  PFNGLDELETEFENCESNVPROC driver_glDeleteFencesNV = NULL;

  static void REGAL_CALL loader_glDeleteFencesNV(Layer *_layer, GLsizei n, const GLuint *fences)
  {
    driver_glDeleteFencesNV(n, fences);
  }

  static void REGAL_CALL missing_glFinishFenceNV(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glFinishFenceNV", " not available." );
  }

  PFNGLFINISHFENCENVPROC driver_glFinishFenceNV = NULL;

  static void REGAL_CALL loader_glFinishFenceNV(Layer *_layer, GLuint fence)
  {
    driver_glFinishFenceNV(fence);
  }

  static void REGAL_CALL missing_glGenFencesNV(GLsizei n, GLuint *fences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(fences);
    Warning( "glGenFencesNV", " not available." );
  }

  PFNGLGENFENCESNVPROC driver_glGenFencesNV = NULL;

  static void REGAL_CALL loader_glGenFencesNV(Layer *_layer, GLsizei n, GLuint *fences)
  {
    driver_glGenFencesNV(n, fences);
  }

  static void REGAL_CALL missing_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(fence);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFenceivNV", " not available." );
  }

  PFNGLGETFENCEIVNVPROC driver_glGetFenceivNV = NULL;

  static void REGAL_CALL loader_glGetFenceivNV(Layer *_layer, GLuint fence, GLenum pname, GLint *params)
  {
    driver_glGetFenceivNV(fence, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsFenceNV(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glIsFenceNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISFENCENVPROC driver_glIsFenceNV = NULL;

  static GLboolean REGAL_CALL loader_glIsFenceNV(Layer *_layer, GLuint fence)
  {
    return driver_glIsFenceNV(fence);
  }

  static void REGAL_CALL missing_glSetFenceNV(GLuint fence, GLenum condition)
  {
    UNUSED_PARAMETER(fence);
    UNUSED_PARAMETER(condition);
    Warning( "glSetFenceNV", " not available." );
  }

  PFNGLSETFENCENVPROC driver_glSetFenceNV = NULL;

  static void REGAL_CALL loader_glSetFenceNV(Layer *_layer, GLuint fence, GLenum condition)
  {
    driver_glSetFenceNV(fence, condition);
  }

  static GLboolean REGAL_CALL missing_glTestFenceNV(GLuint fence)
  {
    UNUSED_PARAMETER(fence);
    Warning( "glTestFenceNV", " not available." );
    return GL_FALSE;
  }

  PFNGLTESTFENCENVPROC driver_glTestFenceNV = NULL;

  static GLboolean REGAL_CALL loader_glTestFenceNV(Layer *_layer, GLuint fence)
  {
    return driver_glTestFenceNV(fence);
  }

// GL_NV_fragment_program

  static void REGAL_CALL missing_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramNamedParameterdvNV", " not available." );
  }

  PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC driver_glGetProgramNamedParameterdvNV = NULL;

  static void REGAL_CALL loader_glGetProgramNamedParameterdvNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
  {
    driver_glGetProgramNamedParameterdvNV(id, len, name, params);
  }

  static void REGAL_CALL missing_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramNamedParameterfvNV", " not available." );
  }

  PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC driver_glGetProgramNamedParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetProgramNamedParameterfvNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
  {
    driver_glGetProgramNamedParameterfvNV(id, len, name, params);
  }

  static void REGAL_CALL missing_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramNamedParameter4dNV", " not available." );
  }

  PFNGLPROGRAMNAMEDPARAMETER4DNVPROC driver_glProgramNamedParameter4dNV = NULL;

  static void REGAL_CALL loader_glProgramNamedParameter4dNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(v);
    Warning( "glProgramNamedParameter4dvNV", " not available." );
  }

  PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC driver_glProgramNamedParameter4dvNV = NULL;

  static void REGAL_CALL loader_glProgramNamedParameter4dvNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
  {
    driver_glProgramNamedParameter4dvNV(id, len, name, v);
  }

  static void REGAL_CALL missing_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramNamedParameter4fNV", " not available." );
  }

  PFNGLPROGRAMNAMEDPARAMETER4FNVPROC driver_glProgramNamedParameter4fNV = NULL;

  static void REGAL_CALL loader_glProgramNamedParameter4fNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(v);
    Warning( "glProgramNamedParameter4fvNV", " not available." );
  }

  PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC driver_glProgramNamedParameter4fvNV = NULL;

  static void REGAL_CALL loader_glProgramNamedParameter4fvNV(Layer *_layer, GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
  {
    driver_glProgramNamedParameter4fvNV(id, len, name, v);
  }

// GL_NV_framebuffer_blit

  static void REGAL_CALL missing_glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glBlitFramebufferNV", " not available." );
  }

  PFNGLBLITFRAMEBUFFERNVPROC driver_glBlitFramebufferNV = NULL;

  static void REGAL_CALL loader_glBlitFramebufferNV(Layer *_layer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    driver_glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

// GL_NV_framebuffer_multisample_coverage

  static void REGAL_CALL missing_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageMultisampleCoverageNV", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC driver_glRenderbufferStorageMultisampleCoverageNV = NULL;

  static void REGAL_CALL loader_glRenderbufferStorageMultisampleCoverageNV(Layer *_layer, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
  }

// GL_NV_geometry_program4

  static void REGAL_CALL missing_glProgramVertexLimitNV(GLenum target, GLint limit)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(limit);
    Warning( "glProgramVertexLimitNV", " not available." );
  }

  PFNGLPROGRAMVERTEXLIMITNVPROC driver_glProgramVertexLimitNV = NULL;

  static void REGAL_CALL loader_glProgramVertexLimitNV(Layer *_layer, GLenum target, GLint limit)
  {
    driver_glProgramVertexLimitNV(target, limit);
  }

// GL_NV_gpu_program4

  static void REGAL_CALL missing_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramEnvParameterIivNV", " not available." );
  }

  PFNGLGETPROGRAMENVPARAMETERIIVNVPROC driver_glGetProgramEnvParameterIivNV = NULL;

  static void REGAL_CALL loader_glGetProgramEnvParameterIivNV(Layer *_layer, GLenum target, GLuint index, GLint *params)
  {
    driver_glGetProgramEnvParameterIivNV(target, index, params);
  }

  static void REGAL_CALL missing_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramEnvParameterIuivNV", " not available." );
  }

  PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC driver_glGetProgramEnvParameterIuivNV = NULL;

  static void REGAL_CALL loader_glGetProgramEnvParameterIuivNV(Layer *_layer, GLenum target, GLuint index, GLuint *params)
  {
    driver_glGetProgramEnvParameterIuivNV(target, index, params);
  }

  static void REGAL_CALL missing_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramLocalParameterIivNV", " not available." );
  }

  PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC driver_glGetProgramLocalParameterIivNV = NULL;

  static void REGAL_CALL loader_glGetProgramLocalParameterIivNV(Layer *_layer, GLenum target, GLuint index, GLint *params)
  {
    driver_glGetProgramLocalParameterIivNV(target, index, params);
  }

  static void REGAL_CALL missing_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramLocalParameterIuivNV", " not available." );
  }

  PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC driver_glGetProgramLocalParameterIuivNV = NULL;

  static void REGAL_CALL loader_glGetProgramLocalParameterIuivNV(Layer *_layer, GLenum target, GLuint index, GLuint *params)
  {
    driver_glGetProgramLocalParameterIuivNV(target, index, params);
  }

  static void REGAL_CALL missing_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramEnvParameterI4iNV", " not available." );
  }

  PFNGLPROGRAMENVPARAMETERI4INVPROC driver_glProgramEnvParameterI4iNV = NULL;

  static void REGAL_CALL loader_glProgramEnvParameterI4iNV(Layer *_layer, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glProgramEnvParameterI4iNV(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameterI4ivNV", " not available." );
  }

  PFNGLPROGRAMENVPARAMETERI4IVNVPROC driver_glProgramEnvParameterI4ivNV = NULL;

  static void REGAL_CALL loader_glProgramEnvParameterI4ivNV(Layer *_layer, GLenum target, GLuint index, const GLint *params)
  {
    driver_glProgramEnvParameterI4ivNV(target, index, params);
  }

  static void REGAL_CALL missing_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramEnvParameterI4uiNV", " not available." );
  }

  PFNGLPROGRAMENVPARAMETERI4UINVPROC driver_glProgramEnvParameterI4uiNV = NULL;

  static void REGAL_CALL loader_glProgramEnvParameterI4uiNV(Layer *_layer, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    driver_glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParameterI4uivNV", " not available." );
  }

  PFNGLPROGRAMENVPARAMETERI4UIVNVPROC driver_glProgramEnvParameterI4uivNV = NULL;

  static void REGAL_CALL loader_glProgramEnvParameterI4uivNV(Layer *_layer, GLenum target, GLuint index, const GLuint *params)
  {
    driver_glProgramEnvParameterI4uivNV(target, index, params);
  }

  static void REGAL_CALL missing_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParametersI4ivNV", " not available." );
  }

  PFNGLPROGRAMENVPARAMETERSI4IVNVPROC driver_glProgramEnvParametersI4ivNV = NULL;

  static void REGAL_CALL loader_glProgramEnvParametersI4ivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    driver_glProgramEnvParametersI4ivNV(target, index, count, params);
  }

  static void REGAL_CALL missing_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramEnvParametersI4uivNV", " not available." );
  }

  PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC driver_glProgramEnvParametersI4uivNV = NULL;

  static void REGAL_CALL loader_glProgramEnvParametersI4uivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    driver_glProgramEnvParametersI4uivNV(target, index, count, params);
  }

  static void REGAL_CALL missing_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramLocalParameterI4iNV", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETERI4INVPROC driver_glProgramLocalParameterI4iNV = NULL;

  static void REGAL_CALL loader_glProgramLocalParameterI4iNV(Layer *_layer, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
  {
    driver_glProgramLocalParameterI4iNV(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameterI4ivNV", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC driver_glProgramLocalParameterI4ivNV = NULL;

  static void REGAL_CALL loader_glProgramLocalParameterI4ivNV(Layer *_layer, GLenum target, GLuint index, const GLint *params)
  {
    driver_glProgramLocalParameterI4ivNV(target, index, params);
  }

  static void REGAL_CALL missing_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramLocalParameterI4uiNV", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETERI4UINVPROC driver_glProgramLocalParameterI4uiNV = NULL;

  static void REGAL_CALL loader_glProgramLocalParameterI4uiNV(Layer *_layer, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
  {
    driver_glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParameterI4uivNV", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC driver_glProgramLocalParameterI4uivNV = NULL;

  static void REGAL_CALL loader_glProgramLocalParameterI4uivNV(Layer *_layer, GLenum target, GLuint index, const GLuint *params)
  {
    driver_glProgramLocalParameterI4uivNV(target, index, params);
  }

  static void REGAL_CALL missing_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParametersI4ivNV", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC driver_glProgramLocalParametersI4ivNV = NULL;

  static void REGAL_CALL loader_glProgramLocalParametersI4ivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLint *params)
  {
    driver_glProgramLocalParametersI4ivNV(target, index, count, params);
  }

  static void REGAL_CALL missing_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramLocalParametersI4uivNV", " not available." );
  }

  PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC driver_glProgramLocalParametersI4uivNV = NULL;

  static void REGAL_CALL loader_glProgramLocalParametersI4uivNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLuint *params)
  {
    driver_glProgramLocalParametersI4uivNV(target, index, count, params);
  }

// GL_NV_gpu_shader5

  static void REGAL_CALL missing_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformi64vNV", " not available." );
  }

  PFNGLGETUNIFORMI64VNVPROC driver_glGetUniformi64vNV = NULL;

  static void REGAL_CALL loader_glGetUniformi64vNV(Layer *_layer, GLuint program, GLint location, GLint64EXT *params)
  {
    driver_glGetUniformi64vNV(program, location, params);
  }

  static void REGAL_CALL missing_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1i64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORM1I64NVPROC driver_glProgramUniform1i64NV = NULL;

  static void REGAL_CALL loader_glProgramUniform1i64NV(Layer *_layer, GLuint program, GLint location, GLint64EXT x)
  {
    driver_glProgramUniform1i64NV(program, location, x);
  }

  static void REGAL_CALL missing_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1i64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORM1I64VNVPROC driver_glProgramUniform1i64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniform1i64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    driver_glProgramUniform1i64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glProgramUniform1ui64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORM1UI64NVPROC driver_glProgramUniform1ui64NV = NULL;

  static void REGAL_CALL loader_glProgramUniform1ui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT x)
  {
    driver_glProgramUniform1ui64NV(program, location, x);
  }

  static void REGAL_CALL missing_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform1ui64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORM1UI64VNVPROC driver_glProgramUniform1ui64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniform1ui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glProgramUniform1ui64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2i64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORM2I64NVPROC driver_glProgramUniform2i64NV = NULL;

  static void REGAL_CALL loader_glProgramUniform2i64NV(Layer *_layer, GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
  {
    driver_glProgramUniform2i64NV(program, location, x, y);
  }

  static void REGAL_CALL missing_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2i64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORM2I64VNVPROC driver_glProgramUniform2i64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniform2i64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    driver_glProgramUniform2i64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glProgramUniform2ui64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORM2UI64NVPROC driver_glProgramUniform2ui64NV = NULL;

  static void REGAL_CALL loader_glProgramUniform2ui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
  {
    driver_glProgramUniform2ui64NV(program, location, x, y);
  }

  static void REGAL_CALL missing_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform2ui64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORM2UI64VNVPROC driver_glProgramUniform2ui64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniform2ui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glProgramUniform2ui64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3i64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORM3I64NVPROC driver_glProgramUniform3i64NV = NULL;

  static void REGAL_CALL loader_glProgramUniform3i64NV(Layer *_layer, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    driver_glProgramUniform3i64NV(program, location, x, y, z);
  }

  static void REGAL_CALL missing_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3i64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORM3I64VNVPROC driver_glProgramUniform3i64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniform3i64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    driver_glProgramUniform3i64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glProgramUniform3ui64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORM3UI64NVPROC driver_glProgramUniform3ui64NV = NULL;

  static void REGAL_CALL loader_glProgramUniform3ui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    driver_glProgramUniform3ui64NV(program, location, x, y, z);
  }

  static void REGAL_CALL missing_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform3ui64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORM3UI64VNVPROC driver_glProgramUniform3ui64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniform3ui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glProgramUniform3ui64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4i64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORM4I64NVPROC driver_glProgramUniform4i64NV = NULL;

  static void REGAL_CALL loader_glProgramUniform4i64NV(Layer *_layer, GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    driver_glProgramUniform4i64NV(program, location, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4i64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORM4I64VNVPROC driver_glProgramUniform4i64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniform4i64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
  {
    driver_glProgramUniform4i64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramUniform4ui64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORM4UI64NVPROC driver_glProgramUniform4ui64NV = NULL;

  static void REGAL_CALL loader_glProgramUniform4ui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    driver_glProgramUniform4ui64NV(program, location, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniform4ui64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORM4UI64VNVPROC driver_glProgramUniform4ui64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniform4ui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glProgramUniform4ui64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glUniform1i64NV(GLint location, GLint64EXT x)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glUniform1i64NV", " not available." );
  }

  PFNGLUNIFORM1I64NVPROC driver_glUniform1i64NV = NULL;

  static void REGAL_CALL loader_glUniform1i64NV(Layer *_layer, GLint location, GLint64EXT x)
  {
    driver_glUniform1i64NV(location, x);
  }

  static void REGAL_CALL missing_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1i64vNV", " not available." );
  }

  PFNGLUNIFORM1I64VNVPROC driver_glUniform1i64vNV = NULL;

  static void REGAL_CALL loader_glUniform1i64vNV(Layer *_layer, GLint location, GLsizei count, const GLint64EXT *value)
  {
    driver_glUniform1i64vNV(location, count, value);
  }

  static void REGAL_CALL missing_glUniform1ui64NV(GLint location, GLuint64EXT x)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    Warning( "glUniform1ui64NV", " not available." );
  }

  PFNGLUNIFORM1UI64NVPROC driver_glUniform1ui64NV = NULL;

  static void REGAL_CALL loader_glUniform1ui64NV(Layer *_layer, GLint location, GLuint64EXT x)
  {
    driver_glUniform1ui64NV(location, x);
  }

  static void REGAL_CALL missing_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform1ui64vNV", " not available." );
  }

  PFNGLUNIFORM1UI64VNVPROC driver_glUniform1ui64vNV = NULL;

  static void REGAL_CALL loader_glUniform1ui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glUniform1ui64vNV(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glUniform2i64NV", " not available." );
  }

  PFNGLUNIFORM2I64NVPROC driver_glUniform2i64NV = NULL;

  static void REGAL_CALL loader_glUniform2i64NV(Layer *_layer, GLint location, GLint64EXT x, GLint64EXT y)
  {
    driver_glUniform2i64NV(location, x, y);
  }

  static void REGAL_CALL missing_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2i64vNV", " not available." );
  }

  PFNGLUNIFORM2I64VNVPROC driver_glUniform2i64vNV = NULL;

  static void REGAL_CALL loader_glUniform2i64vNV(Layer *_layer, GLint location, GLsizei count, const GLint64EXT *value)
  {
    driver_glUniform2i64vNV(location, count, value);
  }

  static void REGAL_CALL missing_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glUniform2ui64NV", " not available." );
  }

  PFNGLUNIFORM2UI64NVPROC driver_glUniform2ui64NV = NULL;

  static void REGAL_CALL loader_glUniform2ui64NV(Layer *_layer, GLint location, GLuint64EXT x, GLuint64EXT y)
  {
    driver_glUniform2ui64NV(location, x, y);
  }

  static void REGAL_CALL missing_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform2ui64vNV", " not available." );
  }

  PFNGLUNIFORM2UI64VNVPROC driver_glUniform2ui64vNV = NULL;

  static void REGAL_CALL loader_glUniform2ui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glUniform2ui64vNV(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glUniform3i64NV", " not available." );
  }

  PFNGLUNIFORM3I64NVPROC driver_glUniform3i64NV = NULL;

  static void REGAL_CALL loader_glUniform3i64NV(Layer *_layer, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    driver_glUniform3i64NV(location, x, y, z);
  }

  static void REGAL_CALL missing_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3i64vNV", " not available." );
  }

  PFNGLUNIFORM3I64VNVPROC driver_glUniform3i64vNV = NULL;

  static void REGAL_CALL loader_glUniform3i64vNV(Layer *_layer, GLint location, GLsizei count, const GLint64EXT *value)
  {
    driver_glUniform3i64vNV(location, count, value);
  }

  static void REGAL_CALL missing_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glUniform3ui64NV", " not available." );
  }

  PFNGLUNIFORM3UI64NVPROC driver_glUniform3ui64NV = NULL;

  static void REGAL_CALL loader_glUniform3ui64NV(Layer *_layer, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    driver_glUniform3ui64NV(location, x, y, z);
  }

  static void REGAL_CALL missing_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform3ui64vNV", " not available." );
  }

  PFNGLUNIFORM3UI64VNVPROC driver_glUniform3ui64vNV = NULL;

  static void REGAL_CALL loader_glUniform3ui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glUniform3ui64vNV(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glUniform4i64NV", " not available." );
  }

  PFNGLUNIFORM4I64NVPROC driver_glUniform4i64NV = NULL;

  static void REGAL_CALL loader_glUniform4i64NV(Layer *_layer, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    driver_glUniform4i64NV(location, x, y, z, w);
  }

  static void REGAL_CALL missing_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4i64vNV", " not available." );
  }

  PFNGLUNIFORM4I64VNVPROC driver_glUniform4i64vNV = NULL;

  static void REGAL_CALL loader_glUniform4i64vNV(Layer *_layer, GLint location, GLsizei count, const GLint64EXT *value)
  {
    driver_glUniform4i64vNV(location, count, value);
  }

  static void REGAL_CALL missing_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glUniform4ui64NV", " not available." );
  }

  PFNGLUNIFORM4UI64NVPROC driver_glUniform4ui64NV = NULL;

  static void REGAL_CALL loader_glUniform4ui64NV(Layer *_layer, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    driver_glUniform4ui64NV(location, x, y, z, w);
  }

  static void REGAL_CALL missing_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniform4ui64vNV", " not available." );
  }

  PFNGLUNIFORM4UI64VNVPROC driver_glUniform4ui64vNV = NULL;

  static void REGAL_CALL loader_glUniform4ui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glUniform4ui64vNV(location, count, value);
  }

// GL_NV_half_float

  static void REGAL_CALL missing_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glColor3hNV", " not available." );
  }

  PFNGLCOLOR3HNVPROC driver_glColor3hNV = NULL;

  static void REGAL_CALL loader_glColor3hNV(Layer *_layer, GLhalfNV red, GLhalfNV green, GLhalfNV blue)
  {
    driver_glColor3hNV(red, green, blue);
  }

  static void REGAL_CALL missing_glColor3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor3hvNV", " not available." );
  }

  PFNGLCOLOR3HVNVPROC driver_glColor3hvNV = NULL;

  static void REGAL_CALL loader_glColor3hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glColor3hvNV(v);
  }

  static void REGAL_CALL missing_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4hNV", " not available." );
  }

  PFNGLCOLOR4HNVPROC driver_glColor4hNV = NULL;

  static void REGAL_CALL loader_glColor4hNV(Layer *_layer, GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
  {
    driver_glColor4hNV(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glColor4hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glColor4hvNV", " not available." );
  }

  PFNGLCOLOR4HVNVPROC driver_glColor4hvNV = NULL;

  static void REGAL_CALL loader_glColor4hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glColor4hvNV(v);
  }

  static void REGAL_CALL missing_glFogCoordhNV(GLhalfNV coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordhNV", " not available." );
  }

  PFNGLFOGCOORDHNVPROC driver_glFogCoordhNV = NULL;

  static void REGAL_CALL loader_glFogCoordhNV(Layer *_layer, GLhalfNV coord)
  {
    driver_glFogCoordhNV(coord);
  }

  static void REGAL_CALL missing_glFogCoordhvNV(const GLhalfNV *coord)
  {
    UNUSED_PARAMETER(coord);
    Warning( "glFogCoordhvNV", " not available." );
  }

  PFNGLFOGCOORDHVNVPROC driver_glFogCoordhvNV = NULL;

  static void REGAL_CALL loader_glFogCoordhvNV(Layer *_layer, const GLhalfNV *coord)
  {
    driver_glFogCoordhvNV(coord);
  }

  static void REGAL_CALL missing_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    Warning( "glMultiTexCoord1hNV", " not available." );
  }

  PFNGLMULTITEXCOORD1HNVPROC driver_glMultiTexCoord1hNV = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1hNV(Layer *_layer, GLenum target, GLhalfNV s)
  {
    driver_glMultiTexCoord1hNV(target, s);
  }

  static void REGAL_CALL missing_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord1hvNV", " not available." );
  }

  PFNGLMULTITEXCOORD1HVNVPROC driver_glMultiTexCoord1hvNV = NULL;

  static void REGAL_CALL loader_glMultiTexCoord1hvNV(Layer *_layer, GLenum target, const GLhalfNV *v)
  {
    driver_glMultiTexCoord1hvNV(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glMultiTexCoord2hNV", " not available." );
  }

  PFNGLMULTITEXCOORD2HNVPROC driver_glMultiTexCoord2hNV = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2hNV(Layer *_layer, GLenum target, GLhalfNV s, GLhalfNV t)
  {
    driver_glMultiTexCoord2hNV(target, s, t);
  }

  static void REGAL_CALL missing_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord2hvNV", " not available." );
  }

  PFNGLMULTITEXCOORD2HVNVPROC driver_glMultiTexCoord2hvNV = NULL;

  static void REGAL_CALL loader_glMultiTexCoord2hvNV(Layer *_layer, GLenum target, const GLhalfNV *v)
  {
    driver_glMultiTexCoord2hvNV(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glMultiTexCoord3hNV", " not available." );
  }

  PFNGLMULTITEXCOORD3HNVPROC driver_glMultiTexCoord3hNV = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3hNV(Layer *_layer, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
  {
    driver_glMultiTexCoord3hNV(target, s, t, r);
  }

  static void REGAL_CALL missing_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord3hvNV", " not available." );
  }

  PFNGLMULTITEXCOORD3HVNVPROC driver_glMultiTexCoord3hvNV = NULL;

  static void REGAL_CALL loader_glMultiTexCoord3hvNV(Layer *_layer, GLenum target, const GLhalfNV *v)
  {
    driver_glMultiTexCoord3hvNV(target, v);
  }

  static void REGAL_CALL missing_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4hNV", " not available." );
  }

  PFNGLMULTITEXCOORD4HNVPROC driver_glMultiTexCoord4hNV = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4hNV(Layer *_layer, GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
  {
    driver_glMultiTexCoord4hNV(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(v);
    Warning( "glMultiTexCoord4hvNV", " not available." );
  }

  PFNGLMULTITEXCOORD4HVNVPROC driver_glMultiTexCoord4hvNV = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4hvNV(Layer *_layer, GLenum target, const GLhalfNV *v)
  {
    driver_glMultiTexCoord4hvNV(target, v);
  }

  static void REGAL_CALL missing_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3hNV", " not available." );
  }

  PFNGLNORMAL3HNVPROC driver_glNormal3hNV = NULL;

  static void REGAL_CALL loader_glNormal3hNV(Layer *_layer, GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
  {
    driver_glNormal3hNV(nx, ny, nz);
  }

  static void REGAL_CALL missing_glNormal3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glNormal3hvNV", " not available." );
  }

  PFNGLNORMAL3HVNVPROC driver_glNormal3hvNV = NULL;

  static void REGAL_CALL loader_glNormal3hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glNormal3hvNV(v);
  }

  static void REGAL_CALL missing_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    Warning( "glSecondaryColor3hNV", " not available." );
  }

  PFNGLSECONDARYCOLOR3HNVPROC driver_glSecondaryColor3hNV = NULL;

  static void REGAL_CALL loader_glSecondaryColor3hNV(Layer *_layer, GLhalfNV red, GLhalfNV green, GLhalfNV blue)
  {
    driver_glSecondaryColor3hNV(red, green, blue);
  }

  static void REGAL_CALL missing_glSecondaryColor3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glSecondaryColor3hvNV", " not available." );
  }

  PFNGLSECONDARYCOLOR3HVNVPROC driver_glSecondaryColor3hvNV = NULL;

  static void REGAL_CALL loader_glSecondaryColor3hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glSecondaryColor3hvNV(v);
  }

  static void REGAL_CALL missing_glTexCoord1hNV(GLhalfNV s)
  {
    UNUSED_PARAMETER(s);
    Warning( "glTexCoord1hNV", " not available." );
  }

  PFNGLTEXCOORD1HNVPROC driver_glTexCoord1hNV = NULL;

  static void REGAL_CALL loader_glTexCoord1hNV(Layer *_layer, GLhalfNV s)
  {
    driver_glTexCoord1hNV(s);
  }

  static void REGAL_CALL missing_glTexCoord1hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord1hvNV", " not available." );
  }

  PFNGLTEXCOORD1HVNVPROC driver_glTexCoord1hvNV = NULL;

  static void REGAL_CALL loader_glTexCoord1hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glTexCoord1hvNV(v);
  }

  static void REGAL_CALL missing_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    Warning( "glTexCoord2hNV", " not available." );
  }

  PFNGLTEXCOORD2HNVPROC driver_glTexCoord2hNV = NULL;

  static void REGAL_CALL loader_glTexCoord2hNV(Layer *_layer, GLhalfNV s, GLhalfNV t)
  {
    driver_glTexCoord2hNV(s, t);
  }

  static void REGAL_CALL missing_glTexCoord2hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2hvNV", " not available." );
  }

  PFNGLTEXCOORD2HVNVPROC driver_glTexCoord2hvNV = NULL;

  static void REGAL_CALL loader_glTexCoord2hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glTexCoord2hvNV(v);
  }

  static void REGAL_CALL missing_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    Warning( "glTexCoord3hNV", " not available." );
  }

  PFNGLTEXCOORD3HNVPROC driver_glTexCoord3hNV = NULL;

  static void REGAL_CALL loader_glTexCoord3hNV(Layer *_layer, GLhalfNV s, GLhalfNV t, GLhalfNV r)
  {
    driver_glTexCoord3hNV(s, t, r);
  }

  static void REGAL_CALL missing_glTexCoord3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord3hvNV", " not available." );
  }

  PFNGLTEXCOORD3HVNVPROC driver_glTexCoord3hvNV = NULL;

  static void REGAL_CALL loader_glTexCoord3hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glTexCoord3hvNV(v);
  }

  static void REGAL_CALL missing_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glTexCoord4hNV", " not available." );
  }

  PFNGLTEXCOORD4HNVPROC driver_glTexCoord4hNV = NULL;

  static void REGAL_CALL loader_glTexCoord4hNV(Layer *_layer, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
  {
    driver_glTexCoord4hNV(s, t, r, q);
  }

  static void REGAL_CALL missing_glTexCoord4hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4hvNV", " not available." );
  }

  PFNGLTEXCOORD4HVNVPROC driver_glTexCoord4hvNV = NULL;

  static void REGAL_CALL loader_glTexCoord4hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glTexCoord4hvNV(v);
  }

  static void REGAL_CALL missing_glVertex2hNV(GLhalfNV x, GLhalfNV y)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertex2hNV", " not available." );
  }

  PFNGLVERTEX2HNVPROC driver_glVertex2hNV = NULL;

  static void REGAL_CALL loader_glVertex2hNV(Layer *_layer, GLhalfNV x, GLhalfNV y)
  {
    driver_glVertex2hNV(x, y);
  }

  static void REGAL_CALL missing_glVertex2hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex2hvNV", " not available." );
  }

  PFNGLVERTEX2HVNVPROC driver_glVertex2hvNV = NULL;

  static void REGAL_CALL loader_glVertex2hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glVertex2hvNV(v);
  }

  static void REGAL_CALL missing_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertex3hNV", " not available." );
  }

  PFNGLVERTEX3HNVPROC driver_glVertex3hNV = NULL;

  static void REGAL_CALL loader_glVertex3hNV(Layer *_layer, GLhalfNV x, GLhalfNV y, GLhalfNV z)
  {
    driver_glVertex3hNV(x, y, z);
  }

  static void REGAL_CALL missing_glVertex3hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex3hvNV", " not available." );
  }

  PFNGLVERTEX3HVNVPROC driver_glVertex3hvNV = NULL;

  static void REGAL_CALL loader_glVertex3hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glVertex3hvNV(v);
  }

  static void REGAL_CALL missing_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertex4hNV", " not available." );
  }

  PFNGLVERTEX4HNVPROC driver_glVertex4hNV = NULL;

  static void REGAL_CALL loader_glVertex4hNV(Layer *_layer, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
  {
    driver_glVertex4hNV(x, y, z, w);
  }

  static void REGAL_CALL missing_glVertex4hvNV(const GLhalfNV *v)
  {
    UNUSED_PARAMETER(v);
    Warning( "glVertex4hvNV", " not available." );
  }

  PFNGLVERTEX4HVNVPROC driver_glVertex4hvNV = NULL;

  static void REGAL_CALL loader_glVertex4hvNV(Layer *_layer, const GLhalfNV *v)
  {
    driver_glVertex4hvNV(v);
  }

  static void REGAL_CALL missing_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1hNV", " not available." );
  }

  PFNGLVERTEXATTRIB1HNVPROC driver_glVertexAttrib1hNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib1hNV(Layer *_layer, GLuint index, GLhalfNV x)
  {
    driver_glVertexAttrib1hNV(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1hvNV", " not available." );
  }

  PFNGLVERTEXATTRIB1HVNVPROC driver_glVertexAttrib1hvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib1hvNV(Layer *_layer, GLuint index, const GLhalfNV *v)
  {
    driver_glVertexAttrib1hvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2hNV", " not available." );
  }

  PFNGLVERTEXATTRIB2HNVPROC driver_glVertexAttrib2hNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib2hNV(Layer *_layer, GLuint index, GLhalfNV x, GLhalfNV y)
  {
    driver_glVertexAttrib2hNV(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2hvNV", " not available." );
  }

  PFNGLVERTEXATTRIB2HVNVPROC driver_glVertexAttrib2hvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib2hvNV(Layer *_layer, GLuint index, const GLhalfNV *v)
  {
    driver_glVertexAttrib2hvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3hNV", " not available." );
  }

  PFNGLVERTEXATTRIB3HNVPROC driver_glVertexAttrib3hNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib3hNV(Layer *_layer, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
  {
    driver_glVertexAttrib3hNV(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3hvNV", " not available." );
  }

  PFNGLVERTEXATTRIB3HVNVPROC driver_glVertexAttrib3hvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib3hvNV(Layer *_layer, GLuint index, const GLhalfNV *v)
  {
    driver_glVertexAttrib3hvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4hNV", " not available." );
  }

  PFNGLVERTEXATTRIB4HNVPROC driver_glVertexAttrib4hNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4hNV(Layer *_layer, GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
  {
    driver_glVertexAttrib4hNV(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4hvNV", " not available." );
  }

  PFNGLVERTEXATTRIB4HVNVPROC driver_glVertexAttrib4hvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4hvNV(Layer *_layer, GLuint index, const GLhalfNV *v)
  {
    driver_glVertexAttrib4hvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs1hvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS1HVNVPROC driver_glVertexAttribs1hvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs1hvNV(Layer *_layer, GLuint index, GLsizei count, const GLhalfNV *v)
  {
    driver_glVertexAttribs1hvNV(index, count, v);
  }

  static void REGAL_CALL missing_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs2hvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS2HVNVPROC driver_glVertexAttribs2hvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs2hvNV(Layer *_layer, GLuint index, GLsizei count, const GLhalfNV *v)
  {
    driver_glVertexAttribs2hvNV(index, count, v);
  }

  static void REGAL_CALL missing_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs3hvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS3HVNVPROC driver_glVertexAttribs3hvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs3hvNV(Layer *_layer, GLuint index, GLsizei count, const GLhalfNV *v)
  {
    driver_glVertexAttribs3hvNV(index, count, v);
  }

  static void REGAL_CALL missing_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4hvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS4HVNVPROC driver_glVertexAttribs4hvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs4hvNV(Layer *_layer, GLuint index, GLsizei count, const GLhalfNV *v)
  {
    driver_glVertexAttribs4hvNV(index, count, v);
  }

  static void REGAL_CALL missing_glVertexWeighthNV(GLhalfNV weight)
  {
    UNUSED_PARAMETER(weight);
    Warning( "glVertexWeighthNV", " not available." );
  }

  PFNGLVERTEXWEIGHTHNVPROC driver_glVertexWeighthNV = NULL;

  static void REGAL_CALL loader_glVertexWeighthNV(Layer *_layer, GLhalfNV weight)
  {
    driver_glVertexWeighthNV(weight);
  }

  static void REGAL_CALL missing_glVertexWeighthvNV(const GLhalfNV *weight)
  {
    UNUSED_PARAMETER(weight);
    Warning( "glVertexWeighthvNV", " not available." );
  }

  PFNGLVERTEXWEIGHTHVNVPROC driver_glVertexWeighthvNV = NULL;

  static void REGAL_CALL loader_glVertexWeighthvNV(Layer *_layer, const GLhalfNV *weight)
  {
    driver_glVertexWeighthvNV(weight);
  }

// GL_NV_non_square_matrices

  static void REGAL_CALL missing_glUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x3fvNV", " not available." );
  }

  PFNGLUNIFORMMATRIX2X3FVNVPROC driver_glUniformMatrix2x3fvNV = NULL;

  static void REGAL_CALL loader_glUniformMatrix2x3fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix2x3fvNV(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix2x4fvNV", " not available." );
  }

  PFNGLUNIFORMMATRIX2X4FVNVPROC driver_glUniformMatrix2x4fvNV = NULL;

  static void REGAL_CALL loader_glUniformMatrix2x4fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix2x4fvNV(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x2fvNV", " not available." );
  }

  PFNGLUNIFORMMATRIX3X2FVNVPROC driver_glUniformMatrix3x2fvNV = NULL;

  static void REGAL_CALL loader_glUniformMatrix3x2fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix3x2fvNV(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix3x4fvNV", " not available." );
  }

  PFNGLUNIFORMMATRIX3X4FVNVPROC driver_glUniformMatrix3x4fvNV = NULL;

  static void REGAL_CALL loader_glUniformMatrix3x4fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix3x4fvNV(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x2fvNV", " not available." );
  }

  PFNGLUNIFORMMATRIX4X2FVNVPROC driver_glUniformMatrix4x2fvNV = NULL;

  static void REGAL_CALL loader_glUniformMatrix4x2fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix4x2fvNV(location, count, transpose, value);
  }

  static void REGAL_CALL missing_glUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(transpose);
    UNUSED_PARAMETER(value);
    Warning( "glUniformMatrix4x3fvNV", " not available." );
  }

  PFNGLUNIFORMMATRIX4X3FVNVPROC driver_glUniformMatrix4x3fvNV = NULL;

  static void REGAL_CALL loader_glUniformMatrix4x3fvNV(Layer *_layer, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
  {
    driver_glUniformMatrix4x3fvNV(location, count, transpose, value);
  }

// GL_NV_occlusion_query

  static void REGAL_CALL missing_glBeginOcclusionQueryNV(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glBeginOcclusionQueryNV", " not available." );
  }

  PFNGLBEGINOCCLUSIONQUERYNVPROC driver_glBeginOcclusionQueryNV = NULL;

  static void REGAL_CALL loader_glBeginOcclusionQueryNV(Layer *_layer, GLuint id)
  {
    driver_glBeginOcclusionQueryNV(id);
  }

  static void REGAL_CALL missing_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteOcclusionQueriesNV", " not available." );
  }

  PFNGLDELETEOCCLUSIONQUERIESNVPROC driver_glDeleteOcclusionQueriesNV = NULL;

  static void REGAL_CALL loader_glDeleteOcclusionQueriesNV(Layer *_layer, GLsizei n, const GLuint *ids)
  {
    driver_glDeleteOcclusionQueriesNV(n, ids);
  }

  static void REGAL_CALL missing_glEndOcclusionQueryNV(void)
  {
    Warning( "glEndOcclusionQueryNV", " not available." );
  }

  PFNGLENDOCCLUSIONQUERYNVPROC driver_glEndOcclusionQueryNV = NULL;

  static void REGAL_CALL loader_glEndOcclusionQueryNV(Layer *_layer)
  {
    driver_glEndOcclusionQueryNV();
  }

  static void REGAL_CALL missing_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenOcclusionQueriesNV", " not available." );
  }

  PFNGLGENOCCLUSIONQUERIESNVPROC driver_glGenOcclusionQueriesNV = NULL;

  static void REGAL_CALL loader_glGenOcclusionQueriesNV(Layer *_layer, GLsizei n, GLuint *ids)
  {
    driver_glGenOcclusionQueriesNV(n, ids);
  }

  static void REGAL_CALL missing_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetOcclusionQueryivNV", " not available." );
  }

  PFNGLGETOCCLUSIONQUERYIVNVPROC driver_glGetOcclusionQueryivNV = NULL;

  static void REGAL_CALL loader_glGetOcclusionQueryivNV(Layer *_layer, GLuint id, GLenum pname, GLint *params)
  {
    driver_glGetOcclusionQueryivNV(id, pname, params);
  }

  static void REGAL_CALL missing_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetOcclusionQueryuivNV", " not available." );
  }

  PFNGLGETOCCLUSIONQUERYUIVNVPROC driver_glGetOcclusionQueryuivNV = NULL;

  static void REGAL_CALL loader_glGetOcclusionQueryuivNV(Layer *_layer, GLuint id, GLenum pname, GLuint *params)
  {
    driver_glGetOcclusionQueryuivNV(id, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsOcclusionQueryNV(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsOcclusionQueryNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISOCCLUSIONQUERYNVPROC driver_glIsOcclusionQueryNV = NULL;

  static GLboolean REGAL_CALL loader_glIsOcclusionQueryNV(Layer *_layer, GLuint id)
  {
    return driver_glIsOcclusionQueryNV(id);
  }

// GL_NV_parameter_buffer_object

  static void REGAL_CALL missing_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramBufferParametersIivNV", " not available." );
  }

  PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC driver_glProgramBufferParametersIivNV = NULL;

  static void REGAL_CALL loader_glProgramBufferParametersIivNV(Layer *_layer, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
  {
    driver_glProgramBufferParametersIivNV(target, buffer, index, count, params);
  }

  static void REGAL_CALL missing_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramBufferParametersIuivNV", " not available." );
  }

  PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC driver_glProgramBufferParametersIuivNV = NULL;

  static void REGAL_CALL loader_glProgramBufferParametersIuivNV(Layer *_layer, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
  {
    driver_glProgramBufferParametersIuivNV(target, buffer, index, count, params);
  }

  static void REGAL_CALL missing_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(params);
    Warning( "glProgramBufferParametersfvNV", " not available." );
  }

  PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC driver_glProgramBufferParametersfvNV = NULL;

  static void REGAL_CALL loader_glProgramBufferParametersfvNV(Layer *_layer, GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
  {
    driver_glProgramBufferParametersfvNV(target, buffer, index, count, params);
  }

// GL_NV_path_rendering

  static void REGAL_CALL missing_glCopyPathNV(GLuint resultPath, GLuint srcPath)
  {
    UNUSED_PARAMETER(resultPath);
    UNUSED_PARAMETER(srcPath);
    Warning( "glCopyPathNV", " not available." );
  }

  PFNGLCOPYPATHNVPROC driver_glCopyPathNV = NULL;

  static void REGAL_CALL loader_glCopyPathNV(Layer *_layer, GLuint resultPath, GLuint srcPath)
  {
    driver_glCopyPathNV(resultPath, srcPath);
  }

  static void REGAL_CALL missing_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(coverMode);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glCoverFillPathInstancedNV", " not available." );
  }

  PFNGLCOVERFILLPATHINSTANCEDNVPROC driver_glCoverFillPathInstancedNV = NULL;

  static void REGAL_CALL loader_glCoverFillPathInstancedNV(Layer *_layer, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
  {
    driver_glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }

  static void REGAL_CALL missing_glCoverFillPathNV(GLuint path, GLenum coverMode)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(coverMode);
    Warning( "glCoverFillPathNV", " not available." );
  }

  PFNGLCOVERFILLPATHNVPROC driver_glCoverFillPathNV = NULL;

  static void REGAL_CALL loader_glCoverFillPathNV(Layer *_layer, GLuint path, GLenum coverMode)
  {
    driver_glCoverFillPathNV(path, coverMode);
  }

  static void REGAL_CALL missing_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(coverMode);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glCoverStrokePathInstancedNV", " not available." );
  }

  PFNGLCOVERSTROKEPATHINSTANCEDNVPROC driver_glCoverStrokePathInstancedNV = NULL;

  static void REGAL_CALL loader_glCoverStrokePathInstancedNV(Layer *_layer, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
  {
    driver_glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }

  static void REGAL_CALL missing_glCoverStrokePathNV(GLuint name, GLenum coverMode)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(coverMode);
    Warning( "glCoverStrokePathNV", " not available." );
  }

  PFNGLCOVERSTROKEPATHNVPROC driver_glCoverStrokePathNV = NULL;

  static void REGAL_CALL loader_glCoverStrokePathNV(Layer *_layer, GLuint name, GLenum coverMode)
  {
    driver_glCoverStrokePathNV(name, coverMode);
  }

  static void REGAL_CALL missing_glDeletePathsNV(GLuint path, GLsizei range)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(range);
    Warning( "glDeletePathsNV", " not available." );
  }

  PFNGLDELETEPATHSNVPROC driver_glDeletePathsNV = NULL;

  static void REGAL_CALL loader_glDeletePathsNV(Layer *_layer, GLuint path, GLsizei range)
  {
    driver_glDeletePathsNV(path, range);
  }

  static GLuint REGAL_CALL missing_glGenPathsNV(GLsizei range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenPathsNV", " not available." );
    return 0;
  }

  PFNGLGENPATHSNVPROC driver_glGenPathsNV = NULL;

  static GLuint REGAL_CALL loader_glGenPathsNV(Layer *_layer, GLsizei range)
  {
    return driver_glGenPathsNV(range);
  }

  static void REGAL_CALL missing_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)
  {
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathColorGenfvNV", " not available." );
  }

  PFNGLGETPATHCOLORGENFVNVPROC driver_glGetPathColorGenfvNV = NULL;

  static void REGAL_CALL loader_glGetPathColorGenfvNV(Layer *_layer, GLenum color, GLenum pname, GLfloat *value)
  {
    driver_glGetPathColorGenfvNV(color, pname, value);
  }

  static void REGAL_CALL missing_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)
  {
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathColorGenivNV", " not available." );
  }

  PFNGLGETPATHCOLORGENIVNVPROC driver_glGetPathColorGenivNV = NULL;

  static void REGAL_CALL loader_glGetPathColorGenivNV(Layer *_layer, GLenum color, GLenum pname, GLint *value)
  {
    driver_glGetPathColorGenivNV(color, pname, value);
  }

  static void REGAL_CALL missing_glGetPathCommandsNV(GLuint name, GLubyte *commands)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(commands);
    Warning( "glGetPathCommandsNV", " not available." );
  }

  PFNGLGETPATHCOMMANDSNVPROC driver_glGetPathCommandsNV = NULL;

  static void REGAL_CALL loader_glGetPathCommandsNV(Layer *_layer, GLuint name, GLubyte *commands)
  {
    driver_glGetPathCommandsNV(name, commands);
  }

  static void REGAL_CALL missing_glGetPathCoordsNV(GLuint name, GLfloat *coords)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(coords);
    Warning( "glGetPathCoordsNV", " not available." );
  }

  PFNGLGETPATHCOORDSNVPROC driver_glGetPathCoordsNV = NULL;

  static void REGAL_CALL loader_glGetPathCoordsNV(Layer *_layer, GLuint name, GLfloat *coords)
  {
    driver_glGetPathCoordsNV(name, coords);
  }

  static void REGAL_CALL missing_glGetPathDashArrayNV(GLuint name, GLfloat *dashArray)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(dashArray);
    Warning( "glGetPathDashArrayNV", " not available." );
  }

  PFNGLGETPATHDASHARRAYNVPROC driver_glGetPathDashArrayNV = NULL;

  static void REGAL_CALL loader_glGetPathDashArrayNV(Layer *_layer, GLuint name, GLfloat *dashArray)
  {
    driver_glGetPathDashArrayNV(name, dashArray);
  }

  static GLfloat REGAL_CALL missing_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(startSegment);
    UNUSED_PARAMETER(numSegments);
    Warning( "glGetPathLengthNV", " not available." );
    return 0;
  }

  PFNGLGETPATHLENGTHNVPROC driver_glGetPathLengthNV = NULL;

  static GLfloat REGAL_CALL loader_glGetPathLengthNV(Layer *_layer, GLuint path, GLsizei startSegment, GLsizei numSegments)
  {
    return driver_glGetPathLengthNV(path, startSegment, numSegments);
  }

  static void REGAL_CALL missing_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
  {
    UNUSED_PARAMETER(metricQueryMask);
    UNUSED_PARAMETER(fistPathName);
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(metrics);
    Warning( "glGetPathMetricRangeNV", " not available." );
  }

  PFNGLGETPATHMETRICRANGENVPROC driver_glGetPathMetricRangeNV = NULL;

  static void REGAL_CALL loader_glGetPathMetricRangeNV(Layer *_layer, GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
  {
    driver_glGetPathMetricRangeNV(metricQueryMask, fistPathName, numPaths, stride, metrics);
  }

  static void REGAL_CALL missing_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
  {
    UNUSED_PARAMETER(metricQueryMask);
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(metrics);
    Warning( "glGetPathMetricsNV", " not available." );
  }

  PFNGLGETPATHMETRICSNVPROC driver_glGetPathMetricsNV = NULL;

  static void REGAL_CALL loader_glGetPathMetricsNV(Layer *_layer, GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
  {
    driver_glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  }

  static void REGAL_CALL missing_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat *value)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(param);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathParameterfvNV", " not available." );
  }

  PFNGLGETPATHPARAMETERFVNVPROC driver_glGetPathParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetPathParameterfvNV(Layer *_layer, GLuint name, GLenum param, GLfloat *value)
  {
    driver_glGetPathParameterfvNV(name, param, value);
  }

  static void REGAL_CALL missing_glGetPathParameterivNV(GLuint name, GLenum param, GLint *value)
  {
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(param);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathParameterivNV", " not available." );
  }

  PFNGLGETPATHPARAMETERIVNVPROC driver_glGetPathParameterivNV = NULL;

  static void REGAL_CALL loader_glGetPathParameterivNV(Layer *_layer, GLuint name, GLenum param, GLint *value)
  {
    driver_glGetPathParameterivNV(name, param, value);
  }

  static void REGAL_CALL missing_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
  {
    UNUSED_PARAMETER(pathListMode);
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(advanceScale);
    UNUSED_PARAMETER(kerningScale);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(returnedSpacing);
    Warning( "glGetPathSpacingNV", " not available." );
  }

  PFNGLGETPATHSPACINGNVPROC driver_glGetPathSpacingNV = NULL;

  static void REGAL_CALL loader_glGetPathSpacingNV(Layer *_layer, GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
  {
    driver_glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  }

  static void REGAL_CALL missing_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)
  {
    UNUSED_PARAMETER(texCoordSet);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathTexGenfvNV", " not available." );
  }

  PFNGLGETPATHTEXGENFVNVPROC driver_glGetPathTexGenfvNV = NULL;

  static void REGAL_CALL loader_glGetPathTexGenfvNV(Layer *_layer, GLenum texCoordSet, GLenum pname, GLfloat *value)
  {
    driver_glGetPathTexGenfvNV(texCoordSet, pname, value);
  }

  static void REGAL_CALL missing_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)
  {
    UNUSED_PARAMETER(texCoordSet);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glGetPathTexGenivNV", " not available." );
  }

  PFNGLGETPATHTEXGENIVNVPROC driver_glGetPathTexGenivNV = NULL;

  static void REGAL_CALL loader_glGetPathTexGenivNV(Layer *_layer, GLenum texCoordSet, GLenum pname, GLint *value)
  {
    driver_glGetPathTexGenivNV(texCoordSet, pname, value);
  }

  static void REGAL_CALL missing_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
  {
    UNUSED_PARAMETER(resultPath);
    UNUSED_PARAMETER(pathA);
    UNUSED_PARAMETER(pathB);
    UNUSED_PARAMETER(weight);
    Warning( "glInterpolatePathsNV", " not available." );
  }

  PFNGLINTERPOLATEPATHSNVPROC driver_glInterpolatePathsNV = NULL;

  static void REGAL_CALL loader_glInterpolatePathsNV(Layer *_layer, GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
  {
    driver_glInterpolatePathsNV(resultPath, pathA, pathB, weight);
  }

  static GLboolean REGAL_CALL missing_glIsPathNV(GLuint path)
  {
    UNUSED_PARAMETER(path);
    Warning( "glIsPathNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISPATHNVPROC driver_glIsPathNV = NULL;

  static GLboolean REGAL_CALL loader_glIsPathNV(Layer *_layer, GLuint path)
  {
    return driver_glIsPathNV(path);
  }

  static GLboolean REGAL_CALL missing_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glIsPointInFillPathNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISPOINTINFILLPATHNVPROC driver_glIsPointInFillPathNV = NULL;

  static GLboolean REGAL_CALL loader_glIsPointInFillPathNV(Layer *_layer, GLuint path, GLuint mask, GLfloat x, GLfloat y)
  {
    return driver_glIsPointInFillPathNV(path, mask, x, y);
  }

  static GLboolean REGAL_CALL missing_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glIsPointInStrokePathNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISPOINTINSTROKEPATHNVPROC driver_glIsPointInStrokePathNV = NULL;

  static GLboolean REGAL_CALL loader_glIsPointInStrokePathNV(Layer *_layer, GLuint path, GLfloat x, GLfloat y)
  {
    return driver_glIsPointInStrokePathNV(path, x, y);
  }

  static void REGAL_CALL missing_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
  {
    UNUSED_PARAMETER(color);
    UNUSED_PARAMETER(genMode);
    UNUSED_PARAMETER(colorFormat);
    UNUSED_PARAMETER(coeffs);
    Warning( "glPathColorGenNV", " not available." );
  }

  PFNGLPATHCOLORGENNVPROC driver_glPathColorGenNV = NULL;

  static void REGAL_CALL loader_glPathColorGenNV(Layer *_layer, GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
  {
    driver_glPathColorGenNV(color, genMode, colorFormat, coeffs);
  }

  static void REGAL_CALL missing_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(numCommands);
    UNUSED_PARAMETER(commands);
    UNUSED_PARAMETER(numCoords);
    UNUSED_PARAMETER(coordType);
    UNUSED_PARAMETER(coords);
    Warning( "glPathCommandsNV", " not available." );
  }

  PFNGLPATHCOMMANDSNVPROC driver_glPathCommandsNV = NULL;

  static void REGAL_CALL loader_glPathCommandsNV(Layer *_layer, GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    driver_glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
  }

  static void REGAL_CALL missing_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(numCoords);
    UNUSED_PARAMETER(coordType);
    UNUSED_PARAMETER(coords);
    Warning( "glPathCoordsNV", " not available." );
  }

  PFNGLPATHCOORDSNVPROC driver_glPathCoordsNV = NULL;

  static void REGAL_CALL loader_glPathCoordsNV(Layer *_layer, GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    driver_glPathCoordsNV(path, numCoords, coordType, coords);
  }

  static void REGAL_CALL missing_glPathCoverDepthFuncNV(GLenum zfunc)
  {
    UNUSED_PARAMETER(zfunc);
    Warning( "glPathCoverDepthFuncNV", " not available." );
  }

  PFNGLPATHCOVERDEPTHFUNCNVPROC driver_glPathCoverDepthFuncNV = NULL;

  static void REGAL_CALL loader_glPathCoverDepthFuncNV(Layer *_layer, GLenum zfunc)
  {
    driver_glPathCoverDepthFuncNV(zfunc);
  }

  static void REGAL_CALL missing_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(dashCount);
    UNUSED_PARAMETER(dashArray);
    Warning( "glPathDashArrayNV", " not available." );
  }

  PFNGLPATHDASHARRAYNVPROC driver_glPathDashArrayNV = NULL;

  static void REGAL_CALL loader_glPathDashArrayNV(Layer *_layer, GLuint path, GLsizei dashCount, const GLfloat *dashArray)
  {
    driver_glPathDashArrayNV(path, dashCount, dashArray);
  }

  static void REGAL_CALL missing_glPathFogGenNV(GLenum genMode)
  {
    UNUSED_PARAMETER(genMode);
    Warning( "glPathFogGenNV", " not available." );
  }

  PFNGLPATHFOGGENNVPROC driver_glPathFogGenNV = NULL;

  static void REGAL_CALL loader_glPathFogGenNV(Layer *_layer, GLenum genMode)
  {
    driver_glPathFogGenNV(genMode);
  }

  static void REGAL_CALL missing_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
  {
    UNUSED_PARAMETER(firstPathName);
    UNUSED_PARAMETER(fontTarget);
    UNUSED_PARAMETER(fontName);
    UNUSED_PARAMETER(fontStyle);
    UNUSED_PARAMETER(firstGlyph);
    UNUSED_PARAMETER(numGlyphs);
    UNUSED_PARAMETER(handleMissingGlyphs);
    UNUSED_PARAMETER(pathParameterTemplate);
    UNUSED_PARAMETER(emScale);
    Warning( "glPathGlyphRangeNV", " not available." );
  }

  PFNGLPATHGLYPHRANGENVPROC driver_glPathGlyphRangeNV = NULL;

  static void REGAL_CALL loader_glPathGlyphRangeNV(Layer *_layer, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
  {
    driver_glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  }

  static void REGAL_CALL missing_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
  {
    UNUSED_PARAMETER(firstPathName);
    UNUSED_PARAMETER(fontTarget);
    UNUSED_PARAMETER(fontName);
    UNUSED_PARAMETER(fontStyle);
    UNUSED_PARAMETER(numGlyphs);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(charcodes);
    UNUSED_PARAMETER(handleMissingGlyphs);
    UNUSED_PARAMETER(pathParameterTemplate);
    UNUSED_PARAMETER(emScale);
    Warning( "glPathGlyphsNV", " not available." );
  }

  PFNGLPATHGLYPHSNVPROC driver_glPathGlyphsNV = NULL;

  static void REGAL_CALL loader_glPathGlyphsNV(Layer *_layer, GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
  {
    driver_glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  }

  static void REGAL_CALL missing_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPathParameterfNV", " not available." );
  }

  PFNGLPATHPARAMETERFNVPROC driver_glPathParameterfNV = NULL;

  static void REGAL_CALL loader_glPathParameterfNV(Layer *_layer, GLuint path, GLenum pname, GLfloat value)
  {
    driver_glPathParameterfNV(path, pname, value);
  }

  static void REGAL_CALL missing_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPathParameterfvNV", " not available." );
  }

  PFNGLPATHPARAMETERFVNVPROC driver_glPathParameterfvNV = NULL;

  static void REGAL_CALL loader_glPathParameterfvNV(Layer *_layer, GLuint path, GLenum pname, const GLfloat *value)
  {
    driver_glPathParameterfvNV(path, pname, value);
  }

  static void REGAL_CALL missing_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPathParameteriNV", " not available." );
  }

  PFNGLPATHPARAMETERINVPROC driver_glPathParameteriNV = NULL;

  static void REGAL_CALL loader_glPathParameteriNV(Layer *_layer, GLuint path, GLenum pname, GLint value)
  {
    driver_glPathParameteriNV(path, pname, value);
  }

  static void REGAL_CALL missing_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(value);
    Warning( "glPathParameterivNV", " not available." );
  }

  PFNGLPATHPARAMETERIVNVPROC driver_glPathParameterivNV = NULL;

  static void REGAL_CALL loader_glPathParameterivNV(Layer *_layer, GLuint path, GLenum pname, const GLint *value)
  {
    driver_glPathParameterivNV(path, pname, value);
  }

  static void REGAL_CALL missing_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(units);
    Warning( "glPathStencilDepthOffsetNV", " not available." );
  }

  PFNGLPATHSTENCILDEPTHOFFSETNVPROC driver_glPathStencilDepthOffsetNV = NULL;

  static void REGAL_CALL loader_glPathStencilDepthOffsetNV(Layer *_layer, GLfloat factor, GLfloat units)
  {
    driver_glPathStencilDepthOffsetNV(factor, units);
  }

  static void REGAL_CALL missing_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    UNUSED_PARAMETER(mask);
    Warning( "glPathStencilFuncNV", " not available." );
  }

  PFNGLPATHSTENCILFUNCNVPROC driver_glPathStencilFuncNV = NULL;

  static void REGAL_CALL loader_glPathStencilFuncNV(Layer *_layer, GLenum func, GLint ref, GLuint mask)
  {
    driver_glPathStencilFuncNV(func, ref, mask);
  }

  static void REGAL_CALL missing_glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(pathString);
    Warning( "glPathStringNV", " not available." );
  }

  PFNGLPATHSTRINGNVPROC driver_glPathStringNV = NULL;

  static void REGAL_CALL loader_glPathStringNV(Layer *_layer, GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
  {
    driver_glPathStringNV(path, format, length, pathString);
  }

  static void REGAL_CALL missing_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(commandStart);
    UNUSED_PARAMETER(commandsToDelete);
    UNUSED_PARAMETER(numCommands);
    UNUSED_PARAMETER(commands);
    UNUSED_PARAMETER(numCoords);
    UNUSED_PARAMETER(coordType);
    UNUSED_PARAMETER(coords);
    Warning( "glPathSubCommandsNV", " not available." );
  }

  PFNGLPATHSUBCOMMANDSNVPROC driver_glPathSubCommandsNV = NULL;

  static void REGAL_CALL loader_glPathSubCommandsNV(Layer *_layer, GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    driver_glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  }

  static void REGAL_CALL missing_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(coordStart);
    UNUSED_PARAMETER(numCoords);
    UNUSED_PARAMETER(coordType);
    UNUSED_PARAMETER(coords);
    Warning( "glPathSubCoordsNV", " not available." );
  }

  PFNGLPATHSUBCOORDSNVPROC driver_glPathSubCoordsNV = NULL;

  static void REGAL_CALL loader_glPathSubCoordsNV(Layer *_layer, GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
  {
    driver_glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
  }

  static void REGAL_CALL missing_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
  {
    UNUSED_PARAMETER(texCoordSet);
    UNUSED_PARAMETER(genMode);
    UNUSED_PARAMETER(components);
    UNUSED_PARAMETER(coeffs);
    Warning( "glPathTexGenNV", " not available." );
  }

  PFNGLPATHTEXGENNVPROC driver_glPathTexGenNV = NULL;

  static void REGAL_CALL loader_glPathTexGenNV(Layer *_layer, GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
  {
    driver_glPathTexGenNV(texCoordSet, genMode, components, coeffs);
  }

  static GLboolean REGAL_CALL missing_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(startSegment);
    UNUSED_PARAMETER(numSegments);
    UNUSED_PARAMETER(distance);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(tangentX);
    UNUSED_PARAMETER(tangentY);
    Warning( "glPointAlongPathNV", " not available." );
    return GL_FALSE;
  }

  PFNGLPOINTALONGPATHNVPROC driver_glPointAlongPathNV = NULL;

  static GLboolean REGAL_CALL loader_glPointAlongPathNV(Layer *_layer, GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
  {
    return driver_glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  }

  static void REGAL_CALL missing_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(fillMode);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glStencilFillPathInstancedNV", " not available." );
  }

  PFNGLSTENCILFILLPATHINSTANCEDNVPROC driver_glStencilFillPathInstancedNV = NULL;

  static void REGAL_CALL loader_glStencilFillPathInstancedNV(Layer *_layer, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
  {
    driver_glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  }

  static void REGAL_CALL missing_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(fillMode);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilFillPathNV", " not available." );
  }

  PFNGLSTENCILFILLPATHNVPROC driver_glStencilFillPathNV = NULL;

  static void REGAL_CALL loader_glStencilFillPathNV(Layer *_layer, GLuint path, GLenum fillMode, GLuint mask)
  {
    driver_glStencilFillPathNV(path, fillMode, mask);
  }

  static void REGAL_CALL missing_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(pathNameType);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(pathBase);
    UNUSED_PARAMETER(reference);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glStencilStrokePathInstancedNV", " not available." );
  }

  PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC driver_glStencilStrokePathInstancedNV = NULL;

  static void REGAL_CALL loader_glStencilStrokePathInstancedNV(Layer *_layer, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
  {
    driver_glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  }

  static void REGAL_CALL missing_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
  {
    UNUSED_PARAMETER(path);
    UNUSED_PARAMETER(reference);
    UNUSED_PARAMETER(mask);
    Warning( "glStencilStrokePathNV", " not available." );
  }

  PFNGLSTENCILSTROKEPATHNVPROC driver_glStencilStrokePathNV = NULL;

  static void REGAL_CALL loader_glStencilStrokePathNV(Layer *_layer, GLuint path, GLint reference, GLuint mask)
  {
    driver_glStencilStrokePathNV(path, reference, mask);
  }

  static void REGAL_CALL missing_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
  {
    UNUSED_PARAMETER(resultPath);
    UNUSED_PARAMETER(srcPath);
    UNUSED_PARAMETER(transformType);
    UNUSED_PARAMETER(transformValues);
    Warning( "glTransformPathNV", " not available." );
  }

  PFNGLTRANSFORMPATHNVPROC driver_glTransformPathNV = NULL;

  static void REGAL_CALL loader_glTransformPathNV(Layer *_layer, GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
  {
    driver_glTransformPathNV(resultPath, srcPath, transformType, transformValues);
  }

  static void REGAL_CALL missing_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
  {
    UNUSED_PARAMETER(resultPath);
    UNUSED_PARAMETER(numPaths);
    UNUSED_PARAMETER(paths);
    UNUSED_PARAMETER(weights);
    Warning( "glWeightPathsNV", " not available." );
  }

  PFNGLWEIGHTPATHSNVPROC driver_glWeightPathsNV = NULL;

  static void REGAL_CALL loader_glWeightPathsNV(Layer *_layer, GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
  {
    driver_glWeightPathsNV(resultPath, numPaths, paths, weights);
  }

// GL_NV_pixel_data_range

  static void REGAL_CALL missing_glFlushPixelDataRangeNV(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glFlushPixelDataRangeNV", " not available." );
  }

  PFNGLFLUSHPIXELDATARANGENVPROC driver_glFlushPixelDataRangeNV = NULL;

  static void REGAL_CALL loader_glFlushPixelDataRangeNV(Layer *_layer, GLenum target)
  {
    driver_glFlushPixelDataRangeNV(target);
  }

  static void REGAL_CALL missing_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(pointer);
    Warning( "glPixelDataRangeNV", " not available." );
  }

  PFNGLPIXELDATARANGENVPROC driver_glPixelDataRangeNV = NULL;

  static void REGAL_CALL loader_glPixelDataRangeNV(Layer *_layer, GLenum target, GLsizei size, const GLvoid *pointer)
  {
    driver_glPixelDataRangeNV(target, size, pointer);
  }

// GL_NV_point_sprite

  static void REGAL_CALL missing_glPointParameteriNV(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameteriNV", " not available." );
  }

  PFNGLPOINTPARAMETERINVPROC driver_glPointParameteriNV = NULL;

  static void REGAL_CALL loader_glPointParameteriNV(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glPointParameteriNV(pname, param);
  }

  static void REGAL_CALL missing_glPointParameterivNV(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterivNV", " not available." );
  }

  PFNGLPOINTPARAMETERIVNVPROC driver_glPointParameterivNV = NULL;

  static void REGAL_CALL loader_glPointParameterivNV(Layer *_layer, GLenum pname, const GLint *params)
  {
    driver_glPointParameterivNV(pname, params);
  }

// GL_NV_present_video

  static void REGAL_CALL missing_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoi64vNV", " not available." );
  }

  PFNGLGETVIDEOI64VNVPROC driver_glGetVideoi64vNV = NULL;

  static void REGAL_CALL loader_glGetVideoi64vNV(Layer *_layer, GLuint video_slot, GLenum pname, GLint64EXT *params)
  {
    driver_glGetVideoi64vNV(video_slot, pname, params);
  }

  static void REGAL_CALL missing_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoivNV", " not available." );
  }

  PFNGLGETVIDEOIVNVPROC driver_glGetVideoivNV = NULL;

  static void REGAL_CALL loader_glGetVideoivNV(Layer *_layer, GLuint video_slot, GLenum pname, GLint *params)
  {
    driver_glGetVideoivNV(video_slot, pname, params);
  }

  static void REGAL_CALL missing_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoui64vNV", " not available." );
  }

  PFNGLGETVIDEOUI64VNVPROC driver_glGetVideoui64vNV = NULL;

  static void REGAL_CALL loader_glGetVideoui64vNV(Layer *_layer, GLuint video_slot, GLenum pname, GLuint64EXT *params)
  {
    driver_glGetVideoui64vNV(video_slot, pname, params);
  }

  static void REGAL_CALL missing_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideouivNV", " not available." );
  }

  PFNGLGETVIDEOUIVNVPROC driver_glGetVideouivNV = NULL;

  static void REGAL_CALL loader_glGetVideouivNV(Layer *_layer, GLuint video_slot, GLenum pname, GLuint *params)
  {
    driver_glGetVideouivNV(video_slot, pname, params);
  }

  static void REGAL_CALL missing_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(minPresentTime);
    UNUSED_PARAMETER(beginPresentTimeId);
    UNUSED_PARAMETER(presentDurationId);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(target0);
    UNUSED_PARAMETER(fill0);
    UNUSED_PARAMETER(target1);
    UNUSED_PARAMETER(fill1);
    UNUSED_PARAMETER(target2);
    UNUSED_PARAMETER(fill2);
    UNUSED_PARAMETER(target3);
    UNUSED_PARAMETER(fill3);
    Warning( "glPresentFrameDualFillNV", " not available." );
  }

  PFNGLPRESENTFRAMEDUALFILLNVPROC driver_glPresentFrameDualFillNV = NULL;

  static void REGAL_CALL loader_glPresentFrameDualFillNV(Layer *_layer, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
  {
    driver_glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
  }

  static void REGAL_CALL missing_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
  {
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(minPresentTime);
    UNUSED_PARAMETER(beginPresentTimeId);
    UNUSED_PARAMETER(presentDurationId);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(target0);
    UNUSED_PARAMETER(fill0);
    UNUSED_PARAMETER(key0);
    UNUSED_PARAMETER(target1);
    UNUSED_PARAMETER(fill1);
    UNUSED_PARAMETER(key1);
    Warning( "glPresentFrameKeyedNV", " not available." );
  }

  PFNGLPRESENTFRAMEKEYEDNVPROC driver_glPresentFrameKeyedNV = NULL;

  static void REGAL_CALL loader_glPresentFrameKeyedNV(Layer *_layer, GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
  {
    driver_glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
  }

// GL_NV_primitive_restart

  static void REGAL_CALL missing_glPrimitiveRestartIndexNV(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glPrimitiveRestartIndexNV", " not available." );
  }

  PFNGLPRIMITIVERESTARTINDEXNVPROC driver_glPrimitiveRestartIndexNV = NULL;

  static void REGAL_CALL loader_glPrimitiveRestartIndexNV(Layer *_layer, GLuint index)
  {
    driver_glPrimitiveRestartIndexNV(index);
  }

  static void REGAL_CALL missing_glPrimitiveRestartNV(void)
  {
    Warning( "glPrimitiveRestartNV", " not available." );
  }

  PFNGLPRIMITIVERESTARTNVPROC driver_glPrimitiveRestartNV = NULL;

  static void REGAL_CALL loader_glPrimitiveRestartNV(Layer *_layer)
  {
    driver_glPrimitiveRestartNV();
  }

// GL_NV_read_buffer

  static void REGAL_CALL missing_glReadBufferNV(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glReadBufferNV", " not available." );
  }

  PFNGLREADBUFFERNVPROC driver_glReadBufferNV = NULL;

  static void REGAL_CALL loader_glReadBufferNV(Layer *_layer, GLenum mode)
  {
    driver_glReadBufferNV(mode);
  }

// GL_NV_register_combiners

  static void REGAL_CALL missing_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(input);
    UNUSED_PARAMETER(mapping);
    UNUSED_PARAMETER(componentUsage);
    Warning( "glCombinerInputNV", " not available." );
  }

  PFNGLCOMBINERINPUTNVPROC driver_glCombinerInputNV = NULL;

  static void REGAL_CALL loader_glCombinerInputNV(Layer *_layer, GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
  {
    driver_glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
  }

  static void REGAL_CALL missing_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(abOutput);
    UNUSED_PARAMETER(cdOutput);
    UNUSED_PARAMETER(sumOutput);
    UNUSED_PARAMETER(scale);
    UNUSED_PARAMETER(bias);
    UNUSED_PARAMETER(abDotProduct);
    UNUSED_PARAMETER(cdDotProduct);
    UNUSED_PARAMETER(muxSum);
    Warning( "glCombinerOutputNV", " not available." );
  }

  PFNGLCOMBINEROUTPUTNVPROC driver_glCombinerOutputNV = NULL;

  static void REGAL_CALL loader_glCombinerOutputNV(Layer *_layer, GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
  {
    driver_glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
  }

  static void REGAL_CALL missing_glCombinerParameterfNV(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glCombinerParameterfNV", " not available." );
  }

  PFNGLCOMBINERPARAMETERFNVPROC driver_glCombinerParameterfNV = NULL;

  static void REGAL_CALL loader_glCombinerParameterfNV(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glCombinerParameterfNV(pname, param);
  }

  static void REGAL_CALL missing_glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCombinerParameterfvNV", " not available." );
  }

  PFNGLCOMBINERPARAMETERFVNVPROC driver_glCombinerParameterfvNV = NULL;

  static void REGAL_CALL loader_glCombinerParameterfvNV(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glCombinerParameterfvNV(pname, params);
  }

  static void REGAL_CALL missing_glCombinerParameteriNV(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glCombinerParameteriNV", " not available." );
  }

  PFNGLCOMBINERPARAMETERINVPROC driver_glCombinerParameteriNV = NULL;

  static void REGAL_CALL loader_glCombinerParameteriNV(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glCombinerParameteriNV(pname, param);
  }

  static void REGAL_CALL missing_glCombinerParameterivNV(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCombinerParameterivNV", " not available." );
  }

  PFNGLCOMBINERPARAMETERIVNVPROC driver_glCombinerParameterivNV = NULL;

  static void REGAL_CALL loader_glCombinerParameterivNV(Layer *_layer, GLenum pname, const GLint *params)
  {
    driver_glCombinerParameterivNV(pname, params);
  }

  static void REGAL_CALL missing_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
  {
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(input);
    UNUSED_PARAMETER(mapping);
    UNUSED_PARAMETER(componentUsage);
    Warning( "glFinalCombinerInputNV", " not available." );
  }

  PFNGLFINALCOMBINERINPUTNVPROC driver_glFinalCombinerInputNV = NULL;

  static void REGAL_CALL loader_glFinalCombinerInputNV(Layer *_layer, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
  {
    driver_glFinalCombinerInputNV(variable, input, mapping, componentUsage);
  }

  static void REGAL_CALL missing_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerInputParameterfvNV", " not available." );
  }

  PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC driver_glGetCombinerInputParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetCombinerInputParameterfvNV(Layer *_layer, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
  {
    driver_glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
  }

  static void REGAL_CALL missing_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerInputParameterivNV", " not available." );
  }

  PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC driver_glGetCombinerInputParameterivNV = NULL;

  static void REGAL_CALL loader_glGetCombinerInputParameterivNV(Layer *_layer, GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
  {
    driver_glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
  }

  static void REGAL_CALL missing_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerOutputParameterfvNV", " not available." );
  }

  PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC driver_glGetCombinerOutputParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetCombinerOutputParameterfvNV(Layer *_layer, GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
  {
    driver_glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
  }

  static void REGAL_CALL missing_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(portion);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerOutputParameterivNV", " not available." );
  }

  PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC driver_glGetCombinerOutputParameterivNV = NULL;

  static void REGAL_CALL loader_glGetCombinerOutputParameterivNV(Layer *_layer, GLenum stage, GLenum portion, GLenum pname, GLint *params)
  {
    driver_glGetCombinerOutputParameterivNV(stage, portion, pname, params);
  }

  static void REGAL_CALL missing_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFinalCombinerInputParameterfvNV", " not available." );
  }

  PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC driver_glGetFinalCombinerInputParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetFinalCombinerInputParameterfvNV(Layer *_layer, GLenum variable, GLenum pname, GLfloat *params)
  {
    driver_glGetFinalCombinerInputParameterfvNV(variable, pname, params);
  }

  static void REGAL_CALL missing_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(variable);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFinalCombinerInputParameterivNV", " not available." );
  }

  PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC driver_glGetFinalCombinerInputParameterivNV = NULL;

  static void REGAL_CALL loader_glGetFinalCombinerInputParameterivNV(Layer *_layer, GLenum variable, GLenum pname, GLint *params)
  {
    driver_glGetFinalCombinerInputParameterivNV(variable, pname, params);
  }

// GL_NV_register_combiners2

  static void REGAL_CALL missing_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glCombinerStageParameterfvNV", " not available." );
  }

  PFNGLCOMBINERSTAGEPARAMETERFVNVPROC driver_glCombinerStageParameterfvNV = NULL;

  static void REGAL_CALL loader_glCombinerStageParameterfvNV(Layer *_layer, GLenum stage, GLenum pname, const GLfloat *params)
  {
    driver_glCombinerStageParameterfvNV(stage, pname, params);
  }

  static void REGAL_CALL missing_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(stage);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetCombinerStageParameterfvNV", " not available." );
  }

  PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC driver_glGetCombinerStageParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetCombinerStageParameterfvNV(Layer *_layer, GLenum stage, GLenum pname, GLfloat *params)
  {
    driver_glGetCombinerStageParameterfvNV(stage, pname, params);
  }

// GL_NV_shader_buffer_load

  static void REGAL_CALL missing_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferParameterui64vNV", " not available." );
  }

  PFNGLGETBUFFERPARAMETERUI64VNVPROC driver_glGetBufferParameterui64vNV = NULL;

  static void REGAL_CALL loader_glGetBufferParameterui64vNV(Layer *_layer, GLenum target, GLenum pname, GLuint64EXT *params)
  {
    driver_glGetBufferParameterui64vNV(target, pname, params);
  }

  static void REGAL_CALL missing_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegerui64vNV", " not available." );
  }

  PFNGLGETINTEGERUI64VNVPROC driver_glGetIntegerui64vNV = NULL;

  static void REGAL_CALL loader_glGetIntegerui64vNV(Layer *_layer, GLenum target, GLuint64EXT *data)
  {
    driver_glGetIntegerui64vNV(target, data);
  }

  static void REGAL_CALL missing_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetNamedBufferParameterui64vNV", " not available." );
  }

  PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC driver_glGetNamedBufferParameterui64vNV = NULL;

  static void REGAL_CALL loader_glGetNamedBufferParameterui64vNV(Layer *_layer, GLuint buffer, GLenum pname, GLuint64EXT *params)
  {
    driver_glGetNamedBufferParameterui64vNV(buffer, pname, params);
  }

  static void REGAL_CALL missing_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(params);
    Warning( "glGetUniformui64vNV", " not available." );
  }

  PFNGLGETUNIFORMUI64VNVPROC driver_glGetUniformui64vNV = NULL;

  static void REGAL_CALL loader_glGetUniformui64vNV(Layer *_layer, GLuint program, GLint location, GLuint64EXT *params)
  {
    driver_glGetUniformui64vNV(program, location, params);
  }

  static GLboolean REGAL_CALL missing_glIsBufferResidentNV(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glIsBufferResidentNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISBUFFERRESIDENTNVPROC driver_glIsBufferResidentNV = NULL;

  static GLboolean REGAL_CALL loader_glIsBufferResidentNV(Layer *_layer, GLenum target)
  {
    return driver_glIsBufferResidentNV(target);
  }

  static GLboolean REGAL_CALL missing_glIsNamedBufferResidentNV(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glIsNamedBufferResidentNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISNAMEDBUFFERRESIDENTNVPROC driver_glIsNamedBufferResidentNV = NULL;

  static GLboolean REGAL_CALL loader_glIsNamedBufferResidentNV(Layer *_layer, GLuint buffer)
  {
    return driver_glIsNamedBufferResidentNV(buffer);
  }

  static void REGAL_CALL missing_glMakeBufferNonResidentNV(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glMakeBufferNonResidentNV", " not available." );
  }

  PFNGLMAKEBUFFERNONRESIDENTNVPROC driver_glMakeBufferNonResidentNV = NULL;

  static void REGAL_CALL loader_glMakeBufferNonResidentNV(Layer *_layer, GLenum target)
  {
    driver_glMakeBufferNonResidentNV(target);
  }

  static void REGAL_CALL missing_glMakeBufferResidentNV(GLenum target, GLenum access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(access);
    Warning( "glMakeBufferResidentNV", " not available." );
  }

  PFNGLMAKEBUFFERRESIDENTNVPROC driver_glMakeBufferResidentNV = NULL;

  static void REGAL_CALL loader_glMakeBufferResidentNV(Layer *_layer, GLenum target, GLenum access)
  {
    driver_glMakeBufferResidentNV(target, access);
  }

  static void REGAL_CALL missing_glMakeNamedBufferNonResidentNV(GLuint buffer)
  {
    UNUSED_PARAMETER(buffer);
    Warning( "glMakeNamedBufferNonResidentNV", " not available." );
  }

  PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC driver_glMakeNamedBufferNonResidentNV = NULL;

  static void REGAL_CALL loader_glMakeNamedBufferNonResidentNV(Layer *_layer, GLuint buffer)
  {
    driver_glMakeNamedBufferNonResidentNV(buffer);
  }

  static void REGAL_CALL missing_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
  {
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(access);
    Warning( "glMakeNamedBufferResidentNV", " not available." );
  }

  PFNGLMAKENAMEDBUFFERRESIDENTNVPROC driver_glMakeNamedBufferResidentNV = NULL;

  static void REGAL_CALL loader_glMakeNamedBufferResidentNV(Layer *_layer, GLuint buffer, GLenum access)
  {
    driver_glMakeNamedBufferResidentNV(buffer, access);
  }

  static void REGAL_CALL missing_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glProgramUniformui64NV", " not available." );
  }

  PFNGLPROGRAMUNIFORMUI64NVPROC driver_glProgramUniformui64NV = NULL;

  static void REGAL_CALL loader_glProgramUniformui64NV(Layer *_layer, GLuint program, GLint location, GLuint64EXT v0)
  {
    driver_glProgramUniformui64NV(program, location, v0);
  }

  static void REGAL_CALL missing_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glProgramUniformui64vNV", " not available." );
  }

  PFNGLPROGRAMUNIFORMUI64VNVPROC driver_glProgramUniformui64vNV = NULL;

  static void REGAL_CALL loader_glProgramUniformui64vNV(Layer *_layer, GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glProgramUniformui64vNV(program, location, count, value);
  }

  static void REGAL_CALL missing_glUniformui64NV(GLint location, GLuint64EXT v0)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(v0);
    Warning( "glUniformui64NV", " not available." );
  }

  PFNGLUNIFORMUI64NVPROC driver_glUniformui64NV = NULL;

  static void REGAL_CALL loader_glUniformui64NV(Layer *_layer, GLint location, GLuint64EXT v0)
  {
    driver_glUniformui64NV(location, v0);
  }

  static void REGAL_CALL missing_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
  {
    UNUSED_PARAMETER(location);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(value);
    Warning( "glUniformui64vNV", " not available." );
  }

  PFNGLUNIFORMUI64VNVPROC driver_glUniformui64vNV = NULL;

  static void REGAL_CALL loader_glUniformui64vNV(Layer *_layer, GLint location, GLsizei count, const GLuint64EXT *value)
  {
    driver_glUniformui64vNV(location, count, value);
  }

// GL_NV_texture_barrier

  static void REGAL_CALL missing_glTextureBarrierNV(void)
  {
    Warning( "glTextureBarrierNV", " not available." );
  }

  PFNGLTEXTUREBARRIERNVPROC driver_glTextureBarrierNV = NULL;

  static void REGAL_CALL loader_glTextureBarrierNV(Layer *_layer)
  {
    driver_glTextureBarrierNV();
  }

// GL_NV_texture_multisample

  static void REGAL_CALL missing_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTexImage2DMultisampleCoverageNV", " not available." );
  }

  PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC driver_glTexImage2DMultisampleCoverageNV = NULL;

  static void REGAL_CALL loader_glTexImage2DMultisampleCoverageNV(Layer *_layer, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    driver_glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  }

  static void REGAL_CALL missing_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTexImage3DMultisampleCoverageNV", " not available." );
  }

  PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC driver_glTexImage3DMultisampleCoverageNV = NULL;

  static void REGAL_CALL loader_glTexImage3DMultisampleCoverageNV(Layer *_layer, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    driver_glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  }

  static void REGAL_CALL missing_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTextureImage2DMultisampleCoverageNV", " not available." );
  }

  PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC driver_glTextureImage2DMultisampleCoverageNV = NULL;

  static void REGAL_CALL loader_glTextureImage2DMultisampleCoverageNV(Layer *_layer, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    driver_glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  }

  static void REGAL_CALL missing_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTextureImage2DMultisampleNV", " not available." );
  }

  PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC driver_glTextureImage2DMultisampleNV = NULL;

  static void REGAL_CALL loader_glTextureImage2DMultisampleNV(Layer *_layer, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
  {
    driver_glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
  }

  static void REGAL_CALL missing_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(coverageSamples);
    UNUSED_PARAMETER(colorSamples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTextureImage3DMultisampleCoverageNV", " not available." );
  }

  PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC driver_glTextureImage3DMultisampleCoverageNV = NULL;

  static void REGAL_CALL loader_glTextureImage3DMultisampleCoverageNV(Layer *_layer, GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    driver_glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  }

  static void REGAL_CALL missing_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(samples);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(fixedSampleLocations);
    Warning( "glTextureImage3DMultisampleNV", " not available." );
  }

  PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC driver_glTextureImage3DMultisampleNV = NULL;

  static void REGAL_CALL loader_glTextureImage3DMultisampleNV(Layer *_layer, GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
  {
    driver_glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
  }

// GL_NV_transform_feedback

  static void REGAL_CALL missing_glActiveVaryingNV(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glActiveVaryingNV", " not available." );
  }

  PFNGLACTIVEVARYINGNVPROC driver_glActiveVaryingNV = NULL;

  static void REGAL_CALL loader_glActiveVaryingNV(Layer *_layer, GLuint program, const GLchar *name)
  {
    driver_glActiveVaryingNV(program, name);
  }

  static void REGAL_CALL missing_glBeginTransformFeedbackNV(GLenum primitiveMode)
  {
    UNUSED_PARAMETER(primitiveMode);
    Warning( "glBeginTransformFeedbackNV", " not available." );
  }

  PFNGLBEGINTRANSFORMFEEDBACKNVPROC driver_glBeginTransformFeedbackNV = NULL;

  static void REGAL_CALL loader_glBeginTransformFeedbackNV(Layer *_layer, GLenum primitiveMode)
  {
    driver_glBeginTransformFeedbackNV(primitiveMode);
  }

  static void REGAL_CALL missing_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    Warning( "glBindBufferBaseNV", " not available." );
  }

  PFNGLBINDBUFFERBASENVPROC driver_glBindBufferBaseNV = NULL;

  static void REGAL_CALL loader_glBindBufferBaseNV(Layer *_layer, GLenum target, GLuint index, GLuint buffer)
  {
    driver_glBindBufferBaseNV(target, index, buffer);
  }

  static void REGAL_CALL missing_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    Warning( "glBindBufferOffsetNV", " not available." );
  }

  PFNGLBINDBUFFEROFFSETNVPROC driver_glBindBufferOffsetNV = NULL;

  static void REGAL_CALL loader_glBindBufferOffsetNV(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset)
  {
    driver_glBindBufferOffsetNV(target, index, buffer, offset);
  }

  static void REGAL_CALL missing_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(offset);
    UNUSED_PARAMETER(size);
    Warning( "glBindBufferRangeNV", " not available." );
  }

  PFNGLBINDBUFFERRANGENVPROC driver_glBindBufferRangeNV = NULL;

  static void REGAL_CALL loader_glBindBufferRangeNV(Layer *_layer, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
  {
    driver_glBindBufferRangeNV(target, index, buffer, offset, size);
  }

  static void REGAL_CALL missing_glEndTransformFeedbackNV(void)
  {
    Warning( "glEndTransformFeedbackNV", " not available." );
  }

  PFNGLENDTRANSFORMFEEDBACKNVPROC driver_glEndTransformFeedbackNV = NULL;

  static void REGAL_CALL loader_glEndTransformFeedbackNV(Layer *_layer)
  {
    driver_glEndTransformFeedbackNV();
  }

  static void REGAL_CALL missing_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(name);
    Warning( "glGetActiveVaryingNV", " not available." );
  }

  PFNGLGETACTIVEVARYINGNVPROC driver_glGetActiveVaryingNV = NULL;

  static void REGAL_CALL loader_glGetActiveVaryingNV(Layer *_layer, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
  {
    driver_glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
  }

  static void REGAL_CALL missing_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(location);
    Warning( "glGetTransformFeedbackVaryingNV", " not available." );
  }

  PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC driver_glGetTransformFeedbackVaryingNV = NULL;

  static void REGAL_CALL loader_glGetTransformFeedbackVaryingNV(Layer *_layer, GLuint program, GLuint index, GLint *location)
  {
    driver_glGetTransformFeedbackVaryingNV(program, index, location);
  }

  static GLint REGAL_CALL missing_glGetVaryingLocationNV(GLuint program, const GLchar *name)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(name);
    Warning( "glGetVaryingLocationNV", " not available." );
    return 0;
  }

  PFNGLGETVARYINGLOCATIONNVPROC driver_glGetVaryingLocationNV = NULL;

  static GLint REGAL_CALL loader_glGetVaryingLocationNV(Layer *_layer, GLuint program, const GLchar *name)
  {
    return driver_glGetVaryingLocationNV(program, name);
  }

  static void REGAL_CALL missing_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
  {
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(attribs);
    UNUSED_PARAMETER(bufferMode);
    Warning( "glTransformFeedbackAttribsNV", " not available." );
  }

  PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC driver_glTransformFeedbackAttribsNV = NULL;

  static void REGAL_CALL loader_glTransformFeedbackAttribsNV(Layer *_layer, GLuint count, const GLint *attribs, GLenum bufferMode)
  {
    driver_glTransformFeedbackAttribsNV(count, attribs, bufferMode);
  }

  static void REGAL_CALL missing_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(locations);
    UNUSED_PARAMETER(bufferMode);
    Warning( "glTransformFeedbackVaryingsNV", " not available." );
  }

  PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC driver_glTransformFeedbackVaryingsNV = NULL;

  static void REGAL_CALL loader_glTransformFeedbackVaryingsNV(Layer *_layer, GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
  {
    driver_glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
  }

// GL_NV_transform_feedback2

  static void REGAL_CALL missing_glBindTransformFeedbackNV(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBindTransformFeedbackNV", " not available." );
  }

  PFNGLBINDTRANSFORMFEEDBACKNVPROC driver_glBindTransformFeedbackNV = NULL;

  static void REGAL_CALL loader_glBindTransformFeedbackNV(Layer *_layer, GLenum target, GLuint id)
  {
    driver_glBindTransformFeedbackNV(target, id);
  }

  static void REGAL_CALL missing_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glDeleteTransformFeedbacksNV", " not available." );
  }

  PFNGLDELETETRANSFORMFEEDBACKSNVPROC driver_glDeleteTransformFeedbacksNV = NULL;

  static void REGAL_CALL loader_glDeleteTransformFeedbacksNV(Layer *_layer, GLsizei n, const GLuint *ids)
  {
    driver_glDeleteTransformFeedbacksNV(n, ids);
  }

  static void REGAL_CALL missing_glDrawTransformFeedbackNV(GLenum mode, GLuint name)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(name);
    Warning( "glDrawTransformFeedbackNV", " not available." );
  }

  PFNGLDRAWTRANSFORMFEEDBACKNVPROC driver_glDrawTransformFeedbackNV = NULL;

  static void REGAL_CALL loader_glDrawTransformFeedbackNV(Layer *_layer, GLenum mode, GLuint name)
  {
    driver_glDrawTransformFeedbackNV(mode, name);
  }

  static void REGAL_CALL missing_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ids);
    Warning( "glGenTransformFeedbacksNV", " not available." );
  }

  PFNGLGENTRANSFORMFEEDBACKSNVPROC driver_glGenTransformFeedbacksNV = NULL;

  static void REGAL_CALL loader_glGenTransformFeedbacksNV(Layer *_layer, GLsizei n, GLuint *ids)
  {
    driver_glGenTransformFeedbacksNV(n, ids);
  }

  static GLboolean REGAL_CALL missing_glIsTransformFeedbackNV(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsTransformFeedbackNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISTRANSFORMFEEDBACKNVPROC driver_glIsTransformFeedbackNV = NULL;

  static GLboolean REGAL_CALL loader_glIsTransformFeedbackNV(Layer *_layer, GLuint id)
  {
    return driver_glIsTransformFeedbackNV(id);
  }

  static void REGAL_CALL missing_glPauseTransformFeedbackNV(void)
  {
    Warning( "glPauseTransformFeedbackNV", " not available." );
  }

  PFNGLPAUSETRANSFORMFEEDBACKNVPROC driver_glPauseTransformFeedbackNV = NULL;

  static void REGAL_CALL loader_glPauseTransformFeedbackNV(Layer *_layer)
  {
    driver_glPauseTransformFeedbackNV();
  }

  static void REGAL_CALL missing_glResumeTransformFeedbackNV(void)
  {
    Warning( "glResumeTransformFeedbackNV", " not available." );
  }

  PFNGLRESUMETRANSFORMFEEDBACKNVPROC driver_glResumeTransformFeedbackNV = NULL;

  static void REGAL_CALL loader_glResumeTransformFeedbackNV(Layer *_layer)
  {
    driver_glResumeTransformFeedbackNV();
  }

// GL_NV_vdpau_interop

  static void REGAL_CALL missing_glVDPAUFiniNV(void)
  {
    Warning( "glVDPAUFiniNV", " not available." );
  }

  PFNGLVDPAUFININVPROC driver_glVDPAUFiniNV = NULL;

  static void REGAL_CALL loader_glVDPAUFiniNV(Layer *_layer)
  {
    driver_glVDPAUFiniNV();
  }

  static void REGAL_CALL missing_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(values);
    Warning( "glVDPAUGetSurfaceivNV", " not available." );
  }

  PFNGLVDPAUGETSURFACEIVNVPROC driver_glVDPAUGetSurfaceivNV = NULL;

  static void REGAL_CALL loader_glVDPAUGetSurfaceivNV(Layer *_layer, GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
  {
    driver_glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
  }

  static void REGAL_CALL missing_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
  {
    UNUSED_PARAMETER(vdpDevice);
    UNUSED_PARAMETER(getProcAddress);
    Warning( "glVDPAUInitNV", " not available." );
  }

  PFNGLVDPAUINITNVPROC driver_glVDPAUInitNV = NULL;

  static void REGAL_CALL loader_glVDPAUInitNV(Layer *_layer, const GLvoid *vdpDevice, const GLvoid *getProcAddress)
  {
    driver_glVDPAUInitNV(vdpDevice, getProcAddress);
  }

  static GLboolean REGAL_CALL missing_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
  {
    UNUSED_PARAMETER(surface);
    Warning( "glVDPAUIsSurfaceNV", " not available." );
    return GL_FALSE;
  }

  PFNGLVDPAUISSURFACENVPROC driver_glVDPAUIsSurfaceNV = NULL;

  static GLboolean REGAL_CALL loader_glVDPAUIsSurfaceNV(Layer *_layer, GLvdpauSurfaceNV surface)
  {
    return driver_glVDPAUIsSurfaceNV(surface);
  }

  static void REGAL_CALL missing_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
  {
    UNUSED_PARAMETER(numSurfaces);
    UNUSED_PARAMETER(surfaces);
    Warning( "glVDPAUMapSurfacesNV", " not available." );
  }

  PFNGLVDPAUMAPSURFACESNVPROC driver_glVDPAUMapSurfacesNV = NULL;

  static void REGAL_CALL loader_glVDPAUMapSurfacesNV(Layer *_layer, GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
  {
    driver_glVDPAUMapSurfacesNV(numSurfaces, surfaces);
  }

  static GLvdpauSurfaceNV REGAL_CALL missing_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
  {
    UNUSED_PARAMETER(vdpSurface);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numTextureNames);
    UNUSED_PARAMETER(textureNames);
    Warning( "glVDPAURegisterOutputSurfaceNV", " not available." );
    return 0;
  }

  PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC driver_glVDPAURegisterOutputSurfaceNV = NULL;

  static GLvdpauSurfaceNV REGAL_CALL loader_glVDPAURegisterOutputSurfaceNV(Layer *_layer, const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
  {
    return driver_glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
  }

  static GLvdpauSurfaceNV REGAL_CALL missing_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
  {
    UNUSED_PARAMETER(vdpSurface);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(numTextureNames);
    UNUSED_PARAMETER(textureNames);
    Warning( "glVDPAURegisterVideoSurfaceNV", " not available." );
    return 0;
  }

  PFNGLVDPAUREGISTERVIDEOSURFACENVPROC driver_glVDPAURegisterVideoSurfaceNV = NULL;

  static GLvdpauSurfaceNV REGAL_CALL loader_glVDPAURegisterVideoSurfaceNV(Layer *_layer, const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
  {
    return driver_glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
  }

  static void REGAL_CALL missing_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
  {
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(access);
    Warning( "glVDPAUSurfaceAccessNV", " not available." );
  }

  PFNGLVDPAUSURFACEACCESSNVPROC driver_glVDPAUSurfaceAccessNV = NULL;

  static void REGAL_CALL loader_glVDPAUSurfaceAccessNV(Layer *_layer, GLvdpauSurfaceNV surface, GLenum access)
  {
    driver_glVDPAUSurfaceAccessNV(surface, access);
  }

  static void REGAL_CALL missing_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
  {
    UNUSED_PARAMETER(numSurfaces);
    UNUSED_PARAMETER(surfaces);
    Warning( "glVDPAUUnmapSurfacesNV", " not available." );
  }

  PFNGLVDPAUUNMAPSURFACESNVPROC driver_glVDPAUUnmapSurfacesNV = NULL;

  static void REGAL_CALL loader_glVDPAUUnmapSurfacesNV(Layer *_layer, GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
  {
    driver_glVDPAUUnmapSurfacesNV(numSurfaces, surfaces);
  }

  static void REGAL_CALL missing_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
  {
    UNUSED_PARAMETER(surface);
    Warning( "glVDPAUUnregisterSurfaceNV", " not available." );
  }

  PFNGLVDPAUUNREGISTERSURFACENVPROC driver_glVDPAUUnregisterSurfaceNV = NULL;

  static void REGAL_CALL loader_glVDPAUUnregisterSurfaceNV(Layer *_layer, GLvdpauSurfaceNV surface)
  {
    driver_glVDPAUUnregisterSurfaceNV(surface);
  }

// GL_NV_vertex_array_range

  static void REGAL_CALL missing_glFlushVertexArrayRangeNV(void)
  {
    Warning( "glFlushVertexArrayRangeNV", " not available." );
  }

  PFNGLFLUSHVERTEXARRAYRANGENVPROC driver_glFlushVertexArrayRangeNV = NULL;

  static void REGAL_CALL loader_glFlushVertexArrayRangeNV(Layer *_layer)
  {
    driver_glFlushVertexArrayRangeNV();
  }

  static void REGAL_CALL missing_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexArrayRangeNV", " not available." );
  }

  PFNGLVERTEXARRAYRANGENVPROC driver_glVertexArrayRangeNV = NULL;

  static void REGAL_CALL loader_glVertexArrayRangeNV(Layer *_layer, GLsizei size, const GLvoid *pointer)
  {
    driver_glVertexArrayRangeNV(size, pointer);
  }

// GL_NV_vertex_attrib_integer_64bit

  static void REGAL_CALL missing_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLi64vNV", " not available." );
  }

  PFNGLGETVERTEXATTRIBLI64VNVPROC driver_glGetVertexAttribLi64vNV = NULL;

  static void REGAL_CALL loader_glGetVertexAttribLi64vNV(Layer *_layer, GLuint index, GLenum pname, GLint64EXT *params)
  {
    driver_glGetVertexAttribLi64vNV(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribLui64vNV", " not available." );
  }

  PFNGLGETVERTEXATTRIBLUI64VNVPROC driver_glGetVertexAttribLui64vNV = NULL;

  static void REGAL_CALL loader_glGetVertexAttribLui64vNV(Layer *_layer, GLuint index, GLenum pname, GLuint64EXT *params)
  {
    driver_glGetVertexAttribLui64vNV(index, pname, params);
  }

  static void REGAL_CALL missing_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1i64NV", " not available." );
  }

  PFNGLVERTEXATTRIBL1I64NVPROC driver_glVertexAttribL1i64NV = NULL;

  static void REGAL_CALL loader_glVertexAttribL1i64NV(Layer *_layer, GLuint index, GLint64EXT x)
  {
    driver_glVertexAttribL1i64NV(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1i64vNV", " not available." );
  }

  PFNGLVERTEXATTRIBL1I64VNVPROC driver_glVertexAttribL1i64vNV = NULL;

  static void REGAL_CALL loader_glVertexAttribL1i64vNV(Layer *_layer, GLuint index, const GLint64EXT *v)
  {
    driver_glVertexAttribL1i64vNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttribL1ui64NV", " not available." );
  }

  PFNGLVERTEXATTRIBL1UI64NVPROC driver_glVertexAttribL1ui64NV = NULL;

  static void REGAL_CALL loader_glVertexAttribL1ui64NV(Layer *_layer, GLuint index, GLuint64EXT x)
  {
    driver_glVertexAttribL1ui64NV(index, x);
  }

  static void REGAL_CALL missing_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL1ui64vNV", " not available." );
  }

  PFNGLVERTEXATTRIBL1UI64VNVPROC driver_glVertexAttribL1ui64vNV = NULL;

  static void REGAL_CALL loader_glVertexAttribL1ui64vNV(Layer *_layer, GLuint index, const GLuint64EXT *v)
  {
    driver_glVertexAttribL1ui64vNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribL2i64NV", " not available." );
  }

  PFNGLVERTEXATTRIBL2I64NVPROC driver_glVertexAttribL2i64NV = NULL;

  static void REGAL_CALL loader_glVertexAttribL2i64NV(Layer *_layer, GLuint index, GLint64EXT x, GLint64EXT y)
  {
    driver_glVertexAttribL2i64NV(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL2i64vNV", " not available." );
  }

  PFNGLVERTEXATTRIBL2I64VNVPROC driver_glVertexAttribL2i64vNV = NULL;

  static void REGAL_CALL loader_glVertexAttribL2i64vNV(Layer *_layer, GLuint index, const GLint64EXT *v)
  {
    driver_glVertexAttribL2i64vNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttribL2ui64NV", " not available." );
  }

  PFNGLVERTEXATTRIBL2UI64NVPROC driver_glVertexAttribL2ui64NV = NULL;

  static void REGAL_CALL loader_glVertexAttribL2ui64NV(Layer *_layer, GLuint index, GLuint64EXT x, GLuint64EXT y)
  {
    driver_glVertexAttribL2ui64NV(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL2ui64vNV", " not available." );
  }

  PFNGLVERTEXATTRIBL2UI64VNVPROC driver_glVertexAttribL2ui64vNV = NULL;

  static void REGAL_CALL loader_glVertexAttribL2ui64vNV(Layer *_layer, GLuint index, const GLuint64EXT *v)
  {
    driver_glVertexAttribL2ui64vNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribL3i64NV", " not available." );
  }

  PFNGLVERTEXATTRIBL3I64NVPROC driver_glVertexAttribL3i64NV = NULL;

  static void REGAL_CALL loader_glVertexAttribL3i64NV(Layer *_layer, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
  {
    driver_glVertexAttribL3i64NV(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL3i64vNV", " not available." );
  }

  PFNGLVERTEXATTRIBL3I64VNVPROC driver_glVertexAttribL3i64vNV = NULL;

  static void REGAL_CALL loader_glVertexAttribL3i64vNV(Layer *_layer, GLuint index, const GLint64EXT *v)
  {
    driver_glVertexAttribL3i64vNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttribL3ui64NV", " not available." );
  }

  PFNGLVERTEXATTRIBL3UI64NVPROC driver_glVertexAttribL3ui64NV = NULL;

  static void REGAL_CALL loader_glVertexAttribL3ui64NV(Layer *_layer, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
  {
    driver_glVertexAttribL3ui64NV(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL3ui64vNV", " not available." );
  }

  PFNGLVERTEXATTRIBL3UI64VNVPROC driver_glVertexAttribL3ui64vNV = NULL;

  static void REGAL_CALL loader_glVertexAttribL3ui64vNV(Layer *_layer, GLuint index, const GLuint64EXT *v)
  {
    driver_glVertexAttribL3ui64vNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribL4i64NV", " not available." );
  }

  PFNGLVERTEXATTRIBL4I64NVPROC driver_glVertexAttribL4i64NV = NULL;

  static void REGAL_CALL loader_glVertexAttribL4i64NV(Layer *_layer, GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
  {
    driver_glVertexAttribL4i64NV(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL4i64vNV", " not available." );
  }

  PFNGLVERTEXATTRIBL4I64VNVPROC driver_glVertexAttribL4i64vNV = NULL;

  static void REGAL_CALL loader_glVertexAttribL4i64vNV(Layer *_layer, GLuint index, const GLint64EXT *v)
  {
    driver_glVertexAttribL4i64vNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttribL4ui64NV", " not available." );
  }

  PFNGLVERTEXATTRIBL4UI64NVPROC driver_glVertexAttribL4ui64NV = NULL;

  static void REGAL_CALL loader_glVertexAttribL4ui64NV(Layer *_layer, GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
  {
    driver_glVertexAttribL4ui64NV(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribL4ui64vNV", " not available." );
  }

  PFNGLVERTEXATTRIBL4UI64VNVPROC driver_glVertexAttribL4ui64vNV = NULL;

  static void REGAL_CALL loader_glVertexAttribL4ui64vNV(Layer *_layer, GLuint index, const GLuint64EXT *v)
  {
    driver_glVertexAttribL4ui64vNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexAttribLFormatNV", " not available." );
  }

  PFNGLVERTEXATTRIBLFORMATNVPROC driver_glVertexAttribLFormatNV = NULL;

  static void REGAL_CALL loader_glVertexAttribLFormatNV(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride)
  {
    driver_glVertexAttribLFormatNV(index, size, type, stride);
  }

// GL_NV_vertex_buffer_unified_memory

  static void REGAL_CALL missing_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(address);
    UNUSED_PARAMETER(length);
    Warning( "glBufferAddressRangeNV", " not available." );
  }

  PFNGLBUFFERADDRESSRANGENVPROC driver_glBufferAddressRangeNV = NULL;

  static void REGAL_CALL loader_glBufferAddressRangeNV(Layer *_layer, GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
  {
    driver_glBufferAddressRangeNV(pname, index, address, length);
  }

  static void REGAL_CALL missing_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glColorFormatNV", " not available." );
  }

  PFNGLCOLORFORMATNVPROC driver_glColorFormatNV = NULL;

  static void REGAL_CALL loader_glColorFormatNV(Layer *_layer, GLint size, GLenum type, GLsizei stride)
  {
    driver_glColorFormatNV(size, type, stride);
  }

  static void REGAL_CALL missing_glEdgeFlagFormatNV(GLsizei stride)
  {
    UNUSED_PARAMETER(stride);
    Warning( "glEdgeFlagFormatNV", " not available." );
  }

  PFNGLEDGEFLAGFORMATNVPROC driver_glEdgeFlagFormatNV = NULL;

  static void REGAL_CALL loader_glEdgeFlagFormatNV(Layer *_layer, GLsizei stride)
  {
    driver_glEdgeFlagFormatNV(stride);
  }

  static void REGAL_CALL missing_glFogCoordFormatNV(GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glFogCoordFormatNV", " not available." );
  }

  PFNGLFOGCOORDFORMATNVPROC driver_glFogCoordFormatNV = NULL;

  static void REGAL_CALL loader_glFogCoordFormatNV(Layer *_layer, GLenum type, GLsizei stride)
  {
    driver_glFogCoordFormatNV(type, stride);
  }

  static void REGAL_CALL missing_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(data);
    Warning( "glGetIntegerui64i_vNV", " not available." );
  }

  PFNGLGETINTEGERUI64I_VNVPROC driver_glGetIntegerui64i_vNV = NULL;

  static void REGAL_CALL loader_glGetIntegerui64i_vNV(Layer *_layer, GLenum target, GLuint index, GLuint64EXT *data)
  {
    driver_glGetIntegerui64i_vNV(target, index, data);
  }

  static void REGAL_CALL missing_glIndexFormatNV(GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glIndexFormatNV", " not available." );
  }

  PFNGLINDEXFORMATNVPROC driver_glIndexFormatNV = NULL;

  static void REGAL_CALL loader_glIndexFormatNV(Layer *_layer, GLenum type, GLsizei stride)
  {
    driver_glIndexFormatNV(type, stride);
  }

  static void REGAL_CALL missing_glNormalFormatNV(GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glNormalFormatNV", " not available." );
  }

  PFNGLNORMALFORMATNVPROC driver_glNormalFormatNV = NULL;

  static void REGAL_CALL loader_glNormalFormatNV(Layer *_layer, GLenum type, GLsizei stride)
  {
    driver_glNormalFormatNV(type, stride);
  }

  static void REGAL_CALL missing_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glSecondaryColorFormatNV", " not available." );
  }

  PFNGLSECONDARYCOLORFORMATNVPROC driver_glSecondaryColorFormatNV = NULL;

  static void REGAL_CALL loader_glSecondaryColorFormatNV(Layer *_layer, GLint size, GLenum type, GLsizei stride)
  {
    driver_glSecondaryColorFormatNV(size, type, stride);
  }

  static void REGAL_CALL missing_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glTexCoordFormatNV", " not available." );
  }

  PFNGLTEXCOORDFORMATNVPROC driver_glTexCoordFormatNV = NULL;

  static void REGAL_CALL loader_glTexCoordFormatNV(Layer *_layer, GLint size, GLenum type, GLsizei stride)
  {
    driver_glTexCoordFormatNV(size, type, stride);
  }

  static void REGAL_CALL missing_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(normalized);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexAttribFormatNV", " not available." );
  }

  PFNGLVERTEXATTRIBFORMATNVPROC driver_glVertexAttribFormatNV = NULL;

  static void REGAL_CALL loader_glVertexAttribFormatNV(Layer *_layer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
  {
    driver_glVertexAttribFormatNV(index, size, type, normalized, stride);
  }

  static void REGAL_CALL missing_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexAttribIFormatNV", " not available." );
  }

  PFNGLVERTEXATTRIBIFORMATNVPROC driver_glVertexAttribIFormatNV = NULL;

  static void REGAL_CALL loader_glVertexAttribIFormatNV(Layer *_layer, GLuint index, GLint size, GLenum type, GLsizei stride)
  {
    driver_glVertexAttribIFormatNV(index, size, type, stride);
  }

  static void REGAL_CALL missing_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    Warning( "glVertexFormatNV", " not available." );
  }

  PFNGLVERTEXFORMATNVPROC driver_glVertexFormatNV = NULL;

  static void REGAL_CALL loader_glVertexFormatNV(Layer *_layer, GLint size, GLenum type, GLsizei stride)
  {
    driver_glVertexFormatNV(size, type, stride);
  }

// GL_NV_vertex_program

  static GLboolean REGAL_CALL missing_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    UNUSED_PARAMETER(residences);
    Warning( "glAreProgramsResidentNV", " not available." );
    return GL_FALSE;
  }

  PFNGLAREPROGRAMSRESIDENTNVPROC driver_glAreProgramsResidentNV = NULL;

  static GLboolean REGAL_CALL loader_glAreProgramsResidentNV(Layer *_layer, GLsizei n, const GLuint *programs, GLboolean *residences)
  {
    return driver_glAreProgramsResidentNV(n, programs, residences);
  }

  static void REGAL_CALL missing_glBindProgramNV(GLenum target, GLuint id)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    Warning( "glBindProgramNV", " not available." );
  }

  PFNGLBINDPROGRAMNVPROC driver_glBindProgramNV = NULL;

  static void REGAL_CALL loader_glBindProgramNV(Layer *_layer, GLenum target, GLuint id)
  {
    driver_glBindProgramNV(target, id);
  }

  static void REGAL_CALL missing_glDeleteProgramsNV(GLsizei n, const GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glDeleteProgramsNV", " not available." );
  }

  PFNGLDELETEPROGRAMSNVPROC driver_glDeleteProgramsNV = NULL;

  static void REGAL_CALL loader_glDeleteProgramsNV(Layer *_layer, GLsizei n, const GLuint *programs)
  {
    driver_glDeleteProgramsNV(n, programs);
  }

  static void REGAL_CALL missing_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(params);
    Warning( "glExecuteProgramNV", " not available." );
  }

  PFNGLEXECUTEPROGRAMNVPROC driver_glExecuteProgramNV = NULL;

  static void REGAL_CALL loader_glExecuteProgramNV(Layer *_layer, GLenum target, GLuint id, const GLfloat *params)
  {
    driver_glExecuteProgramNV(target, id, params);
  }

  static void REGAL_CALL missing_glGenProgramsNV(GLsizei n, GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glGenProgramsNV", " not available." );
  }

  PFNGLGENPROGRAMSNVPROC driver_glGenProgramsNV = NULL;

  static void REGAL_CALL loader_glGenProgramsNV(Layer *_layer, GLsizei n, GLuint *programs)
  {
    driver_glGenProgramsNV(n, programs);
  }

  static void REGAL_CALL missing_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramParameterdvNV", " not available." );
  }

  PFNGLGETPROGRAMPARAMETERDVNVPROC driver_glGetProgramParameterdvNV = NULL;

  static void REGAL_CALL loader_glGetProgramParameterdvNV(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLdouble *params)
  {
    driver_glGetProgramParameterdvNV(target, index, pname, params);
  }

  static void REGAL_CALL missing_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramParameterfvNV", " not available." );
  }

  PFNGLGETPROGRAMPARAMETERFVNVPROC driver_glGetProgramParameterfvNV = NULL;

  static void REGAL_CALL loader_glGetProgramParameterfvNV(Layer *_layer, GLenum target, GLuint index, GLenum pname, GLfloat *params)
  {
    driver_glGetProgramParameterfvNV(target, index, pname, params);
  }

  static void REGAL_CALL missing_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(program);
    Warning( "glGetProgramStringNV", " not available." );
  }

  PFNGLGETPROGRAMSTRINGNVPROC driver_glGetProgramStringNV = NULL;

  static void REGAL_CALL loader_glGetProgramStringNV(Layer *_layer, GLuint id, GLenum pname, GLubyte *program)
  {
    driver_glGetProgramStringNV(id, pname, program);
  }

  static void REGAL_CALL missing_glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetProgramivNV", " not available." );
  }

  PFNGLGETPROGRAMIVNVPROC driver_glGetProgramivNV = NULL;

  static void REGAL_CALL loader_glGetProgramivNV(Layer *_layer, GLuint id, GLenum pname, GLint *params)
  {
    driver_glGetProgramivNV(id, pname, params);
  }

  static void REGAL_CALL missing_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(address);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTrackMatrixivNV", " not available." );
  }

  PFNGLGETTRACKMATRIXIVNVPROC driver_glGetTrackMatrixivNV = NULL;

  static void REGAL_CALL loader_glGetTrackMatrixivNV(Layer *_layer, GLenum target, GLuint address, GLenum pname, GLint *params)
  {
    driver_glGetTrackMatrixivNV(target, address, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(pointer);
    Warning( "glGetVertexAttribPointervNV", " not available." );
  }

  PFNGLGETVERTEXATTRIBPOINTERVNVPROC driver_glGetVertexAttribPointervNV = NULL;

  static void REGAL_CALL loader_glGetVertexAttribPointervNV(Layer *_layer, GLuint index, GLenum pname, GLvoid **pointer)
  {
    driver_glGetVertexAttribPointervNV(index, pname, pointer);
  }

  static void REGAL_CALL missing_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribdvNV", " not available." );
  }

  PFNGLGETVERTEXATTRIBDVNVPROC driver_glGetVertexAttribdvNV = NULL;

  static void REGAL_CALL loader_glGetVertexAttribdvNV(Layer *_layer, GLuint index, GLenum pname, GLdouble *params)
  {
    driver_glGetVertexAttribdvNV(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribfvNV", " not available." );
  }

  PFNGLGETVERTEXATTRIBFVNVPROC driver_glGetVertexAttribfvNV = NULL;

  static void REGAL_CALL loader_glGetVertexAttribfvNV(Layer *_layer, GLuint index, GLenum pname, GLfloat *params)
  {
    driver_glGetVertexAttribfvNV(index, pname, params);
  }

  static void REGAL_CALL missing_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVertexAttribivNV", " not available." );
  }

  PFNGLGETVERTEXATTRIBIVNVPROC driver_glGetVertexAttribivNV = NULL;

  static void REGAL_CALL loader_glGetVertexAttribivNV(Layer *_layer, GLuint index, GLenum pname, GLint *params)
  {
    driver_glGetVertexAttribivNV(index, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsProgramNV(GLuint id)
  {
    UNUSED_PARAMETER(id);
    Warning( "glIsProgramNV", " not available." );
    return GL_FALSE;
  }

  PFNGLISPROGRAMNVPROC driver_glIsProgramNV = NULL;

  static GLboolean REGAL_CALL loader_glIsProgramNV(Layer *_layer, GLuint id)
  {
    return driver_glIsProgramNV(id);
  }

  static void REGAL_CALL missing_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(len);
    UNUSED_PARAMETER(program);
    Warning( "glLoadProgramNV", " not available." );
  }

  PFNGLLOADPROGRAMNVPROC driver_glLoadProgramNV = NULL;

  static void REGAL_CALL loader_glLoadProgramNV(Layer *_layer, GLenum target, GLuint id, GLsizei len, const GLubyte *program)
  {
    driver_glLoadProgramNV(target, id, len, program);
  }

  static void REGAL_CALL missing_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramParameter4dNV", " not available." );
  }

  PFNGLPROGRAMPARAMETER4DNVPROC driver_glProgramParameter4dNV = NULL;

  static void REGAL_CALL loader_glProgramParameter4dNV(Layer *_layer, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glProgramParameter4dNV(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glProgramParameter4dvNV", " not available." );
  }

  PFNGLPROGRAMPARAMETER4DVNVPROC driver_glProgramParameter4dvNV = NULL;

  static void REGAL_CALL loader_glProgramParameter4dvNV(Layer *_layer, GLenum target, GLuint index, const GLdouble *v)
  {
    driver_glProgramParameter4dvNV(target, index, v);
  }

  static void REGAL_CALL missing_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glProgramParameter4fNV", " not available." );
  }

  PFNGLPROGRAMPARAMETER4FNVPROC driver_glProgramParameter4fNV = NULL;

  static void REGAL_CALL loader_glProgramParameter4fNV(Layer *_layer, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glProgramParameter4fNV(target, index, x, y, z, w);
  }

  static void REGAL_CALL missing_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glProgramParameter4fvNV", " not available." );
  }

  PFNGLPROGRAMPARAMETER4FVNVPROC driver_glProgramParameter4fvNV = NULL;

  static void REGAL_CALL loader_glProgramParameter4fvNV(Layer *_layer, GLenum target, GLuint index, const GLfloat *v)
  {
    driver_glProgramParameter4fvNV(target, index, v);
  }

  static void REGAL_CALL missing_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glProgramParameters4dvNV", " not available." );
  }

  PFNGLPROGRAMPARAMETERS4DVNVPROC driver_glProgramParameters4dvNV = NULL;

  static void REGAL_CALL loader_glProgramParameters4dvNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLdouble *v)
  {
    driver_glProgramParameters4dvNV(target, index, count, v);
  }

  static void REGAL_CALL missing_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(v);
    Warning( "glProgramParameters4fvNV", " not available." );
  }

  PFNGLPROGRAMPARAMETERS4FVNVPROC driver_glProgramParameters4fvNV = NULL;

  static void REGAL_CALL loader_glProgramParameters4fvNV(Layer *_layer, GLenum target, GLuint index, GLsizei count, const GLfloat *v)
  {
    driver_glProgramParameters4fvNV(target, index, count, v);
  }

  static void REGAL_CALL missing_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(programs);
    Warning( "glRequestResidentProgramsNV", " not available." );
  }

  PFNGLREQUESTRESIDENTPROGRAMSNVPROC driver_glRequestResidentProgramsNV = NULL;

  static void REGAL_CALL loader_glRequestResidentProgramsNV(Layer *_layer, GLsizei n, const GLuint *programs)
  {
    driver_glRequestResidentProgramsNV(n, programs);
  }

  static void REGAL_CALL missing_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(address);
    UNUSED_PARAMETER(matrix);
    UNUSED_PARAMETER(transform);
    Warning( "glTrackMatrixNV", " not available." );
  }

  PFNGLTRACKMATRIXNVPROC driver_glTrackMatrixNV = NULL;

  static void REGAL_CALL loader_glTrackMatrixNV(Layer *_layer, GLenum target, GLuint address, GLenum matrix, GLenum transform)
  {
    driver_glTrackMatrixNV(target, address, matrix, transform);
  }

  static void REGAL_CALL missing_glVertexAttrib1dNV(GLuint index, GLdouble x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1dNV", " not available." );
  }

  PFNGLVERTEXATTRIB1DNVPROC driver_glVertexAttrib1dNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib1dNV(Layer *_layer, GLuint index, GLdouble x)
  {
    driver_glVertexAttrib1dNV(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1dvNV", " not available." );
  }

  PFNGLVERTEXATTRIB1DVNVPROC driver_glVertexAttrib1dvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib1dvNV(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib1dvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib1fNV(GLuint index, GLfloat x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1fNV", " not available." );
  }

  PFNGLVERTEXATTRIB1FNVPROC driver_glVertexAttrib1fNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib1fNV(Layer *_layer, GLuint index, GLfloat x)
  {
    driver_glVertexAttrib1fNV(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1fvNV", " not available." );
  }

  PFNGLVERTEXATTRIB1FVNVPROC driver_glVertexAttrib1fvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib1fvNV(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib1fvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib1sNV(GLuint index, GLshort x)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    Warning( "glVertexAttrib1sNV", " not available." );
  }

  PFNGLVERTEXATTRIB1SNVPROC driver_glVertexAttrib1sNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib1sNV(Layer *_layer, GLuint index, GLshort x)
  {
    driver_glVertexAttrib1sNV(index, x);
  }

  static void REGAL_CALL missing_glVertexAttrib1svNV(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib1svNV", " not available." );
  }

  PFNGLVERTEXATTRIB1SVNVPROC driver_glVertexAttrib1svNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib1svNV(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib1svNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2dNV", " not available." );
  }

  PFNGLVERTEXATTRIB2DNVPROC driver_glVertexAttrib2dNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib2dNV(Layer *_layer, GLuint index, GLdouble x, GLdouble y)
  {
    driver_glVertexAttrib2dNV(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2dvNV", " not available." );
  }

  PFNGLVERTEXATTRIB2DVNVPROC driver_glVertexAttrib2dvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib2dvNV(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib2dvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2fNV", " not available." );
  }

  PFNGLVERTEXATTRIB2FNVPROC driver_glVertexAttrib2fNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib2fNV(Layer *_layer, GLuint index, GLfloat x, GLfloat y)
  {
    driver_glVertexAttrib2fNV(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2fvNV", " not available." );
  }

  PFNGLVERTEXATTRIB2FVNVPROC driver_glVertexAttrib2fvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib2fvNV(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib2fvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glVertexAttrib2sNV", " not available." );
  }

  PFNGLVERTEXATTRIB2SNVPROC driver_glVertexAttrib2sNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib2sNV(Layer *_layer, GLuint index, GLshort x, GLshort y)
  {
    driver_glVertexAttrib2sNV(index, x, y);
  }

  static void REGAL_CALL missing_glVertexAttrib2svNV(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib2svNV", " not available." );
  }

  PFNGLVERTEXATTRIB2SVNVPROC driver_glVertexAttrib2svNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib2svNV(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib2svNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3dNV", " not available." );
  }

  PFNGLVERTEXATTRIB3DNVPROC driver_glVertexAttrib3dNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib3dNV(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z)
  {
    driver_glVertexAttrib3dNV(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3dvNV", " not available." );
  }

  PFNGLVERTEXATTRIB3DVNVPROC driver_glVertexAttrib3dvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib3dvNV(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib3dvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3fNV", " not available." );
  }

  PFNGLVERTEXATTRIB3FNVPROC driver_glVertexAttrib3fNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib3fNV(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glVertexAttrib3fNV(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3fvNV", " not available." );
  }

  PFNGLVERTEXATTRIB3FVNVPROC driver_glVertexAttrib3fvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib3fvNV(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib3fvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glVertexAttrib3sNV", " not available." );
  }

  PFNGLVERTEXATTRIB3SNVPROC driver_glVertexAttrib3sNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib3sNV(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z)
  {
    driver_glVertexAttrib3sNV(index, x, y, z);
  }

  static void REGAL_CALL missing_glVertexAttrib3svNV(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib3svNV", " not available." );
  }

  PFNGLVERTEXATTRIB3SVNVPROC driver_glVertexAttrib3svNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib3svNV(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib3svNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4dNV", " not available." );
  }

  PFNGLVERTEXATTRIB4DNVPROC driver_glVertexAttrib4dNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4dNV(Layer *_layer, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
  {
    driver_glVertexAttrib4dNV(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4dvNV", " not available." );
  }

  PFNGLVERTEXATTRIB4DVNVPROC driver_glVertexAttrib4dvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4dvNV(Layer *_layer, GLuint index, const GLdouble *v)
  {
    driver_glVertexAttrib4dvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4fNV", " not available." );
  }

  PFNGLVERTEXATTRIB4FNVPROC driver_glVertexAttrib4fNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4fNV(Layer *_layer, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glVertexAttrib4fNV(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4fvNV", " not available." );
  }

  PFNGLVERTEXATTRIB4FVNVPROC driver_glVertexAttrib4fvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4fvNV(Layer *_layer, GLuint index, const GLfloat *v)
  {
    driver_glVertexAttrib4fvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4sNV", " not available." );
  }

  PFNGLVERTEXATTRIB4SNVPROC driver_glVertexAttrib4sNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4sNV(Layer *_layer, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
  {
    driver_glVertexAttrib4sNV(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4svNV(GLuint index, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4svNV", " not available." );
  }

  PFNGLVERTEXATTRIB4SVNVPROC driver_glVertexAttrib4svNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4svNV(Layer *_layer, GLuint index, const GLshort *v)
  {
    driver_glVertexAttrib4svNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glVertexAttrib4ubNV", " not available." );
  }

  PFNGLVERTEXATTRIB4UBNVPROC driver_glVertexAttrib4ubNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4ubNV(Layer *_layer, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
  {
    driver_glVertexAttrib4ubNV(index, x, y, z, w);
  }

  static void REGAL_CALL missing_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttrib4ubvNV", " not available." );
  }

  PFNGLVERTEXATTRIB4UBVNVPROC driver_glVertexAttrib4ubvNV = NULL;

  static void REGAL_CALL loader_glVertexAttrib4ubvNV(Layer *_layer, GLuint index, const GLubyte *v)
  {
    driver_glVertexAttrib4ubvNV(index, v);
  }

  static void REGAL_CALL missing_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(fsize);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glVertexAttribPointerNV", " not available." );
  }

  PFNGLVERTEXATTRIBPOINTERNVPROC driver_glVertexAttribPointerNV = NULL;

  static void REGAL_CALL loader_glVertexAttribPointerNV(Layer *_layer, GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glVertexAttribPointerNV(index, fsize, type, stride, pointer);
  }

  static void REGAL_CALL missing_glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs1dvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS1DVNVPROC driver_glVertexAttribs1dvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs1dvNV(Layer *_layer, GLuint index, GLsizei n, const GLdouble *v)
  {
    driver_glVertexAttribs1dvNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs1fvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS1FVNVPROC driver_glVertexAttribs1fvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs1fvNV(Layer *_layer, GLuint index, GLsizei n, const GLfloat *v)
  {
    driver_glVertexAttribs1fvNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs1svNV", " not available." );
  }

  PFNGLVERTEXATTRIBS1SVNVPROC driver_glVertexAttribs1svNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs1svNV(Layer *_layer, GLuint index, GLsizei n, const GLshort *v)
  {
    driver_glVertexAttribs1svNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs2dvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS2DVNVPROC driver_glVertexAttribs2dvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs2dvNV(Layer *_layer, GLuint index, GLsizei n, const GLdouble *v)
  {
    driver_glVertexAttribs2dvNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs2fvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS2FVNVPROC driver_glVertexAttribs2fvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs2fvNV(Layer *_layer, GLuint index, GLsizei n, const GLfloat *v)
  {
    driver_glVertexAttribs2fvNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs2svNV", " not available." );
  }

  PFNGLVERTEXATTRIBS2SVNVPROC driver_glVertexAttribs2svNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs2svNV(Layer *_layer, GLuint index, GLsizei n, const GLshort *v)
  {
    driver_glVertexAttribs2svNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs3dvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS3DVNVPROC driver_glVertexAttribs3dvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs3dvNV(Layer *_layer, GLuint index, GLsizei n, const GLdouble *v)
  {
    driver_glVertexAttribs3dvNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs3fvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS3FVNVPROC driver_glVertexAttribs3fvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs3fvNV(Layer *_layer, GLuint index, GLsizei n, const GLfloat *v)
  {
    driver_glVertexAttribs3fvNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs3svNV", " not available." );
  }

  PFNGLVERTEXATTRIBS3SVNVPROC driver_glVertexAttribs3svNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs3svNV(Layer *_layer, GLuint index, GLsizei n, const GLshort *v)
  {
    driver_glVertexAttribs3svNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4dvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS4DVNVPROC driver_glVertexAttribs4dvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs4dvNV(Layer *_layer, GLuint index, GLsizei n, const GLdouble *v)
  {
    driver_glVertexAttribs4dvNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4fvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS4FVNVPROC driver_glVertexAttribs4fvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs4fvNV(Layer *_layer, GLuint index, GLsizei n, const GLfloat *v)
  {
    driver_glVertexAttribs4fvNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4svNV", " not available." );
  }

  PFNGLVERTEXATTRIBS4SVNVPROC driver_glVertexAttribs4svNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs4svNV(Layer *_layer, GLuint index, GLsizei n, const GLshort *v)
  {
    driver_glVertexAttribs4svNV(index, n, v);
  }

  static void REGAL_CALL missing_glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
  {
    UNUSED_PARAMETER(index);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glVertexAttribs4ubvNV", " not available." );
  }

  PFNGLVERTEXATTRIBS4UBVNVPROC driver_glVertexAttribs4ubvNV = NULL;

  static void REGAL_CALL loader_glVertexAttribs4ubvNV(Layer *_layer, GLuint index, GLsizei n, const GLubyte *v)
  {
    driver_glVertexAttribs4ubvNV(index, n, v);
  }

// GL_NV_video_capture

  static void REGAL_CALL missing_glBeginVideoCaptureNV(GLuint video_capture_slot)
  {
    UNUSED_PARAMETER(video_capture_slot);
    Warning( "glBeginVideoCaptureNV", " not available." );
  }

  PFNGLBEGINVIDEOCAPTURENVPROC driver_glBeginVideoCaptureNV = NULL;

  static void REGAL_CALL loader_glBeginVideoCaptureNV(Layer *_layer, GLuint video_capture_slot)
  {
    driver_glBeginVideoCaptureNV(video_capture_slot);
  }

  static void REGAL_CALL missing_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(frame_region);
    UNUSED_PARAMETER(offset);
    Warning( "glBindVideoCaptureStreamBufferNV", " not available." );
  }

  PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC driver_glBindVideoCaptureStreamBufferNV = NULL;

  static void REGAL_CALL loader_glBindVideoCaptureStreamBufferNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
  {
    driver_glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
  }

  static void REGAL_CALL missing_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(frame_region);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(texture);
    Warning( "glBindVideoCaptureStreamTextureNV", " not available." );
  }

  PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC driver_glBindVideoCaptureStreamTextureNV = NULL;

  static void REGAL_CALL loader_glBindVideoCaptureStreamTextureNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
  {
    driver_glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
  }

  static void REGAL_CALL missing_glEndVideoCaptureNV(GLuint video_capture_slot)
  {
    UNUSED_PARAMETER(video_capture_slot);
    Warning( "glEndVideoCaptureNV", " not available." );
  }

  PFNGLENDVIDEOCAPTURENVPROC driver_glEndVideoCaptureNV = NULL;

  static void REGAL_CALL loader_glEndVideoCaptureNV(Layer *_layer, GLuint video_capture_slot)
  {
    driver_glEndVideoCaptureNV(video_capture_slot);
  }

  static void REGAL_CALL missing_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoCaptureStreamdvNV", " not available." );
  }

  PFNGLGETVIDEOCAPTURESTREAMDVNVPROC driver_glGetVideoCaptureStreamdvNV = NULL;

  static void REGAL_CALL loader_glGetVideoCaptureStreamdvNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
  {
    driver_glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
  }

  static void REGAL_CALL missing_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoCaptureStreamfvNV", " not available." );
  }

  PFNGLGETVIDEOCAPTURESTREAMFVNVPROC driver_glGetVideoCaptureStreamfvNV = NULL;

  static void REGAL_CALL loader_glGetVideoCaptureStreamfvNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
  {
    driver_glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
  }

  static void REGAL_CALL missing_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoCaptureStreamivNV", " not available." );
  }

  PFNGLGETVIDEOCAPTURESTREAMIVNVPROC driver_glGetVideoCaptureStreamivNV = NULL;

  static void REGAL_CALL loader_glGetVideoCaptureStreamivNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
  {
    driver_glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
  }

  static void REGAL_CALL missing_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetVideoCaptureivNV", " not available." );
  }

  PFNGLGETVIDEOCAPTUREIVNVPROC driver_glGetVideoCaptureivNV = NULL;

  static void REGAL_CALL loader_glGetVideoCaptureivNV(Layer *_layer, GLuint video_capture_slot, GLenum pname, GLint *params)
  {
    driver_glGetVideoCaptureivNV(video_capture_slot, pname, params);
  }

  static GLenum REGAL_CALL missing_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(sequence_num);
    UNUSED_PARAMETER(capture_time);
    Warning( "glVideoCaptureNV", " not available." );
    return 0;
  }

  PFNGLVIDEOCAPTURENVPROC driver_glVideoCaptureNV = NULL;

  static GLenum REGAL_CALL loader_glVideoCaptureNV(Layer *_layer, GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
  {
    return driver_glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
  }

  static void REGAL_CALL missing_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glVideoCaptureStreamParameterdvNV", " not available." );
  }

  PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC driver_glVideoCaptureStreamParameterdvNV = NULL;

  static void REGAL_CALL loader_glVideoCaptureStreamParameterdvNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
  {
    driver_glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
  }

  static void REGAL_CALL missing_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glVideoCaptureStreamParameterfvNV", " not available." );
  }

  PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC driver_glVideoCaptureStreamParameterfvNV = NULL;

  static void REGAL_CALL loader_glVideoCaptureStreamParameterfvNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
  {
    driver_glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
  }

  static void REGAL_CALL missing_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glVideoCaptureStreamParameterivNV", " not available." );
  }

  PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC driver_glVideoCaptureStreamParameterivNV = NULL;

  static void REGAL_CALL loader_glVideoCaptureStreamParameterivNV(Layer *_layer, GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
  {
    driver_glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
  }

// GL_OES_blend_equation_separate

  static void REGAL_CALL missing_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
  {
    UNUSED_PARAMETER(modeRGB);
    UNUSED_PARAMETER(modeAlpha);
    Warning( "glBlendEquationSeparateOES", " not available." );
  }

  PFNGLBLENDEQUATIONSEPARATEOESPROC driver_glBlendEquationSeparateOES = NULL;

  static void REGAL_CALL loader_glBlendEquationSeparateOES(Layer *_layer, GLenum modeRGB, GLenum modeAlpha)
  {
    driver_glBlendEquationSeparateOES(modeRGB, modeAlpha);
  }

// GL_OES_blend_func_separate

  static void REGAL_CALL missing_glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    UNUSED_PARAMETER(sfactorRGB);
    UNUSED_PARAMETER(dfactorRGB);
    UNUSED_PARAMETER(sfactorAlpha);
    UNUSED_PARAMETER(dfactorAlpha);
    Warning( "glBlendFuncSeparateOES", " not available." );
  }

  PFNGLBLENDFUNCSEPARATEOESPROC driver_glBlendFuncSeparateOES = NULL;

  static void REGAL_CALL loader_glBlendFuncSeparateOES(Layer *_layer, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
  {
    driver_glBlendFuncSeparateOES(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }

// GL_OES_blend_subtract

  static void REGAL_CALL missing_glBlendEquationOES(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glBlendEquationOES", " not available." );
  }

  PFNGLBLENDEQUATIONOESPROC driver_glBlendEquationOES = NULL;

  static void REGAL_CALL loader_glBlendEquationOES(Layer *_layer, GLenum mode)
  {
    driver_glBlendEquationOES(mode);
  }

// GL_OES_framebuffer_object

  static void REGAL_CALL missing_glBindFramebufferOES(GLenum target, GLuint framebuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(framebuffer);
    Warning( "glBindFramebufferOES", " not available." );
  }

  PFNGLBINDFRAMEBUFFEROESPROC driver_glBindFramebufferOES = NULL;

  static void REGAL_CALL loader_glBindFramebufferOES(Layer *_layer, GLenum target, GLuint framebuffer)
  {
    driver_glBindFramebufferOES(target, framebuffer);
  }

  static void REGAL_CALL missing_glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glBindRenderbufferOES", " not available." );
  }

  PFNGLBINDRENDERBUFFEROESPROC driver_glBindRenderbufferOES = NULL;

  static void REGAL_CALL loader_glBindRenderbufferOES(Layer *_layer, GLenum target, GLuint renderbuffer)
  {
    driver_glBindRenderbufferOES(target, renderbuffer);
  }

  static GLenum REGAL_CALL missing_glCheckFramebufferStatusOES(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glCheckFramebufferStatusOES", " not available." );
    return 0;
  }

  PFNGLCHECKFRAMEBUFFERSTATUSOESPROC driver_glCheckFramebufferStatusOES = NULL;

  static GLenum REGAL_CALL loader_glCheckFramebufferStatusOES(Layer *_layer, GLenum target)
  {
    return driver_glCheckFramebufferStatusOES(target);
  }

  static void REGAL_CALL missing_glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glDeleteFramebuffersOES", " not available." );
  }

  PFNGLDELETEFRAMEBUFFERSOESPROC driver_glDeleteFramebuffersOES = NULL;

  static void REGAL_CALL loader_glDeleteFramebuffersOES(Layer *_layer, GLsizei n, const GLuint *framebuffers)
  {
    driver_glDeleteFramebuffersOES(n, framebuffers);
  }

  static void REGAL_CALL missing_glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glDeleteRenderbuffersOES", " not available." );
  }

  PFNGLDELETERENDERBUFFERSOESPROC driver_glDeleteRenderbuffersOES = NULL;

  static void REGAL_CALL loader_glDeleteRenderbuffersOES(Layer *_layer, GLsizei n, const GLuint *renderbuffers)
  {
    driver_glDeleteRenderbuffersOES(n, renderbuffers);
  }

  static void REGAL_CALL missing_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(renderbuffertarget);
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glFramebufferRenderbufferOES", " not available." );
  }

  PFNGLFRAMEBUFFERRENDERBUFFEROESPROC driver_glFramebufferRenderbufferOES = NULL;

  static void REGAL_CALL loader_glFramebufferRenderbufferOES(Layer *_layer, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
  {
    driver_glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);
  }

  static void REGAL_CALL missing_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    Warning( "glFramebufferTexture2DOES", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE2DOESPROC driver_glFramebufferTexture2DOES = NULL;

  static void REGAL_CALL loader_glFramebufferTexture2DOES(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
  {
    driver_glFramebufferTexture2DOES(target, attachment, textarget, texture, level);
  }

  static void REGAL_CALL missing_glGenFramebuffersOES(GLsizei n, GLuint *framebuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(framebuffers);
    Warning( "glGenFramebuffersOES", " not available." );
  }

  PFNGLGENFRAMEBUFFERSOESPROC driver_glGenFramebuffersOES = NULL;

  static void REGAL_CALL loader_glGenFramebuffersOES(Layer *_layer, GLsizei n, GLuint *framebuffers)
  {
    driver_glGenFramebuffersOES(n, framebuffers);
  }

  static void REGAL_CALL missing_glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(renderbuffers);
    Warning( "glGenRenderbuffersOES", " not available." );
  }

  PFNGLGENRENDERBUFFERSOESPROC driver_glGenRenderbuffersOES = NULL;

  static void REGAL_CALL loader_glGenRenderbuffersOES(Layer *_layer, GLsizei n, GLuint *renderbuffers)
  {
    driver_glGenRenderbuffersOES(n, renderbuffers);
  }

  static void REGAL_CALL missing_glGenerateMipmapOES(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glGenerateMipmapOES", " not available." );
  }

  PFNGLGENERATEMIPMAPOESPROC driver_glGenerateMipmapOES = NULL;

  static void REGAL_CALL loader_glGenerateMipmapOES(Layer *_layer, GLenum target)
  {
    driver_glGenerateMipmapOES(target);
  }

  static void REGAL_CALL missing_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFramebufferAttachmentParameterivOES", " not available." );
  }

  PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC driver_glGetFramebufferAttachmentParameterivOES = NULL;

  static void REGAL_CALL loader_glGetFramebufferAttachmentParameterivOES(Layer *_layer, GLenum target, GLenum attachment, GLenum pname, GLint *params)
  {
    driver_glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params);
  }

  static void REGAL_CALL missing_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetRenderbufferParameterivOES", " not available." );
  }

  PFNGLGETRENDERBUFFERPARAMETERIVOESPROC driver_glGetRenderbufferParameterivOES = NULL;

  static void REGAL_CALL loader_glGetRenderbufferParameterivOES(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetRenderbufferParameterivOES(target, pname, params);
  }

  static GLboolean REGAL_CALL missing_glIsFramebufferOES(GLuint framebuffer)
  {
    UNUSED_PARAMETER(framebuffer);
    Warning( "glIsFramebufferOES", " not available." );
    return GL_FALSE;
  }

  PFNGLISFRAMEBUFFEROESPROC driver_glIsFramebufferOES = NULL;

  static GLboolean REGAL_CALL loader_glIsFramebufferOES(Layer *_layer, GLuint framebuffer)
  {
    return driver_glIsFramebufferOES(framebuffer);
  }

  static GLboolean REGAL_CALL missing_glIsRenderbufferOES(GLuint renderbuffer)
  {
    UNUSED_PARAMETER(renderbuffer);
    Warning( "glIsRenderbufferOES", " not available." );
    return GL_FALSE;
  }

  PFNGLISRENDERBUFFEROESPROC driver_glIsRenderbufferOES = NULL;

  static GLboolean REGAL_CALL loader_glIsRenderbufferOES(Layer *_layer, GLuint renderbuffer)
  {
    return driver_glIsRenderbufferOES(renderbuffer);
  }

  static void REGAL_CALL missing_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glRenderbufferStorageOES", " not available." );
  }

  PFNGLRENDERBUFFERSTORAGEOESPROC driver_glRenderbufferStorageOES = NULL;

  static void REGAL_CALL loader_glRenderbufferStorageOES(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
  {
    driver_glRenderbufferStorageOES(target, internalformat, width, height);
  }

// GL_OES_get_program_binary

  static void REGAL_CALL missing_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(binaryFormat);
    UNUSED_PARAMETER(binary);
    Warning( "glGetProgramBinaryOES", " not available." );
  }

  PFNGLGETPROGRAMBINARYOESPROC driver_glGetProgramBinaryOES = NULL;

  static void REGAL_CALL loader_glGetProgramBinaryOES(Layer *_layer, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
  {
    driver_glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);
  }

  static void REGAL_CALL missing_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(binaryFormat);
    UNUSED_PARAMETER(binary);
    UNUSED_PARAMETER(length);
    Warning( "glProgramBinaryOES", " not available." );
  }

  PFNGLPROGRAMBINARYOESPROC driver_glProgramBinaryOES = NULL;

  static void REGAL_CALL loader_glProgramBinaryOES(Layer *_layer, GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
  {
    driver_glProgramBinaryOES(program, binaryFormat, binary, length);
  }

// GL_OES_mapbuffer

  static void REGAL_CALL missing_glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetBufferPointervOES", " not available." );
  }

  PFNGLGETBUFFERPOINTERVOESPROC driver_glGetBufferPointervOES = NULL;

  static void REGAL_CALL loader_glGetBufferPointervOES(Layer *_layer, GLenum target, GLenum pname, GLvoid **params)
  {
    driver_glGetBufferPointervOES(target, pname, params);
  }

  static GLvoid *REGAL_CALL missing_glMapBufferOES(GLenum target, GLenum access)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(access);
    Warning( "glMapBufferOES", " not available." );
    return NULL;
  }

  PFNGLMAPBUFFEROESPROC driver_glMapBufferOES = NULL;

  static GLvoid *REGAL_CALL loader_glMapBufferOES(Layer *_layer, GLenum target, GLenum access)
  {
    return driver_glMapBufferOES(target, access);
  }

  static GLboolean REGAL_CALL missing_glUnmapBufferOES(GLenum target)
  {
    UNUSED_PARAMETER(target);
    Warning( "glUnmapBufferOES", " not available." );
    return GL_FALSE;
  }

  PFNGLUNMAPBUFFEROESPROC driver_glUnmapBufferOES = NULL;

  static GLboolean REGAL_CALL loader_glUnmapBufferOES(Layer *_layer, GLenum target)
  {
    return driver_glUnmapBufferOES(target);
  }

// GL_OES_matrix_palette

  static void REGAL_CALL missing_glCurrentPaletteMatrixOES(GLuint index)
  {
    UNUSED_PARAMETER(index);
    Warning( "glCurrentPaletteMatrixOES", " not available." );
  }

  PFNGLCURRENTPALETTEMATRIXOESPROC driver_glCurrentPaletteMatrixOES = NULL;

  static void REGAL_CALL loader_glCurrentPaletteMatrixOES(Layer *_layer, GLuint index)
  {
    driver_glCurrentPaletteMatrixOES(index);
  }

  static void REGAL_CALL missing_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glMatrixIndexPointerOES", " not available." );
  }

  PFNGLMATRIXINDEXPOINTEROESPROC driver_glMatrixIndexPointerOES = NULL;

  static void REGAL_CALL loader_glMatrixIndexPointerOES(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
  {
    driver_glMatrixIndexPointerOES(size, type, stride, pointer);
  }

  static void REGAL_CALL missing_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glWeightPointerOES", " not available." );
  }

  PFNGLWEIGHTPOINTEROESPROC driver_glWeightPointerOES = NULL;

  static void REGAL_CALL loader_glWeightPointerOES(Layer *_layer, GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
  {
    driver_glWeightPointerOES(size, type, stride, pointer);
  }

// GL_OES_single_precision

  static void REGAL_CALL missing_glClearDepthfOES(GLclampd depth)
  {
    UNUSED_PARAMETER(depth);
    Warning( "glClearDepthfOES", " not available." );
  }

  PFNGLCLEARDEPTHFOESPROC driver_glClearDepthfOES = NULL;

  static void REGAL_CALL loader_glClearDepthfOES(Layer *_layer, GLclampd depth)
  {
    driver_glClearDepthfOES(depth);
  }

  static void REGAL_CALL missing_glClipPlanefOES(GLenum plane, const GLfloat *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glClipPlanefOES", " not available." );
  }

  PFNGLCLIPPLANEFOESPROC driver_glClipPlanefOES = NULL;

  static void REGAL_CALL loader_glClipPlanefOES(Layer *_layer, GLenum plane, const GLfloat *equation)
  {
    driver_glClipPlanefOES(plane, equation);
  }

  static void REGAL_CALL missing_glDepthRangefOES(GLclampf n, GLclampf f)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glDepthRangefOES", " not available." );
  }

  PFNGLDEPTHRANGEFOESPROC driver_glDepthRangefOES = NULL;

  static void REGAL_CALL loader_glDepthRangefOES(Layer *_layer, GLclampf n, GLclampf f)
  {
    driver_glDepthRangefOES(n, f);
  }

  static void REGAL_CALL missing_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
  {
    UNUSED_PARAMETER(l);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glFrustumfOES", " not available." );
  }

  PFNGLFRUSTUMFOESPROC driver_glFrustumfOES = NULL;

  static void REGAL_CALL loader_glFrustumfOES(Layer *_layer, GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
  {
    driver_glFrustumfOES(l, r, b, t, n, f);
  }

  static void REGAL_CALL missing_glGetClipPlanefOES(GLenum plane, GLfloat *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glGetClipPlanefOES", " not available." );
  }

  PFNGLGETCLIPPLANEFOESPROC driver_glGetClipPlanefOES = NULL;

  static void REGAL_CALL loader_glGetClipPlanefOES(Layer *_layer, GLenum plane, GLfloat *equation)
  {
    driver_glGetClipPlanefOES(plane, equation);
  }

  static void REGAL_CALL missing_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
  {
    UNUSED_PARAMETER(l);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(f);
    Warning( "glOrthofOES", " not available." );
  }

  PFNGLORTHOFOESPROC driver_glOrthofOES = NULL;

  static void REGAL_CALL loader_glOrthofOES(Layer *_layer, GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
  {
    driver_glOrthofOES(l, r, b, t, n, f);
  }

// GL_OES_texture_3D

  static void REGAL_CALL missing_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexImage3DOES", " not available." );
  }

  PFNGLCOMPRESSEDTEXIMAGE3DOESPROC driver_glCompressedTexImage3DOES = NULL;

  static void REGAL_CALL loader_glCompressedTexImage3DOES(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data);
  }

  static void REGAL_CALL missing_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(imageSize);
    UNUSED_PARAMETER(data);
    Warning( "glCompressedTexSubImage3DOES", " not available." );
  }

  PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC driver_glCompressedTexSubImage3DOES = NULL;

  static void REGAL_CALL loader_glCompressedTexSubImage3DOES(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
  {
    driver_glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }

  static void REGAL_CALL missing_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glCopyTexSubImage3DOES", " not available." );
  }

  PFNGLCOPYTEXSUBIMAGE3DOESPROC driver_glCopyTexSubImage3DOES = NULL;

  static void REGAL_CALL loader_glCopyTexSubImage3DOES(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }

  static void REGAL_CALL missing_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(attachment);
    UNUSED_PARAMETER(textarget);
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(zoffset);
    Warning( "glFramebufferTexture3DOES", " not available." );
  }

  PFNGLFRAMEBUFFERTEXTURE3DOESPROC driver_glFramebufferTexture3DOES = NULL;

  static void REGAL_CALL loader_glFramebufferTexture3DOES(Layer *_layer, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
  {
    driver_glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);
  }

  static void REGAL_CALL missing_glTexImage3DOES(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage3DOES", " not available." );
  }

  PFNGLTEXIMAGE3DOESPROC driver_glTexImage3DOES = NULL;

  static void REGAL_CALL loader_glTexImage3DOES(Layer *_layer, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexImage3DOES(target, level, internalFormat, width, height, depth, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage3DOES", " not available." );
  }

  PFNGLTEXSUBIMAGE3DOESPROC driver_glTexSubImage3DOES = NULL;

  static void REGAL_CALL loader_glTexSubImage3DOES(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }

// GL_OES_texture_cube_map

  static void REGAL_CALL missing_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGenfvOES", " not available." );
  }

  PFNGLGETTEXGENFVOESPROC driver_glGetTexGenfvOES = NULL;

  static void REGAL_CALL loader_glGetTexGenfvOES(Layer *_layer, GLenum coord, GLenum pname, GLfloat *params)
  {
    driver_glGetTexGenfvOES(coord, pname, params);
  }

  static void REGAL_CALL missing_glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGenivOES", " not available." );
  }

  PFNGLGETTEXGENIVOESPROC driver_glGetTexGenivOES = NULL;

  static void REGAL_CALL loader_glGetTexGenivOES(Layer *_layer, GLenum coord, GLenum pname, GLint *params)
  {
    driver_glGetTexGenivOES(coord, pname, params);
  }

  static void REGAL_CALL missing_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexGenxvOES", " not available." );
  }

  PFNGLGETTEXGENXVOESPROC driver_glGetTexGenxvOES = NULL;

  static void REGAL_CALL loader_glGetTexGenxvOES(Layer *_layer, GLenum coord, GLenum pname, GLfixed *params)
  {
    driver_glGetTexGenxvOES(coord, pname, params);
  }

  static void REGAL_CALL missing_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGenfOES", " not available." );
  }

  PFNGLTEXGENFOESPROC driver_glTexGenfOES = NULL;

  static void REGAL_CALL loader_glTexGenfOES(Layer *_layer, GLenum coord, GLenum pname, GLfloat param)
  {
    driver_glTexGenfOES(coord, pname, param);
  }

  static void REGAL_CALL missing_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGenfvOES", " not available." );
  }

  PFNGLTEXGENFVOESPROC driver_glTexGenfvOES = NULL;

  static void REGAL_CALL loader_glTexGenfvOES(Layer *_layer, GLenum coord, GLenum pname, const GLfloat *params)
  {
    driver_glTexGenfvOES(coord, pname, params);
  }

  static void REGAL_CALL missing_glTexGeniOES(GLenum coord, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGeniOES", " not available." );
  }

  PFNGLTEXGENIOESPROC driver_glTexGeniOES = NULL;

  static void REGAL_CALL loader_glTexGeniOES(Layer *_layer, GLenum coord, GLenum pname, GLint param)
  {
    driver_glTexGeniOES(coord, pname, param);
  }

  static void REGAL_CALL missing_glTexGenivOES(GLenum coord, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGenivOES", " not available." );
  }

  PFNGLTEXGENIVOESPROC driver_glTexGenivOES = NULL;

  static void REGAL_CALL loader_glTexGenivOES(Layer *_layer, GLenum coord, GLenum pname, const GLint *params)
  {
    driver_glTexGenivOES(coord, pname, params);
  }

  static void REGAL_CALL missing_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexGenxOES", " not available." );
  }

  PFNGLTEXGENXOESPROC driver_glTexGenxOES = NULL;

  static void REGAL_CALL loader_glTexGenxOES(Layer *_layer, GLenum coord, GLenum pname, GLfixed param)
  {
    driver_glTexGenxOES(coord, pname, param);
  }

  static void REGAL_CALL missing_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(coord);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexGenxvOES", " not available." );
  }

  PFNGLTEXGENXVOESPROC driver_glTexGenxvOES = NULL;

  static void REGAL_CALL loader_glTexGenxvOES(Layer *_layer, GLenum coord, GLenum pname, const GLfixed *params)
  {
    driver_glTexGenxvOES(coord, pname, params);
  }

// GL_OES_vertex_array_object

  static void REGAL_CALL missing_glBindVertexArrayOES(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glBindVertexArrayOES", " not available." );
  }

  PFNGLBINDVERTEXARRAYOESPROC driver_glBindVertexArrayOES = NULL;

  static void REGAL_CALL loader_glBindVertexArrayOES(Layer *_layer, GLuint array)
  {
    driver_glBindVertexArrayOES(array);
  }

  static void REGAL_CALL missing_glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glDeleteVertexArraysOES", " not available." );
  }

  PFNGLDELETEVERTEXARRAYSOESPROC driver_glDeleteVertexArraysOES = NULL;

  static void REGAL_CALL loader_glDeleteVertexArraysOES(Layer *_layer, GLsizei n, const GLuint *arrays)
  {
    driver_glDeleteVertexArraysOES(n, arrays);
  }

  static void REGAL_CALL missing_glGenVertexArraysOES(GLsizei n, GLuint *arrays)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(arrays);
    Warning( "glGenVertexArraysOES", " not available." );
  }

  PFNGLGENVERTEXARRAYSOESPROC driver_glGenVertexArraysOES = NULL;

  static void REGAL_CALL loader_glGenVertexArraysOES(Layer *_layer, GLsizei n, GLuint *arrays)
  {
    driver_glGenVertexArraysOES(n, arrays);
  }

  static GLboolean REGAL_CALL missing_glIsVertexArrayOES(GLuint array)
  {
    UNUSED_PARAMETER(array);
    Warning( "glIsVertexArrayOES", " not available." );
    return GL_FALSE;
  }

  PFNGLISVERTEXARRAYOESPROC driver_glIsVertexArrayOES = NULL;

  static GLboolean REGAL_CALL loader_glIsVertexArrayOES(Layer *_layer, GLuint array)
  {
    return driver_glIsVertexArrayOES(array);
  }

// GL_PGI_misc_hints

  static void REGAL_CALL missing_glHintPGI(GLenum target, GLint mode)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(mode);
    Warning( "glHintPGI", " not available." );
  }

  PFNGLHINTPGIPROC driver_glHintPGI = NULL;

  static void REGAL_CALL loader_glHintPGI(Layer *_layer, GLenum target, GLint mode)
  {
    driver_glHintPGI(target, mode);
  }

// GL_QCOM_alpha_test

  static void REGAL_CALL missing_glAlphaFuncQCOM(GLenum func, GLclampf ref)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    Warning( "glAlphaFuncQCOM", " not available." );
  }

  PFNGLALPHAFUNCQCOMPROC driver_glAlphaFuncQCOM = NULL;

  static void REGAL_CALL loader_glAlphaFuncQCOM(Layer *_layer, GLenum func, GLclampf ref)
  {
    driver_glAlphaFuncQCOM(func, ref);
  }

// GL_QCOM_driver_control

  static void REGAL_CALL missing_glDisableDriverControlQCOM(GLuint driverControl)
  {
    UNUSED_PARAMETER(driverControl);
    Warning( "glDisableDriverControlQCOM", " not available." );
  }

  PFNGLDISABLEDRIVERCONTROLQCOMPROC driver_glDisableDriverControlQCOM = NULL;

  static void REGAL_CALL loader_glDisableDriverControlQCOM(Layer *_layer, GLuint driverControl)
  {
    driver_glDisableDriverControlQCOM(driverControl);
  }

  static void REGAL_CALL missing_glEnableDriverControlQCOM(GLuint driverControl)
  {
    UNUSED_PARAMETER(driverControl);
    Warning( "glEnableDriverControlQCOM", " not available." );
  }

  PFNGLENABLEDRIVERCONTROLQCOMPROC driver_glEnableDriverControlQCOM = NULL;

  static void REGAL_CALL loader_glEnableDriverControlQCOM(Layer *_layer, GLuint driverControl)
  {
    driver_glEnableDriverControlQCOM(driverControl);
  }

  static void REGAL_CALL missing_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
  {
    UNUSED_PARAMETER(driverControl);
    UNUSED_PARAMETER(bufSize);
    UNUSED_PARAMETER(length);
    UNUSED_PARAMETER(driverControlString);
    Warning( "glGetDriverControlStringQCOM", " not available." );
  }

  PFNGLGETDRIVERCONTROLSTRINGQCOMPROC driver_glGetDriverControlStringQCOM = NULL;

  static void REGAL_CALL loader_glGetDriverControlStringQCOM(Layer *_layer, GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
  {
    driver_glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
  }

  static void REGAL_CALL missing_glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls)
  {
    UNUSED_PARAMETER(num);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(driverControls);
    Warning( "glGetDriverControlsQCOM", " not available." );
  }

  PFNGLGETDRIVERCONTROLSQCOMPROC driver_glGetDriverControlsQCOM = NULL;

  static void REGAL_CALL loader_glGetDriverControlsQCOM(Layer *_layer, GLint *num, GLsizei size, GLuint *driverControls)
  {
    driver_glGetDriverControlsQCOM(num, size, driverControls);
  }

// GL_QCOM_extended_get

  static void REGAL_CALL missing_glExtGetBufferPointervQCOM(GLenum target, GLvoid **params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(params);
    Warning( "glExtGetBufferPointervQCOM", " not available." );
  }

  PFNGLEXTGETBUFFERPOINTERVQCOMPROC driver_glExtGetBufferPointervQCOM = NULL;

  static void REGAL_CALL loader_glExtGetBufferPointervQCOM(Layer *_layer, GLenum target, GLvoid **params)
  {
    driver_glExtGetBufferPointervQCOM(target, params);
  }

  static void REGAL_CALL missing_glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
  {
    UNUSED_PARAMETER(buffers);
    UNUSED_PARAMETER(maxBuffers);
    UNUSED_PARAMETER(numBuffers);
    Warning( "glExtGetBuffersQCOM", " not available." );
  }

  PFNGLEXTGETBUFFERSQCOMPROC driver_glExtGetBuffersQCOM = NULL;

  static void REGAL_CALL loader_glExtGetBuffersQCOM(Layer *_layer, GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
  {
    driver_glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);
  }

  static void REGAL_CALL missing_glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
  {
    UNUSED_PARAMETER(framebuffers);
    UNUSED_PARAMETER(maxFramebuffers);
    UNUSED_PARAMETER(numFramebuffers);
    Warning( "glExtGetFramebuffersQCOM", " not available." );
  }

  PFNGLEXTGETFRAMEBUFFERSQCOMPROC driver_glExtGetFramebuffersQCOM = NULL;

  static void REGAL_CALL loader_glExtGetFramebuffersQCOM(Layer *_layer, GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
  {
    driver_glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);
  }

  static void REGAL_CALL missing_glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
  {
    UNUSED_PARAMETER(renderbuffers);
    UNUSED_PARAMETER(maxRenderbuffers);
    UNUSED_PARAMETER(numRenderbuffers);
    Warning( "glExtGetRenderbuffersQCOM", " not available." );
  }

  PFNGLEXTGETRENDERBUFFERSQCOMPROC driver_glExtGetRenderbuffersQCOM = NULL;

  static void REGAL_CALL loader_glExtGetRenderbuffersQCOM(Layer *_layer, GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
  {
    driver_glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);
  }

  static void REGAL_CALL missing_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(texture);
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glExtGetTexLevelParameterivQCOM", " not available." );
  }

  PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC driver_glExtGetTexLevelParameterivQCOM = NULL;

  static void REGAL_CALL loader_glExtGetTexLevelParameterivQCOM(Layer *_layer, GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
  {
    driver_glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params);
  }

  static void REGAL_CALL missing_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(texels);
    Warning( "glExtGetTexSubImageQCOM", " not available." );
  }

  PFNGLEXTGETTEXSUBIMAGEQCOMPROC driver_glExtGetTexSubImageQCOM = NULL;

  static void REGAL_CALL loader_glExtGetTexSubImageQCOM(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
  {
    driver_glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
  }

  static void REGAL_CALL missing_glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures)
  {
    UNUSED_PARAMETER(textures);
    UNUSED_PARAMETER(maxTextures);
    UNUSED_PARAMETER(numTextures);
    Warning( "glExtGetTexturesQCOM", " not available." );
  }

  PFNGLEXTGETTEXTURESQCOMPROC driver_glExtGetTexturesQCOM = NULL;

  static void REGAL_CALL loader_glExtGetTexturesQCOM(Layer *_layer, GLuint *textures, GLint maxTextures, GLint *numTextures)
  {
    driver_glExtGetTexturesQCOM(textures, maxTextures, numTextures);
  }

  static void REGAL_CALL missing_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glExtTexObjectStateOverrideiQCOM", " not available." );
  }

  PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC driver_glExtTexObjectStateOverrideiQCOM = NULL;

  static void REGAL_CALL loader_glExtTexObjectStateOverrideiQCOM(Layer *_layer, GLenum target, GLenum pname, GLint param)
  {
    driver_glExtTexObjectStateOverrideiQCOM(target, pname, param);
  }

// GL_QCOM_extended_get2

  static void REGAL_CALL missing_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length)
  {
    UNUSED_PARAMETER(program);
    UNUSED_PARAMETER(shadertype);
    UNUSED_PARAMETER(source);
    UNUSED_PARAMETER(length);
    Warning( "glExtGetProgramBinarySourceQCOM", " not available." );
  }

  PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC driver_glExtGetProgramBinarySourceQCOM = NULL;

  static void REGAL_CALL loader_glExtGetProgramBinarySourceQCOM(Layer *_layer, GLuint program, GLenum shadertype, GLchar *source, GLint *length)
  {
    driver_glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);
  }

  static void REGAL_CALL missing_glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms)
  {
    UNUSED_PARAMETER(programs);
    UNUSED_PARAMETER(maxPrograms);
    UNUSED_PARAMETER(numPrograms);
    Warning( "glExtGetProgramsQCOM", " not available." );
  }

  PFNGLEXTGETPROGRAMSQCOMPROC driver_glExtGetProgramsQCOM = NULL;

  static void REGAL_CALL loader_glExtGetProgramsQCOM(Layer *_layer, GLuint *programs, GLint maxPrograms, GLint *numPrograms)
  {
    driver_glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);
  }

  static void REGAL_CALL missing_glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders)
  {
    UNUSED_PARAMETER(shaders);
    UNUSED_PARAMETER(maxShaders);
    UNUSED_PARAMETER(numShaders);
    Warning( "glExtGetShadersQCOM", " not available." );
  }

  PFNGLEXTGETSHADERSQCOMPROC driver_glExtGetShadersQCOM = NULL;

  static void REGAL_CALL loader_glExtGetShadersQCOM(Layer *_layer, GLuint *shaders, GLint maxShaders, GLint *numShaders)
  {
    driver_glExtGetShadersQCOM(shaders, maxShaders, numShaders);
  }

  static GLboolean REGAL_CALL missing_glExtIsProgramBinaryQCOM(GLuint program)
  {
    UNUSED_PARAMETER(program);
    Warning( "glExtIsProgramBinaryQCOM", " not available." );
    return GL_FALSE;
  }

  PFNGLEXTISPROGRAMBINARYQCOMPROC driver_glExtIsProgramBinaryQCOM = NULL;

  static GLboolean REGAL_CALL loader_glExtIsProgramBinaryQCOM(Layer *_layer, GLuint program)
  {
    return driver_glExtIsProgramBinaryQCOM(program);
  }

// GL_QCOM_tiled_rendering

  static void REGAL_CALL missing_glEndTilingQCOM(GLbitfield preserveMask)
  {
    UNUSED_PARAMETER(preserveMask);
    Warning( "glEndTilingQCOM", " not available." );
  }

  PFNGLENDTILINGQCOMPROC driver_glEndTilingQCOM = NULL;

  static void REGAL_CALL loader_glEndTilingQCOM(Layer *_layer, GLbitfield preserveMask)
  {
    driver_glEndTilingQCOM(preserveMask);
  }

  static void REGAL_CALL missing_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(preserveMask);
    Warning( "glStartTilingQCOM", " not available." );
  }

  PFNGLSTARTTILINGQCOMPROC driver_glStartTilingQCOM = NULL;

  static void REGAL_CALL loader_glStartTilingQCOM(Layer *_layer, GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
  {
    driver_glStartTilingQCOM(x, y, width, height, preserveMask);
  }

// GL_REGAL_ES1_0_compatibility

  static void REGAL_CALL missing_glAlphaFuncx(GLenum func, GLclampx ref)
  {
    UNUSED_PARAMETER(func);
    UNUSED_PARAMETER(ref);
    Warning( "glAlphaFuncx", " not available." );
  }

  PFNGLALPHAFUNCXPROC driver_glAlphaFuncx = NULL;

  static void REGAL_CALL loader_glAlphaFuncx(Layer *_layer, GLenum func, GLclampx ref)
  {
    driver_glAlphaFuncx(func, ref);
  }

  static void REGAL_CALL missing_glClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glClearColorx", " not available." );
  }

  PFNGLCLEARCOLORXPROC driver_glClearColorx = NULL;

  static void REGAL_CALL loader_glClearColorx(Layer *_layer, GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
  {
    driver_glClearColorx(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glClearDepthx(GLclampx depth)
  {
    UNUSED_PARAMETER(depth);
    Warning( "glClearDepthx", " not available." );
  }

  PFNGLCLEARDEPTHXPROC driver_glClearDepthx = NULL;

  static void REGAL_CALL loader_glClearDepthx(Layer *_layer, GLclampx depth)
  {
    driver_glClearDepthx(depth);
  }

  static void REGAL_CALL missing_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glColor4x", " not available." );
  }

  PFNGLCOLOR4XPROC driver_glColor4x = NULL;

  static void REGAL_CALL loader_glColor4x(Layer *_layer, GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
  {
    driver_glColor4x(red, green, blue, alpha);
  }

  static void REGAL_CALL missing_glDepthRangex(GLclampx zNear, GLclampx zFar)
  {
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glDepthRangex", " not available." );
  }

  PFNGLDEPTHRANGEXPROC driver_glDepthRangex = NULL;

  static void REGAL_CALL loader_glDepthRangex(Layer *_layer, GLclampx zNear, GLclampx zFar)
  {
    driver_glDepthRangex(zNear, zFar);
  }

  static void REGAL_CALL missing_glFogx(GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFogx", " not available." );
  }

  PFNGLFOGXPROC driver_glFogx = NULL;

  static void REGAL_CALL loader_glFogx(Layer *_layer, GLenum pname, GLfixed param)
  {
    driver_glFogx(pname, param);
  }

  static void REGAL_CALL missing_glFogxv(GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFogxv", " not available." );
  }

  PFNGLFOGXVPROC driver_glFogxv = NULL;

  static void REGAL_CALL loader_glFogxv(Layer *_layer, GLenum pname, const GLfixed *params)
  {
    driver_glFogxv(pname, params);
  }

  static void REGAL_CALL missing_glFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glFrustumf", " not available." );
  }

  PFNGLFRUSTUMFPROC driver_glFrustumf = NULL;

  static void REGAL_CALL loader_glFrustumf(Layer *_layer, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
  {
    driver_glFrustumf(left, right, bottom, top, zNear, zFar);
  }

  static void REGAL_CALL missing_glFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glFrustumx", " not available." );
  }

  PFNGLFRUSTUMXPROC driver_glFrustumx = NULL;

  static void REGAL_CALL loader_glFrustumx(Layer *_layer, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
  {
    driver_glFrustumx(left, right, bottom, top, zNear, zFar);
  }

  static void REGAL_CALL missing_glLightModelx(GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightModelx", " not available." );
  }

  PFNGLLIGHTMODELXPROC driver_glLightModelx = NULL;

  static void REGAL_CALL loader_glLightModelx(Layer *_layer, GLenum pname, GLfixed param)
  {
    driver_glLightModelx(pname, param);
  }

  static void REGAL_CALL missing_glLightModelxv(GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightModelxv", " not available." );
  }

  PFNGLLIGHTMODELXVPROC driver_glLightModelxv = NULL;

  static void REGAL_CALL loader_glLightModelxv(Layer *_layer, GLenum pname, const GLfixed *params)
  {
    driver_glLightModelxv(pname, params);
  }

  static void REGAL_CALL missing_glLightx(GLenum light, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightx", " not available." );
  }

  PFNGLLIGHTXPROC driver_glLightx = NULL;

  static void REGAL_CALL loader_glLightx(Layer *_layer, GLenum light, GLenum pname, GLfixed param)
  {
    driver_glLightx(light, pname, param);
  }

  static void REGAL_CALL missing_glLightxv(GLenum light, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glLightxv", " not available." );
  }

  PFNGLLIGHTXVPROC driver_glLightxv = NULL;

  static void REGAL_CALL loader_glLightxv(Layer *_layer, GLenum light, GLenum pname, const GLfixed *params)
  {
    driver_glLightxv(light, pname, params);
  }

  static void REGAL_CALL missing_glLineWidthx(GLfixed width)
  {
    UNUSED_PARAMETER(width);
    Warning( "glLineWidthx", " not available." );
  }

  PFNGLLINEWIDTHXPROC driver_glLineWidthx = NULL;

  static void REGAL_CALL loader_glLineWidthx(Layer *_layer, GLfixed width)
  {
    driver_glLineWidthx(width);
  }

  static void REGAL_CALL missing_glLoadMatrixx(const GLfixed *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glLoadMatrixx", " not available." );
  }

  PFNGLLOADMATRIXXPROC driver_glLoadMatrixx = NULL;

  static void REGAL_CALL loader_glLoadMatrixx(Layer *_layer, const GLfixed *m)
  {
    driver_glLoadMatrixx(m);
  }

  static void REGAL_CALL missing_glMaterialx(GLenum face, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glMaterialx", " not available." );
  }

  PFNGLMATERIALXPROC driver_glMaterialx = NULL;

  static void REGAL_CALL loader_glMaterialx(Layer *_layer, GLenum face, GLenum pname, GLfixed param)
  {
    driver_glMaterialx(face, pname, param);
  }

  static void REGAL_CALL missing_glMaterialxv(GLenum face, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glMaterialxv", " not available." );
  }

  PFNGLMATERIALXVPROC driver_glMaterialxv = NULL;

  static void REGAL_CALL loader_glMaterialxv(Layer *_layer, GLenum face, GLenum pname, const GLfixed *params)
  {
    driver_glMaterialxv(face, pname, params);
  }

  static void REGAL_CALL missing_glMultMatrixx(const GLfixed *m)
  {
    UNUSED_PARAMETER(m);
    Warning( "glMultMatrixx", " not available." );
  }

  PFNGLMULTMATRIXXPROC driver_glMultMatrixx = NULL;

  static void REGAL_CALL loader_glMultMatrixx(Layer *_layer, const GLfixed *m)
  {
    driver_glMultMatrixx(m);
  }

  static void REGAL_CALL missing_glMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(q);
    Warning( "glMultiTexCoord4x", " not available." );
  }

  PFNGLMULTITEXCOORD4XPROC driver_glMultiTexCoord4x = NULL;

  static void REGAL_CALL loader_glMultiTexCoord4x(Layer *_layer, GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
  {
    driver_glMultiTexCoord4x(target, s, t, r, q);
  }

  static void REGAL_CALL missing_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    Warning( "glNormal3x", " not available." );
  }

  PFNGLNORMAL3XPROC driver_glNormal3x = NULL;

  static void REGAL_CALL loader_glNormal3x(Layer *_layer, GLfixed nx, GLfixed ny, GLfixed nz)
  {
    driver_glNormal3x(nx, ny, nz);
  }

  static void REGAL_CALL missing_glOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glOrthof", " not available." );
  }

  PFNGLORTHOFPROC driver_glOrthof = NULL;

  static void REGAL_CALL loader_glOrthof(Layer *_layer, GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
  {
    driver_glOrthof(left, right, bottom, top, zNear, zFar);
  }

  static void REGAL_CALL missing_glOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
  {
    UNUSED_PARAMETER(left);
    UNUSED_PARAMETER(right);
    UNUSED_PARAMETER(bottom);
    UNUSED_PARAMETER(top);
    UNUSED_PARAMETER(zNear);
    UNUSED_PARAMETER(zFar);
    Warning( "glOrthox", " not available." );
  }

  PFNGLORTHOXPROC driver_glOrthox = NULL;

  static void REGAL_CALL loader_glOrthox(Layer *_layer, GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
  {
    driver_glOrthox(left, right, bottom, top, zNear, zFar);
  }

  static void REGAL_CALL missing_glPointSizex(GLfixed size)
  {
    UNUSED_PARAMETER(size);
    Warning( "glPointSizex", " not available." );
  }

  PFNGLPOINTSIZEXPROC driver_glPointSizex = NULL;

  static void REGAL_CALL loader_glPointSizex(Layer *_layer, GLfixed size)
  {
    driver_glPointSizex(size);
  }

  static void REGAL_CALL missing_glPolygonOffsetx(GLfixed factor, GLfixed units)
  {
    UNUSED_PARAMETER(factor);
    UNUSED_PARAMETER(units);
    Warning( "glPolygonOffsetx", " not available." );
  }

  PFNGLPOLYGONOFFSETXPROC driver_glPolygonOffsetx = NULL;

  static void REGAL_CALL loader_glPolygonOffsetx(Layer *_layer, GLfixed factor, GLfixed units)
  {
    driver_glPolygonOffsetx(factor, units);
  }

  static void REGAL_CALL missing_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
  {
    UNUSED_PARAMETER(angle);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glRotatex", " not available." );
  }

  PFNGLROTATEXPROC driver_glRotatex = NULL;

  static void REGAL_CALL loader_glRotatex(Layer *_layer, GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
  {
    driver_glRotatex(angle, x, y, z);
  }

  static void REGAL_CALL missing_glSampleCoveragex(GLclampx value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleCoveragex", " not available." );
  }

  PFNGLSAMPLECOVERAGEXPROC driver_glSampleCoveragex = NULL;

  static void REGAL_CALL loader_glSampleCoveragex(Layer *_layer, GLclampx value, GLboolean invert)
  {
    driver_glSampleCoveragex(value, invert);
  }

  static void REGAL_CALL missing_glScalex(GLfixed x, GLfixed y, GLfixed z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glScalex", " not available." );
  }

  PFNGLSCALEXPROC driver_glScalex = NULL;

  static void REGAL_CALL loader_glScalex(Layer *_layer, GLfixed x, GLfixed y, GLfixed z)
  {
    driver_glScalex(x, y, z);
  }

  static void REGAL_CALL missing_glTexEnvx(GLenum target, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexEnvx", " not available." );
  }

  PFNGLTEXENVXPROC driver_glTexEnvx = NULL;

  static void REGAL_CALL loader_glTexEnvx(Layer *_layer, GLenum target, GLenum pname, GLfixed param)
  {
    driver_glTexEnvx(target, pname, param);
  }

  static void REGAL_CALL missing_glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexEnvxv", " not available." );
  }

  PFNGLTEXENVXVPROC driver_glTexEnvxv = NULL;

  static void REGAL_CALL loader_glTexEnvxv(Layer *_layer, GLenum target, GLenum pname, const GLfixed *params)
  {
    driver_glTexEnvxv(target, pname, params);
  }

  static void REGAL_CALL missing_glTexParameterx(GLenum target, GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glTexParameterx", " not available." );
  }

  PFNGLTEXPARAMETERXPROC driver_glTexParameterx = NULL;

  static void REGAL_CALL loader_glTexParameterx(Layer *_layer, GLenum target, GLenum pname, GLfixed param)
  {
    driver_glTexParameterx(target, pname, param);
  }

  static void REGAL_CALL missing_glTranslatex(GLfixed x, GLfixed y, GLfixed z)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTranslatex", " not available." );
  }

  PFNGLTRANSLATEXPROC driver_glTranslatex = NULL;

  static void REGAL_CALL loader_glTranslatex(Layer *_layer, GLfixed x, GLfixed y, GLfixed z)
  {
    driver_glTranslatex(x, y, z);
  }

// GL_REGAL_ES1_1_compatibility

  static void REGAL_CALL missing_glClipPlanef(GLenum plane, const GLfloat *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glClipPlanef", " not available." );
  }

  PFNGLCLIPPLANEFPROC driver_glClipPlanef = NULL;

  static void REGAL_CALL loader_glClipPlanef(Layer *_layer, GLenum plane, const GLfloat *equation)
  {
    driver_glClipPlanef(plane, equation);
  }

  static void REGAL_CALL missing_glClipPlanex(GLenum plane, const GLfixed *equation)
  {
    UNUSED_PARAMETER(plane);
    UNUSED_PARAMETER(equation);
    Warning( "glClipPlanex", " not available." );
  }

  PFNGLCLIPPLANEXPROC driver_glClipPlanex = NULL;

  static void REGAL_CALL loader_glClipPlanex(Layer *_layer, GLenum plane, const GLfixed *equation)
  {
    driver_glClipPlanex(plane, equation);
  }

  static void REGAL_CALL missing_glGetClipPlanef(GLenum pname, GLfloat *eqn)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(eqn);
    Warning( "glGetClipPlanef", " not available." );
  }

  PFNGLGETCLIPPLANEFPROC driver_glGetClipPlanef = NULL;

  static void REGAL_CALL loader_glGetClipPlanef(Layer *_layer, GLenum pname, GLfloat *eqn)
  {
    driver_glGetClipPlanef(pname, eqn);
  }

  static void REGAL_CALL missing_glGetClipPlanex(GLenum pname, GLfixed *eqn)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(eqn);
    Warning( "glGetClipPlanex", " not available." );
  }

  PFNGLGETCLIPPLANEXPROC driver_glGetClipPlanex = NULL;

  static void REGAL_CALL loader_glGetClipPlanex(Layer *_layer, GLenum pname, GLfixed *eqn)
  {
    driver_glGetClipPlanex(pname, eqn);
  }

  static void REGAL_CALL missing_glGetFixedv(GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFixedv", " not available." );
  }

  PFNGLGETFIXEDVPROC driver_glGetFixedv = NULL;

  static void REGAL_CALL loader_glGetFixedv(Layer *_layer, GLenum pname, GLfixed *params)
  {
    driver_glGetFixedv(pname, params);
  }

  static void REGAL_CALL missing_glGetLightxv(GLenum light, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetLightxv", " not available." );
  }

  PFNGLGETLIGHTXVPROC driver_glGetLightxv = NULL;

  static void REGAL_CALL loader_glGetLightxv(Layer *_layer, GLenum light, GLenum pname, GLfixed *params)
  {
    driver_glGetLightxv(light, pname, params);
  }

  static void REGAL_CALL missing_glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetMaterialxv", " not available." );
  }

  PFNGLGETMATERIALXVPROC driver_glGetMaterialxv = NULL;

  static void REGAL_CALL loader_glGetMaterialxv(Layer *_layer, GLenum face, GLenum pname, GLfixed *params)
  {
    driver_glGetMaterialxv(face, pname, params);
  }

  static void REGAL_CALL missing_glGetTexEnvxv(GLenum env, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(env);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexEnvxv", " not available." );
  }

  PFNGLGETTEXENVXVPROC driver_glGetTexEnvxv = NULL;

  static void REGAL_CALL loader_glGetTexEnvxv(Layer *_layer, GLenum env, GLenum pname, GLfixed *params)
  {
    driver_glGetTexEnvxv(env, pname, params);
  }

  static void REGAL_CALL missing_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetTexParameterxv", " not available." );
  }

  PFNGLGETTEXPARAMETERXVPROC driver_glGetTexParameterxv = NULL;

  static void REGAL_CALL loader_glGetTexParameterxv(Layer *_layer, GLenum target, GLenum pname, GLfixed *params)
  {
    driver_glGetTexParameterxv(target, pname, params);
  }

  static void REGAL_CALL missing_glPointParameterx(GLenum pname, GLfixed param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterx", " not available." );
  }

  PFNGLPOINTPARAMETERXPROC driver_glPointParameterx = NULL;

  static void REGAL_CALL loader_glPointParameterx(Layer *_layer, GLenum pname, GLfixed param)
  {
    driver_glPointParameterx(pname, param);
  }

  static void REGAL_CALL missing_glPointParameterxv(GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterxv", " not available." );
  }

  PFNGLPOINTPARAMETERXVPROC driver_glPointParameterxv = NULL;

  static void REGAL_CALL loader_glPointParameterxv(Layer *_layer, GLenum pname, const GLfixed *params)
  {
    driver_glPointParameterxv(pname, params);
  }

  static void REGAL_CALL missing_glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glPointSizePointerOES", " not available." );
  }

  PFNGLPOINTSIZEPOINTEROESPROC driver_glPointSizePointerOES = NULL;

  static void REGAL_CALL loader_glPointSizePointerOES(Layer *_layer, GLenum type, GLsizei stride, const GLvoid *pointer)
  {
    driver_glPointSizePointerOES(type, stride, pointer);
  }

  static void REGAL_CALL missing_glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glTexParameterxv", " not available." );
  }

  PFNGLTEXPARAMETERXVPROC driver_glTexParameterxv = NULL;

  static void REGAL_CALL loader_glTexParameterxv(Layer *_layer, GLenum target, GLenum pname, const GLfixed *params)
  {
    driver_glTexParameterxv(target, pname, params);
  }

// GL_REGAL_log

  static void REGAL_CALL missing_glLogMessageCallbackREGAL(GLLOGPROCREGAL callback)
  {
    UNUSED_PARAMETER(callback);
    Warning( "glLogMessageCallbackREGAL", " not available." );
  }

  PFNGLLOGMESSAGECALLBACKREGALPROC driver_glLogMessageCallbackREGAL = NULL;

  static void REGAL_CALL loader_glLogMessageCallbackREGAL(Layer *_layer, GLLOGPROCREGAL callback)
  {
    driver_glLogMessageCallbackREGAL(callback);
  }

// GL_SGIS_detail_texture

  static void REGAL_CALL missing_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(points);
    Warning( "glDetailTexFuncSGIS", " not available." );
  }

  PFNGLDETAILTEXFUNCSGISPROC driver_glDetailTexFuncSGIS = NULL;

  static void REGAL_CALL loader_glDetailTexFuncSGIS(Layer *_layer, GLenum target, GLsizei n, const GLfloat *points)
  {
    driver_glDetailTexFuncSGIS(target, n, points);
  }

  static void REGAL_CALL missing_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(points);
    Warning( "glGetDetailTexFuncSGIS", " not available." );
  }

  PFNGLGETDETAILTEXFUNCSGISPROC driver_glGetDetailTexFuncSGIS = NULL;

  static void REGAL_CALL loader_glGetDetailTexFuncSGIS(Layer *_layer, GLenum target, GLfloat *points)
  {
    driver_glGetDetailTexFuncSGIS(target, points);
  }

// GL_SGIS_fog_function

  static void REGAL_CALL missing_glFogFuncSGIS(GLsizei n, const GLfloat *points)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(points);
    Warning( "glFogFuncSGIS", " not available." );
  }

  PFNGLFOGFUNCSGISPROC driver_glFogFuncSGIS = NULL;

  static void REGAL_CALL loader_glFogFuncSGIS(Layer *_layer, GLsizei n, const GLfloat *points)
  {
    driver_glFogFuncSGIS(n, points);
  }

  static void REGAL_CALL missing_glGetFogFuncSGIS(GLfloat *points)
  {
    UNUSED_PARAMETER(points);
    Warning( "glGetFogFuncSGIS", " not available." );
  }

  PFNGLGETFOGFUNCSGISPROC driver_glGetFogFuncSGIS = NULL;

  static void REGAL_CALL loader_glGetFogFuncSGIS(Layer *_layer, GLfloat *points)
  {
    driver_glGetFogFuncSGIS(points);
  }

// GL_SGIS_multisample

  static void REGAL_CALL missing_glSampleMaskSGIS(GLclampf value, GLboolean invert)
  {
    UNUSED_PARAMETER(value);
    UNUSED_PARAMETER(invert);
    Warning( "glSampleMaskSGIS", " not available." );
  }

  PFNGLSAMPLEMASKSGISPROC driver_glSampleMaskSGIS = NULL;

  static void REGAL_CALL loader_glSampleMaskSGIS(Layer *_layer, GLclampf value, GLboolean invert)
  {
    driver_glSampleMaskSGIS(value, invert);
  }

  static void REGAL_CALL missing_glSamplePatternSGIS(GLenum pattern)
  {
    UNUSED_PARAMETER(pattern);
    Warning( "glSamplePatternSGIS", " not available." );
  }

  PFNGLSAMPLEPATTERNSGISPROC driver_glSamplePatternSGIS = NULL;

  static void REGAL_CALL loader_glSamplePatternSGIS(Layer *_layer, GLenum pattern)
  {
    driver_glSamplePatternSGIS(pattern);
  }

// GL_SGIS_pixel_texture

  static void REGAL_CALL missing_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPixelTexGenParameterfvSGIS", " not available." );
  }

  PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC driver_glGetPixelTexGenParameterfvSGIS = NULL;

  static void REGAL_CALL loader_glGetPixelTexGenParameterfvSGIS(Layer *_layer, GLenum pname, GLfloat *params)
  {
    driver_glGetPixelTexGenParameterfvSGIS(pname, params);
  }

  static void REGAL_CALL missing_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetPixelTexGenParameterivSGIS", " not available." );
  }

  PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC driver_glGetPixelTexGenParameterivSGIS = NULL;

  static void REGAL_CALL loader_glGetPixelTexGenParameterivSGIS(Layer *_layer, GLenum pname, GLint *params)
  {
    driver_glGetPixelTexGenParameterivSGIS(pname, params);
  }

  static void REGAL_CALL missing_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTexGenParameterfSGIS", " not available." );
  }

  PFNGLPIXELTEXGENPARAMETERFSGISPROC driver_glPixelTexGenParameterfSGIS = NULL;

  static void REGAL_CALL loader_glPixelTexGenParameterfSGIS(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glPixelTexGenParameterfSGIS(pname, param);
  }

  static void REGAL_CALL missing_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPixelTexGenParameterfvSGIS", " not available." );
  }

  PFNGLPIXELTEXGENPARAMETERFVSGISPROC driver_glPixelTexGenParameterfvSGIS = NULL;

  static void REGAL_CALL loader_glPixelTexGenParameterfvSGIS(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glPixelTexGenParameterfvSGIS(pname, params);
  }

  static void REGAL_CALL missing_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPixelTexGenParameteriSGIS", " not available." );
  }

  PFNGLPIXELTEXGENPARAMETERISGISPROC driver_glPixelTexGenParameteriSGIS = NULL;

  static void REGAL_CALL loader_glPixelTexGenParameteriSGIS(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glPixelTexGenParameteriSGIS(pname, param);
  }

  static void REGAL_CALL missing_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPixelTexGenParameterivSGIS", " not available." );
  }

  PFNGLPIXELTEXGENPARAMETERIVSGISPROC driver_glPixelTexGenParameterivSGIS = NULL;

  static void REGAL_CALL loader_glPixelTexGenParameterivSGIS(Layer *_layer, GLenum pname, const GLint *params)
  {
    driver_glPixelTexGenParameterivSGIS(pname, params);
  }

// GL_SGIS_point_parameters

  static void REGAL_CALL missing_glPointParameterfSGIS(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glPointParameterfSGIS", " not available." );
  }

  PFNGLPOINTPARAMETERFSGISPROC driver_glPointParameterfSGIS = NULL;

  static void REGAL_CALL loader_glPointParameterfSGIS(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glPointParameterfSGIS(pname, param);
  }

  static void REGAL_CALL missing_glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glPointParameterfvSGIS", " not available." );
  }

  PFNGLPOINTPARAMETERFVSGISPROC driver_glPointParameterfvSGIS = NULL;

  static void REGAL_CALL loader_glPointParameterfvSGIS(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glPointParameterfvSGIS(pname, params);
  }

// GL_SGIS_sharpen_texture

  static void REGAL_CALL missing_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(points);
    Warning( "glGetSharpenTexFuncSGIS", " not available." );
  }

  PFNGLGETSHARPENTEXFUNCSGISPROC driver_glGetSharpenTexFuncSGIS = NULL;

  static void REGAL_CALL loader_glGetSharpenTexFuncSGIS(Layer *_layer, GLenum target, GLfloat *points)
  {
    driver_glGetSharpenTexFuncSGIS(target, points);
  }

  static void REGAL_CALL missing_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(points);
    Warning( "glSharpenTexFuncSGIS", " not available." );
  }

  PFNGLSHARPENTEXFUNCSGISPROC driver_glSharpenTexFuncSGIS = NULL;

  static void REGAL_CALL loader_glSharpenTexFuncSGIS(Layer *_layer, GLenum target, GLsizei n, const GLfloat *points)
  {
    driver_glSharpenTexFuncSGIS(target, n, points);
  }

// GL_SGIS_texture4D

  static void REGAL_CALL missing_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(size4d);
    UNUSED_PARAMETER(border);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexImage4DSGIS", " not available." );
  }

  PFNGLTEXIMAGE4DSGISPROC driver_glTexImage4DSGIS = NULL;

  static void REGAL_CALL loader_glTexImage4DSGIS(Layer *_layer, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
  }

  static void REGAL_CALL missing_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(xoffset);
    UNUSED_PARAMETER(yoffset);
    UNUSED_PARAMETER(zoffset);
    UNUSED_PARAMETER(woffset);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    UNUSED_PARAMETER(size4d);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glTexSubImage4DSGIS", " not available." );
  }

  PFNGLTEXSUBIMAGE4DSGISPROC driver_glTexSubImage4DSGIS = NULL;

  static void REGAL_CALL loader_glTexSubImage4DSGIS(Layer *_layer, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
  {
    driver_glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
  }

// GL_SGIS_texture_color_mask

  static void REGAL_CALL missing_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
  {
    UNUSED_PARAMETER(red);
    UNUSED_PARAMETER(green);
    UNUSED_PARAMETER(blue);
    UNUSED_PARAMETER(alpha);
    Warning( "glTextureColorMaskSGIS", " not available." );
  }

  PFNGLTEXTURECOLORMASKSGISPROC driver_glTextureColorMaskSGIS = NULL;

  static void REGAL_CALL loader_glTextureColorMaskSGIS(Layer *_layer, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
  {
    driver_glTextureColorMaskSGIS(red, green, blue, alpha);
  }

// GL_SGIS_texture_filter4

  static void REGAL_CALL missing_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(filter);
    UNUSED_PARAMETER(weights);
    Warning( "glGetTexFilterFuncSGIS", " not available." );
  }

  PFNGLGETTEXFILTERFUNCSGISPROC driver_glGetTexFilterFuncSGIS = NULL;

  static void REGAL_CALL loader_glGetTexFilterFuncSGIS(Layer *_layer, GLenum target, GLenum filter, GLfloat *weights)
  {
    driver_glGetTexFilterFuncSGIS(target, filter, weights);
  }

  static void REGAL_CALL missing_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(filter);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(weights);
    Warning( "glTexFilterFuncSGIS", " not available." );
  }

  PFNGLTEXFILTERFUNCSGISPROC driver_glTexFilterFuncSGIS = NULL;

  static void REGAL_CALL loader_glTexFilterFuncSGIS(Layer *_layer, GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
  {
    driver_glTexFilterFuncSGIS(target, filter, n, weights);
  }

// GL_SGIX_async

  static void REGAL_CALL missing_glAsyncMarkerSGIX(GLuint marker)
  {
    UNUSED_PARAMETER(marker);
    Warning( "glAsyncMarkerSGIX", " not available." );
  }

  PFNGLASYNCMARKERSGIXPROC driver_glAsyncMarkerSGIX = NULL;

  static void REGAL_CALL loader_glAsyncMarkerSGIX(Layer *_layer, GLuint marker)
  {
    driver_glAsyncMarkerSGIX(marker);
  }

  static void REGAL_CALL missing_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
  {
    UNUSED_PARAMETER(marker);
    UNUSED_PARAMETER(range);
    Warning( "glDeleteAsyncMarkersSGIX", " not available." );
  }

  PFNGLDELETEASYNCMARKERSSGIXPROC driver_glDeleteAsyncMarkersSGIX = NULL;

  static void REGAL_CALL loader_glDeleteAsyncMarkersSGIX(Layer *_layer, GLuint marker, GLsizei range)
  {
    driver_glDeleteAsyncMarkersSGIX(marker, range);
  }

  static GLint REGAL_CALL missing_glFinishAsyncSGIX(GLuint *markerp)
  {
    UNUSED_PARAMETER(markerp);
    Warning( "glFinishAsyncSGIX", " not available." );
    return 0;
  }

  PFNGLFINISHASYNCSGIXPROC driver_glFinishAsyncSGIX = NULL;

  static GLint REGAL_CALL loader_glFinishAsyncSGIX(Layer *_layer, GLuint *markerp)
  {
    return driver_glFinishAsyncSGIX(markerp);
  }

  static GLuint REGAL_CALL missing_glGenAsyncMarkersSGIX(GLsizei range)
  {
    UNUSED_PARAMETER(range);
    Warning( "glGenAsyncMarkersSGIX", " not available." );
    return 0;
  }

  PFNGLGENASYNCMARKERSSGIXPROC driver_glGenAsyncMarkersSGIX = NULL;

  static GLuint REGAL_CALL loader_glGenAsyncMarkersSGIX(Layer *_layer, GLsizei range)
  {
    return driver_glGenAsyncMarkersSGIX(range);
  }

  static GLboolean REGAL_CALL missing_glIsAsyncMarkerSGIX(GLuint marker)
  {
    UNUSED_PARAMETER(marker);
    Warning( "glIsAsyncMarkerSGIX", " not available." );
    return GL_FALSE;
  }

  PFNGLISASYNCMARKERSGIXPROC driver_glIsAsyncMarkerSGIX = NULL;

  static GLboolean REGAL_CALL loader_glIsAsyncMarkerSGIX(Layer *_layer, GLuint marker)
  {
    return driver_glIsAsyncMarkerSGIX(marker);
  }

  static GLint REGAL_CALL missing_glPollAsyncSGIX(GLuint *markerp)
  {
    UNUSED_PARAMETER(markerp);
    Warning( "glPollAsyncSGIX", " not available." );
    return 0;
  }

  PFNGLPOLLASYNCSGIXPROC driver_glPollAsyncSGIX = NULL;

  static GLint REGAL_CALL loader_glPollAsyncSGIX(Layer *_layer, GLuint *markerp)
  {
    return driver_glPollAsyncSGIX(markerp);
  }

// GL_SGIX_flush_raster

  static void REGAL_CALL missing_glFlushRasterSGIX(void)
  {
    Warning( "glFlushRasterSGIX", " not available." );
  }

  PFNGLFLUSHRASTERSGIXPROC driver_glFlushRasterSGIX = NULL;

  static void REGAL_CALL loader_glFlushRasterSGIX(Layer *_layer)
  {
    driver_glFlushRasterSGIX();
  }

// GL_SGIX_fog_texture

  static void REGAL_CALL missing_glTextureFogSGIX(GLenum pname)
  {
    UNUSED_PARAMETER(pname);
    Warning( "glTextureFogSGIX", " not available." );
  }

  PFNGLTEXTUREFOGSGIXPROC driver_glTextureFogSGIX = NULL;

  static void REGAL_CALL loader_glTextureFogSGIX(Layer *_layer, GLenum pname)
  {
    driver_glTextureFogSGIX(pname);
  }

// GL_SGIX_fragment_lighting

  static void REGAL_CALL missing_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(mode);
    Warning( "glFragmentColorMaterialSGIX", " not available." );
  }

  PFNGLFRAGMENTCOLORMATERIALSGIXPROC driver_glFragmentColorMaterialSGIX = NULL;

  static void REGAL_CALL loader_glFragmentColorMaterialSGIX(Layer *_layer, GLenum face, GLenum mode)
  {
    driver_glFragmentColorMaterialSGIX(face, mode);
  }

  static void REGAL_CALL missing_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightModelfSGIX", " not available." );
  }

  PFNGLFRAGMENTLIGHTMODELFSGIXPROC driver_glFragmentLightModelfSGIX = NULL;

  static void REGAL_CALL loader_glFragmentLightModelfSGIX(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glFragmentLightModelfSGIX(pname, param);
  }

  static void REGAL_CALL missing_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightModelfvSGIX", " not available." );
  }

  PFNGLFRAGMENTLIGHTMODELFVSGIXPROC driver_glFragmentLightModelfvSGIX = NULL;

  static void REGAL_CALL loader_glFragmentLightModelfvSGIX(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glFragmentLightModelfvSGIX(pname, params);
  }

  static void REGAL_CALL missing_glFragmentLightModeliSGIX(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightModeliSGIX", " not available." );
  }

  PFNGLFRAGMENTLIGHTMODELISGIXPROC driver_glFragmentLightModeliSGIX = NULL;

  static void REGAL_CALL loader_glFragmentLightModeliSGIX(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glFragmentLightModeliSGIX(pname, param);
  }

  static void REGAL_CALL missing_glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightModelivSGIX", " not available." );
  }

  PFNGLFRAGMENTLIGHTMODELIVSGIXPROC driver_glFragmentLightModelivSGIX = NULL;

  static void REGAL_CALL loader_glFragmentLightModelivSGIX(Layer *_layer, GLenum pname, const GLint *params)
  {
    driver_glFragmentLightModelivSGIX(pname, params);
  }

  static void REGAL_CALL missing_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightfSGIX", " not available." );
  }

  PFNGLFRAGMENTLIGHTFSGIXPROC driver_glFragmentLightfSGIX = NULL;

  static void REGAL_CALL loader_glFragmentLightfSGIX(Layer *_layer, GLenum light, GLenum pname, GLfloat param)
  {
    driver_glFragmentLightfSGIX(light, pname, param);
  }

  static void REGAL_CALL missing_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightfvSGIX", " not available." );
  }

  PFNGLFRAGMENTLIGHTFVSGIXPROC driver_glFragmentLightfvSGIX = NULL;

  static void REGAL_CALL loader_glFragmentLightfvSGIX(Layer *_layer, GLenum light, GLenum pname, const GLfloat *params)
  {
    driver_glFragmentLightfvSGIX(light, pname, params);
  }

  static void REGAL_CALL missing_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentLightiSGIX", " not available." );
  }

  PFNGLFRAGMENTLIGHTISGIXPROC driver_glFragmentLightiSGIX = NULL;

  static void REGAL_CALL loader_glFragmentLightiSGIX(Layer *_layer, GLenum light, GLenum pname, GLint param)
  {
    driver_glFragmentLightiSGIX(light, pname, param);
  }

  static void REGAL_CALL missing_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentLightivSGIX", " not available." );
  }

  PFNGLFRAGMENTLIGHTIVSGIXPROC driver_glFragmentLightivSGIX = NULL;

  static void REGAL_CALL loader_glFragmentLightivSGIX(Layer *_layer, GLenum light, GLenum pname, const GLint *params)
  {
    driver_glFragmentLightivSGIX(light, pname, params);
  }

  static void REGAL_CALL missing_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentMaterialfSGIX", " not available." );
  }

  PFNGLFRAGMENTMATERIALFSGIXPROC driver_glFragmentMaterialfSGIX = NULL;

  static void REGAL_CALL loader_glFragmentMaterialfSGIX(Layer *_layer, GLenum face, GLenum pname, GLfloat param)
  {
    driver_glFragmentMaterialfSGIX(face, pname, param);
  }

  static void REGAL_CALL missing_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentMaterialfvSGIX", " not available." );
  }

  PFNGLFRAGMENTMATERIALFVSGIXPROC driver_glFragmentMaterialfvSGIX = NULL;

  static void REGAL_CALL loader_glFragmentMaterialfvSGIX(Layer *_layer, GLenum face, GLenum pname, const GLfloat *params)
  {
    driver_glFragmentMaterialfvSGIX(face, pname, params);
  }

  static void REGAL_CALL missing_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glFragmentMaterialiSGIX", " not available." );
  }

  PFNGLFRAGMENTMATERIALISGIXPROC driver_glFragmentMaterialiSGIX = NULL;

  static void REGAL_CALL loader_glFragmentMaterialiSGIX(Layer *_layer, GLenum face, GLenum pname, GLint param)
  {
    driver_glFragmentMaterialiSGIX(face, pname, param);
  }

  static void REGAL_CALL missing_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glFragmentMaterialivSGIX", " not available." );
  }

  PFNGLFRAGMENTMATERIALIVSGIXPROC driver_glFragmentMaterialivSGIX = NULL;

  static void REGAL_CALL loader_glFragmentMaterialivSGIX(Layer *_layer, GLenum face, GLenum pname, const GLint *params)
  {
    driver_glFragmentMaterialivSGIX(face, pname, params);
  }

  static void REGAL_CALL missing_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentLightfvSGIX", " not available." );
  }

  PFNGLGETFRAGMENTLIGHTFVSGIXPROC driver_glGetFragmentLightfvSGIX = NULL;

  static void REGAL_CALL loader_glGetFragmentLightfvSGIX(Layer *_layer, GLenum light, GLenum pname, GLfloat *params)
  {
    driver_glGetFragmentLightfvSGIX(light, pname, params);
  }

  static void REGAL_CALL missing_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(light);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentLightivSGIX", " not available." );
  }

  PFNGLGETFRAGMENTLIGHTIVSGIXPROC driver_glGetFragmentLightivSGIX = NULL;

  static void REGAL_CALL loader_glGetFragmentLightivSGIX(Layer *_layer, GLenum light, GLenum pname, GLint *params)
  {
    driver_glGetFragmentLightivSGIX(light, pname, params);
  }

  static void REGAL_CALL missing_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentMaterialfvSGIX", " not available." );
  }

  PFNGLGETFRAGMENTMATERIALFVSGIXPROC driver_glGetFragmentMaterialfvSGIX = NULL;

  static void REGAL_CALL loader_glGetFragmentMaterialfvSGIX(Layer *_layer, GLenum face, GLenum pname, GLfloat *params)
  {
    driver_glGetFragmentMaterialfvSGIX(face, pname, params);
  }

  static void REGAL_CALL missing_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetFragmentMaterialivSGIX", " not available." );
  }

  PFNGLGETFRAGMENTMATERIALIVSGIXPROC driver_glGetFragmentMaterialivSGIX = NULL;

  static void REGAL_CALL loader_glGetFragmentMaterialivSGIX(Layer *_layer, GLenum face, GLenum pname, GLint *params)
  {
    driver_glGetFragmentMaterialivSGIX(face, pname, params);
  }

  static void REGAL_CALL missing_glLightEnviSGIX(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glLightEnviSGIX", " not available." );
  }

  PFNGLLIGHTENVISGIXPROC driver_glLightEnviSGIX = NULL;

  static void REGAL_CALL loader_glLightEnviSGIX(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glLightEnviSGIX(pname, param);
  }

// GL_SGIX_framezoom

  static void REGAL_CALL missing_glFrameZoomSGIX(GLint factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glFrameZoomSGIX", " not available." );
  }

  PFNGLFRAMEZOOMSGIXPROC driver_glFrameZoomSGIX = NULL;

  static void REGAL_CALL loader_glFrameZoomSGIX(Layer *_layer, GLint factor)
  {
    driver_glFrameZoomSGIX(factor);
  }

// GL_SGIX_igloo_interface

  static void REGAL_CALL missing_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glIglooInterfaceSGIX", " not available." );
  }

  PFNGLIGLOOINTERFACESGIXPROC driver_glIglooInterfaceSGIX = NULL;

  static void REGAL_CALL loader_glIglooInterfaceSGIX(Layer *_layer, GLenum pname, const GLvoid *params)
  {
    driver_glIglooInterfaceSGIX(pname, params);
  }

// GL_SGIX_instruments

  static GLint REGAL_CALL missing_glGetInstrumentsSGIX(void)
  {
    Warning( "glGetInstrumentsSGIX", " not available." );
    return 0;
  }

  PFNGLGETINSTRUMENTSSGIXPROC driver_glGetInstrumentsSGIX = NULL;

  static GLint REGAL_CALL loader_glGetInstrumentsSGIX(Layer *_layer)
  {
    return driver_glGetInstrumentsSGIX();
  }

  static void REGAL_CALL missing_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(buffer);
    Warning( "glInstrumentsBufferSGIX", " not available." );
  }

  PFNGLINSTRUMENTSBUFFERSGIXPROC driver_glInstrumentsBufferSGIX = NULL;

  static void REGAL_CALL loader_glInstrumentsBufferSGIX(Layer *_layer, GLsizei size, GLint *buffer)
  {
    driver_glInstrumentsBufferSGIX(size, buffer);
  }

  static GLint REGAL_CALL missing_glPollInstrumentsSGIX(GLint *marker_p)
  {
    UNUSED_PARAMETER(marker_p);
    Warning( "glPollInstrumentsSGIX", " not available." );
    return 0;
  }

  PFNGLPOLLINSTRUMENTSSGIXPROC driver_glPollInstrumentsSGIX = NULL;

  static GLint REGAL_CALL loader_glPollInstrumentsSGIX(Layer *_layer, GLint *marker_p)
  {
    return driver_glPollInstrumentsSGIX(marker_p);
  }

  static void REGAL_CALL missing_glReadInstrumentsSGIX(GLint marker)
  {
    UNUSED_PARAMETER(marker);
    Warning( "glReadInstrumentsSGIX", " not available." );
  }

  PFNGLREADINSTRUMENTSSGIXPROC driver_glReadInstrumentsSGIX = NULL;

  static void REGAL_CALL loader_glReadInstrumentsSGIX(Layer *_layer, GLint marker)
  {
    driver_glReadInstrumentsSGIX(marker);
  }

  static void REGAL_CALL missing_glStartInstrumentsSGIX(void)
  {
    Warning( "glStartInstrumentsSGIX", " not available." );
  }

  PFNGLSTARTINSTRUMENTSSGIXPROC driver_glStartInstrumentsSGIX = NULL;

  static void REGAL_CALL loader_glStartInstrumentsSGIX(Layer *_layer)
  {
    driver_glStartInstrumentsSGIX();
  }

  static void REGAL_CALL missing_glStopInstrumentsSGIX(GLint marker)
  {
    UNUSED_PARAMETER(marker);
    Warning( "glStopInstrumentsSGIX", " not available." );
  }

  PFNGLSTOPINSTRUMENTSSGIXPROC driver_glStopInstrumentsSGIX = NULL;

  static void REGAL_CALL loader_glStopInstrumentsSGIX(Layer *_layer, GLint marker)
  {
    driver_glStopInstrumentsSGIX(marker);
  }

// GL_SGIX_list_priority

  static void REGAL_CALL missing_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetListParameterfvSGIX", " not available." );
  }

  PFNGLGETLISTPARAMETERFVSGIXPROC driver_glGetListParameterfvSGIX = NULL;

  static void REGAL_CALL loader_glGetListParameterfvSGIX(Layer *_layer, GLuint list, GLenum pname, GLfloat *params)
  {
    driver_glGetListParameterfvSGIX(list, pname, params);
  }

  static void REGAL_CALL missing_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetListParameterivSGIX", " not available." );
  }

  PFNGLGETLISTPARAMETERIVSGIXPROC driver_glGetListParameterivSGIX = NULL;

  static void REGAL_CALL loader_glGetListParameterivSGIX(Layer *_layer, GLuint list, GLenum pname, GLint *params)
  {
    driver_glGetListParameterivSGIX(list, pname, params);
  }

  static void REGAL_CALL missing_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glListParameterfSGIX", " not available." );
  }

  PFNGLLISTPARAMETERFSGIXPROC driver_glListParameterfSGIX = NULL;

  static void REGAL_CALL loader_glListParameterfSGIX(Layer *_layer, GLuint list, GLenum pname, GLfloat param)
  {
    driver_glListParameterfSGIX(list, pname, param);
  }

  static void REGAL_CALL missing_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glListParameterfvSGIX", " not available." );
  }

  PFNGLLISTPARAMETERFVSGIXPROC driver_glListParameterfvSGIX = NULL;

  static void REGAL_CALL loader_glListParameterfvSGIX(Layer *_layer, GLuint list, GLenum pname, const GLfloat *params)
  {
    driver_glListParameterfvSGIX(list, pname, params);
  }

  static void REGAL_CALL missing_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glListParameteriSGIX", " not available." );
  }

  PFNGLLISTPARAMETERISGIXPROC driver_glListParameteriSGIX = NULL;

  static void REGAL_CALL loader_glListParameteriSGIX(Layer *_layer, GLuint list, GLenum pname, GLint param)
  {
    driver_glListParameteriSGIX(list, pname, param);
  }

  static void REGAL_CALL missing_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(list);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glListParameterivSGIX", " not available." );
  }

  PFNGLLISTPARAMETERIVSGIXPROC driver_glListParameterivSGIX = NULL;

  static void REGAL_CALL loader_glListParameterivSGIX(Layer *_layer, GLuint list, GLenum pname, const GLint *params)
  {
    driver_glListParameterivSGIX(list, pname, params);
  }

// GL_SGIX_pixel_texture

  static void REGAL_CALL missing_glPixelTexGenSGIX(GLenum mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glPixelTexGenSGIX", " not available." );
  }

  PFNGLPIXELTEXGENSGIXPROC driver_glPixelTexGenSGIX = NULL;

  static void REGAL_CALL loader_glPixelTexGenSGIX(Layer *_layer, GLenum mode)
  {
    driver_glPixelTexGenSGIX(mode);
  }

// GL_SGIX_polynomial_ffd

  static void REGAL_CALL missing_glDeformSGIX(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glDeformSGIX", " not available." );
  }

  PFNGLDEFORMSGIXPROC driver_glDeformSGIX = NULL;

  static void REGAL_CALL loader_glDeformSGIX(Layer *_layer, GLbitfield mask)
  {
    driver_glDeformSGIX(mask);
  }

  static void REGAL_CALL missing_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(w1);
    UNUSED_PARAMETER(w2);
    UNUSED_PARAMETER(wstride);
    UNUSED_PARAMETER(worder);
    UNUSED_PARAMETER(points);
    Warning( "glDeformationMap3dSGIX", " not available." );
  }

  PFNGLDEFORMATIONMAP3DSGIXPROC driver_glDeformationMap3dSGIX = NULL;

  static void REGAL_CALL loader_glDeformationMap3dSGIX(Layer *_layer, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
  {
    driver_glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  }

  static void REGAL_CALL missing_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(u1);
    UNUSED_PARAMETER(u2);
    UNUSED_PARAMETER(ustride);
    UNUSED_PARAMETER(uorder);
    UNUSED_PARAMETER(v1);
    UNUSED_PARAMETER(v2);
    UNUSED_PARAMETER(vstride);
    UNUSED_PARAMETER(vorder);
    UNUSED_PARAMETER(w1);
    UNUSED_PARAMETER(w2);
    UNUSED_PARAMETER(wstride);
    UNUSED_PARAMETER(worder);
    UNUSED_PARAMETER(points);
    Warning( "glDeformationMap3fSGIX", " not available." );
  }

  PFNGLDEFORMATIONMAP3FSGIXPROC driver_glDeformationMap3fSGIX = NULL;

  static void REGAL_CALL loader_glDeformationMap3fSGIX(Layer *_layer, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
  {
    driver_glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  }

  static void REGAL_CALL missing_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "glLoadIdentityDeformationMapSGIX", " not available." );
  }

  PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC driver_glLoadIdentityDeformationMapSGIX = NULL;

  static void REGAL_CALL loader_glLoadIdentityDeformationMapSGIX(Layer *_layer, GLbitfield mask)
  {
    driver_glLoadIdentityDeformationMapSGIX(mask);
  }

// GL_SGIX_reference_plane

  static void REGAL_CALL missing_glReferencePlaneSGIX(const GLdouble *equation)
  {
    UNUSED_PARAMETER(equation);
    Warning( "glReferencePlaneSGIX", " not available." );
  }

  PFNGLREFERENCEPLANESGIXPROC driver_glReferencePlaneSGIX = NULL;

  static void REGAL_CALL loader_glReferencePlaneSGIX(Layer *_layer, const GLdouble *equation)
  {
    driver_glReferencePlaneSGIX(equation);
  }

// GL_SGIX_sprite

  static void REGAL_CALL missing_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glSpriteParameterfSGIX", " not available." );
  }

  PFNGLSPRITEPARAMETERFSGIXPROC driver_glSpriteParameterfSGIX = NULL;

  static void REGAL_CALL loader_glSpriteParameterfSGIX(Layer *_layer, GLenum pname, GLfloat param)
  {
    driver_glSpriteParameterfSGIX(pname, param);
  }

  static void REGAL_CALL missing_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSpriteParameterfvSGIX", " not available." );
  }

  PFNGLSPRITEPARAMETERFVSGIXPROC driver_glSpriteParameterfvSGIX = NULL;

  static void REGAL_CALL loader_glSpriteParameterfvSGIX(Layer *_layer, GLenum pname, const GLfloat *params)
  {
    driver_glSpriteParameterfvSGIX(pname, params);
  }

  static void REGAL_CALL missing_glSpriteParameteriSGIX(GLenum pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "glSpriteParameteriSGIX", " not available." );
  }

  PFNGLSPRITEPARAMETERISGIXPROC driver_glSpriteParameteriSGIX = NULL;

  static void REGAL_CALL loader_glSpriteParameteriSGIX(Layer *_layer, GLenum pname, GLint param)
  {
    driver_glSpriteParameteriSGIX(pname, param);
  }

  static void REGAL_CALL missing_glSpriteParameterivSGIX(GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glSpriteParameterivSGIX", " not available." );
  }

  PFNGLSPRITEPARAMETERIVSGIXPROC driver_glSpriteParameterivSGIX = NULL;

  static void REGAL_CALL loader_glSpriteParameterivSGIX(Layer *_layer, GLenum pname, const GLint *params)
  {
    driver_glSpriteParameterivSGIX(pname, params);
  }

// GL_SGIX_tag_sample_buffer

  static void REGAL_CALL missing_glTagSampleBufferSGIX(void)
  {
    Warning( "glTagSampleBufferSGIX", " not available." );
  }

  PFNGLTAGSAMPLEBUFFERSGIXPROC driver_glTagSampleBufferSGIX = NULL;

  static void REGAL_CALL loader_glTagSampleBufferSGIX(Layer *_layer)
  {
    driver_glTagSampleBufferSGIX();
  }

// GL_SGI_color_table

  static void REGAL_CALL missing_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glColorTableParameterfvSGI", " not available." );
  }

  PFNGLCOLORTABLEPARAMETERFVSGIPROC driver_glColorTableParameterfvSGI = NULL;

  static void REGAL_CALL loader_glColorTableParameterfvSGI(Layer *_layer, GLenum target, GLenum pname, const GLfloat *params)
  {
    driver_glColorTableParameterfvSGI(target, pname, params);
  }

  static void REGAL_CALL missing_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glColorTableParameterivSGI", " not available." );
  }

  PFNGLCOLORTABLEPARAMETERIVSGIPROC driver_glColorTableParameterivSGI = NULL;

  static void REGAL_CALL loader_glColorTableParameterivSGI(Layer *_layer, GLenum target, GLenum pname, const GLint *params)
  {
    driver_glColorTableParameterivSGI(target, pname, params);
  }

  static void REGAL_CALL missing_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glColorTableSGI", " not available." );
  }

  PFNGLCOLORTABLESGIPROC driver_glColorTableSGI = NULL;

  static void REGAL_CALL loader_glColorTableSGI(Layer *_layer, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
  {
    driver_glColorTableSGI(target, internalformat, width, format, type, table);
  }

  static void REGAL_CALL missing_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalformat);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    Warning( "glCopyColorTableSGI", " not available." );
  }

  PFNGLCOPYCOLORTABLESGIPROC driver_glCopyColorTableSGI = NULL;

  static void REGAL_CALL loader_glCopyColorTableSGI(Layer *_layer, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
  {
    driver_glCopyColorTableSGI(target, internalformat, x, y, width);
  }

  static void REGAL_CALL missing_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterfvSGI", " not available." );
  }

  PFNGLGETCOLORTABLEPARAMETERFVSGIPROC driver_glGetColorTableParameterfvSGI = NULL;

  static void REGAL_CALL loader_glGetColorTableParameterfvSGI(Layer *_layer, GLenum target, GLenum pname, GLfloat *params)
  {
    driver_glGetColorTableParameterfvSGI(target, pname, params);
  }

  static void REGAL_CALL missing_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "glGetColorTableParameterivSGI", " not available." );
  }

  PFNGLGETCOLORTABLEPARAMETERIVSGIPROC driver_glGetColorTableParameterivSGI = NULL;

  static void REGAL_CALL loader_glGetColorTableParameterivSGI(Layer *_layer, GLenum target, GLenum pname, GLint *params)
  {
    driver_glGetColorTableParameterivSGI(target, pname, params);
  }

  static void REGAL_CALL missing_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
  {
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(table);
    Warning( "glGetColorTableSGI", " not available." );
  }

  PFNGLGETCOLORTABLESGIPROC driver_glGetColorTableSGI = NULL;

  static void REGAL_CALL loader_glGetColorTableSGI(Layer *_layer, GLenum target, GLenum format, GLenum type, GLvoid *table)
  {
    driver_glGetColorTableSGI(target, format, type, table);
  }

// GL_SUNX_constant_data

  static void REGAL_CALL missing_glFinishTextureSUNX(void)
  {
    Warning( "glFinishTextureSUNX", " not available." );
  }

  PFNGLFINISHTEXTURESUNXPROC driver_glFinishTextureSUNX = NULL;

  static void REGAL_CALL loader_glFinishTextureSUNX(Layer *_layer)
  {
    driver_glFinishTextureSUNX();
  }

// GL_SUN_global_alpha

  static void REGAL_CALL missing_glGlobalAlphaFactorbSUN(GLbyte factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorbSUN", " not available." );
  }

  PFNGLGLOBALALPHAFACTORBSUNPROC driver_glGlobalAlphaFactorbSUN = NULL;

  static void REGAL_CALL loader_glGlobalAlphaFactorbSUN(Layer *_layer, GLbyte factor)
  {
    driver_glGlobalAlphaFactorbSUN(factor);
  }

  static void REGAL_CALL missing_glGlobalAlphaFactordSUN(GLdouble factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactordSUN", " not available." );
  }

  PFNGLGLOBALALPHAFACTORDSUNPROC driver_glGlobalAlphaFactordSUN = NULL;

  static void REGAL_CALL loader_glGlobalAlphaFactordSUN(Layer *_layer, GLdouble factor)
  {
    driver_glGlobalAlphaFactordSUN(factor);
  }

  static void REGAL_CALL missing_glGlobalAlphaFactorfSUN(GLfloat factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorfSUN", " not available." );
  }

  PFNGLGLOBALALPHAFACTORFSUNPROC driver_glGlobalAlphaFactorfSUN = NULL;

  static void REGAL_CALL loader_glGlobalAlphaFactorfSUN(Layer *_layer, GLfloat factor)
  {
    driver_glGlobalAlphaFactorfSUN(factor);
  }

  static void REGAL_CALL missing_glGlobalAlphaFactoriSUN(GLint factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactoriSUN", " not available." );
  }

  PFNGLGLOBALALPHAFACTORISUNPROC driver_glGlobalAlphaFactoriSUN = NULL;

  static void REGAL_CALL loader_glGlobalAlphaFactoriSUN(Layer *_layer, GLint factor)
  {
    driver_glGlobalAlphaFactoriSUN(factor);
  }

  static void REGAL_CALL missing_glGlobalAlphaFactorsSUN(GLshort factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorsSUN", " not available." );
  }

  PFNGLGLOBALALPHAFACTORSSUNPROC driver_glGlobalAlphaFactorsSUN = NULL;

  static void REGAL_CALL loader_glGlobalAlphaFactorsSUN(Layer *_layer, GLshort factor)
  {
    driver_glGlobalAlphaFactorsSUN(factor);
  }

  static void REGAL_CALL missing_glGlobalAlphaFactorubSUN(GLubyte factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorubSUN", " not available." );
  }

  PFNGLGLOBALALPHAFACTORUBSUNPROC driver_glGlobalAlphaFactorubSUN = NULL;

  static void REGAL_CALL loader_glGlobalAlphaFactorubSUN(Layer *_layer, GLubyte factor)
  {
    driver_glGlobalAlphaFactorubSUN(factor);
  }

  static void REGAL_CALL missing_glGlobalAlphaFactoruiSUN(GLuint factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactoruiSUN", " not available." );
  }

  PFNGLGLOBALALPHAFACTORUISUNPROC driver_glGlobalAlphaFactoruiSUN = NULL;

  static void REGAL_CALL loader_glGlobalAlphaFactoruiSUN(Layer *_layer, GLuint factor)
  {
    driver_glGlobalAlphaFactoruiSUN(factor);
  }

  static void REGAL_CALL missing_glGlobalAlphaFactorusSUN(GLushort factor)
  {
    UNUSED_PARAMETER(factor);
    Warning( "glGlobalAlphaFactorusSUN", " not available." );
  }

  PFNGLGLOBALALPHAFACTORUSSUNPROC driver_glGlobalAlphaFactorusSUN = NULL;

  static void REGAL_CALL loader_glGlobalAlphaFactorusSUN(Layer *_layer, GLushort factor)
  {
    driver_glGlobalAlphaFactorusSUN(factor);
  }

// GL_SUN_mesh_array

  static void REGAL_CALL missing_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
  {
    UNUSED_PARAMETER(mode);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(width);
    Warning( "glDrawMeshArraysSUN", " not available." );
  }

  PFNGLDRAWMESHARRAYSSUNPROC driver_glDrawMeshArraysSUN = NULL;

  static void REGAL_CALL loader_glDrawMeshArraysSUN(Layer *_layer, GLenum mode, GLint first, GLsizei count, GLsizei width)
  {
    driver_glDrawMeshArraysSUN(mode, first, count, width);
  }

// GL_SUN_read_video_pixels

  static void REGAL_CALL missing_glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(pixels);
    Warning( "glReadVideoPixelsSUN", " not available." );
  }

  PFNGLREADVIDEOPIXELSSUNPROC driver_glReadVideoPixelsSUN = NULL;

  static void REGAL_CALL loader_glReadVideoPixelsSUN(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
  {
    driver_glReadVideoPixelsSUN(x, y, width, height, format, type, pixels);
  }

// GL_SUN_triangle_list

  static void REGAL_CALL missing_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
  {
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(stride);
    UNUSED_PARAMETER(pointer);
    Warning( "glReplacementCodePointerSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEPOINTERSUNPROC driver_glReplacementCodePointerSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodePointerSUN(Layer *_layer, GLenum type, GLsizei stride, const GLvoid **pointer)
  {
    driver_glReplacementCodePointerSUN(type, stride, pointer);
  }

  static void REGAL_CALL missing_glReplacementCodeubSUN(GLubyte code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeubSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUBSUNPROC driver_glReplacementCodeubSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeubSUN(Layer *_layer, GLubyte code)
  {
    driver_glReplacementCodeubSUN(code);
  }

  static void REGAL_CALL missing_glReplacementCodeubvSUN(const GLubyte *code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeubvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUBVSUNPROC driver_glReplacementCodeubvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeubvSUN(Layer *_layer, const GLubyte *code)
  {
    driver_glReplacementCodeubvSUN(code);
  }

  static void REGAL_CALL missing_glReplacementCodeuiSUN(GLuint code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeuiSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUISUNPROC driver_glReplacementCodeuiSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiSUN(Layer *_layer, GLuint code)
  {
    driver_glReplacementCodeuiSUN(code);
  }

  static void REGAL_CALL missing_glReplacementCodeuivSUN(const GLuint *code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeuivSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUIVSUNPROC driver_glReplacementCodeuivSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuivSUN(Layer *_layer, const GLuint *code)
  {
    driver_glReplacementCodeuivSUN(code);
  }

  static void REGAL_CALL missing_glReplacementCodeusSUN(GLushort code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeusSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUSSUNPROC driver_glReplacementCodeusSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeusSUN(Layer *_layer, GLushort code)
  {
    driver_glReplacementCodeusSUN(code);
  }

  static void REGAL_CALL missing_glReplacementCodeusvSUN(const GLushort *code)
  {
    UNUSED_PARAMETER(code);
    Warning( "glReplacementCodeusvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUSVSUNPROC driver_glReplacementCodeusvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeusvSUN(Layer *_layer, const GLushort *code)
  {
    driver_glReplacementCodeusvSUN(code);
  }

// GL_SUN_vertex

  static void REGAL_CALL missing_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glColor3fVertex3fSUN", " not available." );
  }

  PFNGLCOLOR3FVERTEX3FSUNPROC driver_glColor3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glColor3fVertex3fSUN(Layer *_layer, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glColor3fVertex3fSUN(r, g, b, x, y, z);
  }

  static void REGAL_CALL missing_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glColor3fVertex3fvSUN", " not available." );
  }

  PFNGLCOLOR3FVERTEX3FVSUNPROC driver_glColor3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glColor3fVertex3fvSUN(Layer *_layer, const GLfloat *c, const GLfloat *v)
  {
    driver_glColor3fVertex3fvSUN(c, v);
  }

  static void REGAL_CALL missing_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glColor4fNormal3fVertex3fSUN", " not available." );
  }

  PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC driver_glColor4fNormal3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glColor4fNormal3fVertex3fSUN(Layer *_layer, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
  }

  static void REGAL_CALL missing_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glColor4fNormal3fVertex3fvSUN", " not available." );
  }

  PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC driver_glColor4fNormal3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glColor4fNormal3fVertex3fvSUN(Layer *_layer, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    driver_glColor4fNormal3fVertex3fvSUN(c, n, v);
  }

  static void REGAL_CALL missing_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
  {
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    Warning( "glColor4ubVertex2fSUN", " not available." );
  }

  PFNGLCOLOR4UBVERTEX2FSUNPROC driver_glColor4ubVertex2fSUN = NULL;

  static void REGAL_CALL loader_glColor4ubVertex2fSUN(Layer *_layer, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
  {
    driver_glColor4ubVertex2fSUN(r, g, b, a, x, y);
  }

  static void REGAL_CALL missing_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glColor4ubVertex2fvSUN", " not available." );
  }

  PFNGLCOLOR4UBVERTEX2FVSUNPROC driver_glColor4ubVertex2fvSUN = NULL;

  static void REGAL_CALL loader_glColor4ubVertex2fvSUN(Layer *_layer, const GLubyte *c, const GLfloat *v)
  {
    driver_glColor4ubVertex2fvSUN(c, v);
  }

  static void REGAL_CALL missing_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glColor4ubVertex3fSUN", " not available." );
  }

  PFNGLCOLOR4UBVERTEX3FSUNPROC driver_glColor4ubVertex3fSUN = NULL;

  static void REGAL_CALL loader_glColor4ubVertex3fSUN(Layer *_layer, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
  }

  static void REGAL_CALL missing_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glColor4ubVertex3fvSUN", " not available." );
  }

  PFNGLCOLOR4UBVERTEX3FVSUNPROC driver_glColor4ubVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glColor4ubVertex3fvSUN(Layer *_layer, const GLubyte *c, const GLfloat *v)
  {
    driver_glColor4ubVertex3fvSUN(c, v);
  }

  static void REGAL_CALL missing_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glNormal3fVertex3fSUN", " not available." );
  }

  PFNGLNORMAL3FVERTEX3FSUNPROC driver_glNormal3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glNormal3fVertex3fSUN(Layer *_layer, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
  }

  static void REGAL_CALL missing_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glNormal3fVertex3fvSUN", " not available." );
  }

  PFNGLNORMAL3FVERTEX3FVSUNPROC driver_glNormal3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glNormal3fVertex3fvSUN(Layer *_layer, const GLfloat *n, const GLfloat *v)
  {
    driver_glNormal3fVertex3fvSUN(n, v);
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiColor3fVertex3fSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC driver_glReplacementCodeuiColor3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiColor3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiColor3fVertex3fvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC driver_glReplacementCodeuiColor3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiColor3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *c, const GLfloat *v)
  {
    driver_glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiColor4fNormal3fVertex3fSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC driver_glReplacementCodeuiColor4fNormal3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiColor4fNormal3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC driver_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    driver_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiColor4ubVertex3fSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC driver_glReplacementCodeuiColor4ubVertex3fSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiColor4ubVertex3fSUN(Layer *_layer, GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
  }

  static void REGAL_CALL missing_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiColor4ubVertex3fvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC driver_glReplacementCodeuiColor4ubVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiColor4ubVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLubyte *c, const GLfloat *v)
  {
    driver_glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
  }

  static void REGAL_CALL missing_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiNormal3fVertex3fSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC driver_glReplacementCodeuiNormal3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiNormal3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
  }

  static void REGAL_CALL missing_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiNormal3fVertex3fvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC driver_glReplacementCodeuiNormal3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiNormal3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *n, const GLfloat *v)
  {
    driver_glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
  {
    driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiTexCoord2fVertex3fSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC driver_glReplacementCodeuiTexCoord2fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiTexCoord2fVertex3fSUN(Layer *_layer, GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
  }

  static void REGAL_CALL missing_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiTexCoord2fVertex3fvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC driver_glReplacementCodeuiTexCoord2fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiTexCoord2fVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *tc, const GLfloat *v)
  {
    driver_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
  }

  static void REGAL_CALL missing_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glReplacementCodeuiVertex3fSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC driver_glReplacementCodeuiVertex3fSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiVertex3fSUN(Layer *_layer, GLuint rc, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glReplacementCodeuiVertex3fSUN(rc, x, y, z);
  }

  static void REGAL_CALL missing_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
  {
    UNUSED_PARAMETER(rc);
    UNUSED_PARAMETER(v);
    Warning( "glReplacementCodeuiVertex3fvSUN", " not available." );
  }

  PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC driver_glReplacementCodeuiVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glReplacementCodeuiVertex3fvSUN(Layer *_layer, const GLuint *rc, const GLfloat *v)
  {
    driver_glReplacementCodeuiVertex3fvSUN(rc, v);
  }

  static void REGAL_CALL missing_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fColor3fVertex3fSUN", " not available." );
  }

  PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC driver_glTexCoord2fColor3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fColor3fVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
  }

  static void REGAL_CALL missing_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fColor3fVertex3fvSUN", " not available." );
  }

  PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC driver_glTexCoord2fColor3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fColor3fVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *c, const GLfloat *v)
  {
    driver_glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
  }

  static void REGAL_CALL missing_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fColor4fNormal3fVertex3fSUN", " not available." );
  }

  PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC driver_glTexCoord2fColor4fNormal3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fColor4fNormal3fVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
  }

  static void REGAL_CALL missing_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fColor4fNormal3fVertex3fvSUN", " not available." );
  }

  PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC driver_glTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fColor4fNormal3fVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    driver_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
  }

  static void REGAL_CALL missing_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fColor4ubVertex3fSUN", " not available." );
  }

  PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC driver_glTexCoord2fColor4ubVertex3fSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fColor4ubVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
  }

  static void REGAL_CALL missing_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fColor4ubVertex3fvSUN", " not available." );
  }

  PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC driver_glTexCoord2fColor4ubVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fColor4ubVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLubyte *c, const GLfloat *v)
  {
    driver_glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
  }

  static void REGAL_CALL missing_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fNormal3fVertex3fSUN", " not available." );
  }

  PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC driver_glTexCoord2fNormal3fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fNormal3fVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
  }

  static void REGAL_CALL missing_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fNormal3fVertex3fvSUN", " not available." );
  }

  PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC driver_glTexCoord2fNormal3fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fNormal3fVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
  {
    driver_glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
  }

  static void REGAL_CALL missing_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    Warning( "glTexCoord2fVertex3fSUN", " not available." );
  }

  PFNGLTEXCOORD2FVERTEX3FSUNPROC driver_glTexCoord2fVertex3fSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fVertex3fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
  {
    driver_glTexCoord2fVertex3fSUN(s, t, x, y, z);
  }

  static void REGAL_CALL missing_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord2fVertex3fvSUN", " not available." );
  }

  PFNGLTEXCOORD2FVERTEX3FVSUNPROC driver_glTexCoord2fVertex3fvSUN = NULL;

  static void REGAL_CALL loader_glTexCoord2fVertex3fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *v)
  {
    driver_glTexCoord2fVertex3fvSUN(tc, v);
  }

  static void REGAL_CALL missing_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(p);
    UNUSED_PARAMETER(q);
    UNUSED_PARAMETER(r);
    UNUSED_PARAMETER(g);
    UNUSED_PARAMETER(b);
    UNUSED_PARAMETER(a);
    UNUSED_PARAMETER(nx);
    UNUSED_PARAMETER(ny);
    UNUSED_PARAMETER(nz);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glTexCoord4fColor4fNormal3fVertex4fSUN", " not available." );
  }

  PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC driver_glTexCoord4fColor4fNormal3fVertex4fSUN = NULL;

  static void REGAL_CALL loader_glTexCoord4fColor4fNormal3fVertex4fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
  }

  static void REGAL_CALL missing_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(c);
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4fColor4fNormal3fVertex4fvSUN", " not available." );
  }

  PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC driver_glTexCoord4fColor4fNormal3fVertex4fvSUN = NULL;

  static void REGAL_CALL loader_glTexCoord4fColor4fNormal3fVertex4fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
  {
    driver_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
  }

  static void REGAL_CALL missing_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    UNUSED_PARAMETER(s);
    UNUSED_PARAMETER(t);
    UNUSED_PARAMETER(p);
    UNUSED_PARAMETER(q);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(z);
    UNUSED_PARAMETER(w);
    Warning( "glTexCoord4fVertex4fSUN", " not available." );
  }

  PFNGLTEXCOORD4FVERTEX4FSUNPROC driver_glTexCoord4fVertex4fSUN = NULL;

  static void REGAL_CALL loader_glTexCoord4fVertex4fSUN(Layer *_layer, GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    driver_glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
  }

  static void REGAL_CALL missing_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
  {
    UNUSED_PARAMETER(tc);
    UNUSED_PARAMETER(v);
    Warning( "glTexCoord4fVertex4fvSUN", " not available." );
  }

  PFNGLTEXCOORD4FVERTEX4FVSUNPROC driver_glTexCoord4fVertex4fvSUN = NULL;

  static void REGAL_CALL loader_glTexCoord4fVertex4fvSUN(Layer *_layer, const GLfloat *tc, const GLfloat *v)
  {
    driver_glTexCoord4fVertex4fvSUN(tc, v);
  }

// GL_WIN_swap_hint

  static void REGAL_CALL missing_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
  {
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glAddSwapHintRectWIN", " not available." );
  }

  PFNGLADDSWAPHINTRECTWINPROC driver_glAddSwapHintRectWIN = NULL;

  static void REGAL_CALL loader_glAddSwapHintRectWIN(Layer *_layer, GLint x, GLint y, GLsizei width, GLsizei height)
  {
    driver_glAddSwapHintRectWIN(x, y, width, height);
  }

#if REGAL_SYS_WGL

// WGL_3DL_stereo_control

  static BOOL REGAL_CALL missing_wglSetStereoEmitterState3DL(HDC hDC, UINT uState)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uState);
    Warning( "wglSetStereoEmitterState3DL", " not available." );
    return 0;
  }

  PFNWGLSETSTEREOEMITTERSTATE3DLPROC driver_wglSetStereoEmitterState3DL = NULL;

  static BOOL REGAL_CALL loader_wglSetStereoEmitterState3DL(Layer *_layer, HDC hDC, UINT uState)
  {
    return driver_wglSetStereoEmitterState3DL(hDC, uState);
  }

// WGL_AMD_gpu_association

  static VOID REGAL_CALL missing_wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(dstCtx);
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "wglBlitContextFramebufferAMD", " not available." );
  }

  PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC driver_wglBlitContextFramebufferAMD = NULL;

  static VOID REGAL_CALL loader_wglBlitContextFramebufferAMD(Layer *_layer, HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    driver_wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  static HGLRC REGAL_CALL missing_wglCreateAssociatedContextAMD(UINT id)
  {
    UNUSED_PARAMETER(id);
    Warning( "wglCreateAssociatedContextAMD", " not available." );
    return NULL;
  }

  PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC driver_wglCreateAssociatedContextAMD = NULL;

  static HGLRC REGAL_CALL loader_wglCreateAssociatedContextAMD(Layer *_layer, UINT id)
  {
    return driver_wglCreateAssociatedContextAMD(id);
  }

  static HGLRC REGAL_CALL missing_wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int *attribList)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(hShareContext);
    UNUSED_PARAMETER(attribList);
    Warning( "wglCreateAssociatedContextAttribsAMD", " not available." );
    return NULL;
  }

  PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC driver_wglCreateAssociatedContextAttribsAMD = NULL;

  static HGLRC REGAL_CALL loader_wglCreateAssociatedContextAttribsAMD(Layer *_layer, UINT id, HGLRC hShareContext, const int *attribList)
  {
    return driver_wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList);
  }

  static BOOL REGAL_CALL missing_wglDeleteAssociatedContextAMD(HGLRC hglrc)
  {
    UNUSED_PARAMETER(hglrc);
    Warning( "wglDeleteAssociatedContextAMD", " not available." );
    return 0;
  }

  PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC driver_wglDeleteAssociatedContextAMD = NULL;

  static BOOL REGAL_CALL loader_wglDeleteAssociatedContextAMD(Layer *_layer, HGLRC hglrc)
  {
    return driver_wglDeleteAssociatedContextAMD(hglrc);
  }

  static UINT REGAL_CALL missing_wglGetContextGPUIDAMD(HGLRC hglrc)
  {
    UNUSED_PARAMETER(hglrc);
    Warning( "wglGetContextGPUIDAMD", " not available." );
    return 0;
  }

  PFNWGLGETCONTEXTGPUIDAMDPROC driver_wglGetContextGPUIDAMD = NULL;

  static UINT REGAL_CALL loader_wglGetContextGPUIDAMD(Layer *_layer, HGLRC hglrc)
  {
    return driver_wglGetContextGPUIDAMD(hglrc);
  }

  static HGLRC REGAL_CALL missing_wglGetCurrentAssociatedContextAMD(void)
  {
    Warning( "wglGetCurrentAssociatedContextAMD", " not available." );
    return NULL;
  }

  PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC driver_wglGetCurrentAssociatedContextAMD = NULL;

  static HGLRC REGAL_CALL loader_wglGetCurrentAssociatedContextAMD(Layer *_layer)
  {
    return driver_wglGetCurrentAssociatedContextAMD();
  }

  static UINT REGAL_CALL missing_wglGetGPUIDsAMD(UINT maxCount, UINT *ids)
  {
    UNUSED_PARAMETER(maxCount);
    UNUSED_PARAMETER(ids);
    Warning( "wglGetGPUIDsAMD", " not available." );
    return 0;
  }

  PFNWGLGETGPUIDSAMDPROC driver_wglGetGPUIDsAMD = NULL;

  static UINT REGAL_CALL loader_wglGetGPUIDsAMD(Layer *_layer, UINT maxCount, UINT *ids)
  {
    return driver_wglGetGPUIDsAMD(maxCount, ids);
  }

  static INT REGAL_CALL missing_wglGetGPUInfoAMD(UINT id, int property, GLenum dataType, UINT size, void *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(property);
    UNUSED_PARAMETER(dataType);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "wglGetGPUInfoAMD", " not available." );
    return 0;
  }

  PFNWGLGETGPUINFOAMDPROC driver_wglGetGPUInfoAMD = NULL;

  static INT REGAL_CALL loader_wglGetGPUInfoAMD(Layer *_layer, UINT id, int property, GLenum dataType, UINT size, void *data)
  {
    return driver_wglGetGPUInfoAMD(id, property, dataType, size, data);
  }

  static BOOL REGAL_CALL missing_wglMakeAssociatedContextCurrentAMD(HGLRC hglrc)
  {
    UNUSED_PARAMETER(hglrc);
    Warning( "wglMakeAssociatedContextCurrentAMD", " not available." );
    return 0;
  }

  PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC driver_wglMakeAssociatedContextCurrentAMD = NULL;

  static BOOL REGAL_CALL loader_wglMakeAssociatedContextCurrentAMD(Layer *_layer, HGLRC hglrc)
  {
    return driver_wglMakeAssociatedContextCurrentAMD(hglrc);
  }

// WGL_ARB_buffer_region

  static HANDLE REGAL_CALL missing_wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(uType);
    Warning( "wglCreateBufferRegionARB", " not available." );
    return 0;
  }

  PFNWGLCREATEBUFFERREGIONARBPROC driver_wglCreateBufferRegionARB = NULL;

  static HANDLE REGAL_CALL loader_wglCreateBufferRegionARB(Layer *_layer, HDC hDC, int iLayerPlane, UINT uType)
  {
    return driver_wglCreateBufferRegionARB(hDC, iLayerPlane, uType);
  }

  static VOID REGAL_CALL missing_wglDeleteBufferRegionARB(HANDLE hRegion)
  {
    UNUSED_PARAMETER(hRegion);
    Warning( "wglDeleteBufferRegionARB", " not available." );
  }

  PFNWGLDELETEBUFFERREGIONARBPROC driver_wglDeleteBufferRegionARB = NULL;

  static VOID REGAL_CALL loader_wglDeleteBufferRegionARB(Layer *_layer, HANDLE hRegion)
  {
    driver_wglDeleteBufferRegionARB(hRegion);
  }

  static BOOL REGAL_CALL missing_wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
  {
    UNUSED_PARAMETER(hRegion);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(xSrc);
    UNUSED_PARAMETER(ySrc);
    Warning( "wglRestoreBufferRegionARB", " not available." );
    return 0;
  }

  PFNWGLRESTOREBUFFERREGIONARBPROC driver_wglRestoreBufferRegionARB = NULL;

  static BOOL REGAL_CALL loader_wglRestoreBufferRegionARB(Layer *_layer, HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
  {
    return driver_wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc);
  }

  static BOOL REGAL_CALL missing_wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height)
  {
    UNUSED_PARAMETER(hRegion);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "wglSaveBufferRegionARB", " not available." );
    return 0;
  }

  PFNWGLSAVEBUFFERREGIONARBPROC driver_wglSaveBufferRegionARB = NULL;

  static BOOL REGAL_CALL loader_wglSaveBufferRegionARB(Layer *_layer, HANDLE hRegion, int x, int y, int width, int height)
  {
    return driver_wglSaveBufferRegionARB(hRegion, x, y, width, height);
  }

// WGL_ARB_create_context

  static HGLRC REGAL_CALL missing_wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *piAttribList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hShareContext);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglCreateContextAttribsARB", " not available." );
    return NULL;
  }

  PFNWGLCREATECONTEXTATTRIBSARBPROC driver_wglCreateContextAttribsARB = NULL;

  static HGLRC REGAL_CALL loader_wglCreateContextAttribsARB(Layer *_layer, HDC hDC, HGLRC hShareContext, const int *piAttribList)
  {
    return driver_wglCreateContextAttribsARB(hDC, hShareContext, piAttribList);
  }

// WGL_ARB_extensions_string

  static const char *REGAL_CALL missing_wglGetExtensionsStringARB(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglGetExtensionsStringARB", " not available." );
    return NULL;
  }

  PFNWGLGETEXTENSIONSSTRINGARBPROC driver_wglGetExtensionsStringARB = NULL;

  static const char *REGAL_CALL loader_wglGetExtensionsStringARB(Layer *_layer, HDC hDC)
  {
    return driver_wglGetExtensionsStringARB(hDC);
  }

// WGL_ARB_make_current_read

  static HDC REGAL_CALL missing_wglGetCurrentReadDCARB(void)
  {
    Warning( "wglGetCurrentReadDCARB", " not available." );
    return NULL;
  }

  PFNWGLGETCURRENTREADDCARBPROC driver_wglGetCurrentReadDCARB = NULL;

  static HDC REGAL_CALL loader_wglGetCurrentReadDCARB(Layer *_layer)
  {
    return driver_wglGetCurrentReadDCARB();
  }

  static BOOL REGAL_CALL missing_wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
  {
    UNUSED_PARAMETER(hDrawDC);
    UNUSED_PARAMETER(hReadDC);
    UNUSED_PARAMETER(hglrc);
    Warning( "wglMakeContextCurrentARB", " not available." );
    return 0;
  }

  PFNWGLMAKECONTEXTCURRENTARBPROC driver_wglMakeContextCurrentARB = NULL;

  static BOOL REGAL_CALL loader_wglMakeContextCurrentARB(Layer *_layer, HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
  {
    return driver_wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc);
  }

// WGL_ARB_pbuffer

  static HPBUFFERARB REGAL_CALL missing_wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iWidth);
    UNUSED_PARAMETER(iHeight);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglCreatePbufferARB", " not available." );
    return (HPBUFFERARB) 0;
  }

  PFNWGLCREATEPBUFFERARBPROC driver_wglCreatePbufferARB = NULL;

  static HPBUFFERARB REGAL_CALL loader_wglCreatePbufferARB(Layer *_layer, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
  {
    return driver_wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }

  static BOOL REGAL_CALL missing_wglDestroyPbufferARB(HPBUFFERARB hPbuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    Warning( "wglDestroyPbufferARB", " not available." );
    return 0;
  }

  PFNWGLDESTROYPBUFFERARBPROC driver_wglDestroyPbufferARB = NULL;

  static BOOL REGAL_CALL loader_wglDestroyPbufferARB(Layer *_layer, HPBUFFERARB hPbuffer)
  {
    return driver_wglDestroyPbufferARB(hPbuffer);
  }

  static HDC REGAL_CALL missing_wglGetPbufferDCARB(HPBUFFERARB hPbuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    Warning( "wglGetPbufferDCARB", " not available." );
    return NULL;
  }

  PFNWGLGETPBUFFERDCARBPROC driver_wglGetPbufferDCARB = NULL;

  static HDC REGAL_CALL loader_wglGetPbufferDCARB(Layer *_layer, HPBUFFERARB hPbuffer)
  {
    return driver_wglGetPbufferDCARB(hPbuffer);
  }

  static BOOL REGAL_CALL missing_wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglQueryPbufferARB", " not available." );
    return 0;
  }

  PFNWGLQUERYPBUFFERARBPROC driver_wglQueryPbufferARB = NULL;

  static BOOL REGAL_CALL loader_wglQueryPbufferARB(Layer *_layer, HPBUFFERARB hPbuffer, int iAttribute, int *piValue)
  {
    return driver_wglQueryPbufferARB(hPbuffer, iAttribute, piValue);
  }

  static int REGAL_CALL missing_wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(hDC);
    Warning( "wglReleasePbufferDCARB", " not available." );
    return 0;
  }

  PFNWGLRELEASEPBUFFERDCARBPROC driver_wglReleasePbufferDCARB = NULL;

  static int REGAL_CALL loader_wglReleasePbufferDCARB(Layer *_layer, HPBUFFERARB hPbuffer, HDC hDC)
  {
    return driver_wglReleasePbufferDCARB(hPbuffer, hDC);
  }

// WGL_ARB_pixel_format

  static BOOL REGAL_CALL missing_wglChoosePixelFormatARB(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(piAttribIList);
    UNUSED_PARAMETER(pfAttribFList);
    UNUSED_PARAMETER(nMaxFormats);
    UNUSED_PARAMETER(piFormats);
    UNUSED_PARAMETER(nNumFormats);
    Warning( "wglChoosePixelFormatARB", " not available." );
    return 0;
  }

  PFNWGLCHOOSEPIXELFORMATARBPROC driver_wglChoosePixelFormatARB = NULL;

  static BOOL REGAL_CALL loader_wglChoosePixelFormatARB(Layer *_layer, HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
  {
    return driver_wglChoosePixelFormatARB(hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }

  static BOOL REGAL_CALL missing_wglGetPixelFormatAttribfvARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nAttributes);
    UNUSED_PARAMETER(piAttributes);
    UNUSED_PARAMETER(pfValues);
    Warning( "wglGetPixelFormatAttribfvARB", " not available." );
    return 0;
  }

  PFNWGLGETPIXELFORMATATTRIBFVARBPROC driver_wglGetPixelFormatAttribfvARB = NULL;

  static BOOL REGAL_CALL loader_wglGetPixelFormatAttribfvARB(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
  {
    return driver_wglGetPixelFormatAttribfvARB(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }

  static BOOL REGAL_CALL missing_wglGetPixelFormatAttribivARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nAttributes);
    UNUSED_PARAMETER(piAttributes);
    UNUSED_PARAMETER(piValues);
    Warning( "wglGetPixelFormatAttribivARB", " not available." );
    return 0;
  }

  PFNWGLGETPIXELFORMATATTRIBIVARBPROC driver_wglGetPixelFormatAttribivARB = NULL;

  static BOOL REGAL_CALL loader_wglGetPixelFormatAttribivARB(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
  {
    return driver_wglGetPixelFormatAttribivARB(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }

// WGL_ARB_render_texture

  static BOOL REGAL_CALL missing_wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iBuffer);
    Warning( "wglBindTexImageARB", " not available." );
    return 0;
  }

  PFNWGLBINDTEXIMAGEARBPROC driver_wglBindTexImageARB = NULL;

  static BOOL REGAL_CALL loader_wglBindTexImageARB(Layer *_layer, HPBUFFERARB hPbuffer, int iBuffer)
  {
    return driver_wglBindTexImageARB(hPbuffer, iBuffer);
  }

  static BOOL REGAL_CALL missing_wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iBuffer);
    Warning( "wglReleaseTexImageARB", " not available." );
    return 0;
  }

  PFNWGLRELEASETEXIMAGEARBPROC driver_wglReleaseTexImageARB = NULL;

  static BOOL REGAL_CALL loader_wglReleaseTexImageARB(Layer *_layer, HPBUFFERARB hPbuffer, int iBuffer)
  {
    return driver_wglReleaseTexImageARB(hPbuffer, iBuffer);
  }

  static BOOL REGAL_CALL missing_wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int *piAttribList)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglSetPbufferAttribARB", " not available." );
    return 0;
  }

  PFNWGLSETPBUFFERATTRIBARBPROC driver_wglSetPbufferAttribARB = NULL;

  static BOOL REGAL_CALL loader_wglSetPbufferAttribARB(Layer *_layer, HPBUFFERARB hPbuffer, const int *piAttribList)
  {
    return driver_wglSetPbufferAttribARB(hPbuffer, piAttribList);
  }

// WGL_EXT_display_color_table

  static GLboolean REGAL_CALL missing_wglBindDisplayColorTableEXT(GLushort id)
  {
    UNUSED_PARAMETER(id);
    Warning( "wglBindDisplayColorTableEXT", " not available." );
    return GL_FALSE;
  }

  PFNWGLBINDDISPLAYCOLORTABLEEXTPROC driver_wglBindDisplayColorTableEXT = NULL;

  static GLboolean REGAL_CALL loader_wglBindDisplayColorTableEXT(Layer *_layer, GLushort id)
  {
    return driver_wglBindDisplayColorTableEXT(id);
  }

  static GLboolean REGAL_CALL missing_wglCreateDisplayColorTableEXT(GLushort id)
  {
    UNUSED_PARAMETER(id);
    Warning( "wglCreateDisplayColorTableEXT", " not available." );
    return GL_FALSE;
  }

  PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC driver_wglCreateDisplayColorTableEXT = NULL;

  static GLboolean REGAL_CALL loader_wglCreateDisplayColorTableEXT(Layer *_layer, GLushort id)
  {
    return driver_wglCreateDisplayColorTableEXT(id);
  }

  static VOID REGAL_CALL missing_wglDestroyDisplayColorTableEXT(GLushort id)
  {
    UNUSED_PARAMETER(id);
    Warning( "wglDestroyDisplayColorTableEXT", " not available." );
  }

  PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC driver_wglDestroyDisplayColorTableEXT = NULL;

  static VOID REGAL_CALL loader_wglDestroyDisplayColorTableEXT(Layer *_layer, GLushort id)
  {
    driver_wglDestroyDisplayColorTableEXT(id);
  }

  static GLboolean REGAL_CALL missing_wglLoadDisplayColorTableEXT(const GLushort *table, GLuint length)
  {
    UNUSED_PARAMETER(table);
    UNUSED_PARAMETER(length);
    Warning( "wglLoadDisplayColorTableEXT", " not available." );
    return GL_FALSE;
  }

  PFNWGLLOADDISPLAYCOLORTABLEEXTPROC driver_wglLoadDisplayColorTableEXT = NULL;

  static GLboolean REGAL_CALL loader_wglLoadDisplayColorTableEXT(Layer *_layer, const GLushort *table, GLuint length)
  {
    return driver_wglLoadDisplayColorTableEXT(table, length);
  }

// WGL_EXT_extensions_string

  static const char *REGAL_CALL missing_wglGetExtensionsStringEXT(void)
  {
    Warning( "wglGetExtensionsStringEXT", " not available." );
    return NULL;
  }

  PFNWGLGETEXTENSIONSSTRINGEXTPROC driver_wglGetExtensionsStringEXT = NULL;

  static const char *REGAL_CALL loader_wglGetExtensionsStringEXT(Layer *_layer)
  {
    return driver_wglGetExtensionsStringEXT();
  }

// WGL_EXT_make_current_read

  static HDC REGAL_CALL missing_wglGetCurrentReadDCEXT(void)
  {
    Warning( "wglGetCurrentReadDCEXT", " not available." );
    return NULL;
  }

  PFNWGLGETCURRENTREADDCEXTPROC driver_wglGetCurrentReadDCEXT = NULL;

  static HDC REGAL_CALL loader_wglGetCurrentReadDCEXT(Layer *_layer)
  {
    return driver_wglGetCurrentReadDCEXT();
  }

  static BOOL REGAL_CALL missing_wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
  {
    UNUSED_PARAMETER(hDrawDC);
    UNUSED_PARAMETER(hReadDC);
    UNUSED_PARAMETER(hglrc);
    Warning( "wglMakeContextCurrentEXT", " not available." );
    return 0;
  }

  PFNWGLMAKECONTEXTCURRENTEXTPROC driver_wglMakeContextCurrentEXT = NULL;

  static BOOL REGAL_CALL loader_wglMakeContextCurrentEXT(Layer *_layer, HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
  {
    return driver_wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc);
  }

// WGL_EXT_pbuffer

  static HPBUFFEREXT REGAL_CALL missing_wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iWidth);
    UNUSED_PARAMETER(iHeight);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglCreatePbufferEXT", " not available." );
    return (HPBUFFEREXT) 0;
  }

  PFNWGLCREATEPBUFFEREXTPROC driver_wglCreatePbufferEXT = NULL;

  static HPBUFFEREXT REGAL_CALL loader_wglCreatePbufferEXT(Layer *_layer, HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
  {
    return driver_wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }

  static BOOL REGAL_CALL missing_wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    Warning( "wglDestroyPbufferEXT", " not available." );
    return 0;
  }

  PFNWGLDESTROYPBUFFEREXTPROC driver_wglDestroyPbufferEXT = NULL;

  static BOOL REGAL_CALL loader_wglDestroyPbufferEXT(Layer *_layer, HPBUFFEREXT hPbuffer)
  {
    return driver_wglDestroyPbufferEXT(hPbuffer);
  }

  static HDC REGAL_CALL missing_wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    Warning( "wglGetPbufferDCEXT", " not available." );
    return NULL;
  }

  PFNWGLGETPBUFFERDCEXTPROC driver_wglGetPbufferDCEXT = NULL;

  static HDC REGAL_CALL loader_wglGetPbufferDCEXT(Layer *_layer, HPBUFFEREXT hPbuffer)
  {
    return driver_wglGetPbufferDCEXT(hPbuffer);
  }

  static BOOL REGAL_CALL missing_wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglQueryPbufferEXT", " not available." );
    return 0;
  }

  PFNWGLQUERYPBUFFEREXTPROC driver_wglQueryPbufferEXT = NULL;

  static BOOL REGAL_CALL loader_wglQueryPbufferEXT(Layer *_layer, HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)
  {
    return driver_wglQueryPbufferEXT(hPbuffer, iAttribute, piValue);
  }

  static int REGAL_CALL missing_wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(hDC);
    Warning( "wglReleasePbufferDCEXT", " not available." );
    return 0;
  }

  PFNWGLRELEASEPBUFFERDCEXTPROC driver_wglReleasePbufferDCEXT = NULL;

  static int REGAL_CALL loader_wglReleasePbufferDCEXT(Layer *_layer, HPBUFFEREXT hPbuffer, HDC hDC)
  {
    return driver_wglReleasePbufferDCEXT(hPbuffer, hDC);
  }

// WGL_EXT_pixel_format

  static BOOL REGAL_CALL missing_wglChoosePixelFormatEXT(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(piAttribIList);
    UNUSED_PARAMETER(pfAttribFList);
    UNUSED_PARAMETER(nMaxFormats);
    UNUSED_PARAMETER(piFormats);
    UNUSED_PARAMETER(nNumFormats);
    Warning( "wglChoosePixelFormatEXT", " not available." );
    return 0;
  }

  PFNWGLCHOOSEPIXELFORMATEXTPROC driver_wglChoosePixelFormatEXT = NULL;

  static BOOL REGAL_CALL loader_wglChoosePixelFormatEXT(Layer *_layer, HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
  {
    return driver_wglChoosePixelFormatEXT(hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }

  static BOOL REGAL_CALL missing_wglGetPixelFormatAttribfvEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nAttributes);
    UNUSED_PARAMETER(piAttributes);
    UNUSED_PARAMETER(pfValues);
    Warning( "wglGetPixelFormatAttribfvEXT", " not available." );
    return 0;
  }

  PFNWGLGETPIXELFORMATATTRIBFVEXTPROC driver_wglGetPixelFormatAttribfvEXT = NULL;

  static BOOL REGAL_CALL loader_wglGetPixelFormatAttribfvEXT(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
  {
    return driver_wglGetPixelFormatAttribfvEXT(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }

  static BOOL REGAL_CALL missing_wglGetPixelFormatAttribivEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nAttributes);
    UNUSED_PARAMETER(piAttributes);
    UNUSED_PARAMETER(piValues);
    Warning( "wglGetPixelFormatAttribivEXT", " not available." );
    return 0;
  }

  PFNWGLGETPIXELFORMATATTRIBIVEXTPROC driver_wglGetPixelFormatAttribivEXT = NULL;

  static BOOL REGAL_CALL loader_wglGetPixelFormatAttribivEXT(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
  {
    return driver_wglGetPixelFormatAttribivEXT(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }

// WGL_EXT_swap_control

  static int REGAL_CALL missing_wglGetSwapIntervalEXT(void)
  {
    Warning( "wglGetSwapIntervalEXT", " not available." );
    return 0;
  }

  PFNWGLGETSWAPINTERVALEXTPROC driver_wglGetSwapIntervalEXT = NULL;

  static int REGAL_CALL loader_wglGetSwapIntervalEXT(Layer *_layer)
  {
    return driver_wglGetSwapIntervalEXT();
  }

  static BOOL REGAL_CALL missing_wglSwapIntervalEXT(int interval)
  {
    UNUSED_PARAMETER(interval);
    Warning( "wglSwapIntervalEXT", " not available." );
    return 0;
  }

  PFNWGLSWAPINTERVALEXTPROC driver_wglSwapIntervalEXT = NULL;

  static BOOL REGAL_CALL loader_wglSwapIntervalEXT(Layer *_layer, int interval)
  {
    return driver_wglSwapIntervalEXT(interval);
  }

// WGL_GDI

  static BOOL REGAL_CALL missing_SwapBuffers(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "SwapBuffers", " not available." );
    return 0;
  }

  PFNSWAPBUFFERSPROC driver_SwapBuffers = NULL;

  static BOOL REGAL_CALL loader_SwapBuffers(Layer *_layer, HDC hDC)
  {
    return driver_SwapBuffers(hDC);
  }

  static int REGAL_CALL missing_wglChoosePixelFormat(HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(ppfd);
    Warning( "wglChoosePixelFormat", " not available." );
    return 0;
  }

  PFNWGLCHOOSEPIXELFORMATPROC driver_wglChoosePixelFormat = NULL;

  static int REGAL_CALL loader_wglChoosePixelFormat(Layer *_layer, HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd)
  {
    return driver_wglChoosePixelFormat(hDC, ppfd);
  }

  static int REGAL_CALL missing_wglDescribePixelFormat(HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(nBytes);
    UNUSED_PARAMETER(ppfd);
    Warning( "wglDescribePixelFormat", " not available." );
    return 0;
  }

  PFNWGLDESCRIBEPIXELFORMATPROC driver_wglDescribePixelFormat = NULL;

  static int REGAL_CALL loader_wglDescribePixelFormat(Layer *_layer, HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
  {
    return driver_wglDescribePixelFormat(hDC, iPixelFormat, nBytes, ppfd);
  }

  static int REGAL_CALL missing_wglGetPixelFormat(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglGetPixelFormat", " not available." );
    return 0;
  }

  PFNWGLGETPIXELFORMATPROC driver_wglGetPixelFormat = NULL;

  static int REGAL_CALL loader_wglGetPixelFormat(Layer *_layer, HDC hDC)
  {
    return driver_wglGetPixelFormat(hDC);
  }

  static BOOL REGAL_CALL missing_wglSetPixelFormat(HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(ppfd);
    Warning( "wglSetPixelFormat", " not available." );
    return 0;
  }

  PFNWGLSETPIXELFORMATPROC driver_wglSetPixelFormat = NULL;

  static BOOL REGAL_CALL loader_wglSetPixelFormat(Layer *_layer, HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd)
  {
    return driver_wglSetPixelFormat(hDC, iPixelFormat, ppfd);
  }

  static BOOL REGAL_CALL missing_wglSwapBuffers(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglSwapBuffers", " not available." );
    return 0;
  }

  PFNWGLSWAPBUFFERSPROC driver_wglSwapBuffers = NULL;

  static BOOL REGAL_CALL loader_wglSwapBuffers(Layer *_layer, HDC hDC)
  {
    return driver_wglSwapBuffers(hDC);
  }

// WGL_I3D_digital_video_control

  static BOOL REGAL_CALL missing_wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglGetDigitalVideoParametersI3D", " not available." );
    return 0;
  }

  PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC driver_wglGetDigitalVideoParametersI3D = NULL;

  static BOOL REGAL_CALL loader_wglGetDigitalVideoParametersI3D(Layer *_layer, HDC hDC, int iAttribute, int *piValue)
  {
    return driver_wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
  }

  static BOOL REGAL_CALL missing_wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglSetDigitalVideoParametersI3D", " not available." );
    return 0;
  }

  PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC driver_wglSetDigitalVideoParametersI3D = NULL;

  static BOOL REGAL_CALL loader_wglSetDigitalVideoParametersI3D(Layer *_layer, HDC hDC, int iAttribute, const int *piValue)
  {
    return driver_wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
  }

// WGL_I3D_gamma

  static BOOL REGAL_CALL missing_wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iEntries);
    UNUSED_PARAMETER(puRed);
    UNUSED_PARAMETER(puGreen);
    UNUSED_PARAMETER(puBlue);
    Warning( "wglGetGammaTableI3D", " not available." );
    return 0;
  }

  PFNWGLGETGAMMATABLEI3DPROC driver_wglGetGammaTableI3D = NULL;

  static BOOL REGAL_CALL loader_wglGetGammaTableI3D(Layer *_layer, HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)
  {
    return driver_wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
  }

  static BOOL REGAL_CALL missing_wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglGetGammaTableParametersI3D", " not available." );
    return 0;
  }

  PFNWGLGETGAMMATABLEPARAMETERSI3DPROC driver_wglGetGammaTableParametersI3D = NULL;

  static BOOL REGAL_CALL loader_wglGetGammaTableParametersI3D(Layer *_layer, HDC hDC, int iAttribute, int *piValue)
  {
    return driver_wglGetGammaTableParametersI3D(hDC, iAttribute, piValue);
  }

  static BOOL REGAL_CALL missing_wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iEntries);
    UNUSED_PARAMETER(puRed);
    UNUSED_PARAMETER(puGreen);
    UNUSED_PARAMETER(puBlue);
    Warning( "wglSetGammaTableI3D", " not available." );
    return 0;
  }

  PFNWGLSETGAMMATABLEI3DPROC driver_wglSetGammaTableI3D = NULL;

  static BOOL REGAL_CALL loader_wglSetGammaTableI3D(Layer *_layer, HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)
  {
    return driver_wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
  }

  static BOOL REGAL_CALL missing_wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglSetGammaTableParametersI3D", " not available." );
    return 0;
  }

  PFNWGLSETGAMMATABLEPARAMETERSI3DPROC driver_wglSetGammaTableParametersI3D = NULL;

  static BOOL REGAL_CALL loader_wglSetGammaTableParametersI3D(Layer *_layer, HDC hDC, int iAttribute, const int *piValue)
  {
    return driver_wglSetGammaTableParametersI3D(hDC, iAttribute, piValue);
  }

// WGL_I3D_genlock

  static BOOL REGAL_CALL missing_wglDisableGenlockI3D(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglDisableGenlockI3D", " not available." );
    return 0;
  }

  PFNWGLDISABLEGENLOCKI3DPROC driver_wglDisableGenlockI3D = NULL;

  static BOOL REGAL_CALL loader_wglDisableGenlockI3D(Layer *_layer, HDC hDC)
  {
    return driver_wglDisableGenlockI3D(hDC);
  }

  static BOOL REGAL_CALL missing_wglEnableGenlockI3D(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglEnableGenlockI3D", " not available." );
    return 0;
  }

  PFNWGLENABLEGENLOCKI3DPROC driver_wglEnableGenlockI3D = NULL;

  static BOOL REGAL_CALL loader_wglEnableGenlockI3D(Layer *_layer, HDC hDC)
  {
    return driver_wglEnableGenlockI3D(hDC);
  }

  static BOOL REGAL_CALL missing_wglGenlockSampleRateI3D(HDC hDC, UINT uRate)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uRate);
    Warning( "wglGenlockSampleRateI3D", " not available." );
    return 0;
  }

  PFNWGLGENLOCKSAMPLERATEI3DPROC driver_wglGenlockSampleRateI3D = NULL;

  static BOOL REGAL_CALL loader_wglGenlockSampleRateI3D(Layer *_layer, HDC hDC, UINT uRate)
  {
    return driver_wglGenlockSampleRateI3D(hDC, uRate);
  }

  static BOOL REGAL_CALL missing_wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uDelay);
    Warning( "wglGenlockSourceDelayI3D", " not available." );
    return 0;
  }

  PFNWGLGENLOCKSOURCEDELAYI3DPROC driver_wglGenlockSourceDelayI3D = NULL;

  static BOOL REGAL_CALL loader_wglGenlockSourceDelayI3D(Layer *_layer, HDC hDC, UINT uDelay)
  {
    return driver_wglGenlockSourceDelayI3D(hDC, uDelay);
  }

  static BOOL REGAL_CALL missing_wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uEdge);
    Warning( "wglGenlockSourceEdgeI3D", " not available." );
    return 0;
  }

  PFNWGLGENLOCKSOURCEEDGEI3DPROC driver_wglGenlockSourceEdgeI3D = NULL;

  static BOOL REGAL_CALL loader_wglGenlockSourceEdgeI3D(Layer *_layer, HDC hDC, UINT uEdge)
  {
    return driver_wglGenlockSourceEdgeI3D(hDC, uEdge);
  }

  static BOOL REGAL_CALL missing_wglGenlockSourceI3D(HDC hDC, UINT uSource)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uSource);
    Warning( "wglGenlockSourceI3D", " not available." );
    return 0;
  }

  PFNWGLGENLOCKSOURCEI3DPROC driver_wglGenlockSourceI3D = NULL;

  static BOOL REGAL_CALL loader_wglGenlockSourceI3D(Layer *_layer, HDC hDC, UINT uSource)
  {
    return driver_wglGenlockSourceI3D(hDC, uSource);
  }

  static BOOL REGAL_CALL missing_wglGetGenlockSampleRateI3D(HDC hDC, UINT *uRate)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uRate);
    Warning( "wglGetGenlockSampleRateI3D", " not available." );
    return 0;
  }

  PFNWGLGETGENLOCKSAMPLERATEI3DPROC driver_wglGetGenlockSampleRateI3D = NULL;

  static BOOL REGAL_CALL loader_wglGetGenlockSampleRateI3D(Layer *_layer, HDC hDC, UINT *uRate)
  {
    return driver_wglGetGenlockSampleRateI3D(hDC, uRate);
  }

  static BOOL REGAL_CALL missing_wglGetGenlockSourceDelayI3D(HDC hDC, UINT *uDelay)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uDelay);
    Warning( "wglGetGenlockSourceDelayI3D", " not available." );
    return 0;
  }

  PFNWGLGETGENLOCKSOURCEDELAYI3DPROC driver_wglGetGenlockSourceDelayI3D = NULL;

  static BOOL REGAL_CALL loader_wglGetGenlockSourceDelayI3D(Layer *_layer, HDC hDC, UINT *uDelay)
  {
    return driver_wglGetGenlockSourceDelayI3D(hDC, uDelay);
  }

  static BOOL REGAL_CALL missing_wglGetGenlockSourceEdgeI3D(HDC hDC, UINT *uEdge)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uEdge);
    Warning( "wglGetGenlockSourceEdgeI3D", " not available." );
    return 0;
  }

  PFNWGLGETGENLOCKSOURCEEDGEI3DPROC driver_wglGetGenlockSourceEdgeI3D = NULL;

  static BOOL REGAL_CALL loader_wglGetGenlockSourceEdgeI3D(Layer *_layer, HDC hDC, UINT *uEdge)
  {
    return driver_wglGetGenlockSourceEdgeI3D(hDC, uEdge);
  }

  static BOOL REGAL_CALL missing_wglGetGenlockSourceI3D(HDC hDC, UINT *uSource)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uSource);
    Warning( "wglGetGenlockSourceI3D", " not available." );
    return 0;
  }

  PFNWGLGETGENLOCKSOURCEI3DPROC driver_wglGetGenlockSourceI3D = NULL;

  static BOOL REGAL_CALL loader_wglGetGenlockSourceI3D(Layer *_layer, HDC hDC, UINT *uSource)
  {
    return driver_wglGetGenlockSourceI3D(hDC, uSource);
  }

  static BOOL REGAL_CALL missing_wglIsEnabledGenlockI3D(HDC hDC, BOOL *pFlag)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(pFlag);
    Warning( "wglIsEnabledGenlockI3D", " not available." );
    return 0;
  }

  PFNWGLISENABLEDGENLOCKI3DPROC driver_wglIsEnabledGenlockI3D = NULL;

  static BOOL REGAL_CALL loader_wglIsEnabledGenlockI3D(Layer *_layer, HDC hDC, BOOL *pFlag)
  {
    return driver_wglIsEnabledGenlockI3D(hDC, pFlag);
  }

  static BOOL REGAL_CALL missing_wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uMaxLineDelay);
    UNUSED_PARAMETER(uMaxPixelDelay);
    Warning( "wglQueryGenlockMaxSourceDelayI3D", " not available." );
    return 0;
  }

  PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC driver_wglQueryGenlockMaxSourceDelayI3D = NULL;

  static BOOL REGAL_CALL loader_wglQueryGenlockMaxSourceDelayI3D(Layer *_layer, HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)
  {
    return driver_wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay);
  }

// WGL_I3D_image_buffer

  static BOOL REGAL_CALL missing_wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(pEvent);
    UNUSED_PARAMETER(pAddress);
    UNUSED_PARAMETER(pSize);
    UNUSED_PARAMETER(count);
    Warning( "wglAssociateImageBufferEventsI3D", " not available." );
    return 0;
  }

  PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC driver_wglAssociateImageBufferEventsI3D = NULL;

  static BOOL REGAL_CALL loader_wglAssociateImageBufferEventsI3D(Layer *_layer, HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)
  {
    return driver_wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count);
  }

  static LPVOID REGAL_CALL missing_wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(dwSize);
    UNUSED_PARAMETER(uFlags);
    Warning( "wglCreateImageBufferI3D", " not available." );
    return 0;
  }

  PFNWGLCREATEIMAGEBUFFERI3DPROC driver_wglCreateImageBufferI3D = NULL;

  static LPVOID REGAL_CALL loader_wglCreateImageBufferI3D(Layer *_layer, HDC hDC, DWORD dwSize, UINT uFlags)
  {
    return driver_wglCreateImageBufferI3D(hDC, dwSize, uFlags);
  }

  static BOOL REGAL_CALL missing_wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(pAddress);
    Warning( "wglDestroyImageBufferI3D", " not available." );
    return 0;
  }

  PFNWGLDESTROYIMAGEBUFFERI3DPROC driver_wglDestroyImageBufferI3D = NULL;

  static BOOL REGAL_CALL loader_wglDestroyImageBufferI3D(Layer *_layer, HDC hDC, LPVOID pAddress)
  {
    return driver_wglDestroyImageBufferI3D(hDC, pAddress);
  }

  static BOOL REGAL_CALL missing_wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID *pAddress, UINT count)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(pAddress);
    UNUSED_PARAMETER(count);
    Warning( "wglReleaseImageBufferEventsI3D", " not available." );
    return 0;
  }

  PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC driver_wglReleaseImageBufferEventsI3D = NULL;

  static BOOL REGAL_CALL loader_wglReleaseImageBufferEventsI3D(Layer *_layer, HDC hDC, const LPVOID *pAddress, UINT count)
  {
    return driver_wglReleaseImageBufferEventsI3D(hDC, pAddress, count);
  }

// WGL_I3D_swap_frame_lock

  static BOOL REGAL_CALL missing_wglDisableFrameLockI3D(void)
  {
    Warning( "wglDisableFrameLockI3D", " not available." );
    return 0;
  }

  PFNWGLDISABLEFRAMELOCKI3DPROC driver_wglDisableFrameLockI3D = NULL;

  static BOOL REGAL_CALL loader_wglDisableFrameLockI3D(Layer *_layer)
  {
    return driver_wglDisableFrameLockI3D();
  }

  static BOOL REGAL_CALL missing_wglEnableFrameLockI3D(void)
  {
    Warning( "wglEnableFrameLockI3D", " not available." );
    return 0;
  }

  PFNWGLENABLEFRAMELOCKI3DPROC driver_wglEnableFrameLockI3D = NULL;

  static BOOL REGAL_CALL loader_wglEnableFrameLockI3D(Layer *_layer)
  {
    return driver_wglEnableFrameLockI3D();
  }

  static BOOL REGAL_CALL missing_wglIsEnabledFrameLockI3D(BOOL *pFlag)
  {
    UNUSED_PARAMETER(pFlag);
    Warning( "wglIsEnabledFrameLockI3D", " not available." );
    return 0;
  }

  PFNWGLISENABLEDFRAMELOCKI3DPROC driver_wglIsEnabledFrameLockI3D = NULL;

  static BOOL REGAL_CALL loader_wglIsEnabledFrameLockI3D(Layer *_layer, BOOL *pFlag)
  {
    return driver_wglIsEnabledFrameLockI3D(pFlag);
  }

  static BOOL REGAL_CALL missing_wglQueryFrameLockMasterI3D(BOOL *pFlag)
  {
    UNUSED_PARAMETER(pFlag);
    Warning( "wglQueryFrameLockMasterI3D", " not available." );
    return 0;
  }

  PFNWGLQUERYFRAMELOCKMASTERI3DPROC driver_wglQueryFrameLockMasterI3D = NULL;

  static BOOL REGAL_CALL loader_wglQueryFrameLockMasterI3D(Layer *_layer, BOOL *pFlag)
  {
    return driver_wglQueryFrameLockMasterI3D(pFlag);
  }

// WGL_I3D_swap_frame_usage

  static BOOL REGAL_CALL missing_wglBeginFrameTrackingI3D(void)
  {
    Warning( "wglBeginFrameTrackingI3D", " not available." );
    return 0;
  }

  PFNWGLBEGINFRAMETRACKINGI3DPROC driver_wglBeginFrameTrackingI3D = NULL;

  static BOOL REGAL_CALL loader_wglBeginFrameTrackingI3D(Layer *_layer)
  {
    return driver_wglBeginFrameTrackingI3D();
  }

  static BOOL REGAL_CALL missing_wglEndFrameTrackingI3D(void)
  {
    Warning( "wglEndFrameTrackingI3D", " not available." );
    return 0;
  }

  PFNWGLENDFRAMETRACKINGI3DPROC driver_wglEndFrameTrackingI3D = NULL;

  static BOOL REGAL_CALL loader_wglEndFrameTrackingI3D(Layer *_layer)
  {
    return driver_wglEndFrameTrackingI3D();
  }

  static BOOL REGAL_CALL missing_wglGetFrameUsageI3D(float *pUsage)
  {
    UNUSED_PARAMETER(pUsage);
    Warning( "wglGetFrameUsageI3D", " not available." );
    return 0;
  }

  PFNWGLGETFRAMEUSAGEI3DPROC driver_wglGetFrameUsageI3D = NULL;

  static BOOL REGAL_CALL loader_wglGetFrameUsageI3D(Layer *_layer, float *pUsage)
  {
    return driver_wglGetFrameUsageI3D(pUsage);
  }

  static BOOL REGAL_CALL missing_wglQueryFrameTrackingI3D(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)
  {
    UNUSED_PARAMETER(pFrameCount);
    UNUSED_PARAMETER(pMissedFrames);
    UNUSED_PARAMETER(pLastMissedUsage);
    Warning( "wglQueryFrameTrackingI3D", " not available." );
    return 0;
  }

  PFNWGLQUERYFRAMETRACKINGI3DPROC driver_wglQueryFrameTrackingI3D = NULL;

  static BOOL REGAL_CALL loader_wglQueryFrameTrackingI3D(Layer *_layer, DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)
  {
    return driver_wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage);
  }

// WGL_NV_DX_interop

  static BOOL REGAL_CALL missing_wglDXCloseDeviceNV(HANDLE hDevice)
  {
    UNUSED_PARAMETER(hDevice);
    Warning( "wglDXCloseDeviceNV", " not available." );
    return 0;
  }

  PFNWGLDXCLOSEDEVICENVPROC driver_wglDXCloseDeviceNV = NULL;

  static BOOL REGAL_CALL loader_wglDXCloseDeviceNV(Layer *_layer, HANDLE hDevice)
  {
    return driver_wglDXCloseDeviceNV(hDevice);
  }

  static BOOL REGAL_CALL missing_wglDXLockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects)
  {
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(hObjects);
    Warning( "wglDXLockObjectsNV", " not available." );
    return 0;
  }

  PFNWGLDXLOCKOBJECTSNVPROC driver_wglDXLockObjectsNV = NULL;

  static BOOL REGAL_CALL loader_wglDXLockObjectsNV(Layer *_layer, HANDLE hDevice, GLint count, HANDLE *hObjects)
  {
    return driver_wglDXLockObjectsNV(hDevice, count, hObjects);
  }

  static BOOL REGAL_CALL missing_wglDXObjectAccessNV(HANDLE hObject, GLenum access)
  {
    UNUSED_PARAMETER(hObject);
    UNUSED_PARAMETER(access);
    Warning( "wglDXObjectAccessNV", " not available." );
    return 0;
  }

  PFNWGLDXOBJECTACCESSNVPROC driver_wglDXObjectAccessNV = NULL;

  static BOOL REGAL_CALL loader_wglDXObjectAccessNV(Layer *_layer, HANDLE hObject, GLenum access)
  {
    return driver_wglDXObjectAccessNV(hObject, access);
  }

  static HANDLE REGAL_CALL missing_wglDXOpenDeviceNV(GLvoid *dxDevice)
  {
    UNUSED_PARAMETER(dxDevice);
    Warning( "wglDXOpenDeviceNV", " not available." );
    return 0;
  }

  PFNWGLDXOPENDEVICENVPROC driver_wglDXOpenDeviceNV = NULL;

  static HANDLE REGAL_CALL loader_wglDXOpenDeviceNV(Layer *_layer, GLvoid *dxDevice)
  {
    return driver_wglDXOpenDeviceNV(dxDevice);
  }

  static HANDLE REGAL_CALL missing_wglDXRegisterObjectNV(HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access)
  {
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(dxObject);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(access);
    Warning( "wglDXRegisterObjectNV", " not available." );
    return 0;
  }

  PFNWGLDXREGISTEROBJECTNVPROC driver_wglDXRegisterObjectNV = NULL;

  static HANDLE REGAL_CALL loader_wglDXRegisterObjectNV(Layer *_layer, HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access)
  {
    return driver_wglDXRegisterObjectNV(hDevice, dxObject, name, type, access);
  }

  static BOOL REGAL_CALL missing_wglDXSetResourceShareHandleNV(GLvoid *dxObject, HANDLE shareHandle)
  {
    UNUSED_PARAMETER(dxObject);
    UNUSED_PARAMETER(shareHandle);
    Warning( "wglDXSetResourceShareHandleNV", " not available." );
    return 0;
  }

  PFNWGLDXSETRESOURCESHAREHANDLENVPROC driver_wglDXSetResourceShareHandleNV = NULL;

  static BOOL REGAL_CALL loader_wglDXSetResourceShareHandleNV(Layer *_layer, GLvoid *dxObject, HANDLE shareHandle)
  {
    return driver_wglDXSetResourceShareHandleNV(dxObject, shareHandle);
  }

  static BOOL REGAL_CALL missing_wglDXUnlockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects)
  {
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(hObjects);
    Warning( "wglDXUnlockObjectsNV", " not available." );
    return 0;
  }

  PFNWGLDXUNLOCKOBJECTSNVPROC driver_wglDXUnlockObjectsNV = NULL;

  static BOOL REGAL_CALL loader_wglDXUnlockObjectsNV(Layer *_layer, HANDLE hDevice, GLint count, HANDLE *hObjects)
  {
    return driver_wglDXUnlockObjectsNV(hDevice, count, hObjects);
  }

  static BOOL REGAL_CALL missing_wglDXUnregisterObjectNV(HANDLE hDevice, HANDLE hObject)
  {
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(hObject);
    Warning( "wglDXUnregisterObjectNV", " not available." );
    return 0;
  }

  PFNWGLDXUNREGISTEROBJECTNVPROC driver_wglDXUnregisterObjectNV = NULL;

  static BOOL REGAL_CALL loader_wglDXUnregisterObjectNV(Layer *_layer, HANDLE hDevice, HANDLE hObject)
  {
    return driver_wglDXUnregisterObjectNV(hDevice, hObject);
  }

// WGL_NV_copy_image

  static BOOL REGAL_CALL missing_wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(hSrcRC);
    UNUSED_PARAMETER(srcName);
    UNUSED_PARAMETER(srcTarget);
    UNUSED_PARAMETER(srcLevel);
    UNUSED_PARAMETER(srcX);
    UNUSED_PARAMETER(srcY);
    UNUSED_PARAMETER(srcZ);
    UNUSED_PARAMETER(hDstRC);
    UNUSED_PARAMETER(dstName);
    UNUSED_PARAMETER(dstTarget);
    UNUSED_PARAMETER(dstLevel);
    UNUSED_PARAMETER(dstX);
    UNUSED_PARAMETER(dstY);
    UNUSED_PARAMETER(dstZ);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "wglCopyImageSubDataNV", " not available." );
    return 0;
  }

  PFNWGLCOPYIMAGESUBDATANVPROC driver_wglCopyImageSubDataNV = NULL;

  static BOOL REGAL_CALL loader_wglCopyImageSubDataNV(Layer *_layer, HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    return driver_wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }

// WGL_NV_gpu_affinity

  static HDC REGAL_CALL missing_wglCreateAffinityDCNV(const HGPUNV *phGpuList)
  {
    UNUSED_PARAMETER(phGpuList);
    Warning( "wglCreateAffinityDCNV", " not available." );
    return NULL;
  }

  PFNWGLCREATEAFFINITYDCNVPROC driver_wglCreateAffinityDCNV = NULL;

  static HDC REGAL_CALL loader_wglCreateAffinityDCNV(Layer *_layer, const HGPUNV *phGpuList)
  {
    return driver_wglCreateAffinityDCNV(phGpuList);
  }

  static BOOL REGAL_CALL missing_wglDeleteDCNV(HDC hAffinityDC)
  {
    UNUSED_PARAMETER(hAffinityDC);
    Warning( "wglDeleteDCNV", " not available." );
    return 0;
  }

  PFNWGLDELETEDCNVPROC driver_wglDeleteDCNV = NULL;

  static BOOL REGAL_CALL loader_wglDeleteDCNV(Layer *_layer, HDC hAffinityDC)
  {
    return driver_wglDeleteDCNV(hAffinityDC);
  }

  static BOOL REGAL_CALL missing_wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
  {
    UNUSED_PARAMETER(hGpu);
    UNUSED_PARAMETER(iDeviceIndex);
    UNUSED_PARAMETER(lpGpuDevice);
    Warning( "wglEnumGpuDevicesNV", " not available." );
    return 0;
  }

  PFNWGLENUMGPUDEVICESNVPROC driver_wglEnumGpuDevicesNV = NULL;

  static BOOL REGAL_CALL loader_wglEnumGpuDevicesNV(Layer *_layer, HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
  {
    return driver_wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice);
  }

  static BOOL REGAL_CALL missing_wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)
  {
    UNUSED_PARAMETER(hAffinityDC);
    UNUSED_PARAMETER(iGpuIndex);
    UNUSED_PARAMETER(hGpu);
    Warning( "wglEnumGpusFromAffinityDCNV", " not available." );
    return 0;
  }

  PFNWGLENUMGPUSFROMAFFINITYDCNVPROC driver_wglEnumGpusFromAffinityDCNV = NULL;

  static BOOL REGAL_CALL loader_wglEnumGpusFromAffinityDCNV(Layer *_layer, HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)
  {
    return driver_wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu);
  }

  static BOOL REGAL_CALL missing_wglEnumGpusNV(UINT iGpuIndex, HGPUNV *phGpu)
  {
    UNUSED_PARAMETER(iGpuIndex);
    UNUSED_PARAMETER(phGpu);
    Warning( "wglEnumGpusNV", " not available." );
    return 0;
  }

  PFNWGLENUMGPUSNVPROC driver_wglEnumGpusNV = NULL;

  static BOOL REGAL_CALL loader_wglEnumGpusNV(Layer *_layer, UINT iGpuIndex, HGPUNV *phGpu)
  {
    return driver_wglEnumGpusNV(iGpuIndex, phGpu);
  }

// WGL_NV_present_video

  static BOOL REGAL_CALL missing_wglBindVideoDeviceNV(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(uVideoSlot);
    UNUSED_PARAMETER(hVideoDevice);
    UNUSED_PARAMETER(piAttribList);
    Warning( "wglBindVideoDeviceNV", " not available." );
    return 0;
  }

  PFNWGLBINDVIDEODEVICENVPROC driver_wglBindVideoDeviceNV = NULL;

  static BOOL REGAL_CALL loader_wglBindVideoDeviceNV(Layer *_layer, HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)
  {
    return driver_wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList);
  }

  static int REGAL_CALL missing_wglEnumerateVideoDevicesNV(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(phDeviceList);
    Warning( "wglEnumerateVideoDevicesNV", " not available." );
    return 0;
  }

  PFNWGLENUMERATEVIDEODEVICESNVPROC driver_wglEnumerateVideoDevicesNV = NULL;

  static int REGAL_CALL loader_wglEnumerateVideoDevicesNV(Layer *_layer, HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)
  {
    return driver_wglEnumerateVideoDevicesNV(hDC, phDeviceList);
  }

  static BOOL REGAL_CALL missing_wglQueryCurrentContextNV(int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglQueryCurrentContextNV", " not available." );
    return 0;
  }

  PFNWGLQUERYCURRENTCONTEXTNVPROC driver_wglQueryCurrentContextNV = NULL;

  static BOOL REGAL_CALL loader_wglQueryCurrentContextNV(Layer *_layer, int iAttribute, int *piValue)
  {
    return driver_wglQueryCurrentContextNV(iAttribute, piValue);
  }

// WGL_NV_swap_group

  static BOOL REGAL_CALL missing_wglBindSwapBarrierNV(GLuint group, GLuint barrier)
  {
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(barrier);
    Warning( "wglBindSwapBarrierNV", " not available." );
    return 0;
  }

  PFNWGLBINDSWAPBARRIERNVPROC driver_wglBindSwapBarrierNV = NULL;

  static BOOL REGAL_CALL loader_wglBindSwapBarrierNV(Layer *_layer, GLuint group, GLuint barrier)
  {
    return driver_wglBindSwapBarrierNV(group, barrier);
  }

  static BOOL REGAL_CALL missing_wglJoinSwapGroupNV(HDC hDC, GLuint group)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(group);
    Warning( "wglJoinSwapGroupNV", " not available." );
    return 0;
  }

  PFNWGLJOINSWAPGROUPNVPROC driver_wglJoinSwapGroupNV = NULL;

  static BOOL REGAL_CALL loader_wglJoinSwapGroupNV(Layer *_layer, HDC hDC, GLuint group)
  {
    return driver_wglJoinSwapGroupNV(hDC, group);
  }

  static BOOL REGAL_CALL missing_wglQueryFrameCountNV(HDC hDC, GLuint *count)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(count);
    Warning( "wglQueryFrameCountNV", " not available." );
    return 0;
  }

  PFNWGLQUERYFRAMECOUNTNVPROC driver_wglQueryFrameCountNV = NULL;

  static BOOL REGAL_CALL loader_wglQueryFrameCountNV(Layer *_layer, HDC hDC, GLuint *count)
  {
    return driver_wglQueryFrameCountNV(hDC, count);
  }

  static BOOL REGAL_CALL missing_wglQueryMaxSwapGroupsNV(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(maxGroups);
    UNUSED_PARAMETER(maxBarriers);
    Warning( "wglQueryMaxSwapGroupsNV", " not available." );
    return 0;
  }

  PFNWGLQUERYMAXSWAPGROUPSNVPROC driver_wglQueryMaxSwapGroupsNV = NULL;

  static BOOL REGAL_CALL loader_wglQueryMaxSwapGroupsNV(Layer *_layer, HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)
  {
    return driver_wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers);
  }

  static BOOL REGAL_CALL missing_wglQuerySwapGroupNV(HDC hDC, GLuint *group, GLuint *barrier)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(barrier);
    Warning( "wglQuerySwapGroupNV", " not available." );
    return 0;
  }

  PFNWGLQUERYSWAPGROUPNVPROC driver_wglQuerySwapGroupNV = NULL;

  static BOOL REGAL_CALL loader_wglQuerySwapGroupNV(Layer *_layer, HDC hDC, GLuint *group, GLuint *barrier)
  {
    return driver_wglQuerySwapGroupNV(hDC, group, barrier);
  }

  static BOOL REGAL_CALL missing_wglResetFrameCountNV(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglResetFrameCountNV", " not available." );
    return 0;
  }

  PFNWGLRESETFRAMECOUNTNVPROC driver_wglResetFrameCountNV = NULL;

  static BOOL REGAL_CALL loader_wglResetFrameCountNV(Layer *_layer, HDC hDC)
  {
    return driver_wglResetFrameCountNV(hDC);
  }

// WGL_NV_vertex_array_range

  static void *REGAL_CALL missing_wglAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(readfreq);
    UNUSED_PARAMETER(writefreq);
    UNUSED_PARAMETER(priority);
    Warning( "wglAllocateMemoryNV", " not available." );
    return NULL;
  }

  PFNWGLALLOCATEMEMORYNVPROC driver_wglAllocateMemoryNV = NULL;

  static void *REGAL_CALL loader_wglAllocateMemoryNV(Layer *_layer, GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
  {
    return driver_wglAllocateMemoryNV(size, readfreq, writefreq, priority);
  }

  static void REGAL_CALL missing_wglFreeMemoryNV(void *pointer)
  {
    UNUSED_PARAMETER(pointer);
    Warning( "wglFreeMemoryNV", " not available." );
  }

  PFNWGLFREEMEMORYNVPROC driver_wglFreeMemoryNV = NULL;

  static void REGAL_CALL loader_wglFreeMemoryNV(Layer *_layer, void *pointer)
  {
    driver_wglFreeMemoryNV(pointer);
  }

// WGL_NV_video_capture

  static BOOL REGAL_CALL missing_wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
  {
    UNUSED_PARAMETER(uVideoSlot);
    UNUSED_PARAMETER(hDevice);
    Warning( "wglBindVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  PFNWGLBINDVIDEOCAPTUREDEVICENVPROC driver_wglBindVideoCaptureDeviceNV = NULL;

  static BOOL REGAL_CALL loader_wglBindVideoCaptureDeviceNV(Layer *_layer, UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
  {
    return driver_wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice);
  }

  static UINT REGAL_CALL missing_wglEnumerateVideoCaptureDevicesNV(HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(phDeviceList);
    Warning( "wglEnumerateVideoCaptureDevicesNV", " not available." );
    return 0;
  }

  PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC driver_wglEnumerateVideoCaptureDevicesNV = NULL;

  static UINT REGAL_CALL loader_wglEnumerateVideoCaptureDevicesNV(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList)
  {
    return driver_wglEnumerateVideoCaptureDevicesNV(hDC, phDeviceList);
  }

  static BOOL REGAL_CALL missing_wglLockVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hDevice);
    Warning( "wglLockVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC driver_wglLockVideoCaptureDeviceNV = NULL;

  static BOOL REGAL_CALL loader_wglLockVideoCaptureDeviceNV(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice)
  {
    return driver_wglLockVideoCaptureDeviceNV(hDC, hDevice);
  }

  static BOOL REGAL_CALL missing_wglQueryVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hDevice);
    UNUSED_PARAMETER(iAttribute);
    UNUSED_PARAMETER(piValue);
    Warning( "wglQueryVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC driver_wglQueryVideoCaptureDeviceNV = NULL;

  static BOOL REGAL_CALL loader_wglQueryVideoCaptureDeviceNV(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)
  {
    return driver_wglQueryVideoCaptureDeviceNV(hDC, hDevice, iAttribute, piValue);
  }

  static BOOL REGAL_CALL missing_wglReleaseVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hDevice);
    Warning( "wglReleaseVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC driver_wglReleaseVideoCaptureDeviceNV = NULL;

  static BOOL REGAL_CALL loader_wglReleaseVideoCaptureDeviceNV(Layer *_layer, HDC hDC, HVIDEOINPUTDEVICENV hDevice)
  {
    return driver_wglReleaseVideoCaptureDeviceNV(hDC, hDevice);
  }

// WGL_NV_video_output

  static BOOL REGAL_CALL missing_wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
  {
    UNUSED_PARAMETER(hVideoDevice);
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iVideoBuffer);
    Warning( "wglBindVideoImageNV", " not available." );
    return 0;
  }

  PFNWGLBINDVIDEOIMAGENVPROC driver_wglBindVideoImageNV = NULL;

  static BOOL REGAL_CALL loader_wglBindVideoImageNV(Layer *_layer, HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
  {
    return driver_wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer);
  }

  static BOOL REGAL_CALL missing_wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(numDevices);
    UNUSED_PARAMETER(hVideoDevice);
    Warning( "wglGetVideoDeviceNV", " not available." );
    return 0;
  }

  PFNWGLGETVIDEODEVICENVPROC driver_wglGetVideoDeviceNV = NULL;

  static BOOL REGAL_CALL loader_wglGetVideoDeviceNV(Layer *_layer, HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)
  {
    return driver_wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice);
  }

  static BOOL REGAL_CALL missing_wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
  {
    UNUSED_PARAMETER(hpVideoDevice);
    UNUSED_PARAMETER(pulCounterOutputPbuffer);
    UNUSED_PARAMETER(pulCounterOutputVideo);
    Warning( "wglGetVideoInfoNV", " not available." );
    return 0;
  }

  PFNWGLGETVIDEOINFONVPROC driver_wglGetVideoInfoNV = NULL;

  static BOOL REGAL_CALL loader_wglGetVideoInfoNV(Layer *_layer, HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
  {
    return driver_wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }

  static BOOL REGAL_CALL missing_wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice)
  {
    UNUSED_PARAMETER(hVideoDevice);
    Warning( "wglReleaseVideoDeviceNV", " not available." );
    return 0;
  }

  PFNWGLRELEASEVIDEODEVICENVPROC driver_wglReleaseVideoDeviceNV = NULL;

  static BOOL REGAL_CALL loader_wglReleaseVideoDeviceNV(Layer *_layer, HPVIDEODEV hVideoDevice)
  {
    return driver_wglReleaseVideoDeviceNV(hVideoDevice);
  }

  static BOOL REGAL_CALL missing_wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iVideoBuffer);
    Warning( "wglReleaseVideoImageNV", " not available." );
    return 0;
  }

  PFNWGLRELEASEVIDEOIMAGENVPROC driver_wglReleaseVideoImageNV = NULL;

  static BOOL REGAL_CALL loader_wglReleaseVideoImageNV(Layer *_layer, HPBUFFERARB hPbuffer, int iVideoBuffer)
  {
    return driver_wglReleaseVideoImageNV(hPbuffer, iVideoBuffer);
  }

  static BOOL REGAL_CALL missing_wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)
  {
    UNUSED_PARAMETER(hPbuffer);
    UNUSED_PARAMETER(iBufferType);
    UNUSED_PARAMETER(pulCounterPbuffer);
    UNUSED_PARAMETER(bBlock);
    Warning( "wglSendPbufferToVideoNV", " not available." );
    return 0;
  }

  PFNWGLSENDPBUFFERTOVIDEONVPROC driver_wglSendPbufferToVideoNV = NULL;

  static BOOL REGAL_CALL loader_wglSendPbufferToVideoNV(Layer *_layer, HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)
  {
    return driver_wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  }

// WGL_OML_sync_control

  static BOOL REGAL_CALL missing_wglGetMscRateOML(HDC hDC, INT32 *numerator, INT32 *denominator)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(numerator);
    UNUSED_PARAMETER(denominator);
    Warning( "wglGetMscRateOML", " not available." );
    return 0;
  }

  PFNWGLGETMSCRATEOMLPROC driver_wglGetMscRateOML = NULL;

  static BOOL REGAL_CALL loader_wglGetMscRateOML(Layer *_layer, HDC hDC, INT32 *numerator, INT32 *denominator)
  {
    return driver_wglGetMscRateOML(hDC, numerator, denominator);
  }

  static BOOL REGAL_CALL missing_wglGetSyncValuesOML(HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "wglGetSyncValuesOML", " not available." );
    return 0;
  }

  PFNWGLGETSYNCVALUESOMLPROC driver_wglGetSyncValuesOML = NULL;

  static BOOL REGAL_CALL loader_wglGetSyncValuesOML(Layer *_layer, HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    return driver_wglGetSyncValuesOML(hDC, ust, msc, sbc);
  }

  static INT64 REGAL_CALL missing_wglSwapBuffersMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    Warning( "wglSwapBuffersMscOML", " not available." );
    return 0;
  }

  PFNWGLSWAPBUFFERSMSCOMLPROC driver_wglSwapBuffersMscOML = NULL;

  static INT64 REGAL_CALL loader_wglSwapBuffersMscOML(Layer *_layer, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder)
  {
    return driver_wglSwapBuffersMscOML(hDC, target_msc, divisor, remainder);
  }

  static INT64 REGAL_CALL missing_wglSwapLayerBuffersMscOML(HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(fuPlanes);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    Warning( "wglSwapLayerBuffersMscOML", " not available." );
    return 0;
  }

  PFNWGLSWAPLAYERBUFFERSMSCOMLPROC driver_wglSwapLayerBuffersMscOML = NULL;

  static INT64 REGAL_CALL loader_wglSwapLayerBuffersMscOML(Layer *_layer, HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
  {
    return driver_wglSwapLayerBuffersMscOML(hDC, fuPlanes, target_msc, divisor, remainder);
  }

  static BOOL REGAL_CALL missing_wglWaitForMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "wglWaitForMscOML", " not available." );
    return 0;
  }

  PFNWGLWAITFORMSCOMLPROC driver_wglWaitForMscOML = NULL;

  static BOOL REGAL_CALL loader_wglWaitForMscOML(Layer *_layer, HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    return driver_wglWaitForMscOML(hDC, target_msc, divisor, remainder, ust, msc, sbc);
  }

  static BOOL REGAL_CALL missing_wglWaitForSbcOML(HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(target_sbc);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "wglWaitForSbcOML", " not available." );
    return 0;
  }

  PFNWGLWAITFORSBCOMLPROC driver_wglWaitForSbcOML = NULL;

  static BOOL REGAL_CALL loader_wglWaitForSbcOML(Layer *_layer, HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)
  {
    return driver_wglWaitForSbcOML(hDC, target_sbc, ust, msc, sbc);
  }

// WGL_core

  static BOOL REGAL_CALL missing_wglCopyContext(HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
  {
    UNUSED_PARAMETER(hglrcSrc);
    UNUSED_PARAMETER(hglrcDst);
    UNUSED_PARAMETER(mask);
    Warning( "wglCopyContext", " not available." );
    return 0;
  }

  PFNWGLCOPYCONTEXTPROC driver_wglCopyContext = NULL;

  static BOOL REGAL_CALL loader_wglCopyContext(Layer *_layer, HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
  {
    return driver_wglCopyContext(hglrcSrc, hglrcDst, mask);
  }

  static HGLRC REGAL_CALL missing_wglCreateContext(HDC hDC)
  {
    UNUSED_PARAMETER(hDC);
    Warning( "wglCreateContext", " not available." );
    return NULL;
  }

  PFNWGLCREATECONTEXTPROC driver_wglCreateContext = NULL;

  static HGLRC REGAL_CALL loader_wglCreateContext(Layer *_layer, HDC hDC)
  {
    return driver_wglCreateContext(hDC);
  }

  static HGLRC REGAL_CALL missing_wglCreateLayerContext(HDC hDC, int iLayerPlane)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    Warning( "wglCreateLayerContext", " not available." );
    return NULL;
  }

  PFNWGLCREATELAYERCONTEXTPROC driver_wglCreateLayerContext = NULL;

  static HGLRC REGAL_CALL loader_wglCreateLayerContext(Layer *_layer, HDC hDC, int iLayerPlane)
  {
    return driver_wglCreateLayerContext(hDC, iLayerPlane);
  }

  static BOOL REGAL_CALL missing_wglDeleteContext(HGLRC hglrc)
  {
    UNUSED_PARAMETER(hglrc);
    Warning( "wglDeleteContext", " not available." );
    return 0;
  }

  PFNWGLDELETECONTEXTPROC driver_wglDeleteContext = NULL;

  static BOOL REGAL_CALL loader_wglDeleteContext(Layer *_layer, HGLRC hglrc)
  {
    return driver_wglDeleteContext(hglrc);
  }

  static BOOL REGAL_CALL missing_wglDescribeLayerPlane(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iPixelFormat);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(nBytes);
    UNUSED_PARAMETER(plpd);
    Warning( "wglDescribeLayerPlane", " not available." );
    return 0;
  }

  PFNWGLDESCRIBELAYERPLANEPROC driver_wglDescribeLayerPlane = NULL;

  static BOOL REGAL_CALL loader_wglDescribeLayerPlane(Layer *_layer, HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)
  {
    return driver_wglDescribeLayerPlane(hDC, iPixelFormat, iLayerPlane, nBytes, plpd);
  }

  static HGLRC REGAL_CALL missing_wglGetCurrentContext(void)
  {
    Warning( "wglGetCurrentContext", " not available." );
    return NULL;
  }

  PFNWGLGETCURRENTCONTEXTPROC driver_wglGetCurrentContext = NULL;

  static HGLRC REGAL_CALL loader_wglGetCurrentContext(Layer *_layer)
  {
    return driver_wglGetCurrentContext();
  }

  static HDC REGAL_CALL missing_wglGetCurrentDC(void)
  {
    Warning( "wglGetCurrentDC", " not available." );
    return NULL;
  }

  PFNWGLGETCURRENTDCPROC driver_wglGetCurrentDC = NULL;

  static HDC REGAL_CALL loader_wglGetCurrentDC(Layer *_layer)
  {
    return driver_wglGetCurrentDC();
  }

  static PROC REGAL_CALL missing_wglGetDefaultProcAddress(LPCSTR lpszProc)
  {
    UNUSED_PARAMETER(lpszProc);
    Warning( "wglGetDefaultProcAddress", " not available." );
    return NULL;
  }

  PFNWGLGETDEFAULTPROCADDRESSPROC driver_wglGetDefaultProcAddress = NULL;

  static PROC REGAL_CALL loader_wglGetDefaultProcAddress(Layer *_layer, LPCSTR lpszProc)
  {
    return driver_wglGetDefaultProcAddress(lpszProc);
  }

  static int REGAL_CALL missing_wglGetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(iStart);
    UNUSED_PARAMETER(nEntries);
    UNUSED_PARAMETER(pcr);
    Warning( "wglGetLayerPaletteEntries", " not available." );
    return 0;
  }

  PFNWGLGETLAYERPALETTEENTRIESPROC driver_wglGetLayerPaletteEntries = NULL;

  static int REGAL_CALL loader_wglGetLayerPaletteEntries(Layer *_layer, HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr)
  {
    return driver_wglGetLayerPaletteEntries(hDC, iLayerPlane, iStart, nEntries, pcr);
  }

  static PROC REGAL_CALL missing_wglGetProcAddress(LPCSTR lpszProc)
  {
    UNUSED_PARAMETER(lpszProc);
    Warning( "wglGetProcAddress", " not available." );
    return NULL;
  }

  PFNWGLGETPROCADDRESSPROC driver_wglGetProcAddress = NULL;

  static PROC REGAL_CALL loader_wglGetProcAddress(Layer *_layer, LPCSTR lpszProc)
  {
    return driver_wglGetProcAddress(lpszProc);
  }

  static BOOL REGAL_CALL missing_wglMakeCurrent(HDC hDC, HGLRC hglrc)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(hglrc);
    Warning( "wglMakeCurrent", " not available." );
    return 0;
  }

  PFNWGLMAKECURRENTPROC driver_wglMakeCurrent = NULL;

  static BOOL REGAL_CALL loader_wglMakeCurrent(Layer *_layer, HDC hDC, HGLRC hglrc)
  {
    return driver_wglMakeCurrent(hDC, hglrc);
  }

  static BOOL REGAL_CALL missing_wglRealizeLayerPalette(HDC hDC, int iLayerPlane, BOOL bRealize)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(bRealize);
    Warning( "wglRealizeLayerPalette", " not available." );
    return 0;
  }

  PFNWGLREALIZELAYERPALETTEPROC driver_wglRealizeLayerPalette = NULL;

  static BOOL REGAL_CALL loader_wglRealizeLayerPalette(Layer *_layer, HDC hDC, int iLayerPlane, BOOL bRealize)
  {
    return driver_wglRealizeLayerPalette(hDC, iLayerPlane, bRealize);
  }

  static int REGAL_CALL missing_wglSetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(iLayerPlane);
    UNUSED_PARAMETER(iStart);
    UNUSED_PARAMETER(nEntries);
    UNUSED_PARAMETER(pcr);
    Warning( "wglSetLayerPaletteEntries", " not available." );
    return 0;
  }

  PFNWGLSETLAYERPALETTEENTRIESPROC driver_wglSetLayerPaletteEntries = NULL;

  static int REGAL_CALL loader_wglSetLayerPaletteEntries(Layer *_layer, HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr)
  {
    return driver_wglSetLayerPaletteEntries(hDC, iLayerPlane, iStart, nEntries, pcr);
  }

  static BOOL REGAL_CALL missing_wglShareLists(HGLRC hglrcShare, HGLRC hglrcSrc)
  {
    UNUSED_PARAMETER(hglrcShare);
    UNUSED_PARAMETER(hglrcSrc);
    Warning( "wglShareLists", " not available." );
    return 0;
  }

  PFNWGLSHARELISTSPROC driver_wglShareLists = NULL;

  static BOOL REGAL_CALL loader_wglShareLists(Layer *_layer, HGLRC hglrcShare, HGLRC hglrcSrc)
  {
    return driver_wglShareLists(hglrcShare, hglrcSrc);
  }

  static BOOL REGAL_CALL missing_wglSwapLayerBuffers(HDC hDC, UINT fuPlanes)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(fuPlanes);
    Warning( "wglSwapLayerBuffers", " not available." );
    return 0;
  }

  PFNWGLSWAPLAYERBUFFERSPROC driver_wglSwapLayerBuffers = NULL;

  static BOOL REGAL_CALL loader_wglSwapLayerBuffers(Layer *_layer, HDC hDC, UINT fuPlanes)
  {
    return driver_wglSwapLayerBuffers(hDC, fuPlanes);
  }

  static DWORD REGAL_CALL missing_wglSwapMultipleBuffers(UINT n, const WGLSWAP *ps)
  {
    UNUSED_PARAMETER(n);
    UNUSED_PARAMETER(ps);
    Warning( "wglSwapMultipleBuffers", " not available." );
    return 0;
  }

  PFNWGLSWAPMULTIPLEBUFFERSPROC driver_wglSwapMultipleBuffers = NULL;

  static DWORD REGAL_CALL loader_wglSwapMultipleBuffers(Layer *_layer, UINT n, const WGLSWAP *ps)
  {
    return driver_wglSwapMultipleBuffers(n, ps);
  }

  static BOOL REGAL_CALL missing_wglUseFontBitmapsA(HDC hDC, DWORD first, DWORD count, DWORD listBase)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    Warning( "wglUseFontBitmapsA", " not available." );
    return 0;
  }

  PFNWGLUSEFONTBITMAPSAPROC driver_wglUseFontBitmapsA = NULL;

  static BOOL REGAL_CALL loader_wglUseFontBitmapsA(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase)
  {
    return driver_wglUseFontBitmapsA(hDC, first, count, listBase);
  }

  static BOOL REGAL_CALL missing_wglUseFontBitmapsW(HDC hDC, DWORD first, DWORD count, DWORD listBase)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    Warning( "wglUseFontBitmapsW", " not available." );
    return 0;
  }

  PFNWGLUSEFONTBITMAPSWPROC driver_wglUseFontBitmapsW = NULL;

  static BOOL REGAL_CALL loader_wglUseFontBitmapsW(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase)
  {
    return driver_wglUseFontBitmapsW(hDC, first, count, listBase);
  }

  static BOOL REGAL_CALL missing_wglUseFontOutlinesA(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    UNUSED_PARAMETER(deviation);
    UNUSED_PARAMETER(extrusion);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(lpgmf);
    Warning( "wglUseFontOutlinesA", " not available." );
    return 0;
  }

  PFNWGLUSEFONTOUTLINESAPROC driver_wglUseFontOutlinesA = NULL;

  static BOOL REGAL_CALL loader_wglUseFontOutlinesA(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
  {
    return driver_wglUseFontOutlinesA(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }

  static BOOL REGAL_CALL missing_wglUseFontOutlinesW(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
  {
    UNUSED_PARAMETER(hDC);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    UNUSED_PARAMETER(deviation);
    UNUSED_PARAMETER(extrusion);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(lpgmf);
    Warning( "wglUseFontOutlinesW", " not available." );
    return 0;
  }

  PFNWGLUSEFONTOUTLINESWPROC driver_wglUseFontOutlinesW = NULL;

  static BOOL REGAL_CALL loader_wglUseFontOutlinesW(Layer *_layer, HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
  {
    return driver_wglUseFontOutlinesW(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }

#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX

// GLX_VERSION_1_0

  static XVisualInfo *REGAL_CALL missing_glXChooseVisual(Display *dpy, int screen, int *attribList)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(attribList);
    Warning( "glXChooseVisual", " not available." );
    return NULL;
  }

  PFNGLXCHOOSEVISUALPROC driver_glXChooseVisual = NULL;

  static XVisualInfo *REGAL_CALL loader_glXChooseVisual(Layer *_layer, Display *dpy, int screen, int *attribList)
  {
    return driver_glXChooseVisual(dpy, screen, attribList);
  }

  static void REGAL_CALL missing_glXCopyContext(Display *dpy, GLXContext src, GLXContext dst, unsigned long mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(mask);
    Warning( "glXCopyContext", " not available." );
  }

  PFNGLXCOPYCONTEXTPROC driver_glXCopyContext = NULL;

  static void REGAL_CALL loader_glXCopyContext(Layer *_layer, Display *dpy, GLXContext src, GLXContext dst, unsigned long mask)
  {
    driver_glXCopyContext(dpy, src, dst, mask);
  }

  static GLXContext REGAL_CALL missing_glXCreateContext(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(vis);
    UNUSED_PARAMETER(shareList);
    UNUSED_PARAMETER(direct);
    Warning( "glXCreateContext", " not available." );
    return 0;
  }

  PFNGLXCREATECONTEXTPROC driver_glXCreateContext = NULL;

  static GLXContext REGAL_CALL loader_glXCreateContext(Layer *_layer, Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
  {
    return driver_glXCreateContext(dpy, vis, shareList, direct);
  }

  static GLXPixmap REGAL_CALL missing_glXCreateGLXPixmap(Display *dpy, XVisualInfo *vis, Pixmap pixmap)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(vis);
    UNUSED_PARAMETER(pixmap);
    Warning( "glXCreateGLXPixmap", " not available." );
    return 0;
  }

  PFNGLXCREATEGLXPIXMAPPROC driver_glXCreateGLXPixmap = NULL;

  static GLXPixmap REGAL_CALL loader_glXCreateGLXPixmap(Layer *_layer, Display *dpy, XVisualInfo *vis, Pixmap pixmap)
  {
    return driver_glXCreateGLXPixmap(dpy, vis, pixmap);
  }

  static void REGAL_CALL missing_glXDestroyContext(Display *dpy, GLXContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    Warning( "glXDestroyContext", " not available." );
  }

  PFNGLXDESTROYCONTEXTPROC driver_glXDestroyContext = NULL;

  static void REGAL_CALL loader_glXDestroyContext(Layer *_layer, Display *dpy, GLXContext ctx)
  {
    driver_glXDestroyContext(dpy, ctx);
  }

  static void REGAL_CALL missing_glXDestroyGLXPixmap(Display *dpy, GLXPixmap pix)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pix);
    Warning( "glXDestroyGLXPixmap", " not available." );
  }

  PFNGLXDESTROYGLXPIXMAPPROC driver_glXDestroyGLXPixmap = NULL;

  static void REGAL_CALL loader_glXDestroyGLXPixmap(Layer *_layer, Display *dpy, GLXPixmap pix)
  {
    driver_glXDestroyGLXPixmap(dpy, pix);
  }

  static int REGAL_CALL missing_glXGetConfig(Display *dpy, XVisualInfo *vis, int attrib, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(vis);
    UNUSED_PARAMETER(attrib);
    UNUSED_PARAMETER(value);
    Warning( "glXGetConfig", " not available." );
    return 0;
  }

  PFNGLXGETCONFIGPROC driver_glXGetConfig = NULL;

  static int REGAL_CALL loader_glXGetConfig(Layer *_layer, Display *dpy, XVisualInfo *vis, int attrib, int *value)
  {
    return driver_glXGetConfig(dpy, vis, attrib, value);
  }

  static GLXContext REGAL_CALL missing_glXGetCurrentContext(void)
  {
    Warning( "glXGetCurrentContext", " not available." );
    return 0;
  }

  PFNGLXGETCURRENTCONTEXTPROC driver_glXGetCurrentContext = NULL;

  static GLXContext REGAL_CALL loader_glXGetCurrentContext(Layer *_layer)
  {
    return driver_glXGetCurrentContext();
  }

  static GLXDrawable REGAL_CALL missing_glXGetCurrentDrawable(void)
  {
    Warning( "glXGetCurrentDrawable", " not available." );
    return 0;
  }

  PFNGLXGETCURRENTDRAWABLEPROC driver_glXGetCurrentDrawable = NULL;

  static GLXDrawable REGAL_CALL loader_glXGetCurrentDrawable(Layer *_layer)
  {
    return driver_glXGetCurrentDrawable();
  }

  static Bool REGAL_CALL missing_glXIsDirect(Display *dpy, GLXContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    Warning( "glXIsDirect", " not available." );
    return (Bool) 0;
  }

  PFNGLXISDIRECTPROC driver_glXIsDirect = NULL;

  static Bool REGAL_CALL loader_glXIsDirect(Layer *_layer, Display *dpy, GLXContext ctx)
  {
    return driver_glXIsDirect(dpy, ctx);
  }

  static Bool REGAL_CALL missing_glXMakeCurrent(Display *dpy, GLXDrawable drawable, GLXContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(ctx);
    Warning( "glXMakeCurrent", " not available." );
    return (Bool) 0;
  }

  PFNGLXMAKECURRENTPROC driver_glXMakeCurrent = NULL;

  static Bool REGAL_CALL loader_glXMakeCurrent(Layer *_layer, Display *dpy, GLXDrawable drawable, GLXContext ctx)
  {
    return driver_glXMakeCurrent(dpy, drawable, ctx);
  }

  static Bool REGAL_CALL missing_glXQueryExtension(Display *dpy, int *errorBase, int *eventBase)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(errorBase);
    UNUSED_PARAMETER(eventBase);
    Warning( "glXQueryExtension", " not available." );
    return (Bool) 0;
  }

  PFNGLXQUERYEXTENSIONPROC driver_glXQueryExtension = NULL;

  static Bool REGAL_CALL loader_glXQueryExtension(Layer *_layer, Display *dpy, int *errorBase, int *eventBase)
  {
    return driver_glXQueryExtension(dpy, errorBase, eventBase);
  }

  static Bool REGAL_CALL missing_glXQueryVersion(Display *dpy, int *major, int *minor)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(major);
    UNUSED_PARAMETER(minor);
    Warning( "glXQueryVersion", " not available." );
    return (Bool) 0;
  }

  PFNGLXQUERYVERSIONPROC driver_glXQueryVersion = NULL;

  static Bool REGAL_CALL loader_glXQueryVersion(Layer *_layer, Display *dpy, int *major, int *minor)
  {
    return driver_glXQueryVersion(dpy, major, minor);
  }

  static void REGAL_CALL missing_glXSwapBuffers(Display *dpy, GLXDrawable drawable)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    Warning( "glXSwapBuffers", " not available." );
  }

  PFNGLXSWAPBUFFERSPROC driver_glXSwapBuffers = NULL;

  static void REGAL_CALL loader_glXSwapBuffers(Layer *_layer, Display *dpy, GLXDrawable drawable)
  {
    driver_glXSwapBuffers(dpy, drawable);
  }

  static void REGAL_CALL missing_glXUseXFont(Font font, int first, int count, int listBase)
  {
    UNUSED_PARAMETER(font);
    UNUSED_PARAMETER(first);
    UNUSED_PARAMETER(count);
    UNUSED_PARAMETER(listBase);
    Warning( "glXUseXFont", " not available." );
  }

  PFNGLXUSEXFONTPROC driver_glXUseXFont = NULL;

  static void REGAL_CALL loader_glXUseXFont(Layer *_layer, Font font, int first, int count, int listBase)
  {
    driver_glXUseXFont(font, first, count, listBase);
  }

  static void REGAL_CALL missing_glXWaitGL(void)
  {
    Warning( "glXWaitGL", " not available." );
  }

  PFNGLXWAITGLPROC driver_glXWaitGL = NULL;

  static void REGAL_CALL loader_glXWaitGL(Layer *_layer)
  {
    driver_glXWaitGL();
  }

  static void REGAL_CALL missing_glXWaitX(void)
  {
    Warning( "glXWaitX", " not available." );
  }

  PFNGLXWAITXPROC driver_glXWaitX = NULL;

  static void REGAL_CALL loader_glXWaitX(Layer *_layer)
  {
    driver_glXWaitX();
  }

// GLX_VERSION_1_1

  static const char *REGAL_CALL missing_glXGetClientString(Display *dpy, int name)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(name);
    Warning( "glXGetClientString", " not available." );
    return NULL;
  }

  PFNGLXGETCLIENTSTRINGPROC driver_glXGetClientString = NULL;

  static const char *REGAL_CALL loader_glXGetClientString(Layer *_layer, Display *dpy, int name)
  {
    return driver_glXGetClientString(dpy, name);
  }

  static const char *REGAL_CALL missing_glXQueryExtensionsString(Display *dpy, int screen)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    Warning( "glXQueryExtensionsString", " not available." );
    return NULL;
  }

  PFNGLXQUERYEXTENSIONSSTRINGPROC driver_glXQueryExtensionsString = NULL;

  static const char *REGAL_CALL loader_glXQueryExtensionsString(Layer *_layer, Display *dpy, int screen)
  {
    return driver_glXQueryExtensionsString(dpy, screen);
  }

  static const char *REGAL_CALL missing_glXQueryServerString(Display *dpy, int screen, int name)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(name);
    Warning( "glXQueryServerString", " not available." );
    return NULL;
  }

  PFNGLXQUERYSERVERSTRINGPROC driver_glXQueryServerString = NULL;

  static const char *REGAL_CALL loader_glXQueryServerString(Layer *_layer, Display *dpy, int screen, int name)
  {
    return driver_glXQueryServerString(dpy, screen, name);
  }

// GLX_VERSION_1_2

  static Display *REGAL_CALL missing_glXGetCurrentDisplay(void)
  {
    Warning( "glXGetCurrentDisplay", " not available." );
    return NULL;
  }

  PFNGLXGETCURRENTDISPLAYPROC driver_glXGetCurrentDisplay = NULL;

  static Display *REGAL_CALL loader_glXGetCurrentDisplay(Layer *_layer)
  {
    return driver_glXGetCurrentDisplay();
  }

// GLX_VERSION_1_3

  static GLXFBConfig *REGAL_CALL missing_glXChooseFBConfig(Display *dpy, int screen, const int *attrib_list, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(attrib_list);
    UNUSED_PARAMETER(nelements);
    Warning( "glXChooseFBConfig", " not available." );
    return NULL;
  }

  PFNGLXCHOOSEFBCONFIGPROC driver_glXChooseFBConfig = NULL;

  static GLXFBConfig *REGAL_CALL loader_glXChooseFBConfig(Layer *_layer, Display *dpy, int screen, const int *attrib_list, int *nelements)
  {
    return driver_glXChooseFBConfig(dpy, screen, attrib_list, nelements);
  }

  static GLXContext REGAL_CALL missing_glXCreateNewContext(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(render_type);
    UNUSED_PARAMETER(share_list);
    UNUSED_PARAMETER(direct);
    Warning( "glXCreateNewContext", " not available." );
    return 0;
  }

  PFNGLXCREATENEWCONTEXTPROC driver_glXCreateNewContext = NULL;

  static GLXContext REGAL_CALL loader_glXCreateNewContext(Layer *_layer, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
  {
    return driver_glXCreateNewContext(dpy, config, render_type, share_list, direct);
  }

  static GLXPbuffer REGAL_CALL missing_glXCreatePbuffer(Display *dpy, GLXFBConfig config, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreatePbuffer", " not available." );
    return 0;
  }

  PFNGLXCREATEPBUFFERPROC driver_glXCreatePbuffer = NULL;

  static GLXPbuffer REGAL_CALL loader_glXCreatePbuffer(Layer *_layer, Display *dpy, GLXFBConfig config, const int *attrib_list)
  {
    return driver_glXCreatePbuffer(dpy, config, attrib_list);
  }

  static GLXPixmap REGAL_CALL missing_glXCreatePixmap(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(pixmap);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreatePixmap", " not available." );
    return 0;
  }

  PFNGLXCREATEPIXMAPPROC driver_glXCreatePixmap = NULL;

  static GLXPixmap REGAL_CALL loader_glXCreatePixmap(Layer *_layer, Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)
  {
    return driver_glXCreatePixmap(dpy, config, pixmap, attrib_list);
  }

  static GLXWindow REGAL_CALL missing_glXCreateWindow(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(win);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreateWindow", " not available." );
    return 0;
  }

  PFNGLXCREATEWINDOWPROC driver_glXCreateWindow = NULL;

  static GLXWindow REGAL_CALL loader_glXCreateWindow(Layer *_layer, Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)
  {
    return driver_glXCreateWindow(dpy, config, win, attrib_list);
  }

  static void REGAL_CALL missing_glXDestroyPbuffer(Display *dpy, GLXPbuffer pbuf)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    Warning( "glXDestroyPbuffer", " not available." );
  }

  PFNGLXDESTROYPBUFFERPROC driver_glXDestroyPbuffer = NULL;

  static void REGAL_CALL loader_glXDestroyPbuffer(Layer *_layer, Display *dpy, GLXPbuffer pbuf)
  {
    driver_glXDestroyPbuffer(dpy, pbuf);
  }

  static void REGAL_CALL missing_glXDestroyPixmap(Display *dpy, GLXPixmap pixmap)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pixmap);
    Warning( "glXDestroyPixmap", " not available." );
  }

  PFNGLXDESTROYPIXMAPPROC driver_glXDestroyPixmap = NULL;

  static void REGAL_CALL loader_glXDestroyPixmap(Layer *_layer, Display *dpy, GLXPixmap pixmap)
  {
    driver_glXDestroyPixmap(dpy, pixmap);
  }

  static void REGAL_CALL missing_glXDestroyWindow(Display *dpy, GLXWindow win)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(win);
    Warning( "glXDestroyWindow", " not available." );
  }

  PFNGLXDESTROYWINDOWPROC driver_glXDestroyWindow = NULL;

  static void REGAL_CALL loader_glXDestroyWindow(Layer *_layer, Display *dpy, GLXWindow win)
  {
    driver_glXDestroyWindow(dpy, win);
  }

  static GLXDrawable REGAL_CALL missing_glXGetCurrentReadDrawable(void)
  {
    Warning( "glXGetCurrentReadDrawable", " not available." );
    return 0;
  }

  PFNGLXGETCURRENTREADDRAWABLEPROC driver_glXGetCurrentReadDrawable = NULL;

  static GLXDrawable REGAL_CALL loader_glXGetCurrentReadDrawable(Layer *_layer)
  {
    return driver_glXGetCurrentReadDrawable();
  }

  static int REGAL_CALL missing_glXGetFBConfigAttrib(Display *dpy, GLXFBConfig config, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXGetFBConfigAttrib", " not available." );
    return 0;
  }

  PFNGLXGETFBCONFIGATTRIBPROC driver_glXGetFBConfigAttrib = NULL;

  static int REGAL_CALL loader_glXGetFBConfigAttrib(Layer *_layer, Display *dpy, GLXFBConfig config, int attribute, int *value)
  {
    return driver_glXGetFBConfigAttrib(dpy, config, attribute, value);
  }

  static GLXFBConfig *REGAL_CALL missing_glXGetFBConfigs(Display *dpy, int screen, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(nelements);
    Warning( "glXGetFBConfigs", " not available." );
    return NULL;
  }

  PFNGLXGETFBCONFIGSPROC driver_glXGetFBConfigs = NULL;

  static GLXFBConfig *REGAL_CALL loader_glXGetFBConfigs(Layer *_layer, Display *dpy, int screen, int *nelements)
  {
    return driver_glXGetFBConfigs(dpy, screen, nelements);
  }

  static void REGAL_CALL missing_glXGetSelectedEvent(Display *dpy, GLXDrawable draw, unsigned long *event_mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(event_mask);
    Warning( "glXGetSelectedEvent", " not available." );
  }

  PFNGLXGETSELECTEDEVENTPROC driver_glXGetSelectedEvent = NULL;

  static void REGAL_CALL loader_glXGetSelectedEvent(Layer *_layer, Display *dpy, GLXDrawable draw, unsigned long *event_mask)
  {
    driver_glXGetSelectedEvent(dpy, draw, event_mask);
  }

  static XVisualInfo *REGAL_CALL missing_glXGetVisualFromFBConfig(Display *dpy, GLXFBConfig config)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    Warning( "glXGetVisualFromFBConfig", " not available." );
    return NULL;
  }

  PFNGLXGETVISUALFROMFBCONFIGPROC driver_glXGetVisualFromFBConfig = NULL;

  static XVisualInfo *REGAL_CALL loader_glXGetVisualFromFBConfig(Layer *_layer, Display *dpy, GLXFBConfig config)
  {
    return driver_glXGetVisualFromFBConfig(dpy, config);
  }

  static Bool REGAL_CALL missing_glXMakeContextCurrent(Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(read);
    UNUSED_PARAMETER(ctx);
    Warning( "glXMakeContextCurrent", " not available." );
    return (Bool) 0;
  }

  PFNGLXMAKECONTEXTCURRENTPROC driver_glXMakeContextCurrent = NULL;

  static Bool REGAL_CALL loader_glXMakeContextCurrent(Layer *_layer, Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
  {
    return driver_glXMakeContextCurrent(display, draw, read, ctx);
  }

  static int REGAL_CALL missing_glXQueryContext(Display *dpy, GLXContext ctx, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryContext", " not available." );
    return 0;
  }

  PFNGLXQUERYCONTEXTPROC driver_glXQueryContext = NULL;

  static int REGAL_CALL loader_glXQueryContext(Layer *_layer, Display *dpy, GLXContext ctx, int attribute, int *value)
  {
    return driver_glXQueryContext(dpy, ctx, attribute, value);
  }

  static void REGAL_CALL missing_glXQueryDrawable(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryDrawable", " not available." );
  }

  PFNGLXQUERYDRAWABLEPROC driver_glXQueryDrawable = NULL;

  static void REGAL_CALL loader_glXQueryDrawable(Layer *_layer, Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
  {
    driver_glXQueryDrawable(dpy, draw, attribute, value);
  }

  static void REGAL_CALL missing_glXSelectEvent(Display *dpy, GLXDrawable draw, unsigned long event_mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(event_mask);
    Warning( "glXSelectEvent", " not available." );
  }

  PFNGLXSELECTEVENTPROC driver_glXSelectEvent = NULL;

  static void REGAL_CALL loader_glXSelectEvent(Layer *_layer, Display *dpy, GLXDrawable draw, unsigned long event_mask)
  {
    driver_glXSelectEvent(dpy, draw, event_mask);
  }

// GLX_VERSION_1_4

  static __GLXextFuncPtr REGAL_CALL missing_glXGetProcAddress(const GLubyte *procName)
  {
    UNUSED_PARAMETER(procName);
    Warning( "glXGetProcAddress", " not available." );
    return NULL;
  }

  PFNGLXGETPROCADDRESSPROC driver_glXGetProcAddress = NULL;

  static __GLXextFuncPtr REGAL_CALL loader_glXGetProcAddress(Layer *_layer, const GLubyte *procName)
  {
    return driver_glXGetProcAddress(procName);
  }

// GLX_AMD_gpu_association

  static void REGAL_CALL missing_glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    UNUSED_PARAMETER(dstCtx);
    UNUSED_PARAMETER(srcX0);
    UNUSED_PARAMETER(srcY0);
    UNUSED_PARAMETER(srcX1);
    UNUSED_PARAMETER(srcY1);
    UNUSED_PARAMETER(dstX0);
    UNUSED_PARAMETER(dstY0);
    UNUSED_PARAMETER(dstX1);
    UNUSED_PARAMETER(dstY1);
    UNUSED_PARAMETER(mask);
    UNUSED_PARAMETER(filter);
    Warning( "glXBlitContextFramebufferAMD", " not available." );
  }

  PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC driver_glXBlitContextFramebufferAMD = NULL;

  static void REGAL_CALL loader_glXBlitContextFramebufferAMD(Layer *_layer, GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
  {
    driver_glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }

  static GLXContext REGAL_CALL missing_glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(share_list);
    Warning( "glXCreateAssociatedContextAMD", " not available." );
    return 0;
  }

  PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC driver_glXCreateAssociatedContextAMD = NULL;

  static GLXContext REGAL_CALL loader_glXCreateAssociatedContextAMD(Layer *_layer, unsigned int id, GLXContext share_list)
  {
    return driver_glXCreateAssociatedContextAMD(id, share_list);
  }

  static GLXContext REGAL_CALL missing_glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int *attribList)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(share_context);
    UNUSED_PARAMETER(attribList);
    Warning( "glXCreateAssociatedContextAttribsAMD", " not available." );
    return 0;
  }

  PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC driver_glXCreateAssociatedContextAttribsAMD = NULL;

  static GLXContext REGAL_CALL loader_glXCreateAssociatedContextAttribsAMD(Layer *_layer, unsigned int id, GLXContext share_context, const int *attribList)
  {
    return driver_glXCreateAssociatedContextAttribsAMD(id, share_context, attribList);
  }

  static Bool REGAL_CALL missing_glXDeleteAssociatedContextAMD(GLXContext ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "glXDeleteAssociatedContextAMD", " not available." );
    return (Bool) 0;
  }

  PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC driver_glXDeleteAssociatedContextAMD = NULL;

  static Bool REGAL_CALL loader_glXDeleteAssociatedContextAMD(Layer *_layer, GLXContext ctx)
  {
    return driver_glXDeleteAssociatedContextAMD(ctx);
  }

  static unsigned int REGAL_CALL missing_glXGetContextGPUIDAMD(GLXContext ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "glXGetContextGPUIDAMD", " not available." );
    return (unsigned int) 0;
  }

  PFNGLXGETCONTEXTGPUIDAMDPROC driver_glXGetContextGPUIDAMD = NULL;

  static unsigned int REGAL_CALL loader_glXGetContextGPUIDAMD(Layer *_layer, GLXContext ctx)
  {
    return driver_glXGetContextGPUIDAMD(ctx);
  }

  static GLXContext REGAL_CALL missing_glXGetCurrentAssociatedContextAMD(void)
  {
    Warning( "glXGetCurrentAssociatedContextAMD", " not available." );
    return 0;
  }

  PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC driver_glXGetCurrentAssociatedContextAMD = NULL;

  static GLXContext REGAL_CALL loader_glXGetCurrentAssociatedContextAMD(Layer *_layer)
  {
    return driver_glXGetCurrentAssociatedContextAMD();
  }

  static unsigned int REGAL_CALL missing_glXGetGPUIDsAMD(unsigned int maxCount, unsigned int *ids)
  {
    UNUSED_PARAMETER(maxCount);
    UNUSED_PARAMETER(ids);
    Warning( "glXGetGPUIDsAMD", " not available." );
    return (unsigned int) 0;
  }

  PFNGLXGETGPUIDSAMDPROC driver_glXGetGPUIDsAMD = NULL;

  static unsigned int REGAL_CALL loader_glXGetGPUIDsAMD(Layer *_layer, unsigned int maxCount, unsigned int *ids)
  {
    return driver_glXGetGPUIDsAMD(maxCount, ids);
  }

  static int REGAL_CALL missing_glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, GLvoid *data)
  {
    UNUSED_PARAMETER(id);
    UNUSED_PARAMETER(property);
    UNUSED_PARAMETER(dataType);
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(data);
    Warning( "glXGetGPUInfoAMD", " not available." );
    return 0;
  }

  PFNGLXGETGPUINFOAMDPROC driver_glXGetGPUInfoAMD = NULL;

  static int REGAL_CALL loader_glXGetGPUInfoAMD(Layer *_layer, unsigned int id, int property, GLenum dataType, unsigned int size, GLvoid *data)
  {
    return driver_glXGetGPUInfoAMD(id, property, dataType, size, data);
  }

  static Bool REGAL_CALL missing_glXMakeAssociatedContextCurrentAMD(GLXContext ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "glXMakeAssociatedContextCurrentAMD", " not available." );
    return (Bool) 0;
  }

  PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC driver_glXMakeAssociatedContextCurrentAMD = NULL;

  static Bool REGAL_CALL loader_glXMakeAssociatedContextCurrentAMD(Layer *_layer, GLXContext ctx)
  {
    return driver_glXMakeAssociatedContextCurrentAMD(ctx);
  }

// GLX_ARB_create_context

  static GLXContext REGAL_CALL missing_glXCreateContextAttribsARB(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(share_context);
    UNUSED_PARAMETER(direct);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreateContextAttribsARB", " not available." );
    return 0;
  }

  PFNGLXCREATECONTEXTATTRIBSARBPROC driver_glXCreateContextAttribsARB = NULL;

  static GLXContext REGAL_CALL loader_glXCreateContextAttribsARB(Layer *_layer, Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
  {
    return driver_glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
  }

// GLX_ARB_get_proc_address

  static __GLXextFuncPtr REGAL_CALL missing_glXGetProcAddressARB(const GLubyte *procName)
  {
    UNUSED_PARAMETER(procName);
    Warning( "glXGetProcAddressARB", " not available." );
    return NULL;
  }

  PFNGLXGETPROCADDRESSARBPROC driver_glXGetProcAddressARB = NULL;

  static __GLXextFuncPtr REGAL_CALL loader_glXGetProcAddressARB(Layer *_layer, const GLubyte *procName)
  {
    return driver_glXGetProcAddressARB(procName);
  }

// GLX_ATI_render_texture

  static void REGAL_CALL missing_glXBindTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(buffer);
    Warning( "glXBindTexImageATI", " not available." );
  }

  PFNGLXBINDTEXIMAGEATIPROC driver_glXBindTexImageATI = NULL;

  static void REGAL_CALL loader_glXBindTexImageATI(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int buffer)
  {
    driver_glXBindTexImageATI(dpy, pbuf, buffer);
  }

  static void REGAL_CALL missing_glXDrawableAttribATI(Display *dpy, GLXDrawable draw, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXDrawableAttribATI", " not available." );
  }

  PFNGLXDRAWABLEATTRIBATIPROC driver_glXDrawableAttribATI = NULL;

  static void REGAL_CALL loader_glXDrawableAttribATI(Layer *_layer, Display *dpy, GLXDrawable draw, const int *attrib_list)
  {
    driver_glXDrawableAttribATI(dpy, draw, attrib_list);
  }

  static void REGAL_CALL missing_glXReleaseTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(buffer);
    Warning( "glXReleaseTexImageATI", " not available." );
  }

  PFNGLXRELEASETEXIMAGEATIPROC driver_glXReleaseTexImageATI = NULL;

  static void REGAL_CALL loader_glXReleaseTexImageATI(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int buffer)
  {
    driver_glXReleaseTexImageATI(dpy, pbuf, buffer);
  }

// GLX_EXT_import_context

  static void REGAL_CALL missing_glXFreeContextEXT(Display *dpy, GLXContext context)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(context);
    Warning( "glXFreeContextEXT", " not available." );
  }

  PFNGLXFREECONTEXTEXTPROC driver_glXFreeContextEXT = NULL;

  static void REGAL_CALL loader_glXFreeContextEXT(Layer *_layer, Display *dpy, GLXContext context)
  {
    driver_glXFreeContextEXT(dpy, context);
  }

  static GLXContextID REGAL_CALL missing_glXGetContextIDEXT(const GLXContext context)
  {
    UNUSED_PARAMETER(context);
    Warning( "glXGetContextIDEXT", " not available." );
    return 0;
  }

  PFNGLXGETCONTEXTIDEXTPROC driver_glXGetContextIDEXT = NULL;

  static GLXContextID REGAL_CALL loader_glXGetContextIDEXT(Layer *_layer, const GLXContext context)
  {
    return driver_glXGetContextIDEXT(context);
  }

  static GLXContext REGAL_CALL missing_glXImportContextEXT(Display *dpy, GLXContextID contextID)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(contextID);
    Warning( "glXImportContextEXT", " not available." );
    return 0;
  }

  PFNGLXIMPORTCONTEXTEXTPROC driver_glXImportContextEXT = NULL;

  static GLXContext REGAL_CALL loader_glXImportContextEXT(Layer *_layer, Display *dpy, GLXContextID contextID)
  {
    return driver_glXImportContextEXT(dpy, contextID);
  }

  static int REGAL_CALL missing_glXQueryContextInfoEXT(Display *dpy, GLXContext context, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(context);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryContextInfoEXT", " not available." );
    return 0;
  }

  PFNGLXQUERYCONTEXTINFOEXTPROC driver_glXQueryContextInfoEXT = NULL;

  static int REGAL_CALL loader_glXQueryContextInfoEXT(Layer *_layer, Display *dpy, GLXContext context, int attribute, int *value)
  {
    return driver_glXQueryContextInfoEXT(dpy, context, attribute, value);
  }

// GLX_EXT_swap_control

  static void REGAL_CALL missing_glXSwapIntervalEXT(Display *dpy, GLXDrawable drawable, int interval)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(interval);
    Warning( "glXSwapIntervalEXT", " not available." );
  }

  PFNGLXSWAPINTERVALEXTPROC driver_glXSwapIntervalEXT = NULL;

  static void REGAL_CALL loader_glXSwapIntervalEXT(Layer *_layer, Display *dpy, GLXDrawable drawable, int interval)
  {
    driver_glXSwapIntervalEXT(dpy, drawable, interval);
  }

// GLX_EXT_texture_from_pixmap

  static void REGAL_CALL missing_glXBindTexImageEXT(Display *display, GLXDrawable drawable, int buffer, const int *attrib_list)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXBindTexImageEXT", " not available." );
  }

  PFNGLXBINDTEXIMAGEEXTPROC driver_glXBindTexImageEXT = NULL;

  static void REGAL_CALL loader_glXBindTexImageEXT(Layer *_layer, Display *display, GLXDrawable drawable, int buffer, const int *attrib_list)
  {
    driver_glXBindTexImageEXT(display, drawable, buffer, attrib_list);
  }

  static void REGAL_CALL missing_glXReleaseTexImageEXT(Display *display, GLXDrawable drawable, int buffer)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(buffer);
    Warning( "glXReleaseTexImageEXT", " not available." );
  }

  PFNGLXRELEASETEXIMAGEEXTPROC driver_glXReleaseTexImageEXT = NULL;

  static void REGAL_CALL loader_glXReleaseTexImageEXT(Layer *_layer, Display *display, GLXDrawable drawable, int buffer)
  {
    driver_glXReleaseTexImageEXT(display, drawable, buffer);
  }

// GLX_MESA_agp_offset

  static unsigned int REGAL_CALL missing_glXGetAGPOffsetMESA(const void *pointer)
  {
    UNUSED_PARAMETER(pointer);
    Warning( "glXGetAGPOffsetMESA", " not available." );
    return (unsigned int) 0;
  }

  PFNGLXGETAGPOFFSETMESAPROC driver_glXGetAGPOffsetMESA = NULL;

  static unsigned int REGAL_CALL loader_glXGetAGPOffsetMESA(Layer *_layer, const void *pointer)
  {
    return driver_glXGetAGPOffsetMESA(pointer);
  }

// GLX_MESA_copy_sub_buffer

  static void REGAL_CALL missing_glXCopySubBufferMESA(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "glXCopySubBufferMESA", " not available." );
  }

  PFNGLXCOPYSUBBUFFERMESAPROC driver_glXCopySubBufferMESA = NULL;

  static void REGAL_CALL loader_glXCopySubBufferMESA(Layer *_layer, Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)
  {
    driver_glXCopySubBufferMESA(dpy, drawable, x, y, width, height);
  }

// GLX_MESA_pixmap_colormap

  static GLXPixmap REGAL_CALL missing_glXCreateGLXPixmapMESA(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(visual);
    UNUSED_PARAMETER(pixmap);
    UNUSED_PARAMETER(cmap);
    Warning( "glXCreateGLXPixmapMESA", " not available." );
    return 0;
  }

  PFNGLXCREATEGLXPIXMAPMESAPROC driver_glXCreateGLXPixmapMESA = NULL;

  static GLXPixmap REGAL_CALL loader_glXCreateGLXPixmapMESA(Layer *_layer, Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)
  {
    return driver_glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap);
  }

// GLX_MESA_release_buffers

  static Bool REGAL_CALL missing_glXReleaseBuffersMESA(Display *dpy, GLXDrawable d)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(d);
    Warning( "glXReleaseBuffersMESA", " not available." );
    return (Bool) 0;
  }

  PFNGLXRELEASEBUFFERSMESAPROC driver_glXReleaseBuffersMESA = NULL;

  static Bool REGAL_CALL loader_glXReleaseBuffersMESA(Layer *_layer, Display *dpy, GLXDrawable d)
  {
    return driver_glXReleaseBuffersMESA(dpy, d);
  }

// GLX_MESA_set_3dfx_mode

  static GLboolean REGAL_CALL missing_glXSet3DfxModeMESA(GLint mode)
  {
    UNUSED_PARAMETER(mode);
    Warning( "glXSet3DfxModeMESA", " not available." );
    return GL_FALSE;
  }

  PFNGLXSET3DFXMODEMESAPROC driver_glXSet3DfxModeMESA = NULL;

  static GLboolean REGAL_CALL loader_glXSet3DfxModeMESA(Layer *_layer, GLint mode)
  {
    return driver_glXSet3DfxModeMESA(mode);
  }

// GLX_MESA_swap_control

  static int REGAL_CALL missing_glXGetSwapIntervalMESA(void)
  {
    Warning( "glXGetSwapIntervalMESA", " not available." );
    return 0;
  }

  PFNGLXGETSWAPINTERVALMESAPROC driver_glXGetSwapIntervalMESA = NULL;

  static int REGAL_CALL loader_glXGetSwapIntervalMESA(Layer *_layer)
  {
    return driver_glXGetSwapIntervalMESA();
  }

  static int REGAL_CALL missing_glXSwapIntervalMESA(unsigned int interval)
  {
    UNUSED_PARAMETER(interval);
    Warning( "glXSwapIntervalMESA", " not available." );
    return 0;
  }

  PFNGLXSWAPINTERVALMESAPROC driver_glXSwapIntervalMESA = NULL;

  static int REGAL_CALL loader_glXSwapIntervalMESA(Layer *_layer, unsigned int interval)
  {
    return driver_glXSwapIntervalMESA(interval);
  }

// GLX_NV_copy_image

  static void REGAL_CALL missing_glXCopyImageSubDataNV(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(srcCtx);
    UNUSED_PARAMETER(srcName);
    UNUSED_PARAMETER(srcTarget);
    UNUSED_PARAMETER(srcLevel);
    UNUSED_PARAMETER(srcX);
    UNUSED_PARAMETER(srcY);
    UNUSED_PARAMETER(srcZ);
    UNUSED_PARAMETER(dstCtx);
    UNUSED_PARAMETER(dstName);
    UNUSED_PARAMETER(dstTarget);
    UNUSED_PARAMETER(dstLevel);
    UNUSED_PARAMETER(dstX);
    UNUSED_PARAMETER(dstY);
    UNUSED_PARAMETER(dstZ);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(depth);
    Warning( "glXCopyImageSubDataNV", " not available." );
  }

  PFNGLXCOPYIMAGESUBDATANVPROC driver_glXCopyImageSubDataNV = NULL;

  static void REGAL_CALL loader_glXCopyImageSubDataNV(Layer *_layer, Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
  {
    driver_glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }

// GLX_NV_present_video

  static int REGAL_CALL missing_glXBindVideoDeviceNV(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(video_slot);
    UNUSED_PARAMETER(video_device);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXBindVideoDeviceNV", " not available." );
    return 0;
  }

  PFNGLXBINDVIDEODEVICENVPROC driver_glXBindVideoDeviceNV = NULL;

  static int REGAL_CALL loader_glXBindVideoDeviceNV(Layer *_layer, Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list)
  {
    return driver_glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list);
  }

  static unsigned int *REGAL_CALL missing_glXEnumerateVideoDevicesNV(Display *dpy, int screen, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(nelements);
    Warning( "glXEnumerateVideoDevicesNV", " not available." );
    return NULL;
  }

  PFNGLXENUMERATEVIDEODEVICESNVPROC driver_glXEnumerateVideoDevicesNV = NULL;

  static unsigned int *REGAL_CALL loader_glXEnumerateVideoDevicesNV(Layer *_layer, Display *dpy, int screen, int *nelements)
  {
    return driver_glXEnumerateVideoDevicesNV(dpy, screen, nelements);
  }

// GLX_NV_swap_group

  static Bool REGAL_CALL missing_glXBindSwapBarrierNV(Display *dpy, GLuint group, GLuint barrier)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(barrier);
    Warning( "glXBindSwapBarrierNV", " not available." );
    return (Bool) 0;
  }

  PFNGLXBINDSWAPBARRIERNVPROC driver_glXBindSwapBarrierNV = NULL;

  static Bool REGAL_CALL loader_glXBindSwapBarrierNV(Layer *_layer, Display *dpy, GLuint group, GLuint barrier)
  {
    return driver_glXBindSwapBarrierNV(dpy, group, barrier);
  }

  static Bool REGAL_CALL missing_glXJoinSwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint group)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(group);
    Warning( "glXJoinSwapGroupNV", " not available." );
    return (Bool) 0;
  }

  PFNGLXJOINSWAPGROUPNVPROC driver_glXJoinSwapGroupNV = NULL;

  static Bool REGAL_CALL loader_glXJoinSwapGroupNV(Layer *_layer, Display *dpy, GLXDrawable drawable, GLuint group)
  {
    return driver_glXJoinSwapGroupNV(dpy, drawable, group);
  }

  static Bool REGAL_CALL missing_glXQueryFrameCountNV(Display *dpy, int screen, GLuint *count)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(count);
    Warning( "glXQueryFrameCountNV", " not available." );
    return (Bool) 0;
  }

  PFNGLXQUERYFRAMECOUNTNVPROC driver_glXQueryFrameCountNV = NULL;

  static Bool REGAL_CALL loader_glXQueryFrameCountNV(Layer *_layer, Display *dpy, int screen, GLuint *count)
  {
    return driver_glXQueryFrameCountNV(dpy, screen, count);
  }

  static Bool REGAL_CALL missing_glXQueryMaxSwapGroupsNV(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(maxGroups);
    UNUSED_PARAMETER(maxBarriers);
    Warning( "glXQueryMaxSwapGroupsNV", " not available." );
    return (Bool) 0;
  }

  PFNGLXQUERYMAXSWAPGROUPSNVPROC driver_glXQueryMaxSwapGroupsNV = NULL;

  static Bool REGAL_CALL loader_glXQueryMaxSwapGroupsNV(Layer *_layer, Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)
  {
    return driver_glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers);
  }

  static Bool REGAL_CALL missing_glXQuerySwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(group);
    UNUSED_PARAMETER(barrier);
    Warning( "glXQuerySwapGroupNV", " not available." );
    return (Bool) 0;
  }

  PFNGLXQUERYSWAPGROUPNVPROC driver_glXQuerySwapGroupNV = NULL;

  static Bool REGAL_CALL loader_glXQuerySwapGroupNV(Layer *_layer, Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)
  {
    return driver_glXQuerySwapGroupNV(dpy, drawable, group, barrier);
  }

  static Bool REGAL_CALL missing_glXResetFrameCountNV(Display *dpy, int screen)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    Warning( "glXResetFrameCountNV", " not available." );
    return (Bool) 0;
  }

  PFNGLXRESETFRAMECOUNTNVPROC driver_glXResetFrameCountNV = NULL;

  static Bool REGAL_CALL loader_glXResetFrameCountNV(Layer *_layer, Display *dpy, int screen)
  {
    return driver_glXResetFrameCountNV(dpy, screen);
  }

// GLX_NV_vertex_array_range

  static void *REGAL_CALL missing_glXAllocateMemoryNV(GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)
  {
    UNUSED_PARAMETER(size);
    UNUSED_PARAMETER(readFrequency);
    UNUSED_PARAMETER(writeFrequency);
    UNUSED_PARAMETER(priority);
    Warning( "glXAllocateMemoryNV", " not available." );
    return NULL;
  }

  PFNGLXALLOCATEMEMORYNVPROC driver_glXAllocateMemoryNV = NULL;

  static void *REGAL_CALL loader_glXAllocateMemoryNV(Layer *_layer, GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)
  {
    return driver_glXAllocateMemoryNV(size, readFrequency, writeFrequency, priority);
  }

  static void REGAL_CALL missing_glXFreeMemoryNV(void *pointer)
  {
    UNUSED_PARAMETER(pointer);
    Warning( "glXFreeMemoryNV", " not available." );
  }

  PFNGLXFREEMEMORYNVPROC driver_glXFreeMemoryNV = NULL;

  static void REGAL_CALL loader_glXFreeMemoryNV(Layer *_layer, void *pointer)
  {
    driver_glXFreeMemoryNV(pointer);
  }

// GLX_NV_video_capture

  static int REGAL_CALL missing_glXBindVideoCaptureDeviceNV(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(video_capture_slot);
    UNUSED_PARAMETER(device);
    Warning( "glXBindVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  PFNGLXBINDVIDEOCAPTUREDEVICENVPROC driver_glXBindVideoCaptureDeviceNV = NULL;

  static int REGAL_CALL loader_glXBindVideoCaptureDeviceNV(Layer *_layer, Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)
  {
    return driver_glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device);
  }

  static GLXVideoCaptureDeviceNV *REGAL_CALL missing_glXEnumerateVideoCaptureDevicesNV(Display *dpy, int screen, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(nelements);
    Warning( "glXEnumerateVideoCaptureDevicesNV", " not available." );
    return NULL;
  }

  PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC driver_glXEnumerateVideoCaptureDevicesNV = NULL;

  static GLXVideoCaptureDeviceNV *REGAL_CALL loader_glXEnumerateVideoCaptureDevicesNV(Layer *_layer, Display *dpy, int screen, int *nelements)
  {
    return driver_glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements);
  }

  static void REGAL_CALL missing_glXLockVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(device);
    Warning( "glXLockVideoCaptureDeviceNV", " not available." );
  }

  PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC driver_glXLockVideoCaptureDeviceNV = NULL;

  static void REGAL_CALL loader_glXLockVideoCaptureDeviceNV(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device)
  {
    driver_glXLockVideoCaptureDeviceNV(dpy, device);
  }

  static int REGAL_CALL missing_glXQueryVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(device);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryVideoCaptureDeviceNV", " not available." );
    return 0;
  }

  PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC driver_glXQueryVideoCaptureDeviceNV = NULL;

  static int REGAL_CALL loader_glXQueryVideoCaptureDeviceNV(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value)
  {
    return driver_glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value);
  }

  static void REGAL_CALL missing_glXReleaseVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(device);
    Warning( "glXReleaseVideoCaptureDeviceNV", " not available." );
  }

  PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC driver_glXReleaseVideoCaptureDeviceNV = NULL;

  static void REGAL_CALL loader_glXReleaseVideoCaptureDeviceNV(Layer *_layer, Display *dpy, GLXVideoCaptureDeviceNV device)
  {
    driver_glXReleaseVideoCaptureDeviceNV(dpy, device);
  }

// GLX_NV_video_output

  static int REGAL_CALL missing_glXBindVideoImageNV(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(VideoDevice);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(iVideoBuffer);
    Warning( "glXBindVideoImageNV", " not available." );
    return 0;
  }

  PFNGLXBINDVIDEOIMAGENVPROC driver_glXBindVideoImageNV = NULL;

  static int REGAL_CALL loader_glXBindVideoImageNV(Layer *_layer, Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
  {
    return driver_glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer);
  }

  static int REGAL_CALL missing_glXGetVideoDeviceNV(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(numVideoDevices);
    UNUSED_PARAMETER(pVideoDevice);
    Warning( "glXGetVideoDeviceNV", " not available." );
    return 0;
  }

  PFNGLXGETVIDEODEVICENVPROC driver_glXGetVideoDeviceNV = NULL;

  static int REGAL_CALL loader_glXGetVideoDeviceNV(Layer *_layer, Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)
  {
    return driver_glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice);
  }

  static int REGAL_CALL missing_glXGetVideoInfoNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(VideoDevice);
    UNUSED_PARAMETER(pulCounterOutputPbuffer);
    UNUSED_PARAMETER(pulCounterOutputVideo);
    Warning( "glXGetVideoInfoNV", " not available." );
    return 0;
  }

  PFNGLXGETVIDEOINFONVPROC driver_glXGetVideoInfoNV = NULL;

  static int REGAL_CALL loader_glXGetVideoInfoNV(Layer *_layer, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
  {
    return driver_glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }

  static int REGAL_CALL missing_glXReleaseVideoDeviceNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(VideoDevice);
    Warning( "glXReleaseVideoDeviceNV", " not available." );
    return 0;
  }

  PFNGLXRELEASEVIDEODEVICENVPROC driver_glXReleaseVideoDeviceNV = NULL;

  static int REGAL_CALL loader_glXReleaseVideoDeviceNV(Layer *_layer, Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)
  {
    return driver_glXReleaseVideoDeviceNV(dpy, screen, VideoDevice);
  }

  static int REGAL_CALL missing_glXReleaseVideoImageNV(Display *dpy, GLXPbuffer pbuf)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    Warning( "glXReleaseVideoImageNV", " not available." );
    return 0;
  }

  PFNGLXRELEASEVIDEOIMAGENVPROC driver_glXReleaseVideoImageNV = NULL;

  static int REGAL_CALL loader_glXReleaseVideoImageNV(Layer *_layer, Display *dpy, GLXPbuffer pbuf)
  {
    return driver_glXReleaseVideoImageNV(dpy, pbuf);
  }

  static int REGAL_CALL missing_glXSendPbufferToVideoNV(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(iBufferType);
    UNUSED_PARAMETER(pulCounterPbuffer);
    UNUSED_PARAMETER(bBlock);
    Warning( "glXSendPbufferToVideoNV", " not available." );
    return 0;
  }

  PFNGLXSENDPBUFFERTOVIDEONVPROC driver_glXSendPbufferToVideoNV = NULL;

  static int REGAL_CALL loader_glXSendPbufferToVideoNV(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)
  {
    return driver_glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
  }

// GLX_OML_sync_control

  static Bool REGAL_CALL missing_glXGetMscRateOML(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(numerator);
    UNUSED_PARAMETER(denominator);
    Warning( "glXGetMscRateOML", " not available." );
    return (Bool) 0;
  }

  PFNGLXGETMSCRATEOMLPROC driver_glXGetMscRateOML = NULL;

  static Bool REGAL_CALL loader_glXGetMscRateOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)
  {
    return driver_glXGetMscRateOML(dpy, drawable, numerator, denominator);
  }

  static Bool REGAL_CALL missing_glXGetSyncValuesOML(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "glXGetSyncValuesOML", " not available." );
    return (Bool) 0;
  }

  PFNGLXGETSYNCVALUESOMLPROC driver_glXGetSyncValuesOML = NULL;

  static Bool REGAL_CALL loader_glXGetSyncValuesOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    return driver_glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc);
  }

  static int64_t REGAL_CALL missing_glXSwapBuffersMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    Warning( "glXSwapBuffersMscOML", " not available." );
    return (int64_t) 0;
  }

  PFNGLXSWAPBUFFERSMSCOMLPROC driver_glXSwapBuffersMscOML = NULL;

  static int64_t REGAL_CALL loader_glXSwapBuffersMscOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
  {
    return driver_glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder);
  }

  static Bool REGAL_CALL missing_glXWaitForMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(target_msc);
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "glXWaitForMscOML", " not available." );
    return (Bool) 0;
  }

  PFNGLXWAITFORMSCOMLPROC driver_glXWaitForMscOML = NULL;

  static Bool REGAL_CALL loader_glXWaitForMscOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    return driver_glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
  }

  static Bool REGAL_CALL missing_glXWaitForSbcOML(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(target_sbc);
    UNUSED_PARAMETER(ust);
    UNUSED_PARAMETER(msc);
    UNUSED_PARAMETER(sbc);
    Warning( "glXWaitForSbcOML", " not available." );
    return (Bool) 0;
  }

  PFNGLXWAITFORSBCOMLPROC driver_glXWaitForSbcOML = NULL;

  static Bool REGAL_CALL loader_glXWaitForSbcOML(Layer *_layer, Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)
  {
    return driver_glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc);
  }

// GLX_SGIX_fbconfig

  static GLXFBConfigSGIX *REGAL_CALL missing_glXChooseFBConfigSGIX(Display *dpy, int screen, const int *attrib_list, int *nelements)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(attrib_list);
    UNUSED_PARAMETER(nelements);
    Warning( "glXChooseFBConfigSGIX", " not available." );
    return NULL;
  }

  PFNGLXCHOOSEFBCONFIGSGIXPROC driver_glXChooseFBConfigSGIX = NULL;

  static GLXFBConfigSGIX *REGAL_CALL loader_glXChooseFBConfigSGIX(Layer *_layer, Display *dpy, int screen, const int *attrib_list, int *nelements)
  {
    return driver_glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements);
  }

  static GLXContext REGAL_CALL missing_glXCreateContextWithConfigSGIX(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(render_type);
    UNUSED_PARAMETER(share_list);
    UNUSED_PARAMETER(direct);
    Warning( "glXCreateContextWithConfigSGIX", " not available." );
    return 0;
  }

  PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC driver_glXCreateContextWithConfigSGIX = NULL;

  static GLXContext REGAL_CALL loader_glXCreateContextWithConfigSGIX(Layer *_layer, Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
  {
    return driver_glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct);
  }

  static GLXPixmap REGAL_CALL missing_glXCreateGLXPixmapWithConfigSGIX(Display *dpy, GLXFBConfig config, Pixmap pixmap)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(pixmap);
    Warning( "glXCreateGLXPixmapWithConfigSGIX", " not available." );
    return 0;
  }

  PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC driver_glXCreateGLXPixmapWithConfigSGIX = NULL;

  static GLXPixmap REGAL_CALL loader_glXCreateGLXPixmapWithConfigSGIX(Layer *_layer, Display *dpy, GLXFBConfig config, Pixmap pixmap)
  {
    return driver_glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap);
  }

  static int REGAL_CALL missing_glXGetFBConfigAttribSGIX(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXGetFBConfigAttribSGIX", " not available." );
    return 0;
  }

  PFNGLXGETFBCONFIGATTRIBSGIXPROC driver_glXGetFBConfigAttribSGIX = NULL;

  static int REGAL_CALL loader_glXGetFBConfigAttribSGIX(Layer *_layer, Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)
  {
    return driver_glXGetFBConfigAttribSGIX(dpy, config, attribute, value);
  }

  static GLXFBConfigSGIX REGAL_CALL missing_glXGetFBConfigFromVisualSGIX(Display *dpy, XVisualInfo *vis)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(vis);
    Warning( "glXGetFBConfigFromVisualSGIX", " not available." );
    return 0;
  }

  PFNGLXGETFBCONFIGFROMVISUALSGIXPROC driver_glXGetFBConfigFromVisualSGIX = NULL;

  static GLXFBConfigSGIX REGAL_CALL loader_glXGetFBConfigFromVisualSGIX(Layer *_layer, Display *dpy, XVisualInfo *vis)
  {
    return driver_glXGetFBConfigFromVisualSGIX(dpy, vis);
  }

  static XVisualInfo *REGAL_CALL missing_glXGetVisualFromFBConfigSGIX(Display *dpy, GLXFBConfig config)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    Warning( "glXGetVisualFromFBConfigSGIX", " not available." );
    return NULL;
  }

  PFNGLXGETVISUALFROMFBCONFIGSGIXPROC driver_glXGetVisualFromFBConfigSGIX = NULL;

  static XVisualInfo *REGAL_CALL loader_glXGetVisualFromFBConfigSGIX(Layer *_layer, Display *dpy, GLXFBConfig config)
  {
    return driver_glXGetVisualFromFBConfigSGIX(dpy, config);
  }

// GLX_SGIX_pbuffer

  static GLXPbuffer REGAL_CALL missing_glXCreateGLXPbufferSGIX(Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(attrib_list);
    Warning( "glXCreateGLXPbufferSGIX", " not available." );
    return 0;
  }

  PFNGLXCREATEGLXPBUFFERSGIXPROC driver_glXCreateGLXPbufferSGIX = NULL;

  static GLXPbuffer REGAL_CALL loader_glXCreateGLXPbufferSGIX(Layer *_layer, Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list)
  {
    return driver_glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list);
  }

  static void REGAL_CALL missing_glXDestroyGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    Warning( "glXDestroyGLXPbufferSGIX", " not available." );
  }

  PFNGLXDESTROYGLXPBUFFERSGIXPROC driver_glXDestroyGLXPbufferSGIX = NULL;

  static void REGAL_CALL loader_glXDestroyGLXPbufferSGIX(Layer *_layer, Display *dpy, GLXPbuffer pbuf)
  {
    driver_glXDestroyGLXPbufferSGIX(dpy, pbuf);
  }

  static void REGAL_CALL missing_glXGetSelectedEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long *mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(mask);
    Warning( "glXGetSelectedEventSGIX", " not available." );
  }

  PFNGLXGETSELECTEDEVENTSGIXPROC driver_glXGetSelectedEventSGIX = NULL;

  static void REGAL_CALL loader_glXGetSelectedEventSGIX(Layer *_layer, Display *dpy, GLXDrawable drawable, unsigned long *mask)
  {
    driver_glXGetSelectedEventSGIX(dpy, drawable, mask);
  }

  static void REGAL_CALL missing_glXQueryGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(pbuf);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "glXQueryGLXPbufferSGIX", " not available." );
  }

  PFNGLXQUERYGLXPBUFFERSGIXPROC driver_glXQueryGLXPbufferSGIX = NULL;

  static void REGAL_CALL loader_glXQueryGLXPbufferSGIX(Layer *_layer, Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value)
  {
    driver_glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value);
  }

  static void REGAL_CALL missing_glXSelectEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long mask)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(mask);
    Warning( "glXSelectEventSGIX", " not available." );
  }

  PFNGLXSELECTEVENTSGIXPROC driver_glXSelectEventSGIX = NULL;

  static void REGAL_CALL loader_glXSelectEventSGIX(Layer *_layer, Display *dpy, GLXDrawable drawable, unsigned long mask)
  {
    driver_glXSelectEventSGIX(dpy, drawable, mask);
  }

// GLX_SGIX_swap_barrier

  static void REGAL_CALL missing_glXBindSwapBarrierSGIX(Display *dpy, GLXDrawable drawable, int barrier)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(barrier);
    Warning( "glXBindSwapBarrierSGIX", " not available." );
  }

  PFNGLXBINDSWAPBARRIERSGIXPROC driver_glXBindSwapBarrierSGIX = NULL;

  static void REGAL_CALL loader_glXBindSwapBarrierSGIX(Layer *_layer, Display *dpy, GLXDrawable drawable, int barrier)
  {
    driver_glXBindSwapBarrierSGIX(dpy, drawable, barrier);
  }

  static Bool REGAL_CALL missing_glXQueryMaxSwapBarriersSGIX(Display *dpy, int screen, int *max)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(max);
    Warning( "glXQueryMaxSwapBarriersSGIX", " not available." );
    return (Bool) 0;
  }

  PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC driver_glXQueryMaxSwapBarriersSGIX = NULL;

  static Bool REGAL_CALL loader_glXQueryMaxSwapBarriersSGIX(Layer *_layer, Display *dpy, int screen, int *max)
  {
    return driver_glXQueryMaxSwapBarriersSGIX(dpy, screen, max);
  }

// GLX_SGIX_swap_group

  static void REGAL_CALL missing_glXJoinSwapGroupSGIX(Display *dpy, GLXDrawable drawable, GLXDrawable member)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(drawable);
    UNUSED_PARAMETER(member);
    Warning( "glXJoinSwapGroupSGIX", " not available." );
  }

  PFNGLXJOINSWAPGROUPSGIXPROC driver_glXJoinSwapGroupSGIX = NULL;

  static void REGAL_CALL loader_glXJoinSwapGroupSGIX(Layer *_layer, Display *dpy, GLXDrawable drawable, GLXDrawable member)
  {
    driver_glXJoinSwapGroupSGIX(dpy, drawable, member);
  }

// GLX_SGIX_video_resize

  static int REGAL_CALL missing_glXBindChannelToWindowSGIX(Display *display, int screen, int channel, Window window)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(window);
    Warning( "glXBindChannelToWindowSGIX", " not available." );
    return 0;
  }

  PFNGLXBINDCHANNELTOWINDOWSGIXPROC driver_glXBindChannelToWindowSGIX = NULL;

  static int REGAL_CALL loader_glXBindChannelToWindowSGIX(Layer *_layer, Display *display, int screen, int channel, Window window)
  {
    return driver_glXBindChannelToWindowSGIX(display, screen, channel, window);
  }

  static int REGAL_CALL missing_glXChannelRectSGIX(Display *display, int screen, int channel, int x, int y, int w, int h)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(w);
    UNUSED_PARAMETER(h);
    Warning( "glXChannelRectSGIX", " not available." );
    return 0;
  }

  PFNGLXCHANNELRECTSGIXPROC driver_glXChannelRectSGIX = NULL;

  static int REGAL_CALL loader_glXChannelRectSGIX(Layer *_layer, Display *display, int screen, int channel, int x, int y, int w, int h)
  {
    return driver_glXChannelRectSGIX(display, screen, channel, x, y, w, h);
  }

  static int REGAL_CALL missing_glXChannelRectSyncSGIX(Display *display, int screen, int channel, GLenum synctype)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(synctype);
    Warning( "glXChannelRectSyncSGIX", " not available." );
    return 0;
  }

  PFNGLXCHANNELRECTSYNCSGIXPROC driver_glXChannelRectSyncSGIX = NULL;

  static int REGAL_CALL loader_glXChannelRectSyncSGIX(Layer *_layer, Display *display, int screen, int channel, GLenum synctype)
  {
    return driver_glXChannelRectSyncSGIX(display, screen, channel, synctype);
  }

  static int REGAL_CALL missing_glXQueryChannelDeltasSGIX(Display *display, int screen, int channel, int *x, int *y, int *w, int *h)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(w);
    UNUSED_PARAMETER(h);
    Warning( "glXQueryChannelDeltasSGIX", " not available." );
    return 0;
  }

  PFNGLXQUERYCHANNELDELTASSGIXPROC driver_glXQueryChannelDeltasSGIX = NULL;

  static int REGAL_CALL loader_glXQueryChannelDeltasSGIX(Layer *_layer, Display *display, int screen, int channel, int *x, int *y, int *w, int *h)
  {
    return driver_glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h);
  }

  static int REGAL_CALL missing_glXQueryChannelRectSGIX(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(screen);
    UNUSED_PARAMETER(channel);
    UNUSED_PARAMETER(dx);
    UNUSED_PARAMETER(dy);
    UNUSED_PARAMETER(dw);
    UNUSED_PARAMETER(dh);
    Warning( "glXQueryChannelRectSGIX", " not available." );
    return 0;
  }

  PFNGLXQUERYCHANNELRECTSGIXPROC driver_glXQueryChannelRectSGIX = NULL;

  static int REGAL_CALL loader_glXQueryChannelRectSGIX(Layer *_layer, Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)
  {
    return driver_glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh);
  }

// GLX_SGI_cushion

  static void REGAL_CALL missing_glXCushionSGI(Display *dpy, Window window, float cushion)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(window);
    UNUSED_PARAMETER(cushion);
    Warning( "glXCushionSGI", " not available." );
  }

  PFNGLXCUSHIONSGIPROC driver_glXCushionSGI = NULL;

  static void REGAL_CALL loader_glXCushionSGI(Layer *_layer, Display *dpy, Window window, float cushion)
  {
    driver_glXCushionSGI(dpy, window, cushion);
  }

// GLX_SGI_make_current_read

  static GLXDrawable REGAL_CALL missing_glXGetCurrentReadDrawableSGI(void)
  {
    Warning( "glXGetCurrentReadDrawableSGI", " not available." );
    return 0;
  }

  PFNGLXGETCURRENTREADDRAWABLESGIPROC driver_glXGetCurrentReadDrawableSGI = NULL;

  static GLXDrawable REGAL_CALL loader_glXGetCurrentReadDrawableSGI(Layer *_layer)
  {
    return driver_glXGetCurrentReadDrawableSGI();
  }

  static Bool REGAL_CALL missing_glXMakeCurrentReadSGI(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(read);
    UNUSED_PARAMETER(ctx);
    Warning( "glXMakeCurrentReadSGI", " not available." );
    return (Bool) 0;
  }

  PFNGLXMAKECURRENTREADSGIPROC driver_glXMakeCurrentReadSGI = NULL;

  static Bool REGAL_CALL loader_glXMakeCurrentReadSGI(Layer *_layer, Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
  {
    return driver_glXMakeCurrentReadSGI(dpy, draw, read, ctx);
  }

// GLX_SGI_swap_control

  static int REGAL_CALL missing_glXSwapIntervalSGI(int interval)
  {
    UNUSED_PARAMETER(interval);
    Warning( "glXSwapIntervalSGI", " not available." );
    return 0;
  }

  PFNGLXSWAPINTERVALSGIPROC driver_glXSwapIntervalSGI = NULL;

  static int REGAL_CALL loader_glXSwapIntervalSGI(Layer *_layer, int interval)
  {
    return driver_glXSwapIntervalSGI(interval);
  }

// GLX_SGI_video_sync

  static int REGAL_CALL missing_glXGetVideoSyncSGI(unsigned int *count)
  {
    UNUSED_PARAMETER(count);
    Warning( "glXGetVideoSyncSGI", " not available." );
    return 0;
  }

  PFNGLXGETVIDEOSYNCSGIPROC driver_glXGetVideoSyncSGI = NULL;

  static int REGAL_CALL loader_glXGetVideoSyncSGI(Layer *_layer, unsigned int *count)
  {
    return driver_glXGetVideoSyncSGI(count);
  }

  static int REGAL_CALL missing_glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *count)
  {
    UNUSED_PARAMETER(divisor);
    UNUSED_PARAMETER(remainder);
    UNUSED_PARAMETER(count);
    Warning( "glXWaitVideoSyncSGI", " not available." );
    return 0;
  }

  PFNGLXWAITVIDEOSYNCSGIPROC driver_glXWaitVideoSyncSGI = NULL;

  static int REGAL_CALL loader_glXWaitVideoSyncSGI(Layer *_layer, int divisor, int remainder, unsigned int *count)
  {
    return driver_glXWaitVideoSyncSGI(divisor, remainder, count);
  }

// GLX_SUN_get_transparent_index

  static Status REGAL_CALL missing_glXGetTransparentIndexSUN(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(overlay);
    UNUSED_PARAMETER(underlay);
    UNUSED_PARAMETER(pTransparentIndex);
    Warning( "glXGetTransparentIndexSUN", " not available." );
    return (Status) 0;
  }

  PFNGLXGETTRANSPARENTINDEXSUNPROC driver_glXGetTransparentIndexSUN = NULL;

  static Status REGAL_CALL loader_glXGetTransparentIndexSUN(Layer *_layer, Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex)
  {
    return driver_glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex);
  }

// GLX_SUN_video_resize

  static int REGAL_CALL missing_glXGetVideoResizeSUN(Display *display, GLXDrawable window, float *factor)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(window);
    UNUSED_PARAMETER(factor);
    Warning( "glXGetVideoResizeSUN", " not available." );
    return 0;
  }

  PFNGLXGETVIDEORESIZESUNPROC driver_glXGetVideoResizeSUN = NULL;

  static int REGAL_CALL loader_glXGetVideoResizeSUN(Layer *_layer, Display *display, GLXDrawable window, float *factor)
  {
    return driver_glXGetVideoResizeSUN(display, window, factor);
  }

  static int REGAL_CALL missing_glXVideoResizeSUN(Display *display, GLXDrawable window, float factor)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(window);
    UNUSED_PARAMETER(factor);
    Warning( "glXVideoResizeSUN", " not available." );
    return 0;
  }

  PFNGLXVIDEORESIZESUNPROC driver_glXVideoResizeSUN = NULL;

  static int REGAL_CALL loader_glXVideoResizeSUN(Layer *_layer, Display *display, GLXDrawable window, float factor)
  {
    return driver_glXVideoResizeSUN(display, window, factor);
  }

#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX

// CGL_VERSION_1_0

  static CGLError REGAL_CALL missing_CGLChoosePixelFormat(const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix)
  {
    UNUSED_PARAMETER(attribs);
    UNUSED_PARAMETER(pix);
    UNUSED_PARAMETER(npix);
    Warning( "CGLChoosePixelFormat", " not available." );
    return (CGLError) 0;
  }

  PFNCGLCHOOSEPIXELFORMATPROC driver_CGLChoosePixelFormat = NULL;

  static CGLError REGAL_CALL loader_CGLChoosePixelFormat(Layer *_layer, const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix)
  {
    return driver_CGLChoosePixelFormat(attribs, pix, npix);
  }

  static CGLError REGAL_CALL missing_CGLClearDrawable(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLClearDrawable", " not available." );
    return (CGLError) 0;
  }

  PFNCGLCLEARDRAWABLEPROC driver_CGLClearDrawable = NULL;

  static CGLError REGAL_CALL loader_CGLClearDrawable(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLClearDrawable(ctx);
  }

  static CGLError REGAL_CALL missing_CGLCopyContext(CGLContextObj src, CGLContextObj dst, GLbitfield mask)
  {
    UNUSED_PARAMETER(src);
    UNUSED_PARAMETER(dst);
    UNUSED_PARAMETER(mask);
    Warning( "CGLCopyContext", " not available." );
    return (CGLError) 0;
  }

  PFNCGLCOPYCONTEXTPROC driver_CGLCopyContext = NULL;

  static CGLError REGAL_CALL loader_CGLCopyContext(Layer *_layer, CGLContextObj src, CGLContextObj dst, GLbitfield mask)
  {
    return driver_CGLCopyContext(src, dst, mask);
  }

  static CGLError REGAL_CALL missing_CGLCreateContext(CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx)
  {
    UNUSED_PARAMETER(pix);
    UNUSED_PARAMETER(share);
    UNUSED_PARAMETER(ctx);
    Warning( "CGLCreateContext", " not available." );
    return (CGLError) 0;
  }

  PFNCGLCREATECONTEXTPROC driver_CGLCreateContext = NULL;

  static CGLError REGAL_CALL loader_CGLCreateContext(Layer *_layer, CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx)
  {
    return driver_CGLCreateContext(pix, share, ctx);
  }

  static CGLError REGAL_CALL missing_CGLDescribePixelFormat(CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value)
  {
    UNUSED_PARAMETER(pix);
    UNUSED_PARAMETER(pix_num);
    UNUSED_PARAMETER(attrib);
    UNUSED_PARAMETER(value);
    Warning( "CGLDescribePixelFormat", " not available." );
    return (CGLError) 0;
  }

  PFNCGLDESCRIBEPIXELFORMATPROC driver_CGLDescribePixelFormat = NULL;

  static CGLError REGAL_CALL loader_CGLDescribePixelFormat(Layer *_layer, CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value)
  {
    return driver_CGLDescribePixelFormat(pix, pix_num, attrib, value);
  }

  static CGLError REGAL_CALL missing_CGLDescribeRenderer(CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value)
  {
    UNUSED_PARAMETER(rend);
    UNUSED_PARAMETER(rend_num);
    UNUSED_PARAMETER(prop);
    UNUSED_PARAMETER(value);
    Warning( "CGLDescribeRenderer", " not available." );
    return (CGLError) 0;
  }

  PFNCGLDESCRIBERENDERERPROC driver_CGLDescribeRenderer = NULL;

  static CGLError REGAL_CALL loader_CGLDescribeRenderer(Layer *_layer, CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value)
  {
    return driver_CGLDescribeRenderer(rend, rend_num, prop, value);
  }

  static CGLError REGAL_CALL missing_CGLDestroyContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLDestroyContext", " not available." );
    return (CGLError) 0;
  }

  PFNCGLDESTROYCONTEXTPROC driver_CGLDestroyContext = NULL;

  static CGLError REGAL_CALL loader_CGLDestroyContext(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLDestroyContext(ctx);
  }

  static CGLError REGAL_CALL missing_CGLDestroyPixelFormat(CGLPixelFormatObj pix)
  {
    UNUSED_PARAMETER(pix);
    Warning( "CGLDestroyPixelFormat", " not available." );
    return (CGLError) 0;
  }

  PFNCGLDESTROYPIXELFORMATPROC driver_CGLDestroyPixelFormat = NULL;

  static CGLError REGAL_CALL loader_CGLDestroyPixelFormat(Layer *_layer, CGLPixelFormatObj pix)
  {
    return driver_CGLDestroyPixelFormat(pix);
  }

  static CGLError REGAL_CALL missing_CGLDestroyRendererInfo(CGLRendererInfoObj rend)
  {
    UNUSED_PARAMETER(rend);
    Warning( "CGLDestroyRendererInfo", " not available." );
    return (CGLError) 0;
  }

  PFNCGLDESTROYRENDERERINFOPROC driver_CGLDestroyRendererInfo = NULL;

  static CGLError REGAL_CALL loader_CGLDestroyRendererInfo(Layer *_layer, CGLRendererInfoObj rend)
  {
    return driver_CGLDestroyRendererInfo(rend);
  }

  static CGLError REGAL_CALL missing_CGLDisable(CGLContextObj ctx, CGLContextEnable pname)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    Warning( "CGLDisable", " not available." );
    return (CGLError) 0;
  }

  PFNCGLDISABLEPROC driver_CGLDisable = NULL;

  static CGLError REGAL_CALL loader_CGLDisable(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname)
  {
    return driver_CGLDisable(ctx, pname);
  }

  static CGLError REGAL_CALL missing_CGLEnable(CGLContextObj ctx, CGLContextEnable pname)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    Warning( "CGLEnable", " not available." );
    return (CGLError) 0;
  }

  PFNCGLENABLEPROC driver_CGLEnable = NULL;

  static CGLError REGAL_CALL loader_CGLEnable(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname)
  {
    return driver_CGLEnable(ctx, pname);
  }

  static const char *REGAL_CALL missing_CGLErrorString(CGLError error)
  {
    UNUSED_PARAMETER(error);
    Warning( "CGLErrorString", " not available." );
    return NULL;
  }

  PFNCGLERRORSTRINGPROC driver_CGLErrorString = NULL;

  static const char *REGAL_CALL loader_CGLErrorString(Layer *_layer, CGLError error)
  {
    return driver_CGLErrorString(error);
  }

  static CGLError REGAL_CALL missing_CGLFlushDrawable(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLFlushDrawable", " not available." );
    return (CGLError) 0;
  }

  PFNCGLFLUSHDRAWABLEPROC driver_CGLFlushDrawable = NULL;

  static CGLError REGAL_CALL loader_CGLFlushDrawable(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLFlushDrawable(ctx);
  }

  static CGLError REGAL_CALL missing_CGLGetOffScreen(CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(rowbytes);
    UNUSED_PARAMETER(baseaddr);
    Warning( "CGLGetOffScreen", " not available." );
    return (CGLError) 0;
  }

  PFNCGLGETOFFSCREENPROC driver_CGLGetOffScreen = NULL;

  static CGLError REGAL_CALL loader_CGLGetOffScreen(Layer *_layer, CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr)
  {
    return driver_CGLGetOffScreen(ctx, width, height, rowbytes, baseaddr);
  }

  static CGLError REGAL_CALL missing_CGLGetOption(CGLGlobalOption pname, GLint *param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "CGLGetOption", " not available." );
    return (CGLError) 0;
  }

  PFNCGLGETOPTIONPROC driver_CGLGetOption = NULL;

  static CGLError REGAL_CALL loader_CGLGetOption(Layer *_layer, CGLGlobalOption pname, GLint *param)
  {
    return driver_CGLGetOption(pname, param);
  }

  static CGLError REGAL_CALL missing_CGLGetParameter(CGLContextObj ctx, CGLContextParameter pname, GLint *params)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "CGLGetParameter", " not available." );
    return (CGLError) 0;
  }

  PFNCGLGETPARAMETERPROC driver_CGLGetParameter = NULL;

  static CGLError REGAL_CALL loader_CGLGetParameter(Layer *_layer, CGLContextObj ctx, CGLContextParameter pname, GLint *params)
  {
    return driver_CGLGetParameter(ctx, pname, params);
  }

  static void REGAL_CALL missing_CGLGetVersion(GLint *majorvers, GLint *minorvers)
  {
    UNUSED_PARAMETER(majorvers);
    UNUSED_PARAMETER(minorvers);
    Warning( "CGLGetVersion", " not available." );
  }

  PFNCGLGETVERSIONPROC driver_CGLGetVersion = NULL;

  static void REGAL_CALL loader_CGLGetVersion(Layer *_layer, GLint *majorvers, GLint *minorvers)
  {
    driver_CGLGetVersion(majorvers, minorvers);
  }

  static CGLError REGAL_CALL missing_CGLGetVirtualScreen(CGLContextObj ctx, GLint *screen)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(screen);
    Warning( "CGLGetVirtualScreen", " not available." );
    return (CGLError) 0;
  }

  PFNCGLGETVIRTUALSCREENPROC driver_CGLGetVirtualScreen = NULL;

  static CGLError REGAL_CALL loader_CGLGetVirtualScreen(Layer *_layer, CGLContextObj ctx, GLint *screen)
  {
    return driver_CGLGetVirtualScreen(ctx, screen);
  }

  static CGLError REGAL_CALL missing_CGLIsEnabled(CGLContextObj ctx, CGLContextEnable pname, GLint *enable)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(enable);
    Warning( "CGLIsEnabled", " not available." );
    return (CGLError) 0;
  }

  PFNCGLISENABLEDPROC driver_CGLIsEnabled = NULL;

  static CGLError REGAL_CALL loader_CGLIsEnabled(Layer *_layer, CGLContextObj ctx, CGLContextEnable pname, GLint *enable)
  {
    return driver_CGLIsEnabled(ctx, pname, enable);
  }

  static CGLError REGAL_CALL missing_CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend)
  {
    UNUSED_PARAMETER(display_mask);
    UNUSED_PARAMETER(rend);
    UNUSED_PARAMETER(nrend);
    Warning( "CGLQueryRendererInfo", " not available." );
    return (CGLError) 0;
  }

  PFNCGLQUERYRENDERERINFOPROC driver_CGLQueryRendererInfo = NULL;

  static CGLError REGAL_CALL loader_CGLQueryRendererInfo(Layer *_layer, GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend)
  {
    return driver_CGLQueryRendererInfo(display_mask, rend, nrend);
  }

  static CGLError REGAL_CALL missing_CGLSetFullScreen(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLSetFullScreen", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETFULLSCREENPROC driver_CGLSetFullScreen = NULL;

  static CGLError REGAL_CALL loader_CGLSetFullScreen(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLSetFullScreen(ctx);
  }

  static CGLError REGAL_CALL missing_CGLSetOffScreen(CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(rowbytes);
    UNUSED_PARAMETER(baseaddr);
    Warning( "CGLSetOffScreen", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETOFFSCREENPROC driver_CGLSetOffScreen = NULL;

  static CGLError REGAL_CALL loader_CGLSetOffScreen(Layer *_layer, CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr)
  {
    return driver_CGLSetOffScreen(ctx, width, height, rowbytes, baseaddr);
  }

  static CGLError REGAL_CALL missing_CGLSetOption(CGLGlobalOption pname, GLint param)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(param);
    Warning( "CGLSetOption", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETOPTIONPROC driver_CGLSetOption = NULL;

  static CGLError REGAL_CALL loader_CGLSetOption(Layer *_layer, CGLGlobalOption pname, GLint param)
  {
    return driver_CGLSetOption(pname, param);
  }

  static CGLError REGAL_CALL missing_CGLSetParameter(CGLContextObj ctx, CGLContextParameter pname, const GLint *params)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "CGLSetParameter", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETPARAMETERPROC driver_CGLSetParameter = NULL;

  static CGLError REGAL_CALL loader_CGLSetParameter(Layer *_layer, CGLContextObj ctx, CGLContextParameter pname, const GLint *params)
  {
    return driver_CGLSetParameter(ctx, pname, params);
  }

  static CGLError REGAL_CALL missing_CGLSetVirtualScreen(CGLContextObj ctx, GLint screen)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(screen);
    Warning( "CGLSetVirtualScreen", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETVIRTUALSCREENPROC driver_CGLSetVirtualScreen = NULL;

  static CGLError REGAL_CALL loader_CGLSetVirtualScreen(Layer *_layer, CGLContextObj ctx, GLint screen)
  {
    return driver_CGLSetVirtualScreen(ctx, screen);
  }

// CGL_VERSION_1_1

  static CGLError REGAL_CALL missing_CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer)
  {
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(max_level);
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLCreatePBuffer", " not available." );
    return (CGLError) 0;
  }

  PFNCGLCREATEPBUFFERPROC driver_CGLCreatePBuffer = NULL;

  static CGLError REGAL_CALL loader_CGLCreatePBuffer(Layer *_layer, GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer)
  {
    return driver_CGLCreatePBuffer(width, height, target, internalFormat, max_level, pbuffer);
  }

  static CGLError REGAL_CALL missing_CGLDescribePBuffer(CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap)
  {
    UNUSED_PARAMETER(pbuffer);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internalFormat);
    UNUSED_PARAMETER(mipmap);
    Warning( "CGLDescribePBuffer", " not available." );
    return (CGLError) 0;
  }

  PFNCGLDESCRIBEPBUFFERPROC driver_CGLDescribePBuffer = NULL;

  static CGLError REGAL_CALL loader_CGLDescribePBuffer(Layer *_layer, CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap)
  {
    return driver_CGLDescribePBuffer(pbuffer, width, height, target, internalFormat, mipmap);
  }

  static CGLError REGAL_CALL missing_CGLDestroyPBuffer(CGLPBufferObj pbuffer)
  {
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLDestroyPBuffer", " not available." );
    return (CGLError) 0;
  }

  PFNCGLDESTROYPBUFFERPROC driver_CGLDestroyPBuffer = NULL;

  static CGLError REGAL_CALL loader_CGLDestroyPBuffer(Layer *_layer, CGLPBufferObj pbuffer)
  {
    return driver_CGLDestroyPBuffer(pbuffer);
  }

  static CGLError REGAL_CALL missing_CGLGetPBuffer(CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pbuffer);
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(screen);
    Warning( "CGLGetPBuffer", " not available." );
    return (CGLError) 0;
  }

  PFNCGLGETPBUFFERPROC driver_CGLGetPBuffer = NULL;

  static CGLError REGAL_CALL loader_CGLGetPBuffer(Layer *_layer, CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen)
  {
    return driver_CGLGetPBuffer(ctx, pbuffer, face, level, screen);
  }

  static CGLError REGAL_CALL missing_CGLSetPBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pbuffer);
    UNUSED_PARAMETER(face);
    UNUSED_PARAMETER(level);
    UNUSED_PARAMETER(screen);
    Warning( "CGLSetPBuffer", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETPBUFFERPROC driver_CGLSetPBuffer = NULL;

  static CGLError REGAL_CALL loader_CGLSetPBuffer(Layer *_layer, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen)
  {
    return driver_CGLSetPBuffer(ctx, pbuffer, face, level, screen);
  }

  static CGLError REGAL_CALL missing_CGLTexImagePBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(pbuffer);
    UNUSED_PARAMETER(source);
    Warning( "CGLTexImagePBuffer", " not available." );
    return (CGLError) 0;
  }

  PFNCGLTEXIMAGEPBUFFERPROC driver_CGLTexImagePBuffer = NULL;

  static CGLError REGAL_CALL loader_CGLTexImagePBuffer(Layer *_layer, CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source)
  {
    return driver_CGLTexImagePBuffer(ctx, pbuffer, source);
  }

// CGL_VERSION_1_2

  static GLuint REGAL_CALL missing_CGLGetContextRetainCount(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLGetContextRetainCount", " not available." );
    return 0;
  }

  PFNCGLGETCONTEXTRETAINCOUNTPROC driver_CGLGetContextRetainCount = NULL;

  static GLuint REGAL_CALL loader_CGLGetContextRetainCount(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLGetContextRetainCount(ctx);
  }

  static CGLError REGAL_CALL missing_CGLGetGlobalOption(CGLGlobalOption pname, GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "CGLGetGlobalOption", " not available." );
    return (CGLError) 0;
  }

  PFNCGLGETGLOBALOPTIONPROC driver_CGLGetGlobalOption = NULL;

  static CGLError REGAL_CALL loader_CGLGetGlobalOption(Layer *_layer, CGLGlobalOption pname, GLint *params)
  {
    return driver_CGLGetGlobalOption(pname, params);
  }

  static GLuint REGAL_CALL missing_CGLGetPBufferRetainCount(CGLPBufferObj pbuffer)
  {
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLGetPBufferRetainCount", " not available." );
    return 0;
  }

  PFNCGLGETPBUFFERRETAINCOUNTPROC driver_CGLGetPBufferRetainCount = NULL;

  static GLuint REGAL_CALL loader_CGLGetPBufferRetainCount(Layer *_layer, CGLPBufferObj pbuffer)
  {
    return driver_CGLGetPBufferRetainCount(pbuffer);
  }

  static CGLPixelFormatObj REGAL_CALL missing_CGLGetPixelFormat(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLGetPixelFormat", " not available." );
    return 0;
  }

  PFNCGLGETPIXELFORMATPROC driver_CGLGetPixelFormat = NULL;

  static CGLPixelFormatObj REGAL_CALL loader_CGLGetPixelFormat(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLGetPixelFormat(ctx);
  }

  static GLuint REGAL_CALL missing_CGLGetPixelFormatRetainCount(CGLPixelFormatObj pix)
  {
    UNUSED_PARAMETER(pix);
    Warning( "CGLGetPixelFormatRetainCount", " not available." );
    return 0;
  }

  PFNCGLGETPIXELFORMATRETAINCOUNTPROC driver_CGLGetPixelFormatRetainCount = NULL;

  static GLuint REGAL_CALL loader_CGLGetPixelFormatRetainCount(Layer *_layer, CGLPixelFormatObj pix)
  {
    return driver_CGLGetPixelFormatRetainCount(pix);
  }

  static CGLError REGAL_CALL missing_CGLLockContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLLockContext", " not available." );
    return (CGLError) 0;
  }

  PFNCGLLOCKCONTEXTPROC driver_CGLLockContext = NULL;

  static CGLError REGAL_CALL loader_CGLLockContext(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLLockContext(ctx);
  }

  static void REGAL_CALL missing_CGLReleaseContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLReleaseContext", " not available." );
  }

  PFNCGLRELEASECONTEXTPROC driver_CGLReleaseContext = NULL;

  static void REGAL_CALL loader_CGLReleaseContext(Layer *_layer, CGLContextObj ctx)
  {
    driver_CGLReleaseContext(ctx);
  }

  static void REGAL_CALL missing_CGLReleasePBuffer(CGLPBufferObj pbuffer)
  {
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLReleasePBuffer", " not available." );
  }

  PFNCGLRELEASEPBUFFERPROC driver_CGLReleasePBuffer = NULL;

  static void REGAL_CALL loader_CGLReleasePBuffer(Layer *_layer, CGLPBufferObj pbuffer)
  {
    driver_CGLReleasePBuffer(pbuffer);
  }

  static void REGAL_CALL missing_CGLReleasePixelFormat(CGLPixelFormatObj pix)
  {
    UNUSED_PARAMETER(pix);
    Warning( "CGLReleasePixelFormat", " not available." );
  }

  PFNCGLRELEASEPIXELFORMATPROC driver_CGLReleasePixelFormat = NULL;

  static void REGAL_CALL loader_CGLReleasePixelFormat(Layer *_layer, CGLPixelFormatObj pix)
  {
    driver_CGLReleasePixelFormat(pix);
  }

  static CGLContextObj REGAL_CALL missing_CGLRetainContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLRetainContext", " not available." );
    return 0;
  }

  PFNCGLRETAINCONTEXTPROC driver_CGLRetainContext = NULL;

  static CGLContextObj REGAL_CALL loader_CGLRetainContext(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLRetainContext(ctx);
  }

  static CGLPBufferObj REGAL_CALL missing_CGLRetainPBuffer(CGLPBufferObj pbuffer)
  {
    UNUSED_PARAMETER(pbuffer);
    Warning( "CGLRetainPBuffer", " not available." );
    return 0;
  }

  PFNCGLRETAINPBUFFERPROC driver_CGLRetainPBuffer = NULL;

  static CGLPBufferObj REGAL_CALL loader_CGLRetainPBuffer(Layer *_layer, CGLPBufferObj pbuffer)
  {
    return driver_CGLRetainPBuffer(pbuffer);
  }

  static CGLPixelFormatObj REGAL_CALL missing_CGLRetainPixelFormat(CGLPixelFormatObj pix)
  {
    UNUSED_PARAMETER(pix);
    Warning( "CGLRetainPixelFormat", " not available." );
    return 0;
  }

  PFNCGLRETAINPIXELFORMATPROC driver_CGLRetainPixelFormat = NULL;

  static CGLPixelFormatObj REGAL_CALL loader_CGLRetainPixelFormat(Layer *_layer, CGLPixelFormatObj pix)
  {
    return driver_CGLRetainPixelFormat(pix);
  }

  static CGLError REGAL_CALL missing_CGLSetGlobalOption(CGLGlobalOption pname, const GLint *params)
  {
    UNUSED_PARAMETER(pname);
    UNUSED_PARAMETER(params);
    Warning( "CGLSetGlobalOption", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETGLOBALOPTIONPROC driver_CGLSetGlobalOption = NULL;

  static CGLError REGAL_CALL loader_CGLSetGlobalOption(Layer *_layer, CGLGlobalOption pname, const GLint *params)
  {
    return driver_CGLSetGlobalOption(pname, params);
  }

  static CGLError REGAL_CALL missing_CGLUnlockContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLUnlockContext", " not available." );
    return (CGLError) 0;
  }

  PFNCGLUNLOCKCONTEXTPROC driver_CGLUnlockContext = NULL;

  static CGLError REGAL_CALL loader_CGLUnlockContext(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLUnlockContext(ctx);
  }

// CGL_VERSION_1_3

  static CGLContextObj REGAL_CALL missing_CGLGetCurrentContext(void)
  {
    Warning( "CGLGetCurrentContext", " not available." );
    return 0;
  }

  PFNCGLGETCURRENTCONTEXTPROC driver_CGLGetCurrentContext = NULL;

  static CGLContextObj REGAL_CALL loader_CGLGetCurrentContext(Layer *_layer)
  {
    return driver_CGLGetCurrentContext();
  }

  static CGLShareGroupObj REGAL_CALL missing_CGLGetShareGroup(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLGetShareGroup", " not available." );
    return 0;
  }

  PFNCGLGETSHAREGROUPPROC driver_CGLGetShareGroup = NULL;

  static CGLShareGroupObj REGAL_CALL loader_CGLGetShareGroup(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLGetShareGroup(ctx);
  }

  static CGLError REGAL_CALL missing_CGLGetSurface(CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(conn);
    UNUSED_PARAMETER(win);
    UNUSED_PARAMETER(srf);
    Warning( "CGLGetSurface", " not available." );
    return (CGLError) 0;
  }

  PFNCGLGETSURFACEPROC driver_CGLGetSurface = NULL;

  static CGLError REGAL_CALL loader_CGLGetSurface(Layer *_layer, CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf)
  {
    return driver_CGLGetSurface(ctx, conn, win, srf);
  }

  static CGLError REGAL_CALL missing_CGLSetCurrentContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLSetCurrentContext", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETCURRENTCONTEXTPROC driver_CGLSetCurrentContext = NULL;

  static CGLError REGAL_CALL loader_CGLSetCurrentContext(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLSetCurrentContext(ctx);
  }

  static CGLError REGAL_CALL missing_CGLSetSurface(CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(conn);
    UNUSED_PARAMETER(win);
    UNUSED_PARAMETER(srf);
    Warning( "CGLSetSurface", " not available." );
    return (CGLError) 0;
  }

  PFNCGLSETSURFACEPROC driver_CGLSetSurface = NULL;

  static CGLError REGAL_CALL loader_CGLSetSurface(Layer *_layer, CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf)
  {
    return driver_CGLSetSurface(ctx, conn, win, srf);
  }

  static CGLError REGAL_CALL missing_CGLTexImageIOSurface2D(CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane)
  {
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(internal_format);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    UNUSED_PARAMETER(format);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(ioSurface);
    UNUSED_PARAMETER(plane);
    Warning( "CGLTexImageIOSurface2D", " not available." );
    return (CGLError) 0;
  }

  PFNCGLTEXIMAGEIOSURFACE2DPROC driver_CGLTexImageIOSurface2D = NULL;

  static CGLError REGAL_CALL loader_CGLTexImageIOSurface2D(Layer *_layer, CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane)
  {
    return driver_CGLTexImageIOSurface2D(ctx, target, internal_format, width, height, format, type, ioSurface, plane);
  }

  static CGLError REGAL_CALL missing_CGLUpdateContext(CGLContextObj ctx)
  {
    UNUSED_PARAMETER(ctx);
    Warning( "CGLUpdateContext", " not available." );
    return (CGLError) 0;
  }

  PFNCGLUPDATECONTEXTPROC driver_CGLUpdateContext = NULL;

  static CGLError REGAL_CALL loader_CGLUpdateContext(Layer *_layer, CGLContextObj ctx)
  {
    return driver_CGLUpdateContext(ctx);
  }

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

// EGL_ANGLE_query_surface_pointer

  static EGLBoolean REGAL_CALL missing_eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglQuerySurfacePointerANGLE", " not available." );
    return 0;
  }

  PFNEGLQUERYSURFACEPOINTERANGLEPROC driver_eglQuerySurfacePointerANGLE = NULL;

  static EGLBoolean REGAL_CALL loader_eglQuerySurfacePointerANGLE(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value)
  {
    return driver_eglQuerySurfacePointerANGLE(dpy, surface, attribute, value);
  }

// EGL_KHR_fence_sync

  static EGLint REGAL_CALL missing_eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "eglClientWaitSyncKHR", " not available." );
    return 0;
  }

  PFNEGLCLIENTWAITSYNCKHRPROC driver_eglClientWaitSyncKHR = NULL;

  static EGLint REGAL_CALL loader_eglClientWaitSyncKHR(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout)
  {
    return driver_eglClientWaitSyncKHR(dpy, GLsync, flags, timeout);
  }

  static EGLSyncKHR REGAL_CALL missing_eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(type);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateSyncKHR", " not available." );
    return 0;
  }

  PFNEGLCREATESYNCKHRPROC driver_eglCreateSyncKHR = NULL;

  static EGLSyncKHR REGAL_CALL loader_eglCreateSyncKHR(Layer *_layer, EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)
  {
    return driver_eglCreateSyncKHR(dpy, type, attrib_list);
  }

  static EGLBoolean REGAL_CALL missing_eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(GLsync);
    Warning( "eglDestroySyncKHR", " not available." );
    return 0;
  }

  PFNEGLDESTROYSYNCKHRPROC driver_eglDestroySyncKHR = NULL;

  static EGLBoolean REGAL_CALL loader_eglDestroySyncKHR(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync)
  {
    return driver_eglDestroySyncKHR(dpy, GLsync);
  }

  static EGLBoolean REGAL_CALL missing_eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglGetSyncAttribKHR", " not available." );
    return 0;
  }

  PFNEGLGETSYNCATTRIBKHRPROC driver_eglGetSyncAttribKHR = NULL;

  static EGLBoolean REGAL_CALL loader_eglGetSyncAttribKHR(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value)
  {
    return driver_eglGetSyncAttribKHR(dpy, GLsync, attribute, value);
  }

// EGL_KHR_image_base

  static EGLImageKHR REGAL_CALL missing_eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(target);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateImageKHR", " not available." );
    return 0;
  }

  PFNEGLCREATEIMAGEKHRPROC driver_eglCreateImageKHR = NULL;

  static EGLImageKHR REGAL_CALL loader_eglCreateImageKHR(Layer *_layer, EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)
  {
    return driver_eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list);
  }

  static EGLBoolean REGAL_CALL missing_eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(image);
    Warning( "eglDestroyImageKHR", " not available." );
    return 0;
  }

  PFNEGLDESTROYIMAGEKHRPROC driver_eglDestroyImageKHR = NULL;

  static EGLBoolean REGAL_CALL loader_eglDestroyImageKHR(Layer *_layer, EGLDisplay dpy, EGLImageKHR image)
  {
    return driver_eglDestroyImageKHR(dpy, image);
  }

// EGL_KHR_lock_surface

  static EGLBoolean REGAL_CALL missing_eglLockSurfaceKHR(EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglLockSurfaceKHR", " not available." );
    return 0;
  }

  PFNEGLLOCKSURFACEKHRPROC driver_eglLockSurfaceKHR = NULL;

  static EGLBoolean REGAL_CALL loader_eglLockSurfaceKHR(Layer *_layer, EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)
  {
    return driver_eglLockSurfaceKHR(display, surface, attrib_list);
  }

  static EGLBoolean REGAL_CALL missing_eglUnlockSurfaceKHR(EGLDisplay display, EGLSurface surface)
  {
    UNUSED_PARAMETER(display);
    UNUSED_PARAMETER(surface);
    Warning( "eglUnlockSurfaceKHR", " not available." );
    return 0;
  }

  PFNEGLUNLOCKSURFACEKHRPROC driver_eglUnlockSurfaceKHR = NULL;

  static EGLBoolean REGAL_CALL loader_eglUnlockSurfaceKHR(Layer *_layer, EGLDisplay display, EGLSurface surface)
  {
    return driver_eglUnlockSurfaceKHR(display, surface);
  }

// EGL_KHR_stream_consumer_gltexture

  static EGLBoolean REGAL_CALL missing_eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(stream);
    Warning( "eglStreamConsumerAcquireKHR", " not available." );
    return 0;
  }

  PFNEGLSTREAMCONSUMERACQUIREKHRPROC driver_eglStreamConsumerAcquireKHR = NULL;

  static EGLBoolean REGAL_CALL loader_eglStreamConsumerAcquireKHR(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream)
  {
    return driver_eglStreamConsumerAcquireKHR(dpy, stream);
  }

  static EGLBoolean REGAL_CALL missing_eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(stream);
    Warning( "eglStreamConsumerGLTextureExternalKHR", " not available." );
    return 0;
  }

  PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC driver_eglStreamConsumerGLTextureExternalKHR = NULL;

  static EGLBoolean REGAL_CALL loader_eglStreamConsumerGLTextureExternalKHR(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream)
  {
    return driver_eglStreamConsumerGLTextureExternalKHR(dpy, stream);
  }

  static EGLBoolean REGAL_CALL missing_eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(stream);
    Warning( "eglStreamConsumerReleaseKHR", " not available." );
    return 0;
  }

  PFNEGLSTREAMCONSUMERRELEASEKHRPROC driver_eglStreamConsumerReleaseKHR = NULL;

  static EGLBoolean REGAL_CALL loader_eglStreamConsumerReleaseKHR(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream)
  {
    return driver_eglStreamConsumerReleaseKHR(dpy, stream);
  }

// EGL_KHR_stream_cross_process_fd

  static EGLStreamKHR REGAL_CALL missing_eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(file_descriptor);
    Warning( "eglCreateStreamFromFileDescriptorKHR", " not available." );
    return 0;
  }

  PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC driver_eglCreateStreamFromFileDescriptorKHR = NULL;

  static EGLStreamKHR REGAL_CALL loader_eglCreateStreamFromFileDescriptorKHR(Layer *_layer, EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)
  {
    return driver_eglCreateStreamFromFileDescriptorKHR(dpy, file_descriptor);
  }

  static EGLNativeFileDescriptorKHR REGAL_CALL missing_eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(stream);
    Warning( "eglGetStreamFileDescriptorKHR", " not available." );
    return 0;
  }

  PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC driver_eglGetStreamFileDescriptorKHR = NULL;

  static EGLNativeFileDescriptorKHR REGAL_CALL loader_eglGetStreamFileDescriptorKHR(Layer *_layer, EGLDisplay dpy, EGLStreamKHR stream)
  {
    return driver_eglGetStreamFileDescriptorKHR(dpy, stream);
  }

// EGL_KHR_stream_producer_eglsurface

  static EGLSurface REGAL_CALL missing_eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(stream);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateStreamProducerSurfaceKHR", " not available." );
    return 0;
  }

  PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC driver_eglCreateStreamProducerSurfaceKHR = NULL;

  static EGLSurface REGAL_CALL loader_eglCreateStreamProducerSurfaceKHR(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)
  {
    return driver_eglCreateStreamProducerSurfaceKHR(dpy, config, stream, attrib_list);
  }

// EGL_KHR_wait_sync

  static EGLint REGAL_CALL missing_eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(flags);
    Warning( "eglWaitSyncKHR", " not available." );
    return 0;
  }

  PFNEGLWAITSYNCKHRPROC driver_eglWaitSyncKHR = NULL;

  static EGLint REGAL_CALL loader_eglWaitSyncKHR(Layer *_layer, EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags)
  {
    return driver_eglWaitSyncKHR(dpy, GLsync, flags);
  }

// EGL_MESA_drm_image

  static EGLImageKHR REGAL_CALL missing_eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateDRMImageMESA", " not available." );
    return 0;
  }

  PFNEGLCREATEDRMIMAGEMESAPROC driver_eglCreateDRMImageMESA = NULL;

  static EGLImageKHR REGAL_CALL loader_eglCreateDRMImageMESA(Layer *_layer, EGLDisplay dpy, const EGLint *attrib_list)
  {
    return driver_eglCreateDRMImageMESA(dpy, attrib_list);
  }

  static EGLBoolean REGAL_CALL missing_eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(image);
    UNUSED_PARAMETER(name);
    UNUSED_PARAMETER(handle);
    UNUSED_PARAMETER(stride);
    Warning( "eglExportDRMImageMESA", " not available." );
    return 0;
  }

  PFNEGLEXPORTDRMIMAGEMESAPROC driver_eglExportDRMImageMESA = NULL;

  static EGLBoolean REGAL_CALL loader_eglExportDRMImageMESA(Layer *_layer, EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)
  {
    return driver_eglExportDRMImageMESA(dpy, image, name, handle, stride);
  }

// EGL_NV_coverage_sample

  static void REGAL_CALL missing_eglCoverageMaskNV(GLboolean mask)
  {
    UNUSED_PARAMETER(mask);
    Warning( "eglCoverageMaskNV", " not available." );
  }

  PFNEGLCOVERAGEMASKNVPROC driver_eglCoverageMaskNV = NULL;

  static void REGAL_CALL loader_eglCoverageMaskNV(Layer *_layer, GLboolean mask)
  {
    driver_eglCoverageMaskNV(mask);
  }

  static void REGAL_CALL missing_eglCoverageOperationNV(GLenum operation)
  {
    UNUSED_PARAMETER(operation);
    Warning( "eglCoverageOperationNV", " not available." );
  }

  PFNEGLCOVERAGEOPERATIONNVPROC driver_eglCoverageOperationNV = NULL;

  static void REGAL_CALL loader_eglCoverageOperationNV(Layer *_layer, GLenum operation)
  {
    driver_eglCoverageOperationNV(operation);
  }

// EGL_NV_post_sub_buffer

  static EGLBoolean REGAL_CALL missing_eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(x);
    UNUSED_PARAMETER(y);
    UNUSED_PARAMETER(width);
    UNUSED_PARAMETER(height);
    Warning( "eglPostSubBufferNV", " not available." );
    return 0;
  }

  PFNEGLPOSTSUBBUFFERNVPROC driver_eglPostSubBufferNV = NULL;

  static EGLBoolean REGAL_CALL loader_eglPostSubBufferNV(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
  {
    return driver_eglPostSubBufferNV(dpy, surface, x, y, width, height);
  }

// EGL_NV_sync

  static EGLint REGAL_CALL missing_eglClientWaitSyncNV(EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout)
  {
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(flags);
    UNUSED_PARAMETER(timeout);
    Warning( "eglClientWaitSyncNV", " not available." );
    return 0;
  }

  PFNEGLCLIENTWAITSYNCNVPROC driver_eglClientWaitSyncNV = NULL;

  static EGLint REGAL_CALL loader_eglClientWaitSyncNV(Layer *_layer, EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout)
  {
    return driver_eglClientWaitSyncNV(GLsync, flags, timeout);
  }

  static EGLSyncNV REGAL_CALL missing_eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(condition);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateFenceSyncNV", " not available." );
    return 0;
  }

  PFNEGLCREATEFENCESYNCNVPROC driver_eglCreateFenceSyncNV = NULL;

  static EGLSyncNV REGAL_CALL loader_eglCreateFenceSyncNV(Layer *_layer, EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)
  {
    return driver_eglCreateFenceSyncNV(dpy, condition, attrib_list);
  }

  static EGLBoolean REGAL_CALL missing_eglDestroySyncNV(EGLSyncNV GLsync)
  {
    UNUSED_PARAMETER(GLsync);
    Warning( "eglDestroySyncNV", " not available." );
    return 0;
  }

  PFNEGLDESTROYSYNCNVPROC driver_eglDestroySyncNV = NULL;

  static EGLBoolean REGAL_CALL loader_eglDestroySyncNV(Layer *_layer, EGLSyncNV GLsync)
  {
    return driver_eglDestroySyncNV(GLsync);
  }

  static EGLBoolean REGAL_CALL missing_eglFenceNV(EGLSyncNV GLsync)
  {
    UNUSED_PARAMETER(GLsync);
    Warning( "eglFenceNV", " not available." );
    return 0;
  }

  PFNEGLFENCENVPROC driver_eglFenceNV = NULL;

  static EGLBoolean REGAL_CALL loader_eglFenceNV(Layer *_layer, EGLSyncNV GLsync)
  {
    return driver_eglFenceNV(GLsync);
  }

  static EGLBoolean REGAL_CALL missing_eglGetSyncAttribNV(EGLSyncNV GLsync, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglGetSyncAttribNV", " not available." );
    return 0;
  }

  PFNEGLGETSYNCATTRIBNVPROC driver_eglGetSyncAttribNV = NULL;

  static EGLBoolean REGAL_CALL loader_eglGetSyncAttribNV(Layer *_layer, EGLSyncNV GLsync, EGLint attribute, EGLint *value)
  {
    return driver_eglGetSyncAttribNV(GLsync, attribute, value);
  }

  static EGLBoolean REGAL_CALL missing_eglSignalSyncNV(EGLSyncNV GLsync, EGLenum mode)
  {
    UNUSED_PARAMETER(GLsync);
    UNUSED_PARAMETER(mode);
    Warning( "eglSignalSyncNV", " not available." );
    return 0;
  }

  PFNEGLSIGNALSYNCNVPROC driver_eglSignalSyncNV = NULL;

  static EGLBoolean REGAL_CALL loader_eglSignalSyncNV(Layer *_layer, EGLSyncNV GLsync, EGLenum mode)
  {
    return driver_eglSignalSyncNV(GLsync, mode);
  }

// EGL_NV_system_time

  static EGLuint64NV REGAL_CALL missing_eglGetSystemTimeFrequencyNV(void)
  {
    Warning( "eglGetSystemTimeFrequencyNV", " not available." );
    return 0;
  }

  PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC driver_eglGetSystemTimeFrequencyNV = NULL;

  static EGLuint64NV REGAL_CALL loader_eglGetSystemTimeFrequencyNV(Layer *_layer)
  {
    return driver_eglGetSystemTimeFrequencyNV();
  }

  static EGLuint64NV REGAL_CALL missing_eglGetSystemTimeNV(void)
  {
    Warning( "eglGetSystemTimeNV", " not available." );
    return 0;
  }

  PFNEGLGETSYSTEMTIMENVPROC driver_eglGetSystemTimeNV = NULL;

  static EGLuint64NV REGAL_CALL loader_eglGetSystemTimeNV(Layer *_layer)
  {
    return driver_eglGetSystemTimeNV();
  }

// EGL_VERSION_1_0

  static EGLBoolean REGAL_CALL missing_eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(attrib_list);
    UNUSED_PARAMETER(configs);
    UNUSED_PARAMETER(config_size);
    UNUSED_PARAMETER(num_config);
    Warning( "eglChooseConfig", " not available." );
    return 0;
  }

  PFNEGLCHOOSECONFIGPROC driver_eglChooseConfig = NULL;

  static EGLBoolean REGAL_CALL loader_eglChooseConfig(Layer *_layer, EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
  {
    return driver_eglChooseConfig(dpy, attrib_list, configs, config_size, num_config);
  }

  static EGLBoolean REGAL_CALL missing_eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(target);
    Warning( "eglCopyBuffers", " not available." );
    return 0;
  }

  PFNEGLCOPYBUFFERSPROC driver_eglCopyBuffers = NULL;

  static EGLBoolean REGAL_CALL loader_eglCopyBuffers(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
  {
    return driver_eglCopyBuffers(dpy, surface, target);
  }

  static EGLContext REGAL_CALL missing_eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(share_context);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateContext", " not available." );
    return 0;
  }

  PFNEGLCREATECONTEXTPROC driver_eglCreateContext = NULL;

  static EGLContext REGAL_CALL loader_eglCreateContext(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
  {
    return driver_eglCreateContext(dpy, config, share_context, attrib_list);
  }

  static EGLSurface REGAL_CALL missing_eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreatePbufferSurface", " not available." );
    return 0;
  }

  PFNEGLCREATEPBUFFERSURFACEPROC driver_eglCreatePbufferSurface = NULL;

  static EGLSurface REGAL_CALL loader_eglCreatePbufferSurface(Layer *_layer, EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
  {
    return driver_eglCreatePbufferSurface(dpy, config, attrib_list);
  }

  static EGLSurface REGAL_CALL missing_eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(pixmap);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreatePixmapSurface", " not available." );
    return 0;
  }

  PFNEGLCREATEPIXMAPSURFACEPROC driver_eglCreatePixmapSurface = NULL;

  static EGLSurface REGAL_CALL loader_eglCreatePixmapSurface(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
  {
    return driver_eglCreatePixmapSurface(dpy, config, pixmap, attrib_list);
  }

  static EGLSurface REGAL_CALL missing_eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(win);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreateWindowSurface", " not available." );
    return 0;
  }

  PFNEGLCREATEWINDOWSURFACEPROC driver_eglCreateWindowSurface = NULL;

  static EGLSurface REGAL_CALL loader_eglCreateWindowSurface(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
  {
    return driver_eglCreateWindowSurface(dpy, config, win, attrib_list);
  }

  static EGLBoolean REGAL_CALL missing_eglDestroyContext(EGLDisplay dpy, EGLContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    Warning( "eglDestroyContext", " not available." );
    return 0;
  }

  PFNEGLDESTROYCONTEXTPROC driver_eglDestroyContext = NULL;

  static EGLBoolean REGAL_CALL loader_eglDestroyContext(Layer *_layer, EGLDisplay dpy, EGLContext ctx)
  {
    return driver_eglDestroyContext(dpy, ctx);
  }

  static EGLBoolean REGAL_CALL missing_eglDestroySurface(EGLDisplay dpy, EGLSurface surface)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    Warning( "eglDestroySurface", " not available." );
    return 0;
  }

  PFNEGLDESTROYSURFACEPROC driver_eglDestroySurface = NULL;

  static EGLBoolean REGAL_CALL loader_eglDestroySurface(Layer *_layer, EGLDisplay dpy, EGLSurface surface)
  {
    return driver_eglDestroySurface(dpy, surface);
  }

  static EGLBoolean REGAL_CALL missing_eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglGetConfigAttrib", " not available." );
    return 0;
  }

  PFNEGLGETCONFIGATTRIBPROC driver_eglGetConfigAttrib = NULL;

  static EGLBoolean REGAL_CALL loader_eglGetConfigAttrib(Layer *_layer, EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
  {
    return driver_eglGetConfigAttrib(dpy, config, attribute, value);
  }

  static EGLBoolean REGAL_CALL missing_eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(configs);
    UNUSED_PARAMETER(config_size);
    UNUSED_PARAMETER(num_config);
    Warning( "eglGetConfigs", " not available." );
    return 0;
  }

  PFNEGLGETCONFIGSPROC driver_eglGetConfigs = NULL;

  static EGLBoolean REGAL_CALL loader_eglGetConfigs(Layer *_layer, EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
  {
    return driver_eglGetConfigs(dpy, configs, config_size, num_config);
  }

  static EGLContext REGAL_CALL missing_eglGetCurrentContext(void)
  {
    Warning( "eglGetCurrentContext", " not available." );
    return 0;
  }

  PFNEGLGETCURRENTCONTEXTPROC driver_eglGetCurrentContext = NULL;

  static EGLContext REGAL_CALL loader_eglGetCurrentContext(Layer *_layer)
  {
    return driver_eglGetCurrentContext();
  }

  static EGLDisplay REGAL_CALL missing_eglGetCurrentDisplay(void)
  {
    Warning( "eglGetCurrentDisplay", " not available." );
    return 0;
  }

  PFNEGLGETCURRENTDISPLAYPROC driver_eglGetCurrentDisplay = NULL;

  static EGLDisplay REGAL_CALL loader_eglGetCurrentDisplay(Layer *_layer)
  {
    return driver_eglGetCurrentDisplay();
  }

  static EGLSurface REGAL_CALL missing_eglGetCurrentSurface(EGLint readdraw)
  {
    UNUSED_PARAMETER(readdraw);
    Warning( "eglGetCurrentSurface", " not available." );
    return 0;
  }

  PFNEGLGETCURRENTSURFACEPROC driver_eglGetCurrentSurface = NULL;

  static EGLSurface REGAL_CALL loader_eglGetCurrentSurface(Layer *_layer, EGLint readdraw)
  {
    return driver_eglGetCurrentSurface(readdraw);
  }

  static EGLDisplay REGAL_CALL missing_eglGetDisplay(EGLNativeDisplayType display_id)
  {
    UNUSED_PARAMETER(display_id);
    Warning( "eglGetDisplay", " not available." );
    return 0;
  }

  PFNEGLGETDISPLAYPROC driver_eglGetDisplay = NULL;

  static EGLDisplay REGAL_CALL loader_eglGetDisplay(Layer *_layer, EGLNativeDisplayType display_id)
  {
    return driver_eglGetDisplay(display_id);
  }

  static EGLint REGAL_CALL missing_eglGetError(void)
  {
    Warning( "eglGetError", " not available." );
    return 0;
  }

  PFNEGLGETERRORPROC driver_eglGetError = NULL;

  static EGLint REGAL_CALL loader_eglGetError(Layer *_layer)
  {
    return driver_eglGetError();
  }

  static __eglMustCastToProperFunctionPointerType REGAL_CALL missing_eglGetProcAddress(const char *procname)
  {
    UNUSED_PARAMETER(procname);
    Warning( "eglGetProcAddress", " not available." );
    return 0;
  }

  PFNEGLGETPROCADDRESSPROC driver_eglGetProcAddress = NULL;

  static __eglMustCastToProperFunctionPointerType REGAL_CALL loader_eglGetProcAddress(Layer *_layer, const char *procname)
  {
    return driver_eglGetProcAddress(procname);
  }

  static EGLBoolean REGAL_CALL missing_eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(major);
    UNUSED_PARAMETER(minor);
    Warning( "eglInitialize", " not available." );
    return 0;
  }

  PFNEGLINITIALIZEPROC driver_eglInitialize = NULL;

  static EGLBoolean REGAL_CALL loader_eglInitialize(Layer *_layer, EGLDisplay dpy, EGLint *major, EGLint *minor)
  {
    return driver_eglInitialize(dpy, major, minor);
  }

  static EGLBoolean REGAL_CALL missing_eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(draw);
    UNUSED_PARAMETER(read);
    UNUSED_PARAMETER(ctx);
    Warning( "eglMakeCurrent", " not available." );
    return 0;
  }

  PFNEGLMAKECURRENTPROC driver_eglMakeCurrent = NULL;

  static EGLBoolean REGAL_CALL loader_eglMakeCurrent(Layer *_layer, EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
  {
    return driver_eglMakeCurrent(dpy, draw, read, ctx);
  }

  static EGLBoolean REGAL_CALL missing_eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(ctx);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglQueryContext", " not available." );
    return 0;
  }

  PFNEGLQUERYCONTEXTPROC driver_eglQueryContext = NULL;

  static EGLBoolean REGAL_CALL loader_eglQueryContext(Layer *_layer, EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
  {
    return driver_eglQueryContext(dpy, ctx, attribute, value);
  }

  static const char *REGAL_CALL missing_eglQueryString(EGLDisplay dpy, EGLint name)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(name);
    Warning( "eglQueryString", " not available." );
    return NULL;
  }

  PFNEGLQUERYSTRINGPROC driver_eglQueryString = NULL;

  static const char *REGAL_CALL loader_eglQueryString(Layer *_layer, EGLDisplay dpy, EGLint name)
  {
    return driver_eglQueryString(dpy, name);
  }

  static EGLBoolean REGAL_CALL missing_eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglQuerySurface", " not available." );
    return 0;
  }

  PFNEGLQUERYSURFACEPROC driver_eglQuerySurface = NULL;

  static EGLBoolean REGAL_CALL loader_eglQuerySurface(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
  {
    return driver_eglQuerySurface(dpy, surface, attribute, value);
  }

  static EGLBoolean REGAL_CALL missing_eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    Warning( "eglSwapBuffers", " not available." );
    return 0;
  }

  PFNEGLSWAPBUFFERSPROC driver_eglSwapBuffers = NULL;

  static EGLBoolean REGAL_CALL loader_eglSwapBuffers(Layer *_layer, EGLDisplay dpy, EGLSurface surface)
  {
    return driver_eglSwapBuffers(dpy, surface);
  }

  static EGLBoolean REGAL_CALL missing_eglTerminate(EGLDisplay dpy)
  {
    UNUSED_PARAMETER(dpy);
    Warning( "eglTerminate", " not available." );
    return 0;
  }

  PFNEGLTERMINATEPROC driver_eglTerminate = NULL;

  static EGLBoolean REGAL_CALL loader_eglTerminate(Layer *_layer, EGLDisplay dpy)
  {
    return driver_eglTerminate(dpy);
  }

  static EGLBoolean REGAL_CALL missing_eglWaitGL(void)
  {
    Warning( "eglWaitGL", " not available." );
    return 0;
  }

  PFNEGLWAITGLPROC driver_eglWaitGL = NULL;

  static EGLBoolean REGAL_CALL loader_eglWaitGL(Layer *_layer)
  {
    return driver_eglWaitGL();
  }

  static EGLBoolean REGAL_CALL missing_eglWaitNative(EGLint engine)
  {
    UNUSED_PARAMETER(engine);
    Warning( "eglWaitNative", " not available." );
    return 0;
  }

  PFNEGLWAITNATIVEPROC driver_eglWaitNative = NULL;

  static EGLBoolean REGAL_CALL loader_eglWaitNative(Layer *_layer, EGLint engine)
  {
    return driver_eglWaitNative(engine);
  }

// EGL_VERSION_1_1

  static EGLBoolean REGAL_CALL missing_eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(buffer);
    Warning( "eglBindTexImage", " not available." );
    return 0;
  }

  PFNEGLBINDTEXIMAGEPROC driver_eglBindTexImage = NULL;

  static EGLBoolean REGAL_CALL loader_eglBindTexImage(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint buffer)
  {
    return driver_eglBindTexImage(dpy, surface, buffer);
  }

  static EGLBoolean REGAL_CALL missing_eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(buffer);
    Warning( "eglReleaseTexImage", " not available." );
    return 0;
  }

  PFNEGLRELEASETEXIMAGEPROC driver_eglReleaseTexImage = NULL;

  static EGLBoolean REGAL_CALL loader_eglReleaseTexImage(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint buffer)
  {
    return driver_eglReleaseTexImage(dpy, surface, buffer);
  }

// EGL_VERSION_1_2

  static EGLBoolean REGAL_CALL missing_eglBindAPI(EGLenum api)
  {
    UNUSED_PARAMETER(api);
    Warning( "eglBindAPI", " not available." );
    return 0;
  }

  PFNEGLBINDAPIPROC driver_eglBindAPI = NULL;

  static EGLBoolean REGAL_CALL loader_eglBindAPI(Layer *_layer, EGLenum api)
  {
    return driver_eglBindAPI(api);
  }

  static EGLSurface REGAL_CALL missing_eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(buftype);
    UNUSED_PARAMETER(buffer);
    UNUSED_PARAMETER(config);
    UNUSED_PARAMETER(attrib_list);
    Warning( "eglCreatePbufferFromClientBuffer", " not available." );
    return 0;
  }

  PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC driver_eglCreatePbufferFromClientBuffer = NULL;

  static EGLSurface REGAL_CALL loader_eglCreatePbufferFromClientBuffer(Layer *_layer, EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
  {
    return driver_eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list);
  }

  static EGLenum REGAL_CALL missing_eglQueryAPI(void)
  {
    Warning( "eglQueryAPI", " not available." );
    return 0;
  }

  PFNEGLQUERYAPIPROC driver_eglQueryAPI = NULL;

  static EGLenum REGAL_CALL loader_eglQueryAPI(Layer *_layer)
  {
    return driver_eglQueryAPI();
  }

  static EGLBoolean REGAL_CALL missing_eglReleaseThread(void)
  {
    Warning( "eglReleaseThread", " not available." );
    return 0;
  }

  PFNEGLRELEASETHREADPROC driver_eglReleaseThread = NULL;

  static EGLBoolean REGAL_CALL loader_eglReleaseThread(Layer *_layer)
  {
    return driver_eglReleaseThread();
  }

  static EGLBoolean REGAL_CALL missing_eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(surface);
    UNUSED_PARAMETER(attribute);
    UNUSED_PARAMETER(value);
    Warning( "eglSurfaceAttrib", " not available." );
    return 0;
  }

  PFNEGLSURFACEATTRIBPROC driver_eglSurfaceAttrib = NULL;

  static EGLBoolean REGAL_CALL loader_eglSurfaceAttrib(Layer *_layer, EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
  {
    return driver_eglSurfaceAttrib(dpy, surface, attribute, value);
  }

  static EGLBoolean REGAL_CALL missing_eglSwapInterval(EGLDisplay dpy, EGLint interval)
  {
    UNUSED_PARAMETER(dpy);
    UNUSED_PARAMETER(interval);
    Warning( "eglSwapInterval", " not available." );
    return 0;
  }

  PFNEGLSWAPINTERVALPROC driver_eglSwapInterval = NULL;

  static EGLBoolean REGAL_CALL loader_eglSwapInterval(Layer *_layer, EGLDisplay dpy, EGLint interval)
  {
    return driver_eglSwapInterval(dpy, interval);
  }

  static EGLBoolean REGAL_CALL missing_eglWaitClient(void)
  {
    Warning( "eglWaitClient", " not available." );
    return 0;
  }

  PFNEGLWAITCLIENTPROC driver_eglWaitClient = NULL;

  static EGLBoolean REGAL_CALL loader_eglWaitClient(Layer *_layer)
  {
    return driver_eglWaitClient();
  }

#endif // REGAL_SYS_EGL

  template <typename T>
  void _getProcAddress( T & func, T funcRegal, const char *name)
  {
    GetProcAddress(func, name);
    RegalAssert(func!=funcRegal);
    if (func==funcRegal)
      func = NULL;
  }

  void InitDispatchLoader( Layer *layer, Dispatch::GL & dt )
  {

    // GL_VERSION_1_0

    _getProcAddress( driver_glAccum, glAccum, "glAccum" );
    if( driver_glAccum == NULL ) {
      driver_glAccum = missing_glAccum;
    }
    dt.glAccum = MakeRegalProc(loader_glAccum,layer);
    _getProcAddress( driver_glAlphaFunc, glAlphaFunc, "glAlphaFunc" );
    if( driver_glAlphaFunc == NULL ) {
      driver_glAlphaFunc = missing_glAlphaFunc;
    }
    dt.glAlphaFunc = MakeRegalProc(loader_glAlphaFunc,layer);
    _getProcAddress( driver_glBegin, glBegin, "glBegin" );
    if( driver_glBegin == NULL ) {
      driver_glBegin = missing_glBegin;
    }
    dt.glBegin = MakeRegalProc(loader_glBegin,layer);
    _getProcAddress( driver_glBitmap, glBitmap, "glBitmap" );
    if( driver_glBitmap == NULL ) {
      driver_glBitmap = missing_glBitmap;
    }
    dt.glBitmap = MakeRegalProc(loader_glBitmap,layer);
    _getProcAddress( driver_glBlendFunc, glBlendFunc, "glBlendFunc" );
    if( driver_glBlendFunc == NULL ) {
      driver_glBlendFunc = missing_glBlendFunc;
    }
    dt.glBlendFunc = MakeRegalProc(loader_glBlendFunc,layer);
    _getProcAddress( driver_glCallList, glCallList, "glCallList" );
    if( driver_glCallList == NULL ) {
      driver_glCallList = missing_glCallList;
    }
    dt.glCallList = MakeRegalProc(loader_glCallList,layer);
    _getProcAddress( driver_glCallLists, glCallLists, "glCallLists" );
    if( driver_glCallLists == NULL ) {
      driver_glCallLists = missing_glCallLists;
    }
    dt.glCallLists = MakeRegalProc(loader_glCallLists,layer);
    _getProcAddress( driver_glClear, glClear, "glClear" );
    if( driver_glClear == NULL ) {
      driver_glClear = missing_glClear;
    }
    dt.glClear = MakeRegalProc(loader_glClear,layer);
    _getProcAddress( driver_glClearAccum, glClearAccum, "glClearAccum" );
    if( driver_glClearAccum == NULL ) {
      driver_glClearAccum = missing_glClearAccum;
    }
    dt.glClearAccum = MakeRegalProc(loader_glClearAccum,layer);
    _getProcAddress( driver_glClearColor, glClearColor, "glClearColor" );
    if( driver_glClearColor == NULL ) {
      driver_glClearColor = missing_glClearColor;
    }
    dt.glClearColor = MakeRegalProc(loader_glClearColor,layer);
    _getProcAddress( driver_glClearDepth, glClearDepth, "glClearDepth" );
    if( driver_glClearDepth == NULL ) {
      driver_glClearDepth = missing_glClearDepth;
    }
    dt.glClearDepth = MakeRegalProc(loader_glClearDepth,layer);
    _getProcAddress( driver_glClearIndex, glClearIndex, "glClearIndex" );
    if( driver_glClearIndex == NULL ) {
      driver_glClearIndex = missing_glClearIndex;
    }
    dt.glClearIndex = MakeRegalProc(loader_glClearIndex,layer);
    _getProcAddress( driver_glClearStencil, glClearStencil, "glClearStencil" );
    if( driver_glClearStencil == NULL ) {
      driver_glClearStencil = missing_glClearStencil;
    }
    dt.glClearStencil = MakeRegalProc(loader_glClearStencil,layer);
    _getProcAddress( driver_glClipPlane, glClipPlane, "glClipPlane" );
    if( driver_glClipPlane == NULL ) {
      driver_glClipPlane = missing_glClipPlane;
    }
    dt.glClipPlane = MakeRegalProc(loader_glClipPlane,layer);
    _getProcAddress( driver_glColor3b, glColor3b, "glColor3b" );
    if( driver_glColor3b == NULL ) {
      driver_glColor3b = missing_glColor3b;
    }
    dt.glColor3b = MakeRegalProc(loader_glColor3b,layer);
    _getProcAddress( driver_glColor3bv, glColor3bv, "glColor3bv" );
    if( driver_glColor3bv == NULL ) {
      driver_glColor3bv = missing_glColor3bv;
    }
    dt.glColor3bv = MakeRegalProc(loader_glColor3bv,layer);
    _getProcAddress( driver_glColor3d, glColor3d, "glColor3d" );
    if( driver_glColor3d == NULL ) {
      driver_glColor3d = missing_glColor3d;
    }
    dt.glColor3d = MakeRegalProc(loader_glColor3d,layer);
    _getProcAddress( driver_glColor3dv, glColor3dv, "glColor3dv" );
    if( driver_glColor3dv == NULL ) {
      driver_glColor3dv = missing_glColor3dv;
    }
    dt.glColor3dv = MakeRegalProc(loader_glColor3dv,layer);
    _getProcAddress( driver_glColor3f, glColor3f, "glColor3f" );
    if( driver_glColor3f == NULL ) {
      driver_glColor3f = missing_glColor3f;
    }
    dt.glColor3f = MakeRegalProc(loader_glColor3f,layer);
    _getProcAddress( driver_glColor3fv, glColor3fv, "glColor3fv" );
    if( driver_glColor3fv == NULL ) {
      driver_glColor3fv = missing_glColor3fv;
    }
    dt.glColor3fv = MakeRegalProc(loader_glColor3fv,layer);
    _getProcAddress( driver_glColor3i, glColor3i, "glColor3i" );
    if( driver_glColor3i == NULL ) {
      driver_glColor3i = missing_glColor3i;
    }
    dt.glColor3i = MakeRegalProc(loader_glColor3i,layer);
    _getProcAddress( driver_glColor3iv, glColor3iv, "glColor3iv" );
    if( driver_glColor3iv == NULL ) {
      driver_glColor3iv = missing_glColor3iv;
    }
    dt.glColor3iv = MakeRegalProc(loader_glColor3iv,layer);
    _getProcAddress( driver_glColor3s, glColor3s, "glColor3s" );
    if( driver_glColor3s == NULL ) {
      driver_glColor3s = missing_glColor3s;
    }
    dt.glColor3s = MakeRegalProc(loader_glColor3s,layer);
    _getProcAddress( driver_glColor3sv, glColor3sv, "glColor3sv" );
    if( driver_glColor3sv == NULL ) {
      driver_glColor3sv = missing_glColor3sv;
    }
    dt.glColor3sv = MakeRegalProc(loader_glColor3sv,layer);
    _getProcAddress( driver_glColor3ub, glColor3ub, "glColor3ub" );
    if( driver_glColor3ub == NULL ) {
      driver_glColor3ub = missing_glColor3ub;
    }
    dt.glColor3ub = MakeRegalProc(loader_glColor3ub,layer);
    _getProcAddress( driver_glColor3ubv, glColor3ubv, "glColor3ubv" );
    if( driver_glColor3ubv == NULL ) {
      driver_glColor3ubv = missing_glColor3ubv;
    }
    dt.glColor3ubv = MakeRegalProc(loader_glColor3ubv,layer);
    _getProcAddress( driver_glColor3ui, glColor3ui, "glColor3ui" );
    if( driver_glColor3ui == NULL ) {
      driver_glColor3ui = missing_glColor3ui;
    }
    dt.glColor3ui = MakeRegalProc(loader_glColor3ui,layer);
    _getProcAddress( driver_glColor3uiv, glColor3uiv, "glColor3uiv" );
    if( driver_glColor3uiv == NULL ) {
      driver_glColor3uiv = missing_glColor3uiv;
    }
    dt.glColor3uiv = MakeRegalProc(loader_glColor3uiv,layer);
    _getProcAddress( driver_glColor3us, glColor3us, "glColor3us" );
    if( driver_glColor3us == NULL ) {
      driver_glColor3us = missing_glColor3us;
    }
    dt.glColor3us = MakeRegalProc(loader_glColor3us,layer);
    _getProcAddress( driver_glColor3usv, glColor3usv, "glColor3usv" );
    if( driver_glColor3usv == NULL ) {
      driver_glColor3usv = missing_glColor3usv;
    }
    dt.glColor3usv = MakeRegalProc(loader_glColor3usv,layer);
    _getProcAddress( driver_glColor4b, glColor4b, "glColor4b" );
    if( driver_glColor4b == NULL ) {
      driver_glColor4b = missing_glColor4b;
    }
    dt.glColor4b = MakeRegalProc(loader_glColor4b,layer);
    _getProcAddress( driver_glColor4bv, glColor4bv, "glColor4bv" );
    if( driver_glColor4bv == NULL ) {
      driver_glColor4bv = missing_glColor4bv;
    }
    dt.glColor4bv = MakeRegalProc(loader_glColor4bv,layer);
    _getProcAddress( driver_glColor4d, glColor4d, "glColor4d" );
    if( driver_glColor4d == NULL ) {
      driver_glColor4d = missing_glColor4d;
    }
    dt.glColor4d = MakeRegalProc(loader_glColor4d,layer);
    _getProcAddress( driver_glColor4dv, glColor4dv, "glColor4dv" );
    if( driver_glColor4dv == NULL ) {
      driver_glColor4dv = missing_glColor4dv;
    }
    dt.glColor4dv = MakeRegalProc(loader_glColor4dv,layer);
    _getProcAddress( driver_glColor4f, glColor4f, "glColor4f" );
    if( driver_glColor4f == NULL ) {
      driver_glColor4f = missing_glColor4f;
    }
    dt.glColor4f = MakeRegalProc(loader_glColor4f,layer);
    _getProcAddress( driver_glColor4fv, glColor4fv, "glColor4fv" );
    if( driver_glColor4fv == NULL ) {
      driver_glColor4fv = missing_glColor4fv;
    }
    dt.glColor4fv = MakeRegalProc(loader_glColor4fv,layer);
    _getProcAddress( driver_glColor4i, glColor4i, "glColor4i" );
    if( driver_glColor4i == NULL ) {
      driver_glColor4i = missing_glColor4i;
    }
    dt.glColor4i = MakeRegalProc(loader_glColor4i,layer);
    _getProcAddress( driver_glColor4iv, glColor4iv, "glColor4iv" );
    if( driver_glColor4iv == NULL ) {
      driver_glColor4iv = missing_glColor4iv;
    }
    dt.glColor4iv = MakeRegalProc(loader_glColor4iv,layer);
    _getProcAddress( driver_glColor4s, glColor4s, "glColor4s" );
    if( driver_glColor4s == NULL ) {
      driver_glColor4s = missing_glColor4s;
    }
    dt.glColor4s = MakeRegalProc(loader_glColor4s,layer);
    _getProcAddress( driver_glColor4sv, glColor4sv, "glColor4sv" );
    if( driver_glColor4sv == NULL ) {
      driver_glColor4sv = missing_glColor4sv;
    }
    dt.glColor4sv = MakeRegalProc(loader_glColor4sv,layer);
    _getProcAddress( driver_glColor4ub, glColor4ub, "glColor4ub" );
    if( driver_glColor4ub == NULL ) {
      driver_glColor4ub = missing_glColor4ub;
    }
    dt.glColor4ub = MakeRegalProc(loader_glColor4ub,layer);
    _getProcAddress( driver_glColor4ubv, glColor4ubv, "glColor4ubv" );
    if( driver_glColor4ubv == NULL ) {
      driver_glColor4ubv = missing_glColor4ubv;
    }
    dt.glColor4ubv = MakeRegalProc(loader_glColor4ubv,layer);
    _getProcAddress( driver_glColor4ui, glColor4ui, "glColor4ui" );
    if( driver_glColor4ui == NULL ) {
      driver_glColor4ui = missing_glColor4ui;
    }
    dt.glColor4ui = MakeRegalProc(loader_glColor4ui,layer);
    _getProcAddress( driver_glColor4uiv, glColor4uiv, "glColor4uiv" );
    if( driver_glColor4uiv == NULL ) {
      driver_glColor4uiv = missing_glColor4uiv;
    }
    dt.glColor4uiv = MakeRegalProc(loader_glColor4uiv,layer);
    _getProcAddress( driver_glColor4us, glColor4us, "glColor4us" );
    if( driver_glColor4us == NULL ) {
      driver_glColor4us = missing_glColor4us;
    }
    dt.glColor4us = MakeRegalProc(loader_glColor4us,layer);
    _getProcAddress( driver_glColor4usv, glColor4usv, "glColor4usv" );
    if( driver_glColor4usv == NULL ) {
      driver_glColor4usv = missing_glColor4usv;
    }
    dt.glColor4usv = MakeRegalProc(loader_glColor4usv,layer);
    _getProcAddress( driver_glColorMask, glColorMask, "glColorMask" );
    if( driver_glColorMask == NULL ) {
      driver_glColorMask = missing_glColorMask;
    }
    dt.glColorMask = MakeRegalProc(loader_glColorMask,layer);
    _getProcAddress( driver_glColorMaterial, glColorMaterial, "glColorMaterial" );
    if( driver_glColorMaterial == NULL ) {
      driver_glColorMaterial = missing_glColorMaterial;
    }
    dt.glColorMaterial = MakeRegalProc(loader_glColorMaterial,layer);
    _getProcAddress( driver_glCopyPixels, glCopyPixels, "glCopyPixels" );
    if( driver_glCopyPixels == NULL ) {
      driver_glCopyPixels = missing_glCopyPixels;
    }
    dt.glCopyPixels = MakeRegalProc(loader_glCopyPixels,layer);
    _getProcAddress( driver_glCullFace, glCullFace, "glCullFace" );
    if( driver_glCullFace == NULL ) {
      driver_glCullFace = missing_glCullFace;
    }
    dt.glCullFace = MakeRegalProc(loader_glCullFace,layer);
    _getProcAddress( driver_glDeleteLists, glDeleteLists, "glDeleteLists" );
    if( driver_glDeleteLists == NULL ) {
      driver_glDeleteLists = missing_glDeleteLists;
    }
    dt.glDeleteLists = MakeRegalProc(loader_glDeleteLists,layer);
    _getProcAddress( driver_glDepthFunc, glDepthFunc, "glDepthFunc" );
    if( driver_glDepthFunc == NULL ) {
      driver_glDepthFunc = missing_glDepthFunc;
    }
    dt.glDepthFunc = MakeRegalProc(loader_glDepthFunc,layer);
    _getProcAddress( driver_glDepthMask, glDepthMask, "glDepthMask" );
    if( driver_glDepthMask == NULL ) {
      driver_glDepthMask = missing_glDepthMask;
    }
    dt.glDepthMask = MakeRegalProc(loader_glDepthMask,layer);
    _getProcAddress( driver_glDepthRange, glDepthRange, "glDepthRange" );
    if( driver_glDepthRange == NULL ) {
      driver_glDepthRange = missing_glDepthRange;
    }
    dt.glDepthRange = MakeRegalProc(loader_glDepthRange,layer);
    _getProcAddress( driver_glDisable, glDisable, "glDisable" );
    if( driver_glDisable == NULL ) {
      driver_glDisable = missing_glDisable;
    }
    dt.glDisable = MakeRegalProc(loader_glDisable,layer);
    _getProcAddress( driver_glDrawBuffer, glDrawBuffer, "glDrawBuffer" );
    if( driver_glDrawBuffer == NULL ) {
      driver_glDrawBuffer = missing_glDrawBuffer;
    }
    dt.glDrawBuffer = MakeRegalProc(loader_glDrawBuffer,layer);
    _getProcAddress( driver_glDrawPixels, glDrawPixels, "glDrawPixels" );
    if( driver_glDrawPixels == NULL ) {
      driver_glDrawPixels = missing_glDrawPixels;
    }
    dt.glDrawPixels = MakeRegalProc(loader_glDrawPixels,layer);
    _getProcAddress( driver_glEdgeFlag, glEdgeFlag, "glEdgeFlag" );
    if( driver_glEdgeFlag == NULL ) {
      driver_glEdgeFlag = missing_glEdgeFlag;
    }
    dt.glEdgeFlag = MakeRegalProc(loader_glEdgeFlag,layer);
    _getProcAddress( driver_glEdgeFlagv, glEdgeFlagv, "glEdgeFlagv" );
    if( driver_glEdgeFlagv == NULL ) {
      driver_glEdgeFlagv = missing_glEdgeFlagv;
    }
    dt.glEdgeFlagv = MakeRegalProc(loader_glEdgeFlagv,layer);
    _getProcAddress( driver_glEnable, glEnable, "glEnable" );
    if( driver_glEnable == NULL ) {
      driver_glEnable = missing_glEnable;
    }
    dt.glEnable = MakeRegalProc(loader_glEnable,layer);
    _getProcAddress( driver_glEnd, glEnd, "glEnd" );
    if( driver_glEnd == NULL ) {
      driver_glEnd = missing_glEnd;
    }
    dt.glEnd = MakeRegalProc(loader_glEnd,layer);
    _getProcAddress( driver_glEndList, glEndList, "glEndList" );
    if( driver_glEndList == NULL ) {
      driver_glEndList = missing_glEndList;
    }
    dt.glEndList = MakeRegalProc(loader_glEndList,layer);
    _getProcAddress( driver_glEvalCoord1d, glEvalCoord1d, "glEvalCoord1d" );
    if( driver_glEvalCoord1d == NULL ) {
      driver_glEvalCoord1d = missing_glEvalCoord1d;
    }
    dt.glEvalCoord1d = MakeRegalProc(loader_glEvalCoord1d,layer);
    _getProcAddress( driver_glEvalCoord1dv, glEvalCoord1dv, "glEvalCoord1dv" );
    if( driver_glEvalCoord1dv == NULL ) {
      driver_glEvalCoord1dv = missing_glEvalCoord1dv;
    }
    dt.glEvalCoord1dv = MakeRegalProc(loader_glEvalCoord1dv,layer);
    _getProcAddress( driver_glEvalCoord1f, glEvalCoord1f, "glEvalCoord1f" );
    if( driver_glEvalCoord1f == NULL ) {
      driver_glEvalCoord1f = missing_glEvalCoord1f;
    }
    dt.glEvalCoord1f = MakeRegalProc(loader_glEvalCoord1f,layer);
    _getProcAddress( driver_glEvalCoord1fv, glEvalCoord1fv, "glEvalCoord1fv" );
    if( driver_glEvalCoord1fv == NULL ) {
      driver_glEvalCoord1fv = missing_glEvalCoord1fv;
    }
    dt.glEvalCoord1fv = MakeRegalProc(loader_glEvalCoord1fv,layer);
    _getProcAddress( driver_glEvalCoord2d, glEvalCoord2d, "glEvalCoord2d" );
    if( driver_glEvalCoord2d == NULL ) {
      driver_glEvalCoord2d = missing_glEvalCoord2d;
    }
    dt.glEvalCoord2d = MakeRegalProc(loader_glEvalCoord2d,layer);
    _getProcAddress( driver_glEvalCoord2dv, glEvalCoord2dv, "glEvalCoord2dv" );
    if( driver_glEvalCoord2dv == NULL ) {
      driver_glEvalCoord2dv = missing_glEvalCoord2dv;
    }
    dt.glEvalCoord2dv = MakeRegalProc(loader_glEvalCoord2dv,layer);
    _getProcAddress( driver_glEvalCoord2f, glEvalCoord2f, "glEvalCoord2f" );
    if( driver_glEvalCoord2f == NULL ) {
      driver_glEvalCoord2f = missing_glEvalCoord2f;
    }
    dt.glEvalCoord2f = MakeRegalProc(loader_glEvalCoord2f,layer);
    _getProcAddress( driver_glEvalCoord2fv, glEvalCoord2fv, "glEvalCoord2fv" );
    if( driver_glEvalCoord2fv == NULL ) {
      driver_glEvalCoord2fv = missing_glEvalCoord2fv;
    }
    dt.glEvalCoord2fv = MakeRegalProc(loader_glEvalCoord2fv,layer);
    _getProcAddress( driver_glEvalMesh1, glEvalMesh1, "glEvalMesh1" );
    if( driver_glEvalMesh1 == NULL ) {
      driver_glEvalMesh1 = missing_glEvalMesh1;
    }
    dt.glEvalMesh1 = MakeRegalProc(loader_glEvalMesh1,layer);
    _getProcAddress( driver_glEvalMesh2, glEvalMesh2, "glEvalMesh2" );
    if( driver_glEvalMesh2 == NULL ) {
      driver_glEvalMesh2 = missing_glEvalMesh2;
    }
    dt.glEvalMesh2 = MakeRegalProc(loader_glEvalMesh2,layer);
    _getProcAddress( driver_glEvalPoint1, glEvalPoint1, "glEvalPoint1" );
    if( driver_glEvalPoint1 == NULL ) {
      driver_glEvalPoint1 = missing_glEvalPoint1;
    }
    dt.glEvalPoint1 = MakeRegalProc(loader_glEvalPoint1,layer);
    _getProcAddress( driver_glEvalPoint2, glEvalPoint2, "glEvalPoint2" );
    if( driver_glEvalPoint2 == NULL ) {
      driver_glEvalPoint2 = missing_glEvalPoint2;
    }
    dt.glEvalPoint2 = MakeRegalProc(loader_glEvalPoint2,layer);
    _getProcAddress( driver_glFeedbackBuffer, glFeedbackBuffer, "glFeedbackBuffer" );
    if( driver_glFeedbackBuffer == NULL ) {
      driver_glFeedbackBuffer = missing_glFeedbackBuffer;
    }
    dt.glFeedbackBuffer = MakeRegalProc(loader_glFeedbackBuffer,layer);
    _getProcAddress( driver_glFinish, glFinish, "glFinish" );
    if( driver_glFinish == NULL ) {
      driver_glFinish = missing_glFinish;
    }
    dt.glFinish = MakeRegalProc(loader_glFinish,layer);
    _getProcAddress( driver_glFlush, glFlush, "glFlush" );
    if( driver_glFlush == NULL ) {
      driver_glFlush = missing_glFlush;
    }
    dt.glFlush = MakeRegalProc(loader_glFlush,layer);
    _getProcAddress( driver_glFogf, glFogf, "glFogf" );
    if( driver_glFogf == NULL ) {
      driver_glFogf = missing_glFogf;
    }
    dt.glFogf = MakeRegalProc(loader_glFogf,layer);
    _getProcAddress( driver_glFogfv, glFogfv, "glFogfv" );
    if( driver_glFogfv == NULL ) {
      driver_glFogfv = missing_glFogfv;
    }
    dt.glFogfv = MakeRegalProc(loader_glFogfv,layer);
    _getProcAddress( driver_glFogi, glFogi, "glFogi" );
    if( driver_glFogi == NULL ) {
      driver_glFogi = missing_glFogi;
    }
    dt.glFogi = MakeRegalProc(loader_glFogi,layer);
    _getProcAddress( driver_glFogiv, glFogiv, "glFogiv" );
    if( driver_glFogiv == NULL ) {
      driver_glFogiv = missing_glFogiv;
    }
    dt.glFogiv = MakeRegalProc(loader_glFogiv,layer);
    _getProcAddress( driver_glFrontFace, glFrontFace, "glFrontFace" );
    if( driver_glFrontFace == NULL ) {
      driver_glFrontFace = missing_glFrontFace;
    }
    dt.glFrontFace = MakeRegalProc(loader_glFrontFace,layer);
    _getProcAddress( driver_glFrustum, glFrustum, "glFrustum" );
    if( driver_glFrustum == NULL ) {
      driver_glFrustum = missing_glFrustum;
    }
    dt.glFrustum = MakeRegalProc(loader_glFrustum,layer);
    _getProcAddress( driver_glGenLists, glGenLists, "glGenLists" );
    if( driver_glGenLists == NULL ) {
      driver_glGenLists = missing_glGenLists;
    }
    dt.glGenLists = MakeRegalProc(loader_glGenLists,layer);
    _getProcAddress( driver_glGetBooleanv, glGetBooleanv, "glGetBooleanv" );
    if( driver_glGetBooleanv == NULL ) {
      driver_glGetBooleanv = missing_glGetBooleanv;
    }
    dt.glGetBooleanv = MakeRegalProc(loader_glGetBooleanv,layer);
    _getProcAddress( driver_glGetClipPlane, glGetClipPlane, "glGetClipPlane" );
    if( driver_glGetClipPlane == NULL ) {
      driver_glGetClipPlane = missing_glGetClipPlane;
    }
    dt.glGetClipPlane = MakeRegalProc(loader_glGetClipPlane,layer);
    _getProcAddress( driver_glGetDoublev, glGetDoublev, "glGetDoublev" );
    if( driver_glGetDoublev == NULL ) {
      driver_glGetDoublev = missing_glGetDoublev;
    }
    dt.glGetDoublev = MakeRegalProc(loader_glGetDoublev,layer);
    _getProcAddress( driver_glGetError, glGetError, "glGetError" );
    if( driver_glGetError == NULL ) {
      driver_glGetError = missing_glGetError;
    }
    dt.glGetError = MakeRegalProc(loader_glGetError,layer);
    _getProcAddress( driver_glGetFloatv, glGetFloatv, "glGetFloatv" );
    if( driver_glGetFloatv == NULL ) {
      driver_glGetFloatv = missing_glGetFloatv;
    }
    dt.glGetFloatv = MakeRegalProc(loader_glGetFloatv,layer);
    _getProcAddress( driver_glGetIntegerv, glGetIntegerv, "glGetIntegerv" );
    if( driver_glGetIntegerv == NULL ) {
      driver_glGetIntegerv = missing_glGetIntegerv;
    }
    dt.glGetIntegerv = MakeRegalProc(loader_glGetIntegerv,layer);
    _getProcAddress( driver_glGetLightfv, glGetLightfv, "glGetLightfv" );
    if( driver_glGetLightfv == NULL ) {
      driver_glGetLightfv = missing_glGetLightfv;
    }
    dt.glGetLightfv = MakeRegalProc(loader_glGetLightfv,layer);
    _getProcAddress( driver_glGetLightiv, glGetLightiv, "glGetLightiv" );
    if( driver_glGetLightiv == NULL ) {
      driver_glGetLightiv = missing_glGetLightiv;
    }
    dt.glGetLightiv = MakeRegalProc(loader_glGetLightiv,layer);
    _getProcAddress( driver_glGetMapdv, glGetMapdv, "glGetMapdv" );
    if( driver_glGetMapdv == NULL ) {
      driver_glGetMapdv = missing_glGetMapdv;
    }
    dt.glGetMapdv = MakeRegalProc(loader_glGetMapdv,layer);
    _getProcAddress( driver_glGetMapfv, glGetMapfv, "glGetMapfv" );
    if( driver_glGetMapfv == NULL ) {
      driver_glGetMapfv = missing_glGetMapfv;
    }
    dt.glGetMapfv = MakeRegalProc(loader_glGetMapfv,layer);
    _getProcAddress( driver_glGetMapiv, glGetMapiv, "glGetMapiv" );
    if( driver_glGetMapiv == NULL ) {
      driver_glGetMapiv = missing_glGetMapiv;
    }
    dt.glGetMapiv = MakeRegalProc(loader_glGetMapiv,layer);
    _getProcAddress( driver_glGetMaterialfv, glGetMaterialfv, "glGetMaterialfv" );
    if( driver_glGetMaterialfv == NULL ) {
      driver_glGetMaterialfv = missing_glGetMaterialfv;
    }
    dt.glGetMaterialfv = MakeRegalProc(loader_glGetMaterialfv,layer);
    _getProcAddress( driver_glGetMaterialiv, glGetMaterialiv, "glGetMaterialiv" );
    if( driver_glGetMaterialiv == NULL ) {
      driver_glGetMaterialiv = missing_glGetMaterialiv;
    }
    dt.glGetMaterialiv = MakeRegalProc(loader_glGetMaterialiv,layer);
    _getProcAddress( driver_glGetPixelMapfv, glGetPixelMapfv, "glGetPixelMapfv" );
    if( driver_glGetPixelMapfv == NULL ) {
      driver_glGetPixelMapfv = missing_glGetPixelMapfv;
    }
    dt.glGetPixelMapfv = MakeRegalProc(loader_glGetPixelMapfv,layer);
    _getProcAddress( driver_glGetPixelMapuiv, glGetPixelMapuiv, "glGetPixelMapuiv" );
    if( driver_glGetPixelMapuiv == NULL ) {
      driver_glGetPixelMapuiv = missing_glGetPixelMapuiv;
    }
    dt.glGetPixelMapuiv = MakeRegalProc(loader_glGetPixelMapuiv,layer);
    _getProcAddress( driver_glGetPixelMapusv, glGetPixelMapusv, "glGetPixelMapusv" );
    if( driver_glGetPixelMapusv == NULL ) {
      driver_glGetPixelMapusv = missing_glGetPixelMapusv;
    }
    dt.glGetPixelMapusv = MakeRegalProc(loader_glGetPixelMapusv,layer);
    _getProcAddress( driver_glGetPolygonStipple, glGetPolygonStipple, "glGetPolygonStipple" );
    if( driver_glGetPolygonStipple == NULL ) {
      driver_glGetPolygonStipple = missing_glGetPolygonStipple;
    }
    dt.glGetPolygonStipple = MakeRegalProc(loader_glGetPolygonStipple,layer);
    _getProcAddress( driver_glGetString, glGetString, "glGetString" );
    if( driver_glGetString == NULL ) {
      driver_glGetString = missing_glGetString;
    }
    dt.glGetString = MakeRegalProc(loader_glGetString,layer);
    _getProcAddress( driver_glGetTexEnvfv, glGetTexEnvfv, "glGetTexEnvfv" );
    if( driver_glGetTexEnvfv == NULL ) {
      driver_glGetTexEnvfv = missing_glGetTexEnvfv;
    }
    dt.glGetTexEnvfv = MakeRegalProc(loader_glGetTexEnvfv,layer);
    _getProcAddress( driver_glGetTexEnviv, glGetTexEnviv, "glGetTexEnviv" );
    if( driver_glGetTexEnviv == NULL ) {
      driver_glGetTexEnviv = missing_glGetTexEnviv;
    }
    dt.glGetTexEnviv = MakeRegalProc(loader_glGetTexEnviv,layer);
    _getProcAddress( driver_glGetTexGendv, glGetTexGendv, "glGetTexGendv" );
    if( driver_glGetTexGendv == NULL ) {
      driver_glGetTexGendv = missing_glGetTexGendv;
    }
    dt.glGetTexGendv = MakeRegalProc(loader_glGetTexGendv,layer);
    _getProcAddress( driver_glGetTexGenfv, glGetTexGenfv, "glGetTexGenfv" );
    if( driver_glGetTexGenfv == NULL ) {
      driver_glGetTexGenfv = missing_glGetTexGenfv;
    }
    dt.glGetTexGenfv = MakeRegalProc(loader_glGetTexGenfv,layer);
    _getProcAddress( driver_glGetTexGeniv, glGetTexGeniv, "glGetTexGeniv" );
    if( driver_glGetTexGeniv == NULL ) {
      driver_glGetTexGeniv = missing_glGetTexGeniv;
    }
    dt.glGetTexGeniv = MakeRegalProc(loader_glGetTexGeniv,layer);
    _getProcAddress( driver_glGetTexImage, glGetTexImage, "glGetTexImage" );
    if( driver_glGetTexImage == NULL ) {
      driver_glGetTexImage = missing_glGetTexImage;
    }
    dt.glGetTexImage = MakeRegalProc(loader_glGetTexImage,layer);
    _getProcAddress( driver_glGetTexLevelParameterfv, glGetTexLevelParameterfv, "glGetTexLevelParameterfv" );
    if( driver_glGetTexLevelParameterfv == NULL ) {
      driver_glGetTexLevelParameterfv = missing_glGetTexLevelParameterfv;
    }
    dt.glGetTexLevelParameterfv = MakeRegalProc(loader_glGetTexLevelParameterfv,layer);
    _getProcAddress( driver_glGetTexLevelParameteriv, glGetTexLevelParameteriv, "glGetTexLevelParameteriv" );
    if( driver_glGetTexLevelParameteriv == NULL ) {
      driver_glGetTexLevelParameteriv = missing_glGetTexLevelParameteriv;
    }
    dt.glGetTexLevelParameteriv = MakeRegalProc(loader_glGetTexLevelParameteriv,layer);
    _getProcAddress( driver_glGetTexParameterfv, glGetTexParameterfv, "glGetTexParameterfv" );
    if( driver_glGetTexParameterfv == NULL ) {
      driver_glGetTexParameterfv = missing_glGetTexParameterfv;
    }
    dt.glGetTexParameterfv = MakeRegalProc(loader_glGetTexParameterfv,layer);
    _getProcAddress( driver_glGetTexParameteriv, glGetTexParameteriv, "glGetTexParameteriv" );
    if( driver_glGetTexParameteriv == NULL ) {
      driver_glGetTexParameteriv = missing_glGetTexParameteriv;
    }
    dt.glGetTexParameteriv = MakeRegalProc(loader_glGetTexParameteriv,layer);
    _getProcAddress( driver_glHint, glHint, "glHint" );
    if( driver_glHint == NULL ) {
      driver_glHint = missing_glHint;
    }
    dt.glHint = MakeRegalProc(loader_glHint,layer);
    _getProcAddress( driver_glIndexMask, glIndexMask, "glIndexMask" );
    if( driver_glIndexMask == NULL ) {
      driver_glIndexMask = missing_glIndexMask;
    }
    dt.glIndexMask = MakeRegalProc(loader_glIndexMask,layer);
    _getProcAddress( driver_glIndexd, glIndexd, "glIndexd" );
    if( driver_glIndexd == NULL ) {
      driver_glIndexd = missing_glIndexd;
    }
    dt.glIndexd = MakeRegalProc(loader_glIndexd,layer);
    _getProcAddress( driver_glIndexdv, glIndexdv, "glIndexdv" );
    if( driver_glIndexdv == NULL ) {
      driver_glIndexdv = missing_glIndexdv;
    }
    dt.glIndexdv = MakeRegalProc(loader_glIndexdv,layer);
    _getProcAddress( driver_glIndexf, glIndexf, "glIndexf" );
    if( driver_glIndexf == NULL ) {
      driver_glIndexf = missing_glIndexf;
    }
    dt.glIndexf = MakeRegalProc(loader_glIndexf,layer);
    _getProcAddress( driver_glIndexfv, glIndexfv, "glIndexfv" );
    if( driver_glIndexfv == NULL ) {
      driver_glIndexfv = missing_glIndexfv;
    }
    dt.glIndexfv = MakeRegalProc(loader_glIndexfv,layer);
    _getProcAddress( driver_glIndexi, glIndexi, "glIndexi" );
    if( driver_glIndexi == NULL ) {
      driver_glIndexi = missing_glIndexi;
    }
    dt.glIndexi = MakeRegalProc(loader_glIndexi,layer);
    _getProcAddress( driver_glIndexiv, glIndexiv, "glIndexiv" );
    if( driver_glIndexiv == NULL ) {
      driver_glIndexiv = missing_glIndexiv;
    }
    dt.glIndexiv = MakeRegalProc(loader_glIndexiv,layer);
    _getProcAddress( driver_glIndexs, glIndexs, "glIndexs" );
    if( driver_glIndexs == NULL ) {
      driver_glIndexs = missing_glIndexs;
    }
    dt.glIndexs = MakeRegalProc(loader_glIndexs,layer);
    _getProcAddress( driver_glIndexsv, glIndexsv, "glIndexsv" );
    if( driver_glIndexsv == NULL ) {
      driver_glIndexsv = missing_glIndexsv;
    }
    dt.glIndexsv = MakeRegalProc(loader_glIndexsv,layer);
    _getProcAddress( driver_glInitNames, glInitNames, "glInitNames" );
    if( driver_glInitNames == NULL ) {
      driver_glInitNames = missing_glInitNames;
    }
    dt.glInitNames = MakeRegalProc(loader_glInitNames,layer);
    _getProcAddress( driver_glIsEnabled, glIsEnabled, "glIsEnabled" );
    if( driver_glIsEnabled == NULL ) {
      driver_glIsEnabled = missing_glIsEnabled;
    }
    dt.glIsEnabled = MakeRegalProc(loader_glIsEnabled,layer);
    _getProcAddress( driver_glIsList, glIsList, "glIsList" );
    if( driver_glIsList == NULL ) {
      driver_glIsList = missing_glIsList;
    }
    dt.glIsList = MakeRegalProc(loader_glIsList,layer);
    _getProcAddress( driver_glLightModelf, glLightModelf, "glLightModelf" );
    if( driver_glLightModelf == NULL ) {
      driver_glLightModelf = missing_glLightModelf;
    }
    dt.glLightModelf = MakeRegalProc(loader_glLightModelf,layer);
    _getProcAddress( driver_glLightModelfv, glLightModelfv, "glLightModelfv" );
    if( driver_glLightModelfv == NULL ) {
      driver_glLightModelfv = missing_glLightModelfv;
    }
    dt.glLightModelfv = MakeRegalProc(loader_glLightModelfv,layer);
    _getProcAddress( driver_glLightModeli, glLightModeli, "glLightModeli" );
    if( driver_glLightModeli == NULL ) {
      driver_glLightModeli = missing_glLightModeli;
    }
    dt.glLightModeli = MakeRegalProc(loader_glLightModeli,layer);
    _getProcAddress( driver_glLightModeliv, glLightModeliv, "glLightModeliv" );
    if( driver_glLightModeliv == NULL ) {
      driver_glLightModeliv = missing_glLightModeliv;
    }
    dt.glLightModeliv = MakeRegalProc(loader_glLightModeliv,layer);
    _getProcAddress( driver_glLightf, glLightf, "glLightf" );
    if( driver_glLightf == NULL ) {
      driver_glLightf = missing_glLightf;
    }
    dt.glLightf = MakeRegalProc(loader_glLightf,layer);
    _getProcAddress( driver_glLightfv, glLightfv, "glLightfv" );
    if( driver_glLightfv == NULL ) {
      driver_glLightfv = missing_glLightfv;
    }
    dt.glLightfv = MakeRegalProc(loader_glLightfv,layer);
    _getProcAddress( driver_glLighti, glLighti, "glLighti" );
    if( driver_glLighti == NULL ) {
      driver_glLighti = missing_glLighti;
    }
    dt.glLighti = MakeRegalProc(loader_glLighti,layer);
    _getProcAddress( driver_glLightiv, glLightiv, "glLightiv" );
    if( driver_glLightiv == NULL ) {
      driver_glLightiv = missing_glLightiv;
    }
    dt.glLightiv = MakeRegalProc(loader_glLightiv,layer);
    _getProcAddress( driver_glLineStipple, glLineStipple, "glLineStipple" );
    if( driver_glLineStipple == NULL ) {
      driver_glLineStipple = missing_glLineStipple;
    }
    dt.glLineStipple = MakeRegalProc(loader_glLineStipple,layer);
    _getProcAddress( driver_glLineWidth, glLineWidth, "glLineWidth" );
    if( driver_glLineWidth == NULL ) {
      driver_glLineWidth = missing_glLineWidth;
    }
    dt.glLineWidth = MakeRegalProc(loader_glLineWidth,layer);
    _getProcAddress( driver_glListBase, glListBase, "glListBase" );
    if( driver_glListBase == NULL ) {
      driver_glListBase = missing_glListBase;
    }
    dt.glListBase = MakeRegalProc(loader_glListBase,layer);
    _getProcAddress( driver_glLoadIdentity, glLoadIdentity, "glLoadIdentity" );
    if( driver_glLoadIdentity == NULL ) {
      driver_glLoadIdentity = missing_glLoadIdentity;
    }
    dt.glLoadIdentity = MakeRegalProc(loader_glLoadIdentity,layer);
    _getProcAddress( driver_glLoadMatrixd, glLoadMatrixd, "glLoadMatrixd" );
    if( driver_glLoadMatrixd == NULL ) {
      driver_glLoadMatrixd = missing_glLoadMatrixd;
    }
    dt.glLoadMatrixd = MakeRegalProc(loader_glLoadMatrixd,layer);
    _getProcAddress( driver_glLoadMatrixf, glLoadMatrixf, "glLoadMatrixf" );
    if( driver_glLoadMatrixf == NULL ) {
      driver_glLoadMatrixf = missing_glLoadMatrixf;
    }
    dt.glLoadMatrixf = MakeRegalProc(loader_glLoadMatrixf,layer);
    _getProcAddress( driver_glLoadName, glLoadName, "glLoadName" );
    if( driver_glLoadName == NULL ) {
      driver_glLoadName = missing_glLoadName;
    }
    dt.glLoadName = MakeRegalProc(loader_glLoadName,layer);
    _getProcAddress( driver_glLogicOp, glLogicOp, "glLogicOp" );
    if( driver_glLogicOp == NULL ) {
      driver_glLogicOp = missing_glLogicOp;
    }
    dt.glLogicOp = MakeRegalProc(loader_glLogicOp,layer);
    _getProcAddress( driver_glMap1d, glMap1d, "glMap1d" );
    if( driver_glMap1d == NULL ) {
      driver_glMap1d = missing_glMap1d;
    }
    dt.glMap1d = MakeRegalProc(loader_glMap1d,layer);
    _getProcAddress( driver_glMap1f, glMap1f, "glMap1f" );
    if( driver_glMap1f == NULL ) {
      driver_glMap1f = missing_glMap1f;
    }
    dt.glMap1f = MakeRegalProc(loader_glMap1f,layer);
    _getProcAddress( driver_glMap2d, glMap2d, "glMap2d" );
    if( driver_glMap2d == NULL ) {
      driver_glMap2d = missing_glMap2d;
    }
    dt.glMap2d = MakeRegalProc(loader_glMap2d,layer);
    _getProcAddress( driver_glMap2f, glMap2f, "glMap2f" );
    if( driver_glMap2f == NULL ) {
      driver_glMap2f = missing_glMap2f;
    }
    dt.glMap2f = MakeRegalProc(loader_glMap2f,layer);
    _getProcAddress( driver_glMapGrid1d, glMapGrid1d, "glMapGrid1d" );
    if( driver_glMapGrid1d == NULL ) {
      driver_glMapGrid1d = missing_glMapGrid1d;
    }
    dt.glMapGrid1d = MakeRegalProc(loader_glMapGrid1d,layer);
    _getProcAddress( driver_glMapGrid1f, glMapGrid1f, "glMapGrid1f" );
    if( driver_glMapGrid1f == NULL ) {
      driver_glMapGrid1f = missing_glMapGrid1f;
    }
    dt.glMapGrid1f = MakeRegalProc(loader_glMapGrid1f,layer);
    _getProcAddress( driver_glMapGrid2d, glMapGrid2d, "glMapGrid2d" );
    if( driver_glMapGrid2d == NULL ) {
      driver_glMapGrid2d = missing_glMapGrid2d;
    }
    dt.glMapGrid2d = MakeRegalProc(loader_glMapGrid2d,layer);
    _getProcAddress( driver_glMapGrid2f, glMapGrid2f, "glMapGrid2f" );
    if( driver_glMapGrid2f == NULL ) {
      driver_glMapGrid2f = missing_glMapGrid2f;
    }
    dt.glMapGrid2f = MakeRegalProc(loader_glMapGrid2f,layer);
    _getProcAddress( driver_glMaterialf, glMaterialf, "glMaterialf" );
    if( driver_glMaterialf == NULL ) {
      driver_glMaterialf = missing_glMaterialf;
    }
    dt.glMaterialf = MakeRegalProc(loader_glMaterialf,layer);
    _getProcAddress( driver_glMaterialfv, glMaterialfv, "glMaterialfv" );
    if( driver_glMaterialfv == NULL ) {
      driver_glMaterialfv = missing_glMaterialfv;
    }
    dt.glMaterialfv = MakeRegalProc(loader_glMaterialfv,layer);
    _getProcAddress( driver_glMateriali, glMateriali, "glMateriali" );
    if( driver_glMateriali == NULL ) {
      driver_glMateriali = missing_glMateriali;
    }
    dt.glMateriali = MakeRegalProc(loader_glMateriali,layer);
    _getProcAddress( driver_glMaterialiv, glMaterialiv, "glMaterialiv" );
    if( driver_glMaterialiv == NULL ) {
      driver_glMaterialiv = missing_glMaterialiv;
    }
    dt.glMaterialiv = MakeRegalProc(loader_glMaterialiv,layer);
    _getProcAddress( driver_glMatrixMode, glMatrixMode, "glMatrixMode" );
    if( driver_glMatrixMode == NULL ) {
      driver_glMatrixMode = missing_glMatrixMode;
    }
    dt.glMatrixMode = MakeRegalProc(loader_glMatrixMode,layer);
    _getProcAddress( driver_glMultMatrixd, glMultMatrixd, "glMultMatrixd" );
    if( driver_glMultMatrixd == NULL ) {
      driver_glMultMatrixd = missing_glMultMatrixd;
    }
    dt.glMultMatrixd = MakeRegalProc(loader_glMultMatrixd,layer);
    _getProcAddress( driver_glMultMatrixf, glMultMatrixf, "glMultMatrixf" );
    if( driver_glMultMatrixf == NULL ) {
      driver_glMultMatrixf = missing_glMultMatrixf;
    }
    dt.glMultMatrixf = MakeRegalProc(loader_glMultMatrixf,layer);
    _getProcAddress( driver_glNewList, glNewList, "glNewList" );
    if( driver_glNewList == NULL ) {
      driver_glNewList = missing_glNewList;
    }
    dt.glNewList = MakeRegalProc(loader_glNewList,layer);
    _getProcAddress( driver_glNormal3b, glNormal3b, "glNormal3b" );
    if( driver_glNormal3b == NULL ) {
      driver_glNormal3b = missing_glNormal3b;
    }
    dt.glNormal3b = MakeRegalProc(loader_glNormal3b,layer);
    _getProcAddress( driver_glNormal3bv, glNormal3bv, "glNormal3bv" );
    if( driver_glNormal3bv == NULL ) {
      driver_glNormal3bv = missing_glNormal3bv;
    }
    dt.glNormal3bv = MakeRegalProc(loader_glNormal3bv,layer);
    _getProcAddress( driver_glNormal3d, glNormal3d, "glNormal3d" );
    if( driver_glNormal3d == NULL ) {
      driver_glNormal3d = missing_glNormal3d;
    }
    dt.glNormal3d = MakeRegalProc(loader_glNormal3d,layer);
    _getProcAddress( driver_glNormal3dv, glNormal3dv, "glNormal3dv" );
    if( driver_glNormal3dv == NULL ) {
      driver_glNormal3dv = missing_glNormal3dv;
    }
    dt.glNormal3dv = MakeRegalProc(loader_glNormal3dv,layer);
    _getProcAddress( driver_glNormal3f, glNormal3f, "glNormal3f" );
    if( driver_glNormal3f == NULL ) {
      driver_glNormal3f = missing_glNormal3f;
    }
    dt.glNormal3f = MakeRegalProc(loader_glNormal3f,layer);
    _getProcAddress( driver_glNormal3fv, glNormal3fv, "glNormal3fv" );
    if( driver_glNormal3fv == NULL ) {
      driver_glNormal3fv = missing_glNormal3fv;
    }
    dt.glNormal3fv = MakeRegalProc(loader_glNormal3fv,layer);
    _getProcAddress( driver_glNormal3i, glNormal3i, "glNormal3i" );
    if( driver_glNormal3i == NULL ) {
      driver_glNormal3i = missing_glNormal3i;
    }
    dt.glNormal3i = MakeRegalProc(loader_glNormal3i,layer);
    _getProcAddress( driver_glNormal3iv, glNormal3iv, "glNormal3iv" );
    if( driver_glNormal3iv == NULL ) {
      driver_glNormal3iv = missing_glNormal3iv;
    }
    dt.glNormal3iv = MakeRegalProc(loader_glNormal3iv,layer);
    _getProcAddress( driver_glNormal3s, glNormal3s, "glNormal3s" );
    if( driver_glNormal3s == NULL ) {
      driver_glNormal3s = missing_glNormal3s;
    }
    dt.glNormal3s = MakeRegalProc(loader_glNormal3s,layer);
    _getProcAddress( driver_glNormal3sv, glNormal3sv, "glNormal3sv" );
    if( driver_glNormal3sv == NULL ) {
      driver_glNormal3sv = missing_glNormal3sv;
    }
    dt.glNormal3sv = MakeRegalProc(loader_glNormal3sv,layer);
    _getProcAddress( driver_glOrtho, glOrtho, "glOrtho" );
    if( driver_glOrtho == NULL ) {
      driver_glOrtho = missing_glOrtho;
    }
    dt.glOrtho = MakeRegalProc(loader_glOrtho,layer);
    _getProcAddress( driver_glPassThrough, glPassThrough, "glPassThrough" );
    if( driver_glPassThrough == NULL ) {
      driver_glPassThrough = missing_glPassThrough;
    }
    dt.glPassThrough = MakeRegalProc(loader_glPassThrough,layer);
    _getProcAddress( driver_glPixelMapfv, glPixelMapfv, "glPixelMapfv" );
    if( driver_glPixelMapfv == NULL ) {
      driver_glPixelMapfv = missing_glPixelMapfv;
    }
    dt.glPixelMapfv = MakeRegalProc(loader_glPixelMapfv,layer);
    _getProcAddress( driver_glPixelMapuiv, glPixelMapuiv, "glPixelMapuiv" );
    if( driver_glPixelMapuiv == NULL ) {
      driver_glPixelMapuiv = missing_glPixelMapuiv;
    }
    dt.glPixelMapuiv = MakeRegalProc(loader_glPixelMapuiv,layer);
    _getProcAddress( driver_glPixelMapusv, glPixelMapusv, "glPixelMapusv" );
    if( driver_glPixelMapusv == NULL ) {
      driver_glPixelMapusv = missing_glPixelMapusv;
    }
    dt.glPixelMapusv = MakeRegalProc(loader_glPixelMapusv,layer);
    _getProcAddress( driver_glPixelStoref, glPixelStoref, "glPixelStoref" );
    if( driver_glPixelStoref == NULL ) {
      driver_glPixelStoref = missing_glPixelStoref;
    }
    dt.glPixelStoref = MakeRegalProc(loader_glPixelStoref,layer);
    _getProcAddress( driver_glPixelStorei, glPixelStorei, "glPixelStorei" );
    if( driver_glPixelStorei == NULL ) {
      driver_glPixelStorei = missing_glPixelStorei;
    }
    dt.glPixelStorei = MakeRegalProc(loader_glPixelStorei,layer);
    _getProcAddress( driver_glPixelTransferf, glPixelTransferf, "glPixelTransferf" );
    if( driver_glPixelTransferf == NULL ) {
      driver_glPixelTransferf = missing_glPixelTransferf;
    }
    dt.glPixelTransferf = MakeRegalProc(loader_glPixelTransferf,layer);
    _getProcAddress( driver_glPixelTransferi, glPixelTransferi, "glPixelTransferi" );
    if( driver_glPixelTransferi == NULL ) {
      driver_glPixelTransferi = missing_glPixelTransferi;
    }
    dt.glPixelTransferi = MakeRegalProc(loader_glPixelTransferi,layer);
    _getProcAddress( driver_glPixelZoom, glPixelZoom, "glPixelZoom" );
    if( driver_glPixelZoom == NULL ) {
      driver_glPixelZoom = missing_glPixelZoom;
    }
    dt.glPixelZoom = MakeRegalProc(loader_glPixelZoom,layer);
    _getProcAddress( driver_glPointSize, glPointSize, "glPointSize" );
    if( driver_glPointSize == NULL ) {
      driver_glPointSize = missing_glPointSize;
    }
    dt.glPointSize = MakeRegalProc(loader_glPointSize,layer);
    _getProcAddress( driver_glPolygonMode, glPolygonMode, "glPolygonMode" );
    if( driver_glPolygonMode == NULL ) {
      driver_glPolygonMode = missing_glPolygonMode;
    }
    dt.glPolygonMode = MakeRegalProc(loader_glPolygonMode,layer);
    _getProcAddress( driver_glPolygonStipple, glPolygonStipple, "glPolygonStipple" );
    if( driver_glPolygonStipple == NULL ) {
      driver_glPolygonStipple = missing_glPolygonStipple;
    }
    dt.glPolygonStipple = MakeRegalProc(loader_glPolygonStipple,layer);
    _getProcAddress( driver_glPopAttrib, glPopAttrib, "glPopAttrib" );
    if( driver_glPopAttrib == NULL ) {
      driver_glPopAttrib = missing_glPopAttrib;
    }
    dt.glPopAttrib = MakeRegalProc(loader_glPopAttrib,layer);
    _getProcAddress( driver_glPopMatrix, glPopMatrix, "glPopMatrix" );
    if( driver_glPopMatrix == NULL ) {
      driver_glPopMatrix = missing_glPopMatrix;
    }
    dt.glPopMatrix = MakeRegalProc(loader_glPopMatrix,layer);
    _getProcAddress( driver_glPopName, glPopName, "glPopName" );
    if( driver_glPopName == NULL ) {
      driver_glPopName = missing_glPopName;
    }
    dt.glPopName = MakeRegalProc(loader_glPopName,layer);
    _getProcAddress( driver_glPushAttrib, glPushAttrib, "glPushAttrib" );
    if( driver_glPushAttrib == NULL ) {
      driver_glPushAttrib = missing_glPushAttrib;
    }
    dt.glPushAttrib = MakeRegalProc(loader_glPushAttrib,layer);
    _getProcAddress( driver_glPushMatrix, glPushMatrix, "glPushMatrix" );
    if( driver_glPushMatrix == NULL ) {
      driver_glPushMatrix = missing_glPushMatrix;
    }
    dt.glPushMatrix = MakeRegalProc(loader_glPushMatrix,layer);
    _getProcAddress( driver_glPushName, glPushName, "glPushName" );
    if( driver_glPushName == NULL ) {
      driver_glPushName = missing_glPushName;
    }
    dt.glPushName = MakeRegalProc(loader_glPushName,layer);
    _getProcAddress( driver_glRasterPos2d, glRasterPos2d, "glRasterPos2d" );
    if( driver_glRasterPos2d == NULL ) {
      driver_glRasterPos2d = missing_glRasterPos2d;
    }
    dt.glRasterPos2d = MakeRegalProc(loader_glRasterPos2d,layer);
    _getProcAddress( driver_glRasterPos2dv, glRasterPos2dv, "glRasterPos2dv" );
    if( driver_glRasterPos2dv == NULL ) {
      driver_glRasterPos2dv = missing_glRasterPos2dv;
    }
    dt.glRasterPos2dv = MakeRegalProc(loader_glRasterPos2dv,layer);
    _getProcAddress( driver_glRasterPos2f, glRasterPos2f, "glRasterPos2f" );
    if( driver_glRasterPos2f == NULL ) {
      driver_glRasterPos2f = missing_glRasterPos2f;
    }
    dt.glRasterPos2f = MakeRegalProc(loader_glRasterPos2f,layer);
    _getProcAddress( driver_glRasterPos2fv, glRasterPos2fv, "glRasterPos2fv" );
    if( driver_glRasterPos2fv == NULL ) {
      driver_glRasterPos2fv = missing_glRasterPos2fv;
    }
    dt.glRasterPos2fv = MakeRegalProc(loader_glRasterPos2fv,layer);
    _getProcAddress( driver_glRasterPos2i, glRasterPos2i, "glRasterPos2i" );
    if( driver_glRasterPos2i == NULL ) {
      driver_glRasterPos2i = missing_glRasterPos2i;
    }
    dt.glRasterPos2i = MakeRegalProc(loader_glRasterPos2i,layer);
    _getProcAddress( driver_glRasterPos2iv, glRasterPos2iv, "glRasterPos2iv" );
    if( driver_glRasterPos2iv == NULL ) {
      driver_glRasterPos2iv = missing_glRasterPos2iv;
    }
    dt.glRasterPos2iv = MakeRegalProc(loader_glRasterPos2iv,layer);
    _getProcAddress( driver_glRasterPos2s, glRasterPos2s, "glRasterPos2s" );
    if( driver_glRasterPos2s == NULL ) {
      driver_glRasterPos2s = missing_glRasterPos2s;
    }
    dt.glRasterPos2s = MakeRegalProc(loader_glRasterPos2s,layer);
    _getProcAddress( driver_glRasterPos2sv, glRasterPos2sv, "glRasterPos2sv" );
    if( driver_glRasterPos2sv == NULL ) {
      driver_glRasterPos2sv = missing_glRasterPos2sv;
    }
    dt.glRasterPos2sv = MakeRegalProc(loader_glRasterPos2sv,layer);
    _getProcAddress( driver_glRasterPos3d, glRasterPos3d, "glRasterPos3d" );
    if( driver_glRasterPos3d == NULL ) {
      driver_glRasterPos3d = missing_glRasterPos3d;
    }
    dt.glRasterPos3d = MakeRegalProc(loader_glRasterPos3d,layer);
    _getProcAddress( driver_glRasterPos3dv, glRasterPos3dv, "glRasterPos3dv" );
    if( driver_glRasterPos3dv == NULL ) {
      driver_glRasterPos3dv = missing_glRasterPos3dv;
    }
    dt.glRasterPos3dv = MakeRegalProc(loader_glRasterPos3dv,layer);
    _getProcAddress( driver_glRasterPos3f, glRasterPos3f, "glRasterPos3f" );
    if( driver_glRasterPos3f == NULL ) {
      driver_glRasterPos3f = missing_glRasterPos3f;
    }
    dt.glRasterPos3f = MakeRegalProc(loader_glRasterPos3f,layer);
    _getProcAddress( driver_glRasterPos3fv, glRasterPos3fv, "glRasterPos3fv" );
    if( driver_glRasterPos3fv == NULL ) {
      driver_glRasterPos3fv = missing_glRasterPos3fv;
    }
    dt.glRasterPos3fv = MakeRegalProc(loader_glRasterPos3fv,layer);
    _getProcAddress( driver_glRasterPos3i, glRasterPos3i, "glRasterPos3i" );
    if( driver_glRasterPos3i == NULL ) {
      driver_glRasterPos3i = missing_glRasterPos3i;
    }
    dt.glRasterPos3i = MakeRegalProc(loader_glRasterPos3i,layer);
    _getProcAddress( driver_glRasterPos3iv, glRasterPos3iv, "glRasterPos3iv" );
    if( driver_glRasterPos3iv == NULL ) {
      driver_glRasterPos3iv = missing_glRasterPos3iv;
    }
    dt.glRasterPos3iv = MakeRegalProc(loader_glRasterPos3iv,layer);
    _getProcAddress( driver_glRasterPos3s, glRasterPos3s, "glRasterPos3s" );
    if( driver_glRasterPos3s == NULL ) {
      driver_glRasterPos3s = missing_glRasterPos3s;
    }
    dt.glRasterPos3s = MakeRegalProc(loader_glRasterPos3s,layer);
    _getProcAddress( driver_glRasterPos3sv, glRasterPos3sv, "glRasterPos3sv" );
    if( driver_glRasterPos3sv == NULL ) {
      driver_glRasterPos3sv = missing_glRasterPos3sv;
    }
    dt.glRasterPos3sv = MakeRegalProc(loader_glRasterPos3sv,layer);
    _getProcAddress( driver_glRasterPos4d, glRasterPos4d, "glRasterPos4d" );
    if( driver_glRasterPos4d == NULL ) {
      driver_glRasterPos4d = missing_glRasterPos4d;
    }
    dt.glRasterPos4d = MakeRegalProc(loader_glRasterPos4d,layer);
    _getProcAddress( driver_glRasterPos4dv, glRasterPos4dv, "glRasterPos4dv" );
    if( driver_glRasterPos4dv == NULL ) {
      driver_glRasterPos4dv = missing_glRasterPos4dv;
    }
    dt.glRasterPos4dv = MakeRegalProc(loader_glRasterPos4dv,layer);
    _getProcAddress( driver_glRasterPos4f, glRasterPos4f, "glRasterPos4f" );
    if( driver_glRasterPos4f == NULL ) {
      driver_glRasterPos4f = missing_glRasterPos4f;
    }
    dt.glRasterPos4f = MakeRegalProc(loader_glRasterPos4f,layer);
    _getProcAddress( driver_glRasterPos4fv, glRasterPos4fv, "glRasterPos4fv" );
    if( driver_glRasterPos4fv == NULL ) {
      driver_glRasterPos4fv = missing_glRasterPos4fv;
    }
    dt.glRasterPos4fv = MakeRegalProc(loader_glRasterPos4fv,layer);
    _getProcAddress( driver_glRasterPos4i, glRasterPos4i, "glRasterPos4i" );
    if( driver_glRasterPos4i == NULL ) {
      driver_glRasterPos4i = missing_glRasterPos4i;
    }
    dt.glRasterPos4i = MakeRegalProc(loader_glRasterPos4i,layer);
    _getProcAddress( driver_glRasterPos4iv, glRasterPos4iv, "glRasterPos4iv" );
    if( driver_glRasterPos4iv == NULL ) {
      driver_glRasterPos4iv = missing_glRasterPos4iv;
    }
    dt.glRasterPos4iv = MakeRegalProc(loader_glRasterPos4iv,layer);
    _getProcAddress( driver_glRasterPos4s, glRasterPos4s, "glRasterPos4s" );
    if( driver_glRasterPos4s == NULL ) {
      driver_glRasterPos4s = missing_glRasterPos4s;
    }
    dt.glRasterPos4s = MakeRegalProc(loader_glRasterPos4s,layer);
    _getProcAddress( driver_glRasterPos4sv, glRasterPos4sv, "glRasterPos4sv" );
    if( driver_glRasterPos4sv == NULL ) {
      driver_glRasterPos4sv = missing_glRasterPos4sv;
    }
    dt.glRasterPos4sv = MakeRegalProc(loader_glRasterPos4sv,layer);
    _getProcAddress( driver_glReadBuffer, glReadBuffer, "glReadBuffer" );
    if( driver_glReadBuffer == NULL ) {
      driver_glReadBuffer = missing_glReadBuffer;
    }
    dt.glReadBuffer = MakeRegalProc(loader_glReadBuffer,layer);
    _getProcAddress( driver_glReadPixels, glReadPixels, "glReadPixels" );
    if( driver_glReadPixels == NULL ) {
      driver_glReadPixels = missing_glReadPixels;
    }
    dt.glReadPixels = MakeRegalProc(loader_glReadPixels,layer);
    _getProcAddress( driver_glRectd, glRectd, "glRectd" );
    if( driver_glRectd == NULL ) {
      driver_glRectd = missing_glRectd;
    }
    dt.glRectd = MakeRegalProc(loader_glRectd,layer);
    _getProcAddress( driver_glRectdv, glRectdv, "glRectdv" );
    if( driver_glRectdv == NULL ) {
      driver_glRectdv = missing_glRectdv;
    }
    dt.glRectdv = MakeRegalProc(loader_glRectdv,layer);
    _getProcAddress( driver_glRectf, glRectf, "glRectf" );
    if( driver_glRectf == NULL ) {
      driver_glRectf = missing_glRectf;
    }
    dt.glRectf = MakeRegalProc(loader_glRectf,layer);
    _getProcAddress( driver_glRectfv, glRectfv, "glRectfv" );
    if( driver_glRectfv == NULL ) {
      driver_glRectfv = missing_glRectfv;
    }
    dt.glRectfv = MakeRegalProc(loader_glRectfv,layer);
    _getProcAddress( driver_glRecti, glRecti, "glRecti" );
    if( driver_glRecti == NULL ) {
      driver_glRecti = missing_glRecti;
    }
    dt.glRecti = MakeRegalProc(loader_glRecti,layer);
    _getProcAddress( driver_glRectiv, glRectiv, "glRectiv" );
    if( driver_glRectiv == NULL ) {
      driver_glRectiv = missing_glRectiv;
    }
    dt.glRectiv = MakeRegalProc(loader_glRectiv,layer);
    _getProcAddress( driver_glRects, glRects, "glRects" );
    if( driver_glRects == NULL ) {
      driver_glRects = missing_glRects;
    }
    dt.glRects = MakeRegalProc(loader_glRects,layer);
    _getProcAddress( driver_glRectsv, glRectsv, "glRectsv" );
    if( driver_glRectsv == NULL ) {
      driver_glRectsv = missing_glRectsv;
    }
    dt.glRectsv = MakeRegalProc(loader_glRectsv,layer);
    _getProcAddress( driver_glRenderMode, glRenderMode, "glRenderMode" );
    if( driver_glRenderMode == NULL ) {
      driver_glRenderMode = missing_glRenderMode;
    }
    dt.glRenderMode = MakeRegalProc(loader_glRenderMode,layer);
    _getProcAddress( driver_glRotated, glRotated, "glRotated" );
    if( driver_glRotated == NULL ) {
      driver_glRotated = missing_glRotated;
    }
    dt.glRotated = MakeRegalProc(loader_glRotated,layer);
    _getProcAddress( driver_glRotatef, glRotatef, "glRotatef" );
    if( driver_glRotatef == NULL ) {
      driver_glRotatef = missing_glRotatef;
    }
    dt.glRotatef = MakeRegalProc(loader_glRotatef,layer);
    _getProcAddress( driver_glScaled, glScaled, "glScaled" );
    if( driver_glScaled == NULL ) {
      driver_glScaled = missing_glScaled;
    }
    dt.glScaled = MakeRegalProc(loader_glScaled,layer);
    _getProcAddress( driver_glScalef, glScalef, "glScalef" );
    if( driver_glScalef == NULL ) {
      driver_glScalef = missing_glScalef;
    }
    dt.glScalef = MakeRegalProc(loader_glScalef,layer);
    _getProcAddress( driver_glScissor, glScissor, "glScissor" );
    if( driver_glScissor == NULL ) {
      driver_glScissor = missing_glScissor;
    }
    dt.glScissor = MakeRegalProc(loader_glScissor,layer);
    _getProcAddress( driver_glSelectBuffer, glSelectBuffer, "glSelectBuffer" );
    if( driver_glSelectBuffer == NULL ) {
      driver_glSelectBuffer = missing_glSelectBuffer;
    }
    dt.glSelectBuffer = MakeRegalProc(loader_glSelectBuffer,layer);
    _getProcAddress( driver_glShadeModel, glShadeModel, "glShadeModel" );
    if( driver_glShadeModel == NULL ) {
      driver_glShadeModel = missing_glShadeModel;
    }
    dt.glShadeModel = MakeRegalProc(loader_glShadeModel,layer);
    _getProcAddress( driver_glStencilFunc, glStencilFunc, "glStencilFunc" );
    if( driver_glStencilFunc == NULL ) {
      driver_glStencilFunc = missing_glStencilFunc;
    }
    dt.glStencilFunc = MakeRegalProc(loader_glStencilFunc,layer);
    _getProcAddress( driver_glStencilMask, glStencilMask, "glStencilMask" );
    if( driver_glStencilMask == NULL ) {
      driver_glStencilMask = missing_glStencilMask;
    }
    dt.glStencilMask = MakeRegalProc(loader_glStencilMask,layer);
    _getProcAddress( driver_glStencilOp, glStencilOp, "glStencilOp" );
    if( driver_glStencilOp == NULL ) {
      driver_glStencilOp = missing_glStencilOp;
    }
    dt.glStencilOp = MakeRegalProc(loader_glStencilOp,layer);
    _getProcAddress( driver_glTexCoord1d, glTexCoord1d, "glTexCoord1d" );
    if( driver_glTexCoord1d == NULL ) {
      driver_glTexCoord1d = missing_glTexCoord1d;
    }
    dt.glTexCoord1d = MakeRegalProc(loader_glTexCoord1d,layer);
    _getProcAddress( driver_glTexCoord1dv, glTexCoord1dv, "glTexCoord1dv" );
    if( driver_glTexCoord1dv == NULL ) {
      driver_glTexCoord1dv = missing_glTexCoord1dv;
    }
    dt.glTexCoord1dv = MakeRegalProc(loader_glTexCoord1dv,layer);
    _getProcAddress( driver_glTexCoord1f, glTexCoord1f, "glTexCoord1f" );
    if( driver_glTexCoord1f == NULL ) {
      driver_glTexCoord1f = missing_glTexCoord1f;
    }
    dt.glTexCoord1f = MakeRegalProc(loader_glTexCoord1f,layer);
    _getProcAddress( driver_glTexCoord1fv, glTexCoord1fv, "glTexCoord1fv" );
    if( driver_glTexCoord1fv == NULL ) {
      driver_glTexCoord1fv = missing_glTexCoord1fv;
    }
    dt.glTexCoord1fv = MakeRegalProc(loader_glTexCoord1fv,layer);
    _getProcAddress( driver_glTexCoord1i, glTexCoord1i, "glTexCoord1i" );
    if( driver_glTexCoord1i == NULL ) {
      driver_glTexCoord1i = missing_glTexCoord1i;
    }
    dt.glTexCoord1i = MakeRegalProc(loader_glTexCoord1i,layer);
    _getProcAddress( driver_glTexCoord1iv, glTexCoord1iv, "glTexCoord1iv" );
    if( driver_glTexCoord1iv == NULL ) {
      driver_glTexCoord1iv = missing_glTexCoord1iv;
    }
    dt.glTexCoord1iv = MakeRegalProc(loader_glTexCoord1iv,layer);
    _getProcAddress( driver_glTexCoord1s, glTexCoord1s, "glTexCoord1s" );
    if( driver_glTexCoord1s == NULL ) {
      driver_glTexCoord1s = missing_glTexCoord1s;
    }
    dt.glTexCoord1s = MakeRegalProc(loader_glTexCoord1s,layer);
    _getProcAddress( driver_glTexCoord1sv, glTexCoord1sv, "glTexCoord1sv" );
    if( driver_glTexCoord1sv == NULL ) {
      driver_glTexCoord1sv = missing_glTexCoord1sv;
    }
    dt.glTexCoord1sv = MakeRegalProc(loader_glTexCoord1sv,layer);
    _getProcAddress( driver_glTexCoord2d, glTexCoord2d, "glTexCoord2d" );
    if( driver_glTexCoord2d == NULL ) {
      driver_glTexCoord2d = missing_glTexCoord2d;
    }
    dt.glTexCoord2d = MakeRegalProc(loader_glTexCoord2d,layer);
    _getProcAddress( driver_glTexCoord2dv, glTexCoord2dv, "glTexCoord2dv" );
    if( driver_glTexCoord2dv == NULL ) {
      driver_glTexCoord2dv = missing_glTexCoord2dv;
    }
    dt.glTexCoord2dv = MakeRegalProc(loader_glTexCoord2dv,layer);
    _getProcAddress( driver_glTexCoord2f, glTexCoord2f, "glTexCoord2f" );
    if( driver_glTexCoord2f == NULL ) {
      driver_glTexCoord2f = missing_glTexCoord2f;
    }
    dt.glTexCoord2f = MakeRegalProc(loader_glTexCoord2f,layer);
    _getProcAddress( driver_glTexCoord2fv, glTexCoord2fv, "glTexCoord2fv" );
    if( driver_glTexCoord2fv == NULL ) {
      driver_glTexCoord2fv = missing_glTexCoord2fv;
    }
    dt.glTexCoord2fv = MakeRegalProc(loader_glTexCoord2fv,layer);
    _getProcAddress( driver_glTexCoord2i, glTexCoord2i, "glTexCoord2i" );
    if( driver_glTexCoord2i == NULL ) {
      driver_glTexCoord2i = missing_glTexCoord2i;
    }
    dt.glTexCoord2i = MakeRegalProc(loader_glTexCoord2i,layer);
    _getProcAddress( driver_glTexCoord2iv, glTexCoord2iv, "glTexCoord2iv" );
    if( driver_glTexCoord2iv == NULL ) {
      driver_glTexCoord2iv = missing_glTexCoord2iv;
    }
    dt.glTexCoord2iv = MakeRegalProc(loader_glTexCoord2iv,layer);
    _getProcAddress( driver_glTexCoord2s, glTexCoord2s, "glTexCoord2s" );
    if( driver_glTexCoord2s == NULL ) {
      driver_glTexCoord2s = missing_glTexCoord2s;
    }
    dt.glTexCoord2s = MakeRegalProc(loader_glTexCoord2s,layer);
    _getProcAddress( driver_glTexCoord2sv, glTexCoord2sv, "glTexCoord2sv" );
    if( driver_glTexCoord2sv == NULL ) {
      driver_glTexCoord2sv = missing_glTexCoord2sv;
    }
    dt.glTexCoord2sv = MakeRegalProc(loader_glTexCoord2sv,layer);
    _getProcAddress( driver_glTexCoord3d, glTexCoord3d, "glTexCoord3d" );
    if( driver_glTexCoord3d == NULL ) {
      driver_glTexCoord3d = missing_glTexCoord3d;
    }
    dt.glTexCoord3d = MakeRegalProc(loader_glTexCoord3d,layer);
    _getProcAddress( driver_glTexCoord3dv, glTexCoord3dv, "glTexCoord3dv" );
    if( driver_glTexCoord3dv == NULL ) {
      driver_glTexCoord3dv = missing_glTexCoord3dv;
    }
    dt.glTexCoord3dv = MakeRegalProc(loader_glTexCoord3dv,layer);
    _getProcAddress( driver_glTexCoord3f, glTexCoord3f, "glTexCoord3f" );
    if( driver_glTexCoord3f == NULL ) {
      driver_glTexCoord3f = missing_glTexCoord3f;
    }
    dt.glTexCoord3f = MakeRegalProc(loader_glTexCoord3f,layer);
    _getProcAddress( driver_glTexCoord3fv, glTexCoord3fv, "glTexCoord3fv" );
    if( driver_glTexCoord3fv == NULL ) {
      driver_glTexCoord3fv = missing_glTexCoord3fv;
    }
    dt.glTexCoord3fv = MakeRegalProc(loader_glTexCoord3fv,layer);
    _getProcAddress( driver_glTexCoord3i, glTexCoord3i, "glTexCoord3i" );
    if( driver_glTexCoord3i == NULL ) {
      driver_glTexCoord3i = missing_glTexCoord3i;
    }
    dt.glTexCoord3i = MakeRegalProc(loader_glTexCoord3i,layer);
    _getProcAddress( driver_glTexCoord3iv, glTexCoord3iv, "glTexCoord3iv" );
    if( driver_glTexCoord3iv == NULL ) {
      driver_glTexCoord3iv = missing_glTexCoord3iv;
    }
    dt.glTexCoord3iv = MakeRegalProc(loader_glTexCoord3iv,layer);
    _getProcAddress( driver_glTexCoord3s, glTexCoord3s, "glTexCoord3s" );
    if( driver_glTexCoord3s == NULL ) {
      driver_glTexCoord3s = missing_glTexCoord3s;
    }
    dt.glTexCoord3s = MakeRegalProc(loader_glTexCoord3s,layer);
    _getProcAddress( driver_glTexCoord3sv, glTexCoord3sv, "glTexCoord3sv" );
    if( driver_glTexCoord3sv == NULL ) {
      driver_glTexCoord3sv = missing_glTexCoord3sv;
    }
    dt.glTexCoord3sv = MakeRegalProc(loader_glTexCoord3sv,layer);
    _getProcAddress( driver_glTexCoord4d, glTexCoord4d, "glTexCoord4d" );
    if( driver_glTexCoord4d == NULL ) {
      driver_glTexCoord4d = missing_glTexCoord4d;
    }
    dt.glTexCoord4d = MakeRegalProc(loader_glTexCoord4d,layer);
    _getProcAddress( driver_glTexCoord4dv, glTexCoord4dv, "glTexCoord4dv" );
    if( driver_glTexCoord4dv == NULL ) {
      driver_glTexCoord4dv = missing_glTexCoord4dv;
    }
    dt.glTexCoord4dv = MakeRegalProc(loader_glTexCoord4dv,layer);
    _getProcAddress( driver_glTexCoord4f, glTexCoord4f, "glTexCoord4f" );
    if( driver_glTexCoord4f == NULL ) {
      driver_glTexCoord4f = missing_glTexCoord4f;
    }
    dt.glTexCoord4f = MakeRegalProc(loader_glTexCoord4f,layer);
    _getProcAddress( driver_glTexCoord4fv, glTexCoord4fv, "glTexCoord4fv" );
    if( driver_glTexCoord4fv == NULL ) {
      driver_glTexCoord4fv = missing_glTexCoord4fv;
    }
    dt.glTexCoord4fv = MakeRegalProc(loader_glTexCoord4fv,layer);
    _getProcAddress( driver_glTexCoord4i, glTexCoord4i, "glTexCoord4i" );
    if( driver_glTexCoord4i == NULL ) {
      driver_glTexCoord4i = missing_glTexCoord4i;
    }
    dt.glTexCoord4i = MakeRegalProc(loader_glTexCoord4i,layer);
    _getProcAddress( driver_glTexCoord4iv, glTexCoord4iv, "glTexCoord4iv" );
    if( driver_glTexCoord4iv == NULL ) {
      driver_glTexCoord4iv = missing_glTexCoord4iv;
    }
    dt.glTexCoord4iv = MakeRegalProc(loader_glTexCoord4iv,layer);
    _getProcAddress( driver_glTexCoord4s, glTexCoord4s, "glTexCoord4s" );
    if( driver_glTexCoord4s == NULL ) {
      driver_glTexCoord4s = missing_glTexCoord4s;
    }
    dt.glTexCoord4s = MakeRegalProc(loader_glTexCoord4s,layer);
    _getProcAddress( driver_glTexCoord4sv, glTexCoord4sv, "glTexCoord4sv" );
    if( driver_glTexCoord4sv == NULL ) {
      driver_glTexCoord4sv = missing_glTexCoord4sv;
    }
    dt.glTexCoord4sv = MakeRegalProc(loader_glTexCoord4sv,layer);
    _getProcAddress( driver_glTexEnvf, glTexEnvf, "glTexEnvf" );
    if( driver_glTexEnvf == NULL ) {
      driver_glTexEnvf = missing_glTexEnvf;
    }
    dt.glTexEnvf = MakeRegalProc(loader_glTexEnvf,layer);
    _getProcAddress( driver_glTexEnvfv, glTexEnvfv, "glTexEnvfv" );
    if( driver_glTexEnvfv == NULL ) {
      driver_glTexEnvfv = missing_glTexEnvfv;
    }
    dt.glTexEnvfv = MakeRegalProc(loader_glTexEnvfv,layer);
    _getProcAddress( driver_glTexEnvi, glTexEnvi, "glTexEnvi" );
    if( driver_glTexEnvi == NULL ) {
      driver_glTexEnvi = missing_glTexEnvi;
    }
    dt.glTexEnvi = MakeRegalProc(loader_glTexEnvi,layer);
    _getProcAddress( driver_glTexEnviv, glTexEnviv, "glTexEnviv" );
    if( driver_glTexEnviv == NULL ) {
      driver_glTexEnviv = missing_glTexEnviv;
    }
    dt.glTexEnviv = MakeRegalProc(loader_glTexEnviv,layer);
    _getProcAddress( driver_glTexGend, glTexGend, "glTexGend" );
    if( driver_glTexGend == NULL ) {
      driver_glTexGend = missing_glTexGend;
    }
    dt.glTexGend = MakeRegalProc(loader_glTexGend,layer);
    _getProcAddress( driver_glTexGendv, glTexGendv, "glTexGendv" );
    if( driver_glTexGendv == NULL ) {
      driver_glTexGendv = missing_glTexGendv;
    }
    dt.glTexGendv = MakeRegalProc(loader_glTexGendv,layer);
    _getProcAddress( driver_glTexGenf, glTexGenf, "glTexGenf" );
    if( driver_glTexGenf == NULL ) {
      driver_glTexGenf = missing_glTexGenf;
    }
    dt.glTexGenf = MakeRegalProc(loader_glTexGenf,layer);
    _getProcAddress( driver_glTexGenfv, glTexGenfv, "glTexGenfv" );
    if( driver_glTexGenfv == NULL ) {
      driver_glTexGenfv = missing_glTexGenfv;
    }
    dt.glTexGenfv = MakeRegalProc(loader_glTexGenfv,layer);
    _getProcAddress( driver_glTexGeni, glTexGeni, "glTexGeni" );
    if( driver_glTexGeni == NULL ) {
      driver_glTexGeni = missing_glTexGeni;
    }
    dt.glTexGeni = MakeRegalProc(loader_glTexGeni,layer);
    _getProcAddress( driver_glTexGeniv, glTexGeniv, "glTexGeniv" );
    if( driver_glTexGeniv == NULL ) {
      driver_glTexGeniv = missing_glTexGeniv;
    }
    dt.glTexGeniv = MakeRegalProc(loader_glTexGeniv,layer);
    _getProcAddress( driver_glTexImage1D, glTexImage1D, "glTexImage1D" );
    if( driver_glTexImage1D == NULL ) {
      driver_glTexImage1D = missing_glTexImage1D;
    }
    dt.glTexImage1D = MakeRegalProc(loader_glTexImage1D,layer);
    _getProcAddress( driver_glTexImage2D, glTexImage2D, "glTexImage2D" );
    if( driver_glTexImage2D == NULL ) {
      driver_glTexImage2D = missing_glTexImage2D;
    }
    dt.glTexImage2D = MakeRegalProc(loader_glTexImage2D,layer);
    _getProcAddress( driver_glTexParameterf, glTexParameterf, "glTexParameterf" );
    if( driver_glTexParameterf == NULL ) {
      driver_glTexParameterf = missing_glTexParameterf;
    }
    dt.glTexParameterf = MakeRegalProc(loader_glTexParameterf,layer);
    _getProcAddress( driver_glTexParameterfv, glTexParameterfv, "glTexParameterfv" );
    if( driver_glTexParameterfv == NULL ) {
      driver_glTexParameterfv = missing_glTexParameterfv;
    }
    dt.glTexParameterfv = MakeRegalProc(loader_glTexParameterfv,layer);
    _getProcAddress( driver_glTexParameteri, glTexParameteri, "glTexParameteri" );
    if( driver_glTexParameteri == NULL ) {
      driver_glTexParameteri = missing_glTexParameteri;
    }
    dt.glTexParameteri = MakeRegalProc(loader_glTexParameteri,layer);
    _getProcAddress( driver_glTexParameteriv, glTexParameteriv, "glTexParameteriv" );
    if( driver_glTexParameteriv == NULL ) {
      driver_glTexParameteriv = missing_glTexParameteriv;
    }
    dt.glTexParameteriv = MakeRegalProc(loader_glTexParameteriv,layer);
    _getProcAddress( driver_glTranslated, glTranslated, "glTranslated" );
    if( driver_glTranslated == NULL ) {
      driver_glTranslated = missing_glTranslated;
    }
    dt.glTranslated = MakeRegalProc(loader_glTranslated,layer);
    _getProcAddress( driver_glTranslatef, glTranslatef, "glTranslatef" );
    if( driver_glTranslatef == NULL ) {
      driver_glTranslatef = missing_glTranslatef;
    }
    dt.glTranslatef = MakeRegalProc(loader_glTranslatef,layer);
    _getProcAddress( driver_glVertex2d, glVertex2d, "glVertex2d" );
    if( driver_glVertex2d == NULL ) {
      driver_glVertex2d = missing_glVertex2d;
    }
    dt.glVertex2d = MakeRegalProc(loader_glVertex2d,layer);
    _getProcAddress( driver_glVertex2dv, glVertex2dv, "glVertex2dv" );
    if( driver_glVertex2dv == NULL ) {
      driver_glVertex2dv = missing_glVertex2dv;
    }
    dt.glVertex2dv = MakeRegalProc(loader_glVertex2dv,layer);
    _getProcAddress( driver_glVertex2f, glVertex2f, "glVertex2f" );
    if( driver_glVertex2f == NULL ) {
      driver_glVertex2f = missing_glVertex2f;
    }
    dt.glVertex2f = MakeRegalProc(loader_glVertex2f,layer);
    _getProcAddress( driver_glVertex2fv, glVertex2fv, "glVertex2fv" );
    if( driver_glVertex2fv == NULL ) {
      driver_glVertex2fv = missing_glVertex2fv;
    }
    dt.glVertex2fv = MakeRegalProc(loader_glVertex2fv,layer);
    _getProcAddress( driver_glVertex2i, glVertex2i, "glVertex2i" );
    if( driver_glVertex2i == NULL ) {
      driver_glVertex2i = missing_glVertex2i;
    }
    dt.glVertex2i = MakeRegalProc(loader_glVertex2i,layer);
    _getProcAddress( driver_glVertex2iv, glVertex2iv, "glVertex2iv" );
    if( driver_glVertex2iv == NULL ) {
      driver_glVertex2iv = missing_glVertex2iv;
    }
    dt.glVertex2iv = MakeRegalProc(loader_glVertex2iv,layer);
    _getProcAddress( driver_glVertex2s, glVertex2s, "glVertex2s" );
    if( driver_glVertex2s == NULL ) {
      driver_glVertex2s = missing_glVertex2s;
    }
    dt.glVertex2s = MakeRegalProc(loader_glVertex2s,layer);
    _getProcAddress( driver_glVertex2sv, glVertex2sv, "glVertex2sv" );
    if( driver_glVertex2sv == NULL ) {
      driver_glVertex2sv = missing_glVertex2sv;
    }
    dt.glVertex2sv = MakeRegalProc(loader_glVertex2sv,layer);
    _getProcAddress( driver_glVertex3d, glVertex3d, "glVertex3d" );
    if( driver_glVertex3d == NULL ) {
      driver_glVertex3d = missing_glVertex3d;
    }
    dt.glVertex3d = MakeRegalProc(loader_glVertex3d,layer);
    _getProcAddress( driver_glVertex3dv, glVertex3dv, "glVertex3dv" );
    if( driver_glVertex3dv == NULL ) {
      driver_glVertex3dv = missing_glVertex3dv;
    }
    dt.glVertex3dv = MakeRegalProc(loader_glVertex3dv,layer);
    _getProcAddress( driver_glVertex3f, glVertex3f, "glVertex3f" );
    if( driver_glVertex3f == NULL ) {
      driver_glVertex3f = missing_glVertex3f;
    }
    dt.glVertex3f = MakeRegalProc(loader_glVertex3f,layer);
    _getProcAddress( driver_glVertex3fv, glVertex3fv, "glVertex3fv" );
    if( driver_glVertex3fv == NULL ) {
      driver_glVertex3fv = missing_glVertex3fv;
    }
    dt.glVertex3fv = MakeRegalProc(loader_glVertex3fv,layer);
    _getProcAddress( driver_glVertex3i, glVertex3i, "glVertex3i" );
    if( driver_glVertex3i == NULL ) {
      driver_glVertex3i = missing_glVertex3i;
    }
    dt.glVertex3i = MakeRegalProc(loader_glVertex3i,layer);
    _getProcAddress( driver_glVertex3iv, glVertex3iv, "glVertex3iv" );
    if( driver_glVertex3iv == NULL ) {
      driver_glVertex3iv = missing_glVertex3iv;
    }
    dt.glVertex3iv = MakeRegalProc(loader_glVertex3iv,layer);
    _getProcAddress( driver_glVertex3s, glVertex3s, "glVertex3s" );
    if( driver_glVertex3s == NULL ) {
      driver_glVertex3s = missing_glVertex3s;
    }
    dt.glVertex3s = MakeRegalProc(loader_glVertex3s,layer);
    _getProcAddress( driver_glVertex3sv, glVertex3sv, "glVertex3sv" );
    if( driver_glVertex3sv == NULL ) {
      driver_glVertex3sv = missing_glVertex3sv;
    }
    dt.glVertex3sv = MakeRegalProc(loader_glVertex3sv,layer);
    _getProcAddress( driver_glVertex4d, glVertex4d, "glVertex4d" );
    if( driver_glVertex4d == NULL ) {
      driver_glVertex4d = missing_glVertex4d;
    }
    dt.glVertex4d = MakeRegalProc(loader_glVertex4d,layer);
    _getProcAddress( driver_glVertex4dv, glVertex4dv, "glVertex4dv" );
    if( driver_glVertex4dv == NULL ) {
      driver_glVertex4dv = missing_glVertex4dv;
    }
    dt.glVertex4dv = MakeRegalProc(loader_glVertex4dv,layer);
    _getProcAddress( driver_glVertex4f, glVertex4f, "glVertex4f" );
    if( driver_glVertex4f == NULL ) {
      driver_glVertex4f = missing_glVertex4f;
    }
    dt.glVertex4f = MakeRegalProc(loader_glVertex4f,layer);
    _getProcAddress( driver_glVertex4fv, glVertex4fv, "glVertex4fv" );
    if( driver_glVertex4fv == NULL ) {
      driver_glVertex4fv = missing_glVertex4fv;
    }
    dt.glVertex4fv = MakeRegalProc(loader_glVertex4fv,layer);
    _getProcAddress( driver_glVertex4i, glVertex4i, "glVertex4i" );
    if( driver_glVertex4i == NULL ) {
      driver_glVertex4i = missing_glVertex4i;
    }
    dt.glVertex4i = MakeRegalProc(loader_glVertex4i,layer);
    _getProcAddress( driver_glVertex4iv, glVertex4iv, "glVertex4iv" );
    if( driver_glVertex4iv == NULL ) {
      driver_glVertex4iv = missing_glVertex4iv;
    }
    dt.glVertex4iv = MakeRegalProc(loader_glVertex4iv,layer);
    _getProcAddress( driver_glVertex4s, glVertex4s, "glVertex4s" );
    if( driver_glVertex4s == NULL ) {
      driver_glVertex4s = missing_glVertex4s;
    }
    dt.glVertex4s = MakeRegalProc(loader_glVertex4s,layer);
    _getProcAddress( driver_glVertex4sv, glVertex4sv, "glVertex4sv" );
    if( driver_glVertex4sv == NULL ) {
      driver_glVertex4sv = missing_glVertex4sv;
    }
    dt.glVertex4sv = MakeRegalProc(loader_glVertex4sv,layer);
    _getProcAddress( driver_glViewport, glViewport, "glViewport" );
    if( driver_glViewport == NULL ) {
      driver_glViewport = missing_glViewport;
    }
    dt.glViewport = MakeRegalProc(loader_glViewport,layer);

    // GL_VERSION_1_1

    _getProcAddress( driver_glAreTexturesResident, glAreTexturesResident, "glAreTexturesResident" );
    if( driver_glAreTexturesResident == NULL ) {
      driver_glAreTexturesResident = missing_glAreTexturesResident;
    }
    dt.glAreTexturesResident = MakeRegalProc(loader_glAreTexturesResident,layer);
    _getProcAddress( driver_glArrayElement, glArrayElement, "glArrayElement" );
    if( driver_glArrayElement == NULL ) {
      driver_glArrayElement = missing_glArrayElement;
    }
    dt.glArrayElement = MakeRegalProc(loader_glArrayElement,layer);
    _getProcAddress( driver_glBindTexture, glBindTexture, "glBindTexture" );
    if( driver_glBindTexture == NULL ) {
      driver_glBindTexture = missing_glBindTexture;
    }
    dt.glBindTexture = MakeRegalProc(loader_glBindTexture,layer);
    _getProcAddress( driver_glColorPointer, glColorPointer, "glColorPointer" );
    if( driver_glColorPointer == NULL ) {
      driver_glColorPointer = missing_glColorPointer;
    }
    dt.glColorPointer = MakeRegalProc(loader_glColorPointer,layer);
    _getProcAddress( driver_glCopyTexImage1D, glCopyTexImage1D, "glCopyTexImage1D" );
    if( driver_glCopyTexImage1D == NULL ) {
      driver_glCopyTexImage1D = missing_glCopyTexImage1D;
    }
    dt.glCopyTexImage1D = MakeRegalProc(loader_glCopyTexImage1D,layer);
    _getProcAddress( driver_glCopyTexImage2D, glCopyTexImage2D, "glCopyTexImage2D" );
    if( driver_glCopyTexImage2D == NULL ) {
      driver_glCopyTexImage2D = missing_glCopyTexImage2D;
    }
    dt.glCopyTexImage2D = MakeRegalProc(loader_glCopyTexImage2D,layer);
    _getProcAddress( driver_glCopyTexSubImage1D, glCopyTexSubImage1D, "glCopyTexSubImage1D" );
    if( driver_glCopyTexSubImage1D == NULL ) {
      driver_glCopyTexSubImage1D = missing_glCopyTexSubImage1D;
    }
    dt.glCopyTexSubImage1D = MakeRegalProc(loader_glCopyTexSubImage1D,layer);
    _getProcAddress( driver_glCopyTexSubImage2D, glCopyTexSubImage2D, "glCopyTexSubImage2D" );
    if( driver_glCopyTexSubImage2D == NULL ) {
      driver_glCopyTexSubImage2D = missing_glCopyTexSubImage2D;
    }
    dt.glCopyTexSubImage2D = MakeRegalProc(loader_glCopyTexSubImage2D,layer);
    _getProcAddress( driver_glDeleteTextures, glDeleteTextures, "glDeleteTextures" );
    if( driver_glDeleteTextures == NULL ) {
      driver_glDeleteTextures = missing_glDeleteTextures;
    }
    dt.glDeleteTextures = MakeRegalProc(loader_glDeleteTextures,layer);
    _getProcAddress( driver_glDisableClientState, glDisableClientState, "glDisableClientState" );
    if( driver_glDisableClientState == NULL ) {
      driver_glDisableClientState = missing_glDisableClientState;
    }
    dt.glDisableClientState = MakeRegalProc(loader_glDisableClientState,layer);
    _getProcAddress( driver_glDrawArrays, glDrawArrays, "glDrawArrays" );
    if( driver_glDrawArrays == NULL ) {
      driver_glDrawArrays = missing_glDrawArrays;
    }
    dt.glDrawArrays = MakeRegalProc(loader_glDrawArrays,layer);
    _getProcAddress( driver_glDrawElements, glDrawElements, "glDrawElements" );
    if( driver_glDrawElements == NULL ) {
      driver_glDrawElements = missing_glDrawElements;
    }
    dt.glDrawElements = MakeRegalProc(loader_glDrawElements,layer);
    _getProcAddress( driver_glEdgeFlagPointer, glEdgeFlagPointer, "glEdgeFlagPointer" );
    if( driver_glEdgeFlagPointer == NULL ) {
      driver_glEdgeFlagPointer = missing_glEdgeFlagPointer;
    }
    dt.glEdgeFlagPointer = MakeRegalProc(loader_glEdgeFlagPointer,layer);
    _getProcAddress( driver_glEnableClientState, glEnableClientState, "glEnableClientState" );
    if( driver_glEnableClientState == NULL ) {
      driver_glEnableClientState = missing_glEnableClientState;
    }
    dt.glEnableClientState = MakeRegalProc(loader_glEnableClientState,layer);
    _getProcAddress( driver_glGenTextures, glGenTextures, "glGenTextures" );
    if( driver_glGenTextures == NULL ) {
      driver_glGenTextures = missing_glGenTextures;
    }
    dt.glGenTextures = MakeRegalProc(loader_glGenTextures,layer);
    _getProcAddress( driver_glGetPointerv, glGetPointerv, "glGetPointerv" );
    if( driver_glGetPointerv == NULL ) {
      driver_glGetPointerv = missing_glGetPointerv;
    }
    dt.glGetPointerv = MakeRegalProc(loader_glGetPointerv,layer);
    _getProcAddress( driver_glIndexPointer, glIndexPointer, "glIndexPointer" );
    if( driver_glIndexPointer == NULL ) {
      driver_glIndexPointer = missing_glIndexPointer;
    }
    dt.glIndexPointer = MakeRegalProc(loader_glIndexPointer,layer);
    _getProcAddress( driver_glIndexub, glIndexub, "glIndexub" );
    if( driver_glIndexub == NULL ) {
      driver_glIndexub = missing_glIndexub;
    }
    dt.glIndexub = MakeRegalProc(loader_glIndexub,layer);
    _getProcAddress( driver_glIndexubv, glIndexubv, "glIndexubv" );
    if( driver_glIndexubv == NULL ) {
      driver_glIndexubv = missing_glIndexubv;
    }
    dt.glIndexubv = MakeRegalProc(loader_glIndexubv,layer);
    _getProcAddress( driver_glInterleavedArrays, glInterleavedArrays, "glInterleavedArrays" );
    if( driver_glInterleavedArrays == NULL ) {
      driver_glInterleavedArrays = missing_glInterleavedArrays;
    }
    dt.glInterleavedArrays = MakeRegalProc(loader_glInterleavedArrays,layer);
    _getProcAddress( driver_glIsTexture, glIsTexture, "glIsTexture" );
    if( driver_glIsTexture == NULL ) {
      driver_glIsTexture = missing_glIsTexture;
    }
    dt.glIsTexture = MakeRegalProc(loader_glIsTexture,layer);
    _getProcAddress( driver_glNormalPointer, glNormalPointer, "glNormalPointer" );
    if( driver_glNormalPointer == NULL ) {
      driver_glNormalPointer = missing_glNormalPointer;
    }
    dt.glNormalPointer = MakeRegalProc(loader_glNormalPointer,layer);
    _getProcAddress( driver_glPolygonOffset, glPolygonOffset, "glPolygonOffset" );
    if( driver_glPolygonOffset == NULL ) {
      driver_glPolygonOffset = missing_glPolygonOffset;
    }
    dt.glPolygonOffset = MakeRegalProc(loader_glPolygonOffset,layer);
    _getProcAddress( driver_glPopClientAttrib, glPopClientAttrib, "glPopClientAttrib" );
    if( driver_glPopClientAttrib == NULL ) {
      driver_glPopClientAttrib = missing_glPopClientAttrib;
    }
    dt.glPopClientAttrib = MakeRegalProc(loader_glPopClientAttrib,layer);
    _getProcAddress( driver_glPrioritizeTextures, glPrioritizeTextures, "glPrioritizeTextures" );
    if( driver_glPrioritizeTextures == NULL ) {
      driver_glPrioritizeTextures = missing_glPrioritizeTextures;
    }
    dt.glPrioritizeTextures = MakeRegalProc(loader_glPrioritizeTextures,layer);
    _getProcAddress( driver_glPushClientAttrib, glPushClientAttrib, "glPushClientAttrib" );
    if( driver_glPushClientAttrib == NULL ) {
      driver_glPushClientAttrib = missing_glPushClientAttrib;
    }
    dt.glPushClientAttrib = MakeRegalProc(loader_glPushClientAttrib,layer);
    _getProcAddress( driver_glTexCoordPointer, glTexCoordPointer, "glTexCoordPointer" );
    if( driver_glTexCoordPointer == NULL ) {
      driver_glTexCoordPointer = missing_glTexCoordPointer;
    }
    dt.glTexCoordPointer = MakeRegalProc(loader_glTexCoordPointer,layer);
    _getProcAddress( driver_glTexSubImage1D, glTexSubImage1D, "glTexSubImage1D" );
    if( driver_glTexSubImage1D == NULL ) {
      driver_glTexSubImage1D = missing_glTexSubImage1D;
    }
    dt.glTexSubImage1D = MakeRegalProc(loader_glTexSubImage1D,layer);
    _getProcAddress( driver_glTexSubImage2D, glTexSubImage2D, "glTexSubImage2D" );
    if( driver_glTexSubImage2D == NULL ) {
      driver_glTexSubImage2D = missing_glTexSubImage2D;
    }
    dt.glTexSubImage2D = MakeRegalProc(loader_glTexSubImage2D,layer);
    _getProcAddress( driver_glVertexPointer, glVertexPointer, "glVertexPointer" );
    if( driver_glVertexPointer == NULL ) {
      driver_glVertexPointer = missing_glVertexPointer;
    }
    dt.glVertexPointer = MakeRegalProc(loader_glVertexPointer,layer);

    // GL_VERSION_1_2

    _getProcAddress( driver_glBlendColor, glBlendColor, "glBlendColor" );
    if( driver_glBlendColor == NULL ) {
      driver_glBlendColor = missing_glBlendColor;
    }
    dt.glBlendColor = MakeRegalProc(loader_glBlendColor,layer);
    _getProcAddress( driver_glBlendEquation, glBlendEquation, "glBlendEquation" );
    if( driver_glBlendEquation == NULL ) {
      driver_glBlendEquation = missing_glBlendEquation;
    }
    dt.glBlendEquation = MakeRegalProc(loader_glBlendEquation,layer);
    _getProcAddress( driver_glCopyTexSubImage3D, glCopyTexSubImage3D, "glCopyTexSubImage3D" );
    if( driver_glCopyTexSubImage3D == NULL ) {
      driver_glCopyTexSubImage3D = missing_glCopyTexSubImage3D;
    }
    dt.glCopyTexSubImage3D = MakeRegalProc(loader_glCopyTexSubImage3D,layer);
    _getProcAddress( driver_glDrawRangeElements, glDrawRangeElements, "glDrawRangeElements" );
    if( driver_glDrawRangeElements == NULL ) {
      driver_glDrawRangeElements = missing_glDrawRangeElements;
    }
    dt.glDrawRangeElements = MakeRegalProc(loader_glDrawRangeElements,layer);
    _getProcAddress( driver_glTexImage3D, glTexImage3D, "glTexImage3D" );
    if( driver_glTexImage3D == NULL ) {
      driver_glTexImage3D = missing_glTexImage3D;
    }
    dt.glTexImage3D = MakeRegalProc(loader_glTexImage3D,layer);
    _getProcAddress( driver_glTexSubImage3D, glTexSubImage3D, "glTexSubImage3D" );
    if( driver_glTexSubImage3D == NULL ) {
      driver_glTexSubImage3D = missing_glTexSubImage3D;
    }
    dt.glTexSubImage3D = MakeRegalProc(loader_glTexSubImage3D,layer);

    // GL_VERSION_1_3

    _getProcAddress( driver_glActiveTexture, glActiveTexture, "glActiveTexture" );
    if( driver_glActiveTexture == NULL ) {
      driver_glActiveTexture = missing_glActiveTexture;
    }
    dt.glActiveTexture = MakeRegalProc(loader_glActiveTexture,layer);
    _getProcAddress( driver_glClientActiveTexture, glClientActiveTexture, "glClientActiveTexture" );
    if( driver_glClientActiveTexture == NULL ) {
      driver_glClientActiveTexture = missing_glClientActiveTexture;
    }
    dt.glClientActiveTexture = MakeRegalProc(loader_glClientActiveTexture,layer);
    _getProcAddress( driver_glCompressedTexImage1D, glCompressedTexImage1D, "glCompressedTexImage1D" );
    if( driver_glCompressedTexImage1D == NULL ) {
      driver_glCompressedTexImage1D = missing_glCompressedTexImage1D;
    }
    dt.glCompressedTexImage1D = MakeRegalProc(loader_glCompressedTexImage1D,layer);
    _getProcAddress( driver_glCompressedTexImage2D, glCompressedTexImage2D, "glCompressedTexImage2D" );
    if( driver_glCompressedTexImage2D == NULL ) {
      driver_glCompressedTexImage2D = missing_glCompressedTexImage2D;
    }
    dt.glCompressedTexImage2D = MakeRegalProc(loader_glCompressedTexImage2D,layer);
    _getProcAddress( driver_glCompressedTexImage3D, glCompressedTexImage3D, "glCompressedTexImage3D" );
    if( driver_glCompressedTexImage3D == NULL ) {
      driver_glCompressedTexImage3D = missing_glCompressedTexImage3D;
    }
    dt.glCompressedTexImage3D = MakeRegalProc(loader_glCompressedTexImage3D,layer);
    _getProcAddress( driver_glCompressedTexSubImage1D, glCompressedTexSubImage1D, "glCompressedTexSubImage1D" );
    if( driver_glCompressedTexSubImage1D == NULL ) {
      driver_glCompressedTexSubImage1D = missing_glCompressedTexSubImage1D;
    }
    dt.glCompressedTexSubImage1D = MakeRegalProc(loader_glCompressedTexSubImage1D,layer);
    _getProcAddress( driver_glCompressedTexSubImage2D, glCompressedTexSubImage2D, "glCompressedTexSubImage2D" );
    if( driver_glCompressedTexSubImage2D == NULL ) {
      driver_glCompressedTexSubImage2D = missing_glCompressedTexSubImage2D;
    }
    dt.glCompressedTexSubImage2D = MakeRegalProc(loader_glCompressedTexSubImage2D,layer);
    _getProcAddress( driver_glCompressedTexSubImage3D, glCompressedTexSubImage3D, "glCompressedTexSubImage3D" );
    if( driver_glCompressedTexSubImage3D == NULL ) {
      driver_glCompressedTexSubImage3D = missing_glCompressedTexSubImage3D;
    }
    dt.glCompressedTexSubImage3D = MakeRegalProc(loader_glCompressedTexSubImage3D,layer);
    _getProcAddress( driver_glGetCompressedTexImage, glGetCompressedTexImage, "glGetCompressedTexImage" );
    if( driver_glGetCompressedTexImage == NULL ) {
      driver_glGetCompressedTexImage = missing_glGetCompressedTexImage;
    }
    dt.glGetCompressedTexImage = MakeRegalProc(loader_glGetCompressedTexImage,layer);
    _getProcAddress( driver_glLoadTransposeMatrixd, glLoadTransposeMatrixd, "glLoadTransposeMatrixd" );
    if( driver_glLoadTransposeMatrixd == NULL ) {
      driver_glLoadTransposeMatrixd = missing_glLoadTransposeMatrixd;
    }
    dt.glLoadTransposeMatrixd = MakeRegalProc(loader_glLoadTransposeMatrixd,layer);
    _getProcAddress( driver_glLoadTransposeMatrixf, glLoadTransposeMatrixf, "glLoadTransposeMatrixf" );
    if( driver_glLoadTransposeMatrixf == NULL ) {
      driver_glLoadTransposeMatrixf = missing_glLoadTransposeMatrixf;
    }
    dt.glLoadTransposeMatrixf = MakeRegalProc(loader_glLoadTransposeMatrixf,layer);
    _getProcAddress( driver_glMultTransposeMatrixd, glMultTransposeMatrixd, "glMultTransposeMatrixd" );
    if( driver_glMultTransposeMatrixd == NULL ) {
      driver_glMultTransposeMatrixd = missing_glMultTransposeMatrixd;
    }
    dt.glMultTransposeMatrixd = MakeRegalProc(loader_glMultTransposeMatrixd,layer);
    _getProcAddress( driver_glMultTransposeMatrixf, glMultTransposeMatrixf, "glMultTransposeMatrixf" );
    if( driver_glMultTransposeMatrixf == NULL ) {
      driver_glMultTransposeMatrixf = missing_glMultTransposeMatrixf;
    }
    dt.glMultTransposeMatrixf = MakeRegalProc(loader_glMultTransposeMatrixf,layer);
    _getProcAddress( driver_glMultiTexCoord1d, glMultiTexCoord1d, "glMultiTexCoord1d" );
    if( driver_glMultiTexCoord1d == NULL ) {
      driver_glMultiTexCoord1d = missing_glMultiTexCoord1d;
    }
    dt.glMultiTexCoord1d = MakeRegalProc(loader_glMultiTexCoord1d,layer);
    _getProcAddress( driver_glMultiTexCoord1dv, glMultiTexCoord1dv, "glMultiTexCoord1dv" );
    if( driver_glMultiTexCoord1dv == NULL ) {
      driver_glMultiTexCoord1dv = missing_glMultiTexCoord1dv;
    }
    dt.glMultiTexCoord1dv = MakeRegalProc(loader_glMultiTexCoord1dv,layer);
    _getProcAddress( driver_glMultiTexCoord1f, glMultiTexCoord1f, "glMultiTexCoord1f" );
    if( driver_glMultiTexCoord1f == NULL ) {
      driver_glMultiTexCoord1f = missing_glMultiTexCoord1f;
    }
    dt.glMultiTexCoord1f = MakeRegalProc(loader_glMultiTexCoord1f,layer);
    _getProcAddress( driver_glMultiTexCoord1fv, glMultiTexCoord1fv, "glMultiTexCoord1fv" );
    if( driver_glMultiTexCoord1fv == NULL ) {
      driver_glMultiTexCoord1fv = missing_glMultiTexCoord1fv;
    }
    dt.glMultiTexCoord1fv = MakeRegalProc(loader_glMultiTexCoord1fv,layer);
    _getProcAddress( driver_glMultiTexCoord1i, glMultiTexCoord1i, "glMultiTexCoord1i" );
    if( driver_glMultiTexCoord1i == NULL ) {
      driver_glMultiTexCoord1i = missing_glMultiTexCoord1i;
    }
    dt.glMultiTexCoord1i = MakeRegalProc(loader_glMultiTexCoord1i,layer);
    _getProcAddress( driver_glMultiTexCoord1iv, glMultiTexCoord1iv, "glMultiTexCoord1iv" );
    if( driver_glMultiTexCoord1iv == NULL ) {
      driver_glMultiTexCoord1iv = missing_glMultiTexCoord1iv;
    }
    dt.glMultiTexCoord1iv = MakeRegalProc(loader_glMultiTexCoord1iv,layer);
    _getProcAddress( driver_glMultiTexCoord1s, glMultiTexCoord1s, "glMultiTexCoord1s" );
    if( driver_glMultiTexCoord1s == NULL ) {
      driver_glMultiTexCoord1s = missing_glMultiTexCoord1s;
    }
    dt.glMultiTexCoord1s = MakeRegalProc(loader_glMultiTexCoord1s,layer);
    _getProcAddress( driver_glMultiTexCoord1sv, glMultiTexCoord1sv, "glMultiTexCoord1sv" );
    if( driver_glMultiTexCoord1sv == NULL ) {
      driver_glMultiTexCoord1sv = missing_glMultiTexCoord1sv;
    }
    dt.glMultiTexCoord1sv = MakeRegalProc(loader_glMultiTexCoord1sv,layer);
    _getProcAddress( driver_glMultiTexCoord2d, glMultiTexCoord2d, "glMultiTexCoord2d" );
    if( driver_glMultiTexCoord2d == NULL ) {
      driver_glMultiTexCoord2d = missing_glMultiTexCoord2d;
    }
    dt.glMultiTexCoord2d = MakeRegalProc(loader_glMultiTexCoord2d,layer);
    _getProcAddress( driver_glMultiTexCoord2dv, glMultiTexCoord2dv, "glMultiTexCoord2dv" );
    if( driver_glMultiTexCoord2dv == NULL ) {
      driver_glMultiTexCoord2dv = missing_glMultiTexCoord2dv;
    }
    dt.glMultiTexCoord2dv = MakeRegalProc(loader_glMultiTexCoord2dv,layer);
    _getProcAddress( driver_glMultiTexCoord2f, glMultiTexCoord2f, "glMultiTexCoord2f" );
    if( driver_glMultiTexCoord2f == NULL ) {
      driver_glMultiTexCoord2f = missing_glMultiTexCoord2f;
    }
    dt.glMultiTexCoord2f = MakeRegalProc(loader_glMultiTexCoord2f,layer);
    _getProcAddress( driver_glMultiTexCoord2fv, glMultiTexCoord2fv, "glMultiTexCoord2fv" );
    if( driver_glMultiTexCoord2fv == NULL ) {
      driver_glMultiTexCoord2fv = missing_glMultiTexCoord2fv;
    }
    dt.glMultiTexCoord2fv = MakeRegalProc(loader_glMultiTexCoord2fv,layer);
    _getProcAddress( driver_glMultiTexCoord2i, glMultiTexCoord2i, "glMultiTexCoord2i" );
    if( driver_glMultiTexCoord2i == NULL ) {
      driver_glMultiTexCoord2i = missing_glMultiTexCoord2i;
    }
    dt.glMultiTexCoord2i = MakeRegalProc(loader_glMultiTexCoord2i,layer);
    _getProcAddress( driver_glMultiTexCoord2iv, glMultiTexCoord2iv, "glMultiTexCoord2iv" );
    if( driver_glMultiTexCoord2iv == NULL ) {
      driver_glMultiTexCoord2iv = missing_glMultiTexCoord2iv;
    }
    dt.glMultiTexCoord2iv = MakeRegalProc(loader_glMultiTexCoord2iv,layer);
    _getProcAddress( driver_glMultiTexCoord2s, glMultiTexCoord2s, "glMultiTexCoord2s" );
    if( driver_glMultiTexCoord2s == NULL ) {
      driver_glMultiTexCoord2s = missing_glMultiTexCoord2s;
    }
    dt.glMultiTexCoord2s = MakeRegalProc(loader_glMultiTexCoord2s,layer);
    _getProcAddress( driver_glMultiTexCoord2sv, glMultiTexCoord2sv, "glMultiTexCoord2sv" );
    if( driver_glMultiTexCoord2sv == NULL ) {
      driver_glMultiTexCoord2sv = missing_glMultiTexCoord2sv;
    }
    dt.glMultiTexCoord2sv = MakeRegalProc(loader_glMultiTexCoord2sv,layer);
    _getProcAddress( driver_glMultiTexCoord3d, glMultiTexCoord3d, "glMultiTexCoord3d" );
    if( driver_glMultiTexCoord3d == NULL ) {
      driver_glMultiTexCoord3d = missing_glMultiTexCoord3d;
    }
    dt.glMultiTexCoord3d = MakeRegalProc(loader_glMultiTexCoord3d,layer);
    _getProcAddress( driver_glMultiTexCoord3dv, glMultiTexCoord3dv, "glMultiTexCoord3dv" );
    if( driver_glMultiTexCoord3dv == NULL ) {
      driver_glMultiTexCoord3dv = missing_glMultiTexCoord3dv;
    }
    dt.glMultiTexCoord3dv = MakeRegalProc(loader_glMultiTexCoord3dv,layer);
    _getProcAddress( driver_glMultiTexCoord3f, glMultiTexCoord3f, "glMultiTexCoord3f" );
    if( driver_glMultiTexCoord3f == NULL ) {
      driver_glMultiTexCoord3f = missing_glMultiTexCoord3f;
    }
    dt.glMultiTexCoord3f = MakeRegalProc(loader_glMultiTexCoord3f,layer);
    _getProcAddress( driver_glMultiTexCoord3fv, glMultiTexCoord3fv, "glMultiTexCoord3fv" );
    if( driver_glMultiTexCoord3fv == NULL ) {
      driver_glMultiTexCoord3fv = missing_glMultiTexCoord3fv;
    }
    dt.glMultiTexCoord3fv = MakeRegalProc(loader_glMultiTexCoord3fv,layer);
    _getProcAddress( driver_glMultiTexCoord3i, glMultiTexCoord3i, "glMultiTexCoord3i" );
    if( driver_glMultiTexCoord3i == NULL ) {
      driver_glMultiTexCoord3i = missing_glMultiTexCoord3i;
    }
    dt.glMultiTexCoord3i = MakeRegalProc(loader_glMultiTexCoord3i,layer);
    _getProcAddress( driver_glMultiTexCoord3iv, glMultiTexCoord3iv, "glMultiTexCoord3iv" );
    if( driver_glMultiTexCoord3iv == NULL ) {
      driver_glMultiTexCoord3iv = missing_glMultiTexCoord3iv;
    }
    dt.glMultiTexCoord3iv = MakeRegalProc(loader_glMultiTexCoord3iv,layer);
    _getProcAddress( driver_glMultiTexCoord3s, glMultiTexCoord3s, "glMultiTexCoord3s" );
    if( driver_glMultiTexCoord3s == NULL ) {
      driver_glMultiTexCoord3s = missing_glMultiTexCoord3s;
    }
    dt.glMultiTexCoord3s = MakeRegalProc(loader_glMultiTexCoord3s,layer);
    _getProcAddress( driver_glMultiTexCoord3sv, glMultiTexCoord3sv, "glMultiTexCoord3sv" );
    if( driver_glMultiTexCoord3sv == NULL ) {
      driver_glMultiTexCoord3sv = missing_glMultiTexCoord3sv;
    }
    dt.glMultiTexCoord3sv = MakeRegalProc(loader_glMultiTexCoord3sv,layer);
    _getProcAddress( driver_glMultiTexCoord4d, glMultiTexCoord4d, "glMultiTexCoord4d" );
    if( driver_glMultiTexCoord4d == NULL ) {
      driver_glMultiTexCoord4d = missing_glMultiTexCoord4d;
    }
    dt.glMultiTexCoord4d = MakeRegalProc(loader_glMultiTexCoord4d,layer);
    _getProcAddress( driver_glMultiTexCoord4dv, glMultiTexCoord4dv, "glMultiTexCoord4dv" );
    if( driver_glMultiTexCoord4dv == NULL ) {
      driver_glMultiTexCoord4dv = missing_glMultiTexCoord4dv;
    }
    dt.glMultiTexCoord4dv = MakeRegalProc(loader_glMultiTexCoord4dv,layer);
    _getProcAddress( driver_glMultiTexCoord4f, glMultiTexCoord4f, "glMultiTexCoord4f" );
    if( driver_glMultiTexCoord4f == NULL ) {
      driver_glMultiTexCoord4f = missing_glMultiTexCoord4f;
    }
    dt.glMultiTexCoord4f = MakeRegalProc(loader_glMultiTexCoord4f,layer);
    _getProcAddress( driver_glMultiTexCoord4fv, glMultiTexCoord4fv, "glMultiTexCoord4fv" );
    if( driver_glMultiTexCoord4fv == NULL ) {
      driver_glMultiTexCoord4fv = missing_glMultiTexCoord4fv;
    }
    dt.glMultiTexCoord4fv = MakeRegalProc(loader_glMultiTexCoord4fv,layer);
    _getProcAddress( driver_glMultiTexCoord4i, glMultiTexCoord4i, "glMultiTexCoord4i" );
    if( driver_glMultiTexCoord4i == NULL ) {
      driver_glMultiTexCoord4i = missing_glMultiTexCoord4i;
    }
    dt.glMultiTexCoord4i = MakeRegalProc(loader_glMultiTexCoord4i,layer);
    _getProcAddress( driver_glMultiTexCoord4iv, glMultiTexCoord4iv, "glMultiTexCoord4iv" );
    if( driver_glMultiTexCoord4iv == NULL ) {
      driver_glMultiTexCoord4iv = missing_glMultiTexCoord4iv;
    }
    dt.glMultiTexCoord4iv = MakeRegalProc(loader_glMultiTexCoord4iv,layer);
    _getProcAddress( driver_glMultiTexCoord4s, glMultiTexCoord4s, "glMultiTexCoord4s" );
    if( driver_glMultiTexCoord4s == NULL ) {
      driver_glMultiTexCoord4s = missing_glMultiTexCoord4s;
    }
    dt.glMultiTexCoord4s = MakeRegalProc(loader_glMultiTexCoord4s,layer);
    _getProcAddress( driver_glMultiTexCoord4sv, glMultiTexCoord4sv, "glMultiTexCoord4sv" );
    if( driver_glMultiTexCoord4sv == NULL ) {
      driver_glMultiTexCoord4sv = missing_glMultiTexCoord4sv;
    }
    dt.glMultiTexCoord4sv = MakeRegalProc(loader_glMultiTexCoord4sv,layer);
    _getProcAddress( driver_glSampleCoverage, glSampleCoverage, "glSampleCoverage" );
    if( driver_glSampleCoverage == NULL ) {
      driver_glSampleCoverage = missing_glSampleCoverage;
    }
    dt.glSampleCoverage = MakeRegalProc(loader_glSampleCoverage,layer);

    // GL_VERSION_1_4

    _getProcAddress( driver_glBlendFuncSeparate, glBlendFuncSeparate, "glBlendFuncSeparate" );
    if( driver_glBlendFuncSeparate == NULL ) {
      driver_glBlendFuncSeparate = missing_glBlendFuncSeparate;
    }
    dt.glBlendFuncSeparate = MakeRegalProc(loader_glBlendFuncSeparate,layer);
    _getProcAddress( driver_glFogCoordPointer, glFogCoordPointer, "glFogCoordPointer" );
    if( driver_glFogCoordPointer == NULL ) {
      driver_glFogCoordPointer = missing_glFogCoordPointer;
    }
    dt.glFogCoordPointer = MakeRegalProc(loader_glFogCoordPointer,layer);
    _getProcAddress( driver_glFogCoordd, glFogCoordd, "glFogCoordd" );
    if( driver_glFogCoordd == NULL ) {
      driver_glFogCoordd = missing_glFogCoordd;
    }
    dt.glFogCoordd = MakeRegalProc(loader_glFogCoordd,layer);
    _getProcAddress( driver_glFogCoorddv, glFogCoorddv, "glFogCoorddv" );
    if( driver_glFogCoorddv == NULL ) {
      driver_glFogCoorddv = missing_glFogCoorddv;
    }
    dt.glFogCoorddv = MakeRegalProc(loader_glFogCoorddv,layer);
    _getProcAddress( driver_glFogCoordf, glFogCoordf, "glFogCoordf" );
    if( driver_glFogCoordf == NULL ) {
      driver_glFogCoordf = missing_glFogCoordf;
    }
    dt.glFogCoordf = MakeRegalProc(loader_glFogCoordf,layer);
    _getProcAddress( driver_glFogCoordfv, glFogCoordfv, "glFogCoordfv" );
    if( driver_glFogCoordfv == NULL ) {
      driver_glFogCoordfv = missing_glFogCoordfv;
    }
    dt.glFogCoordfv = MakeRegalProc(loader_glFogCoordfv,layer);
    _getProcAddress( driver_glMultiDrawArrays, glMultiDrawArrays, "glMultiDrawArrays" );
    if( driver_glMultiDrawArrays == NULL ) {
      driver_glMultiDrawArrays = missing_glMultiDrawArrays;
    }
    dt.glMultiDrawArrays = MakeRegalProc(loader_glMultiDrawArrays,layer);
    _getProcAddress( driver_glMultiDrawElements, glMultiDrawElements, "glMultiDrawElements" );
    if( driver_glMultiDrawElements == NULL ) {
      driver_glMultiDrawElements = missing_glMultiDrawElements;
    }
    dt.glMultiDrawElements = MakeRegalProc(loader_glMultiDrawElements,layer);
    _getProcAddress( driver_glPointParameterf, glPointParameterf, "glPointParameterf" );
    if( driver_glPointParameterf == NULL ) {
      driver_glPointParameterf = missing_glPointParameterf;
    }
    dt.glPointParameterf = MakeRegalProc(loader_glPointParameterf,layer);
    _getProcAddress( driver_glPointParameterfv, glPointParameterfv, "glPointParameterfv" );
    if( driver_glPointParameterfv == NULL ) {
      driver_glPointParameterfv = missing_glPointParameterfv;
    }
    dt.glPointParameterfv = MakeRegalProc(loader_glPointParameterfv,layer);
    _getProcAddress( driver_glPointParameteri, glPointParameteri, "glPointParameteri" );
    if( driver_glPointParameteri == NULL ) {
      driver_glPointParameteri = missing_glPointParameteri;
    }
    dt.glPointParameteri = MakeRegalProc(loader_glPointParameteri,layer);
    _getProcAddress( driver_glPointParameteriv, glPointParameteriv, "glPointParameteriv" );
    if( driver_glPointParameteriv == NULL ) {
      driver_glPointParameteriv = missing_glPointParameteriv;
    }
    dt.glPointParameteriv = MakeRegalProc(loader_glPointParameteriv,layer);
    _getProcAddress( driver_glSecondaryColor3b, glSecondaryColor3b, "glSecondaryColor3b" );
    if( driver_glSecondaryColor3b == NULL ) {
      driver_glSecondaryColor3b = missing_glSecondaryColor3b;
    }
    dt.glSecondaryColor3b = MakeRegalProc(loader_glSecondaryColor3b,layer);
    _getProcAddress( driver_glSecondaryColor3bv, glSecondaryColor3bv, "glSecondaryColor3bv" );
    if( driver_glSecondaryColor3bv == NULL ) {
      driver_glSecondaryColor3bv = missing_glSecondaryColor3bv;
    }
    dt.glSecondaryColor3bv = MakeRegalProc(loader_glSecondaryColor3bv,layer);
    _getProcAddress( driver_glSecondaryColor3d, glSecondaryColor3d, "glSecondaryColor3d" );
    if( driver_glSecondaryColor3d == NULL ) {
      driver_glSecondaryColor3d = missing_glSecondaryColor3d;
    }
    dt.glSecondaryColor3d = MakeRegalProc(loader_glSecondaryColor3d,layer);
    _getProcAddress( driver_glSecondaryColor3dv, glSecondaryColor3dv, "glSecondaryColor3dv" );
    if( driver_glSecondaryColor3dv == NULL ) {
      driver_glSecondaryColor3dv = missing_glSecondaryColor3dv;
    }
    dt.glSecondaryColor3dv = MakeRegalProc(loader_glSecondaryColor3dv,layer);
    _getProcAddress( driver_glSecondaryColor3f, glSecondaryColor3f, "glSecondaryColor3f" );
    if( driver_glSecondaryColor3f == NULL ) {
      driver_glSecondaryColor3f = missing_glSecondaryColor3f;
    }
    dt.glSecondaryColor3f = MakeRegalProc(loader_glSecondaryColor3f,layer);
    _getProcAddress( driver_glSecondaryColor3fv, glSecondaryColor3fv, "glSecondaryColor3fv" );
    if( driver_glSecondaryColor3fv == NULL ) {
      driver_glSecondaryColor3fv = missing_glSecondaryColor3fv;
    }
    dt.glSecondaryColor3fv = MakeRegalProc(loader_glSecondaryColor3fv,layer);
    _getProcAddress( driver_glSecondaryColor3i, glSecondaryColor3i, "glSecondaryColor3i" );
    if( driver_glSecondaryColor3i == NULL ) {
      driver_glSecondaryColor3i = missing_glSecondaryColor3i;
    }
    dt.glSecondaryColor3i = MakeRegalProc(loader_glSecondaryColor3i,layer);
    _getProcAddress( driver_glSecondaryColor3iv, glSecondaryColor3iv, "glSecondaryColor3iv" );
    if( driver_glSecondaryColor3iv == NULL ) {
      driver_glSecondaryColor3iv = missing_glSecondaryColor3iv;
    }
    dt.glSecondaryColor3iv = MakeRegalProc(loader_glSecondaryColor3iv,layer);
    _getProcAddress( driver_glSecondaryColor3s, glSecondaryColor3s, "glSecondaryColor3s" );
    if( driver_glSecondaryColor3s == NULL ) {
      driver_glSecondaryColor3s = missing_glSecondaryColor3s;
    }
    dt.glSecondaryColor3s = MakeRegalProc(loader_glSecondaryColor3s,layer);
    _getProcAddress( driver_glSecondaryColor3sv, glSecondaryColor3sv, "glSecondaryColor3sv" );
    if( driver_glSecondaryColor3sv == NULL ) {
      driver_glSecondaryColor3sv = missing_glSecondaryColor3sv;
    }
    dt.glSecondaryColor3sv = MakeRegalProc(loader_glSecondaryColor3sv,layer);
    _getProcAddress( driver_glSecondaryColor3ub, glSecondaryColor3ub, "glSecondaryColor3ub" );
    if( driver_glSecondaryColor3ub == NULL ) {
      driver_glSecondaryColor3ub = missing_glSecondaryColor3ub;
    }
    dt.glSecondaryColor3ub = MakeRegalProc(loader_glSecondaryColor3ub,layer);
    _getProcAddress( driver_glSecondaryColor3ubv, glSecondaryColor3ubv, "glSecondaryColor3ubv" );
    if( driver_glSecondaryColor3ubv == NULL ) {
      driver_glSecondaryColor3ubv = missing_glSecondaryColor3ubv;
    }
    dt.glSecondaryColor3ubv = MakeRegalProc(loader_glSecondaryColor3ubv,layer);
    _getProcAddress( driver_glSecondaryColor3ui, glSecondaryColor3ui, "glSecondaryColor3ui" );
    if( driver_glSecondaryColor3ui == NULL ) {
      driver_glSecondaryColor3ui = missing_glSecondaryColor3ui;
    }
    dt.glSecondaryColor3ui = MakeRegalProc(loader_glSecondaryColor3ui,layer);
    _getProcAddress( driver_glSecondaryColor3uiv, glSecondaryColor3uiv, "glSecondaryColor3uiv" );
    if( driver_glSecondaryColor3uiv == NULL ) {
      driver_glSecondaryColor3uiv = missing_glSecondaryColor3uiv;
    }
    dt.glSecondaryColor3uiv = MakeRegalProc(loader_glSecondaryColor3uiv,layer);
    _getProcAddress( driver_glSecondaryColor3us, glSecondaryColor3us, "glSecondaryColor3us" );
    if( driver_glSecondaryColor3us == NULL ) {
      driver_glSecondaryColor3us = missing_glSecondaryColor3us;
    }
    dt.glSecondaryColor3us = MakeRegalProc(loader_glSecondaryColor3us,layer);
    _getProcAddress( driver_glSecondaryColor3usv, glSecondaryColor3usv, "glSecondaryColor3usv" );
    if( driver_glSecondaryColor3usv == NULL ) {
      driver_glSecondaryColor3usv = missing_glSecondaryColor3usv;
    }
    dt.glSecondaryColor3usv = MakeRegalProc(loader_glSecondaryColor3usv,layer);
    _getProcAddress( driver_glSecondaryColorPointer, glSecondaryColorPointer, "glSecondaryColorPointer" );
    if( driver_glSecondaryColorPointer == NULL ) {
      driver_glSecondaryColorPointer = missing_glSecondaryColorPointer;
    }
    dt.glSecondaryColorPointer = MakeRegalProc(loader_glSecondaryColorPointer,layer);
    _getProcAddress( driver_glWindowPos2d, glWindowPos2d, "glWindowPos2d" );
    if( driver_glWindowPos2d == NULL ) {
      driver_glWindowPos2d = missing_glWindowPos2d;
    }
    dt.glWindowPos2d = MakeRegalProc(loader_glWindowPos2d,layer);
    _getProcAddress( driver_glWindowPos2dv, glWindowPos2dv, "glWindowPos2dv" );
    if( driver_glWindowPos2dv == NULL ) {
      driver_glWindowPos2dv = missing_glWindowPos2dv;
    }
    dt.glWindowPos2dv = MakeRegalProc(loader_glWindowPos2dv,layer);
    _getProcAddress( driver_glWindowPos2f, glWindowPos2f, "glWindowPos2f" );
    if( driver_glWindowPos2f == NULL ) {
      driver_glWindowPos2f = missing_glWindowPos2f;
    }
    dt.glWindowPos2f = MakeRegalProc(loader_glWindowPos2f,layer);
    _getProcAddress( driver_glWindowPos2fv, glWindowPos2fv, "glWindowPos2fv" );
    if( driver_glWindowPos2fv == NULL ) {
      driver_glWindowPos2fv = missing_glWindowPos2fv;
    }
    dt.glWindowPos2fv = MakeRegalProc(loader_glWindowPos2fv,layer);
    _getProcAddress( driver_glWindowPos2i, glWindowPos2i, "glWindowPos2i" );
    if( driver_glWindowPos2i == NULL ) {
      driver_glWindowPos2i = missing_glWindowPos2i;
    }
    dt.glWindowPos2i = MakeRegalProc(loader_glWindowPos2i,layer);
    _getProcAddress( driver_glWindowPos2iv, glWindowPos2iv, "glWindowPos2iv" );
    if( driver_glWindowPos2iv == NULL ) {
      driver_glWindowPos2iv = missing_glWindowPos2iv;
    }
    dt.glWindowPos2iv = MakeRegalProc(loader_glWindowPos2iv,layer);
    _getProcAddress( driver_glWindowPos2s, glWindowPos2s, "glWindowPos2s" );
    if( driver_glWindowPos2s == NULL ) {
      driver_glWindowPos2s = missing_glWindowPos2s;
    }
    dt.glWindowPos2s = MakeRegalProc(loader_glWindowPos2s,layer);
    _getProcAddress( driver_glWindowPos2sv, glWindowPos2sv, "glWindowPos2sv" );
    if( driver_glWindowPos2sv == NULL ) {
      driver_glWindowPos2sv = missing_glWindowPos2sv;
    }
    dt.glWindowPos2sv = MakeRegalProc(loader_glWindowPos2sv,layer);
    _getProcAddress( driver_glWindowPos3d, glWindowPos3d, "glWindowPos3d" );
    if( driver_glWindowPos3d == NULL ) {
      driver_glWindowPos3d = missing_glWindowPos3d;
    }
    dt.glWindowPos3d = MakeRegalProc(loader_glWindowPos3d,layer);
    _getProcAddress( driver_glWindowPos3dv, glWindowPos3dv, "glWindowPos3dv" );
    if( driver_glWindowPos3dv == NULL ) {
      driver_glWindowPos3dv = missing_glWindowPos3dv;
    }
    dt.glWindowPos3dv = MakeRegalProc(loader_glWindowPos3dv,layer);
    _getProcAddress( driver_glWindowPos3f, glWindowPos3f, "glWindowPos3f" );
    if( driver_glWindowPos3f == NULL ) {
      driver_glWindowPos3f = missing_glWindowPos3f;
    }
    dt.glWindowPos3f = MakeRegalProc(loader_glWindowPos3f,layer);
    _getProcAddress( driver_glWindowPos3fv, glWindowPos3fv, "glWindowPos3fv" );
    if( driver_glWindowPos3fv == NULL ) {
      driver_glWindowPos3fv = missing_glWindowPos3fv;
    }
    dt.glWindowPos3fv = MakeRegalProc(loader_glWindowPos3fv,layer);
    _getProcAddress( driver_glWindowPos3i, glWindowPos3i, "glWindowPos3i" );
    if( driver_glWindowPos3i == NULL ) {
      driver_glWindowPos3i = missing_glWindowPos3i;
    }
    dt.glWindowPos3i = MakeRegalProc(loader_glWindowPos3i,layer);
    _getProcAddress( driver_glWindowPos3iv, glWindowPos3iv, "glWindowPos3iv" );
    if( driver_glWindowPos3iv == NULL ) {
      driver_glWindowPos3iv = missing_glWindowPos3iv;
    }
    dt.glWindowPos3iv = MakeRegalProc(loader_glWindowPos3iv,layer);
    _getProcAddress( driver_glWindowPos3s, glWindowPos3s, "glWindowPos3s" );
    if( driver_glWindowPos3s == NULL ) {
      driver_glWindowPos3s = missing_glWindowPos3s;
    }
    dt.glWindowPos3s = MakeRegalProc(loader_glWindowPos3s,layer);
    _getProcAddress( driver_glWindowPos3sv, glWindowPos3sv, "glWindowPos3sv" );
    if( driver_glWindowPos3sv == NULL ) {
      driver_glWindowPos3sv = missing_glWindowPos3sv;
    }
    dt.glWindowPos3sv = MakeRegalProc(loader_glWindowPos3sv,layer);

    // GL_VERSION_1_5

    _getProcAddress( driver_glBeginQuery, glBeginQuery, "glBeginQuery" );
    if( driver_glBeginQuery == NULL ) {
      driver_glBeginQuery = missing_glBeginQuery;
    }
    dt.glBeginQuery = MakeRegalProc(loader_glBeginQuery,layer);
    _getProcAddress( driver_glBindBuffer, glBindBuffer, "glBindBuffer" );
    if( driver_glBindBuffer == NULL ) {
      driver_glBindBuffer = missing_glBindBuffer;
    }
    dt.glBindBuffer = MakeRegalProc(loader_glBindBuffer,layer);
    _getProcAddress( driver_glBufferData, glBufferData, "glBufferData" );
    if( driver_glBufferData == NULL ) {
      driver_glBufferData = missing_glBufferData;
    }
    dt.glBufferData = MakeRegalProc(loader_glBufferData,layer);
    _getProcAddress( driver_glBufferSubData, glBufferSubData, "glBufferSubData" );
    if( driver_glBufferSubData == NULL ) {
      driver_glBufferSubData = missing_glBufferSubData;
    }
    dt.glBufferSubData = MakeRegalProc(loader_glBufferSubData,layer);
    _getProcAddress( driver_glDeleteBuffers, glDeleteBuffers, "glDeleteBuffers" );
    if( driver_glDeleteBuffers == NULL ) {
      driver_glDeleteBuffers = missing_glDeleteBuffers;
    }
    dt.glDeleteBuffers = MakeRegalProc(loader_glDeleteBuffers,layer);
    _getProcAddress( driver_glDeleteQueries, glDeleteQueries, "glDeleteQueries" );
    if( driver_glDeleteQueries == NULL ) {
      driver_glDeleteQueries = missing_glDeleteQueries;
    }
    dt.glDeleteQueries = MakeRegalProc(loader_glDeleteQueries,layer);
    _getProcAddress( driver_glEndQuery, glEndQuery, "glEndQuery" );
    if( driver_glEndQuery == NULL ) {
      driver_glEndQuery = missing_glEndQuery;
    }
    dt.glEndQuery = MakeRegalProc(loader_glEndQuery,layer);
    _getProcAddress( driver_glGenBuffers, glGenBuffers, "glGenBuffers" );
    if( driver_glGenBuffers == NULL ) {
      driver_glGenBuffers = missing_glGenBuffers;
    }
    dt.glGenBuffers = MakeRegalProc(loader_glGenBuffers,layer);
    _getProcAddress( driver_glGenQueries, glGenQueries, "glGenQueries" );
    if( driver_glGenQueries == NULL ) {
      driver_glGenQueries = missing_glGenQueries;
    }
    dt.glGenQueries = MakeRegalProc(loader_glGenQueries,layer);
    _getProcAddress( driver_glGetBufferParameteriv, glGetBufferParameteriv, "glGetBufferParameteriv" );
    if( driver_glGetBufferParameteriv == NULL ) {
      driver_glGetBufferParameteriv = missing_glGetBufferParameteriv;
    }
    dt.glGetBufferParameteriv = MakeRegalProc(loader_glGetBufferParameteriv,layer);
    _getProcAddress( driver_glGetBufferPointerv, glGetBufferPointerv, "glGetBufferPointerv" );
    if( driver_glGetBufferPointerv == NULL ) {
      driver_glGetBufferPointerv = missing_glGetBufferPointerv;
    }
    dt.glGetBufferPointerv = MakeRegalProc(loader_glGetBufferPointerv,layer);
    _getProcAddress( driver_glGetBufferSubData, glGetBufferSubData, "glGetBufferSubData" );
    if( driver_glGetBufferSubData == NULL ) {
      driver_glGetBufferSubData = missing_glGetBufferSubData;
    }
    dt.glGetBufferSubData = MakeRegalProc(loader_glGetBufferSubData,layer);
    _getProcAddress( driver_glGetQueryObjectiv, glGetQueryObjectiv, "glGetQueryObjectiv" );
    if( driver_glGetQueryObjectiv == NULL ) {
      driver_glGetQueryObjectiv = missing_glGetQueryObjectiv;
    }
    dt.glGetQueryObjectiv = MakeRegalProc(loader_glGetQueryObjectiv,layer);
    _getProcAddress( driver_glGetQueryObjectuiv, glGetQueryObjectuiv, "glGetQueryObjectuiv" );
    if( driver_glGetQueryObjectuiv == NULL ) {
      driver_glGetQueryObjectuiv = missing_glGetQueryObjectuiv;
    }
    dt.glGetQueryObjectuiv = MakeRegalProc(loader_glGetQueryObjectuiv,layer);
    _getProcAddress( driver_glGetQueryiv, glGetQueryiv, "glGetQueryiv" );
    if( driver_glGetQueryiv == NULL ) {
      driver_glGetQueryiv = missing_glGetQueryiv;
    }
    dt.glGetQueryiv = MakeRegalProc(loader_glGetQueryiv,layer);
    _getProcAddress( driver_glIsBuffer, glIsBuffer, "glIsBuffer" );
    if( driver_glIsBuffer == NULL ) {
      driver_glIsBuffer = missing_glIsBuffer;
    }
    dt.glIsBuffer = MakeRegalProc(loader_glIsBuffer,layer);
    _getProcAddress( driver_glIsQuery, glIsQuery, "glIsQuery" );
    if( driver_glIsQuery == NULL ) {
      driver_glIsQuery = missing_glIsQuery;
    }
    dt.glIsQuery = MakeRegalProc(loader_glIsQuery,layer);
    _getProcAddress( driver_glMapBuffer, glMapBuffer, "glMapBuffer" );
    if( driver_glMapBuffer == NULL ) {
      driver_glMapBuffer = missing_glMapBuffer;
    }
    dt.glMapBuffer = MakeRegalProc(loader_glMapBuffer,layer);
    _getProcAddress( driver_glUnmapBuffer, glUnmapBuffer, "glUnmapBuffer" );
    if( driver_glUnmapBuffer == NULL ) {
      driver_glUnmapBuffer = missing_glUnmapBuffer;
    }
    dt.glUnmapBuffer = MakeRegalProc(loader_glUnmapBuffer,layer);

    // GL_VERSION_2_0

    _getProcAddress( driver_glAttachShader, glAttachShader, "glAttachShader" );
    if( driver_glAttachShader == NULL ) {
      driver_glAttachShader = missing_glAttachShader;
    }
    dt.glAttachShader = MakeRegalProc(loader_glAttachShader,layer);
    _getProcAddress( driver_glBindAttribLocation, glBindAttribLocation, "glBindAttribLocation" );
    if( driver_glBindAttribLocation == NULL ) {
      driver_glBindAttribLocation = missing_glBindAttribLocation;
    }
    dt.glBindAttribLocation = MakeRegalProc(loader_glBindAttribLocation,layer);
    _getProcAddress( driver_glBlendEquationSeparate, glBlendEquationSeparate, "glBlendEquationSeparate" );
    if( driver_glBlendEquationSeparate == NULL ) {
      driver_glBlendEquationSeparate = missing_glBlendEquationSeparate;
    }
    dt.glBlendEquationSeparate = MakeRegalProc(loader_glBlendEquationSeparate,layer);
    _getProcAddress( driver_glCompileShader, glCompileShader, "glCompileShader" );
    if( driver_glCompileShader == NULL ) {
      driver_glCompileShader = missing_glCompileShader;
    }
    dt.glCompileShader = MakeRegalProc(loader_glCompileShader,layer);
    _getProcAddress( driver_glCreateProgram, glCreateProgram, "glCreateProgram" );
    if( driver_glCreateProgram == NULL ) {
      driver_glCreateProgram = missing_glCreateProgram;
    }
    dt.glCreateProgram = MakeRegalProc(loader_glCreateProgram,layer);
    _getProcAddress( driver_glCreateShader, glCreateShader, "glCreateShader" );
    if( driver_glCreateShader == NULL ) {
      driver_glCreateShader = missing_glCreateShader;
    }
    dt.glCreateShader = MakeRegalProc(loader_glCreateShader,layer);
    _getProcAddress( driver_glDeleteProgram, glDeleteProgram, "glDeleteProgram" );
    if( driver_glDeleteProgram == NULL ) {
      driver_glDeleteProgram = missing_glDeleteProgram;
    }
    dt.glDeleteProgram = MakeRegalProc(loader_glDeleteProgram,layer);
    _getProcAddress( driver_glDeleteShader, glDeleteShader, "glDeleteShader" );
    if( driver_glDeleteShader == NULL ) {
      driver_glDeleteShader = missing_glDeleteShader;
    }
    dt.glDeleteShader = MakeRegalProc(loader_glDeleteShader,layer);
    _getProcAddress( driver_glDetachShader, glDetachShader, "glDetachShader" );
    if( driver_glDetachShader == NULL ) {
      driver_glDetachShader = missing_glDetachShader;
    }
    dt.glDetachShader = MakeRegalProc(loader_glDetachShader,layer);
    _getProcAddress( driver_glDisableVertexAttribArray, glDisableVertexAttribArray, "glDisableVertexAttribArray" );
    if( driver_glDisableVertexAttribArray == NULL ) {
      driver_glDisableVertexAttribArray = missing_glDisableVertexAttribArray;
    }
    dt.glDisableVertexAttribArray = MakeRegalProc(loader_glDisableVertexAttribArray,layer);
    _getProcAddress( driver_glDrawBuffers, glDrawBuffers, "glDrawBuffers" );
    if( driver_glDrawBuffers == NULL ) {
      driver_glDrawBuffers = missing_glDrawBuffers;
    }
    dt.glDrawBuffers = MakeRegalProc(loader_glDrawBuffers,layer);
    _getProcAddress( driver_glEnableVertexAttribArray, glEnableVertexAttribArray, "glEnableVertexAttribArray" );
    if( driver_glEnableVertexAttribArray == NULL ) {
      driver_glEnableVertexAttribArray = missing_glEnableVertexAttribArray;
    }
    dt.glEnableVertexAttribArray = MakeRegalProc(loader_glEnableVertexAttribArray,layer);
    _getProcAddress( driver_glGetActiveAttrib, glGetActiveAttrib, "glGetActiveAttrib" );
    if( driver_glGetActiveAttrib == NULL ) {
      driver_glGetActiveAttrib = missing_glGetActiveAttrib;
    }
    dt.glGetActiveAttrib = MakeRegalProc(loader_glGetActiveAttrib,layer);
    _getProcAddress( driver_glGetActiveUniform, glGetActiveUniform, "glGetActiveUniform" );
    if( driver_glGetActiveUniform == NULL ) {
      driver_glGetActiveUniform = missing_glGetActiveUniform;
    }
    dt.glGetActiveUniform = MakeRegalProc(loader_glGetActiveUniform,layer);
    _getProcAddress( driver_glGetAttachedShaders, glGetAttachedShaders, "glGetAttachedShaders" );
    if( driver_glGetAttachedShaders == NULL ) {
      driver_glGetAttachedShaders = missing_glGetAttachedShaders;
    }
    dt.glGetAttachedShaders = MakeRegalProc(loader_glGetAttachedShaders,layer);
    _getProcAddress( driver_glGetAttribLocation, glGetAttribLocation, "glGetAttribLocation" );
    if( driver_glGetAttribLocation == NULL ) {
      driver_glGetAttribLocation = missing_glGetAttribLocation;
    }
    dt.glGetAttribLocation = MakeRegalProc(loader_glGetAttribLocation,layer);
    _getProcAddress( driver_glGetProgramInfoLog, glGetProgramInfoLog, "glGetProgramInfoLog" );
    if( driver_glGetProgramInfoLog == NULL ) {
      driver_glGetProgramInfoLog = missing_glGetProgramInfoLog;
    }
    dt.glGetProgramInfoLog = MakeRegalProc(loader_glGetProgramInfoLog,layer);
    _getProcAddress( driver_glGetProgramiv, glGetProgramiv, "glGetProgramiv" );
    if( driver_glGetProgramiv == NULL ) {
      driver_glGetProgramiv = missing_glGetProgramiv;
    }
    dt.glGetProgramiv = MakeRegalProc(loader_glGetProgramiv,layer);
    _getProcAddress( driver_glGetShaderInfoLog, glGetShaderInfoLog, "glGetShaderInfoLog" );
    if( driver_glGetShaderInfoLog == NULL ) {
      driver_glGetShaderInfoLog = missing_glGetShaderInfoLog;
    }
    dt.glGetShaderInfoLog = MakeRegalProc(loader_glGetShaderInfoLog,layer);
    _getProcAddress( driver_glGetShaderSource, glGetShaderSource, "glGetShaderSource" );
    if( driver_glGetShaderSource == NULL ) {
      driver_glGetShaderSource = missing_glGetShaderSource;
    }
    dt.glGetShaderSource = MakeRegalProc(loader_glGetShaderSource,layer);
    _getProcAddress( driver_glGetShaderiv, glGetShaderiv, "glGetShaderiv" );
    if( driver_glGetShaderiv == NULL ) {
      driver_glGetShaderiv = missing_glGetShaderiv;
    }
    dt.glGetShaderiv = MakeRegalProc(loader_glGetShaderiv,layer);
    _getProcAddress( driver_glGetUniformLocation, glGetUniformLocation, "glGetUniformLocation" );
    if( driver_glGetUniformLocation == NULL ) {
      driver_glGetUniformLocation = missing_glGetUniformLocation;
    }
    dt.glGetUniformLocation = MakeRegalProc(loader_glGetUniformLocation,layer);
    _getProcAddress( driver_glGetUniformfv, glGetUniformfv, "glGetUniformfv" );
    if( driver_glGetUniformfv == NULL ) {
      driver_glGetUniformfv = missing_glGetUniformfv;
    }
    dt.glGetUniformfv = MakeRegalProc(loader_glGetUniformfv,layer);
    _getProcAddress( driver_glGetUniformiv, glGetUniformiv, "glGetUniformiv" );
    if( driver_glGetUniformiv == NULL ) {
      driver_glGetUniformiv = missing_glGetUniformiv;
    }
    dt.glGetUniformiv = MakeRegalProc(loader_glGetUniformiv,layer);
    _getProcAddress( driver_glGetVertexAttribPointerv, glGetVertexAttribPointerv, "glGetVertexAttribPointerv" );
    if( driver_glGetVertexAttribPointerv == NULL ) {
      driver_glGetVertexAttribPointerv = missing_glGetVertexAttribPointerv;
    }
    dt.glGetVertexAttribPointerv = MakeRegalProc(loader_glGetVertexAttribPointerv,layer);
    _getProcAddress( driver_glGetVertexAttribdv, glGetVertexAttribdv, "glGetVertexAttribdv" );
    if( driver_glGetVertexAttribdv == NULL ) {
      driver_glGetVertexAttribdv = missing_glGetVertexAttribdv;
    }
    dt.glGetVertexAttribdv = MakeRegalProc(loader_glGetVertexAttribdv,layer);
    _getProcAddress( driver_glGetVertexAttribfv, glGetVertexAttribfv, "glGetVertexAttribfv" );
    if( driver_glGetVertexAttribfv == NULL ) {
      driver_glGetVertexAttribfv = missing_glGetVertexAttribfv;
    }
    dt.glGetVertexAttribfv = MakeRegalProc(loader_glGetVertexAttribfv,layer);
    _getProcAddress( driver_glGetVertexAttribiv, glGetVertexAttribiv, "glGetVertexAttribiv" );
    if( driver_glGetVertexAttribiv == NULL ) {
      driver_glGetVertexAttribiv = missing_glGetVertexAttribiv;
    }
    dt.glGetVertexAttribiv = MakeRegalProc(loader_glGetVertexAttribiv,layer);
    _getProcAddress( driver_glIsProgram, glIsProgram, "glIsProgram" );
    if( driver_glIsProgram == NULL ) {
      driver_glIsProgram = missing_glIsProgram;
    }
    dt.glIsProgram = MakeRegalProc(loader_glIsProgram,layer);
    _getProcAddress( driver_glIsShader, glIsShader, "glIsShader" );
    if( driver_glIsShader == NULL ) {
      driver_glIsShader = missing_glIsShader;
    }
    dt.glIsShader = MakeRegalProc(loader_glIsShader,layer);
    _getProcAddress( driver_glLinkProgram, glLinkProgram, "glLinkProgram" );
    if( driver_glLinkProgram == NULL ) {
      driver_glLinkProgram = missing_glLinkProgram;
    }
    dt.glLinkProgram = MakeRegalProc(loader_glLinkProgram,layer);
    _getProcAddress( driver_glShaderSource, glShaderSource, "glShaderSource" );
    if( driver_glShaderSource == NULL ) {
      driver_glShaderSource = missing_glShaderSource;
    }
    dt.glShaderSource = MakeRegalProc(loader_glShaderSource,layer);
    _getProcAddress( driver_glStencilFuncSeparate, glStencilFuncSeparate, "glStencilFuncSeparate" );
    if( driver_glStencilFuncSeparate == NULL ) {
      driver_glStencilFuncSeparate = missing_glStencilFuncSeparate;
    }
    dt.glStencilFuncSeparate = MakeRegalProc(loader_glStencilFuncSeparate,layer);
    _getProcAddress( driver_glStencilMaskSeparate, glStencilMaskSeparate, "glStencilMaskSeparate" );
    if( driver_glStencilMaskSeparate == NULL ) {
      driver_glStencilMaskSeparate = missing_glStencilMaskSeparate;
    }
    dt.glStencilMaskSeparate = MakeRegalProc(loader_glStencilMaskSeparate,layer);
    _getProcAddress( driver_glStencilOpSeparate, glStencilOpSeparate, "glStencilOpSeparate" );
    if( driver_glStencilOpSeparate == NULL ) {
      driver_glStencilOpSeparate = missing_glStencilOpSeparate;
    }
    dt.glStencilOpSeparate = MakeRegalProc(loader_glStencilOpSeparate,layer);
    _getProcAddress( driver_glUniform1f, glUniform1f, "glUniform1f" );
    if( driver_glUniform1f == NULL ) {
      driver_glUniform1f = missing_glUniform1f;
    }
    dt.glUniform1f = MakeRegalProc(loader_glUniform1f,layer);
    _getProcAddress( driver_glUniform1fv, glUniform1fv, "glUniform1fv" );
    if( driver_glUniform1fv == NULL ) {
      driver_glUniform1fv = missing_glUniform1fv;
    }
    dt.glUniform1fv = MakeRegalProc(loader_glUniform1fv,layer);
    _getProcAddress( driver_glUniform1i, glUniform1i, "glUniform1i" );
    if( driver_glUniform1i == NULL ) {
      driver_glUniform1i = missing_glUniform1i;
    }
    dt.glUniform1i = MakeRegalProc(loader_glUniform1i,layer);
    _getProcAddress( driver_glUniform1iv, glUniform1iv, "glUniform1iv" );
    if( driver_glUniform1iv == NULL ) {
      driver_glUniform1iv = missing_glUniform1iv;
    }
    dt.glUniform1iv = MakeRegalProc(loader_glUniform1iv,layer);
    _getProcAddress( driver_glUniform2f, glUniform2f, "glUniform2f" );
    if( driver_glUniform2f == NULL ) {
      driver_glUniform2f = missing_glUniform2f;
    }
    dt.glUniform2f = MakeRegalProc(loader_glUniform2f,layer);
    _getProcAddress( driver_glUniform2fv, glUniform2fv, "glUniform2fv" );
    if( driver_glUniform2fv == NULL ) {
      driver_glUniform2fv = missing_glUniform2fv;
    }
    dt.glUniform2fv = MakeRegalProc(loader_glUniform2fv,layer);
    _getProcAddress( driver_glUniform2i, glUniform2i, "glUniform2i" );
    if( driver_glUniform2i == NULL ) {
      driver_glUniform2i = missing_glUniform2i;
    }
    dt.glUniform2i = MakeRegalProc(loader_glUniform2i,layer);
    _getProcAddress( driver_glUniform2iv, glUniform2iv, "glUniform2iv" );
    if( driver_glUniform2iv == NULL ) {
      driver_glUniform2iv = missing_glUniform2iv;
    }
    dt.glUniform2iv = MakeRegalProc(loader_glUniform2iv,layer);
    _getProcAddress( driver_glUniform3f, glUniform3f, "glUniform3f" );
    if( driver_glUniform3f == NULL ) {
      driver_glUniform3f = missing_glUniform3f;
    }
    dt.glUniform3f = MakeRegalProc(loader_glUniform3f,layer);
    _getProcAddress( driver_glUniform3fv, glUniform3fv, "glUniform3fv" );
    if( driver_glUniform3fv == NULL ) {
      driver_glUniform3fv = missing_glUniform3fv;
    }
    dt.glUniform3fv = MakeRegalProc(loader_glUniform3fv,layer);
    _getProcAddress( driver_glUniform3i, glUniform3i, "glUniform3i" );
    if( driver_glUniform3i == NULL ) {
      driver_glUniform3i = missing_glUniform3i;
    }
    dt.glUniform3i = MakeRegalProc(loader_glUniform3i,layer);
    _getProcAddress( driver_glUniform3iv, glUniform3iv, "glUniform3iv" );
    if( driver_glUniform3iv == NULL ) {
      driver_glUniform3iv = missing_glUniform3iv;
    }
    dt.glUniform3iv = MakeRegalProc(loader_glUniform3iv,layer);
    _getProcAddress( driver_glUniform4f, glUniform4f, "glUniform4f" );
    if( driver_glUniform4f == NULL ) {
      driver_glUniform4f = missing_glUniform4f;
    }
    dt.glUniform4f = MakeRegalProc(loader_glUniform4f,layer);
    _getProcAddress( driver_glUniform4fv, glUniform4fv, "glUniform4fv" );
    if( driver_glUniform4fv == NULL ) {
      driver_glUniform4fv = missing_glUniform4fv;
    }
    dt.glUniform4fv = MakeRegalProc(loader_glUniform4fv,layer);
    _getProcAddress( driver_glUniform4i, glUniform4i, "glUniform4i" );
    if( driver_glUniform4i == NULL ) {
      driver_glUniform4i = missing_glUniform4i;
    }
    dt.glUniform4i = MakeRegalProc(loader_glUniform4i,layer);
    _getProcAddress( driver_glUniform4iv, glUniform4iv, "glUniform4iv" );
    if( driver_glUniform4iv == NULL ) {
      driver_glUniform4iv = missing_glUniform4iv;
    }
    dt.glUniform4iv = MakeRegalProc(loader_glUniform4iv,layer);
    _getProcAddress( driver_glUniformMatrix2fv, glUniformMatrix2fv, "glUniformMatrix2fv" );
    if( driver_glUniformMatrix2fv == NULL ) {
      driver_glUniformMatrix2fv = missing_glUniformMatrix2fv;
    }
    dt.glUniformMatrix2fv = MakeRegalProc(loader_glUniformMatrix2fv,layer);
    _getProcAddress( driver_glUniformMatrix3fv, glUniformMatrix3fv, "glUniformMatrix3fv" );
    if( driver_glUniformMatrix3fv == NULL ) {
      driver_glUniformMatrix3fv = missing_glUniformMatrix3fv;
    }
    dt.glUniformMatrix3fv = MakeRegalProc(loader_glUniformMatrix3fv,layer);
    _getProcAddress( driver_glUniformMatrix4fv, glUniformMatrix4fv, "glUniformMatrix4fv" );
    if( driver_glUniformMatrix4fv == NULL ) {
      driver_glUniformMatrix4fv = missing_glUniformMatrix4fv;
    }
    dt.glUniformMatrix4fv = MakeRegalProc(loader_glUniformMatrix4fv,layer);
    _getProcAddress( driver_glUseProgram, glUseProgram, "glUseProgram" );
    if( driver_glUseProgram == NULL ) {
      driver_glUseProgram = missing_glUseProgram;
    }
    dt.glUseProgram = MakeRegalProc(loader_glUseProgram,layer);
    _getProcAddress( driver_glValidateProgram, glValidateProgram, "glValidateProgram" );
    if( driver_glValidateProgram == NULL ) {
      driver_glValidateProgram = missing_glValidateProgram;
    }
    dt.glValidateProgram = MakeRegalProc(loader_glValidateProgram,layer);
    _getProcAddress( driver_glVertexAttrib1d, glVertexAttrib1d, "glVertexAttrib1d" );
    if( driver_glVertexAttrib1d == NULL ) {
      driver_glVertexAttrib1d = missing_glVertexAttrib1d;
    }
    dt.glVertexAttrib1d = MakeRegalProc(loader_glVertexAttrib1d,layer);
    _getProcAddress( driver_glVertexAttrib1dv, glVertexAttrib1dv, "glVertexAttrib1dv" );
    if( driver_glVertexAttrib1dv == NULL ) {
      driver_glVertexAttrib1dv = missing_glVertexAttrib1dv;
    }
    dt.glVertexAttrib1dv = MakeRegalProc(loader_glVertexAttrib1dv,layer);
    _getProcAddress( driver_glVertexAttrib1f, glVertexAttrib1f, "glVertexAttrib1f" );
    if( driver_glVertexAttrib1f == NULL ) {
      driver_glVertexAttrib1f = missing_glVertexAttrib1f;
    }
    dt.glVertexAttrib1f = MakeRegalProc(loader_glVertexAttrib1f,layer);
    _getProcAddress( driver_glVertexAttrib1fv, glVertexAttrib1fv, "glVertexAttrib1fv" );
    if( driver_glVertexAttrib1fv == NULL ) {
      driver_glVertexAttrib1fv = missing_glVertexAttrib1fv;
    }
    dt.glVertexAttrib1fv = MakeRegalProc(loader_glVertexAttrib1fv,layer);
    _getProcAddress( driver_glVertexAttrib1s, glVertexAttrib1s, "glVertexAttrib1s" );
    if( driver_glVertexAttrib1s == NULL ) {
      driver_glVertexAttrib1s = missing_glVertexAttrib1s;
    }
    dt.glVertexAttrib1s = MakeRegalProc(loader_glVertexAttrib1s,layer);
    _getProcAddress( driver_glVertexAttrib1sv, glVertexAttrib1sv, "glVertexAttrib1sv" );
    if( driver_glVertexAttrib1sv == NULL ) {
      driver_glVertexAttrib1sv = missing_glVertexAttrib1sv;
    }
    dt.glVertexAttrib1sv = MakeRegalProc(loader_glVertexAttrib1sv,layer);
    _getProcAddress( driver_glVertexAttrib2d, glVertexAttrib2d, "glVertexAttrib2d" );
    if( driver_glVertexAttrib2d == NULL ) {
      driver_glVertexAttrib2d = missing_glVertexAttrib2d;
    }
    dt.glVertexAttrib2d = MakeRegalProc(loader_glVertexAttrib2d,layer);
    _getProcAddress( driver_glVertexAttrib2dv, glVertexAttrib2dv, "glVertexAttrib2dv" );
    if( driver_glVertexAttrib2dv == NULL ) {
      driver_glVertexAttrib2dv = missing_glVertexAttrib2dv;
    }
    dt.glVertexAttrib2dv = MakeRegalProc(loader_glVertexAttrib2dv,layer);
    _getProcAddress( driver_glVertexAttrib2f, glVertexAttrib2f, "glVertexAttrib2f" );
    if( driver_glVertexAttrib2f == NULL ) {
      driver_glVertexAttrib2f = missing_glVertexAttrib2f;
    }
    dt.glVertexAttrib2f = MakeRegalProc(loader_glVertexAttrib2f,layer);
    _getProcAddress( driver_glVertexAttrib2fv, glVertexAttrib2fv, "glVertexAttrib2fv" );
    if( driver_glVertexAttrib2fv == NULL ) {
      driver_glVertexAttrib2fv = missing_glVertexAttrib2fv;
    }
    dt.glVertexAttrib2fv = MakeRegalProc(loader_glVertexAttrib2fv,layer);
    _getProcAddress( driver_glVertexAttrib2s, glVertexAttrib2s, "glVertexAttrib2s" );
    if( driver_glVertexAttrib2s == NULL ) {
      driver_glVertexAttrib2s = missing_glVertexAttrib2s;
    }
    dt.glVertexAttrib2s = MakeRegalProc(loader_glVertexAttrib2s,layer);
    _getProcAddress( driver_glVertexAttrib2sv, glVertexAttrib2sv, "glVertexAttrib2sv" );
    if( driver_glVertexAttrib2sv == NULL ) {
      driver_glVertexAttrib2sv = missing_glVertexAttrib2sv;
    }
    dt.glVertexAttrib2sv = MakeRegalProc(loader_glVertexAttrib2sv,layer);
    _getProcAddress( driver_glVertexAttrib3d, glVertexAttrib3d, "glVertexAttrib3d" );
    if( driver_glVertexAttrib3d == NULL ) {
      driver_glVertexAttrib3d = missing_glVertexAttrib3d;
    }
    dt.glVertexAttrib3d = MakeRegalProc(loader_glVertexAttrib3d,layer);
    _getProcAddress( driver_glVertexAttrib3dv, glVertexAttrib3dv, "glVertexAttrib3dv" );
    if( driver_glVertexAttrib3dv == NULL ) {
      driver_glVertexAttrib3dv = missing_glVertexAttrib3dv;
    }
    dt.glVertexAttrib3dv = MakeRegalProc(loader_glVertexAttrib3dv,layer);
    _getProcAddress( driver_glVertexAttrib3f, glVertexAttrib3f, "glVertexAttrib3f" );
    if( driver_glVertexAttrib3f == NULL ) {
      driver_glVertexAttrib3f = missing_glVertexAttrib3f;
    }
    dt.glVertexAttrib3f = MakeRegalProc(loader_glVertexAttrib3f,layer);
    _getProcAddress( driver_glVertexAttrib3fv, glVertexAttrib3fv, "glVertexAttrib3fv" );
    if( driver_glVertexAttrib3fv == NULL ) {
      driver_glVertexAttrib3fv = missing_glVertexAttrib3fv;
    }
    dt.glVertexAttrib3fv = MakeRegalProc(loader_glVertexAttrib3fv,layer);
    _getProcAddress( driver_glVertexAttrib3s, glVertexAttrib3s, "glVertexAttrib3s" );
    if( driver_glVertexAttrib3s == NULL ) {
      driver_glVertexAttrib3s = missing_glVertexAttrib3s;
    }
    dt.glVertexAttrib3s = MakeRegalProc(loader_glVertexAttrib3s,layer);
    _getProcAddress( driver_glVertexAttrib3sv, glVertexAttrib3sv, "glVertexAttrib3sv" );
    if( driver_glVertexAttrib3sv == NULL ) {
      driver_glVertexAttrib3sv = missing_glVertexAttrib3sv;
    }
    dt.glVertexAttrib3sv = MakeRegalProc(loader_glVertexAttrib3sv,layer);
    _getProcAddress( driver_glVertexAttrib4Nbv, glVertexAttrib4Nbv, "glVertexAttrib4Nbv" );
    if( driver_glVertexAttrib4Nbv == NULL ) {
      driver_glVertexAttrib4Nbv = missing_glVertexAttrib4Nbv;
    }
    dt.glVertexAttrib4Nbv = MakeRegalProc(loader_glVertexAttrib4Nbv,layer);
    _getProcAddress( driver_glVertexAttrib4Niv, glVertexAttrib4Niv, "glVertexAttrib4Niv" );
    if( driver_glVertexAttrib4Niv == NULL ) {
      driver_glVertexAttrib4Niv = missing_glVertexAttrib4Niv;
    }
    dt.glVertexAttrib4Niv = MakeRegalProc(loader_glVertexAttrib4Niv,layer);
    _getProcAddress( driver_glVertexAttrib4Nsv, glVertexAttrib4Nsv, "glVertexAttrib4Nsv" );
    if( driver_glVertexAttrib4Nsv == NULL ) {
      driver_glVertexAttrib4Nsv = missing_glVertexAttrib4Nsv;
    }
    dt.glVertexAttrib4Nsv = MakeRegalProc(loader_glVertexAttrib4Nsv,layer);
    _getProcAddress( driver_glVertexAttrib4Nub, glVertexAttrib4Nub, "glVertexAttrib4Nub" );
    if( driver_glVertexAttrib4Nub == NULL ) {
      driver_glVertexAttrib4Nub = missing_glVertexAttrib4Nub;
    }
    dt.glVertexAttrib4Nub = MakeRegalProc(loader_glVertexAttrib4Nub,layer);
    _getProcAddress( driver_glVertexAttrib4Nubv, glVertexAttrib4Nubv, "glVertexAttrib4Nubv" );
    if( driver_glVertexAttrib4Nubv == NULL ) {
      driver_glVertexAttrib4Nubv = missing_glVertexAttrib4Nubv;
    }
    dt.glVertexAttrib4Nubv = MakeRegalProc(loader_glVertexAttrib4Nubv,layer);
    _getProcAddress( driver_glVertexAttrib4Nuiv, glVertexAttrib4Nuiv, "glVertexAttrib4Nuiv" );
    if( driver_glVertexAttrib4Nuiv == NULL ) {
      driver_glVertexAttrib4Nuiv = missing_glVertexAttrib4Nuiv;
    }
    dt.glVertexAttrib4Nuiv = MakeRegalProc(loader_glVertexAttrib4Nuiv,layer);
    _getProcAddress( driver_glVertexAttrib4Nusv, glVertexAttrib4Nusv, "glVertexAttrib4Nusv" );
    if( driver_glVertexAttrib4Nusv == NULL ) {
      driver_glVertexAttrib4Nusv = missing_glVertexAttrib4Nusv;
    }
    dt.glVertexAttrib4Nusv = MakeRegalProc(loader_glVertexAttrib4Nusv,layer);
    _getProcAddress( driver_glVertexAttrib4bv, glVertexAttrib4bv, "glVertexAttrib4bv" );
    if( driver_glVertexAttrib4bv == NULL ) {
      driver_glVertexAttrib4bv = missing_glVertexAttrib4bv;
    }
    dt.glVertexAttrib4bv = MakeRegalProc(loader_glVertexAttrib4bv,layer);
    _getProcAddress( driver_glVertexAttrib4d, glVertexAttrib4d, "glVertexAttrib4d" );
    if( driver_glVertexAttrib4d == NULL ) {
      driver_glVertexAttrib4d = missing_glVertexAttrib4d;
    }
    dt.glVertexAttrib4d = MakeRegalProc(loader_glVertexAttrib4d,layer);
    _getProcAddress( driver_glVertexAttrib4dv, glVertexAttrib4dv, "glVertexAttrib4dv" );
    if( driver_glVertexAttrib4dv == NULL ) {
      driver_glVertexAttrib4dv = missing_glVertexAttrib4dv;
    }
    dt.glVertexAttrib4dv = MakeRegalProc(loader_glVertexAttrib4dv,layer);
    _getProcAddress( driver_glVertexAttrib4f, glVertexAttrib4f, "glVertexAttrib4f" );
    if( driver_glVertexAttrib4f == NULL ) {
      driver_glVertexAttrib4f = missing_glVertexAttrib4f;
    }
    dt.glVertexAttrib4f = MakeRegalProc(loader_glVertexAttrib4f,layer);
    _getProcAddress( driver_glVertexAttrib4fv, glVertexAttrib4fv, "glVertexAttrib4fv" );
    if( driver_glVertexAttrib4fv == NULL ) {
      driver_glVertexAttrib4fv = missing_glVertexAttrib4fv;
    }
    dt.glVertexAttrib4fv = MakeRegalProc(loader_glVertexAttrib4fv,layer);
    _getProcAddress( driver_glVertexAttrib4iv, glVertexAttrib4iv, "glVertexAttrib4iv" );
    if( driver_glVertexAttrib4iv == NULL ) {
      driver_glVertexAttrib4iv = missing_glVertexAttrib4iv;
    }
    dt.glVertexAttrib4iv = MakeRegalProc(loader_glVertexAttrib4iv,layer);
    _getProcAddress( driver_glVertexAttrib4s, glVertexAttrib4s, "glVertexAttrib4s" );
    if( driver_glVertexAttrib4s == NULL ) {
      driver_glVertexAttrib4s = missing_glVertexAttrib4s;
    }
    dt.glVertexAttrib4s = MakeRegalProc(loader_glVertexAttrib4s,layer);
    _getProcAddress( driver_glVertexAttrib4sv, glVertexAttrib4sv, "glVertexAttrib4sv" );
    if( driver_glVertexAttrib4sv == NULL ) {
      driver_glVertexAttrib4sv = missing_glVertexAttrib4sv;
    }
    dt.glVertexAttrib4sv = MakeRegalProc(loader_glVertexAttrib4sv,layer);
    _getProcAddress( driver_glVertexAttrib4ubv, glVertexAttrib4ubv, "glVertexAttrib4ubv" );
    if( driver_glVertexAttrib4ubv == NULL ) {
      driver_glVertexAttrib4ubv = missing_glVertexAttrib4ubv;
    }
    dt.glVertexAttrib4ubv = MakeRegalProc(loader_glVertexAttrib4ubv,layer);
    _getProcAddress( driver_glVertexAttrib4uiv, glVertexAttrib4uiv, "glVertexAttrib4uiv" );
    if( driver_glVertexAttrib4uiv == NULL ) {
      driver_glVertexAttrib4uiv = missing_glVertexAttrib4uiv;
    }
    dt.glVertexAttrib4uiv = MakeRegalProc(loader_glVertexAttrib4uiv,layer);
    _getProcAddress( driver_glVertexAttrib4usv, glVertexAttrib4usv, "glVertexAttrib4usv" );
    if( driver_glVertexAttrib4usv == NULL ) {
      driver_glVertexAttrib4usv = missing_glVertexAttrib4usv;
    }
    dt.glVertexAttrib4usv = MakeRegalProc(loader_glVertexAttrib4usv,layer);
    _getProcAddress( driver_glVertexAttribPointer, glVertexAttribPointer, "glVertexAttribPointer" );
    if( driver_glVertexAttribPointer == NULL ) {
      driver_glVertexAttribPointer = missing_glVertexAttribPointer;
    }
    dt.glVertexAttribPointer = MakeRegalProc(loader_glVertexAttribPointer,layer);

    // GL_VERSION_2_1

    _getProcAddress( driver_glUniformMatrix2x3fv, glUniformMatrix2x3fv, "glUniformMatrix2x3fv" );
    if( driver_glUniformMatrix2x3fv == NULL ) {
      driver_glUniformMatrix2x3fv = missing_glUniformMatrix2x3fv;
    }
    dt.glUniformMatrix2x3fv = MakeRegalProc(loader_glUniformMatrix2x3fv,layer);
    _getProcAddress( driver_glUniformMatrix2x4fv, glUniformMatrix2x4fv, "glUniformMatrix2x4fv" );
    if( driver_glUniformMatrix2x4fv == NULL ) {
      driver_glUniformMatrix2x4fv = missing_glUniformMatrix2x4fv;
    }
    dt.glUniformMatrix2x4fv = MakeRegalProc(loader_glUniformMatrix2x4fv,layer);
    _getProcAddress( driver_glUniformMatrix3x2fv, glUniformMatrix3x2fv, "glUniformMatrix3x2fv" );
    if( driver_glUniformMatrix3x2fv == NULL ) {
      driver_glUniformMatrix3x2fv = missing_glUniformMatrix3x2fv;
    }
    dt.glUniformMatrix3x2fv = MakeRegalProc(loader_glUniformMatrix3x2fv,layer);
    _getProcAddress( driver_glUniformMatrix3x4fv, glUniformMatrix3x4fv, "glUniformMatrix3x4fv" );
    if( driver_glUniformMatrix3x4fv == NULL ) {
      driver_glUniformMatrix3x4fv = missing_glUniformMatrix3x4fv;
    }
    dt.glUniformMatrix3x4fv = MakeRegalProc(loader_glUniformMatrix3x4fv,layer);
    _getProcAddress( driver_glUniformMatrix4x2fv, glUniformMatrix4x2fv, "glUniformMatrix4x2fv" );
    if( driver_glUniformMatrix4x2fv == NULL ) {
      driver_glUniformMatrix4x2fv = missing_glUniformMatrix4x2fv;
    }
    dt.glUniformMatrix4x2fv = MakeRegalProc(loader_glUniformMatrix4x2fv,layer);
    _getProcAddress( driver_glUniformMatrix4x3fv, glUniformMatrix4x3fv, "glUniformMatrix4x3fv" );
    if( driver_glUniformMatrix4x3fv == NULL ) {
      driver_glUniformMatrix4x3fv = missing_glUniformMatrix4x3fv;
    }
    dt.glUniformMatrix4x3fv = MakeRegalProc(loader_glUniformMatrix4x3fv,layer);

    // GL_VERSION_3_0

    _getProcAddress( driver_glBeginConditionalRender, glBeginConditionalRender, "glBeginConditionalRender" );
    if( driver_glBeginConditionalRender == NULL ) {
      driver_glBeginConditionalRender = missing_glBeginConditionalRender;
    }
    dt.glBeginConditionalRender = MakeRegalProc(loader_glBeginConditionalRender,layer);
    _getProcAddress( driver_glBeginTransformFeedback, glBeginTransformFeedback, "glBeginTransformFeedback" );
    if( driver_glBeginTransformFeedback == NULL ) {
      driver_glBeginTransformFeedback = missing_glBeginTransformFeedback;
    }
    dt.glBeginTransformFeedback = MakeRegalProc(loader_glBeginTransformFeedback,layer);
    _getProcAddress( driver_glBindFragDataLocation, glBindFragDataLocation, "glBindFragDataLocation" );
    if( driver_glBindFragDataLocation == NULL ) {
      driver_glBindFragDataLocation = missing_glBindFragDataLocation;
    }
    dt.glBindFragDataLocation = MakeRegalProc(loader_glBindFragDataLocation,layer);
    _getProcAddress( driver_glClampColor, glClampColor, "glClampColor" );
    if( driver_glClampColor == NULL ) {
      driver_glClampColor = missing_glClampColor;
    }
    dt.glClampColor = MakeRegalProc(loader_glClampColor,layer);
    _getProcAddress( driver_glClearBufferfi, glClearBufferfi, "glClearBufferfi" );
    if( driver_glClearBufferfi == NULL ) {
      driver_glClearBufferfi = missing_glClearBufferfi;
    }
    dt.glClearBufferfi = MakeRegalProc(loader_glClearBufferfi,layer);
    _getProcAddress( driver_glClearBufferfv, glClearBufferfv, "glClearBufferfv" );
    if( driver_glClearBufferfv == NULL ) {
      driver_glClearBufferfv = missing_glClearBufferfv;
    }
    dt.glClearBufferfv = MakeRegalProc(loader_glClearBufferfv,layer);
    _getProcAddress( driver_glClearBufferiv, glClearBufferiv, "glClearBufferiv" );
    if( driver_glClearBufferiv == NULL ) {
      driver_glClearBufferiv = missing_glClearBufferiv;
    }
    dt.glClearBufferiv = MakeRegalProc(loader_glClearBufferiv,layer);
    _getProcAddress( driver_glClearBufferuiv, glClearBufferuiv, "glClearBufferuiv" );
    if( driver_glClearBufferuiv == NULL ) {
      driver_glClearBufferuiv = missing_glClearBufferuiv;
    }
    dt.glClearBufferuiv = MakeRegalProc(loader_glClearBufferuiv,layer);
    _getProcAddress( driver_glColorMaski, glColorMaski, "glColorMaski" );
    if( driver_glColorMaski == NULL ) {
      driver_glColorMaski = missing_glColorMaski;
    }
    dt.glColorMaski = MakeRegalProc(loader_glColorMaski,layer);
    _getProcAddress( driver_glDisablei, glDisablei, "glDisablei" );
    if( driver_glDisablei == NULL ) {
      driver_glDisablei = missing_glDisablei;
    }
    dt.glDisablei = MakeRegalProc(loader_glDisablei,layer);
    _getProcAddress( driver_glEnablei, glEnablei, "glEnablei" );
    if( driver_glEnablei == NULL ) {
      driver_glEnablei = missing_glEnablei;
    }
    dt.glEnablei = MakeRegalProc(loader_glEnablei,layer);
    _getProcAddress( driver_glEndConditionalRender, glEndConditionalRender, "glEndConditionalRender" );
    if( driver_glEndConditionalRender == NULL ) {
      driver_glEndConditionalRender = missing_glEndConditionalRender;
    }
    dt.glEndConditionalRender = MakeRegalProc(loader_glEndConditionalRender,layer);
    _getProcAddress( driver_glEndTransformFeedback, glEndTransformFeedback, "glEndTransformFeedback" );
    if( driver_glEndTransformFeedback == NULL ) {
      driver_glEndTransformFeedback = missing_glEndTransformFeedback;
    }
    dt.glEndTransformFeedback = MakeRegalProc(loader_glEndTransformFeedback,layer);
    _getProcAddress( driver_glGetBooleani_v, glGetBooleani_v, "glGetBooleani_v" );
    if( driver_glGetBooleani_v == NULL ) {
      driver_glGetBooleani_v = missing_glGetBooleani_v;
    }
    dt.glGetBooleani_v = MakeRegalProc(loader_glGetBooleani_v,layer);
    _getProcAddress( driver_glGetFragDataLocation, glGetFragDataLocation, "glGetFragDataLocation" );
    if( driver_glGetFragDataLocation == NULL ) {
      driver_glGetFragDataLocation = missing_glGetFragDataLocation;
    }
    dt.glGetFragDataLocation = MakeRegalProc(loader_glGetFragDataLocation,layer);
    _getProcAddress( driver_glGetStringi, glGetStringi, "glGetStringi" );
    if( driver_glGetStringi == NULL ) {
      driver_glGetStringi = missing_glGetStringi;
    }
    dt.glGetStringi = MakeRegalProc(loader_glGetStringi,layer);
    _getProcAddress( driver_glGetTexParameterIiv, glGetTexParameterIiv, "glGetTexParameterIiv" );
    if( driver_glGetTexParameterIiv == NULL ) {
      driver_glGetTexParameterIiv = missing_glGetTexParameterIiv;
    }
    dt.glGetTexParameterIiv = MakeRegalProc(loader_glGetTexParameterIiv,layer);
    _getProcAddress( driver_glGetTexParameterIuiv, glGetTexParameterIuiv, "glGetTexParameterIuiv" );
    if( driver_glGetTexParameterIuiv == NULL ) {
      driver_glGetTexParameterIuiv = missing_glGetTexParameterIuiv;
    }
    dt.glGetTexParameterIuiv = MakeRegalProc(loader_glGetTexParameterIuiv,layer);
    _getProcAddress( driver_glGetTransformFeedbackVarying, glGetTransformFeedbackVarying, "glGetTransformFeedbackVarying" );
    if( driver_glGetTransformFeedbackVarying == NULL ) {
      driver_glGetTransformFeedbackVarying = missing_glGetTransformFeedbackVarying;
    }
    dt.glGetTransformFeedbackVarying = MakeRegalProc(loader_glGetTransformFeedbackVarying,layer);
    _getProcAddress( driver_glGetUniformuiv, glGetUniformuiv, "glGetUniformuiv" );
    if( driver_glGetUniformuiv == NULL ) {
      driver_glGetUniformuiv = missing_glGetUniformuiv;
    }
    dt.glGetUniformuiv = MakeRegalProc(loader_glGetUniformuiv,layer);
    _getProcAddress( driver_glGetVertexAttribIiv, glGetVertexAttribIiv, "glGetVertexAttribIiv" );
    if( driver_glGetVertexAttribIiv == NULL ) {
      driver_glGetVertexAttribIiv = missing_glGetVertexAttribIiv;
    }
    dt.glGetVertexAttribIiv = MakeRegalProc(loader_glGetVertexAttribIiv,layer);
    _getProcAddress( driver_glGetVertexAttribIuiv, glGetVertexAttribIuiv, "glGetVertexAttribIuiv" );
    if( driver_glGetVertexAttribIuiv == NULL ) {
      driver_glGetVertexAttribIuiv = missing_glGetVertexAttribIuiv;
    }
    dt.glGetVertexAttribIuiv = MakeRegalProc(loader_glGetVertexAttribIuiv,layer);
    _getProcAddress( driver_glIsEnabledi, glIsEnabledi, "glIsEnabledi" );
    if( driver_glIsEnabledi == NULL ) {
      driver_glIsEnabledi = missing_glIsEnabledi;
    }
    dt.glIsEnabledi = MakeRegalProc(loader_glIsEnabledi,layer);
    _getProcAddress( driver_glTexParameterIiv, glTexParameterIiv, "glTexParameterIiv" );
    if( driver_glTexParameterIiv == NULL ) {
      driver_glTexParameterIiv = missing_glTexParameterIiv;
    }
    dt.glTexParameterIiv = MakeRegalProc(loader_glTexParameterIiv,layer);
    _getProcAddress( driver_glTexParameterIuiv, glTexParameterIuiv, "glTexParameterIuiv" );
    if( driver_glTexParameterIuiv == NULL ) {
      driver_glTexParameterIuiv = missing_glTexParameterIuiv;
    }
    dt.glTexParameterIuiv = MakeRegalProc(loader_glTexParameterIuiv,layer);
    _getProcAddress( driver_glTransformFeedbackVaryings, glTransformFeedbackVaryings, "glTransformFeedbackVaryings" );
    if( driver_glTransformFeedbackVaryings == NULL ) {
      driver_glTransformFeedbackVaryings = missing_glTransformFeedbackVaryings;
    }
    dt.glTransformFeedbackVaryings = MakeRegalProc(loader_glTransformFeedbackVaryings,layer);
    _getProcAddress( driver_glUniform1ui, glUniform1ui, "glUniform1ui" );
    if( driver_glUniform1ui == NULL ) {
      driver_glUniform1ui = missing_glUniform1ui;
    }
    dt.glUniform1ui = MakeRegalProc(loader_glUniform1ui,layer);
    _getProcAddress( driver_glUniform1uiv, glUniform1uiv, "glUniform1uiv" );
    if( driver_glUniform1uiv == NULL ) {
      driver_glUniform1uiv = missing_glUniform1uiv;
    }
    dt.glUniform1uiv = MakeRegalProc(loader_glUniform1uiv,layer);
    _getProcAddress( driver_glUniform2ui, glUniform2ui, "glUniform2ui" );
    if( driver_glUniform2ui == NULL ) {
      driver_glUniform2ui = missing_glUniform2ui;
    }
    dt.glUniform2ui = MakeRegalProc(loader_glUniform2ui,layer);
    _getProcAddress( driver_glUniform2uiv, glUniform2uiv, "glUniform2uiv" );
    if( driver_glUniform2uiv == NULL ) {
      driver_glUniform2uiv = missing_glUniform2uiv;
    }
    dt.glUniform2uiv = MakeRegalProc(loader_glUniform2uiv,layer);
    _getProcAddress( driver_glUniform3ui, glUniform3ui, "glUniform3ui" );
    if( driver_glUniform3ui == NULL ) {
      driver_glUniform3ui = missing_glUniform3ui;
    }
    dt.glUniform3ui = MakeRegalProc(loader_glUniform3ui,layer);
    _getProcAddress( driver_glUniform3uiv, glUniform3uiv, "glUniform3uiv" );
    if( driver_glUniform3uiv == NULL ) {
      driver_glUniform3uiv = missing_glUniform3uiv;
    }
    dt.glUniform3uiv = MakeRegalProc(loader_glUniform3uiv,layer);
    _getProcAddress( driver_glUniform4ui, glUniform4ui, "glUniform4ui" );
    if( driver_glUniform4ui == NULL ) {
      driver_glUniform4ui = missing_glUniform4ui;
    }
    dt.glUniform4ui = MakeRegalProc(loader_glUniform4ui,layer);
    _getProcAddress( driver_glUniform4uiv, glUniform4uiv, "glUniform4uiv" );
    if( driver_glUniform4uiv == NULL ) {
      driver_glUniform4uiv = missing_glUniform4uiv;
    }
    dt.glUniform4uiv = MakeRegalProc(loader_glUniform4uiv,layer);
    _getProcAddress( driver_glVertexAttribI1i, glVertexAttribI1i, "glVertexAttribI1i" );
    if( driver_glVertexAttribI1i == NULL ) {
      driver_glVertexAttribI1i = missing_glVertexAttribI1i;
    }
    dt.glVertexAttribI1i = MakeRegalProc(loader_glVertexAttribI1i,layer);
    _getProcAddress( driver_glVertexAttribI1iv, glVertexAttribI1iv, "glVertexAttribI1iv" );
    if( driver_glVertexAttribI1iv == NULL ) {
      driver_glVertexAttribI1iv = missing_glVertexAttribI1iv;
    }
    dt.glVertexAttribI1iv = MakeRegalProc(loader_glVertexAttribI1iv,layer);
    _getProcAddress( driver_glVertexAttribI1ui, glVertexAttribI1ui, "glVertexAttribI1ui" );
    if( driver_glVertexAttribI1ui == NULL ) {
      driver_glVertexAttribI1ui = missing_glVertexAttribI1ui;
    }
    dt.glVertexAttribI1ui = MakeRegalProc(loader_glVertexAttribI1ui,layer);
    _getProcAddress( driver_glVertexAttribI1uiv, glVertexAttribI1uiv, "glVertexAttribI1uiv" );
    if( driver_glVertexAttribI1uiv == NULL ) {
      driver_glVertexAttribI1uiv = missing_glVertexAttribI1uiv;
    }
    dt.glVertexAttribI1uiv = MakeRegalProc(loader_glVertexAttribI1uiv,layer);
    _getProcAddress( driver_glVertexAttribI2i, glVertexAttribI2i, "glVertexAttribI2i" );
    if( driver_glVertexAttribI2i == NULL ) {
      driver_glVertexAttribI2i = missing_glVertexAttribI2i;
    }
    dt.glVertexAttribI2i = MakeRegalProc(loader_glVertexAttribI2i,layer);
    _getProcAddress( driver_glVertexAttribI2iv, glVertexAttribI2iv, "glVertexAttribI2iv" );
    if( driver_glVertexAttribI2iv == NULL ) {
      driver_glVertexAttribI2iv = missing_glVertexAttribI2iv;
    }
    dt.glVertexAttribI2iv = MakeRegalProc(loader_glVertexAttribI2iv,layer);
    _getProcAddress( driver_glVertexAttribI2ui, glVertexAttribI2ui, "glVertexAttribI2ui" );
    if( driver_glVertexAttribI2ui == NULL ) {
      driver_glVertexAttribI2ui = missing_glVertexAttribI2ui;
    }
    dt.glVertexAttribI2ui = MakeRegalProc(loader_glVertexAttribI2ui,layer);
    _getProcAddress( driver_glVertexAttribI2uiv, glVertexAttribI2uiv, "glVertexAttribI2uiv" );
    if( driver_glVertexAttribI2uiv == NULL ) {
      driver_glVertexAttribI2uiv = missing_glVertexAttribI2uiv;
    }
    dt.glVertexAttribI2uiv = MakeRegalProc(loader_glVertexAttribI2uiv,layer);
    _getProcAddress( driver_glVertexAttribI3i, glVertexAttribI3i, "glVertexAttribI3i" );
    if( driver_glVertexAttribI3i == NULL ) {
      driver_glVertexAttribI3i = missing_glVertexAttribI3i;
    }
    dt.glVertexAttribI3i = MakeRegalProc(loader_glVertexAttribI3i,layer);
    _getProcAddress( driver_glVertexAttribI3iv, glVertexAttribI3iv, "glVertexAttribI3iv" );
    if( driver_glVertexAttribI3iv == NULL ) {
      driver_glVertexAttribI3iv = missing_glVertexAttribI3iv;
    }
    dt.glVertexAttribI3iv = MakeRegalProc(loader_glVertexAttribI3iv,layer);
    _getProcAddress( driver_glVertexAttribI3ui, glVertexAttribI3ui, "glVertexAttribI3ui" );
    if( driver_glVertexAttribI3ui == NULL ) {
      driver_glVertexAttribI3ui = missing_glVertexAttribI3ui;
    }
    dt.glVertexAttribI3ui = MakeRegalProc(loader_glVertexAttribI3ui,layer);
    _getProcAddress( driver_glVertexAttribI3uiv, glVertexAttribI3uiv, "glVertexAttribI3uiv" );
    if( driver_glVertexAttribI3uiv == NULL ) {
      driver_glVertexAttribI3uiv = missing_glVertexAttribI3uiv;
    }
    dt.glVertexAttribI3uiv = MakeRegalProc(loader_glVertexAttribI3uiv,layer);
    _getProcAddress( driver_glVertexAttribI4bv, glVertexAttribI4bv, "glVertexAttribI4bv" );
    if( driver_glVertexAttribI4bv == NULL ) {
      driver_glVertexAttribI4bv = missing_glVertexAttribI4bv;
    }
    dt.glVertexAttribI4bv = MakeRegalProc(loader_glVertexAttribI4bv,layer);
    _getProcAddress( driver_glVertexAttribI4i, glVertexAttribI4i, "glVertexAttribI4i" );
    if( driver_glVertexAttribI4i == NULL ) {
      driver_glVertexAttribI4i = missing_glVertexAttribI4i;
    }
    dt.glVertexAttribI4i = MakeRegalProc(loader_glVertexAttribI4i,layer);
    _getProcAddress( driver_glVertexAttribI4iv, glVertexAttribI4iv, "glVertexAttribI4iv" );
    if( driver_glVertexAttribI4iv == NULL ) {
      driver_glVertexAttribI4iv = missing_glVertexAttribI4iv;
    }
    dt.glVertexAttribI4iv = MakeRegalProc(loader_glVertexAttribI4iv,layer);
    _getProcAddress( driver_glVertexAttribI4sv, glVertexAttribI4sv, "glVertexAttribI4sv" );
    if( driver_glVertexAttribI4sv == NULL ) {
      driver_glVertexAttribI4sv = missing_glVertexAttribI4sv;
    }
    dt.glVertexAttribI4sv = MakeRegalProc(loader_glVertexAttribI4sv,layer);
    _getProcAddress( driver_glVertexAttribI4ubv, glVertexAttribI4ubv, "glVertexAttribI4ubv" );
    if( driver_glVertexAttribI4ubv == NULL ) {
      driver_glVertexAttribI4ubv = missing_glVertexAttribI4ubv;
    }
    dt.glVertexAttribI4ubv = MakeRegalProc(loader_glVertexAttribI4ubv,layer);
    _getProcAddress( driver_glVertexAttribI4ui, glVertexAttribI4ui, "glVertexAttribI4ui" );
    if( driver_glVertexAttribI4ui == NULL ) {
      driver_glVertexAttribI4ui = missing_glVertexAttribI4ui;
    }
    dt.glVertexAttribI4ui = MakeRegalProc(loader_glVertexAttribI4ui,layer);
    _getProcAddress( driver_glVertexAttribI4uiv, glVertexAttribI4uiv, "glVertexAttribI4uiv" );
    if( driver_glVertexAttribI4uiv == NULL ) {
      driver_glVertexAttribI4uiv = missing_glVertexAttribI4uiv;
    }
    dt.glVertexAttribI4uiv = MakeRegalProc(loader_glVertexAttribI4uiv,layer);
    _getProcAddress( driver_glVertexAttribI4usv, glVertexAttribI4usv, "glVertexAttribI4usv" );
    if( driver_glVertexAttribI4usv == NULL ) {
      driver_glVertexAttribI4usv = missing_glVertexAttribI4usv;
    }
    dt.glVertexAttribI4usv = MakeRegalProc(loader_glVertexAttribI4usv,layer);
    _getProcAddress( driver_glVertexAttribIPointer, glVertexAttribIPointer, "glVertexAttribIPointer" );
    if( driver_glVertexAttribIPointer == NULL ) {
      driver_glVertexAttribIPointer = missing_glVertexAttribIPointer;
    }
    dt.glVertexAttribIPointer = MakeRegalProc(loader_glVertexAttribIPointer,layer);

    // GL_VERSION_3_1

    _getProcAddress( driver_glDrawArraysInstanced, glDrawArraysInstanced, "glDrawArraysInstanced" );
    if( driver_glDrawArraysInstanced == NULL ) {
      driver_glDrawArraysInstanced = missing_glDrawArraysInstanced;
    }
    dt.glDrawArraysInstanced = MakeRegalProc(loader_glDrawArraysInstanced,layer);
    _getProcAddress( driver_glDrawElementsInstanced, glDrawElementsInstanced, "glDrawElementsInstanced" );
    if( driver_glDrawElementsInstanced == NULL ) {
      driver_glDrawElementsInstanced = missing_glDrawElementsInstanced;
    }
    dt.glDrawElementsInstanced = MakeRegalProc(loader_glDrawElementsInstanced,layer);
    _getProcAddress( driver_glPrimitiveRestartIndex, glPrimitiveRestartIndex, "glPrimitiveRestartIndex" );
    if( driver_glPrimitiveRestartIndex == NULL ) {
      driver_glPrimitiveRestartIndex = missing_glPrimitiveRestartIndex;
    }
    dt.glPrimitiveRestartIndex = MakeRegalProc(loader_glPrimitiveRestartIndex,layer);
    _getProcAddress( driver_glTexBuffer, glTexBuffer, "glTexBuffer" );
    if( driver_glTexBuffer == NULL ) {
      driver_glTexBuffer = missing_glTexBuffer;
    }
    dt.glTexBuffer = MakeRegalProc(loader_glTexBuffer,layer);

    // GL_VERSION_3_2

    _getProcAddress( driver_glFramebufferTexture, glFramebufferTexture, "glFramebufferTexture" );
    if( driver_glFramebufferTexture == NULL ) {
      driver_glFramebufferTexture = missing_glFramebufferTexture;
    }
    dt.glFramebufferTexture = MakeRegalProc(loader_glFramebufferTexture,layer);
    _getProcAddress( driver_glFramebufferTextureFace, glFramebufferTextureFace, "glFramebufferTextureFace" );
    if( driver_glFramebufferTextureFace == NULL ) {
      driver_glFramebufferTextureFace = missing_glFramebufferTextureFace;
    }
    dt.glFramebufferTextureFace = MakeRegalProc(loader_glFramebufferTextureFace,layer);
    _getProcAddress( driver_glGetBufferParameteri64v, glGetBufferParameteri64v, "glGetBufferParameteri64v" );
    if( driver_glGetBufferParameteri64v == NULL ) {
      driver_glGetBufferParameteri64v = missing_glGetBufferParameteri64v;
    }
    dt.glGetBufferParameteri64v = MakeRegalProc(loader_glGetBufferParameteri64v,layer);
    _getProcAddress( driver_glGetInteger64i_v, glGetInteger64i_v, "glGetInteger64i_v" );
    if( driver_glGetInteger64i_v == NULL ) {
      driver_glGetInteger64i_v = missing_glGetInteger64i_v;
    }
    dt.glGetInteger64i_v = MakeRegalProc(loader_glGetInteger64i_v,layer);

    // GL_VERSION_3_3

    _getProcAddress( driver_glVertexAttribDivisor, glVertexAttribDivisor, "glVertexAttribDivisor" );
    if( driver_glVertexAttribDivisor == NULL ) {
      driver_glVertexAttribDivisor = missing_glVertexAttribDivisor;
    }
    dt.glVertexAttribDivisor = MakeRegalProc(loader_glVertexAttribDivisor,layer);

    // GL_VERSION_4_0

    _getProcAddress( driver_glBlendEquationSeparatei, glBlendEquationSeparatei, "glBlendEquationSeparatei" );
    if( driver_glBlendEquationSeparatei == NULL ) {
      driver_glBlendEquationSeparatei = missing_glBlendEquationSeparatei;
    }
    dt.glBlendEquationSeparatei = MakeRegalProc(loader_glBlendEquationSeparatei,layer);
    _getProcAddress( driver_glBlendEquationi, glBlendEquationi, "glBlendEquationi" );
    if( driver_glBlendEquationi == NULL ) {
      driver_glBlendEquationi = missing_glBlendEquationi;
    }
    dt.glBlendEquationi = MakeRegalProc(loader_glBlendEquationi,layer);
    _getProcAddress( driver_glBlendFuncSeparatei, glBlendFuncSeparatei, "glBlendFuncSeparatei" );
    if( driver_glBlendFuncSeparatei == NULL ) {
      driver_glBlendFuncSeparatei = missing_glBlendFuncSeparatei;
    }
    dt.glBlendFuncSeparatei = MakeRegalProc(loader_glBlendFuncSeparatei,layer);
    _getProcAddress( driver_glBlendFunci, glBlendFunci, "glBlendFunci" );
    if( driver_glBlendFunci == NULL ) {
      driver_glBlendFunci = missing_glBlendFunci;
    }
    dt.glBlendFunci = MakeRegalProc(loader_glBlendFunci,layer);

    // GL_3DFX_tbuffer

    _getProcAddress( driver_glTbufferMask3DFX, glTbufferMask3DFX, "glTbufferMask3DFX" );
    if( driver_glTbufferMask3DFX == NULL ) {
      driver_glTbufferMask3DFX = missing_glTbufferMask3DFX;
    }
    dt.glTbufferMask3DFX = MakeRegalProc(loader_glTbufferMask3DFX,layer);

    // GL_AMD_debug_output

    _getProcAddress( driver_glDebugMessageCallbackAMD, glDebugMessageCallbackAMD, "glDebugMessageCallbackAMD" );
    if( driver_glDebugMessageCallbackAMD == NULL ) {
      driver_glDebugMessageCallbackAMD = missing_glDebugMessageCallbackAMD;
    }
    dt.glDebugMessageCallbackAMD = MakeRegalProc(loader_glDebugMessageCallbackAMD,layer);
    _getProcAddress( driver_glDebugMessageEnableAMD, glDebugMessageEnableAMD, "glDebugMessageEnableAMD" );
    if( driver_glDebugMessageEnableAMD == NULL ) {
      driver_glDebugMessageEnableAMD = missing_glDebugMessageEnableAMD;
    }
    dt.glDebugMessageEnableAMD = MakeRegalProc(loader_glDebugMessageEnableAMD,layer);
    _getProcAddress( driver_glDebugMessageInsertAMD, glDebugMessageInsertAMD, "glDebugMessageInsertAMD" );
    if( driver_glDebugMessageInsertAMD == NULL ) {
      driver_glDebugMessageInsertAMD = missing_glDebugMessageInsertAMD;
    }
    dt.glDebugMessageInsertAMD = MakeRegalProc(loader_glDebugMessageInsertAMD,layer);
    _getProcAddress( driver_glGetDebugMessageLogAMD, glGetDebugMessageLogAMD, "glGetDebugMessageLogAMD" );
    if( driver_glGetDebugMessageLogAMD == NULL ) {
      driver_glGetDebugMessageLogAMD = missing_glGetDebugMessageLogAMD;
    }
    dt.glGetDebugMessageLogAMD = MakeRegalProc(loader_glGetDebugMessageLogAMD,layer);

    // GL_AMD_draw_buffers_blend

    _getProcAddress( driver_glBlendEquationIndexedAMD, glBlendEquationIndexedAMD, "glBlendEquationIndexedAMD" );
    if( driver_glBlendEquationIndexedAMD == NULL ) {
      driver_glBlendEquationIndexedAMD = missing_glBlendEquationIndexedAMD;
    }
    dt.glBlendEquationIndexedAMD = MakeRegalProc(loader_glBlendEquationIndexedAMD,layer);
    _getProcAddress( driver_glBlendEquationSeparateIndexedAMD, glBlendEquationSeparateIndexedAMD, "glBlendEquationSeparateIndexedAMD" );
    if( driver_glBlendEquationSeparateIndexedAMD == NULL ) {
      driver_glBlendEquationSeparateIndexedAMD = missing_glBlendEquationSeparateIndexedAMD;
    }
    dt.glBlendEquationSeparateIndexedAMD = MakeRegalProc(loader_glBlendEquationSeparateIndexedAMD,layer);
    _getProcAddress( driver_glBlendFuncIndexedAMD, glBlendFuncIndexedAMD, "glBlendFuncIndexedAMD" );
    if( driver_glBlendFuncIndexedAMD == NULL ) {
      driver_glBlendFuncIndexedAMD = missing_glBlendFuncIndexedAMD;
    }
    dt.glBlendFuncIndexedAMD = MakeRegalProc(loader_glBlendFuncIndexedAMD,layer);
    _getProcAddress( driver_glBlendFuncSeparateIndexedAMD, glBlendFuncSeparateIndexedAMD, "glBlendFuncSeparateIndexedAMD" );
    if( driver_glBlendFuncSeparateIndexedAMD == NULL ) {
      driver_glBlendFuncSeparateIndexedAMD = missing_glBlendFuncSeparateIndexedAMD;
    }
    dt.glBlendFuncSeparateIndexedAMD = MakeRegalProc(loader_glBlendFuncSeparateIndexedAMD,layer);

    // GL_AMD_interleaved_elements

    _getProcAddress( driver_glVertexAttribParameteriAMD, glVertexAttribParameteriAMD, "glVertexAttribParameteriAMD" );
    if( driver_glVertexAttribParameteriAMD == NULL ) {
      driver_glVertexAttribParameteriAMD = missing_glVertexAttribParameteriAMD;
    }
    dt.glVertexAttribParameteriAMD = MakeRegalProc(loader_glVertexAttribParameteriAMD,layer);

    // GL_AMD_multi_draw_indirect

    _getProcAddress( driver_glMultiDrawArraysIndirectAMD, glMultiDrawArraysIndirectAMD, "glMultiDrawArraysIndirectAMD" );
    if( driver_glMultiDrawArraysIndirectAMD == NULL ) {
      driver_glMultiDrawArraysIndirectAMD = missing_glMultiDrawArraysIndirectAMD;
    }
    dt.glMultiDrawArraysIndirectAMD = MakeRegalProc(loader_glMultiDrawArraysIndirectAMD,layer);
    _getProcAddress( driver_glMultiDrawElementsIndirectAMD, glMultiDrawElementsIndirectAMD, "glMultiDrawElementsIndirectAMD" );
    if( driver_glMultiDrawElementsIndirectAMD == NULL ) {
      driver_glMultiDrawElementsIndirectAMD = missing_glMultiDrawElementsIndirectAMD;
    }
    dt.glMultiDrawElementsIndirectAMD = MakeRegalProc(loader_glMultiDrawElementsIndirectAMD,layer);

    // GL_AMD_name_gen_delete

    _getProcAddress( driver_glDeleteNamesAMD, glDeleteNamesAMD, "glDeleteNamesAMD" );
    if( driver_glDeleteNamesAMD == NULL ) {
      driver_glDeleteNamesAMD = missing_glDeleteNamesAMD;
    }
    dt.glDeleteNamesAMD = MakeRegalProc(loader_glDeleteNamesAMD,layer);
    _getProcAddress( driver_glGenNamesAMD, glGenNamesAMD, "glGenNamesAMD" );
    if( driver_glGenNamesAMD == NULL ) {
      driver_glGenNamesAMD = missing_glGenNamesAMD;
    }
    dt.glGenNamesAMD = MakeRegalProc(loader_glGenNamesAMD,layer);
    _getProcAddress( driver_glIsNameAMD, glIsNameAMD, "glIsNameAMD" );
    if( driver_glIsNameAMD == NULL ) {
      driver_glIsNameAMD = missing_glIsNameAMD;
    }
    dt.glIsNameAMD = MakeRegalProc(loader_glIsNameAMD,layer);

    // GL_AMD_performance_monitor

    _getProcAddress( driver_glBeginPerfMonitorAMD, glBeginPerfMonitorAMD, "glBeginPerfMonitorAMD" );
    if( driver_glBeginPerfMonitorAMD == NULL ) {
      driver_glBeginPerfMonitorAMD = missing_glBeginPerfMonitorAMD;
    }
    dt.glBeginPerfMonitorAMD = MakeRegalProc(loader_glBeginPerfMonitorAMD,layer);
    _getProcAddress( driver_glDeletePerfMonitorsAMD, glDeletePerfMonitorsAMD, "glDeletePerfMonitorsAMD" );
    if( driver_glDeletePerfMonitorsAMD == NULL ) {
      driver_glDeletePerfMonitorsAMD = missing_glDeletePerfMonitorsAMD;
    }
    dt.glDeletePerfMonitorsAMD = MakeRegalProc(loader_glDeletePerfMonitorsAMD,layer);
    _getProcAddress( driver_glEndPerfMonitorAMD, glEndPerfMonitorAMD, "glEndPerfMonitorAMD" );
    if( driver_glEndPerfMonitorAMD == NULL ) {
      driver_glEndPerfMonitorAMD = missing_glEndPerfMonitorAMD;
    }
    dt.glEndPerfMonitorAMD = MakeRegalProc(loader_glEndPerfMonitorAMD,layer);
    _getProcAddress( driver_glGenPerfMonitorsAMD, glGenPerfMonitorsAMD, "glGenPerfMonitorsAMD" );
    if( driver_glGenPerfMonitorsAMD == NULL ) {
      driver_glGenPerfMonitorsAMD = missing_glGenPerfMonitorsAMD;
    }
    dt.glGenPerfMonitorsAMD = MakeRegalProc(loader_glGenPerfMonitorsAMD,layer);
    _getProcAddress( driver_glGetPerfMonitorCounterDataAMD, glGetPerfMonitorCounterDataAMD, "glGetPerfMonitorCounterDataAMD" );
    if( driver_glGetPerfMonitorCounterDataAMD == NULL ) {
      driver_glGetPerfMonitorCounterDataAMD = missing_glGetPerfMonitorCounterDataAMD;
    }
    dt.glGetPerfMonitorCounterDataAMD = MakeRegalProc(loader_glGetPerfMonitorCounterDataAMD,layer);
    _getProcAddress( driver_glGetPerfMonitorCounterInfoAMD, glGetPerfMonitorCounterInfoAMD, "glGetPerfMonitorCounterInfoAMD" );
    if( driver_glGetPerfMonitorCounterInfoAMD == NULL ) {
      driver_glGetPerfMonitorCounterInfoAMD = missing_glGetPerfMonitorCounterInfoAMD;
    }
    dt.glGetPerfMonitorCounterInfoAMD = MakeRegalProc(loader_glGetPerfMonitorCounterInfoAMD,layer);
    _getProcAddress( driver_glGetPerfMonitorCounterStringAMD, glGetPerfMonitorCounterStringAMD, "glGetPerfMonitorCounterStringAMD" );
    if( driver_glGetPerfMonitorCounterStringAMD == NULL ) {
      driver_glGetPerfMonitorCounterStringAMD = missing_glGetPerfMonitorCounterStringAMD;
    }
    dt.glGetPerfMonitorCounterStringAMD = MakeRegalProc(loader_glGetPerfMonitorCounterStringAMD,layer);
    _getProcAddress( driver_glGetPerfMonitorCountersAMD, glGetPerfMonitorCountersAMD, "glGetPerfMonitorCountersAMD" );
    if( driver_glGetPerfMonitorCountersAMD == NULL ) {
      driver_glGetPerfMonitorCountersAMD = missing_glGetPerfMonitorCountersAMD;
    }
    dt.glGetPerfMonitorCountersAMD = MakeRegalProc(loader_glGetPerfMonitorCountersAMD,layer);
    _getProcAddress( driver_glGetPerfMonitorGroupStringAMD, glGetPerfMonitorGroupStringAMD, "glGetPerfMonitorGroupStringAMD" );
    if( driver_glGetPerfMonitorGroupStringAMD == NULL ) {
      driver_glGetPerfMonitorGroupStringAMD = missing_glGetPerfMonitorGroupStringAMD;
    }
    dt.glGetPerfMonitorGroupStringAMD = MakeRegalProc(loader_glGetPerfMonitorGroupStringAMD,layer);
    _getProcAddress( driver_glGetPerfMonitorGroupsAMD, glGetPerfMonitorGroupsAMD, "glGetPerfMonitorGroupsAMD" );
    if( driver_glGetPerfMonitorGroupsAMD == NULL ) {
      driver_glGetPerfMonitorGroupsAMD = missing_glGetPerfMonitorGroupsAMD;
    }
    dt.glGetPerfMonitorGroupsAMD = MakeRegalProc(loader_glGetPerfMonitorGroupsAMD,layer);
    _getProcAddress( driver_glSelectPerfMonitorCountersAMD, glSelectPerfMonitorCountersAMD, "glSelectPerfMonitorCountersAMD" );
    if( driver_glSelectPerfMonitorCountersAMD == NULL ) {
      driver_glSelectPerfMonitorCountersAMD = missing_glSelectPerfMonitorCountersAMD;
    }
    dt.glSelectPerfMonitorCountersAMD = MakeRegalProc(loader_glSelectPerfMonitorCountersAMD,layer);

    // GL_AMD_sample_positions

    _getProcAddress( driver_glSetMultisamplefvAMD, glSetMultisamplefvAMD, "glSetMultisamplefvAMD" );
    if( driver_glSetMultisamplefvAMD == NULL ) {
      driver_glSetMultisamplefvAMD = missing_glSetMultisamplefvAMD;
    }
    dt.glSetMultisamplefvAMD = MakeRegalProc(loader_glSetMultisamplefvAMD,layer);

    // GL_AMD_sparse_texture

    _getProcAddress( driver_glTexStorageSparseAMD, glTexStorageSparseAMD, "glTexStorageSparseAMD" );
    if( driver_glTexStorageSparseAMD == NULL ) {
      driver_glTexStorageSparseAMD = missing_glTexStorageSparseAMD;
    }
    dt.glTexStorageSparseAMD = MakeRegalProc(loader_glTexStorageSparseAMD,layer);
    _getProcAddress( driver_glTextureStorageSparseAMD, glTextureStorageSparseAMD, "glTextureStorageSparseAMD" );
    if( driver_glTextureStorageSparseAMD == NULL ) {
      driver_glTextureStorageSparseAMD = missing_glTextureStorageSparseAMD;
    }
    dt.glTextureStorageSparseAMD = MakeRegalProc(loader_glTextureStorageSparseAMD,layer);

    // GL_AMD_stencil_operation_extended

    _getProcAddress( driver_glStencilOpValueAMD, glStencilOpValueAMD, "glStencilOpValueAMD" );
    if( driver_glStencilOpValueAMD == NULL ) {
      driver_glStencilOpValueAMD = missing_glStencilOpValueAMD;
    }
    dt.glStencilOpValueAMD = MakeRegalProc(loader_glStencilOpValueAMD,layer);

    // GL_AMD_vertex_shader_tessellator

    _getProcAddress( driver_glTessellationFactorAMD, glTessellationFactorAMD, "glTessellationFactorAMD" );
    if( driver_glTessellationFactorAMD == NULL ) {
      driver_glTessellationFactorAMD = missing_glTessellationFactorAMD;
    }
    dt.glTessellationFactorAMD = MakeRegalProc(loader_glTessellationFactorAMD,layer);
    _getProcAddress( driver_glTessellationModeAMD, glTessellationModeAMD, "glTessellationModeAMD" );
    if( driver_glTessellationModeAMD == NULL ) {
      driver_glTessellationModeAMD = missing_glTessellationModeAMD;
    }
    dt.glTessellationModeAMD = MakeRegalProc(loader_glTessellationModeAMD,layer);

    // GL_ANGLE_framebuffer_blit

    _getProcAddress( driver_glBlitFramebufferANGLE, glBlitFramebufferANGLE, "glBlitFramebufferANGLE" );
    if( driver_glBlitFramebufferANGLE == NULL ) {
      driver_glBlitFramebufferANGLE = missing_glBlitFramebufferANGLE;
    }
    dt.glBlitFramebufferANGLE = MakeRegalProc(loader_glBlitFramebufferANGLE,layer);

    // GL_ANGLE_framebuffer_multisample

    _getProcAddress( driver_glRenderbufferStorageMultisampleANGLE, glRenderbufferStorageMultisampleANGLE, "glRenderbufferStorageMultisampleANGLE" );
    if( driver_glRenderbufferStorageMultisampleANGLE == NULL ) {
      driver_glRenderbufferStorageMultisampleANGLE = missing_glRenderbufferStorageMultisampleANGLE;
    }
    dt.glRenderbufferStorageMultisampleANGLE = MakeRegalProc(loader_glRenderbufferStorageMultisampleANGLE,layer);

    // GL_ANGLE_instanced_arrays

    _getProcAddress( driver_glDrawArraysInstancedANGLE, glDrawArraysInstancedANGLE, "glDrawArraysInstancedANGLE" );
    if( driver_glDrawArraysInstancedANGLE == NULL ) {
      driver_glDrawArraysInstancedANGLE = missing_glDrawArraysInstancedANGLE;
    }
    dt.glDrawArraysInstancedANGLE = MakeRegalProc(loader_glDrawArraysInstancedANGLE,layer);
    _getProcAddress( driver_glDrawElementsInstancedANGLE, glDrawElementsInstancedANGLE, "glDrawElementsInstancedANGLE" );
    if( driver_glDrawElementsInstancedANGLE == NULL ) {
      driver_glDrawElementsInstancedANGLE = missing_glDrawElementsInstancedANGLE;
    }
    dt.glDrawElementsInstancedANGLE = MakeRegalProc(loader_glDrawElementsInstancedANGLE,layer);
    _getProcAddress( driver_glVertexAttribDivisorANGLE, glVertexAttribDivisorANGLE, "glVertexAttribDivisorANGLE" );
    if( driver_glVertexAttribDivisorANGLE == NULL ) {
      driver_glVertexAttribDivisorANGLE = missing_glVertexAttribDivisorANGLE;
    }
    dt.glVertexAttribDivisorANGLE = MakeRegalProc(loader_glVertexAttribDivisorANGLE,layer);

    // GL_ANGLE_timer_query

    _getProcAddress( driver_glBeginQueryANGLE, glBeginQueryANGLE, "glBeginQueryANGLE" );
    if( driver_glBeginQueryANGLE == NULL ) {
      driver_glBeginQueryANGLE = missing_glBeginQueryANGLE;
    }
    dt.glBeginQueryANGLE = MakeRegalProc(loader_glBeginQueryANGLE,layer);
    _getProcAddress( driver_glDeleteQueriesANGLE, glDeleteQueriesANGLE, "glDeleteQueriesANGLE" );
    if( driver_glDeleteQueriesANGLE == NULL ) {
      driver_glDeleteQueriesANGLE = missing_glDeleteQueriesANGLE;
    }
    dt.glDeleteQueriesANGLE = MakeRegalProc(loader_glDeleteQueriesANGLE,layer);
    _getProcAddress( driver_glEndQueryANGLE, glEndQueryANGLE, "glEndQueryANGLE" );
    if( driver_glEndQueryANGLE == NULL ) {
      driver_glEndQueryANGLE = missing_glEndQueryANGLE;
    }
    dt.glEndQueryANGLE = MakeRegalProc(loader_glEndQueryANGLE,layer);
    _getProcAddress( driver_glGenQueriesANGLE, glGenQueriesANGLE, "glGenQueriesANGLE" );
    if( driver_glGenQueriesANGLE == NULL ) {
      driver_glGenQueriesANGLE = missing_glGenQueriesANGLE;
    }
    dt.glGenQueriesANGLE = MakeRegalProc(loader_glGenQueriesANGLE,layer);
    _getProcAddress( driver_glGetQueryObjecti64vANGLE, glGetQueryObjecti64vANGLE, "glGetQueryObjecti64vANGLE" );
    if( driver_glGetQueryObjecti64vANGLE == NULL ) {
      driver_glGetQueryObjecti64vANGLE = missing_glGetQueryObjecti64vANGLE;
    }
    dt.glGetQueryObjecti64vANGLE = MakeRegalProc(loader_glGetQueryObjecti64vANGLE,layer);
    _getProcAddress( driver_glGetQueryObjectivANGLE, glGetQueryObjectivANGLE, "glGetQueryObjectivANGLE" );
    if( driver_glGetQueryObjectivANGLE == NULL ) {
      driver_glGetQueryObjectivANGLE = missing_glGetQueryObjectivANGLE;
    }
    dt.glGetQueryObjectivANGLE = MakeRegalProc(loader_glGetQueryObjectivANGLE,layer);
    _getProcAddress( driver_glGetQueryObjectui64vANGLE, glGetQueryObjectui64vANGLE, "glGetQueryObjectui64vANGLE" );
    if( driver_glGetQueryObjectui64vANGLE == NULL ) {
      driver_glGetQueryObjectui64vANGLE = missing_glGetQueryObjectui64vANGLE;
    }
    dt.glGetQueryObjectui64vANGLE = MakeRegalProc(loader_glGetQueryObjectui64vANGLE,layer);
    _getProcAddress( driver_glGetQueryObjectuivANGLE, glGetQueryObjectuivANGLE, "glGetQueryObjectuivANGLE" );
    if( driver_glGetQueryObjectuivANGLE == NULL ) {
      driver_glGetQueryObjectuivANGLE = missing_glGetQueryObjectuivANGLE;
    }
    dt.glGetQueryObjectuivANGLE = MakeRegalProc(loader_glGetQueryObjectuivANGLE,layer);
    _getProcAddress( driver_glGetQueryivANGLE, glGetQueryivANGLE, "glGetQueryivANGLE" );
    if( driver_glGetQueryivANGLE == NULL ) {
      driver_glGetQueryivANGLE = missing_glGetQueryivANGLE;
    }
    dt.glGetQueryivANGLE = MakeRegalProc(loader_glGetQueryivANGLE,layer);
    _getProcAddress( driver_glIsQueryANGLE, glIsQueryANGLE, "glIsQueryANGLE" );
    if( driver_glIsQueryANGLE == NULL ) {
      driver_glIsQueryANGLE = missing_glIsQueryANGLE;
    }
    dt.glIsQueryANGLE = MakeRegalProc(loader_glIsQueryANGLE,layer);
    _getProcAddress( driver_glQueryCounterANGLE, glQueryCounterANGLE, "glQueryCounterANGLE" );
    if( driver_glQueryCounterANGLE == NULL ) {
      driver_glQueryCounterANGLE = missing_glQueryCounterANGLE;
    }
    dt.glQueryCounterANGLE = MakeRegalProc(loader_glQueryCounterANGLE,layer);

    // GL_ANGLE_translated_shader_source

    _getProcAddress( driver_glGetTranslatedShaderSourceANGLE, glGetTranslatedShaderSourceANGLE, "glGetTranslatedShaderSourceANGLE" );
    if( driver_glGetTranslatedShaderSourceANGLE == NULL ) {
      driver_glGetTranslatedShaderSourceANGLE = missing_glGetTranslatedShaderSourceANGLE;
    }
    dt.glGetTranslatedShaderSourceANGLE = MakeRegalProc(loader_glGetTranslatedShaderSourceANGLE,layer);

    // GL_APPLE_copy_texture_levels

    _getProcAddress( driver_glCopyTextureLevelsAPPLE, glCopyTextureLevelsAPPLE, "glCopyTextureLevelsAPPLE" );
    if( driver_glCopyTextureLevelsAPPLE == NULL ) {
      driver_glCopyTextureLevelsAPPLE = missing_glCopyTextureLevelsAPPLE;
    }
    dt.glCopyTextureLevelsAPPLE = MakeRegalProc(loader_glCopyTextureLevelsAPPLE,layer);

    // GL_APPLE_element_array

    _getProcAddress( driver_glDrawElementArrayAPPLE, glDrawElementArrayAPPLE, "glDrawElementArrayAPPLE" );
    if( driver_glDrawElementArrayAPPLE == NULL ) {
      driver_glDrawElementArrayAPPLE = missing_glDrawElementArrayAPPLE;
    }
    dt.glDrawElementArrayAPPLE = MakeRegalProc(loader_glDrawElementArrayAPPLE,layer);
    _getProcAddress( driver_glDrawRangeElementArrayAPPLE, glDrawRangeElementArrayAPPLE, "glDrawRangeElementArrayAPPLE" );
    if( driver_glDrawRangeElementArrayAPPLE == NULL ) {
      driver_glDrawRangeElementArrayAPPLE = missing_glDrawRangeElementArrayAPPLE;
    }
    dt.glDrawRangeElementArrayAPPLE = MakeRegalProc(loader_glDrawRangeElementArrayAPPLE,layer);
    _getProcAddress( driver_glElementPointerAPPLE, glElementPointerAPPLE, "glElementPointerAPPLE" );
    if( driver_glElementPointerAPPLE == NULL ) {
      driver_glElementPointerAPPLE = missing_glElementPointerAPPLE;
    }
    dt.glElementPointerAPPLE = MakeRegalProc(loader_glElementPointerAPPLE,layer);
    _getProcAddress( driver_glMultiDrawElementArrayAPPLE, glMultiDrawElementArrayAPPLE, "glMultiDrawElementArrayAPPLE" );
    if( driver_glMultiDrawElementArrayAPPLE == NULL ) {
      driver_glMultiDrawElementArrayAPPLE = missing_glMultiDrawElementArrayAPPLE;
    }
    dt.glMultiDrawElementArrayAPPLE = MakeRegalProc(loader_glMultiDrawElementArrayAPPLE,layer);
    _getProcAddress( driver_glMultiDrawRangeElementArrayAPPLE, glMultiDrawRangeElementArrayAPPLE, "glMultiDrawRangeElementArrayAPPLE" );
    if( driver_glMultiDrawRangeElementArrayAPPLE == NULL ) {
      driver_glMultiDrawRangeElementArrayAPPLE = missing_glMultiDrawRangeElementArrayAPPLE;
    }
    dt.glMultiDrawRangeElementArrayAPPLE = MakeRegalProc(loader_glMultiDrawRangeElementArrayAPPLE,layer);

    // GL_APPLE_fence

    _getProcAddress( driver_glDeleteFencesAPPLE, glDeleteFencesAPPLE, "glDeleteFencesAPPLE" );
    if( driver_glDeleteFencesAPPLE == NULL ) {
      driver_glDeleteFencesAPPLE = missing_glDeleteFencesAPPLE;
    }
    dt.glDeleteFencesAPPLE = MakeRegalProc(loader_glDeleteFencesAPPLE,layer);
    _getProcAddress( driver_glFinishFenceAPPLE, glFinishFenceAPPLE, "glFinishFenceAPPLE" );
    if( driver_glFinishFenceAPPLE == NULL ) {
      driver_glFinishFenceAPPLE = missing_glFinishFenceAPPLE;
    }
    dt.glFinishFenceAPPLE = MakeRegalProc(loader_glFinishFenceAPPLE,layer);
    _getProcAddress( driver_glFinishObjectAPPLE, glFinishObjectAPPLE, "glFinishObjectAPPLE" );
    if( driver_glFinishObjectAPPLE == NULL ) {
      driver_glFinishObjectAPPLE = missing_glFinishObjectAPPLE;
    }
    dt.glFinishObjectAPPLE = MakeRegalProc(loader_glFinishObjectAPPLE,layer);
    _getProcAddress( driver_glGenFencesAPPLE, glGenFencesAPPLE, "glGenFencesAPPLE" );
    if( driver_glGenFencesAPPLE == NULL ) {
      driver_glGenFencesAPPLE = missing_glGenFencesAPPLE;
    }
    dt.glGenFencesAPPLE = MakeRegalProc(loader_glGenFencesAPPLE,layer);
    _getProcAddress( driver_glIsFenceAPPLE, glIsFenceAPPLE, "glIsFenceAPPLE" );
    if( driver_glIsFenceAPPLE == NULL ) {
      driver_glIsFenceAPPLE = missing_glIsFenceAPPLE;
    }
    dt.glIsFenceAPPLE = MakeRegalProc(loader_glIsFenceAPPLE,layer);
    _getProcAddress( driver_glSetFenceAPPLE, glSetFenceAPPLE, "glSetFenceAPPLE" );
    if( driver_glSetFenceAPPLE == NULL ) {
      driver_glSetFenceAPPLE = missing_glSetFenceAPPLE;
    }
    dt.glSetFenceAPPLE = MakeRegalProc(loader_glSetFenceAPPLE,layer);
    _getProcAddress( driver_glTestFenceAPPLE, glTestFenceAPPLE, "glTestFenceAPPLE" );
    if( driver_glTestFenceAPPLE == NULL ) {
      driver_glTestFenceAPPLE = missing_glTestFenceAPPLE;
    }
    dt.glTestFenceAPPLE = MakeRegalProc(loader_glTestFenceAPPLE,layer);
    _getProcAddress( driver_glTestObjectAPPLE, glTestObjectAPPLE, "glTestObjectAPPLE" );
    if( driver_glTestObjectAPPLE == NULL ) {
      driver_glTestObjectAPPLE = missing_glTestObjectAPPLE;
    }
    dt.glTestObjectAPPLE = MakeRegalProc(loader_glTestObjectAPPLE,layer);

    // GL_APPLE_flush_buffer_range

    _getProcAddress( driver_glBufferParameteriAPPLE, glBufferParameteriAPPLE, "glBufferParameteriAPPLE" );
    if( driver_glBufferParameteriAPPLE == NULL ) {
      driver_glBufferParameteriAPPLE = missing_glBufferParameteriAPPLE;
    }
    dt.glBufferParameteriAPPLE = MakeRegalProc(loader_glBufferParameteriAPPLE,layer);
    _getProcAddress( driver_glFlushMappedBufferRangeAPPLE, glFlushMappedBufferRangeAPPLE, "glFlushMappedBufferRangeAPPLE" );
    if( driver_glFlushMappedBufferRangeAPPLE == NULL ) {
      driver_glFlushMappedBufferRangeAPPLE = missing_glFlushMappedBufferRangeAPPLE;
    }
    dt.glFlushMappedBufferRangeAPPLE = MakeRegalProc(loader_glFlushMappedBufferRangeAPPLE,layer);

    // GL_APPLE_flush_render

    _getProcAddress( driver_glFinishRenderAPPLE, glFinishRenderAPPLE, "glFinishRenderAPPLE" );
    if( driver_glFinishRenderAPPLE == NULL ) {
      driver_glFinishRenderAPPLE = missing_glFinishRenderAPPLE;
    }
    dt.glFinishRenderAPPLE = MakeRegalProc(loader_glFinishRenderAPPLE,layer);
    _getProcAddress( driver_glFlushRenderAPPLE, glFlushRenderAPPLE, "glFlushRenderAPPLE" );
    if( driver_glFlushRenderAPPLE == NULL ) {
      driver_glFlushRenderAPPLE = missing_glFlushRenderAPPLE;
    }
    dt.glFlushRenderAPPLE = MakeRegalProc(loader_glFlushRenderAPPLE,layer);
    _getProcAddress( driver_glSwapAPPLE, glSwapAPPLE, "glSwapAPPLE" );
    if( driver_glSwapAPPLE == NULL ) {
      driver_glSwapAPPLE = missing_glSwapAPPLE;
    }
    dt.glSwapAPPLE = MakeRegalProc(loader_glSwapAPPLE,layer);

    // GL_APPLE_framebuffer_multisample

    _getProcAddress( driver_glRenderbufferStorageMultisampleAPPLE, glRenderbufferStorageMultisampleAPPLE, "glRenderbufferStorageMultisampleAPPLE" );
    if( driver_glRenderbufferStorageMultisampleAPPLE == NULL ) {
      driver_glRenderbufferStorageMultisampleAPPLE = missing_glRenderbufferStorageMultisampleAPPLE;
    }
    dt.glRenderbufferStorageMultisampleAPPLE = MakeRegalProc(loader_glRenderbufferStorageMultisampleAPPLE,layer);
    _getProcAddress( driver_glResolveMultisampleFramebufferAPPLE, glResolveMultisampleFramebufferAPPLE, "glResolveMultisampleFramebufferAPPLE" );
    if( driver_glResolveMultisampleFramebufferAPPLE == NULL ) {
      driver_glResolveMultisampleFramebufferAPPLE = missing_glResolveMultisampleFramebufferAPPLE;
    }
    dt.glResolveMultisampleFramebufferAPPLE = MakeRegalProc(loader_glResolveMultisampleFramebufferAPPLE,layer);

    // GL_APPLE_object_purgeable

    _getProcAddress( driver_glGetObjectParameterivAPPLE, glGetObjectParameterivAPPLE, "glGetObjectParameterivAPPLE" );
    if( driver_glGetObjectParameterivAPPLE == NULL ) {
      driver_glGetObjectParameterivAPPLE = missing_glGetObjectParameterivAPPLE;
    }
    dt.glGetObjectParameterivAPPLE = MakeRegalProc(loader_glGetObjectParameterivAPPLE,layer);
    _getProcAddress( driver_glObjectPurgeableAPPLE, glObjectPurgeableAPPLE, "glObjectPurgeableAPPLE" );
    if( driver_glObjectPurgeableAPPLE == NULL ) {
      driver_glObjectPurgeableAPPLE = missing_glObjectPurgeableAPPLE;
    }
    dt.glObjectPurgeableAPPLE = MakeRegalProc(loader_glObjectPurgeableAPPLE,layer);
    _getProcAddress( driver_glObjectUnpurgeableAPPLE, glObjectUnpurgeableAPPLE, "glObjectUnpurgeableAPPLE" );
    if( driver_glObjectUnpurgeableAPPLE == NULL ) {
      driver_glObjectUnpurgeableAPPLE = missing_glObjectUnpurgeableAPPLE;
    }
    dt.glObjectUnpurgeableAPPLE = MakeRegalProc(loader_glObjectUnpurgeableAPPLE,layer);

    // GL_APPLE_sync

    _getProcAddress( driver_glClientWaitSyncAPPLE, glClientWaitSyncAPPLE, "glClientWaitSyncAPPLE" );
    if( driver_glClientWaitSyncAPPLE == NULL ) {
      driver_glClientWaitSyncAPPLE = missing_glClientWaitSyncAPPLE;
    }
    dt.glClientWaitSyncAPPLE = MakeRegalProc(loader_glClientWaitSyncAPPLE,layer);
    _getProcAddress( driver_glDeleteSyncAPPLE, glDeleteSyncAPPLE, "glDeleteSyncAPPLE" );
    if( driver_glDeleteSyncAPPLE == NULL ) {
      driver_glDeleteSyncAPPLE = missing_glDeleteSyncAPPLE;
    }
    dt.glDeleteSyncAPPLE = MakeRegalProc(loader_glDeleteSyncAPPLE,layer);
    _getProcAddress( driver_glFenceSyncAPPLE, glFenceSyncAPPLE, "glFenceSyncAPPLE" );
    if( driver_glFenceSyncAPPLE == NULL ) {
      driver_glFenceSyncAPPLE = missing_glFenceSyncAPPLE;
    }
    dt.glFenceSyncAPPLE = MakeRegalProc(loader_glFenceSyncAPPLE,layer);
    _getProcAddress( driver_glGetInteger64vAPPLE, glGetInteger64vAPPLE, "glGetInteger64vAPPLE" );
    if( driver_glGetInteger64vAPPLE == NULL ) {
      driver_glGetInteger64vAPPLE = missing_glGetInteger64vAPPLE;
    }
    dt.glGetInteger64vAPPLE = MakeRegalProc(loader_glGetInteger64vAPPLE,layer);
    _getProcAddress( driver_glGetSyncivAPPLE, glGetSyncivAPPLE, "glGetSyncivAPPLE" );
    if( driver_glGetSyncivAPPLE == NULL ) {
      driver_glGetSyncivAPPLE = missing_glGetSyncivAPPLE;
    }
    dt.glGetSyncivAPPLE = MakeRegalProc(loader_glGetSyncivAPPLE,layer);
    _getProcAddress( driver_glIsSyncAPPLE, glIsSyncAPPLE, "glIsSyncAPPLE" );
    if( driver_glIsSyncAPPLE == NULL ) {
      driver_glIsSyncAPPLE = missing_glIsSyncAPPLE;
    }
    dt.glIsSyncAPPLE = MakeRegalProc(loader_glIsSyncAPPLE,layer);
    _getProcAddress( driver_glWaitSyncAPPLE, glWaitSyncAPPLE, "glWaitSyncAPPLE" );
    if( driver_glWaitSyncAPPLE == NULL ) {
      driver_glWaitSyncAPPLE = missing_glWaitSyncAPPLE;
    }
    dt.glWaitSyncAPPLE = MakeRegalProc(loader_glWaitSyncAPPLE,layer);

    // GL_APPLE_texture_range

    _getProcAddress( driver_glGetTexParameterPointervAPPLE, glGetTexParameterPointervAPPLE, "glGetTexParameterPointervAPPLE" );
    if( driver_glGetTexParameterPointervAPPLE == NULL ) {
      driver_glGetTexParameterPointervAPPLE = missing_glGetTexParameterPointervAPPLE;
    }
    dt.glGetTexParameterPointervAPPLE = MakeRegalProc(loader_glGetTexParameterPointervAPPLE,layer);
    _getProcAddress( driver_glTextureRangeAPPLE, glTextureRangeAPPLE, "glTextureRangeAPPLE" );
    if( driver_glTextureRangeAPPLE == NULL ) {
      driver_glTextureRangeAPPLE = missing_glTextureRangeAPPLE;
    }
    dt.glTextureRangeAPPLE = MakeRegalProc(loader_glTextureRangeAPPLE,layer);

    // GL_APPLE_vertex_array_object

    _getProcAddress( driver_glBindVertexArrayAPPLE, glBindVertexArrayAPPLE, "glBindVertexArrayAPPLE" );
    if( driver_glBindVertexArrayAPPLE == NULL ) {
      driver_glBindVertexArrayAPPLE = missing_glBindVertexArrayAPPLE;
    }
    dt.glBindVertexArrayAPPLE = MakeRegalProc(loader_glBindVertexArrayAPPLE,layer);
    _getProcAddress( driver_glDeleteVertexArraysAPPLE, glDeleteVertexArraysAPPLE, "glDeleteVertexArraysAPPLE" );
    if( driver_glDeleteVertexArraysAPPLE == NULL ) {
      driver_glDeleteVertexArraysAPPLE = missing_glDeleteVertexArraysAPPLE;
    }
    dt.glDeleteVertexArraysAPPLE = MakeRegalProc(loader_glDeleteVertexArraysAPPLE,layer);
    _getProcAddress( driver_glGenVertexArraysAPPLE, glGenVertexArraysAPPLE, "glGenVertexArraysAPPLE" );
    if( driver_glGenVertexArraysAPPLE == NULL ) {
      driver_glGenVertexArraysAPPLE = missing_glGenVertexArraysAPPLE;
    }
    dt.glGenVertexArraysAPPLE = MakeRegalProc(loader_glGenVertexArraysAPPLE,layer);
    _getProcAddress( driver_glIsVertexArrayAPPLE, glIsVertexArrayAPPLE, "glIsVertexArrayAPPLE" );
    if( driver_glIsVertexArrayAPPLE == NULL ) {
      driver_glIsVertexArrayAPPLE = missing_glIsVertexArrayAPPLE;
    }
    dt.glIsVertexArrayAPPLE = MakeRegalProc(loader_glIsVertexArrayAPPLE,layer);

    // GL_APPLE_vertex_array_range

    _getProcAddress( driver_glFlushVertexArrayRangeAPPLE, glFlushVertexArrayRangeAPPLE, "glFlushVertexArrayRangeAPPLE" );
    if( driver_glFlushVertexArrayRangeAPPLE == NULL ) {
      driver_glFlushVertexArrayRangeAPPLE = missing_glFlushVertexArrayRangeAPPLE;
    }
    dt.glFlushVertexArrayRangeAPPLE = MakeRegalProc(loader_glFlushVertexArrayRangeAPPLE,layer);
    _getProcAddress( driver_glVertexArrayParameteriAPPLE, glVertexArrayParameteriAPPLE, "glVertexArrayParameteriAPPLE" );
    if( driver_glVertexArrayParameteriAPPLE == NULL ) {
      driver_glVertexArrayParameteriAPPLE = missing_glVertexArrayParameteriAPPLE;
    }
    dt.glVertexArrayParameteriAPPLE = MakeRegalProc(loader_glVertexArrayParameteriAPPLE,layer);
    _getProcAddress( driver_glVertexArrayRangeAPPLE, glVertexArrayRangeAPPLE, "glVertexArrayRangeAPPLE" );
    if( driver_glVertexArrayRangeAPPLE == NULL ) {
      driver_glVertexArrayRangeAPPLE = missing_glVertexArrayRangeAPPLE;
    }
    dt.glVertexArrayRangeAPPLE = MakeRegalProc(loader_glVertexArrayRangeAPPLE,layer);

    // GL_APPLE_vertex_program_evaluators

    _getProcAddress( driver_glDisableVertexAttribAPPLE, glDisableVertexAttribAPPLE, "glDisableVertexAttribAPPLE" );
    if( driver_glDisableVertexAttribAPPLE == NULL ) {
      driver_glDisableVertexAttribAPPLE = missing_glDisableVertexAttribAPPLE;
    }
    dt.glDisableVertexAttribAPPLE = MakeRegalProc(loader_glDisableVertexAttribAPPLE,layer);
    _getProcAddress( driver_glEnableVertexAttribAPPLE, glEnableVertexAttribAPPLE, "glEnableVertexAttribAPPLE" );
    if( driver_glEnableVertexAttribAPPLE == NULL ) {
      driver_glEnableVertexAttribAPPLE = missing_glEnableVertexAttribAPPLE;
    }
    dt.glEnableVertexAttribAPPLE = MakeRegalProc(loader_glEnableVertexAttribAPPLE,layer);
    _getProcAddress( driver_glIsVertexAttribEnabledAPPLE, glIsVertexAttribEnabledAPPLE, "glIsVertexAttribEnabledAPPLE" );
    if( driver_glIsVertexAttribEnabledAPPLE == NULL ) {
      driver_glIsVertexAttribEnabledAPPLE = missing_glIsVertexAttribEnabledAPPLE;
    }
    dt.glIsVertexAttribEnabledAPPLE = MakeRegalProc(loader_glIsVertexAttribEnabledAPPLE,layer);
    _getProcAddress( driver_glMapVertexAttrib1dAPPLE, glMapVertexAttrib1dAPPLE, "glMapVertexAttrib1dAPPLE" );
    if( driver_glMapVertexAttrib1dAPPLE == NULL ) {
      driver_glMapVertexAttrib1dAPPLE = missing_glMapVertexAttrib1dAPPLE;
    }
    dt.glMapVertexAttrib1dAPPLE = MakeRegalProc(loader_glMapVertexAttrib1dAPPLE,layer);
    _getProcAddress( driver_glMapVertexAttrib1fAPPLE, glMapVertexAttrib1fAPPLE, "glMapVertexAttrib1fAPPLE" );
    if( driver_glMapVertexAttrib1fAPPLE == NULL ) {
      driver_glMapVertexAttrib1fAPPLE = missing_glMapVertexAttrib1fAPPLE;
    }
    dt.glMapVertexAttrib1fAPPLE = MakeRegalProc(loader_glMapVertexAttrib1fAPPLE,layer);
    _getProcAddress( driver_glMapVertexAttrib2dAPPLE, glMapVertexAttrib2dAPPLE, "glMapVertexAttrib2dAPPLE" );
    if( driver_glMapVertexAttrib2dAPPLE == NULL ) {
      driver_glMapVertexAttrib2dAPPLE = missing_glMapVertexAttrib2dAPPLE;
    }
    dt.glMapVertexAttrib2dAPPLE = MakeRegalProc(loader_glMapVertexAttrib2dAPPLE,layer);
    _getProcAddress( driver_glMapVertexAttrib2fAPPLE, glMapVertexAttrib2fAPPLE, "glMapVertexAttrib2fAPPLE" );
    if( driver_glMapVertexAttrib2fAPPLE == NULL ) {
      driver_glMapVertexAttrib2fAPPLE = missing_glMapVertexAttrib2fAPPLE;
    }
    dt.glMapVertexAttrib2fAPPLE = MakeRegalProc(loader_glMapVertexAttrib2fAPPLE,layer);

    // GL_ARB_ES2_compatibility

    _getProcAddress( driver_glClearDepthf, glClearDepthf, "glClearDepthf" );
    if( driver_glClearDepthf == NULL ) {
      driver_glClearDepthf = missing_glClearDepthf;
    }
    dt.glClearDepthf = MakeRegalProc(loader_glClearDepthf,layer);
    _getProcAddress( driver_glDepthRangef, glDepthRangef, "glDepthRangef" );
    if( driver_glDepthRangef == NULL ) {
      driver_glDepthRangef = missing_glDepthRangef;
    }
    dt.glDepthRangef = MakeRegalProc(loader_glDepthRangef,layer);
    _getProcAddress( driver_glGetShaderPrecisionFormat, glGetShaderPrecisionFormat, "glGetShaderPrecisionFormat" );
    if( driver_glGetShaderPrecisionFormat == NULL ) {
      driver_glGetShaderPrecisionFormat = missing_glGetShaderPrecisionFormat;
    }
    dt.glGetShaderPrecisionFormat = MakeRegalProc(loader_glGetShaderPrecisionFormat,layer);
    _getProcAddress( driver_glReleaseShaderCompiler, glReleaseShaderCompiler, "glReleaseShaderCompiler" );
    if( driver_glReleaseShaderCompiler == NULL ) {
      driver_glReleaseShaderCompiler = missing_glReleaseShaderCompiler;
    }
    dt.glReleaseShaderCompiler = MakeRegalProc(loader_glReleaseShaderCompiler,layer);
    _getProcAddress( driver_glShaderBinary, glShaderBinary, "glShaderBinary" );
    if( driver_glShaderBinary == NULL ) {
      driver_glShaderBinary = missing_glShaderBinary;
    }
    dt.glShaderBinary = MakeRegalProc(loader_glShaderBinary,layer);

    // GL_ARB_base_instance

    _getProcAddress( driver_glDrawArraysInstancedBaseInstance, glDrawArraysInstancedBaseInstance, "glDrawArraysInstancedBaseInstance" );
    if( driver_glDrawArraysInstancedBaseInstance == NULL ) {
      driver_glDrawArraysInstancedBaseInstance = missing_glDrawArraysInstancedBaseInstance;
    }
    dt.glDrawArraysInstancedBaseInstance = MakeRegalProc(loader_glDrawArraysInstancedBaseInstance,layer);
    _getProcAddress( driver_glDrawElementsInstancedBaseInstance, glDrawElementsInstancedBaseInstance, "glDrawElementsInstancedBaseInstance" );
    if( driver_glDrawElementsInstancedBaseInstance == NULL ) {
      driver_glDrawElementsInstancedBaseInstance = missing_glDrawElementsInstancedBaseInstance;
    }
    dt.glDrawElementsInstancedBaseInstance = MakeRegalProc(loader_glDrawElementsInstancedBaseInstance,layer);
    _getProcAddress( driver_glDrawElementsInstancedBaseVertexBaseInstance, glDrawElementsInstancedBaseVertexBaseInstance, "glDrawElementsInstancedBaseVertexBaseInstance" );
    if( driver_glDrawElementsInstancedBaseVertexBaseInstance == NULL ) {
      driver_glDrawElementsInstancedBaseVertexBaseInstance = missing_glDrawElementsInstancedBaseVertexBaseInstance;
    }
    dt.glDrawElementsInstancedBaseVertexBaseInstance = MakeRegalProc(loader_glDrawElementsInstancedBaseVertexBaseInstance,layer);

    // GL_ARB_bindless_texture

    _getProcAddress( driver_glGetImageHandleARB, glGetImageHandleARB, "glGetImageHandleARB" );
    if( driver_glGetImageHandleARB == NULL ) {
      driver_glGetImageHandleARB = missing_glGetImageHandleARB;
    }
    dt.glGetImageHandleARB = MakeRegalProc(loader_glGetImageHandleARB,layer);
    _getProcAddress( driver_glGetTextureHandleARB, glGetTextureHandleARB, "glGetTextureHandleARB" );
    if( driver_glGetTextureHandleARB == NULL ) {
      driver_glGetTextureHandleARB = missing_glGetTextureHandleARB;
    }
    dt.glGetTextureHandleARB = MakeRegalProc(loader_glGetTextureHandleARB,layer);
    _getProcAddress( driver_glGetTextureSamplerHandleARB, glGetTextureSamplerHandleARB, "glGetTextureSamplerHandleARB" );
    if( driver_glGetTextureSamplerHandleARB == NULL ) {
      driver_glGetTextureSamplerHandleARB = missing_glGetTextureSamplerHandleARB;
    }
    dt.glGetTextureSamplerHandleARB = MakeRegalProc(loader_glGetTextureSamplerHandleARB,layer);
    _getProcAddress( driver_glGetVertexAttribLui64vARB, glGetVertexAttribLui64vARB, "glGetVertexAttribLui64vARB" );
    if( driver_glGetVertexAttribLui64vARB == NULL ) {
      driver_glGetVertexAttribLui64vARB = missing_glGetVertexAttribLui64vARB;
    }
    dt.glGetVertexAttribLui64vARB = MakeRegalProc(loader_glGetVertexAttribLui64vARB,layer);
    _getProcAddress( driver_glIsImageHandleResidentARB, glIsImageHandleResidentARB, "glIsImageHandleResidentARB" );
    if( driver_glIsImageHandleResidentARB == NULL ) {
      driver_glIsImageHandleResidentARB = missing_glIsImageHandleResidentARB;
    }
    dt.glIsImageHandleResidentARB = MakeRegalProc(loader_glIsImageHandleResidentARB,layer);
    _getProcAddress( driver_glIsTextureHandleResidentARB, glIsTextureHandleResidentARB, "glIsTextureHandleResidentARB" );
    if( driver_glIsTextureHandleResidentARB == NULL ) {
      driver_glIsTextureHandleResidentARB = missing_glIsTextureHandleResidentARB;
    }
    dt.glIsTextureHandleResidentARB = MakeRegalProc(loader_glIsTextureHandleResidentARB,layer);
    _getProcAddress( driver_glMakeImageHandleNonResidentARB, glMakeImageHandleNonResidentARB, "glMakeImageHandleNonResidentARB" );
    if( driver_glMakeImageHandleNonResidentARB == NULL ) {
      driver_glMakeImageHandleNonResidentARB = missing_glMakeImageHandleNonResidentARB;
    }
    dt.glMakeImageHandleNonResidentARB = MakeRegalProc(loader_glMakeImageHandleNonResidentARB,layer);
    _getProcAddress( driver_glMakeImageHandleResidentARB, glMakeImageHandleResidentARB, "glMakeImageHandleResidentARB" );
    if( driver_glMakeImageHandleResidentARB == NULL ) {
      driver_glMakeImageHandleResidentARB = missing_glMakeImageHandleResidentARB;
    }
    dt.glMakeImageHandleResidentARB = MakeRegalProc(loader_glMakeImageHandleResidentARB,layer);
    _getProcAddress( driver_glMakeTextureHandleNonResidentARB, glMakeTextureHandleNonResidentARB, "glMakeTextureHandleNonResidentARB" );
    if( driver_glMakeTextureHandleNonResidentARB == NULL ) {
      driver_glMakeTextureHandleNonResidentARB = missing_glMakeTextureHandleNonResidentARB;
    }
    dt.glMakeTextureHandleNonResidentARB = MakeRegalProc(loader_glMakeTextureHandleNonResidentARB,layer);
    _getProcAddress( driver_glMakeTextureHandleResidentARB, glMakeTextureHandleResidentARB, "glMakeTextureHandleResidentARB" );
    if( driver_glMakeTextureHandleResidentARB == NULL ) {
      driver_glMakeTextureHandleResidentARB = missing_glMakeTextureHandleResidentARB;
    }
    dt.glMakeTextureHandleResidentARB = MakeRegalProc(loader_glMakeTextureHandleResidentARB,layer);
    _getProcAddress( driver_glProgramUniformHandleui64ARB, glProgramUniformHandleui64ARB, "glProgramUniformHandleui64ARB" );
    if( driver_glProgramUniformHandleui64ARB == NULL ) {
      driver_glProgramUniformHandleui64ARB = missing_glProgramUniformHandleui64ARB;
    }
    dt.glProgramUniformHandleui64ARB = MakeRegalProc(loader_glProgramUniformHandleui64ARB,layer);
    _getProcAddress( driver_glProgramUniformHandleui64vARB, glProgramUniformHandleui64vARB, "glProgramUniformHandleui64vARB" );
    if( driver_glProgramUniformHandleui64vARB == NULL ) {
      driver_glProgramUniformHandleui64vARB = missing_glProgramUniformHandleui64vARB;
    }
    dt.glProgramUniformHandleui64vARB = MakeRegalProc(loader_glProgramUniformHandleui64vARB,layer);
    _getProcAddress( driver_glUniformHandleui64ARB, glUniformHandleui64ARB, "glUniformHandleui64ARB" );
    if( driver_glUniformHandleui64ARB == NULL ) {
      driver_glUniformHandleui64ARB = missing_glUniformHandleui64ARB;
    }
    dt.glUniformHandleui64ARB = MakeRegalProc(loader_glUniformHandleui64ARB,layer);
    _getProcAddress( driver_glUniformHandleui64vARB, glUniformHandleui64vARB, "glUniformHandleui64vARB" );
    if( driver_glUniformHandleui64vARB == NULL ) {
      driver_glUniformHandleui64vARB = missing_glUniformHandleui64vARB;
    }
    dt.glUniformHandleui64vARB = MakeRegalProc(loader_glUniformHandleui64vARB,layer);
    _getProcAddress( driver_glVertexAttribL1ui64ARB, glVertexAttribL1ui64ARB, "glVertexAttribL1ui64ARB" );
    if( driver_glVertexAttribL1ui64ARB == NULL ) {
      driver_glVertexAttribL1ui64ARB = missing_glVertexAttribL1ui64ARB;
    }
    dt.glVertexAttribL1ui64ARB = MakeRegalProc(loader_glVertexAttribL1ui64ARB,layer);
    _getProcAddress( driver_glVertexAttribL1ui64vARB, glVertexAttribL1ui64vARB, "glVertexAttribL1ui64vARB" );
    if( driver_glVertexAttribL1ui64vARB == NULL ) {
      driver_glVertexAttribL1ui64vARB = missing_glVertexAttribL1ui64vARB;
    }
    dt.glVertexAttribL1ui64vARB = MakeRegalProc(loader_glVertexAttribL1ui64vARB,layer);

    // GL_ARB_blend_func_extended

    _getProcAddress( driver_glBindFragDataLocationIndexed, glBindFragDataLocationIndexed, "glBindFragDataLocationIndexed" );
    if( driver_glBindFragDataLocationIndexed == NULL ) {
      driver_glBindFragDataLocationIndexed = missing_glBindFragDataLocationIndexed;
    }
    dt.glBindFragDataLocationIndexed = MakeRegalProc(loader_glBindFragDataLocationIndexed,layer);
    _getProcAddress( driver_glGetFragDataIndex, glGetFragDataIndex, "glGetFragDataIndex" );
    if( driver_glGetFragDataIndex == NULL ) {
      driver_glGetFragDataIndex = missing_glGetFragDataIndex;
    }
    dt.glGetFragDataIndex = MakeRegalProc(loader_glGetFragDataIndex,layer);

    // GL_ARB_buffer_storage

    _getProcAddress( driver_glBufferStorage, glBufferStorage, "glBufferStorage" );
    if( driver_glBufferStorage == NULL ) {
      driver_glBufferStorage = missing_glBufferStorage;
    }
    dt.glBufferStorage = MakeRegalProc(loader_glBufferStorage,layer);
    _getProcAddress( driver_glNamedBufferStorageEXT, glNamedBufferStorageEXT, "glNamedBufferStorageEXT" );
    if( driver_glNamedBufferStorageEXT == NULL ) {
      driver_glNamedBufferStorageEXT = missing_glNamedBufferStorageEXT;
    }
    dt.glNamedBufferStorageEXT = MakeRegalProc(loader_glNamedBufferStorageEXT,layer);

    // GL_ARB_cl_event

    _getProcAddress( driver_glCreateSyncFromCLeventARB, glCreateSyncFromCLeventARB, "glCreateSyncFromCLeventARB" );
    if( driver_glCreateSyncFromCLeventARB == NULL ) {
      driver_glCreateSyncFromCLeventARB = missing_glCreateSyncFromCLeventARB;
    }
    dt.glCreateSyncFromCLeventARB = MakeRegalProc(loader_glCreateSyncFromCLeventARB,layer);

    // GL_ARB_clear_buffer_object

    _getProcAddress( driver_glClearBufferData, glClearBufferData, "glClearBufferData" );
    if( driver_glClearBufferData == NULL ) {
      driver_glClearBufferData = missing_glClearBufferData;
    }
    dt.glClearBufferData = MakeRegalProc(loader_glClearBufferData,layer);
    _getProcAddress( driver_glClearBufferSubData, glClearBufferSubData, "glClearBufferSubData" );
    if( driver_glClearBufferSubData == NULL ) {
      driver_glClearBufferSubData = missing_glClearBufferSubData;
    }
    dt.glClearBufferSubData = MakeRegalProc(loader_glClearBufferSubData,layer);
    _getProcAddress( driver_glClearNamedBufferDataEXT, glClearNamedBufferDataEXT, "glClearNamedBufferDataEXT" );
    if( driver_glClearNamedBufferDataEXT == NULL ) {
      driver_glClearNamedBufferDataEXT = missing_glClearNamedBufferDataEXT;
    }
    dt.glClearNamedBufferDataEXT = MakeRegalProc(loader_glClearNamedBufferDataEXT,layer);
    _getProcAddress( driver_glClearNamedBufferSubDataEXT, glClearNamedBufferSubDataEXT, "glClearNamedBufferSubDataEXT" );
    if( driver_glClearNamedBufferSubDataEXT == NULL ) {
      driver_glClearNamedBufferSubDataEXT = missing_glClearNamedBufferSubDataEXT;
    }
    dt.glClearNamedBufferSubDataEXT = MakeRegalProc(loader_glClearNamedBufferSubDataEXT,layer);

    // GL_ARB_clear_texture

    _getProcAddress( driver_glClearTexImage, glClearTexImage, "glClearTexImage" );
    if( driver_glClearTexImage == NULL ) {
      driver_glClearTexImage = missing_glClearTexImage;
    }
    dt.glClearTexImage = MakeRegalProc(loader_glClearTexImage,layer);
    _getProcAddress( driver_glClearTexSubImage, glClearTexSubImage, "glClearTexSubImage" );
    if( driver_glClearTexSubImage == NULL ) {
      driver_glClearTexSubImage = missing_glClearTexSubImage;
    }
    dt.glClearTexSubImage = MakeRegalProc(loader_glClearTexSubImage,layer);

    // GL_ARB_color_buffer_float

    _getProcAddress( driver_glClampColorARB, glClampColorARB, "glClampColorARB" );
    if( driver_glClampColorARB == NULL ) {
      driver_glClampColorARB = missing_glClampColorARB;
    }
    dt.glClampColorARB = MakeRegalProc(loader_glClampColorARB,layer);

    // GL_ARB_compute_shader

    _getProcAddress( driver_glDispatchCompute, glDispatchCompute, "glDispatchCompute" );
    if( driver_glDispatchCompute == NULL ) {
      driver_glDispatchCompute = missing_glDispatchCompute;
    }
    dt.glDispatchCompute = MakeRegalProc(loader_glDispatchCompute,layer);
    _getProcAddress( driver_glDispatchComputeIndirect, glDispatchComputeIndirect, "glDispatchComputeIndirect" );
    if( driver_glDispatchComputeIndirect == NULL ) {
      driver_glDispatchComputeIndirect = missing_glDispatchComputeIndirect;
    }
    dt.glDispatchComputeIndirect = MakeRegalProc(loader_glDispatchComputeIndirect,layer);

    // GL_ARB_compute_variable_group_size

    _getProcAddress( driver_glDispatchComputeGroupSizeARB, glDispatchComputeGroupSizeARB, "glDispatchComputeGroupSizeARB" );
    if( driver_glDispatchComputeGroupSizeARB == NULL ) {
      driver_glDispatchComputeGroupSizeARB = missing_glDispatchComputeGroupSizeARB;
    }
    dt.glDispatchComputeGroupSizeARB = MakeRegalProc(loader_glDispatchComputeGroupSizeARB,layer);

    // GL_ARB_copy_buffer

    _getProcAddress( driver_glCopyBufferSubData, glCopyBufferSubData, "glCopyBufferSubData" );
    if( driver_glCopyBufferSubData == NULL ) {
      driver_glCopyBufferSubData = missing_glCopyBufferSubData;
    }
    dt.glCopyBufferSubData = MakeRegalProc(loader_glCopyBufferSubData,layer);

    // GL_ARB_copy_image

    _getProcAddress( driver_glCopyImageSubData, glCopyImageSubData, "glCopyImageSubData" );
    if( driver_glCopyImageSubData == NULL ) {
      driver_glCopyImageSubData = missing_glCopyImageSubData;
    }
    dt.glCopyImageSubData = MakeRegalProc(loader_glCopyImageSubData,layer);

    // GL_ARB_debug_output

    _getProcAddress( driver_glDebugMessageCallbackARB, glDebugMessageCallbackARB, "glDebugMessageCallbackARB" );
    if( driver_glDebugMessageCallbackARB == NULL ) {
      driver_glDebugMessageCallbackARB = missing_glDebugMessageCallbackARB;
    }
    dt.glDebugMessageCallbackARB = MakeRegalProc(loader_glDebugMessageCallbackARB,layer);
    _getProcAddress( driver_glDebugMessageControlARB, glDebugMessageControlARB, "glDebugMessageControlARB" );
    if( driver_glDebugMessageControlARB == NULL ) {
      driver_glDebugMessageControlARB = missing_glDebugMessageControlARB;
    }
    dt.glDebugMessageControlARB = MakeRegalProc(loader_glDebugMessageControlARB,layer);
    _getProcAddress( driver_glDebugMessageInsertARB, glDebugMessageInsertARB, "glDebugMessageInsertARB" );
    if( driver_glDebugMessageInsertARB == NULL ) {
      driver_glDebugMessageInsertARB = missing_glDebugMessageInsertARB;
    }
    dt.glDebugMessageInsertARB = MakeRegalProc(loader_glDebugMessageInsertARB,layer);
    _getProcAddress( driver_glGetDebugMessageLogARB, glGetDebugMessageLogARB, "glGetDebugMessageLogARB" );
    if( driver_glGetDebugMessageLogARB == NULL ) {
      driver_glGetDebugMessageLogARB = missing_glGetDebugMessageLogARB;
    }
    dt.glGetDebugMessageLogARB = MakeRegalProc(loader_glGetDebugMessageLogARB,layer);

    // GL_ARB_draw_buffers

    _getProcAddress( driver_glDrawBuffersARB, glDrawBuffersARB, "glDrawBuffersARB" );
    if( driver_glDrawBuffersARB == NULL ) {
      driver_glDrawBuffersARB = missing_glDrawBuffersARB;
    }
    dt.glDrawBuffersARB = MakeRegalProc(loader_glDrawBuffersARB,layer);

    // GL_ARB_draw_buffers_blend

    _getProcAddress( driver_glBlendEquationSeparateiARB, glBlendEquationSeparateiARB, "glBlendEquationSeparateiARB" );
    if( driver_glBlendEquationSeparateiARB == NULL ) {
      driver_glBlendEquationSeparateiARB = missing_glBlendEquationSeparateiARB;
    }
    dt.glBlendEquationSeparateiARB = MakeRegalProc(loader_glBlendEquationSeparateiARB,layer);
    _getProcAddress( driver_glBlendEquationiARB, glBlendEquationiARB, "glBlendEquationiARB" );
    if( driver_glBlendEquationiARB == NULL ) {
      driver_glBlendEquationiARB = missing_glBlendEquationiARB;
    }
    dt.glBlendEquationiARB = MakeRegalProc(loader_glBlendEquationiARB,layer);
    _getProcAddress( driver_glBlendFuncSeparateiARB, glBlendFuncSeparateiARB, "glBlendFuncSeparateiARB" );
    if( driver_glBlendFuncSeparateiARB == NULL ) {
      driver_glBlendFuncSeparateiARB = missing_glBlendFuncSeparateiARB;
    }
    dt.glBlendFuncSeparateiARB = MakeRegalProc(loader_glBlendFuncSeparateiARB,layer);
    _getProcAddress( driver_glBlendFunciARB, glBlendFunciARB, "glBlendFunciARB" );
    if( driver_glBlendFunciARB == NULL ) {
      driver_glBlendFunciARB = missing_glBlendFunciARB;
    }
    dt.glBlendFunciARB = MakeRegalProc(loader_glBlendFunciARB,layer);

    // GL_ARB_draw_elements_base_vertex

    _getProcAddress( driver_glDrawElementsBaseVertex, glDrawElementsBaseVertex, "glDrawElementsBaseVertex" );
    if( driver_glDrawElementsBaseVertex == NULL ) {
      driver_glDrawElementsBaseVertex = missing_glDrawElementsBaseVertex;
    }
    dt.glDrawElementsBaseVertex = MakeRegalProc(loader_glDrawElementsBaseVertex,layer);
    _getProcAddress( driver_glDrawElementsInstancedBaseVertex, glDrawElementsInstancedBaseVertex, "glDrawElementsInstancedBaseVertex" );
    if( driver_glDrawElementsInstancedBaseVertex == NULL ) {
      driver_glDrawElementsInstancedBaseVertex = missing_glDrawElementsInstancedBaseVertex;
    }
    dt.glDrawElementsInstancedBaseVertex = MakeRegalProc(loader_glDrawElementsInstancedBaseVertex,layer);
    _getProcAddress( driver_glDrawRangeElementsBaseVertex, glDrawRangeElementsBaseVertex, "glDrawRangeElementsBaseVertex" );
    if( driver_glDrawRangeElementsBaseVertex == NULL ) {
      driver_glDrawRangeElementsBaseVertex = missing_glDrawRangeElementsBaseVertex;
    }
    dt.glDrawRangeElementsBaseVertex = MakeRegalProc(loader_glDrawRangeElementsBaseVertex,layer);
    _getProcAddress( driver_glMultiDrawElementsBaseVertex, glMultiDrawElementsBaseVertex, "glMultiDrawElementsBaseVertex" );
    if( driver_glMultiDrawElementsBaseVertex == NULL ) {
      driver_glMultiDrawElementsBaseVertex = missing_glMultiDrawElementsBaseVertex;
    }
    dt.glMultiDrawElementsBaseVertex = MakeRegalProc(loader_glMultiDrawElementsBaseVertex,layer);

    // GL_ARB_draw_indirect

    _getProcAddress( driver_glDrawArraysIndirect, glDrawArraysIndirect, "glDrawArraysIndirect" );
    if( driver_glDrawArraysIndirect == NULL ) {
      driver_glDrawArraysIndirect = missing_glDrawArraysIndirect;
    }
    dt.glDrawArraysIndirect = MakeRegalProc(loader_glDrawArraysIndirect,layer);
    _getProcAddress( driver_glDrawElementsIndirect, glDrawElementsIndirect, "glDrawElementsIndirect" );
    if( driver_glDrawElementsIndirect == NULL ) {
      driver_glDrawElementsIndirect = missing_glDrawElementsIndirect;
    }
    dt.glDrawElementsIndirect = MakeRegalProc(loader_glDrawElementsIndirect,layer);

    // GL_ARB_draw_instanced

    _getProcAddress( driver_glDrawArraysInstancedARB, glDrawArraysInstancedARB, "glDrawArraysInstancedARB" );
    if( driver_glDrawArraysInstancedARB == NULL ) {
      driver_glDrawArraysInstancedARB = missing_glDrawArraysInstancedARB;
    }
    dt.glDrawArraysInstancedARB = MakeRegalProc(loader_glDrawArraysInstancedARB,layer);
    _getProcAddress( driver_glDrawElementsInstancedARB, glDrawElementsInstancedARB, "glDrawElementsInstancedARB" );
    if( driver_glDrawElementsInstancedARB == NULL ) {
      driver_glDrawElementsInstancedARB = missing_glDrawElementsInstancedARB;
    }
    dt.glDrawElementsInstancedARB = MakeRegalProc(loader_glDrawElementsInstancedARB,layer);

    // GL_ARB_framebuffer_no_attachments

    _getProcAddress( driver_glFramebufferParameteri, glFramebufferParameteri, "glFramebufferParameteri" );
    if( driver_glFramebufferParameteri == NULL ) {
      driver_glFramebufferParameteri = missing_glFramebufferParameteri;
    }
    dt.glFramebufferParameteri = MakeRegalProc(loader_glFramebufferParameteri,layer);
    _getProcAddress( driver_glGetFramebufferParameteriv, glGetFramebufferParameteriv, "glGetFramebufferParameteriv" );
    if( driver_glGetFramebufferParameteriv == NULL ) {
      driver_glGetFramebufferParameteriv = missing_glGetFramebufferParameteriv;
    }
    dt.glGetFramebufferParameteriv = MakeRegalProc(loader_glGetFramebufferParameteriv,layer);
    _getProcAddress( driver_glGetNamedFramebufferParameterivEXT, glGetNamedFramebufferParameterivEXT, "glGetNamedFramebufferParameterivEXT" );
    if( driver_glGetNamedFramebufferParameterivEXT == NULL ) {
      driver_glGetNamedFramebufferParameterivEXT = missing_glGetNamedFramebufferParameterivEXT;
    }
    dt.glGetNamedFramebufferParameterivEXT = MakeRegalProc(loader_glGetNamedFramebufferParameterivEXT,layer);
    _getProcAddress( driver_glNamedFramebufferParameteriEXT, glNamedFramebufferParameteriEXT, "glNamedFramebufferParameteriEXT" );
    if( driver_glNamedFramebufferParameteriEXT == NULL ) {
      driver_glNamedFramebufferParameteriEXT = missing_glNamedFramebufferParameteriEXT;
    }
    dt.glNamedFramebufferParameteriEXT = MakeRegalProc(loader_glNamedFramebufferParameteriEXT,layer);

    // GL_ARB_framebuffer_object

    _getProcAddress( driver_glBindFramebuffer, glBindFramebuffer, "glBindFramebuffer" );
    if( driver_glBindFramebuffer == NULL ) {
      driver_glBindFramebuffer = missing_glBindFramebuffer;
    }
    dt.glBindFramebuffer = MakeRegalProc(loader_glBindFramebuffer,layer);
    _getProcAddress( driver_glBindRenderbuffer, glBindRenderbuffer, "glBindRenderbuffer" );
    if( driver_glBindRenderbuffer == NULL ) {
      driver_glBindRenderbuffer = missing_glBindRenderbuffer;
    }
    dt.glBindRenderbuffer = MakeRegalProc(loader_glBindRenderbuffer,layer);
    _getProcAddress( driver_glBlitFramebuffer, glBlitFramebuffer, "glBlitFramebuffer" );
    if( driver_glBlitFramebuffer == NULL ) {
      driver_glBlitFramebuffer = missing_glBlitFramebuffer;
    }
    dt.glBlitFramebuffer = MakeRegalProc(loader_glBlitFramebuffer,layer);
    _getProcAddress( driver_glCheckFramebufferStatus, glCheckFramebufferStatus, "glCheckFramebufferStatus" );
    if( driver_glCheckFramebufferStatus == NULL ) {
      driver_glCheckFramebufferStatus = missing_glCheckFramebufferStatus;
    }
    dt.glCheckFramebufferStatus = MakeRegalProc(loader_glCheckFramebufferStatus,layer);
    _getProcAddress( driver_glDeleteFramebuffers, glDeleteFramebuffers, "glDeleteFramebuffers" );
    if( driver_glDeleteFramebuffers == NULL ) {
      driver_glDeleteFramebuffers = missing_glDeleteFramebuffers;
    }
    dt.glDeleteFramebuffers = MakeRegalProc(loader_glDeleteFramebuffers,layer);
    _getProcAddress( driver_glDeleteRenderbuffers, glDeleteRenderbuffers, "glDeleteRenderbuffers" );
    if( driver_glDeleteRenderbuffers == NULL ) {
      driver_glDeleteRenderbuffers = missing_glDeleteRenderbuffers;
    }
    dt.glDeleteRenderbuffers = MakeRegalProc(loader_glDeleteRenderbuffers,layer);
    _getProcAddress( driver_glFramebufferRenderbuffer, glFramebufferRenderbuffer, "glFramebufferRenderbuffer" );
    if( driver_glFramebufferRenderbuffer == NULL ) {
      driver_glFramebufferRenderbuffer = missing_glFramebufferRenderbuffer;
    }
    dt.glFramebufferRenderbuffer = MakeRegalProc(loader_glFramebufferRenderbuffer,layer);
    _getProcAddress( driver_glFramebufferTexture1D, glFramebufferTexture1D, "glFramebufferTexture1D" );
    if( driver_glFramebufferTexture1D == NULL ) {
      driver_glFramebufferTexture1D = missing_glFramebufferTexture1D;
    }
    dt.glFramebufferTexture1D = MakeRegalProc(loader_glFramebufferTexture1D,layer);
    _getProcAddress( driver_glFramebufferTexture2D, glFramebufferTexture2D, "glFramebufferTexture2D" );
    if( driver_glFramebufferTexture2D == NULL ) {
      driver_glFramebufferTexture2D = missing_glFramebufferTexture2D;
    }
    dt.glFramebufferTexture2D = MakeRegalProc(loader_glFramebufferTexture2D,layer);
    _getProcAddress( driver_glFramebufferTexture3D, glFramebufferTexture3D, "glFramebufferTexture3D" );
    if( driver_glFramebufferTexture3D == NULL ) {
      driver_glFramebufferTexture3D = missing_glFramebufferTexture3D;
    }
    dt.glFramebufferTexture3D = MakeRegalProc(loader_glFramebufferTexture3D,layer);
    _getProcAddress( driver_glFramebufferTextureLayer, glFramebufferTextureLayer, "glFramebufferTextureLayer" );
    if( driver_glFramebufferTextureLayer == NULL ) {
      driver_glFramebufferTextureLayer = missing_glFramebufferTextureLayer;
    }
    dt.glFramebufferTextureLayer = MakeRegalProc(loader_glFramebufferTextureLayer,layer);
    _getProcAddress( driver_glGenFramebuffers, glGenFramebuffers, "glGenFramebuffers" );
    if( driver_glGenFramebuffers == NULL ) {
      driver_glGenFramebuffers = missing_glGenFramebuffers;
    }
    dt.glGenFramebuffers = MakeRegalProc(loader_glGenFramebuffers,layer);
    _getProcAddress( driver_glGenRenderbuffers, glGenRenderbuffers, "glGenRenderbuffers" );
    if( driver_glGenRenderbuffers == NULL ) {
      driver_glGenRenderbuffers = missing_glGenRenderbuffers;
    }
    dt.glGenRenderbuffers = MakeRegalProc(loader_glGenRenderbuffers,layer);
    _getProcAddress( driver_glGenerateMipmap, glGenerateMipmap, "glGenerateMipmap" );
    if( driver_glGenerateMipmap == NULL ) {
      driver_glGenerateMipmap = missing_glGenerateMipmap;
    }
    dt.glGenerateMipmap = MakeRegalProc(loader_glGenerateMipmap,layer);
    _getProcAddress( driver_glGetFramebufferAttachmentParameteriv, glGetFramebufferAttachmentParameteriv, "glGetFramebufferAttachmentParameteriv" );
    if( driver_glGetFramebufferAttachmentParameteriv == NULL ) {
      driver_glGetFramebufferAttachmentParameteriv = missing_glGetFramebufferAttachmentParameteriv;
    }
    dt.glGetFramebufferAttachmentParameteriv = MakeRegalProc(loader_glGetFramebufferAttachmentParameteriv,layer);
    _getProcAddress( driver_glGetRenderbufferParameteriv, glGetRenderbufferParameteriv, "glGetRenderbufferParameteriv" );
    if( driver_glGetRenderbufferParameteriv == NULL ) {
      driver_glGetRenderbufferParameteriv = missing_glGetRenderbufferParameteriv;
    }
    dt.glGetRenderbufferParameteriv = MakeRegalProc(loader_glGetRenderbufferParameteriv,layer);
    _getProcAddress( driver_glIsFramebuffer, glIsFramebuffer, "glIsFramebuffer" );
    if( driver_glIsFramebuffer == NULL ) {
      driver_glIsFramebuffer = missing_glIsFramebuffer;
    }
    dt.glIsFramebuffer = MakeRegalProc(loader_glIsFramebuffer,layer);
    _getProcAddress( driver_glIsRenderbuffer, glIsRenderbuffer, "glIsRenderbuffer" );
    if( driver_glIsRenderbuffer == NULL ) {
      driver_glIsRenderbuffer = missing_glIsRenderbuffer;
    }
    dt.glIsRenderbuffer = MakeRegalProc(loader_glIsRenderbuffer,layer);
    _getProcAddress( driver_glRenderbufferStorage, glRenderbufferStorage, "glRenderbufferStorage" );
    if( driver_glRenderbufferStorage == NULL ) {
      driver_glRenderbufferStorage = missing_glRenderbufferStorage;
    }
    dt.glRenderbufferStorage = MakeRegalProc(loader_glRenderbufferStorage,layer);
    _getProcAddress( driver_glRenderbufferStorageMultisample, glRenderbufferStorageMultisample, "glRenderbufferStorageMultisample" );
    if( driver_glRenderbufferStorageMultisample == NULL ) {
      driver_glRenderbufferStorageMultisample = missing_glRenderbufferStorageMultisample;
    }
    dt.glRenderbufferStorageMultisample = MakeRegalProc(loader_glRenderbufferStorageMultisample,layer);

    // GL_ARB_geometry_shader4

    _getProcAddress( driver_glFramebufferTextureARB, glFramebufferTextureARB, "glFramebufferTextureARB" );
    if( driver_glFramebufferTextureARB == NULL ) {
      driver_glFramebufferTextureARB = missing_glFramebufferTextureARB;
    }
    dt.glFramebufferTextureARB = MakeRegalProc(loader_glFramebufferTextureARB,layer);
    _getProcAddress( driver_glFramebufferTextureFaceARB, glFramebufferTextureFaceARB, "glFramebufferTextureFaceARB" );
    if( driver_glFramebufferTextureFaceARB == NULL ) {
      driver_glFramebufferTextureFaceARB = missing_glFramebufferTextureFaceARB;
    }
    dt.glFramebufferTextureFaceARB = MakeRegalProc(loader_glFramebufferTextureFaceARB,layer);
    _getProcAddress( driver_glFramebufferTextureLayerARB, glFramebufferTextureLayerARB, "glFramebufferTextureLayerARB" );
    if( driver_glFramebufferTextureLayerARB == NULL ) {
      driver_glFramebufferTextureLayerARB = missing_glFramebufferTextureLayerARB;
    }
    dt.glFramebufferTextureLayerARB = MakeRegalProc(loader_glFramebufferTextureLayerARB,layer);
    _getProcAddress( driver_glProgramParameteriARB, glProgramParameteriARB, "glProgramParameteriARB" );
    if( driver_glProgramParameteriARB == NULL ) {
      driver_glProgramParameteriARB = missing_glProgramParameteriARB;
    }
    dt.glProgramParameteriARB = MakeRegalProc(loader_glProgramParameteriARB,layer);

    // GL_ARB_get_program_binary

    _getProcAddress( driver_glGetProgramBinary, glGetProgramBinary, "glGetProgramBinary" );
    if( driver_glGetProgramBinary == NULL ) {
      driver_glGetProgramBinary = missing_glGetProgramBinary;
    }
    dt.glGetProgramBinary = MakeRegalProc(loader_glGetProgramBinary,layer);
    _getProcAddress( driver_glProgramBinary, glProgramBinary, "glProgramBinary" );
    if( driver_glProgramBinary == NULL ) {
      driver_glProgramBinary = missing_glProgramBinary;
    }
    dt.glProgramBinary = MakeRegalProc(loader_glProgramBinary,layer);
    _getProcAddress( driver_glProgramParameteri, glProgramParameteri, "glProgramParameteri" );
    if( driver_glProgramParameteri == NULL ) {
      driver_glProgramParameteri = missing_glProgramParameteri;
    }
    dt.glProgramParameteri = MakeRegalProc(loader_glProgramParameteri,layer);

    // GL_ARB_gpu_shader_fp64

    _getProcAddress( driver_glGetUniformdv, glGetUniformdv, "glGetUniformdv" );
    if( driver_glGetUniformdv == NULL ) {
      driver_glGetUniformdv = missing_glGetUniformdv;
    }
    dt.glGetUniformdv = MakeRegalProc(loader_glGetUniformdv,layer);
    _getProcAddress( driver_glUniform1d, glUniform1d, "glUniform1d" );
    if( driver_glUniform1d == NULL ) {
      driver_glUniform1d = missing_glUniform1d;
    }
    dt.glUniform1d = MakeRegalProc(loader_glUniform1d,layer);
    _getProcAddress( driver_glUniform1dv, glUniform1dv, "glUniform1dv" );
    if( driver_glUniform1dv == NULL ) {
      driver_glUniform1dv = missing_glUniform1dv;
    }
    dt.glUniform1dv = MakeRegalProc(loader_glUniform1dv,layer);
    _getProcAddress( driver_glUniform2d, glUniform2d, "glUniform2d" );
    if( driver_glUniform2d == NULL ) {
      driver_glUniform2d = missing_glUniform2d;
    }
    dt.glUniform2d = MakeRegalProc(loader_glUniform2d,layer);
    _getProcAddress( driver_glUniform2dv, glUniform2dv, "glUniform2dv" );
    if( driver_glUniform2dv == NULL ) {
      driver_glUniform2dv = missing_glUniform2dv;
    }
    dt.glUniform2dv = MakeRegalProc(loader_glUniform2dv,layer);
    _getProcAddress( driver_glUniform3d, glUniform3d, "glUniform3d" );
    if( driver_glUniform3d == NULL ) {
      driver_glUniform3d = missing_glUniform3d;
    }
    dt.glUniform3d = MakeRegalProc(loader_glUniform3d,layer);
    _getProcAddress( driver_glUniform3dv, glUniform3dv, "glUniform3dv" );
    if( driver_glUniform3dv == NULL ) {
      driver_glUniform3dv = missing_glUniform3dv;
    }
    dt.glUniform3dv = MakeRegalProc(loader_glUniform3dv,layer);
    _getProcAddress( driver_glUniform4d, glUniform4d, "glUniform4d" );
    if( driver_glUniform4d == NULL ) {
      driver_glUniform4d = missing_glUniform4d;
    }
    dt.glUniform4d = MakeRegalProc(loader_glUniform4d,layer);
    _getProcAddress( driver_glUniform4dv, glUniform4dv, "glUniform4dv" );
    if( driver_glUniform4dv == NULL ) {
      driver_glUniform4dv = missing_glUniform4dv;
    }
    dt.glUniform4dv = MakeRegalProc(loader_glUniform4dv,layer);
    _getProcAddress( driver_glUniformMatrix2dv, glUniformMatrix2dv, "glUniformMatrix2dv" );
    if( driver_glUniformMatrix2dv == NULL ) {
      driver_glUniformMatrix2dv = missing_glUniformMatrix2dv;
    }
    dt.glUniformMatrix2dv = MakeRegalProc(loader_glUniformMatrix2dv,layer);
    _getProcAddress( driver_glUniformMatrix2x3dv, glUniformMatrix2x3dv, "glUniformMatrix2x3dv" );
    if( driver_glUniformMatrix2x3dv == NULL ) {
      driver_glUniformMatrix2x3dv = missing_glUniformMatrix2x3dv;
    }
    dt.glUniformMatrix2x3dv = MakeRegalProc(loader_glUniformMatrix2x3dv,layer);
    _getProcAddress( driver_glUniformMatrix2x4dv, glUniformMatrix2x4dv, "glUniformMatrix2x4dv" );
    if( driver_glUniformMatrix2x4dv == NULL ) {
      driver_glUniformMatrix2x4dv = missing_glUniformMatrix2x4dv;
    }
    dt.glUniformMatrix2x4dv = MakeRegalProc(loader_glUniformMatrix2x4dv,layer);
    _getProcAddress( driver_glUniformMatrix3dv, glUniformMatrix3dv, "glUniformMatrix3dv" );
    if( driver_glUniformMatrix3dv == NULL ) {
      driver_glUniformMatrix3dv = missing_glUniformMatrix3dv;
    }
    dt.glUniformMatrix3dv = MakeRegalProc(loader_glUniformMatrix3dv,layer);
    _getProcAddress( driver_glUniformMatrix3x2dv, glUniformMatrix3x2dv, "glUniformMatrix3x2dv" );
    if( driver_glUniformMatrix3x2dv == NULL ) {
      driver_glUniformMatrix3x2dv = missing_glUniformMatrix3x2dv;
    }
    dt.glUniformMatrix3x2dv = MakeRegalProc(loader_glUniformMatrix3x2dv,layer);
    _getProcAddress( driver_glUniformMatrix3x4dv, glUniformMatrix3x4dv, "glUniformMatrix3x4dv" );
    if( driver_glUniformMatrix3x4dv == NULL ) {
      driver_glUniformMatrix3x4dv = missing_glUniformMatrix3x4dv;
    }
    dt.glUniformMatrix3x4dv = MakeRegalProc(loader_glUniformMatrix3x4dv,layer);
    _getProcAddress( driver_glUniformMatrix4dv, glUniformMatrix4dv, "glUniformMatrix4dv" );
    if( driver_glUniformMatrix4dv == NULL ) {
      driver_glUniformMatrix4dv = missing_glUniformMatrix4dv;
    }
    dt.glUniformMatrix4dv = MakeRegalProc(loader_glUniformMatrix4dv,layer);
    _getProcAddress( driver_glUniformMatrix4x2dv, glUniformMatrix4x2dv, "glUniformMatrix4x2dv" );
    if( driver_glUniformMatrix4x2dv == NULL ) {
      driver_glUniformMatrix4x2dv = missing_glUniformMatrix4x2dv;
    }
    dt.glUniformMatrix4x2dv = MakeRegalProc(loader_glUniformMatrix4x2dv,layer);
    _getProcAddress( driver_glUniformMatrix4x3dv, glUniformMatrix4x3dv, "glUniformMatrix4x3dv" );
    if( driver_glUniformMatrix4x3dv == NULL ) {
      driver_glUniformMatrix4x3dv = missing_glUniformMatrix4x3dv;
    }
    dt.glUniformMatrix4x3dv = MakeRegalProc(loader_glUniformMatrix4x3dv,layer);

    // GL_ARB_imaging

    _getProcAddress( driver_glColorSubTable, glColorSubTable, "glColorSubTable" );
    if( driver_glColorSubTable == NULL ) {
      driver_glColorSubTable = missing_glColorSubTable;
    }
    dt.glColorSubTable = MakeRegalProc(loader_glColorSubTable,layer);
    _getProcAddress( driver_glColorTable, glColorTable, "glColorTable" );
    if( driver_glColorTable == NULL ) {
      driver_glColorTable = missing_glColorTable;
    }
    dt.glColorTable = MakeRegalProc(loader_glColorTable,layer);
    _getProcAddress( driver_glColorTableParameterfv, glColorTableParameterfv, "glColorTableParameterfv" );
    if( driver_glColorTableParameterfv == NULL ) {
      driver_glColorTableParameterfv = missing_glColorTableParameterfv;
    }
    dt.glColorTableParameterfv = MakeRegalProc(loader_glColorTableParameterfv,layer);
    _getProcAddress( driver_glColorTableParameteriv, glColorTableParameteriv, "glColorTableParameteriv" );
    if( driver_glColorTableParameteriv == NULL ) {
      driver_glColorTableParameteriv = missing_glColorTableParameteriv;
    }
    dt.glColorTableParameteriv = MakeRegalProc(loader_glColorTableParameteriv,layer);
    _getProcAddress( driver_glConvolutionFilter1D, glConvolutionFilter1D, "glConvolutionFilter1D" );
    if( driver_glConvolutionFilter1D == NULL ) {
      driver_glConvolutionFilter1D = missing_glConvolutionFilter1D;
    }
    dt.glConvolutionFilter1D = MakeRegalProc(loader_glConvolutionFilter1D,layer);
    _getProcAddress( driver_glConvolutionFilter2D, glConvolutionFilter2D, "glConvolutionFilter2D" );
    if( driver_glConvolutionFilter2D == NULL ) {
      driver_glConvolutionFilter2D = missing_glConvolutionFilter2D;
    }
    dt.glConvolutionFilter2D = MakeRegalProc(loader_glConvolutionFilter2D,layer);
    _getProcAddress( driver_glConvolutionParameterf, glConvolutionParameterf, "glConvolutionParameterf" );
    if( driver_glConvolutionParameterf == NULL ) {
      driver_glConvolutionParameterf = missing_glConvolutionParameterf;
    }
    dt.glConvolutionParameterf = MakeRegalProc(loader_glConvolutionParameterf,layer);
    _getProcAddress( driver_glConvolutionParameterfv, glConvolutionParameterfv, "glConvolutionParameterfv" );
    if( driver_glConvolutionParameterfv == NULL ) {
      driver_glConvolutionParameterfv = missing_glConvolutionParameterfv;
    }
    dt.glConvolutionParameterfv = MakeRegalProc(loader_glConvolutionParameterfv,layer);
    _getProcAddress( driver_glConvolutionParameteri, glConvolutionParameteri, "glConvolutionParameteri" );
    if( driver_glConvolutionParameteri == NULL ) {
      driver_glConvolutionParameteri = missing_glConvolutionParameteri;
    }
    dt.glConvolutionParameteri = MakeRegalProc(loader_glConvolutionParameteri,layer);
    _getProcAddress( driver_glConvolutionParameteriv, glConvolutionParameteriv, "glConvolutionParameteriv" );
    if( driver_glConvolutionParameteriv == NULL ) {
      driver_glConvolutionParameteriv = missing_glConvolutionParameteriv;
    }
    dt.glConvolutionParameteriv = MakeRegalProc(loader_glConvolutionParameteriv,layer);
    _getProcAddress( driver_glCopyColorSubTable, glCopyColorSubTable, "glCopyColorSubTable" );
    if( driver_glCopyColorSubTable == NULL ) {
      driver_glCopyColorSubTable = missing_glCopyColorSubTable;
    }
    dt.glCopyColorSubTable = MakeRegalProc(loader_glCopyColorSubTable,layer);
    _getProcAddress( driver_glCopyColorTable, glCopyColorTable, "glCopyColorTable" );
    if( driver_glCopyColorTable == NULL ) {
      driver_glCopyColorTable = missing_glCopyColorTable;
    }
    dt.glCopyColorTable = MakeRegalProc(loader_glCopyColorTable,layer);
    _getProcAddress( driver_glCopyConvolutionFilter1D, glCopyConvolutionFilter1D, "glCopyConvolutionFilter1D" );
    if( driver_glCopyConvolutionFilter1D == NULL ) {
      driver_glCopyConvolutionFilter1D = missing_glCopyConvolutionFilter1D;
    }
    dt.glCopyConvolutionFilter1D = MakeRegalProc(loader_glCopyConvolutionFilter1D,layer);
    _getProcAddress( driver_glCopyConvolutionFilter2D, glCopyConvolutionFilter2D, "glCopyConvolutionFilter2D" );
    if( driver_glCopyConvolutionFilter2D == NULL ) {
      driver_glCopyConvolutionFilter2D = missing_glCopyConvolutionFilter2D;
    }
    dt.glCopyConvolutionFilter2D = MakeRegalProc(loader_glCopyConvolutionFilter2D,layer);
    _getProcAddress( driver_glGetColorTable, glGetColorTable, "glGetColorTable" );
    if( driver_glGetColorTable == NULL ) {
      driver_glGetColorTable = missing_glGetColorTable;
    }
    dt.glGetColorTable = MakeRegalProc(loader_glGetColorTable,layer);
    _getProcAddress( driver_glGetColorTableParameterfv, glGetColorTableParameterfv, "glGetColorTableParameterfv" );
    if( driver_glGetColorTableParameterfv == NULL ) {
      driver_glGetColorTableParameterfv = missing_glGetColorTableParameterfv;
    }
    dt.glGetColorTableParameterfv = MakeRegalProc(loader_glGetColorTableParameterfv,layer);
    _getProcAddress( driver_glGetColorTableParameteriv, glGetColorTableParameteriv, "glGetColorTableParameteriv" );
    if( driver_glGetColorTableParameteriv == NULL ) {
      driver_glGetColorTableParameteriv = missing_glGetColorTableParameteriv;
    }
    dt.glGetColorTableParameteriv = MakeRegalProc(loader_glGetColorTableParameteriv,layer);
    _getProcAddress( driver_glGetConvolutionFilter, glGetConvolutionFilter, "glGetConvolutionFilter" );
    if( driver_glGetConvolutionFilter == NULL ) {
      driver_glGetConvolutionFilter = missing_glGetConvolutionFilter;
    }
    dt.glGetConvolutionFilter = MakeRegalProc(loader_glGetConvolutionFilter,layer);
    _getProcAddress( driver_glGetConvolutionParameterfv, glGetConvolutionParameterfv, "glGetConvolutionParameterfv" );
    if( driver_glGetConvolutionParameterfv == NULL ) {
      driver_glGetConvolutionParameterfv = missing_glGetConvolutionParameterfv;
    }
    dt.glGetConvolutionParameterfv = MakeRegalProc(loader_glGetConvolutionParameterfv,layer);
    _getProcAddress( driver_glGetConvolutionParameteriv, glGetConvolutionParameteriv, "glGetConvolutionParameteriv" );
    if( driver_glGetConvolutionParameteriv == NULL ) {
      driver_glGetConvolutionParameteriv = missing_glGetConvolutionParameteriv;
    }
    dt.glGetConvolutionParameteriv = MakeRegalProc(loader_glGetConvolutionParameteriv,layer);
    _getProcAddress( driver_glGetHistogram, glGetHistogram, "glGetHistogram" );
    if( driver_glGetHistogram == NULL ) {
      driver_glGetHistogram = missing_glGetHistogram;
    }
    dt.glGetHistogram = MakeRegalProc(loader_glGetHistogram,layer);
    _getProcAddress( driver_glGetHistogramParameterfv, glGetHistogramParameterfv, "glGetHistogramParameterfv" );
    if( driver_glGetHistogramParameterfv == NULL ) {
      driver_glGetHistogramParameterfv = missing_glGetHistogramParameterfv;
    }
    dt.glGetHistogramParameterfv = MakeRegalProc(loader_glGetHistogramParameterfv,layer);
    _getProcAddress( driver_glGetHistogramParameteriv, glGetHistogramParameteriv, "glGetHistogramParameteriv" );
    if( driver_glGetHistogramParameteriv == NULL ) {
      driver_glGetHistogramParameteriv = missing_glGetHistogramParameteriv;
    }
    dt.glGetHistogramParameteriv = MakeRegalProc(loader_glGetHistogramParameteriv,layer);
    _getProcAddress( driver_glGetMinmax, glGetMinmax, "glGetMinmax" );
    if( driver_glGetMinmax == NULL ) {
      driver_glGetMinmax = missing_glGetMinmax;
    }
    dt.glGetMinmax = MakeRegalProc(loader_glGetMinmax,layer);
    _getProcAddress( driver_glGetMinmaxParameterfv, glGetMinmaxParameterfv, "glGetMinmaxParameterfv" );
    if( driver_glGetMinmaxParameterfv == NULL ) {
      driver_glGetMinmaxParameterfv = missing_glGetMinmaxParameterfv;
    }
    dt.glGetMinmaxParameterfv = MakeRegalProc(loader_glGetMinmaxParameterfv,layer);
    _getProcAddress( driver_glGetMinmaxParameteriv, glGetMinmaxParameteriv, "glGetMinmaxParameteriv" );
    if( driver_glGetMinmaxParameteriv == NULL ) {
      driver_glGetMinmaxParameteriv = missing_glGetMinmaxParameteriv;
    }
    dt.glGetMinmaxParameteriv = MakeRegalProc(loader_glGetMinmaxParameteriv,layer);
    _getProcAddress( driver_glGetSeparableFilter, glGetSeparableFilter, "glGetSeparableFilter" );
    if( driver_glGetSeparableFilter == NULL ) {
      driver_glGetSeparableFilter = missing_glGetSeparableFilter;
    }
    dt.glGetSeparableFilter = MakeRegalProc(loader_glGetSeparableFilter,layer);
    _getProcAddress( driver_glHistogram, glHistogram, "glHistogram" );
    if( driver_glHistogram == NULL ) {
      driver_glHistogram = missing_glHistogram;
    }
    dt.glHistogram = MakeRegalProc(loader_glHistogram,layer);
    _getProcAddress( driver_glMinmax, glMinmax, "glMinmax" );
    if( driver_glMinmax == NULL ) {
      driver_glMinmax = missing_glMinmax;
    }
    dt.glMinmax = MakeRegalProc(loader_glMinmax,layer);
    _getProcAddress( driver_glResetHistogram, glResetHistogram, "glResetHistogram" );
    if( driver_glResetHistogram == NULL ) {
      driver_glResetHistogram = missing_glResetHistogram;
    }
    dt.glResetHistogram = MakeRegalProc(loader_glResetHistogram,layer);
    _getProcAddress( driver_glResetMinmax, glResetMinmax, "glResetMinmax" );
    if( driver_glResetMinmax == NULL ) {
      driver_glResetMinmax = missing_glResetMinmax;
    }
    dt.glResetMinmax = MakeRegalProc(loader_glResetMinmax,layer);
    _getProcAddress( driver_glSeparableFilter2D, glSeparableFilter2D, "glSeparableFilter2D" );
    if( driver_glSeparableFilter2D == NULL ) {
      driver_glSeparableFilter2D = missing_glSeparableFilter2D;
    }
    dt.glSeparableFilter2D = MakeRegalProc(loader_glSeparableFilter2D,layer);

    // GL_ARB_indirect_parameters

    _getProcAddress( driver_glMultiDrawArraysIndirectCountARB, glMultiDrawArraysIndirectCountARB, "glMultiDrawArraysIndirectCountARB" );
    if( driver_glMultiDrawArraysIndirectCountARB == NULL ) {
      driver_glMultiDrawArraysIndirectCountARB = missing_glMultiDrawArraysIndirectCountARB;
    }
    dt.glMultiDrawArraysIndirectCountARB = MakeRegalProc(loader_glMultiDrawArraysIndirectCountARB,layer);
    _getProcAddress( driver_glMultiDrawElementsIndirectCountARB, glMultiDrawElementsIndirectCountARB, "glMultiDrawElementsIndirectCountARB" );
    if( driver_glMultiDrawElementsIndirectCountARB == NULL ) {
      driver_glMultiDrawElementsIndirectCountARB = missing_glMultiDrawElementsIndirectCountARB;
    }
    dt.glMultiDrawElementsIndirectCountARB = MakeRegalProc(loader_glMultiDrawElementsIndirectCountARB,layer);

    // GL_ARB_instanced_arrays

    _getProcAddress( driver_glVertexAttribDivisorARB, glVertexAttribDivisorARB, "glVertexAttribDivisorARB" );
    if( driver_glVertexAttribDivisorARB == NULL ) {
      driver_glVertexAttribDivisorARB = missing_glVertexAttribDivisorARB;
    }
    dt.glVertexAttribDivisorARB = MakeRegalProc(loader_glVertexAttribDivisorARB,layer);

    // GL_ARB_internalformat_query

    _getProcAddress( driver_glGetInternalformativ, glGetInternalformativ, "glGetInternalformativ" );
    if( driver_glGetInternalformativ == NULL ) {
      driver_glGetInternalformativ = missing_glGetInternalformativ;
    }
    dt.glGetInternalformativ = MakeRegalProc(loader_glGetInternalformativ,layer);

    // GL_ARB_internalformat_query2

    _getProcAddress( driver_glGetInternalformati64v, glGetInternalformati64v, "glGetInternalformati64v" );
    if( driver_glGetInternalformati64v == NULL ) {
      driver_glGetInternalformati64v = missing_glGetInternalformati64v;
    }
    dt.glGetInternalformati64v = MakeRegalProc(loader_glGetInternalformati64v,layer);

    // GL_ARB_invalidate_subdata

    _getProcAddress( driver_glInvalidateBufferData, glInvalidateBufferData, "glInvalidateBufferData" );
    if( driver_glInvalidateBufferData == NULL ) {
      driver_glInvalidateBufferData = missing_glInvalidateBufferData;
    }
    dt.glInvalidateBufferData = MakeRegalProc(loader_glInvalidateBufferData,layer);
    _getProcAddress( driver_glInvalidateBufferSubData, glInvalidateBufferSubData, "glInvalidateBufferSubData" );
    if( driver_glInvalidateBufferSubData == NULL ) {
      driver_glInvalidateBufferSubData = missing_glInvalidateBufferSubData;
    }
    dt.glInvalidateBufferSubData = MakeRegalProc(loader_glInvalidateBufferSubData,layer);
    _getProcAddress( driver_glInvalidateFramebuffer, glInvalidateFramebuffer, "glInvalidateFramebuffer" );
    if( driver_glInvalidateFramebuffer == NULL ) {
      driver_glInvalidateFramebuffer = missing_glInvalidateFramebuffer;
    }
    dt.glInvalidateFramebuffer = MakeRegalProc(loader_glInvalidateFramebuffer,layer);
    _getProcAddress( driver_glInvalidateSubFramebuffer, glInvalidateSubFramebuffer, "glInvalidateSubFramebuffer" );
    if( driver_glInvalidateSubFramebuffer == NULL ) {
      driver_glInvalidateSubFramebuffer = missing_glInvalidateSubFramebuffer;
    }
    dt.glInvalidateSubFramebuffer = MakeRegalProc(loader_glInvalidateSubFramebuffer,layer);
    _getProcAddress( driver_glInvalidateTexImage, glInvalidateTexImage, "glInvalidateTexImage" );
    if( driver_glInvalidateTexImage == NULL ) {
      driver_glInvalidateTexImage = missing_glInvalidateTexImage;
    }
    dt.glInvalidateTexImage = MakeRegalProc(loader_glInvalidateTexImage,layer);
    _getProcAddress( driver_glInvalidateTexSubImage, glInvalidateTexSubImage, "glInvalidateTexSubImage" );
    if( driver_glInvalidateTexSubImage == NULL ) {
      driver_glInvalidateTexSubImage = missing_glInvalidateTexSubImage;
    }
    dt.glInvalidateTexSubImage = MakeRegalProc(loader_glInvalidateTexSubImage,layer);

    // GL_ARB_map_buffer_range

    _getProcAddress( driver_glFlushMappedBufferRange, glFlushMappedBufferRange, "glFlushMappedBufferRange" );
    if( driver_glFlushMappedBufferRange == NULL ) {
      driver_glFlushMappedBufferRange = missing_glFlushMappedBufferRange;
    }
    dt.glFlushMappedBufferRange = MakeRegalProc(loader_glFlushMappedBufferRange,layer);
    _getProcAddress( driver_glMapBufferRange, glMapBufferRange, "glMapBufferRange" );
    if( driver_glMapBufferRange == NULL ) {
      driver_glMapBufferRange = missing_glMapBufferRange;
    }
    dt.glMapBufferRange = MakeRegalProc(loader_glMapBufferRange,layer);

    // GL_ARB_matrix_palette

    _getProcAddress( driver_glCurrentPaletteMatrixARB, glCurrentPaletteMatrixARB, "glCurrentPaletteMatrixARB" );
    if( driver_glCurrentPaletteMatrixARB == NULL ) {
      driver_glCurrentPaletteMatrixARB = missing_glCurrentPaletteMatrixARB;
    }
    dt.glCurrentPaletteMatrixARB = MakeRegalProc(loader_glCurrentPaletteMatrixARB,layer);
    _getProcAddress( driver_glMatrixIndexPointerARB, glMatrixIndexPointerARB, "glMatrixIndexPointerARB" );
    if( driver_glMatrixIndexPointerARB == NULL ) {
      driver_glMatrixIndexPointerARB = missing_glMatrixIndexPointerARB;
    }
    dt.glMatrixIndexPointerARB = MakeRegalProc(loader_glMatrixIndexPointerARB,layer);
    _getProcAddress( driver_glMatrixIndexubvARB, glMatrixIndexubvARB, "glMatrixIndexubvARB" );
    if( driver_glMatrixIndexubvARB == NULL ) {
      driver_glMatrixIndexubvARB = missing_glMatrixIndexubvARB;
    }
    dt.glMatrixIndexubvARB = MakeRegalProc(loader_glMatrixIndexubvARB,layer);
    _getProcAddress( driver_glMatrixIndexuivARB, glMatrixIndexuivARB, "glMatrixIndexuivARB" );
    if( driver_glMatrixIndexuivARB == NULL ) {
      driver_glMatrixIndexuivARB = missing_glMatrixIndexuivARB;
    }
    dt.glMatrixIndexuivARB = MakeRegalProc(loader_glMatrixIndexuivARB,layer);
    _getProcAddress( driver_glMatrixIndexusvARB, glMatrixIndexusvARB, "glMatrixIndexusvARB" );
    if( driver_glMatrixIndexusvARB == NULL ) {
      driver_glMatrixIndexusvARB = missing_glMatrixIndexusvARB;
    }
    dt.glMatrixIndexusvARB = MakeRegalProc(loader_glMatrixIndexusvARB,layer);

    // GL_ARB_multi_bind

    _getProcAddress( driver_glBindBuffersBase, glBindBuffersBase, "glBindBuffersBase" );
    if( driver_glBindBuffersBase == NULL ) {
      driver_glBindBuffersBase = missing_glBindBuffersBase;
    }
    dt.glBindBuffersBase = MakeRegalProc(loader_glBindBuffersBase,layer);
    _getProcAddress( driver_glBindBuffersRange, glBindBuffersRange, "glBindBuffersRange" );
    if( driver_glBindBuffersRange == NULL ) {
      driver_glBindBuffersRange = missing_glBindBuffersRange;
    }
    dt.glBindBuffersRange = MakeRegalProc(loader_glBindBuffersRange,layer);
    _getProcAddress( driver_glBindImageTextures, glBindImageTextures, "glBindImageTextures" );
    if( driver_glBindImageTextures == NULL ) {
      driver_glBindImageTextures = missing_glBindImageTextures;
    }
    dt.glBindImageTextures = MakeRegalProc(loader_glBindImageTextures,layer);
    _getProcAddress( driver_glBindSamplers, glBindSamplers, "glBindSamplers" );
    if( driver_glBindSamplers == NULL ) {
      driver_glBindSamplers = missing_glBindSamplers;
    }
    dt.glBindSamplers = MakeRegalProc(loader_glBindSamplers,layer);
    _getProcAddress( driver_glBindTextures, glBindTextures, "glBindTextures" );
    if( driver_glBindTextures == NULL ) {
      driver_glBindTextures = missing_glBindTextures;
    }
    dt.glBindTextures = MakeRegalProc(loader_glBindTextures,layer);
    _getProcAddress( driver_glBindVertexBuffers, glBindVertexBuffers, "glBindVertexBuffers" );
    if( driver_glBindVertexBuffers == NULL ) {
      driver_glBindVertexBuffers = missing_glBindVertexBuffers;
    }
    dt.glBindVertexBuffers = MakeRegalProc(loader_glBindVertexBuffers,layer);

    // GL_ARB_multi_draw_indirect

    _getProcAddress( driver_glMultiDrawArraysIndirect, glMultiDrawArraysIndirect, "glMultiDrawArraysIndirect" );
    if( driver_glMultiDrawArraysIndirect == NULL ) {
      driver_glMultiDrawArraysIndirect = missing_glMultiDrawArraysIndirect;
    }
    dt.glMultiDrawArraysIndirect = MakeRegalProc(loader_glMultiDrawArraysIndirect,layer);
    _getProcAddress( driver_glMultiDrawElementsIndirect, glMultiDrawElementsIndirect, "glMultiDrawElementsIndirect" );
    if( driver_glMultiDrawElementsIndirect == NULL ) {
      driver_glMultiDrawElementsIndirect = missing_glMultiDrawElementsIndirect;
    }
    dt.glMultiDrawElementsIndirect = MakeRegalProc(loader_glMultiDrawElementsIndirect,layer);

    // GL_ARB_multisample

    _getProcAddress( driver_glSampleCoverageARB, glSampleCoverageARB, "glSampleCoverageARB" );
    if( driver_glSampleCoverageARB == NULL ) {
      driver_glSampleCoverageARB = missing_glSampleCoverageARB;
    }
    dt.glSampleCoverageARB = MakeRegalProc(loader_glSampleCoverageARB,layer);

    // GL_ARB_multitexture

    _getProcAddress( driver_glActiveTextureARB, glActiveTextureARB, "glActiveTextureARB" );
    if( driver_glActiveTextureARB == NULL ) {
      driver_glActiveTextureARB = missing_glActiveTextureARB;
    }
    dt.glActiveTextureARB = MakeRegalProc(loader_glActiveTextureARB,layer);
    _getProcAddress( driver_glClientActiveTextureARB, glClientActiveTextureARB, "glClientActiveTextureARB" );
    if( driver_glClientActiveTextureARB == NULL ) {
      driver_glClientActiveTextureARB = missing_glClientActiveTextureARB;
    }
    dt.glClientActiveTextureARB = MakeRegalProc(loader_glClientActiveTextureARB,layer);
    _getProcAddress( driver_glMultiTexCoord1dARB, glMultiTexCoord1dARB, "glMultiTexCoord1dARB" );
    if( driver_glMultiTexCoord1dARB == NULL ) {
      driver_glMultiTexCoord1dARB = missing_glMultiTexCoord1dARB;
    }
    dt.glMultiTexCoord1dARB = MakeRegalProc(loader_glMultiTexCoord1dARB,layer);
    _getProcAddress( driver_glMultiTexCoord1dvARB, glMultiTexCoord1dvARB, "glMultiTexCoord1dvARB" );
    if( driver_glMultiTexCoord1dvARB == NULL ) {
      driver_glMultiTexCoord1dvARB = missing_glMultiTexCoord1dvARB;
    }
    dt.glMultiTexCoord1dvARB = MakeRegalProc(loader_glMultiTexCoord1dvARB,layer);
    _getProcAddress( driver_glMultiTexCoord1fARB, glMultiTexCoord1fARB, "glMultiTexCoord1fARB" );
    if( driver_glMultiTexCoord1fARB == NULL ) {
      driver_glMultiTexCoord1fARB = missing_glMultiTexCoord1fARB;
    }
    dt.glMultiTexCoord1fARB = MakeRegalProc(loader_glMultiTexCoord1fARB,layer);
    _getProcAddress( driver_glMultiTexCoord1fvARB, glMultiTexCoord1fvARB, "glMultiTexCoord1fvARB" );
    if( driver_glMultiTexCoord1fvARB == NULL ) {
      driver_glMultiTexCoord1fvARB = missing_glMultiTexCoord1fvARB;
    }
    dt.glMultiTexCoord1fvARB = MakeRegalProc(loader_glMultiTexCoord1fvARB,layer);
    _getProcAddress( driver_glMultiTexCoord1iARB, glMultiTexCoord1iARB, "glMultiTexCoord1iARB" );
    if( driver_glMultiTexCoord1iARB == NULL ) {
      driver_glMultiTexCoord1iARB = missing_glMultiTexCoord1iARB;
    }
    dt.glMultiTexCoord1iARB = MakeRegalProc(loader_glMultiTexCoord1iARB,layer);
    _getProcAddress( driver_glMultiTexCoord1ivARB, glMultiTexCoord1ivARB, "glMultiTexCoord1ivARB" );
    if( driver_glMultiTexCoord1ivARB == NULL ) {
      driver_glMultiTexCoord1ivARB = missing_glMultiTexCoord1ivARB;
    }
    dt.glMultiTexCoord1ivARB = MakeRegalProc(loader_glMultiTexCoord1ivARB,layer);
    _getProcAddress( driver_glMultiTexCoord1sARB, glMultiTexCoord1sARB, "glMultiTexCoord1sARB" );
    if( driver_glMultiTexCoord1sARB == NULL ) {
      driver_glMultiTexCoord1sARB = missing_glMultiTexCoord1sARB;
    }
    dt.glMultiTexCoord1sARB = MakeRegalProc(loader_glMultiTexCoord1sARB,layer);
    _getProcAddress( driver_glMultiTexCoord1svARB, glMultiTexCoord1svARB, "glMultiTexCoord1svARB" );
    if( driver_glMultiTexCoord1svARB == NULL ) {
      driver_glMultiTexCoord1svARB = missing_glMultiTexCoord1svARB;
    }
    dt.glMultiTexCoord1svARB = MakeRegalProc(loader_glMultiTexCoord1svARB,layer);
    _getProcAddress( driver_glMultiTexCoord2dARB, glMultiTexCoord2dARB, "glMultiTexCoord2dARB" );
    if( driver_glMultiTexCoord2dARB == NULL ) {
      driver_glMultiTexCoord2dARB = missing_glMultiTexCoord2dARB;
    }
    dt.glMultiTexCoord2dARB = MakeRegalProc(loader_glMultiTexCoord2dARB,layer);
    _getProcAddress( driver_glMultiTexCoord2dvARB, glMultiTexCoord2dvARB, "glMultiTexCoord2dvARB" );
    if( driver_glMultiTexCoord2dvARB == NULL ) {
      driver_glMultiTexCoord2dvARB = missing_glMultiTexCoord2dvARB;
    }
    dt.glMultiTexCoord2dvARB = MakeRegalProc(loader_glMultiTexCoord2dvARB,layer);
    _getProcAddress( driver_glMultiTexCoord2fARB, glMultiTexCoord2fARB, "glMultiTexCoord2fARB" );
    if( driver_glMultiTexCoord2fARB == NULL ) {
      driver_glMultiTexCoord2fARB = missing_glMultiTexCoord2fARB;
    }
    dt.glMultiTexCoord2fARB = MakeRegalProc(loader_glMultiTexCoord2fARB,layer);
    _getProcAddress( driver_glMultiTexCoord2fvARB, glMultiTexCoord2fvARB, "glMultiTexCoord2fvARB" );
    if( driver_glMultiTexCoord2fvARB == NULL ) {
      driver_glMultiTexCoord2fvARB = missing_glMultiTexCoord2fvARB;
    }
    dt.glMultiTexCoord2fvARB = MakeRegalProc(loader_glMultiTexCoord2fvARB,layer);
    _getProcAddress( driver_glMultiTexCoord2iARB, glMultiTexCoord2iARB, "glMultiTexCoord2iARB" );
    if( driver_glMultiTexCoord2iARB == NULL ) {
      driver_glMultiTexCoord2iARB = missing_glMultiTexCoord2iARB;
    }
    dt.glMultiTexCoord2iARB = MakeRegalProc(loader_glMultiTexCoord2iARB,layer);
    _getProcAddress( driver_glMultiTexCoord2ivARB, glMultiTexCoord2ivARB, "glMultiTexCoord2ivARB" );
    if( driver_glMultiTexCoord2ivARB == NULL ) {
      driver_glMultiTexCoord2ivARB = missing_glMultiTexCoord2ivARB;
    }
    dt.glMultiTexCoord2ivARB = MakeRegalProc(loader_glMultiTexCoord2ivARB,layer);
    _getProcAddress( driver_glMultiTexCoord2sARB, glMultiTexCoord2sARB, "glMultiTexCoord2sARB" );
    if( driver_glMultiTexCoord2sARB == NULL ) {
      driver_glMultiTexCoord2sARB = missing_glMultiTexCoord2sARB;
    }
    dt.glMultiTexCoord2sARB = MakeRegalProc(loader_glMultiTexCoord2sARB,layer);
    _getProcAddress( driver_glMultiTexCoord2svARB, glMultiTexCoord2svARB, "glMultiTexCoord2svARB" );
    if( driver_glMultiTexCoord2svARB == NULL ) {
      driver_glMultiTexCoord2svARB = missing_glMultiTexCoord2svARB;
    }
    dt.glMultiTexCoord2svARB = MakeRegalProc(loader_glMultiTexCoord2svARB,layer);
    _getProcAddress( driver_glMultiTexCoord3dARB, glMultiTexCoord3dARB, "glMultiTexCoord3dARB" );
    if( driver_glMultiTexCoord3dARB == NULL ) {
      driver_glMultiTexCoord3dARB = missing_glMultiTexCoord3dARB;
    }
    dt.glMultiTexCoord3dARB = MakeRegalProc(loader_glMultiTexCoord3dARB,layer);
    _getProcAddress( driver_glMultiTexCoord3dvARB, glMultiTexCoord3dvARB, "glMultiTexCoord3dvARB" );
    if( driver_glMultiTexCoord3dvARB == NULL ) {
      driver_glMultiTexCoord3dvARB = missing_glMultiTexCoord3dvARB;
    }
    dt.glMultiTexCoord3dvARB = MakeRegalProc(loader_glMultiTexCoord3dvARB,layer);
    _getProcAddress( driver_glMultiTexCoord3fARB, glMultiTexCoord3fARB, "glMultiTexCoord3fARB" );
    if( driver_glMultiTexCoord3fARB == NULL ) {
      driver_glMultiTexCoord3fARB = missing_glMultiTexCoord3fARB;
    }
    dt.glMultiTexCoord3fARB = MakeRegalProc(loader_glMultiTexCoord3fARB,layer);
    _getProcAddress( driver_glMultiTexCoord3fvARB, glMultiTexCoord3fvARB, "glMultiTexCoord3fvARB" );
    if( driver_glMultiTexCoord3fvARB == NULL ) {
      driver_glMultiTexCoord3fvARB = missing_glMultiTexCoord3fvARB;
    }
    dt.glMultiTexCoord3fvARB = MakeRegalProc(loader_glMultiTexCoord3fvARB,layer);
    _getProcAddress( driver_glMultiTexCoord3iARB, glMultiTexCoord3iARB, "glMultiTexCoord3iARB" );
    if( driver_glMultiTexCoord3iARB == NULL ) {
      driver_glMultiTexCoord3iARB = missing_glMultiTexCoord3iARB;
    }
    dt.glMultiTexCoord3iARB = MakeRegalProc(loader_glMultiTexCoord3iARB,layer);
    _getProcAddress( driver_glMultiTexCoord3ivARB, glMultiTexCoord3ivARB, "glMultiTexCoord3ivARB" );
    if( driver_glMultiTexCoord3ivARB == NULL ) {
      driver_glMultiTexCoord3ivARB = missing_glMultiTexCoord3ivARB;
    }
    dt.glMultiTexCoord3ivARB = MakeRegalProc(loader_glMultiTexCoord3ivARB,layer);
    _getProcAddress( driver_glMultiTexCoord3sARB, glMultiTexCoord3sARB, "glMultiTexCoord3sARB" );
    if( driver_glMultiTexCoord3sARB == NULL ) {
      driver_glMultiTexCoord3sARB = missing_glMultiTexCoord3sARB;
    }
    dt.glMultiTexCoord3sARB = MakeRegalProc(loader_glMultiTexCoord3sARB,layer);
    _getProcAddress( driver_glMultiTexCoord3svARB, glMultiTexCoord3svARB, "glMultiTexCoord3svARB" );
    if( driver_glMultiTexCoord3svARB == NULL ) {
      driver_glMultiTexCoord3svARB = missing_glMultiTexCoord3svARB;
    }
    dt.glMultiTexCoord3svARB = MakeRegalProc(loader_glMultiTexCoord3svARB,layer);
    _getProcAddress( driver_glMultiTexCoord4dARB, glMultiTexCoord4dARB, "glMultiTexCoord4dARB" );
    if( driver_glMultiTexCoord4dARB == NULL ) {
      driver_glMultiTexCoord4dARB = missing_glMultiTexCoord4dARB;
    }
    dt.glMultiTexCoord4dARB = MakeRegalProc(loader_glMultiTexCoord4dARB,layer);
    _getProcAddress( driver_glMultiTexCoord4dvARB, glMultiTexCoord4dvARB, "glMultiTexCoord4dvARB" );
    if( driver_glMultiTexCoord4dvARB == NULL ) {
      driver_glMultiTexCoord4dvARB = missing_glMultiTexCoord4dvARB;
    }
    dt.glMultiTexCoord4dvARB = MakeRegalProc(loader_glMultiTexCoord4dvARB,layer);
    _getProcAddress( driver_glMultiTexCoord4fARB, glMultiTexCoord4fARB, "glMultiTexCoord4fARB" );
    if( driver_glMultiTexCoord4fARB == NULL ) {
      driver_glMultiTexCoord4fARB = missing_glMultiTexCoord4fARB;
    }
    dt.glMultiTexCoord4fARB = MakeRegalProc(loader_glMultiTexCoord4fARB,layer);
    _getProcAddress( driver_glMultiTexCoord4fvARB, glMultiTexCoord4fvARB, "glMultiTexCoord4fvARB" );
    if( driver_glMultiTexCoord4fvARB == NULL ) {
      driver_glMultiTexCoord4fvARB = missing_glMultiTexCoord4fvARB;
    }
    dt.glMultiTexCoord4fvARB = MakeRegalProc(loader_glMultiTexCoord4fvARB,layer);
    _getProcAddress( driver_glMultiTexCoord4iARB, glMultiTexCoord4iARB, "glMultiTexCoord4iARB" );
    if( driver_glMultiTexCoord4iARB == NULL ) {
      driver_glMultiTexCoord4iARB = missing_glMultiTexCoord4iARB;
    }
    dt.glMultiTexCoord4iARB = MakeRegalProc(loader_glMultiTexCoord4iARB,layer);
    _getProcAddress( driver_glMultiTexCoord4ivARB, glMultiTexCoord4ivARB, "glMultiTexCoord4ivARB" );
    if( driver_glMultiTexCoord4ivARB == NULL ) {
      driver_glMultiTexCoord4ivARB = missing_glMultiTexCoord4ivARB;
    }
    dt.glMultiTexCoord4ivARB = MakeRegalProc(loader_glMultiTexCoord4ivARB,layer);
    _getProcAddress( driver_glMultiTexCoord4sARB, glMultiTexCoord4sARB, "glMultiTexCoord4sARB" );
    if( driver_glMultiTexCoord4sARB == NULL ) {
      driver_glMultiTexCoord4sARB = missing_glMultiTexCoord4sARB;
    }
    dt.glMultiTexCoord4sARB = MakeRegalProc(loader_glMultiTexCoord4sARB,layer);
    _getProcAddress( driver_glMultiTexCoord4svARB, glMultiTexCoord4svARB, "glMultiTexCoord4svARB" );
    if( driver_glMultiTexCoord4svARB == NULL ) {
      driver_glMultiTexCoord4svARB = missing_glMultiTexCoord4svARB;
    }
    dt.glMultiTexCoord4svARB = MakeRegalProc(loader_glMultiTexCoord4svARB,layer);

    // GL_ARB_occlusion_query

    _getProcAddress( driver_glBeginQueryARB, glBeginQueryARB, "glBeginQueryARB" );
    if( driver_glBeginQueryARB == NULL ) {
      driver_glBeginQueryARB = missing_glBeginQueryARB;
    }
    dt.glBeginQueryARB = MakeRegalProc(loader_glBeginQueryARB,layer);
    _getProcAddress( driver_glDeleteQueriesARB, glDeleteQueriesARB, "glDeleteQueriesARB" );
    if( driver_glDeleteQueriesARB == NULL ) {
      driver_glDeleteQueriesARB = missing_glDeleteQueriesARB;
    }
    dt.glDeleteQueriesARB = MakeRegalProc(loader_glDeleteQueriesARB,layer);
    _getProcAddress( driver_glEndQueryARB, glEndQueryARB, "glEndQueryARB" );
    if( driver_glEndQueryARB == NULL ) {
      driver_glEndQueryARB = missing_glEndQueryARB;
    }
    dt.glEndQueryARB = MakeRegalProc(loader_glEndQueryARB,layer);
    _getProcAddress( driver_glGenQueriesARB, glGenQueriesARB, "glGenQueriesARB" );
    if( driver_glGenQueriesARB == NULL ) {
      driver_glGenQueriesARB = missing_glGenQueriesARB;
    }
    dt.glGenQueriesARB = MakeRegalProc(loader_glGenQueriesARB,layer);
    _getProcAddress( driver_glGetQueryObjectivARB, glGetQueryObjectivARB, "glGetQueryObjectivARB" );
    if( driver_glGetQueryObjectivARB == NULL ) {
      driver_glGetQueryObjectivARB = missing_glGetQueryObjectivARB;
    }
    dt.glGetQueryObjectivARB = MakeRegalProc(loader_glGetQueryObjectivARB,layer);
    _getProcAddress( driver_glGetQueryObjectuivARB, glGetQueryObjectuivARB, "glGetQueryObjectuivARB" );
    if( driver_glGetQueryObjectuivARB == NULL ) {
      driver_glGetQueryObjectuivARB = missing_glGetQueryObjectuivARB;
    }
    dt.glGetQueryObjectuivARB = MakeRegalProc(loader_glGetQueryObjectuivARB,layer);
    _getProcAddress( driver_glGetQueryivARB, glGetQueryivARB, "glGetQueryivARB" );
    if( driver_glGetQueryivARB == NULL ) {
      driver_glGetQueryivARB = missing_glGetQueryivARB;
    }
    dt.glGetQueryivARB = MakeRegalProc(loader_glGetQueryivARB,layer);
    _getProcAddress( driver_glIsQueryARB, glIsQueryARB, "glIsQueryARB" );
    if( driver_glIsQueryARB == NULL ) {
      driver_glIsQueryARB = missing_glIsQueryARB;
    }
    dt.glIsQueryARB = MakeRegalProc(loader_glIsQueryARB,layer);

    // GL_ARB_point_parameters

    _getProcAddress( driver_glPointParameterfARB, glPointParameterfARB, "glPointParameterfARB" );
    if( driver_glPointParameterfARB == NULL ) {
      driver_glPointParameterfARB = missing_glPointParameterfARB;
    }
    dt.glPointParameterfARB = MakeRegalProc(loader_glPointParameterfARB,layer);
    _getProcAddress( driver_glPointParameterfvARB, glPointParameterfvARB, "glPointParameterfvARB" );
    if( driver_glPointParameterfvARB == NULL ) {
      driver_glPointParameterfvARB = missing_glPointParameterfvARB;
    }
    dt.glPointParameterfvARB = MakeRegalProc(loader_glPointParameterfvARB,layer);

    // GL_ARB_program_interface_query

    _getProcAddress( driver_glGetProgramInterfaceiv, glGetProgramInterfaceiv, "glGetProgramInterfaceiv" );
    if( driver_glGetProgramInterfaceiv == NULL ) {
      driver_glGetProgramInterfaceiv = missing_glGetProgramInterfaceiv;
    }
    dt.glGetProgramInterfaceiv = MakeRegalProc(loader_glGetProgramInterfaceiv,layer);
    _getProcAddress( driver_glGetProgramResourceIndex, glGetProgramResourceIndex, "glGetProgramResourceIndex" );
    if( driver_glGetProgramResourceIndex == NULL ) {
      driver_glGetProgramResourceIndex = missing_glGetProgramResourceIndex;
    }
    dt.glGetProgramResourceIndex = MakeRegalProc(loader_glGetProgramResourceIndex,layer);
    _getProcAddress( driver_glGetProgramResourceLocation, glGetProgramResourceLocation, "glGetProgramResourceLocation" );
    if( driver_glGetProgramResourceLocation == NULL ) {
      driver_glGetProgramResourceLocation = missing_glGetProgramResourceLocation;
    }
    dt.glGetProgramResourceLocation = MakeRegalProc(loader_glGetProgramResourceLocation,layer);
    _getProcAddress( driver_glGetProgramResourceLocationIndex, glGetProgramResourceLocationIndex, "glGetProgramResourceLocationIndex" );
    if( driver_glGetProgramResourceLocationIndex == NULL ) {
      driver_glGetProgramResourceLocationIndex = missing_glGetProgramResourceLocationIndex;
    }
    dt.glGetProgramResourceLocationIndex = MakeRegalProc(loader_glGetProgramResourceLocationIndex,layer);
    _getProcAddress( driver_glGetProgramResourceName, glGetProgramResourceName, "glGetProgramResourceName" );
    if( driver_glGetProgramResourceName == NULL ) {
      driver_glGetProgramResourceName = missing_glGetProgramResourceName;
    }
    dt.glGetProgramResourceName = MakeRegalProc(loader_glGetProgramResourceName,layer);
    _getProcAddress( driver_glGetProgramResourceiv, glGetProgramResourceiv, "glGetProgramResourceiv" );
    if( driver_glGetProgramResourceiv == NULL ) {
      driver_glGetProgramResourceiv = missing_glGetProgramResourceiv;
    }
    dt.glGetProgramResourceiv = MakeRegalProc(loader_glGetProgramResourceiv,layer);

    // GL_ARB_provoking_vertex

    _getProcAddress( driver_glProvokingVertex, glProvokingVertex, "glProvokingVertex" );
    if( driver_glProvokingVertex == NULL ) {
      driver_glProvokingVertex = missing_glProvokingVertex;
    }
    dt.glProvokingVertex = MakeRegalProc(loader_glProvokingVertex,layer);

    // GL_ARB_robustness

    _getProcAddress( driver_glGetGraphicsResetStatusARB, glGetGraphicsResetStatusARB, "glGetGraphicsResetStatusARB" );
    if( driver_glGetGraphicsResetStatusARB == NULL ) {
      driver_glGetGraphicsResetStatusARB = missing_glGetGraphicsResetStatusARB;
    }
    dt.glGetGraphicsResetStatusARB = MakeRegalProc(loader_glGetGraphicsResetStatusARB,layer);
    _getProcAddress( driver_glGetnColorTableARB, glGetnColorTableARB, "glGetnColorTableARB" );
    if( driver_glGetnColorTableARB == NULL ) {
      driver_glGetnColorTableARB = missing_glGetnColorTableARB;
    }
    dt.glGetnColorTableARB = MakeRegalProc(loader_glGetnColorTableARB,layer);
    _getProcAddress( driver_glGetnCompressedTexImageARB, glGetnCompressedTexImageARB, "glGetnCompressedTexImageARB" );
    if( driver_glGetnCompressedTexImageARB == NULL ) {
      driver_glGetnCompressedTexImageARB = missing_glGetnCompressedTexImageARB;
    }
    dt.glGetnCompressedTexImageARB = MakeRegalProc(loader_glGetnCompressedTexImageARB,layer);
    _getProcAddress( driver_glGetnConvolutionFilterARB, glGetnConvolutionFilterARB, "glGetnConvolutionFilterARB" );
    if( driver_glGetnConvolutionFilterARB == NULL ) {
      driver_glGetnConvolutionFilterARB = missing_glGetnConvolutionFilterARB;
    }
    dt.glGetnConvolutionFilterARB = MakeRegalProc(loader_glGetnConvolutionFilterARB,layer);
    _getProcAddress( driver_glGetnHistogramARB, glGetnHistogramARB, "glGetnHistogramARB" );
    if( driver_glGetnHistogramARB == NULL ) {
      driver_glGetnHistogramARB = missing_glGetnHistogramARB;
    }
    dt.glGetnHistogramARB = MakeRegalProc(loader_glGetnHistogramARB,layer);
    _getProcAddress( driver_glGetnMapdvARB, glGetnMapdvARB, "glGetnMapdvARB" );
    if( driver_glGetnMapdvARB == NULL ) {
      driver_glGetnMapdvARB = missing_glGetnMapdvARB;
    }
    dt.glGetnMapdvARB = MakeRegalProc(loader_glGetnMapdvARB,layer);
    _getProcAddress( driver_glGetnMapfvARB, glGetnMapfvARB, "glGetnMapfvARB" );
    if( driver_glGetnMapfvARB == NULL ) {
      driver_glGetnMapfvARB = missing_glGetnMapfvARB;
    }
    dt.glGetnMapfvARB = MakeRegalProc(loader_glGetnMapfvARB,layer);
    _getProcAddress( driver_glGetnMapivARB, glGetnMapivARB, "glGetnMapivARB" );
    if( driver_glGetnMapivARB == NULL ) {
      driver_glGetnMapivARB = missing_glGetnMapivARB;
    }
    dt.glGetnMapivARB = MakeRegalProc(loader_glGetnMapivARB,layer);
    _getProcAddress( driver_glGetnMinmaxARB, glGetnMinmaxARB, "glGetnMinmaxARB" );
    if( driver_glGetnMinmaxARB == NULL ) {
      driver_glGetnMinmaxARB = missing_glGetnMinmaxARB;
    }
    dt.glGetnMinmaxARB = MakeRegalProc(loader_glGetnMinmaxARB,layer);
    _getProcAddress( driver_glGetnPixelMapfvARB, glGetnPixelMapfvARB, "glGetnPixelMapfvARB" );
    if( driver_glGetnPixelMapfvARB == NULL ) {
      driver_glGetnPixelMapfvARB = missing_glGetnPixelMapfvARB;
    }
    dt.glGetnPixelMapfvARB = MakeRegalProc(loader_glGetnPixelMapfvARB,layer);
    _getProcAddress( driver_glGetnPixelMapuivARB, glGetnPixelMapuivARB, "glGetnPixelMapuivARB" );
    if( driver_glGetnPixelMapuivARB == NULL ) {
      driver_glGetnPixelMapuivARB = missing_glGetnPixelMapuivARB;
    }
    dt.glGetnPixelMapuivARB = MakeRegalProc(loader_glGetnPixelMapuivARB,layer);
    _getProcAddress( driver_glGetnPixelMapusvARB, glGetnPixelMapusvARB, "glGetnPixelMapusvARB" );
    if( driver_glGetnPixelMapusvARB == NULL ) {
      driver_glGetnPixelMapusvARB = missing_glGetnPixelMapusvARB;
    }
    dt.glGetnPixelMapusvARB = MakeRegalProc(loader_glGetnPixelMapusvARB,layer);
    _getProcAddress( driver_glGetnPolygonStippleARB, glGetnPolygonStippleARB, "glGetnPolygonStippleARB" );
    if( driver_glGetnPolygonStippleARB == NULL ) {
      driver_glGetnPolygonStippleARB = missing_glGetnPolygonStippleARB;
    }
    dt.glGetnPolygonStippleARB = MakeRegalProc(loader_glGetnPolygonStippleARB,layer);
    _getProcAddress( driver_glGetnSeparableFilterARB, glGetnSeparableFilterARB, "glGetnSeparableFilterARB" );
    if( driver_glGetnSeparableFilterARB == NULL ) {
      driver_glGetnSeparableFilterARB = missing_glGetnSeparableFilterARB;
    }
    dt.glGetnSeparableFilterARB = MakeRegalProc(loader_glGetnSeparableFilterARB,layer);
    _getProcAddress( driver_glGetnTexImageARB, glGetnTexImageARB, "glGetnTexImageARB" );
    if( driver_glGetnTexImageARB == NULL ) {
      driver_glGetnTexImageARB = missing_glGetnTexImageARB;
    }
    dt.glGetnTexImageARB = MakeRegalProc(loader_glGetnTexImageARB,layer);
    _getProcAddress( driver_glGetnUniformdvARB, glGetnUniformdvARB, "glGetnUniformdvARB" );
    if( driver_glGetnUniformdvARB == NULL ) {
      driver_glGetnUniformdvARB = missing_glGetnUniformdvARB;
    }
    dt.glGetnUniformdvARB = MakeRegalProc(loader_glGetnUniformdvARB,layer);
    _getProcAddress( driver_glGetnUniformfvARB, glGetnUniformfvARB, "glGetnUniformfvARB" );
    if( driver_glGetnUniformfvARB == NULL ) {
      driver_glGetnUniformfvARB = missing_glGetnUniformfvARB;
    }
    dt.glGetnUniformfvARB = MakeRegalProc(loader_glGetnUniformfvARB,layer);
    _getProcAddress( driver_glGetnUniformivARB, glGetnUniformivARB, "glGetnUniformivARB" );
    if( driver_glGetnUniformivARB == NULL ) {
      driver_glGetnUniformivARB = missing_glGetnUniformivARB;
    }
    dt.glGetnUniformivARB = MakeRegalProc(loader_glGetnUniformivARB,layer);
    _getProcAddress( driver_glGetnUniformuivARB, glGetnUniformuivARB, "glGetnUniformuivARB" );
    if( driver_glGetnUniformuivARB == NULL ) {
      driver_glGetnUniformuivARB = missing_glGetnUniformuivARB;
    }
    dt.glGetnUniformuivARB = MakeRegalProc(loader_glGetnUniformuivARB,layer);
    _getProcAddress( driver_glReadnPixelsARB, glReadnPixelsARB, "glReadnPixelsARB" );
    if( driver_glReadnPixelsARB == NULL ) {
      driver_glReadnPixelsARB = missing_glReadnPixelsARB;
    }
    dt.glReadnPixelsARB = MakeRegalProc(loader_glReadnPixelsARB,layer);

    // GL_ARB_sample_shading

    _getProcAddress( driver_glMinSampleShading, glMinSampleShading, "glMinSampleShading" );
    if( driver_glMinSampleShading == NULL ) {
      driver_glMinSampleShading = missing_glMinSampleShading;
    }
    dt.glMinSampleShading = MakeRegalProc(loader_glMinSampleShading,layer);
    _getProcAddress( driver_glMinSampleShadingARB, glMinSampleShadingARB, "glMinSampleShadingARB" );
    if( driver_glMinSampleShadingARB == NULL ) {
      driver_glMinSampleShadingARB = missing_glMinSampleShadingARB;
    }
    dt.glMinSampleShadingARB = MakeRegalProc(loader_glMinSampleShadingARB,layer);

    // GL_ARB_sampler_objects

    _getProcAddress( driver_glBindSampler, glBindSampler, "glBindSampler" );
    if( driver_glBindSampler == NULL ) {
      driver_glBindSampler = missing_glBindSampler;
    }
    dt.glBindSampler = MakeRegalProc(loader_glBindSampler,layer);
    _getProcAddress( driver_glDeleteSamplers, glDeleteSamplers, "glDeleteSamplers" );
    if( driver_glDeleteSamplers == NULL ) {
      driver_glDeleteSamplers = missing_glDeleteSamplers;
    }
    dt.glDeleteSamplers = MakeRegalProc(loader_glDeleteSamplers,layer);
    _getProcAddress( driver_glGenSamplers, glGenSamplers, "glGenSamplers" );
    if( driver_glGenSamplers == NULL ) {
      driver_glGenSamplers = missing_glGenSamplers;
    }
    dt.glGenSamplers = MakeRegalProc(loader_glGenSamplers,layer);
    _getProcAddress( driver_glGetSamplerParameterIiv, glGetSamplerParameterIiv, "glGetSamplerParameterIiv" );
    if( driver_glGetSamplerParameterIiv == NULL ) {
      driver_glGetSamplerParameterIiv = missing_glGetSamplerParameterIiv;
    }
    dt.glGetSamplerParameterIiv = MakeRegalProc(loader_glGetSamplerParameterIiv,layer);
    _getProcAddress( driver_glGetSamplerParameterIuiv, glGetSamplerParameterIuiv, "glGetSamplerParameterIuiv" );
    if( driver_glGetSamplerParameterIuiv == NULL ) {
      driver_glGetSamplerParameterIuiv = missing_glGetSamplerParameterIuiv;
    }
    dt.glGetSamplerParameterIuiv = MakeRegalProc(loader_glGetSamplerParameterIuiv,layer);
    _getProcAddress( driver_glGetSamplerParameterfv, glGetSamplerParameterfv, "glGetSamplerParameterfv" );
    if( driver_glGetSamplerParameterfv == NULL ) {
      driver_glGetSamplerParameterfv = missing_glGetSamplerParameterfv;
    }
    dt.glGetSamplerParameterfv = MakeRegalProc(loader_glGetSamplerParameterfv,layer);
    _getProcAddress( driver_glGetSamplerParameteriv, glGetSamplerParameteriv, "glGetSamplerParameteriv" );
    if( driver_glGetSamplerParameteriv == NULL ) {
      driver_glGetSamplerParameteriv = missing_glGetSamplerParameteriv;
    }
    dt.glGetSamplerParameteriv = MakeRegalProc(loader_glGetSamplerParameteriv,layer);
    _getProcAddress( driver_glIsSampler, glIsSampler, "glIsSampler" );
    if( driver_glIsSampler == NULL ) {
      driver_glIsSampler = missing_glIsSampler;
    }
    dt.glIsSampler = MakeRegalProc(loader_glIsSampler,layer);
    _getProcAddress( driver_glSamplerParameterIiv, glSamplerParameterIiv, "glSamplerParameterIiv" );
    if( driver_glSamplerParameterIiv == NULL ) {
      driver_glSamplerParameterIiv = missing_glSamplerParameterIiv;
    }
    dt.glSamplerParameterIiv = MakeRegalProc(loader_glSamplerParameterIiv,layer);
    _getProcAddress( driver_glSamplerParameterIuiv, glSamplerParameterIuiv, "glSamplerParameterIuiv" );
    if( driver_glSamplerParameterIuiv == NULL ) {
      driver_glSamplerParameterIuiv = missing_glSamplerParameterIuiv;
    }
    dt.glSamplerParameterIuiv = MakeRegalProc(loader_glSamplerParameterIuiv,layer);
    _getProcAddress( driver_glSamplerParameterf, glSamplerParameterf, "glSamplerParameterf" );
    if( driver_glSamplerParameterf == NULL ) {
      driver_glSamplerParameterf = missing_glSamplerParameterf;
    }
    dt.glSamplerParameterf = MakeRegalProc(loader_glSamplerParameterf,layer);
    _getProcAddress( driver_glSamplerParameterfv, glSamplerParameterfv, "glSamplerParameterfv" );
    if( driver_glSamplerParameterfv == NULL ) {
      driver_glSamplerParameterfv = missing_glSamplerParameterfv;
    }
    dt.glSamplerParameterfv = MakeRegalProc(loader_glSamplerParameterfv,layer);
    _getProcAddress( driver_glSamplerParameteri, glSamplerParameteri, "glSamplerParameteri" );
    if( driver_glSamplerParameteri == NULL ) {
      driver_glSamplerParameteri = missing_glSamplerParameteri;
    }
    dt.glSamplerParameteri = MakeRegalProc(loader_glSamplerParameteri,layer);
    _getProcAddress( driver_glSamplerParameteriv, glSamplerParameteriv, "glSamplerParameteriv" );
    if( driver_glSamplerParameteriv == NULL ) {
      driver_glSamplerParameteriv = missing_glSamplerParameteriv;
    }
    dt.glSamplerParameteriv = MakeRegalProc(loader_glSamplerParameteriv,layer);

    // GL_ARB_separate_shader_objects

    _getProcAddress( driver_glActiveShaderProgram, glActiveShaderProgram, "glActiveShaderProgram" );
    if( driver_glActiveShaderProgram == NULL ) {
      driver_glActiveShaderProgram = missing_glActiveShaderProgram;
    }
    dt.glActiveShaderProgram = MakeRegalProc(loader_glActiveShaderProgram,layer);
    _getProcAddress( driver_glBindProgramPipeline, glBindProgramPipeline, "glBindProgramPipeline" );
    if( driver_glBindProgramPipeline == NULL ) {
      driver_glBindProgramPipeline = missing_glBindProgramPipeline;
    }
    dt.glBindProgramPipeline = MakeRegalProc(loader_glBindProgramPipeline,layer);
    _getProcAddress( driver_glCreateShaderProgramv, glCreateShaderProgramv, "glCreateShaderProgramv" );
    if( driver_glCreateShaderProgramv == NULL ) {
      driver_glCreateShaderProgramv = missing_glCreateShaderProgramv;
    }
    dt.glCreateShaderProgramv = MakeRegalProc(loader_glCreateShaderProgramv,layer);
    _getProcAddress( driver_glDeleteProgramPipelines, glDeleteProgramPipelines, "glDeleteProgramPipelines" );
    if( driver_glDeleteProgramPipelines == NULL ) {
      driver_glDeleteProgramPipelines = missing_glDeleteProgramPipelines;
    }
    dt.glDeleteProgramPipelines = MakeRegalProc(loader_glDeleteProgramPipelines,layer);
    _getProcAddress( driver_glGenProgramPipelines, glGenProgramPipelines, "glGenProgramPipelines" );
    if( driver_glGenProgramPipelines == NULL ) {
      driver_glGenProgramPipelines = missing_glGenProgramPipelines;
    }
    dt.glGenProgramPipelines = MakeRegalProc(loader_glGenProgramPipelines,layer);
    _getProcAddress( driver_glGetProgramPipelineInfoLog, glGetProgramPipelineInfoLog, "glGetProgramPipelineInfoLog" );
    if( driver_glGetProgramPipelineInfoLog == NULL ) {
      driver_glGetProgramPipelineInfoLog = missing_glGetProgramPipelineInfoLog;
    }
    dt.glGetProgramPipelineInfoLog = MakeRegalProc(loader_glGetProgramPipelineInfoLog,layer);
    _getProcAddress( driver_glGetProgramPipelineiv, glGetProgramPipelineiv, "glGetProgramPipelineiv" );
    if( driver_glGetProgramPipelineiv == NULL ) {
      driver_glGetProgramPipelineiv = missing_glGetProgramPipelineiv;
    }
    dt.glGetProgramPipelineiv = MakeRegalProc(loader_glGetProgramPipelineiv,layer);
    _getProcAddress( driver_glIsProgramPipeline, glIsProgramPipeline, "glIsProgramPipeline" );
    if( driver_glIsProgramPipeline == NULL ) {
      driver_glIsProgramPipeline = missing_glIsProgramPipeline;
    }
    dt.glIsProgramPipeline = MakeRegalProc(loader_glIsProgramPipeline,layer);
    _getProcAddress( driver_glProgramUniform1d, glProgramUniform1d, "glProgramUniform1d" );
    if( driver_glProgramUniform1d == NULL ) {
      driver_glProgramUniform1d = missing_glProgramUniform1d;
    }
    dt.glProgramUniform1d = MakeRegalProc(loader_glProgramUniform1d,layer);
    _getProcAddress( driver_glProgramUniform1dv, glProgramUniform1dv, "glProgramUniform1dv" );
    if( driver_glProgramUniform1dv == NULL ) {
      driver_glProgramUniform1dv = missing_glProgramUniform1dv;
    }
    dt.glProgramUniform1dv = MakeRegalProc(loader_glProgramUniform1dv,layer);
    _getProcAddress( driver_glProgramUniform1f, glProgramUniform1f, "glProgramUniform1f" );
    if( driver_glProgramUniform1f == NULL ) {
      driver_glProgramUniform1f = missing_glProgramUniform1f;
    }
    dt.glProgramUniform1f = MakeRegalProc(loader_glProgramUniform1f,layer);
    _getProcAddress( driver_glProgramUniform1fv, glProgramUniform1fv, "glProgramUniform1fv" );
    if( driver_glProgramUniform1fv == NULL ) {
      driver_glProgramUniform1fv = missing_glProgramUniform1fv;
    }
    dt.glProgramUniform1fv = MakeRegalProc(loader_glProgramUniform1fv,layer);
    _getProcAddress( driver_glProgramUniform1i, glProgramUniform1i, "glProgramUniform1i" );
    if( driver_glProgramUniform1i == NULL ) {
      driver_glProgramUniform1i = missing_glProgramUniform1i;
    }
    dt.glProgramUniform1i = MakeRegalProc(loader_glProgramUniform1i,layer);
    _getProcAddress( driver_glProgramUniform1iv, glProgramUniform1iv, "glProgramUniform1iv" );
    if( driver_glProgramUniform1iv == NULL ) {
      driver_glProgramUniform1iv = missing_glProgramUniform1iv;
    }
    dt.glProgramUniform1iv = MakeRegalProc(loader_glProgramUniform1iv,layer);
    _getProcAddress( driver_glProgramUniform1ui, glProgramUniform1ui, "glProgramUniform1ui" );
    if( driver_glProgramUniform1ui == NULL ) {
      driver_glProgramUniform1ui = missing_glProgramUniform1ui;
    }
    dt.glProgramUniform1ui = MakeRegalProc(loader_glProgramUniform1ui,layer);
    _getProcAddress( driver_glProgramUniform1uiv, glProgramUniform1uiv, "glProgramUniform1uiv" );
    if( driver_glProgramUniform1uiv == NULL ) {
      driver_glProgramUniform1uiv = missing_glProgramUniform1uiv;
    }
    dt.glProgramUniform1uiv = MakeRegalProc(loader_glProgramUniform1uiv,layer);
    _getProcAddress( driver_glProgramUniform2d, glProgramUniform2d, "glProgramUniform2d" );
    if( driver_glProgramUniform2d == NULL ) {
      driver_glProgramUniform2d = missing_glProgramUniform2d;
    }
    dt.glProgramUniform2d = MakeRegalProc(loader_glProgramUniform2d,layer);
    _getProcAddress( driver_glProgramUniform2dv, glProgramUniform2dv, "glProgramUniform2dv" );
    if( driver_glProgramUniform2dv == NULL ) {
      driver_glProgramUniform2dv = missing_glProgramUniform2dv;
    }
    dt.glProgramUniform2dv = MakeRegalProc(loader_glProgramUniform2dv,layer);
    _getProcAddress( driver_glProgramUniform2f, glProgramUniform2f, "glProgramUniform2f" );
    if( driver_glProgramUniform2f == NULL ) {
      driver_glProgramUniform2f = missing_glProgramUniform2f;
    }
    dt.glProgramUniform2f = MakeRegalProc(loader_glProgramUniform2f,layer);
    _getProcAddress( driver_glProgramUniform2fv, glProgramUniform2fv, "glProgramUniform2fv" );
    if( driver_glProgramUniform2fv == NULL ) {
      driver_glProgramUniform2fv = missing_glProgramUniform2fv;
    }
    dt.glProgramUniform2fv = MakeRegalProc(loader_glProgramUniform2fv,layer);
    _getProcAddress( driver_glProgramUniform2i, glProgramUniform2i, "glProgramUniform2i" );
    if( driver_glProgramUniform2i == NULL ) {
      driver_glProgramUniform2i = missing_glProgramUniform2i;
    }
    dt.glProgramUniform2i = MakeRegalProc(loader_glProgramUniform2i,layer);
    _getProcAddress( driver_glProgramUniform2iv, glProgramUniform2iv, "glProgramUniform2iv" );
    if( driver_glProgramUniform2iv == NULL ) {
      driver_glProgramUniform2iv = missing_glProgramUniform2iv;
    }
    dt.glProgramUniform2iv = MakeRegalProc(loader_glProgramUniform2iv,layer);
    _getProcAddress( driver_glProgramUniform2ui, glProgramUniform2ui, "glProgramUniform2ui" );
    if( driver_glProgramUniform2ui == NULL ) {
      driver_glProgramUniform2ui = missing_glProgramUniform2ui;
    }
    dt.glProgramUniform2ui = MakeRegalProc(loader_glProgramUniform2ui,layer);
    _getProcAddress( driver_glProgramUniform2uiv, glProgramUniform2uiv, "glProgramUniform2uiv" );
    if( driver_glProgramUniform2uiv == NULL ) {
      driver_glProgramUniform2uiv = missing_glProgramUniform2uiv;
    }
    dt.glProgramUniform2uiv = MakeRegalProc(loader_glProgramUniform2uiv,layer);
    _getProcAddress( driver_glProgramUniform3d, glProgramUniform3d, "glProgramUniform3d" );
    if( driver_glProgramUniform3d == NULL ) {
      driver_glProgramUniform3d = missing_glProgramUniform3d;
    }
    dt.glProgramUniform3d = MakeRegalProc(loader_glProgramUniform3d,layer);
    _getProcAddress( driver_glProgramUniform3dv, glProgramUniform3dv, "glProgramUniform3dv" );
    if( driver_glProgramUniform3dv == NULL ) {
      driver_glProgramUniform3dv = missing_glProgramUniform3dv;
    }
    dt.glProgramUniform3dv = MakeRegalProc(loader_glProgramUniform3dv,layer);
    _getProcAddress( driver_glProgramUniform3f, glProgramUniform3f, "glProgramUniform3f" );
    if( driver_glProgramUniform3f == NULL ) {
      driver_glProgramUniform3f = missing_glProgramUniform3f;
    }
    dt.glProgramUniform3f = MakeRegalProc(loader_glProgramUniform3f,layer);
    _getProcAddress( driver_glProgramUniform3fv, glProgramUniform3fv, "glProgramUniform3fv" );
    if( driver_glProgramUniform3fv == NULL ) {
      driver_glProgramUniform3fv = missing_glProgramUniform3fv;
    }
    dt.glProgramUniform3fv = MakeRegalProc(loader_glProgramUniform3fv,layer);
    _getProcAddress( driver_glProgramUniform3i, glProgramUniform3i, "glProgramUniform3i" );
    if( driver_glProgramUniform3i == NULL ) {
      driver_glProgramUniform3i = missing_glProgramUniform3i;
    }
    dt.glProgramUniform3i = MakeRegalProc(loader_glProgramUniform3i,layer);
    _getProcAddress( driver_glProgramUniform3iv, glProgramUniform3iv, "glProgramUniform3iv" );
    if( driver_glProgramUniform3iv == NULL ) {
      driver_glProgramUniform3iv = missing_glProgramUniform3iv;
    }
    dt.glProgramUniform3iv = MakeRegalProc(loader_glProgramUniform3iv,layer);
    _getProcAddress( driver_glProgramUniform3ui, glProgramUniform3ui, "glProgramUniform3ui" );
    if( driver_glProgramUniform3ui == NULL ) {
      driver_glProgramUniform3ui = missing_glProgramUniform3ui;
    }
    dt.glProgramUniform3ui = MakeRegalProc(loader_glProgramUniform3ui,layer);
    _getProcAddress( driver_glProgramUniform3uiv, glProgramUniform3uiv, "glProgramUniform3uiv" );
    if( driver_glProgramUniform3uiv == NULL ) {
      driver_glProgramUniform3uiv = missing_glProgramUniform3uiv;
    }
    dt.glProgramUniform3uiv = MakeRegalProc(loader_glProgramUniform3uiv,layer);
    _getProcAddress( driver_glProgramUniform4d, glProgramUniform4d, "glProgramUniform4d" );
    if( driver_glProgramUniform4d == NULL ) {
      driver_glProgramUniform4d = missing_glProgramUniform4d;
    }
    dt.glProgramUniform4d = MakeRegalProc(loader_glProgramUniform4d,layer);
    _getProcAddress( driver_glProgramUniform4dv, glProgramUniform4dv, "glProgramUniform4dv" );
    if( driver_glProgramUniform4dv == NULL ) {
      driver_glProgramUniform4dv = missing_glProgramUniform4dv;
    }
    dt.glProgramUniform4dv = MakeRegalProc(loader_glProgramUniform4dv,layer);
    _getProcAddress( driver_glProgramUniform4f, glProgramUniform4f, "glProgramUniform4f" );
    if( driver_glProgramUniform4f == NULL ) {
      driver_glProgramUniform4f = missing_glProgramUniform4f;
    }
    dt.glProgramUniform4f = MakeRegalProc(loader_glProgramUniform4f,layer);
    _getProcAddress( driver_glProgramUniform4fv, glProgramUniform4fv, "glProgramUniform4fv" );
    if( driver_glProgramUniform4fv == NULL ) {
      driver_glProgramUniform4fv = missing_glProgramUniform4fv;
    }
    dt.glProgramUniform4fv = MakeRegalProc(loader_glProgramUniform4fv,layer);
    _getProcAddress( driver_glProgramUniform4i, glProgramUniform4i, "glProgramUniform4i" );
    if( driver_glProgramUniform4i == NULL ) {
      driver_glProgramUniform4i = missing_glProgramUniform4i;
    }
    dt.glProgramUniform4i = MakeRegalProc(loader_glProgramUniform4i,layer);
    _getProcAddress( driver_glProgramUniform4iv, glProgramUniform4iv, "glProgramUniform4iv" );
    if( driver_glProgramUniform4iv == NULL ) {
      driver_glProgramUniform4iv = missing_glProgramUniform4iv;
    }
    dt.glProgramUniform4iv = MakeRegalProc(loader_glProgramUniform4iv,layer);
    _getProcAddress( driver_glProgramUniform4ui, glProgramUniform4ui, "glProgramUniform4ui" );
    if( driver_glProgramUniform4ui == NULL ) {
      driver_glProgramUniform4ui = missing_glProgramUniform4ui;
    }
    dt.glProgramUniform4ui = MakeRegalProc(loader_glProgramUniform4ui,layer);
    _getProcAddress( driver_glProgramUniform4uiv, glProgramUniform4uiv, "glProgramUniform4uiv" );
    if( driver_glProgramUniform4uiv == NULL ) {
      driver_glProgramUniform4uiv = missing_glProgramUniform4uiv;
    }
    dt.glProgramUniform4uiv = MakeRegalProc(loader_glProgramUniform4uiv,layer);
    _getProcAddress( driver_glProgramUniformMatrix2dv, glProgramUniformMatrix2dv, "glProgramUniformMatrix2dv" );
    if( driver_glProgramUniformMatrix2dv == NULL ) {
      driver_glProgramUniformMatrix2dv = missing_glProgramUniformMatrix2dv;
    }
    dt.glProgramUniformMatrix2dv = MakeRegalProc(loader_glProgramUniformMatrix2dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix2fv, glProgramUniformMatrix2fv, "glProgramUniformMatrix2fv" );
    if( driver_glProgramUniformMatrix2fv == NULL ) {
      driver_glProgramUniformMatrix2fv = missing_glProgramUniformMatrix2fv;
    }
    dt.glProgramUniformMatrix2fv = MakeRegalProc(loader_glProgramUniformMatrix2fv,layer);
    _getProcAddress( driver_glProgramUniformMatrix2x3dv, glProgramUniformMatrix2x3dv, "glProgramUniformMatrix2x3dv" );
    if( driver_glProgramUniformMatrix2x3dv == NULL ) {
      driver_glProgramUniformMatrix2x3dv = missing_glProgramUniformMatrix2x3dv;
    }
    dt.glProgramUniformMatrix2x3dv = MakeRegalProc(loader_glProgramUniformMatrix2x3dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix2x3fv, glProgramUniformMatrix2x3fv, "glProgramUniformMatrix2x3fv" );
    if( driver_glProgramUniformMatrix2x3fv == NULL ) {
      driver_glProgramUniformMatrix2x3fv = missing_glProgramUniformMatrix2x3fv;
    }
    dt.glProgramUniformMatrix2x3fv = MakeRegalProc(loader_glProgramUniformMatrix2x3fv,layer);
    _getProcAddress( driver_glProgramUniformMatrix2x4dv, glProgramUniformMatrix2x4dv, "glProgramUniformMatrix2x4dv" );
    if( driver_glProgramUniformMatrix2x4dv == NULL ) {
      driver_glProgramUniformMatrix2x4dv = missing_glProgramUniformMatrix2x4dv;
    }
    dt.glProgramUniformMatrix2x4dv = MakeRegalProc(loader_glProgramUniformMatrix2x4dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix2x4fv, glProgramUniformMatrix2x4fv, "glProgramUniformMatrix2x4fv" );
    if( driver_glProgramUniformMatrix2x4fv == NULL ) {
      driver_glProgramUniformMatrix2x4fv = missing_glProgramUniformMatrix2x4fv;
    }
    dt.glProgramUniformMatrix2x4fv = MakeRegalProc(loader_glProgramUniformMatrix2x4fv,layer);
    _getProcAddress( driver_glProgramUniformMatrix3dv, glProgramUniformMatrix3dv, "glProgramUniformMatrix3dv" );
    if( driver_glProgramUniformMatrix3dv == NULL ) {
      driver_glProgramUniformMatrix3dv = missing_glProgramUniformMatrix3dv;
    }
    dt.glProgramUniformMatrix3dv = MakeRegalProc(loader_glProgramUniformMatrix3dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix3fv, glProgramUniformMatrix3fv, "glProgramUniformMatrix3fv" );
    if( driver_glProgramUniformMatrix3fv == NULL ) {
      driver_glProgramUniformMatrix3fv = missing_glProgramUniformMatrix3fv;
    }
    dt.glProgramUniformMatrix3fv = MakeRegalProc(loader_glProgramUniformMatrix3fv,layer);
    _getProcAddress( driver_glProgramUniformMatrix3x2dv, glProgramUniformMatrix3x2dv, "glProgramUniformMatrix3x2dv" );
    if( driver_glProgramUniformMatrix3x2dv == NULL ) {
      driver_glProgramUniformMatrix3x2dv = missing_glProgramUniformMatrix3x2dv;
    }
    dt.glProgramUniformMatrix3x2dv = MakeRegalProc(loader_glProgramUniformMatrix3x2dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix3x2fv, glProgramUniformMatrix3x2fv, "glProgramUniformMatrix3x2fv" );
    if( driver_glProgramUniformMatrix3x2fv == NULL ) {
      driver_glProgramUniformMatrix3x2fv = missing_glProgramUniformMatrix3x2fv;
    }
    dt.glProgramUniformMatrix3x2fv = MakeRegalProc(loader_glProgramUniformMatrix3x2fv,layer);
    _getProcAddress( driver_glProgramUniformMatrix3x4dv, glProgramUniformMatrix3x4dv, "glProgramUniformMatrix3x4dv" );
    if( driver_glProgramUniformMatrix3x4dv == NULL ) {
      driver_glProgramUniformMatrix3x4dv = missing_glProgramUniformMatrix3x4dv;
    }
    dt.glProgramUniformMatrix3x4dv = MakeRegalProc(loader_glProgramUniformMatrix3x4dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix3x4fv, glProgramUniformMatrix3x4fv, "glProgramUniformMatrix3x4fv" );
    if( driver_glProgramUniformMatrix3x4fv == NULL ) {
      driver_glProgramUniformMatrix3x4fv = missing_glProgramUniformMatrix3x4fv;
    }
    dt.glProgramUniformMatrix3x4fv = MakeRegalProc(loader_glProgramUniformMatrix3x4fv,layer);
    _getProcAddress( driver_glProgramUniformMatrix4dv, glProgramUniformMatrix4dv, "glProgramUniformMatrix4dv" );
    if( driver_glProgramUniformMatrix4dv == NULL ) {
      driver_glProgramUniformMatrix4dv = missing_glProgramUniformMatrix4dv;
    }
    dt.glProgramUniformMatrix4dv = MakeRegalProc(loader_glProgramUniformMatrix4dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix4fv, glProgramUniformMatrix4fv, "glProgramUniformMatrix4fv" );
    if( driver_glProgramUniformMatrix4fv == NULL ) {
      driver_glProgramUniformMatrix4fv = missing_glProgramUniformMatrix4fv;
    }
    dt.glProgramUniformMatrix4fv = MakeRegalProc(loader_glProgramUniformMatrix4fv,layer);
    _getProcAddress( driver_glProgramUniformMatrix4x2dv, glProgramUniformMatrix4x2dv, "glProgramUniformMatrix4x2dv" );
    if( driver_glProgramUniformMatrix4x2dv == NULL ) {
      driver_glProgramUniformMatrix4x2dv = missing_glProgramUniformMatrix4x2dv;
    }
    dt.glProgramUniformMatrix4x2dv = MakeRegalProc(loader_glProgramUniformMatrix4x2dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix4x2fv, glProgramUniformMatrix4x2fv, "glProgramUniformMatrix4x2fv" );
    if( driver_glProgramUniformMatrix4x2fv == NULL ) {
      driver_glProgramUniformMatrix4x2fv = missing_glProgramUniformMatrix4x2fv;
    }
    dt.glProgramUniformMatrix4x2fv = MakeRegalProc(loader_glProgramUniformMatrix4x2fv,layer);
    _getProcAddress( driver_glProgramUniformMatrix4x3dv, glProgramUniformMatrix4x3dv, "glProgramUniformMatrix4x3dv" );
    if( driver_glProgramUniformMatrix4x3dv == NULL ) {
      driver_glProgramUniformMatrix4x3dv = missing_glProgramUniformMatrix4x3dv;
    }
    dt.glProgramUniformMatrix4x3dv = MakeRegalProc(loader_glProgramUniformMatrix4x3dv,layer);
    _getProcAddress( driver_glProgramUniformMatrix4x3fv, glProgramUniformMatrix4x3fv, "glProgramUniformMatrix4x3fv" );
    if( driver_glProgramUniformMatrix4x3fv == NULL ) {
      driver_glProgramUniformMatrix4x3fv = missing_glProgramUniformMatrix4x3fv;
    }
    dt.glProgramUniformMatrix4x3fv = MakeRegalProc(loader_glProgramUniformMatrix4x3fv,layer);
    _getProcAddress( driver_glUseProgramStages, glUseProgramStages, "glUseProgramStages" );
    if( driver_glUseProgramStages == NULL ) {
      driver_glUseProgramStages = missing_glUseProgramStages;
    }
    dt.glUseProgramStages = MakeRegalProc(loader_glUseProgramStages,layer);
    _getProcAddress( driver_glValidateProgramPipeline, glValidateProgramPipeline, "glValidateProgramPipeline" );
    if( driver_glValidateProgramPipeline == NULL ) {
      driver_glValidateProgramPipeline = missing_glValidateProgramPipeline;
    }
    dt.glValidateProgramPipeline = MakeRegalProc(loader_glValidateProgramPipeline,layer);

    // GL_ARB_shader_atomic_counters

    _getProcAddress( driver_glGetActiveAtomicCounterBufferiv, glGetActiveAtomicCounterBufferiv, "glGetActiveAtomicCounterBufferiv" );
    if( driver_glGetActiveAtomicCounterBufferiv == NULL ) {
      driver_glGetActiveAtomicCounterBufferiv = missing_glGetActiveAtomicCounterBufferiv;
    }
    dt.glGetActiveAtomicCounterBufferiv = MakeRegalProc(loader_glGetActiveAtomicCounterBufferiv,layer);

    // GL_ARB_shader_image_load_store

    _getProcAddress( driver_glBindImageTexture, glBindImageTexture, "glBindImageTexture" );
    if( driver_glBindImageTexture == NULL ) {
      driver_glBindImageTexture = missing_glBindImageTexture;
    }
    dt.glBindImageTexture = MakeRegalProc(loader_glBindImageTexture,layer);
    _getProcAddress( driver_glMemoryBarrier, glMemoryBarrier, "glMemoryBarrier" );
    if( driver_glMemoryBarrier == NULL ) {
      driver_glMemoryBarrier = missing_glMemoryBarrier;
    }
    dt.glMemoryBarrier = MakeRegalProc(loader_glMemoryBarrier,layer);

    // GL_ARB_shader_objects

    _getProcAddress( driver_glAttachObjectARB, glAttachObjectARB, "glAttachObjectARB" );
    if( driver_glAttachObjectARB == NULL ) {
      driver_glAttachObjectARB = missing_glAttachObjectARB;
    }
    dt.glAttachObjectARB = MakeRegalProc(loader_glAttachObjectARB,layer);
    _getProcAddress( driver_glCompileShaderARB, glCompileShaderARB, "glCompileShaderARB" );
    if( driver_glCompileShaderARB == NULL ) {
      driver_glCompileShaderARB = missing_glCompileShaderARB;
    }
    dt.glCompileShaderARB = MakeRegalProc(loader_glCompileShaderARB,layer);
    _getProcAddress( driver_glCreateProgramObjectARB, glCreateProgramObjectARB, "glCreateProgramObjectARB" );
    if( driver_glCreateProgramObjectARB == NULL ) {
      driver_glCreateProgramObjectARB = missing_glCreateProgramObjectARB;
    }
    dt.glCreateProgramObjectARB = MakeRegalProc(loader_glCreateProgramObjectARB,layer);
    _getProcAddress( driver_glCreateShaderObjectARB, glCreateShaderObjectARB, "glCreateShaderObjectARB" );
    if( driver_glCreateShaderObjectARB == NULL ) {
      driver_glCreateShaderObjectARB = missing_glCreateShaderObjectARB;
    }
    dt.glCreateShaderObjectARB = MakeRegalProc(loader_glCreateShaderObjectARB,layer);
    _getProcAddress( driver_glDeleteObjectARB, glDeleteObjectARB, "glDeleteObjectARB" );
    if( driver_glDeleteObjectARB == NULL ) {
      driver_glDeleteObjectARB = missing_glDeleteObjectARB;
    }
    dt.glDeleteObjectARB = MakeRegalProc(loader_glDeleteObjectARB,layer);
    _getProcAddress( driver_glDetachObjectARB, glDetachObjectARB, "glDetachObjectARB" );
    if( driver_glDetachObjectARB == NULL ) {
      driver_glDetachObjectARB = missing_glDetachObjectARB;
    }
    dt.glDetachObjectARB = MakeRegalProc(loader_glDetachObjectARB,layer);
    _getProcAddress( driver_glGetActiveUniformARB, glGetActiveUniformARB, "glGetActiveUniformARB" );
    if( driver_glGetActiveUniformARB == NULL ) {
      driver_glGetActiveUniformARB = missing_glGetActiveUniformARB;
    }
    dt.glGetActiveUniformARB = MakeRegalProc(loader_glGetActiveUniformARB,layer);
    _getProcAddress( driver_glGetAttachedObjectsARB, glGetAttachedObjectsARB, "glGetAttachedObjectsARB" );
    if( driver_glGetAttachedObjectsARB == NULL ) {
      driver_glGetAttachedObjectsARB = missing_glGetAttachedObjectsARB;
    }
    dt.glGetAttachedObjectsARB = MakeRegalProc(loader_glGetAttachedObjectsARB,layer);
    _getProcAddress( driver_glGetHandleARB, glGetHandleARB, "glGetHandleARB" );
    if( driver_glGetHandleARB == NULL ) {
      driver_glGetHandleARB = missing_glGetHandleARB;
    }
    dt.glGetHandleARB = MakeRegalProc(loader_glGetHandleARB,layer);
    _getProcAddress( driver_glGetInfoLogARB, glGetInfoLogARB, "glGetInfoLogARB" );
    if( driver_glGetInfoLogARB == NULL ) {
      driver_glGetInfoLogARB = missing_glGetInfoLogARB;
    }
    dt.glGetInfoLogARB = MakeRegalProc(loader_glGetInfoLogARB,layer);
    _getProcAddress( driver_glGetObjectParameterfvARB, glGetObjectParameterfvARB, "glGetObjectParameterfvARB" );
    if( driver_glGetObjectParameterfvARB == NULL ) {
      driver_glGetObjectParameterfvARB = missing_glGetObjectParameterfvARB;
    }
    dt.glGetObjectParameterfvARB = MakeRegalProc(loader_glGetObjectParameterfvARB,layer);
    _getProcAddress( driver_glGetObjectParameterivARB, glGetObjectParameterivARB, "glGetObjectParameterivARB" );
    if( driver_glGetObjectParameterivARB == NULL ) {
      driver_glGetObjectParameterivARB = missing_glGetObjectParameterivARB;
    }
    dt.glGetObjectParameterivARB = MakeRegalProc(loader_glGetObjectParameterivARB,layer);
    _getProcAddress( driver_glGetShaderSourceARB, glGetShaderSourceARB, "glGetShaderSourceARB" );
    if( driver_glGetShaderSourceARB == NULL ) {
      driver_glGetShaderSourceARB = missing_glGetShaderSourceARB;
    }
    dt.glGetShaderSourceARB = MakeRegalProc(loader_glGetShaderSourceARB,layer);
    _getProcAddress( driver_glGetUniformLocationARB, glGetUniformLocationARB, "glGetUniformLocationARB" );
    if( driver_glGetUniformLocationARB == NULL ) {
      driver_glGetUniformLocationARB = missing_glGetUniformLocationARB;
    }
    dt.glGetUniformLocationARB = MakeRegalProc(loader_glGetUniformLocationARB,layer);
    _getProcAddress( driver_glGetUniformfvARB, glGetUniformfvARB, "glGetUniformfvARB" );
    if( driver_glGetUniformfvARB == NULL ) {
      driver_glGetUniformfvARB = missing_glGetUniformfvARB;
    }
    dt.glGetUniformfvARB = MakeRegalProc(loader_glGetUniformfvARB,layer);
    _getProcAddress( driver_glGetUniformivARB, glGetUniformivARB, "glGetUniformivARB" );
    if( driver_glGetUniformivARB == NULL ) {
      driver_glGetUniformivARB = missing_glGetUniformivARB;
    }
    dt.glGetUniformivARB = MakeRegalProc(loader_glGetUniformivARB,layer);
    _getProcAddress( driver_glLinkProgramARB, glLinkProgramARB, "glLinkProgramARB" );
    if( driver_glLinkProgramARB == NULL ) {
      driver_glLinkProgramARB = missing_glLinkProgramARB;
    }
    dt.glLinkProgramARB = MakeRegalProc(loader_glLinkProgramARB,layer);
    _getProcAddress( driver_glShaderSourceARB, glShaderSourceARB, "glShaderSourceARB" );
    if( driver_glShaderSourceARB == NULL ) {
      driver_glShaderSourceARB = missing_glShaderSourceARB;
    }
    dt.glShaderSourceARB = MakeRegalProc(loader_glShaderSourceARB,layer);
    _getProcAddress( driver_glUniform1fARB, glUniform1fARB, "glUniform1fARB" );
    if( driver_glUniform1fARB == NULL ) {
      driver_glUniform1fARB = missing_glUniform1fARB;
    }
    dt.glUniform1fARB = MakeRegalProc(loader_glUniform1fARB,layer);
    _getProcAddress( driver_glUniform1fvARB, glUniform1fvARB, "glUniform1fvARB" );
    if( driver_glUniform1fvARB == NULL ) {
      driver_glUniform1fvARB = missing_glUniform1fvARB;
    }
    dt.glUniform1fvARB = MakeRegalProc(loader_glUniform1fvARB,layer);
    _getProcAddress( driver_glUniform1iARB, glUniform1iARB, "glUniform1iARB" );
    if( driver_glUniform1iARB == NULL ) {
      driver_glUniform1iARB = missing_glUniform1iARB;
    }
    dt.glUniform1iARB = MakeRegalProc(loader_glUniform1iARB,layer);
    _getProcAddress( driver_glUniform1ivARB, glUniform1ivARB, "glUniform1ivARB" );
    if( driver_glUniform1ivARB == NULL ) {
      driver_glUniform1ivARB = missing_glUniform1ivARB;
    }
    dt.glUniform1ivARB = MakeRegalProc(loader_glUniform1ivARB,layer);
    _getProcAddress( driver_glUniform2fARB, glUniform2fARB, "glUniform2fARB" );
    if( driver_glUniform2fARB == NULL ) {
      driver_glUniform2fARB = missing_glUniform2fARB;
    }
    dt.glUniform2fARB = MakeRegalProc(loader_glUniform2fARB,layer);
    _getProcAddress( driver_glUniform2fvARB, glUniform2fvARB, "glUniform2fvARB" );
    if( driver_glUniform2fvARB == NULL ) {
      driver_glUniform2fvARB = missing_glUniform2fvARB;
    }
    dt.glUniform2fvARB = MakeRegalProc(loader_glUniform2fvARB,layer);
    _getProcAddress( driver_glUniform2iARB, glUniform2iARB, "glUniform2iARB" );
    if( driver_glUniform2iARB == NULL ) {
      driver_glUniform2iARB = missing_glUniform2iARB;
    }
    dt.glUniform2iARB = MakeRegalProc(loader_glUniform2iARB,layer);
    _getProcAddress( driver_glUniform2ivARB, glUniform2ivARB, "glUniform2ivARB" );
    if( driver_glUniform2ivARB == NULL ) {
      driver_glUniform2ivARB = missing_glUniform2ivARB;
    }
    dt.glUniform2ivARB = MakeRegalProc(loader_glUniform2ivARB,layer);
    _getProcAddress( driver_glUniform3fARB, glUniform3fARB, "glUniform3fARB" );
    if( driver_glUniform3fARB == NULL ) {
      driver_glUniform3fARB = missing_glUniform3fARB;
    }
    dt.glUniform3fARB = MakeRegalProc(loader_glUniform3fARB,layer);
    _getProcAddress( driver_glUniform3fvARB, glUniform3fvARB, "glUniform3fvARB" );
    if( driver_glUniform3fvARB == NULL ) {
      driver_glUniform3fvARB = missing_glUniform3fvARB;
    }
    dt.glUniform3fvARB = MakeRegalProc(loader_glUniform3fvARB,layer);
    _getProcAddress( driver_glUniform3iARB, glUniform3iARB, "glUniform3iARB" );
    if( driver_glUniform3iARB == NULL ) {
      driver_glUniform3iARB = missing_glUniform3iARB;
    }
    dt.glUniform3iARB = MakeRegalProc(loader_glUniform3iARB,layer);
    _getProcAddress( driver_glUniform3ivARB, glUniform3ivARB, "glUniform3ivARB" );
    if( driver_glUniform3ivARB == NULL ) {
      driver_glUniform3ivARB = missing_glUniform3ivARB;
    }
    dt.glUniform3ivARB = MakeRegalProc(loader_glUniform3ivARB,layer);
    _getProcAddress( driver_glUniform4fARB, glUniform4fARB, "glUniform4fARB" );
    if( driver_glUniform4fARB == NULL ) {
      driver_glUniform4fARB = missing_glUniform4fARB;
    }
    dt.glUniform4fARB = MakeRegalProc(loader_glUniform4fARB,layer);
    _getProcAddress( driver_glUniform4fvARB, glUniform4fvARB, "glUniform4fvARB" );
    if( driver_glUniform4fvARB == NULL ) {
      driver_glUniform4fvARB = missing_glUniform4fvARB;
    }
    dt.glUniform4fvARB = MakeRegalProc(loader_glUniform4fvARB,layer);
    _getProcAddress( driver_glUniform4iARB, glUniform4iARB, "glUniform4iARB" );
    if( driver_glUniform4iARB == NULL ) {
      driver_glUniform4iARB = missing_glUniform4iARB;
    }
    dt.glUniform4iARB = MakeRegalProc(loader_glUniform4iARB,layer);
    _getProcAddress( driver_glUniform4ivARB, glUniform4ivARB, "glUniform4ivARB" );
    if( driver_glUniform4ivARB == NULL ) {
      driver_glUniform4ivARB = missing_glUniform4ivARB;
    }
    dt.glUniform4ivARB = MakeRegalProc(loader_glUniform4ivARB,layer);
    _getProcAddress( driver_glUniformMatrix2fvARB, glUniformMatrix2fvARB, "glUniformMatrix2fvARB" );
    if( driver_glUniformMatrix2fvARB == NULL ) {
      driver_glUniformMatrix2fvARB = missing_glUniformMatrix2fvARB;
    }
    dt.glUniformMatrix2fvARB = MakeRegalProc(loader_glUniformMatrix2fvARB,layer);
    _getProcAddress( driver_glUniformMatrix3fvARB, glUniformMatrix3fvARB, "glUniformMatrix3fvARB" );
    if( driver_glUniformMatrix3fvARB == NULL ) {
      driver_glUniformMatrix3fvARB = missing_glUniformMatrix3fvARB;
    }
    dt.glUniformMatrix3fvARB = MakeRegalProc(loader_glUniformMatrix3fvARB,layer);
    _getProcAddress( driver_glUniformMatrix4fvARB, glUniformMatrix4fvARB, "glUniformMatrix4fvARB" );
    if( driver_glUniformMatrix4fvARB == NULL ) {
      driver_glUniformMatrix4fvARB = missing_glUniformMatrix4fvARB;
    }
    dt.glUniformMatrix4fvARB = MakeRegalProc(loader_glUniformMatrix4fvARB,layer);
    _getProcAddress( driver_glUseProgramObjectARB, glUseProgramObjectARB, "glUseProgramObjectARB" );
    if( driver_glUseProgramObjectARB == NULL ) {
      driver_glUseProgramObjectARB = missing_glUseProgramObjectARB;
    }
    dt.glUseProgramObjectARB = MakeRegalProc(loader_glUseProgramObjectARB,layer);
    _getProcAddress( driver_glValidateProgramARB, glValidateProgramARB, "glValidateProgramARB" );
    if( driver_glValidateProgramARB == NULL ) {
      driver_glValidateProgramARB = missing_glValidateProgramARB;
    }
    dt.glValidateProgramARB = MakeRegalProc(loader_glValidateProgramARB,layer);

    // GL_ARB_shader_storage_buffer_object

    _getProcAddress( driver_glShaderStorageBlockBinding, glShaderStorageBlockBinding, "glShaderStorageBlockBinding" );
    if( driver_glShaderStorageBlockBinding == NULL ) {
      driver_glShaderStorageBlockBinding = missing_glShaderStorageBlockBinding;
    }
    dt.glShaderStorageBlockBinding = MakeRegalProc(loader_glShaderStorageBlockBinding,layer);

    // GL_ARB_shader_subroutine

    _getProcAddress( driver_glGetActiveSubroutineName, glGetActiveSubroutineName, "glGetActiveSubroutineName" );
    if( driver_glGetActiveSubroutineName == NULL ) {
      driver_glGetActiveSubroutineName = missing_glGetActiveSubroutineName;
    }
    dt.glGetActiveSubroutineName = MakeRegalProc(loader_glGetActiveSubroutineName,layer);
    _getProcAddress( driver_glGetActiveSubroutineUniformName, glGetActiveSubroutineUniformName, "glGetActiveSubroutineUniformName" );
    if( driver_glGetActiveSubroutineUniformName == NULL ) {
      driver_glGetActiveSubroutineUniformName = missing_glGetActiveSubroutineUniformName;
    }
    dt.glGetActiveSubroutineUniformName = MakeRegalProc(loader_glGetActiveSubroutineUniformName,layer);
    _getProcAddress( driver_glGetActiveSubroutineUniformiv, glGetActiveSubroutineUniformiv, "glGetActiveSubroutineUniformiv" );
    if( driver_glGetActiveSubroutineUniformiv == NULL ) {
      driver_glGetActiveSubroutineUniformiv = missing_glGetActiveSubroutineUniformiv;
    }
    dt.glGetActiveSubroutineUniformiv = MakeRegalProc(loader_glGetActiveSubroutineUniformiv,layer);
    _getProcAddress( driver_glGetProgramStageiv, glGetProgramStageiv, "glGetProgramStageiv" );
    if( driver_glGetProgramStageiv == NULL ) {
      driver_glGetProgramStageiv = missing_glGetProgramStageiv;
    }
    dt.glGetProgramStageiv = MakeRegalProc(loader_glGetProgramStageiv,layer);
    _getProcAddress( driver_glGetProgramSubroutineParameteruivNV, glGetProgramSubroutineParameteruivNV, "glGetProgramSubroutineParameteruivNV" );
    if( driver_glGetProgramSubroutineParameteruivNV == NULL ) {
      driver_glGetProgramSubroutineParameteruivNV = missing_glGetProgramSubroutineParameteruivNV;
    }
    dt.glGetProgramSubroutineParameteruivNV = MakeRegalProc(loader_glGetProgramSubroutineParameteruivNV,layer);
    _getProcAddress( driver_glGetSubroutineIndex, glGetSubroutineIndex, "glGetSubroutineIndex" );
    if( driver_glGetSubroutineIndex == NULL ) {
      driver_glGetSubroutineIndex = missing_glGetSubroutineIndex;
    }
    dt.glGetSubroutineIndex = MakeRegalProc(loader_glGetSubroutineIndex,layer);
    _getProcAddress( driver_glGetSubroutineUniformLocation, glGetSubroutineUniformLocation, "glGetSubroutineUniformLocation" );
    if( driver_glGetSubroutineUniformLocation == NULL ) {
      driver_glGetSubroutineUniformLocation = missing_glGetSubroutineUniformLocation;
    }
    dt.glGetSubroutineUniformLocation = MakeRegalProc(loader_glGetSubroutineUniformLocation,layer);
    _getProcAddress( driver_glGetUniformSubroutineuiv, glGetUniformSubroutineuiv, "glGetUniformSubroutineuiv" );
    if( driver_glGetUniformSubroutineuiv == NULL ) {
      driver_glGetUniformSubroutineuiv = missing_glGetUniformSubroutineuiv;
    }
    dt.glGetUniformSubroutineuiv = MakeRegalProc(loader_glGetUniformSubroutineuiv,layer);
    _getProcAddress( driver_glProgramSubroutineParametersuivNV, glProgramSubroutineParametersuivNV, "glProgramSubroutineParametersuivNV" );
    if( driver_glProgramSubroutineParametersuivNV == NULL ) {
      driver_glProgramSubroutineParametersuivNV = missing_glProgramSubroutineParametersuivNV;
    }
    dt.glProgramSubroutineParametersuivNV = MakeRegalProc(loader_glProgramSubroutineParametersuivNV,layer);
    _getProcAddress( driver_glUniformSubroutinesuiv, glUniformSubroutinesuiv, "glUniformSubroutinesuiv" );
    if( driver_glUniformSubroutinesuiv == NULL ) {
      driver_glUniformSubroutinesuiv = missing_glUniformSubroutinesuiv;
    }
    dt.glUniformSubroutinesuiv = MakeRegalProc(loader_glUniformSubroutinesuiv,layer);

    // GL_ARB_shading_language_include

    _getProcAddress( driver_glCompileShaderIncludeARB, glCompileShaderIncludeARB, "glCompileShaderIncludeARB" );
    if( driver_glCompileShaderIncludeARB == NULL ) {
      driver_glCompileShaderIncludeARB = missing_glCompileShaderIncludeARB;
    }
    dt.glCompileShaderIncludeARB = MakeRegalProc(loader_glCompileShaderIncludeARB,layer);
    _getProcAddress( driver_glDeleteNamedStringARB, glDeleteNamedStringARB, "glDeleteNamedStringARB" );
    if( driver_glDeleteNamedStringARB == NULL ) {
      driver_glDeleteNamedStringARB = missing_glDeleteNamedStringARB;
    }
    dt.glDeleteNamedStringARB = MakeRegalProc(loader_glDeleteNamedStringARB,layer);
    _getProcAddress( driver_glGetNamedStringARB, glGetNamedStringARB, "glGetNamedStringARB" );
    if( driver_glGetNamedStringARB == NULL ) {
      driver_glGetNamedStringARB = missing_glGetNamedStringARB;
    }
    dt.glGetNamedStringARB = MakeRegalProc(loader_glGetNamedStringARB,layer);
    _getProcAddress( driver_glGetNamedStringivARB, glGetNamedStringivARB, "glGetNamedStringivARB" );
    if( driver_glGetNamedStringivARB == NULL ) {
      driver_glGetNamedStringivARB = missing_glGetNamedStringivARB;
    }
    dt.glGetNamedStringivARB = MakeRegalProc(loader_glGetNamedStringivARB,layer);
    _getProcAddress( driver_glIsNamedStringARB, glIsNamedStringARB, "glIsNamedStringARB" );
    if( driver_glIsNamedStringARB == NULL ) {
      driver_glIsNamedStringARB = missing_glIsNamedStringARB;
    }
    dt.glIsNamedStringARB = MakeRegalProc(loader_glIsNamedStringARB,layer);
    _getProcAddress( driver_glNamedStringARB, glNamedStringARB, "glNamedStringARB" );
    if( driver_glNamedStringARB == NULL ) {
      driver_glNamedStringARB = missing_glNamedStringARB;
    }
    dt.glNamedStringARB = MakeRegalProc(loader_glNamedStringARB,layer);

    // GL_ARB_sparse_texture

    _getProcAddress( driver_glTexPageCommitmentARB, glTexPageCommitmentARB, "glTexPageCommitmentARB" );
    if( driver_glTexPageCommitmentARB == NULL ) {
      driver_glTexPageCommitmentARB = missing_glTexPageCommitmentARB;
    }
    dt.glTexPageCommitmentARB = MakeRegalProc(loader_glTexPageCommitmentARB,layer);
    _getProcAddress( driver_glTexturePageCommitmentEXT, glTexturePageCommitmentEXT, "glTexturePageCommitmentEXT" );
    if( driver_glTexturePageCommitmentEXT == NULL ) {
      driver_glTexturePageCommitmentEXT = missing_glTexturePageCommitmentEXT;
    }
    dt.glTexturePageCommitmentEXT = MakeRegalProc(loader_glTexturePageCommitmentEXT,layer);

    // GL_ARB_sync

    _getProcAddress( driver_glClientWaitSync, glClientWaitSync, "glClientWaitSync" );
    if( driver_glClientWaitSync == NULL ) {
      driver_glClientWaitSync = missing_glClientWaitSync;
    }
    dt.glClientWaitSync = MakeRegalProc(loader_glClientWaitSync,layer);
    _getProcAddress( driver_glDeleteSync, glDeleteSync, "glDeleteSync" );
    if( driver_glDeleteSync == NULL ) {
      driver_glDeleteSync = missing_glDeleteSync;
    }
    dt.glDeleteSync = MakeRegalProc(loader_glDeleteSync,layer);
    _getProcAddress( driver_glFenceSync, glFenceSync, "glFenceSync" );
    if( driver_glFenceSync == NULL ) {
      driver_glFenceSync = missing_glFenceSync;
    }
    dt.glFenceSync = MakeRegalProc(loader_glFenceSync,layer);
    _getProcAddress( driver_glGetInteger64v, glGetInteger64v, "glGetInteger64v" );
    if( driver_glGetInteger64v == NULL ) {
      driver_glGetInteger64v = missing_glGetInteger64v;
    }
    dt.glGetInteger64v = MakeRegalProc(loader_glGetInteger64v,layer);
    _getProcAddress( driver_glGetSynciv, glGetSynciv, "glGetSynciv" );
    if( driver_glGetSynciv == NULL ) {
      driver_glGetSynciv = missing_glGetSynciv;
    }
    dt.glGetSynciv = MakeRegalProc(loader_glGetSynciv,layer);
    _getProcAddress( driver_glIsSync, glIsSync, "glIsSync" );
    if( driver_glIsSync == NULL ) {
      driver_glIsSync = missing_glIsSync;
    }
    dt.glIsSync = MakeRegalProc(loader_glIsSync,layer);
    _getProcAddress( driver_glWaitSync, glWaitSync, "glWaitSync" );
    if( driver_glWaitSync == NULL ) {
      driver_glWaitSync = missing_glWaitSync;
    }
    dt.glWaitSync = MakeRegalProc(loader_glWaitSync,layer);

    // GL_ARB_tessellation_shader

    _getProcAddress( driver_glPatchParameterfv, glPatchParameterfv, "glPatchParameterfv" );
    if( driver_glPatchParameterfv == NULL ) {
      driver_glPatchParameterfv = missing_glPatchParameterfv;
    }
    dt.glPatchParameterfv = MakeRegalProc(loader_glPatchParameterfv,layer);
    _getProcAddress( driver_glPatchParameteri, glPatchParameteri, "glPatchParameteri" );
    if( driver_glPatchParameteri == NULL ) {
      driver_glPatchParameteri = missing_glPatchParameteri;
    }
    dt.glPatchParameteri = MakeRegalProc(loader_glPatchParameteri,layer);

    // GL_ARB_texture_buffer_object

    _getProcAddress( driver_glTexBufferARB, glTexBufferARB, "glTexBufferARB" );
    if( driver_glTexBufferARB == NULL ) {
      driver_glTexBufferARB = missing_glTexBufferARB;
    }
    dt.glTexBufferARB = MakeRegalProc(loader_glTexBufferARB,layer);

    // GL_ARB_texture_buffer_range

    _getProcAddress( driver_glTexBufferRange, glTexBufferRange, "glTexBufferRange" );
    if( driver_glTexBufferRange == NULL ) {
      driver_glTexBufferRange = missing_glTexBufferRange;
    }
    dt.glTexBufferRange = MakeRegalProc(loader_glTexBufferRange,layer);
    _getProcAddress( driver_glTextureBufferRangeEXT, glTextureBufferRangeEXT, "glTextureBufferRangeEXT" );
    if( driver_glTextureBufferRangeEXT == NULL ) {
      driver_glTextureBufferRangeEXT = missing_glTextureBufferRangeEXT;
    }
    dt.glTextureBufferRangeEXT = MakeRegalProc(loader_glTextureBufferRangeEXT,layer);

    // GL_ARB_texture_compression

    _getProcAddress( driver_glCompressedTexImage1DARB, glCompressedTexImage1DARB, "glCompressedTexImage1DARB" );
    if( driver_glCompressedTexImage1DARB == NULL ) {
      driver_glCompressedTexImage1DARB = missing_glCompressedTexImage1DARB;
    }
    dt.glCompressedTexImage1DARB = MakeRegalProc(loader_glCompressedTexImage1DARB,layer);
    _getProcAddress( driver_glCompressedTexImage2DARB, glCompressedTexImage2DARB, "glCompressedTexImage2DARB" );
    if( driver_glCompressedTexImage2DARB == NULL ) {
      driver_glCompressedTexImage2DARB = missing_glCompressedTexImage2DARB;
    }
    dt.glCompressedTexImage2DARB = MakeRegalProc(loader_glCompressedTexImage2DARB,layer);
    _getProcAddress( driver_glCompressedTexImage3DARB, glCompressedTexImage3DARB, "glCompressedTexImage3DARB" );
    if( driver_glCompressedTexImage3DARB == NULL ) {
      driver_glCompressedTexImage3DARB = missing_glCompressedTexImage3DARB;
    }
    dt.glCompressedTexImage3DARB = MakeRegalProc(loader_glCompressedTexImage3DARB,layer);
    _getProcAddress( driver_glCompressedTexSubImage1DARB, glCompressedTexSubImage1DARB, "glCompressedTexSubImage1DARB" );
    if( driver_glCompressedTexSubImage1DARB == NULL ) {
      driver_glCompressedTexSubImage1DARB = missing_glCompressedTexSubImage1DARB;
    }
    dt.glCompressedTexSubImage1DARB = MakeRegalProc(loader_glCompressedTexSubImage1DARB,layer);
    _getProcAddress( driver_glCompressedTexSubImage2DARB, glCompressedTexSubImage2DARB, "glCompressedTexSubImage2DARB" );
    if( driver_glCompressedTexSubImage2DARB == NULL ) {
      driver_glCompressedTexSubImage2DARB = missing_glCompressedTexSubImage2DARB;
    }
    dt.glCompressedTexSubImage2DARB = MakeRegalProc(loader_glCompressedTexSubImage2DARB,layer);
    _getProcAddress( driver_glCompressedTexSubImage3DARB, glCompressedTexSubImage3DARB, "glCompressedTexSubImage3DARB" );
    if( driver_glCompressedTexSubImage3DARB == NULL ) {
      driver_glCompressedTexSubImage3DARB = missing_glCompressedTexSubImage3DARB;
    }
    dt.glCompressedTexSubImage3DARB = MakeRegalProc(loader_glCompressedTexSubImage3DARB,layer);
    _getProcAddress( driver_glGetCompressedTexImageARB, glGetCompressedTexImageARB, "glGetCompressedTexImageARB" );
    if( driver_glGetCompressedTexImageARB == NULL ) {
      driver_glGetCompressedTexImageARB = missing_glGetCompressedTexImageARB;
    }
    dt.glGetCompressedTexImageARB = MakeRegalProc(loader_glGetCompressedTexImageARB,layer);

    // GL_ARB_texture_multisample

    _getProcAddress( driver_glGetMultisamplefv, glGetMultisamplefv, "glGetMultisamplefv" );
    if( driver_glGetMultisamplefv == NULL ) {
      driver_glGetMultisamplefv = missing_glGetMultisamplefv;
    }
    dt.glGetMultisamplefv = MakeRegalProc(loader_glGetMultisamplefv,layer);
    _getProcAddress( driver_glSampleMaski, glSampleMaski, "glSampleMaski" );
    if( driver_glSampleMaski == NULL ) {
      driver_glSampleMaski = missing_glSampleMaski;
    }
    dt.glSampleMaski = MakeRegalProc(loader_glSampleMaski,layer);
    _getProcAddress( driver_glTexImage2DMultisample, glTexImage2DMultisample, "glTexImage2DMultisample" );
    if( driver_glTexImage2DMultisample == NULL ) {
      driver_glTexImage2DMultisample = missing_glTexImage2DMultisample;
    }
    dt.glTexImage2DMultisample = MakeRegalProc(loader_glTexImage2DMultisample,layer);
    _getProcAddress( driver_glTexImage3DMultisample, glTexImage3DMultisample, "glTexImage3DMultisample" );
    if( driver_glTexImage3DMultisample == NULL ) {
      driver_glTexImage3DMultisample = missing_glTexImage3DMultisample;
    }
    dt.glTexImage3DMultisample = MakeRegalProc(loader_glTexImage3DMultisample,layer);

    // GL_ARB_texture_storage

    _getProcAddress( driver_glTexStorage1D, glTexStorage1D, "glTexStorage1D" );
    if( driver_glTexStorage1D == NULL ) {
      driver_glTexStorage1D = missing_glTexStorage1D;
    }
    dt.glTexStorage1D = MakeRegalProc(loader_glTexStorage1D,layer);
    _getProcAddress( driver_glTexStorage2D, glTexStorage2D, "glTexStorage2D" );
    if( driver_glTexStorage2D == NULL ) {
      driver_glTexStorage2D = missing_glTexStorage2D;
    }
    dt.glTexStorage2D = MakeRegalProc(loader_glTexStorage2D,layer);
    _getProcAddress( driver_glTexStorage3D, glTexStorage3D, "glTexStorage3D" );
    if( driver_glTexStorage3D == NULL ) {
      driver_glTexStorage3D = missing_glTexStorage3D;
    }
    dt.glTexStorage3D = MakeRegalProc(loader_glTexStorage3D,layer);
    _getProcAddress( driver_glTextureStorage1DEXT, glTextureStorage1DEXT, "glTextureStorage1DEXT" );
    if( driver_glTextureStorage1DEXT == NULL ) {
      driver_glTextureStorage1DEXT = missing_glTextureStorage1DEXT;
    }
    dt.glTextureStorage1DEXT = MakeRegalProc(loader_glTextureStorage1DEXT,layer);
    _getProcAddress( driver_glTextureStorage2DEXT, glTextureStorage2DEXT, "glTextureStorage2DEXT" );
    if( driver_glTextureStorage2DEXT == NULL ) {
      driver_glTextureStorage2DEXT = missing_glTextureStorage2DEXT;
    }
    dt.glTextureStorage2DEXT = MakeRegalProc(loader_glTextureStorage2DEXT,layer);
    _getProcAddress( driver_glTextureStorage3DEXT, glTextureStorage3DEXT, "glTextureStorage3DEXT" );
    if( driver_glTextureStorage3DEXT == NULL ) {
      driver_glTextureStorage3DEXT = missing_glTextureStorage3DEXT;
    }
    dt.glTextureStorage3DEXT = MakeRegalProc(loader_glTextureStorage3DEXT,layer);

    // GL_ARB_texture_storage_multisample

    _getProcAddress( driver_glTexStorage2DMultisample, glTexStorage2DMultisample, "glTexStorage2DMultisample" );
    if( driver_glTexStorage2DMultisample == NULL ) {
      driver_glTexStorage2DMultisample = missing_glTexStorage2DMultisample;
    }
    dt.glTexStorage2DMultisample = MakeRegalProc(loader_glTexStorage2DMultisample,layer);
    _getProcAddress( driver_glTexStorage3DMultisample, glTexStorage3DMultisample, "glTexStorage3DMultisample" );
    if( driver_glTexStorage3DMultisample == NULL ) {
      driver_glTexStorage3DMultisample = missing_glTexStorage3DMultisample;
    }
    dt.glTexStorage3DMultisample = MakeRegalProc(loader_glTexStorage3DMultisample,layer);
    _getProcAddress( driver_glTextureStorage2DMultisampleEXT, glTextureStorage2DMultisampleEXT, "glTextureStorage2DMultisampleEXT" );
    if( driver_glTextureStorage2DMultisampleEXT == NULL ) {
      driver_glTextureStorage2DMultisampleEXT = missing_glTextureStorage2DMultisampleEXT;
    }
    dt.glTextureStorage2DMultisampleEXT = MakeRegalProc(loader_glTextureStorage2DMultisampleEXT,layer);
    _getProcAddress( driver_glTextureStorage3DMultisampleEXT, glTextureStorage3DMultisampleEXT, "glTextureStorage3DMultisampleEXT" );
    if( driver_glTextureStorage3DMultisampleEXT == NULL ) {
      driver_glTextureStorage3DMultisampleEXT = missing_glTextureStorage3DMultisampleEXT;
    }
    dt.glTextureStorage3DMultisampleEXT = MakeRegalProc(loader_glTextureStorage3DMultisampleEXT,layer);

    // GL_ARB_texture_view

    _getProcAddress( driver_glTextureView, glTextureView, "glTextureView" );
    if( driver_glTextureView == NULL ) {
      driver_glTextureView = missing_glTextureView;
    }
    dt.glTextureView = MakeRegalProc(loader_glTextureView,layer);

    // GL_ARB_timer_query

    _getProcAddress( driver_glGetQueryObjecti64v, glGetQueryObjecti64v, "glGetQueryObjecti64v" );
    if( driver_glGetQueryObjecti64v == NULL ) {
      driver_glGetQueryObjecti64v = missing_glGetQueryObjecti64v;
    }
    dt.glGetQueryObjecti64v = MakeRegalProc(loader_glGetQueryObjecti64v,layer);
    _getProcAddress( driver_glGetQueryObjectui64v, glGetQueryObjectui64v, "glGetQueryObjectui64v" );
    if( driver_glGetQueryObjectui64v == NULL ) {
      driver_glGetQueryObjectui64v = missing_glGetQueryObjectui64v;
    }
    dt.glGetQueryObjectui64v = MakeRegalProc(loader_glGetQueryObjectui64v,layer);
    _getProcAddress( driver_glQueryCounter, glQueryCounter, "glQueryCounter" );
    if( driver_glQueryCounter == NULL ) {
      driver_glQueryCounter = missing_glQueryCounter;
    }
    dt.glQueryCounter = MakeRegalProc(loader_glQueryCounter,layer);

    // GL_ARB_transform_feedback2

    _getProcAddress( driver_glBindTransformFeedback, glBindTransformFeedback, "glBindTransformFeedback" );
    if( driver_glBindTransformFeedback == NULL ) {
      driver_glBindTransformFeedback = missing_glBindTransformFeedback;
    }
    dt.glBindTransformFeedback = MakeRegalProc(loader_glBindTransformFeedback,layer);
    _getProcAddress( driver_glDeleteTransformFeedbacks, glDeleteTransformFeedbacks, "glDeleteTransformFeedbacks" );
    if( driver_glDeleteTransformFeedbacks == NULL ) {
      driver_glDeleteTransformFeedbacks = missing_glDeleteTransformFeedbacks;
    }
    dt.glDeleteTransformFeedbacks = MakeRegalProc(loader_glDeleteTransformFeedbacks,layer);
    _getProcAddress( driver_glDrawTransformFeedback, glDrawTransformFeedback, "glDrawTransformFeedback" );
    if( driver_glDrawTransformFeedback == NULL ) {
      driver_glDrawTransformFeedback = missing_glDrawTransformFeedback;
    }
    dt.glDrawTransformFeedback = MakeRegalProc(loader_glDrawTransformFeedback,layer);
    _getProcAddress( driver_glGenTransformFeedbacks, glGenTransformFeedbacks, "glGenTransformFeedbacks" );
    if( driver_glGenTransformFeedbacks == NULL ) {
      driver_glGenTransformFeedbacks = missing_glGenTransformFeedbacks;
    }
    dt.glGenTransformFeedbacks = MakeRegalProc(loader_glGenTransformFeedbacks,layer);
    _getProcAddress( driver_glIsTransformFeedback, glIsTransformFeedback, "glIsTransformFeedback" );
    if( driver_glIsTransformFeedback == NULL ) {
      driver_glIsTransformFeedback = missing_glIsTransformFeedback;
    }
    dt.glIsTransformFeedback = MakeRegalProc(loader_glIsTransformFeedback,layer);
    _getProcAddress( driver_glPauseTransformFeedback, glPauseTransformFeedback, "glPauseTransformFeedback" );
    if( driver_glPauseTransformFeedback == NULL ) {
      driver_glPauseTransformFeedback = missing_glPauseTransformFeedback;
    }
    dt.glPauseTransformFeedback = MakeRegalProc(loader_glPauseTransformFeedback,layer);
    _getProcAddress( driver_glResumeTransformFeedback, glResumeTransformFeedback, "glResumeTransformFeedback" );
    if( driver_glResumeTransformFeedback == NULL ) {
      driver_glResumeTransformFeedback = missing_glResumeTransformFeedback;
    }
    dt.glResumeTransformFeedback = MakeRegalProc(loader_glResumeTransformFeedback,layer);

    // GL_ARB_transform_feedback3

    _getProcAddress( driver_glBeginQueryIndexed, glBeginQueryIndexed, "glBeginQueryIndexed" );
    if( driver_glBeginQueryIndexed == NULL ) {
      driver_glBeginQueryIndexed = missing_glBeginQueryIndexed;
    }
    dt.glBeginQueryIndexed = MakeRegalProc(loader_glBeginQueryIndexed,layer);
    _getProcAddress( driver_glDrawTransformFeedbackStream, glDrawTransformFeedbackStream, "glDrawTransformFeedbackStream" );
    if( driver_glDrawTransformFeedbackStream == NULL ) {
      driver_glDrawTransformFeedbackStream = missing_glDrawTransformFeedbackStream;
    }
    dt.glDrawTransformFeedbackStream = MakeRegalProc(loader_glDrawTransformFeedbackStream,layer);
    _getProcAddress( driver_glEndQueryIndexed, glEndQueryIndexed, "glEndQueryIndexed" );
    if( driver_glEndQueryIndexed == NULL ) {
      driver_glEndQueryIndexed = missing_glEndQueryIndexed;
    }
    dt.glEndQueryIndexed = MakeRegalProc(loader_glEndQueryIndexed,layer);
    _getProcAddress( driver_glGetQueryIndexediv, glGetQueryIndexediv, "glGetQueryIndexediv" );
    if( driver_glGetQueryIndexediv == NULL ) {
      driver_glGetQueryIndexediv = missing_glGetQueryIndexediv;
    }
    dt.glGetQueryIndexediv = MakeRegalProc(loader_glGetQueryIndexediv,layer);

    // GL_ARB_transform_feedback_instanced

    _getProcAddress( driver_glDrawTransformFeedbackInstanced, glDrawTransformFeedbackInstanced, "glDrawTransformFeedbackInstanced" );
    if( driver_glDrawTransformFeedbackInstanced == NULL ) {
      driver_glDrawTransformFeedbackInstanced = missing_glDrawTransformFeedbackInstanced;
    }
    dt.glDrawTransformFeedbackInstanced = MakeRegalProc(loader_glDrawTransformFeedbackInstanced,layer);
    _getProcAddress( driver_glDrawTransformFeedbackStreamInstanced, glDrawTransformFeedbackStreamInstanced, "glDrawTransformFeedbackStreamInstanced" );
    if( driver_glDrawTransformFeedbackStreamInstanced == NULL ) {
      driver_glDrawTransformFeedbackStreamInstanced = missing_glDrawTransformFeedbackStreamInstanced;
    }
    dt.glDrawTransformFeedbackStreamInstanced = MakeRegalProc(loader_glDrawTransformFeedbackStreamInstanced,layer);

    // GL_ARB_transpose_matrix

    _getProcAddress( driver_glLoadTransposeMatrixdARB, glLoadTransposeMatrixdARB, "glLoadTransposeMatrixdARB" );
    if( driver_glLoadTransposeMatrixdARB == NULL ) {
      driver_glLoadTransposeMatrixdARB = missing_glLoadTransposeMatrixdARB;
    }
    dt.glLoadTransposeMatrixdARB = MakeRegalProc(loader_glLoadTransposeMatrixdARB,layer);
    _getProcAddress( driver_glLoadTransposeMatrixfARB, glLoadTransposeMatrixfARB, "glLoadTransposeMatrixfARB" );
    if( driver_glLoadTransposeMatrixfARB == NULL ) {
      driver_glLoadTransposeMatrixfARB = missing_glLoadTransposeMatrixfARB;
    }
    dt.glLoadTransposeMatrixfARB = MakeRegalProc(loader_glLoadTransposeMatrixfARB,layer);
    _getProcAddress( driver_glMultTransposeMatrixdARB, glMultTransposeMatrixdARB, "glMultTransposeMatrixdARB" );
    if( driver_glMultTransposeMatrixdARB == NULL ) {
      driver_glMultTransposeMatrixdARB = missing_glMultTransposeMatrixdARB;
    }
    dt.glMultTransposeMatrixdARB = MakeRegalProc(loader_glMultTransposeMatrixdARB,layer);
    _getProcAddress( driver_glMultTransposeMatrixfARB, glMultTransposeMatrixfARB, "glMultTransposeMatrixfARB" );
    if( driver_glMultTransposeMatrixfARB == NULL ) {
      driver_glMultTransposeMatrixfARB = missing_glMultTransposeMatrixfARB;
    }
    dt.glMultTransposeMatrixfARB = MakeRegalProc(loader_glMultTransposeMatrixfARB,layer);

    // GL_ARB_uniform_buffer_object

    _getProcAddress( driver_glBindBufferBase, glBindBufferBase, "glBindBufferBase" );
    if( driver_glBindBufferBase == NULL ) {
      driver_glBindBufferBase = missing_glBindBufferBase;
    }
    dt.glBindBufferBase = MakeRegalProc(loader_glBindBufferBase,layer);
    _getProcAddress( driver_glBindBufferRange, glBindBufferRange, "glBindBufferRange" );
    if( driver_glBindBufferRange == NULL ) {
      driver_glBindBufferRange = missing_glBindBufferRange;
    }
    dt.glBindBufferRange = MakeRegalProc(loader_glBindBufferRange,layer);
    _getProcAddress( driver_glGetActiveUniformBlockName, glGetActiveUniformBlockName, "glGetActiveUniformBlockName" );
    if( driver_glGetActiveUniformBlockName == NULL ) {
      driver_glGetActiveUniformBlockName = missing_glGetActiveUniformBlockName;
    }
    dt.glGetActiveUniformBlockName = MakeRegalProc(loader_glGetActiveUniformBlockName,layer);
    _getProcAddress( driver_glGetActiveUniformBlockiv, glGetActiveUniformBlockiv, "glGetActiveUniformBlockiv" );
    if( driver_glGetActiveUniformBlockiv == NULL ) {
      driver_glGetActiveUniformBlockiv = missing_glGetActiveUniformBlockiv;
    }
    dt.glGetActiveUniformBlockiv = MakeRegalProc(loader_glGetActiveUniformBlockiv,layer);
    _getProcAddress( driver_glGetActiveUniformName, glGetActiveUniformName, "glGetActiveUniformName" );
    if( driver_glGetActiveUniformName == NULL ) {
      driver_glGetActiveUniformName = missing_glGetActiveUniformName;
    }
    dt.glGetActiveUniformName = MakeRegalProc(loader_glGetActiveUniformName,layer);
    _getProcAddress( driver_glGetActiveUniformsiv, glGetActiveUniformsiv, "glGetActiveUniformsiv" );
    if( driver_glGetActiveUniformsiv == NULL ) {
      driver_glGetActiveUniformsiv = missing_glGetActiveUniformsiv;
    }
    dt.glGetActiveUniformsiv = MakeRegalProc(loader_glGetActiveUniformsiv,layer);
    _getProcAddress( driver_glGetIntegeri_v, glGetIntegeri_v, "glGetIntegeri_v" );
    if( driver_glGetIntegeri_v == NULL ) {
      driver_glGetIntegeri_v = missing_glGetIntegeri_v;
    }
    dt.glGetIntegeri_v = MakeRegalProc(loader_glGetIntegeri_v,layer);
    _getProcAddress( driver_glGetUniformBlockIndex, glGetUniformBlockIndex, "glGetUniformBlockIndex" );
    if( driver_glGetUniformBlockIndex == NULL ) {
      driver_glGetUniformBlockIndex = missing_glGetUniformBlockIndex;
    }
    dt.glGetUniformBlockIndex = MakeRegalProc(loader_glGetUniformBlockIndex,layer);
    _getProcAddress( driver_glGetUniformIndices, glGetUniformIndices, "glGetUniformIndices" );
    if( driver_glGetUniformIndices == NULL ) {
      driver_glGetUniformIndices = missing_glGetUniformIndices;
    }
    dt.glGetUniformIndices = MakeRegalProc(loader_glGetUniformIndices,layer);
    _getProcAddress( driver_glUniformBlockBinding, glUniformBlockBinding, "glUniformBlockBinding" );
    if( driver_glUniformBlockBinding == NULL ) {
      driver_glUniformBlockBinding = missing_glUniformBlockBinding;
    }
    dt.glUniformBlockBinding = MakeRegalProc(loader_glUniformBlockBinding,layer);

    // GL_ARB_vertex_array_object

    _getProcAddress( driver_glBindVertexArray, glBindVertexArray, "glBindVertexArray" );
    if( driver_glBindVertexArray == NULL ) {
      driver_glBindVertexArray = missing_glBindVertexArray;
    }
    dt.glBindVertexArray = MakeRegalProc(loader_glBindVertexArray,layer);
    _getProcAddress( driver_glDeleteVertexArrays, glDeleteVertexArrays, "glDeleteVertexArrays" );
    if( driver_glDeleteVertexArrays == NULL ) {
      driver_glDeleteVertexArrays = missing_glDeleteVertexArrays;
    }
    dt.glDeleteVertexArrays = MakeRegalProc(loader_glDeleteVertexArrays,layer);
    _getProcAddress( driver_glGenVertexArrays, glGenVertexArrays, "glGenVertexArrays" );
    if( driver_glGenVertexArrays == NULL ) {
      driver_glGenVertexArrays = missing_glGenVertexArrays;
    }
    dt.glGenVertexArrays = MakeRegalProc(loader_glGenVertexArrays,layer);
    _getProcAddress( driver_glIsVertexArray, glIsVertexArray, "glIsVertexArray" );
    if( driver_glIsVertexArray == NULL ) {
      driver_glIsVertexArray = missing_glIsVertexArray;
    }
    dt.glIsVertexArray = MakeRegalProc(loader_glIsVertexArray,layer);

    // GL_ARB_vertex_attrib_64bit

    _getProcAddress( driver_glGetVertexAttribLdv, glGetVertexAttribLdv, "glGetVertexAttribLdv" );
    if( driver_glGetVertexAttribLdv == NULL ) {
      driver_glGetVertexAttribLdv = missing_glGetVertexAttribLdv;
    }
    dt.glGetVertexAttribLdv = MakeRegalProc(loader_glGetVertexAttribLdv,layer);
    _getProcAddress( driver_glVertexAttribL1d, glVertexAttribL1d, "glVertexAttribL1d" );
    if( driver_glVertexAttribL1d == NULL ) {
      driver_glVertexAttribL1d = missing_glVertexAttribL1d;
    }
    dt.glVertexAttribL1d = MakeRegalProc(loader_glVertexAttribL1d,layer);
    _getProcAddress( driver_glVertexAttribL1dv, glVertexAttribL1dv, "glVertexAttribL1dv" );
    if( driver_glVertexAttribL1dv == NULL ) {
      driver_glVertexAttribL1dv = missing_glVertexAttribL1dv;
    }
    dt.glVertexAttribL1dv = MakeRegalProc(loader_glVertexAttribL1dv,layer);
    _getProcAddress( driver_glVertexAttribL2d, glVertexAttribL2d, "glVertexAttribL2d" );
    if( driver_glVertexAttribL2d == NULL ) {
      driver_glVertexAttribL2d = missing_glVertexAttribL2d;
    }
    dt.glVertexAttribL2d = MakeRegalProc(loader_glVertexAttribL2d,layer);
    _getProcAddress( driver_glVertexAttribL2dv, glVertexAttribL2dv, "glVertexAttribL2dv" );
    if( driver_glVertexAttribL2dv == NULL ) {
      driver_glVertexAttribL2dv = missing_glVertexAttribL2dv;
    }
    dt.glVertexAttribL2dv = MakeRegalProc(loader_glVertexAttribL2dv,layer);
    _getProcAddress( driver_glVertexAttribL3d, glVertexAttribL3d, "glVertexAttribL3d" );
    if( driver_glVertexAttribL3d == NULL ) {
      driver_glVertexAttribL3d = missing_glVertexAttribL3d;
    }
    dt.glVertexAttribL3d = MakeRegalProc(loader_glVertexAttribL3d,layer);
    _getProcAddress( driver_glVertexAttribL3dv, glVertexAttribL3dv, "glVertexAttribL3dv" );
    if( driver_glVertexAttribL3dv == NULL ) {
      driver_glVertexAttribL3dv = missing_glVertexAttribL3dv;
    }
    dt.glVertexAttribL3dv = MakeRegalProc(loader_glVertexAttribL3dv,layer);
    _getProcAddress( driver_glVertexAttribL4d, glVertexAttribL4d, "glVertexAttribL4d" );
    if( driver_glVertexAttribL4d == NULL ) {
      driver_glVertexAttribL4d = missing_glVertexAttribL4d;
    }
    dt.glVertexAttribL4d = MakeRegalProc(loader_glVertexAttribL4d,layer);
    _getProcAddress( driver_glVertexAttribL4dv, glVertexAttribL4dv, "glVertexAttribL4dv" );
    if( driver_glVertexAttribL4dv == NULL ) {
      driver_glVertexAttribL4dv = missing_glVertexAttribL4dv;
    }
    dt.glVertexAttribL4dv = MakeRegalProc(loader_glVertexAttribL4dv,layer);
    _getProcAddress( driver_glVertexAttribLPointer, glVertexAttribLPointer, "glVertexAttribLPointer" );
    if( driver_glVertexAttribLPointer == NULL ) {
      driver_glVertexAttribLPointer = missing_glVertexAttribLPointer;
    }
    dt.glVertexAttribLPointer = MakeRegalProc(loader_glVertexAttribLPointer,layer);

    // GL_ARB_vertex_attrib_binding

    _getProcAddress( driver_glBindVertexBuffer, glBindVertexBuffer, "glBindVertexBuffer" );
    if( driver_glBindVertexBuffer == NULL ) {
      driver_glBindVertexBuffer = missing_glBindVertexBuffer;
    }
    dt.glBindVertexBuffer = MakeRegalProc(loader_glBindVertexBuffer,layer);
    _getProcAddress( driver_glVertexArrayBindVertexBufferEXT, glVertexArrayBindVertexBufferEXT, "glVertexArrayBindVertexBufferEXT" );
    if( driver_glVertexArrayBindVertexBufferEXT == NULL ) {
      driver_glVertexArrayBindVertexBufferEXT = missing_glVertexArrayBindVertexBufferEXT;
    }
    dt.glVertexArrayBindVertexBufferEXT = MakeRegalProc(loader_glVertexArrayBindVertexBufferEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexAttribBindingEXT, glVertexArrayVertexAttribBindingEXT, "glVertexArrayVertexAttribBindingEXT" );
    if( driver_glVertexArrayVertexAttribBindingEXT == NULL ) {
      driver_glVertexArrayVertexAttribBindingEXT = missing_glVertexArrayVertexAttribBindingEXT;
    }
    dt.glVertexArrayVertexAttribBindingEXT = MakeRegalProc(loader_glVertexArrayVertexAttribBindingEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexAttribFormatEXT, glVertexArrayVertexAttribFormatEXT, "glVertexArrayVertexAttribFormatEXT" );
    if( driver_glVertexArrayVertexAttribFormatEXT == NULL ) {
      driver_glVertexArrayVertexAttribFormatEXT = missing_glVertexArrayVertexAttribFormatEXT;
    }
    dt.glVertexArrayVertexAttribFormatEXT = MakeRegalProc(loader_glVertexArrayVertexAttribFormatEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexAttribIFormatEXT, glVertexArrayVertexAttribIFormatEXT, "glVertexArrayVertexAttribIFormatEXT" );
    if( driver_glVertexArrayVertexAttribIFormatEXT == NULL ) {
      driver_glVertexArrayVertexAttribIFormatEXT = missing_glVertexArrayVertexAttribIFormatEXT;
    }
    dt.glVertexArrayVertexAttribIFormatEXT = MakeRegalProc(loader_glVertexArrayVertexAttribIFormatEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexAttribLFormatEXT, glVertexArrayVertexAttribLFormatEXT, "glVertexArrayVertexAttribLFormatEXT" );
    if( driver_glVertexArrayVertexAttribLFormatEXT == NULL ) {
      driver_glVertexArrayVertexAttribLFormatEXT = missing_glVertexArrayVertexAttribLFormatEXT;
    }
    dt.glVertexArrayVertexAttribLFormatEXT = MakeRegalProc(loader_glVertexArrayVertexAttribLFormatEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexBindingDivisorEXT, glVertexArrayVertexBindingDivisorEXT, "glVertexArrayVertexBindingDivisorEXT" );
    if( driver_glVertexArrayVertexBindingDivisorEXT == NULL ) {
      driver_glVertexArrayVertexBindingDivisorEXT = missing_glVertexArrayVertexBindingDivisorEXT;
    }
    dt.glVertexArrayVertexBindingDivisorEXT = MakeRegalProc(loader_glVertexArrayVertexBindingDivisorEXT,layer);
    _getProcAddress( driver_glVertexAttribBinding, glVertexAttribBinding, "glVertexAttribBinding" );
    if( driver_glVertexAttribBinding == NULL ) {
      driver_glVertexAttribBinding = missing_glVertexAttribBinding;
    }
    dt.glVertexAttribBinding = MakeRegalProc(loader_glVertexAttribBinding,layer);
    _getProcAddress( driver_glVertexAttribFormat, glVertexAttribFormat, "glVertexAttribFormat" );
    if( driver_glVertexAttribFormat == NULL ) {
      driver_glVertexAttribFormat = missing_glVertexAttribFormat;
    }
    dt.glVertexAttribFormat = MakeRegalProc(loader_glVertexAttribFormat,layer);
    _getProcAddress( driver_glVertexAttribIFormat, glVertexAttribIFormat, "glVertexAttribIFormat" );
    if( driver_glVertexAttribIFormat == NULL ) {
      driver_glVertexAttribIFormat = missing_glVertexAttribIFormat;
    }
    dt.glVertexAttribIFormat = MakeRegalProc(loader_glVertexAttribIFormat,layer);
    _getProcAddress( driver_glVertexAttribLFormat, glVertexAttribLFormat, "glVertexAttribLFormat" );
    if( driver_glVertexAttribLFormat == NULL ) {
      driver_glVertexAttribLFormat = missing_glVertexAttribLFormat;
    }
    dt.glVertexAttribLFormat = MakeRegalProc(loader_glVertexAttribLFormat,layer);
    _getProcAddress( driver_glVertexBindingDivisor, glVertexBindingDivisor, "glVertexBindingDivisor" );
    if( driver_glVertexBindingDivisor == NULL ) {
      driver_glVertexBindingDivisor = missing_glVertexBindingDivisor;
    }
    dt.glVertexBindingDivisor = MakeRegalProc(loader_glVertexBindingDivisor,layer);

    // GL_ARB_vertex_blend

    _getProcAddress( driver_glVertexBlendARB, glVertexBlendARB, "glVertexBlendARB" );
    if( driver_glVertexBlendARB == NULL ) {
      driver_glVertexBlendARB = missing_glVertexBlendARB;
    }
    dt.glVertexBlendARB = MakeRegalProc(loader_glVertexBlendARB,layer);
    _getProcAddress( driver_glWeightPointerARB, glWeightPointerARB, "glWeightPointerARB" );
    if( driver_glWeightPointerARB == NULL ) {
      driver_glWeightPointerARB = missing_glWeightPointerARB;
    }
    dt.glWeightPointerARB = MakeRegalProc(loader_glWeightPointerARB,layer);
    _getProcAddress( driver_glWeightbvARB, glWeightbvARB, "glWeightbvARB" );
    if( driver_glWeightbvARB == NULL ) {
      driver_glWeightbvARB = missing_glWeightbvARB;
    }
    dt.glWeightbvARB = MakeRegalProc(loader_glWeightbvARB,layer);
    _getProcAddress( driver_glWeightdvARB, glWeightdvARB, "glWeightdvARB" );
    if( driver_glWeightdvARB == NULL ) {
      driver_glWeightdvARB = missing_glWeightdvARB;
    }
    dt.glWeightdvARB = MakeRegalProc(loader_glWeightdvARB,layer);
    _getProcAddress( driver_glWeightfvARB, glWeightfvARB, "glWeightfvARB" );
    if( driver_glWeightfvARB == NULL ) {
      driver_glWeightfvARB = missing_glWeightfvARB;
    }
    dt.glWeightfvARB = MakeRegalProc(loader_glWeightfvARB,layer);
    _getProcAddress( driver_glWeightivARB, glWeightivARB, "glWeightivARB" );
    if( driver_glWeightivARB == NULL ) {
      driver_glWeightivARB = missing_glWeightivARB;
    }
    dt.glWeightivARB = MakeRegalProc(loader_glWeightivARB,layer);
    _getProcAddress( driver_glWeightsvARB, glWeightsvARB, "glWeightsvARB" );
    if( driver_glWeightsvARB == NULL ) {
      driver_glWeightsvARB = missing_glWeightsvARB;
    }
    dt.glWeightsvARB = MakeRegalProc(loader_glWeightsvARB,layer);
    _getProcAddress( driver_glWeightubvARB, glWeightubvARB, "glWeightubvARB" );
    if( driver_glWeightubvARB == NULL ) {
      driver_glWeightubvARB = missing_glWeightubvARB;
    }
    dt.glWeightubvARB = MakeRegalProc(loader_glWeightubvARB,layer);
    _getProcAddress( driver_glWeightuivARB, glWeightuivARB, "glWeightuivARB" );
    if( driver_glWeightuivARB == NULL ) {
      driver_glWeightuivARB = missing_glWeightuivARB;
    }
    dt.glWeightuivARB = MakeRegalProc(loader_glWeightuivARB,layer);
    _getProcAddress( driver_glWeightusvARB, glWeightusvARB, "glWeightusvARB" );
    if( driver_glWeightusvARB == NULL ) {
      driver_glWeightusvARB = missing_glWeightusvARB;
    }
    dt.glWeightusvARB = MakeRegalProc(loader_glWeightusvARB,layer);

    // GL_ARB_vertex_buffer_object

    _getProcAddress( driver_glBindBufferARB, glBindBufferARB, "glBindBufferARB" );
    if( driver_glBindBufferARB == NULL ) {
      driver_glBindBufferARB = missing_glBindBufferARB;
    }
    dt.glBindBufferARB = MakeRegalProc(loader_glBindBufferARB,layer);
    _getProcAddress( driver_glBufferDataARB, glBufferDataARB, "glBufferDataARB" );
    if( driver_glBufferDataARB == NULL ) {
      driver_glBufferDataARB = missing_glBufferDataARB;
    }
    dt.glBufferDataARB = MakeRegalProc(loader_glBufferDataARB,layer);
    _getProcAddress( driver_glBufferSubDataARB, glBufferSubDataARB, "glBufferSubDataARB" );
    if( driver_glBufferSubDataARB == NULL ) {
      driver_glBufferSubDataARB = missing_glBufferSubDataARB;
    }
    dt.glBufferSubDataARB = MakeRegalProc(loader_glBufferSubDataARB,layer);
    _getProcAddress( driver_glDeleteBuffersARB, glDeleteBuffersARB, "glDeleteBuffersARB" );
    if( driver_glDeleteBuffersARB == NULL ) {
      driver_glDeleteBuffersARB = missing_glDeleteBuffersARB;
    }
    dt.glDeleteBuffersARB = MakeRegalProc(loader_glDeleteBuffersARB,layer);
    _getProcAddress( driver_glGenBuffersARB, glGenBuffersARB, "glGenBuffersARB" );
    if( driver_glGenBuffersARB == NULL ) {
      driver_glGenBuffersARB = missing_glGenBuffersARB;
    }
    dt.glGenBuffersARB = MakeRegalProc(loader_glGenBuffersARB,layer);
    _getProcAddress( driver_glGetBufferParameterivARB, glGetBufferParameterivARB, "glGetBufferParameterivARB" );
    if( driver_glGetBufferParameterivARB == NULL ) {
      driver_glGetBufferParameterivARB = missing_glGetBufferParameterivARB;
    }
    dt.glGetBufferParameterivARB = MakeRegalProc(loader_glGetBufferParameterivARB,layer);
    _getProcAddress( driver_glGetBufferPointervARB, glGetBufferPointervARB, "glGetBufferPointervARB" );
    if( driver_glGetBufferPointervARB == NULL ) {
      driver_glGetBufferPointervARB = missing_glGetBufferPointervARB;
    }
    dt.glGetBufferPointervARB = MakeRegalProc(loader_glGetBufferPointervARB,layer);
    _getProcAddress( driver_glGetBufferSubDataARB, glGetBufferSubDataARB, "glGetBufferSubDataARB" );
    if( driver_glGetBufferSubDataARB == NULL ) {
      driver_glGetBufferSubDataARB = missing_glGetBufferSubDataARB;
    }
    dt.glGetBufferSubDataARB = MakeRegalProc(loader_glGetBufferSubDataARB,layer);
    _getProcAddress( driver_glIsBufferARB, glIsBufferARB, "glIsBufferARB" );
    if( driver_glIsBufferARB == NULL ) {
      driver_glIsBufferARB = missing_glIsBufferARB;
    }
    dt.glIsBufferARB = MakeRegalProc(loader_glIsBufferARB,layer);
    _getProcAddress( driver_glMapBufferARB, glMapBufferARB, "glMapBufferARB" );
    if( driver_glMapBufferARB == NULL ) {
      driver_glMapBufferARB = missing_glMapBufferARB;
    }
    dt.glMapBufferARB = MakeRegalProc(loader_glMapBufferARB,layer);
    _getProcAddress( driver_glUnmapBufferARB, glUnmapBufferARB, "glUnmapBufferARB" );
    if( driver_glUnmapBufferARB == NULL ) {
      driver_glUnmapBufferARB = missing_glUnmapBufferARB;
    }
    dt.glUnmapBufferARB = MakeRegalProc(loader_glUnmapBufferARB,layer);

    // GL_ARB_vertex_program

    _getProcAddress( driver_glBindProgramARB, glBindProgramARB, "glBindProgramARB" );
    if( driver_glBindProgramARB == NULL ) {
      driver_glBindProgramARB = missing_glBindProgramARB;
    }
    dt.glBindProgramARB = MakeRegalProc(loader_glBindProgramARB,layer);
    _getProcAddress( driver_glDeleteProgramsARB, glDeleteProgramsARB, "glDeleteProgramsARB" );
    if( driver_glDeleteProgramsARB == NULL ) {
      driver_glDeleteProgramsARB = missing_glDeleteProgramsARB;
    }
    dt.glDeleteProgramsARB = MakeRegalProc(loader_glDeleteProgramsARB,layer);
    _getProcAddress( driver_glDisableVertexAttribArrayARB, glDisableVertexAttribArrayARB, "glDisableVertexAttribArrayARB" );
    if( driver_glDisableVertexAttribArrayARB == NULL ) {
      driver_glDisableVertexAttribArrayARB = missing_glDisableVertexAttribArrayARB;
    }
    dt.glDisableVertexAttribArrayARB = MakeRegalProc(loader_glDisableVertexAttribArrayARB,layer);
    _getProcAddress( driver_glEnableVertexAttribArrayARB, glEnableVertexAttribArrayARB, "glEnableVertexAttribArrayARB" );
    if( driver_glEnableVertexAttribArrayARB == NULL ) {
      driver_glEnableVertexAttribArrayARB = missing_glEnableVertexAttribArrayARB;
    }
    dt.glEnableVertexAttribArrayARB = MakeRegalProc(loader_glEnableVertexAttribArrayARB,layer);
    _getProcAddress( driver_glGenProgramsARB, glGenProgramsARB, "glGenProgramsARB" );
    if( driver_glGenProgramsARB == NULL ) {
      driver_glGenProgramsARB = missing_glGenProgramsARB;
    }
    dt.glGenProgramsARB = MakeRegalProc(loader_glGenProgramsARB,layer);
    _getProcAddress( driver_glGetProgramEnvParameterdvARB, glGetProgramEnvParameterdvARB, "glGetProgramEnvParameterdvARB" );
    if( driver_glGetProgramEnvParameterdvARB == NULL ) {
      driver_glGetProgramEnvParameterdvARB = missing_glGetProgramEnvParameterdvARB;
    }
    dt.glGetProgramEnvParameterdvARB = MakeRegalProc(loader_glGetProgramEnvParameterdvARB,layer);
    _getProcAddress( driver_glGetProgramEnvParameterfvARB, glGetProgramEnvParameterfvARB, "glGetProgramEnvParameterfvARB" );
    if( driver_glGetProgramEnvParameterfvARB == NULL ) {
      driver_glGetProgramEnvParameterfvARB = missing_glGetProgramEnvParameterfvARB;
    }
    dt.glGetProgramEnvParameterfvARB = MakeRegalProc(loader_glGetProgramEnvParameterfvARB,layer);
    _getProcAddress( driver_glGetProgramLocalParameterdvARB, glGetProgramLocalParameterdvARB, "glGetProgramLocalParameterdvARB" );
    if( driver_glGetProgramLocalParameterdvARB == NULL ) {
      driver_glGetProgramLocalParameterdvARB = missing_glGetProgramLocalParameterdvARB;
    }
    dt.glGetProgramLocalParameterdvARB = MakeRegalProc(loader_glGetProgramLocalParameterdvARB,layer);
    _getProcAddress( driver_glGetProgramLocalParameterfvARB, glGetProgramLocalParameterfvARB, "glGetProgramLocalParameterfvARB" );
    if( driver_glGetProgramLocalParameterfvARB == NULL ) {
      driver_glGetProgramLocalParameterfvARB = missing_glGetProgramLocalParameterfvARB;
    }
    dt.glGetProgramLocalParameterfvARB = MakeRegalProc(loader_glGetProgramLocalParameterfvARB,layer);
    _getProcAddress( driver_glGetProgramStringARB, glGetProgramStringARB, "glGetProgramStringARB" );
    if( driver_glGetProgramStringARB == NULL ) {
      driver_glGetProgramStringARB = missing_glGetProgramStringARB;
    }
    dt.glGetProgramStringARB = MakeRegalProc(loader_glGetProgramStringARB,layer);
    _getProcAddress( driver_glGetProgramivARB, glGetProgramivARB, "glGetProgramivARB" );
    if( driver_glGetProgramivARB == NULL ) {
      driver_glGetProgramivARB = missing_glGetProgramivARB;
    }
    dt.glGetProgramivARB = MakeRegalProc(loader_glGetProgramivARB,layer);
    _getProcAddress( driver_glGetVertexAttribPointervARB, glGetVertexAttribPointervARB, "glGetVertexAttribPointervARB" );
    if( driver_glGetVertexAttribPointervARB == NULL ) {
      driver_glGetVertexAttribPointervARB = missing_glGetVertexAttribPointervARB;
    }
    dt.glGetVertexAttribPointervARB = MakeRegalProc(loader_glGetVertexAttribPointervARB,layer);
    _getProcAddress( driver_glGetVertexAttribdvARB, glGetVertexAttribdvARB, "glGetVertexAttribdvARB" );
    if( driver_glGetVertexAttribdvARB == NULL ) {
      driver_glGetVertexAttribdvARB = missing_glGetVertexAttribdvARB;
    }
    dt.glGetVertexAttribdvARB = MakeRegalProc(loader_glGetVertexAttribdvARB,layer);
    _getProcAddress( driver_glGetVertexAttribfvARB, glGetVertexAttribfvARB, "glGetVertexAttribfvARB" );
    if( driver_glGetVertexAttribfvARB == NULL ) {
      driver_glGetVertexAttribfvARB = missing_glGetVertexAttribfvARB;
    }
    dt.glGetVertexAttribfvARB = MakeRegalProc(loader_glGetVertexAttribfvARB,layer);
    _getProcAddress( driver_glGetVertexAttribivARB, glGetVertexAttribivARB, "glGetVertexAttribivARB" );
    if( driver_glGetVertexAttribivARB == NULL ) {
      driver_glGetVertexAttribivARB = missing_glGetVertexAttribivARB;
    }
    dt.glGetVertexAttribivARB = MakeRegalProc(loader_glGetVertexAttribivARB,layer);
    _getProcAddress( driver_glIsProgramARB, glIsProgramARB, "glIsProgramARB" );
    if( driver_glIsProgramARB == NULL ) {
      driver_glIsProgramARB = missing_glIsProgramARB;
    }
    dt.glIsProgramARB = MakeRegalProc(loader_glIsProgramARB,layer);
    _getProcAddress( driver_glProgramEnvParameter4dARB, glProgramEnvParameter4dARB, "glProgramEnvParameter4dARB" );
    if( driver_glProgramEnvParameter4dARB == NULL ) {
      driver_glProgramEnvParameter4dARB = missing_glProgramEnvParameter4dARB;
    }
    dt.glProgramEnvParameter4dARB = MakeRegalProc(loader_glProgramEnvParameter4dARB,layer);
    _getProcAddress( driver_glProgramEnvParameter4dvARB, glProgramEnvParameter4dvARB, "glProgramEnvParameter4dvARB" );
    if( driver_glProgramEnvParameter4dvARB == NULL ) {
      driver_glProgramEnvParameter4dvARB = missing_glProgramEnvParameter4dvARB;
    }
    dt.glProgramEnvParameter4dvARB = MakeRegalProc(loader_glProgramEnvParameter4dvARB,layer);
    _getProcAddress( driver_glProgramEnvParameter4fARB, glProgramEnvParameter4fARB, "glProgramEnvParameter4fARB" );
    if( driver_glProgramEnvParameter4fARB == NULL ) {
      driver_glProgramEnvParameter4fARB = missing_glProgramEnvParameter4fARB;
    }
    dt.glProgramEnvParameter4fARB = MakeRegalProc(loader_glProgramEnvParameter4fARB,layer);
    _getProcAddress( driver_glProgramEnvParameter4fvARB, glProgramEnvParameter4fvARB, "glProgramEnvParameter4fvARB" );
    if( driver_glProgramEnvParameter4fvARB == NULL ) {
      driver_glProgramEnvParameter4fvARB = missing_glProgramEnvParameter4fvARB;
    }
    dt.glProgramEnvParameter4fvARB = MakeRegalProc(loader_glProgramEnvParameter4fvARB,layer);
    _getProcAddress( driver_glProgramLocalParameter4dARB, glProgramLocalParameter4dARB, "glProgramLocalParameter4dARB" );
    if( driver_glProgramLocalParameter4dARB == NULL ) {
      driver_glProgramLocalParameter4dARB = missing_glProgramLocalParameter4dARB;
    }
    dt.glProgramLocalParameter4dARB = MakeRegalProc(loader_glProgramLocalParameter4dARB,layer);
    _getProcAddress( driver_glProgramLocalParameter4dvARB, glProgramLocalParameter4dvARB, "glProgramLocalParameter4dvARB" );
    if( driver_glProgramLocalParameter4dvARB == NULL ) {
      driver_glProgramLocalParameter4dvARB = missing_glProgramLocalParameter4dvARB;
    }
    dt.glProgramLocalParameter4dvARB = MakeRegalProc(loader_glProgramLocalParameter4dvARB,layer);
    _getProcAddress( driver_glProgramLocalParameter4fARB, glProgramLocalParameter4fARB, "glProgramLocalParameter4fARB" );
    if( driver_glProgramLocalParameter4fARB == NULL ) {
      driver_glProgramLocalParameter4fARB = missing_glProgramLocalParameter4fARB;
    }
    dt.glProgramLocalParameter4fARB = MakeRegalProc(loader_glProgramLocalParameter4fARB,layer);
    _getProcAddress( driver_glProgramLocalParameter4fvARB, glProgramLocalParameter4fvARB, "glProgramLocalParameter4fvARB" );
    if( driver_glProgramLocalParameter4fvARB == NULL ) {
      driver_glProgramLocalParameter4fvARB = missing_glProgramLocalParameter4fvARB;
    }
    dt.glProgramLocalParameter4fvARB = MakeRegalProc(loader_glProgramLocalParameter4fvARB,layer);
    _getProcAddress( driver_glProgramStringARB, glProgramStringARB, "glProgramStringARB" );
    if( driver_glProgramStringARB == NULL ) {
      driver_glProgramStringARB = missing_glProgramStringARB;
    }
    dt.glProgramStringARB = MakeRegalProc(loader_glProgramStringARB,layer);
    _getProcAddress( driver_glVertexAttrib1dARB, glVertexAttrib1dARB, "glVertexAttrib1dARB" );
    if( driver_glVertexAttrib1dARB == NULL ) {
      driver_glVertexAttrib1dARB = missing_glVertexAttrib1dARB;
    }
    dt.glVertexAttrib1dARB = MakeRegalProc(loader_glVertexAttrib1dARB,layer);
    _getProcAddress( driver_glVertexAttrib1dvARB, glVertexAttrib1dvARB, "glVertexAttrib1dvARB" );
    if( driver_glVertexAttrib1dvARB == NULL ) {
      driver_glVertexAttrib1dvARB = missing_glVertexAttrib1dvARB;
    }
    dt.glVertexAttrib1dvARB = MakeRegalProc(loader_glVertexAttrib1dvARB,layer);
    _getProcAddress( driver_glVertexAttrib1fARB, glVertexAttrib1fARB, "glVertexAttrib1fARB" );
    if( driver_glVertexAttrib1fARB == NULL ) {
      driver_glVertexAttrib1fARB = missing_glVertexAttrib1fARB;
    }
    dt.glVertexAttrib1fARB = MakeRegalProc(loader_glVertexAttrib1fARB,layer);
    _getProcAddress( driver_glVertexAttrib1fvARB, glVertexAttrib1fvARB, "glVertexAttrib1fvARB" );
    if( driver_glVertexAttrib1fvARB == NULL ) {
      driver_glVertexAttrib1fvARB = missing_glVertexAttrib1fvARB;
    }
    dt.glVertexAttrib1fvARB = MakeRegalProc(loader_glVertexAttrib1fvARB,layer);
    _getProcAddress( driver_glVertexAttrib1sARB, glVertexAttrib1sARB, "glVertexAttrib1sARB" );
    if( driver_glVertexAttrib1sARB == NULL ) {
      driver_glVertexAttrib1sARB = missing_glVertexAttrib1sARB;
    }
    dt.glVertexAttrib1sARB = MakeRegalProc(loader_glVertexAttrib1sARB,layer);
    _getProcAddress( driver_glVertexAttrib1svARB, glVertexAttrib1svARB, "glVertexAttrib1svARB" );
    if( driver_glVertexAttrib1svARB == NULL ) {
      driver_glVertexAttrib1svARB = missing_glVertexAttrib1svARB;
    }
    dt.glVertexAttrib1svARB = MakeRegalProc(loader_glVertexAttrib1svARB,layer);
    _getProcAddress( driver_glVertexAttrib2dARB, glVertexAttrib2dARB, "glVertexAttrib2dARB" );
    if( driver_glVertexAttrib2dARB == NULL ) {
      driver_glVertexAttrib2dARB = missing_glVertexAttrib2dARB;
    }
    dt.glVertexAttrib2dARB = MakeRegalProc(loader_glVertexAttrib2dARB,layer);
    _getProcAddress( driver_glVertexAttrib2dvARB, glVertexAttrib2dvARB, "glVertexAttrib2dvARB" );
    if( driver_glVertexAttrib2dvARB == NULL ) {
      driver_glVertexAttrib2dvARB = missing_glVertexAttrib2dvARB;
    }
    dt.glVertexAttrib2dvARB = MakeRegalProc(loader_glVertexAttrib2dvARB,layer);
    _getProcAddress( driver_glVertexAttrib2fARB, glVertexAttrib2fARB, "glVertexAttrib2fARB" );
    if( driver_glVertexAttrib2fARB == NULL ) {
      driver_glVertexAttrib2fARB = missing_glVertexAttrib2fARB;
    }
    dt.glVertexAttrib2fARB = MakeRegalProc(loader_glVertexAttrib2fARB,layer);
    _getProcAddress( driver_glVertexAttrib2fvARB, glVertexAttrib2fvARB, "glVertexAttrib2fvARB" );
    if( driver_glVertexAttrib2fvARB == NULL ) {
      driver_glVertexAttrib2fvARB = missing_glVertexAttrib2fvARB;
    }
    dt.glVertexAttrib2fvARB = MakeRegalProc(loader_glVertexAttrib2fvARB,layer);
    _getProcAddress( driver_glVertexAttrib2sARB, glVertexAttrib2sARB, "glVertexAttrib2sARB" );
    if( driver_glVertexAttrib2sARB == NULL ) {
      driver_glVertexAttrib2sARB = missing_glVertexAttrib2sARB;
    }
    dt.glVertexAttrib2sARB = MakeRegalProc(loader_glVertexAttrib2sARB,layer);
    _getProcAddress( driver_glVertexAttrib2svARB, glVertexAttrib2svARB, "glVertexAttrib2svARB" );
    if( driver_glVertexAttrib2svARB == NULL ) {
      driver_glVertexAttrib2svARB = missing_glVertexAttrib2svARB;
    }
    dt.glVertexAttrib2svARB = MakeRegalProc(loader_glVertexAttrib2svARB,layer);
    _getProcAddress( driver_glVertexAttrib3dARB, glVertexAttrib3dARB, "glVertexAttrib3dARB" );
    if( driver_glVertexAttrib3dARB == NULL ) {
      driver_glVertexAttrib3dARB = missing_glVertexAttrib3dARB;
    }
    dt.glVertexAttrib3dARB = MakeRegalProc(loader_glVertexAttrib3dARB,layer);
    _getProcAddress( driver_glVertexAttrib3dvARB, glVertexAttrib3dvARB, "glVertexAttrib3dvARB" );
    if( driver_glVertexAttrib3dvARB == NULL ) {
      driver_glVertexAttrib3dvARB = missing_glVertexAttrib3dvARB;
    }
    dt.glVertexAttrib3dvARB = MakeRegalProc(loader_glVertexAttrib3dvARB,layer);
    _getProcAddress( driver_glVertexAttrib3fARB, glVertexAttrib3fARB, "glVertexAttrib3fARB" );
    if( driver_glVertexAttrib3fARB == NULL ) {
      driver_glVertexAttrib3fARB = missing_glVertexAttrib3fARB;
    }
    dt.glVertexAttrib3fARB = MakeRegalProc(loader_glVertexAttrib3fARB,layer);
    _getProcAddress( driver_glVertexAttrib3fvARB, glVertexAttrib3fvARB, "glVertexAttrib3fvARB" );
    if( driver_glVertexAttrib3fvARB == NULL ) {
      driver_glVertexAttrib3fvARB = missing_glVertexAttrib3fvARB;
    }
    dt.glVertexAttrib3fvARB = MakeRegalProc(loader_glVertexAttrib3fvARB,layer);
    _getProcAddress( driver_glVertexAttrib3sARB, glVertexAttrib3sARB, "glVertexAttrib3sARB" );
    if( driver_glVertexAttrib3sARB == NULL ) {
      driver_glVertexAttrib3sARB = missing_glVertexAttrib3sARB;
    }
    dt.glVertexAttrib3sARB = MakeRegalProc(loader_glVertexAttrib3sARB,layer);
    _getProcAddress( driver_glVertexAttrib3svARB, glVertexAttrib3svARB, "glVertexAttrib3svARB" );
    if( driver_glVertexAttrib3svARB == NULL ) {
      driver_glVertexAttrib3svARB = missing_glVertexAttrib3svARB;
    }
    dt.glVertexAttrib3svARB = MakeRegalProc(loader_glVertexAttrib3svARB,layer);
    _getProcAddress( driver_glVertexAttrib4NbvARB, glVertexAttrib4NbvARB, "glVertexAttrib4NbvARB" );
    if( driver_glVertexAttrib4NbvARB == NULL ) {
      driver_glVertexAttrib4NbvARB = missing_glVertexAttrib4NbvARB;
    }
    dt.glVertexAttrib4NbvARB = MakeRegalProc(loader_glVertexAttrib4NbvARB,layer);
    _getProcAddress( driver_glVertexAttrib4NivARB, glVertexAttrib4NivARB, "glVertexAttrib4NivARB" );
    if( driver_glVertexAttrib4NivARB == NULL ) {
      driver_glVertexAttrib4NivARB = missing_glVertexAttrib4NivARB;
    }
    dt.glVertexAttrib4NivARB = MakeRegalProc(loader_glVertexAttrib4NivARB,layer);
    _getProcAddress( driver_glVertexAttrib4NsvARB, glVertexAttrib4NsvARB, "glVertexAttrib4NsvARB" );
    if( driver_glVertexAttrib4NsvARB == NULL ) {
      driver_glVertexAttrib4NsvARB = missing_glVertexAttrib4NsvARB;
    }
    dt.glVertexAttrib4NsvARB = MakeRegalProc(loader_glVertexAttrib4NsvARB,layer);
    _getProcAddress( driver_glVertexAttrib4NubARB, glVertexAttrib4NubARB, "glVertexAttrib4NubARB" );
    if( driver_glVertexAttrib4NubARB == NULL ) {
      driver_glVertexAttrib4NubARB = missing_glVertexAttrib4NubARB;
    }
    dt.glVertexAttrib4NubARB = MakeRegalProc(loader_glVertexAttrib4NubARB,layer);
    _getProcAddress( driver_glVertexAttrib4NubvARB, glVertexAttrib4NubvARB, "glVertexAttrib4NubvARB" );
    if( driver_glVertexAttrib4NubvARB == NULL ) {
      driver_glVertexAttrib4NubvARB = missing_glVertexAttrib4NubvARB;
    }
    dt.glVertexAttrib4NubvARB = MakeRegalProc(loader_glVertexAttrib4NubvARB,layer);
    _getProcAddress( driver_glVertexAttrib4NuivARB, glVertexAttrib4NuivARB, "glVertexAttrib4NuivARB" );
    if( driver_glVertexAttrib4NuivARB == NULL ) {
      driver_glVertexAttrib4NuivARB = missing_glVertexAttrib4NuivARB;
    }
    dt.glVertexAttrib4NuivARB = MakeRegalProc(loader_glVertexAttrib4NuivARB,layer);
    _getProcAddress( driver_glVertexAttrib4NusvARB, glVertexAttrib4NusvARB, "glVertexAttrib4NusvARB" );
    if( driver_glVertexAttrib4NusvARB == NULL ) {
      driver_glVertexAttrib4NusvARB = missing_glVertexAttrib4NusvARB;
    }
    dt.glVertexAttrib4NusvARB = MakeRegalProc(loader_glVertexAttrib4NusvARB,layer);
    _getProcAddress( driver_glVertexAttrib4bvARB, glVertexAttrib4bvARB, "glVertexAttrib4bvARB" );
    if( driver_glVertexAttrib4bvARB == NULL ) {
      driver_glVertexAttrib4bvARB = missing_glVertexAttrib4bvARB;
    }
    dt.glVertexAttrib4bvARB = MakeRegalProc(loader_glVertexAttrib4bvARB,layer);
    _getProcAddress( driver_glVertexAttrib4dARB, glVertexAttrib4dARB, "glVertexAttrib4dARB" );
    if( driver_glVertexAttrib4dARB == NULL ) {
      driver_glVertexAttrib4dARB = missing_glVertexAttrib4dARB;
    }
    dt.glVertexAttrib4dARB = MakeRegalProc(loader_glVertexAttrib4dARB,layer);
    _getProcAddress( driver_glVertexAttrib4dvARB, glVertexAttrib4dvARB, "glVertexAttrib4dvARB" );
    if( driver_glVertexAttrib4dvARB == NULL ) {
      driver_glVertexAttrib4dvARB = missing_glVertexAttrib4dvARB;
    }
    dt.glVertexAttrib4dvARB = MakeRegalProc(loader_glVertexAttrib4dvARB,layer);
    _getProcAddress( driver_glVertexAttrib4fARB, glVertexAttrib4fARB, "glVertexAttrib4fARB" );
    if( driver_glVertexAttrib4fARB == NULL ) {
      driver_glVertexAttrib4fARB = missing_glVertexAttrib4fARB;
    }
    dt.glVertexAttrib4fARB = MakeRegalProc(loader_glVertexAttrib4fARB,layer);
    _getProcAddress( driver_glVertexAttrib4fvARB, glVertexAttrib4fvARB, "glVertexAttrib4fvARB" );
    if( driver_glVertexAttrib4fvARB == NULL ) {
      driver_glVertexAttrib4fvARB = missing_glVertexAttrib4fvARB;
    }
    dt.glVertexAttrib4fvARB = MakeRegalProc(loader_glVertexAttrib4fvARB,layer);
    _getProcAddress( driver_glVertexAttrib4ivARB, glVertexAttrib4ivARB, "glVertexAttrib4ivARB" );
    if( driver_glVertexAttrib4ivARB == NULL ) {
      driver_glVertexAttrib4ivARB = missing_glVertexAttrib4ivARB;
    }
    dt.glVertexAttrib4ivARB = MakeRegalProc(loader_glVertexAttrib4ivARB,layer);
    _getProcAddress( driver_glVertexAttrib4sARB, glVertexAttrib4sARB, "glVertexAttrib4sARB" );
    if( driver_glVertexAttrib4sARB == NULL ) {
      driver_glVertexAttrib4sARB = missing_glVertexAttrib4sARB;
    }
    dt.glVertexAttrib4sARB = MakeRegalProc(loader_glVertexAttrib4sARB,layer);
    _getProcAddress( driver_glVertexAttrib4svARB, glVertexAttrib4svARB, "glVertexAttrib4svARB" );
    if( driver_glVertexAttrib4svARB == NULL ) {
      driver_glVertexAttrib4svARB = missing_glVertexAttrib4svARB;
    }
    dt.glVertexAttrib4svARB = MakeRegalProc(loader_glVertexAttrib4svARB,layer);
    _getProcAddress( driver_glVertexAttrib4ubvARB, glVertexAttrib4ubvARB, "glVertexAttrib4ubvARB" );
    if( driver_glVertexAttrib4ubvARB == NULL ) {
      driver_glVertexAttrib4ubvARB = missing_glVertexAttrib4ubvARB;
    }
    dt.glVertexAttrib4ubvARB = MakeRegalProc(loader_glVertexAttrib4ubvARB,layer);
    _getProcAddress( driver_glVertexAttrib4uivARB, glVertexAttrib4uivARB, "glVertexAttrib4uivARB" );
    if( driver_glVertexAttrib4uivARB == NULL ) {
      driver_glVertexAttrib4uivARB = missing_glVertexAttrib4uivARB;
    }
    dt.glVertexAttrib4uivARB = MakeRegalProc(loader_glVertexAttrib4uivARB,layer);
    _getProcAddress( driver_glVertexAttrib4usvARB, glVertexAttrib4usvARB, "glVertexAttrib4usvARB" );
    if( driver_glVertexAttrib4usvARB == NULL ) {
      driver_glVertexAttrib4usvARB = missing_glVertexAttrib4usvARB;
    }
    dt.glVertexAttrib4usvARB = MakeRegalProc(loader_glVertexAttrib4usvARB,layer);
    _getProcAddress( driver_glVertexAttribPointerARB, glVertexAttribPointerARB, "glVertexAttribPointerARB" );
    if( driver_glVertexAttribPointerARB == NULL ) {
      driver_glVertexAttribPointerARB = missing_glVertexAttribPointerARB;
    }
    dt.glVertexAttribPointerARB = MakeRegalProc(loader_glVertexAttribPointerARB,layer);

    // GL_ARB_vertex_shader

    _getProcAddress( driver_glBindAttribLocationARB, glBindAttribLocationARB, "glBindAttribLocationARB" );
    if( driver_glBindAttribLocationARB == NULL ) {
      driver_glBindAttribLocationARB = missing_glBindAttribLocationARB;
    }
    dt.glBindAttribLocationARB = MakeRegalProc(loader_glBindAttribLocationARB,layer);
    _getProcAddress( driver_glGetActiveAttribARB, glGetActiveAttribARB, "glGetActiveAttribARB" );
    if( driver_glGetActiveAttribARB == NULL ) {
      driver_glGetActiveAttribARB = missing_glGetActiveAttribARB;
    }
    dt.glGetActiveAttribARB = MakeRegalProc(loader_glGetActiveAttribARB,layer);
    _getProcAddress( driver_glGetAttribLocationARB, glGetAttribLocationARB, "glGetAttribLocationARB" );
    if( driver_glGetAttribLocationARB == NULL ) {
      driver_glGetAttribLocationARB = missing_glGetAttribLocationARB;
    }
    dt.glGetAttribLocationARB = MakeRegalProc(loader_glGetAttribLocationARB,layer);

    // GL_ARB_vertex_type_2_10_10_10_rev

    _getProcAddress( driver_glColorP3ui, glColorP3ui, "glColorP3ui" );
    if( driver_glColorP3ui == NULL ) {
      driver_glColorP3ui = missing_glColorP3ui;
    }
    dt.glColorP3ui = MakeRegalProc(loader_glColorP3ui,layer);
    _getProcAddress( driver_glColorP3uiv, glColorP3uiv, "glColorP3uiv" );
    if( driver_glColorP3uiv == NULL ) {
      driver_glColorP3uiv = missing_glColorP3uiv;
    }
    dt.glColorP3uiv = MakeRegalProc(loader_glColorP3uiv,layer);
    _getProcAddress( driver_glColorP4ui, glColorP4ui, "glColorP4ui" );
    if( driver_glColorP4ui == NULL ) {
      driver_glColorP4ui = missing_glColorP4ui;
    }
    dt.glColorP4ui = MakeRegalProc(loader_glColorP4ui,layer);
    _getProcAddress( driver_glColorP4uiv, glColorP4uiv, "glColorP4uiv" );
    if( driver_glColorP4uiv == NULL ) {
      driver_glColorP4uiv = missing_glColorP4uiv;
    }
    dt.glColorP4uiv = MakeRegalProc(loader_glColorP4uiv,layer);
    _getProcAddress( driver_glMultiTexCoordP1ui, glMultiTexCoordP1ui, "glMultiTexCoordP1ui" );
    if( driver_glMultiTexCoordP1ui == NULL ) {
      driver_glMultiTexCoordP1ui = missing_glMultiTexCoordP1ui;
    }
    dt.glMultiTexCoordP1ui = MakeRegalProc(loader_glMultiTexCoordP1ui,layer);
    _getProcAddress( driver_glMultiTexCoordP1uiv, glMultiTexCoordP1uiv, "glMultiTexCoordP1uiv" );
    if( driver_glMultiTexCoordP1uiv == NULL ) {
      driver_glMultiTexCoordP1uiv = missing_glMultiTexCoordP1uiv;
    }
    dt.glMultiTexCoordP1uiv = MakeRegalProc(loader_glMultiTexCoordP1uiv,layer);
    _getProcAddress( driver_glMultiTexCoordP2ui, glMultiTexCoordP2ui, "glMultiTexCoordP2ui" );
    if( driver_glMultiTexCoordP2ui == NULL ) {
      driver_glMultiTexCoordP2ui = missing_glMultiTexCoordP2ui;
    }
    dt.glMultiTexCoordP2ui = MakeRegalProc(loader_glMultiTexCoordP2ui,layer);
    _getProcAddress( driver_glMultiTexCoordP2uiv, glMultiTexCoordP2uiv, "glMultiTexCoordP2uiv" );
    if( driver_glMultiTexCoordP2uiv == NULL ) {
      driver_glMultiTexCoordP2uiv = missing_glMultiTexCoordP2uiv;
    }
    dt.glMultiTexCoordP2uiv = MakeRegalProc(loader_glMultiTexCoordP2uiv,layer);
    _getProcAddress( driver_glMultiTexCoordP3ui, glMultiTexCoordP3ui, "glMultiTexCoordP3ui" );
    if( driver_glMultiTexCoordP3ui == NULL ) {
      driver_glMultiTexCoordP3ui = missing_glMultiTexCoordP3ui;
    }
    dt.glMultiTexCoordP3ui = MakeRegalProc(loader_glMultiTexCoordP3ui,layer);
    _getProcAddress( driver_glMultiTexCoordP3uiv, glMultiTexCoordP3uiv, "glMultiTexCoordP3uiv" );
    if( driver_glMultiTexCoordP3uiv == NULL ) {
      driver_glMultiTexCoordP3uiv = missing_glMultiTexCoordP3uiv;
    }
    dt.glMultiTexCoordP3uiv = MakeRegalProc(loader_glMultiTexCoordP3uiv,layer);
    _getProcAddress( driver_glMultiTexCoordP4ui, glMultiTexCoordP4ui, "glMultiTexCoordP4ui" );
    if( driver_glMultiTexCoordP4ui == NULL ) {
      driver_glMultiTexCoordP4ui = missing_glMultiTexCoordP4ui;
    }
    dt.glMultiTexCoordP4ui = MakeRegalProc(loader_glMultiTexCoordP4ui,layer);
    _getProcAddress( driver_glMultiTexCoordP4uiv, glMultiTexCoordP4uiv, "glMultiTexCoordP4uiv" );
    if( driver_glMultiTexCoordP4uiv == NULL ) {
      driver_glMultiTexCoordP4uiv = missing_glMultiTexCoordP4uiv;
    }
    dt.glMultiTexCoordP4uiv = MakeRegalProc(loader_glMultiTexCoordP4uiv,layer);
    _getProcAddress( driver_glNormalP3ui, glNormalP3ui, "glNormalP3ui" );
    if( driver_glNormalP3ui == NULL ) {
      driver_glNormalP3ui = missing_glNormalP3ui;
    }
    dt.glNormalP3ui = MakeRegalProc(loader_glNormalP3ui,layer);
    _getProcAddress( driver_glNormalP3uiv, glNormalP3uiv, "glNormalP3uiv" );
    if( driver_glNormalP3uiv == NULL ) {
      driver_glNormalP3uiv = missing_glNormalP3uiv;
    }
    dt.glNormalP3uiv = MakeRegalProc(loader_glNormalP3uiv,layer);
    _getProcAddress( driver_glSecondaryColorP3ui, glSecondaryColorP3ui, "glSecondaryColorP3ui" );
    if( driver_glSecondaryColorP3ui == NULL ) {
      driver_glSecondaryColorP3ui = missing_glSecondaryColorP3ui;
    }
    dt.glSecondaryColorP3ui = MakeRegalProc(loader_glSecondaryColorP3ui,layer);
    _getProcAddress( driver_glSecondaryColorP3uiv, glSecondaryColorP3uiv, "glSecondaryColorP3uiv" );
    if( driver_glSecondaryColorP3uiv == NULL ) {
      driver_glSecondaryColorP3uiv = missing_glSecondaryColorP3uiv;
    }
    dt.glSecondaryColorP3uiv = MakeRegalProc(loader_glSecondaryColorP3uiv,layer);
    _getProcAddress( driver_glTexCoordP1ui, glTexCoordP1ui, "glTexCoordP1ui" );
    if( driver_glTexCoordP1ui == NULL ) {
      driver_glTexCoordP1ui = missing_glTexCoordP1ui;
    }
    dt.glTexCoordP1ui = MakeRegalProc(loader_glTexCoordP1ui,layer);
    _getProcAddress( driver_glTexCoordP1uiv, glTexCoordP1uiv, "glTexCoordP1uiv" );
    if( driver_glTexCoordP1uiv == NULL ) {
      driver_glTexCoordP1uiv = missing_glTexCoordP1uiv;
    }
    dt.glTexCoordP1uiv = MakeRegalProc(loader_glTexCoordP1uiv,layer);
    _getProcAddress( driver_glTexCoordP2ui, glTexCoordP2ui, "glTexCoordP2ui" );
    if( driver_glTexCoordP2ui == NULL ) {
      driver_glTexCoordP2ui = missing_glTexCoordP2ui;
    }
    dt.glTexCoordP2ui = MakeRegalProc(loader_glTexCoordP2ui,layer);
    _getProcAddress( driver_glTexCoordP2uiv, glTexCoordP2uiv, "glTexCoordP2uiv" );
    if( driver_glTexCoordP2uiv == NULL ) {
      driver_glTexCoordP2uiv = missing_glTexCoordP2uiv;
    }
    dt.glTexCoordP2uiv = MakeRegalProc(loader_glTexCoordP2uiv,layer);
    _getProcAddress( driver_glTexCoordP3ui, glTexCoordP3ui, "glTexCoordP3ui" );
    if( driver_glTexCoordP3ui == NULL ) {
      driver_glTexCoordP3ui = missing_glTexCoordP3ui;
    }
    dt.glTexCoordP3ui = MakeRegalProc(loader_glTexCoordP3ui,layer);
    _getProcAddress( driver_glTexCoordP3uiv, glTexCoordP3uiv, "glTexCoordP3uiv" );
    if( driver_glTexCoordP3uiv == NULL ) {
      driver_glTexCoordP3uiv = missing_glTexCoordP3uiv;
    }
    dt.glTexCoordP3uiv = MakeRegalProc(loader_glTexCoordP3uiv,layer);
    _getProcAddress( driver_glTexCoordP4ui, glTexCoordP4ui, "glTexCoordP4ui" );
    if( driver_glTexCoordP4ui == NULL ) {
      driver_glTexCoordP4ui = missing_glTexCoordP4ui;
    }
    dt.glTexCoordP4ui = MakeRegalProc(loader_glTexCoordP4ui,layer);
    _getProcAddress( driver_glTexCoordP4uiv, glTexCoordP4uiv, "glTexCoordP4uiv" );
    if( driver_glTexCoordP4uiv == NULL ) {
      driver_glTexCoordP4uiv = missing_glTexCoordP4uiv;
    }
    dt.glTexCoordP4uiv = MakeRegalProc(loader_glTexCoordP4uiv,layer);
    _getProcAddress( driver_glVertexAttribP1ui, glVertexAttribP1ui, "glVertexAttribP1ui" );
    if( driver_glVertexAttribP1ui == NULL ) {
      driver_glVertexAttribP1ui = missing_glVertexAttribP1ui;
    }
    dt.glVertexAttribP1ui = MakeRegalProc(loader_glVertexAttribP1ui,layer);
    _getProcAddress( driver_glVertexAttribP1uiv, glVertexAttribP1uiv, "glVertexAttribP1uiv" );
    if( driver_glVertexAttribP1uiv == NULL ) {
      driver_glVertexAttribP1uiv = missing_glVertexAttribP1uiv;
    }
    dt.glVertexAttribP1uiv = MakeRegalProc(loader_glVertexAttribP1uiv,layer);
    _getProcAddress( driver_glVertexAttribP2ui, glVertexAttribP2ui, "glVertexAttribP2ui" );
    if( driver_glVertexAttribP2ui == NULL ) {
      driver_glVertexAttribP2ui = missing_glVertexAttribP2ui;
    }
    dt.glVertexAttribP2ui = MakeRegalProc(loader_glVertexAttribP2ui,layer);
    _getProcAddress( driver_glVertexAttribP2uiv, glVertexAttribP2uiv, "glVertexAttribP2uiv" );
    if( driver_glVertexAttribP2uiv == NULL ) {
      driver_glVertexAttribP2uiv = missing_glVertexAttribP2uiv;
    }
    dt.glVertexAttribP2uiv = MakeRegalProc(loader_glVertexAttribP2uiv,layer);
    _getProcAddress( driver_glVertexAttribP3ui, glVertexAttribP3ui, "glVertexAttribP3ui" );
    if( driver_glVertexAttribP3ui == NULL ) {
      driver_glVertexAttribP3ui = missing_glVertexAttribP3ui;
    }
    dt.glVertexAttribP3ui = MakeRegalProc(loader_glVertexAttribP3ui,layer);
    _getProcAddress( driver_glVertexAttribP3uiv, glVertexAttribP3uiv, "glVertexAttribP3uiv" );
    if( driver_glVertexAttribP3uiv == NULL ) {
      driver_glVertexAttribP3uiv = missing_glVertexAttribP3uiv;
    }
    dt.glVertexAttribP3uiv = MakeRegalProc(loader_glVertexAttribP3uiv,layer);
    _getProcAddress( driver_glVertexAttribP4ui, glVertexAttribP4ui, "glVertexAttribP4ui" );
    if( driver_glVertexAttribP4ui == NULL ) {
      driver_glVertexAttribP4ui = missing_glVertexAttribP4ui;
    }
    dt.glVertexAttribP4ui = MakeRegalProc(loader_glVertexAttribP4ui,layer);
    _getProcAddress( driver_glVertexAttribP4uiv, glVertexAttribP4uiv, "glVertexAttribP4uiv" );
    if( driver_glVertexAttribP4uiv == NULL ) {
      driver_glVertexAttribP4uiv = missing_glVertexAttribP4uiv;
    }
    dt.glVertexAttribP4uiv = MakeRegalProc(loader_glVertexAttribP4uiv,layer);
    _getProcAddress( driver_glVertexP2ui, glVertexP2ui, "glVertexP2ui" );
    if( driver_glVertexP2ui == NULL ) {
      driver_glVertexP2ui = missing_glVertexP2ui;
    }
    dt.glVertexP2ui = MakeRegalProc(loader_glVertexP2ui,layer);
    _getProcAddress( driver_glVertexP2uiv, glVertexP2uiv, "glVertexP2uiv" );
    if( driver_glVertexP2uiv == NULL ) {
      driver_glVertexP2uiv = missing_glVertexP2uiv;
    }
    dt.glVertexP2uiv = MakeRegalProc(loader_glVertexP2uiv,layer);
    _getProcAddress( driver_glVertexP3ui, glVertexP3ui, "glVertexP3ui" );
    if( driver_glVertexP3ui == NULL ) {
      driver_glVertexP3ui = missing_glVertexP3ui;
    }
    dt.glVertexP3ui = MakeRegalProc(loader_glVertexP3ui,layer);
    _getProcAddress( driver_glVertexP3uiv, glVertexP3uiv, "glVertexP3uiv" );
    if( driver_glVertexP3uiv == NULL ) {
      driver_glVertexP3uiv = missing_glVertexP3uiv;
    }
    dt.glVertexP3uiv = MakeRegalProc(loader_glVertexP3uiv,layer);
    _getProcAddress( driver_glVertexP4ui, glVertexP4ui, "glVertexP4ui" );
    if( driver_glVertexP4ui == NULL ) {
      driver_glVertexP4ui = missing_glVertexP4ui;
    }
    dt.glVertexP4ui = MakeRegalProc(loader_glVertexP4ui,layer);
    _getProcAddress( driver_glVertexP4uiv, glVertexP4uiv, "glVertexP4uiv" );
    if( driver_glVertexP4uiv == NULL ) {
      driver_glVertexP4uiv = missing_glVertexP4uiv;
    }
    dt.glVertexP4uiv = MakeRegalProc(loader_glVertexP4uiv,layer);

    // GL_ARB_viewport_array

    _getProcAddress( driver_glDepthRangeArrayv, glDepthRangeArrayv, "glDepthRangeArrayv" );
    if( driver_glDepthRangeArrayv == NULL ) {
      driver_glDepthRangeArrayv = missing_glDepthRangeArrayv;
    }
    dt.glDepthRangeArrayv = MakeRegalProc(loader_glDepthRangeArrayv,layer);
    _getProcAddress( driver_glDepthRangeIndexed, glDepthRangeIndexed, "glDepthRangeIndexed" );
    if( driver_glDepthRangeIndexed == NULL ) {
      driver_glDepthRangeIndexed = missing_glDepthRangeIndexed;
    }
    dt.glDepthRangeIndexed = MakeRegalProc(loader_glDepthRangeIndexed,layer);
    _getProcAddress( driver_glGetDoublei_v, glGetDoublei_v, "glGetDoublei_v" );
    if( driver_glGetDoublei_v == NULL ) {
      driver_glGetDoublei_v = missing_glGetDoublei_v;
    }
    dt.glGetDoublei_v = MakeRegalProc(loader_glGetDoublei_v,layer);
    _getProcAddress( driver_glGetFloati_v, glGetFloati_v, "glGetFloati_v" );
    if( driver_glGetFloati_v == NULL ) {
      driver_glGetFloati_v = missing_glGetFloati_v;
    }
    dt.glGetFloati_v = MakeRegalProc(loader_glGetFloati_v,layer);
    _getProcAddress( driver_glScissorArrayv, glScissorArrayv, "glScissorArrayv" );
    if( driver_glScissorArrayv == NULL ) {
      driver_glScissorArrayv = missing_glScissorArrayv;
    }
    dt.glScissorArrayv = MakeRegalProc(loader_glScissorArrayv,layer);
    _getProcAddress( driver_glScissorIndexed, glScissorIndexed, "glScissorIndexed" );
    if( driver_glScissorIndexed == NULL ) {
      driver_glScissorIndexed = missing_glScissorIndexed;
    }
    dt.glScissorIndexed = MakeRegalProc(loader_glScissorIndexed,layer);
    _getProcAddress( driver_glScissorIndexedv, glScissorIndexedv, "glScissorIndexedv" );
    if( driver_glScissorIndexedv == NULL ) {
      driver_glScissorIndexedv = missing_glScissorIndexedv;
    }
    dt.glScissorIndexedv = MakeRegalProc(loader_glScissorIndexedv,layer);
    _getProcAddress( driver_glViewportArrayv, glViewportArrayv, "glViewportArrayv" );
    if( driver_glViewportArrayv == NULL ) {
      driver_glViewportArrayv = missing_glViewportArrayv;
    }
    dt.glViewportArrayv = MakeRegalProc(loader_glViewportArrayv,layer);
    _getProcAddress( driver_glViewportIndexedf, glViewportIndexedf, "glViewportIndexedf" );
    if( driver_glViewportIndexedf == NULL ) {
      driver_glViewportIndexedf = missing_glViewportIndexedf;
    }
    dt.glViewportIndexedf = MakeRegalProc(loader_glViewportIndexedf,layer);
    _getProcAddress( driver_glViewportIndexedfv, glViewportIndexedfv, "glViewportIndexedfv" );
    if( driver_glViewportIndexedfv == NULL ) {
      driver_glViewportIndexedfv = missing_glViewportIndexedfv;
    }
    dt.glViewportIndexedfv = MakeRegalProc(loader_glViewportIndexedfv,layer);

    // GL_ARB_window_pos

    _getProcAddress( driver_glWindowPos2dARB, glWindowPos2dARB, "glWindowPos2dARB" );
    if( driver_glWindowPos2dARB == NULL ) {
      driver_glWindowPos2dARB = missing_glWindowPos2dARB;
    }
    dt.glWindowPos2dARB = MakeRegalProc(loader_glWindowPos2dARB,layer);
    _getProcAddress( driver_glWindowPos2dvARB, glWindowPos2dvARB, "glWindowPos2dvARB" );
    if( driver_glWindowPos2dvARB == NULL ) {
      driver_glWindowPos2dvARB = missing_glWindowPos2dvARB;
    }
    dt.glWindowPos2dvARB = MakeRegalProc(loader_glWindowPos2dvARB,layer);
    _getProcAddress( driver_glWindowPos2fARB, glWindowPos2fARB, "glWindowPos2fARB" );
    if( driver_glWindowPos2fARB == NULL ) {
      driver_glWindowPos2fARB = missing_glWindowPos2fARB;
    }
    dt.glWindowPos2fARB = MakeRegalProc(loader_glWindowPos2fARB,layer);
    _getProcAddress( driver_glWindowPos2fvARB, glWindowPos2fvARB, "glWindowPos2fvARB" );
    if( driver_glWindowPos2fvARB == NULL ) {
      driver_glWindowPos2fvARB = missing_glWindowPos2fvARB;
    }
    dt.glWindowPos2fvARB = MakeRegalProc(loader_glWindowPos2fvARB,layer);
    _getProcAddress( driver_glWindowPos2iARB, glWindowPos2iARB, "glWindowPos2iARB" );
    if( driver_glWindowPos2iARB == NULL ) {
      driver_glWindowPos2iARB = missing_glWindowPos2iARB;
    }
    dt.glWindowPos2iARB = MakeRegalProc(loader_glWindowPos2iARB,layer);
    _getProcAddress( driver_glWindowPos2ivARB, glWindowPos2ivARB, "glWindowPos2ivARB" );
    if( driver_glWindowPos2ivARB == NULL ) {
      driver_glWindowPos2ivARB = missing_glWindowPos2ivARB;
    }
    dt.glWindowPos2ivARB = MakeRegalProc(loader_glWindowPos2ivARB,layer);
    _getProcAddress( driver_glWindowPos2sARB, glWindowPos2sARB, "glWindowPos2sARB" );
    if( driver_glWindowPos2sARB == NULL ) {
      driver_glWindowPos2sARB = missing_glWindowPos2sARB;
    }
    dt.glWindowPos2sARB = MakeRegalProc(loader_glWindowPos2sARB,layer);
    _getProcAddress( driver_glWindowPos2svARB, glWindowPos2svARB, "glWindowPos2svARB" );
    if( driver_glWindowPos2svARB == NULL ) {
      driver_glWindowPos2svARB = missing_glWindowPos2svARB;
    }
    dt.glWindowPos2svARB = MakeRegalProc(loader_glWindowPos2svARB,layer);
    _getProcAddress( driver_glWindowPos3dARB, glWindowPos3dARB, "glWindowPos3dARB" );
    if( driver_glWindowPos3dARB == NULL ) {
      driver_glWindowPos3dARB = missing_glWindowPos3dARB;
    }
    dt.glWindowPos3dARB = MakeRegalProc(loader_glWindowPos3dARB,layer);
    _getProcAddress( driver_glWindowPos3dvARB, glWindowPos3dvARB, "glWindowPos3dvARB" );
    if( driver_glWindowPos3dvARB == NULL ) {
      driver_glWindowPos3dvARB = missing_glWindowPos3dvARB;
    }
    dt.glWindowPos3dvARB = MakeRegalProc(loader_glWindowPos3dvARB,layer);
    _getProcAddress( driver_glWindowPos3fARB, glWindowPos3fARB, "glWindowPos3fARB" );
    if( driver_glWindowPos3fARB == NULL ) {
      driver_glWindowPos3fARB = missing_glWindowPos3fARB;
    }
    dt.glWindowPos3fARB = MakeRegalProc(loader_glWindowPos3fARB,layer);
    _getProcAddress( driver_glWindowPos3fvARB, glWindowPos3fvARB, "glWindowPos3fvARB" );
    if( driver_glWindowPos3fvARB == NULL ) {
      driver_glWindowPos3fvARB = missing_glWindowPos3fvARB;
    }
    dt.glWindowPos3fvARB = MakeRegalProc(loader_glWindowPos3fvARB,layer);
    _getProcAddress( driver_glWindowPos3iARB, glWindowPos3iARB, "glWindowPos3iARB" );
    if( driver_glWindowPos3iARB == NULL ) {
      driver_glWindowPos3iARB = missing_glWindowPos3iARB;
    }
    dt.glWindowPos3iARB = MakeRegalProc(loader_glWindowPos3iARB,layer);
    _getProcAddress( driver_glWindowPos3ivARB, glWindowPos3ivARB, "glWindowPos3ivARB" );
    if( driver_glWindowPos3ivARB == NULL ) {
      driver_glWindowPos3ivARB = missing_glWindowPos3ivARB;
    }
    dt.glWindowPos3ivARB = MakeRegalProc(loader_glWindowPos3ivARB,layer);
    _getProcAddress( driver_glWindowPos3sARB, glWindowPos3sARB, "glWindowPos3sARB" );
    if( driver_glWindowPos3sARB == NULL ) {
      driver_glWindowPos3sARB = missing_glWindowPos3sARB;
    }
    dt.glWindowPos3sARB = MakeRegalProc(loader_glWindowPos3sARB,layer);
    _getProcAddress( driver_glWindowPos3svARB, glWindowPos3svARB, "glWindowPos3svARB" );
    if( driver_glWindowPos3svARB == NULL ) {
      driver_glWindowPos3svARB = missing_glWindowPos3svARB;
    }
    dt.glWindowPos3svARB = MakeRegalProc(loader_glWindowPos3svARB,layer);

    // GL_ATI_draw_buffers

    _getProcAddress( driver_glDrawBuffersATI, glDrawBuffersATI, "glDrawBuffersATI" );
    if( driver_glDrawBuffersATI == NULL ) {
      driver_glDrawBuffersATI = missing_glDrawBuffersATI;
    }
    dt.glDrawBuffersATI = MakeRegalProc(loader_glDrawBuffersATI,layer);

    // GL_ATI_element_array

    _getProcAddress( driver_glDrawElementArrayATI, glDrawElementArrayATI, "glDrawElementArrayATI" );
    if( driver_glDrawElementArrayATI == NULL ) {
      driver_glDrawElementArrayATI = missing_glDrawElementArrayATI;
    }
    dt.glDrawElementArrayATI = MakeRegalProc(loader_glDrawElementArrayATI,layer);
    _getProcAddress( driver_glDrawRangeElementArrayATI, glDrawRangeElementArrayATI, "glDrawRangeElementArrayATI" );
    if( driver_glDrawRangeElementArrayATI == NULL ) {
      driver_glDrawRangeElementArrayATI = missing_glDrawRangeElementArrayATI;
    }
    dt.glDrawRangeElementArrayATI = MakeRegalProc(loader_glDrawRangeElementArrayATI,layer);
    _getProcAddress( driver_glElementPointerATI, glElementPointerATI, "glElementPointerATI" );
    if( driver_glElementPointerATI == NULL ) {
      driver_glElementPointerATI = missing_glElementPointerATI;
    }
    dt.glElementPointerATI = MakeRegalProc(loader_glElementPointerATI,layer);

    // GL_ATI_envmap_bumpmap

    _getProcAddress( driver_glGetTexBumpParameterfvATI, glGetTexBumpParameterfvATI, "glGetTexBumpParameterfvATI" );
    if( driver_glGetTexBumpParameterfvATI == NULL ) {
      driver_glGetTexBumpParameterfvATI = missing_glGetTexBumpParameterfvATI;
    }
    dt.glGetTexBumpParameterfvATI = MakeRegalProc(loader_glGetTexBumpParameterfvATI,layer);
    _getProcAddress( driver_glGetTexBumpParameterivATI, glGetTexBumpParameterivATI, "glGetTexBumpParameterivATI" );
    if( driver_glGetTexBumpParameterivATI == NULL ) {
      driver_glGetTexBumpParameterivATI = missing_glGetTexBumpParameterivATI;
    }
    dt.glGetTexBumpParameterivATI = MakeRegalProc(loader_glGetTexBumpParameterivATI,layer);
    _getProcAddress( driver_glTexBumpParameterfvATI, glTexBumpParameterfvATI, "glTexBumpParameterfvATI" );
    if( driver_glTexBumpParameterfvATI == NULL ) {
      driver_glTexBumpParameterfvATI = missing_glTexBumpParameterfvATI;
    }
    dt.glTexBumpParameterfvATI = MakeRegalProc(loader_glTexBumpParameterfvATI,layer);
    _getProcAddress( driver_glTexBumpParameterivATI, glTexBumpParameterivATI, "glTexBumpParameterivATI" );
    if( driver_glTexBumpParameterivATI == NULL ) {
      driver_glTexBumpParameterivATI = missing_glTexBumpParameterivATI;
    }
    dt.glTexBumpParameterivATI = MakeRegalProc(loader_glTexBumpParameterivATI,layer);

    // GL_ATI_fragment_shader

    _getProcAddress( driver_glAlphaFragmentOp1ATI, glAlphaFragmentOp1ATI, "glAlphaFragmentOp1ATI" );
    if( driver_glAlphaFragmentOp1ATI == NULL ) {
      driver_glAlphaFragmentOp1ATI = missing_glAlphaFragmentOp1ATI;
    }
    dt.glAlphaFragmentOp1ATI = MakeRegalProc(loader_glAlphaFragmentOp1ATI,layer);
    _getProcAddress( driver_glAlphaFragmentOp2ATI, glAlphaFragmentOp2ATI, "glAlphaFragmentOp2ATI" );
    if( driver_glAlphaFragmentOp2ATI == NULL ) {
      driver_glAlphaFragmentOp2ATI = missing_glAlphaFragmentOp2ATI;
    }
    dt.glAlphaFragmentOp2ATI = MakeRegalProc(loader_glAlphaFragmentOp2ATI,layer);
    _getProcAddress( driver_glAlphaFragmentOp3ATI, glAlphaFragmentOp3ATI, "glAlphaFragmentOp3ATI" );
    if( driver_glAlphaFragmentOp3ATI == NULL ) {
      driver_glAlphaFragmentOp3ATI = missing_glAlphaFragmentOp3ATI;
    }
    dt.glAlphaFragmentOp3ATI = MakeRegalProc(loader_glAlphaFragmentOp3ATI,layer);
    _getProcAddress( driver_glBeginFragmentShaderATI, glBeginFragmentShaderATI, "glBeginFragmentShaderATI" );
    if( driver_glBeginFragmentShaderATI == NULL ) {
      driver_glBeginFragmentShaderATI = missing_glBeginFragmentShaderATI;
    }
    dt.glBeginFragmentShaderATI = MakeRegalProc(loader_glBeginFragmentShaderATI,layer);
    _getProcAddress( driver_glBindFragmentShaderATI, glBindFragmentShaderATI, "glBindFragmentShaderATI" );
    if( driver_glBindFragmentShaderATI == NULL ) {
      driver_glBindFragmentShaderATI = missing_glBindFragmentShaderATI;
    }
    dt.glBindFragmentShaderATI = MakeRegalProc(loader_glBindFragmentShaderATI,layer);
    _getProcAddress( driver_glColorFragmentOp1ATI, glColorFragmentOp1ATI, "glColorFragmentOp1ATI" );
    if( driver_glColorFragmentOp1ATI == NULL ) {
      driver_glColorFragmentOp1ATI = missing_glColorFragmentOp1ATI;
    }
    dt.glColorFragmentOp1ATI = MakeRegalProc(loader_glColorFragmentOp1ATI,layer);
    _getProcAddress( driver_glColorFragmentOp2ATI, glColorFragmentOp2ATI, "glColorFragmentOp2ATI" );
    if( driver_glColorFragmentOp2ATI == NULL ) {
      driver_glColorFragmentOp2ATI = missing_glColorFragmentOp2ATI;
    }
    dt.glColorFragmentOp2ATI = MakeRegalProc(loader_glColorFragmentOp2ATI,layer);
    _getProcAddress( driver_glColorFragmentOp3ATI, glColorFragmentOp3ATI, "glColorFragmentOp3ATI" );
    if( driver_glColorFragmentOp3ATI == NULL ) {
      driver_glColorFragmentOp3ATI = missing_glColorFragmentOp3ATI;
    }
    dt.glColorFragmentOp3ATI = MakeRegalProc(loader_glColorFragmentOp3ATI,layer);
    _getProcAddress( driver_glDeleteFragmentShaderATI, glDeleteFragmentShaderATI, "glDeleteFragmentShaderATI" );
    if( driver_glDeleteFragmentShaderATI == NULL ) {
      driver_glDeleteFragmentShaderATI = missing_glDeleteFragmentShaderATI;
    }
    dt.glDeleteFragmentShaderATI = MakeRegalProc(loader_glDeleteFragmentShaderATI,layer);
    _getProcAddress( driver_glEndFragmentShaderATI, glEndFragmentShaderATI, "glEndFragmentShaderATI" );
    if( driver_glEndFragmentShaderATI == NULL ) {
      driver_glEndFragmentShaderATI = missing_glEndFragmentShaderATI;
    }
    dt.glEndFragmentShaderATI = MakeRegalProc(loader_glEndFragmentShaderATI,layer);
    _getProcAddress( driver_glGenFragmentShadersATI, glGenFragmentShadersATI, "glGenFragmentShadersATI" );
    if( driver_glGenFragmentShadersATI == NULL ) {
      driver_glGenFragmentShadersATI = missing_glGenFragmentShadersATI;
    }
    dt.glGenFragmentShadersATI = MakeRegalProc(loader_glGenFragmentShadersATI,layer);
    _getProcAddress( driver_glPassTexCoordATI, glPassTexCoordATI, "glPassTexCoordATI" );
    if( driver_glPassTexCoordATI == NULL ) {
      driver_glPassTexCoordATI = missing_glPassTexCoordATI;
    }
    dt.glPassTexCoordATI = MakeRegalProc(loader_glPassTexCoordATI,layer);
    _getProcAddress( driver_glSampleMapATI, glSampleMapATI, "glSampleMapATI" );
    if( driver_glSampleMapATI == NULL ) {
      driver_glSampleMapATI = missing_glSampleMapATI;
    }
    dt.glSampleMapATI = MakeRegalProc(loader_glSampleMapATI,layer);
    _getProcAddress( driver_glSetFragmentShaderConstantATI, glSetFragmentShaderConstantATI, "glSetFragmentShaderConstantATI" );
    if( driver_glSetFragmentShaderConstantATI == NULL ) {
      driver_glSetFragmentShaderConstantATI = missing_glSetFragmentShaderConstantATI;
    }
    dt.glSetFragmentShaderConstantATI = MakeRegalProc(loader_glSetFragmentShaderConstantATI,layer);

    // GL_ATI_map_object_buffer

    _getProcAddress( driver_glMapObjectBufferATI, glMapObjectBufferATI, "glMapObjectBufferATI" );
    if( driver_glMapObjectBufferATI == NULL ) {
      driver_glMapObjectBufferATI = missing_glMapObjectBufferATI;
    }
    dt.glMapObjectBufferATI = MakeRegalProc(loader_glMapObjectBufferATI,layer);
    _getProcAddress( driver_glUnmapObjectBufferATI, glUnmapObjectBufferATI, "glUnmapObjectBufferATI" );
    if( driver_glUnmapObjectBufferATI == NULL ) {
      driver_glUnmapObjectBufferATI = missing_glUnmapObjectBufferATI;
    }
    dt.glUnmapObjectBufferATI = MakeRegalProc(loader_glUnmapObjectBufferATI,layer);

    // GL_ATI_pn_triangles

    _getProcAddress( driver_glPNTrianglesfATI, glPNTrianglesfATI, "glPNTrianglesfATI" );
    if( driver_glPNTrianglesfATI == NULL ) {
      driver_glPNTrianglesfATI = missing_glPNTrianglesfATI;
    }
    dt.glPNTrianglesfATI = MakeRegalProc(loader_glPNTrianglesfATI,layer);
    _getProcAddress( driver_glPNTrianglesiATI, glPNTrianglesiATI, "glPNTrianglesiATI" );
    if( driver_glPNTrianglesiATI == NULL ) {
      driver_glPNTrianglesiATI = missing_glPNTrianglesiATI;
    }
    dt.glPNTrianglesiATI = MakeRegalProc(loader_glPNTrianglesiATI,layer);

    // GL_ATI_separate_stencil

    _getProcAddress( driver_glStencilFuncSeparateATI, glStencilFuncSeparateATI, "glStencilFuncSeparateATI" );
    if( driver_glStencilFuncSeparateATI == NULL ) {
      driver_glStencilFuncSeparateATI = missing_glStencilFuncSeparateATI;
    }
    dt.glStencilFuncSeparateATI = MakeRegalProc(loader_glStencilFuncSeparateATI,layer);
    _getProcAddress( driver_glStencilOpSeparateATI, glStencilOpSeparateATI, "glStencilOpSeparateATI" );
    if( driver_glStencilOpSeparateATI == NULL ) {
      driver_glStencilOpSeparateATI = missing_glStencilOpSeparateATI;
    }
    dt.glStencilOpSeparateATI = MakeRegalProc(loader_glStencilOpSeparateATI,layer);

    // GL_ATI_vertex_array_object

    _getProcAddress( driver_glArrayObjectATI, glArrayObjectATI, "glArrayObjectATI" );
    if( driver_glArrayObjectATI == NULL ) {
      driver_glArrayObjectATI = missing_glArrayObjectATI;
    }
    dt.glArrayObjectATI = MakeRegalProc(loader_glArrayObjectATI,layer);
    _getProcAddress( driver_glFreeObjectBufferATI, glFreeObjectBufferATI, "glFreeObjectBufferATI" );
    if( driver_glFreeObjectBufferATI == NULL ) {
      driver_glFreeObjectBufferATI = missing_glFreeObjectBufferATI;
    }
    dt.glFreeObjectBufferATI = MakeRegalProc(loader_glFreeObjectBufferATI,layer);
    _getProcAddress( driver_glGetArrayObjectfvATI, glGetArrayObjectfvATI, "glGetArrayObjectfvATI" );
    if( driver_glGetArrayObjectfvATI == NULL ) {
      driver_glGetArrayObjectfvATI = missing_glGetArrayObjectfvATI;
    }
    dt.glGetArrayObjectfvATI = MakeRegalProc(loader_glGetArrayObjectfvATI,layer);
    _getProcAddress( driver_glGetArrayObjectivATI, glGetArrayObjectivATI, "glGetArrayObjectivATI" );
    if( driver_glGetArrayObjectivATI == NULL ) {
      driver_glGetArrayObjectivATI = missing_glGetArrayObjectivATI;
    }
    dt.glGetArrayObjectivATI = MakeRegalProc(loader_glGetArrayObjectivATI,layer);
    _getProcAddress( driver_glGetObjectBufferfvATI, glGetObjectBufferfvATI, "glGetObjectBufferfvATI" );
    if( driver_glGetObjectBufferfvATI == NULL ) {
      driver_glGetObjectBufferfvATI = missing_glGetObjectBufferfvATI;
    }
    dt.glGetObjectBufferfvATI = MakeRegalProc(loader_glGetObjectBufferfvATI,layer);
    _getProcAddress( driver_glGetObjectBufferivATI, glGetObjectBufferivATI, "glGetObjectBufferivATI" );
    if( driver_glGetObjectBufferivATI == NULL ) {
      driver_glGetObjectBufferivATI = missing_glGetObjectBufferivATI;
    }
    dt.glGetObjectBufferivATI = MakeRegalProc(loader_glGetObjectBufferivATI,layer);
    _getProcAddress( driver_glGetVariantArrayObjectfvATI, glGetVariantArrayObjectfvATI, "glGetVariantArrayObjectfvATI" );
    if( driver_glGetVariantArrayObjectfvATI == NULL ) {
      driver_glGetVariantArrayObjectfvATI = missing_glGetVariantArrayObjectfvATI;
    }
    dt.glGetVariantArrayObjectfvATI = MakeRegalProc(loader_glGetVariantArrayObjectfvATI,layer);
    _getProcAddress( driver_glGetVariantArrayObjectivATI, glGetVariantArrayObjectivATI, "glGetVariantArrayObjectivATI" );
    if( driver_glGetVariantArrayObjectivATI == NULL ) {
      driver_glGetVariantArrayObjectivATI = missing_glGetVariantArrayObjectivATI;
    }
    dt.glGetVariantArrayObjectivATI = MakeRegalProc(loader_glGetVariantArrayObjectivATI,layer);
    _getProcAddress( driver_glIsObjectBufferATI, glIsObjectBufferATI, "glIsObjectBufferATI" );
    if( driver_glIsObjectBufferATI == NULL ) {
      driver_glIsObjectBufferATI = missing_glIsObjectBufferATI;
    }
    dt.glIsObjectBufferATI = MakeRegalProc(loader_glIsObjectBufferATI,layer);
    _getProcAddress( driver_glNewObjectBufferATI, glNewObjectBufferATI, "glNewObjectBufferATI" );
    if( driver_glNewObjectBufferATI == NULL ) {
      driver_glNewObjectBufferATI = missing_glNewObjectBufferATI;
    }
    dt.glNewObjectBufferATI = MakeRegalProc(loader_glNewObjectBufferATI,layer);
    _getProcAddress( driver_glUpdateObjectBufferATI, glUpdateObjectBufferATI, "glUpdateObjectBufferATI" );
    if( driver_glUpdateObjectBufferATI == NULL ) {
      driver_glUpdateObjectBufferATI = missing_glUpdateObjectBufferATI;
    }
    dt.glUpdateObjectBufferATI = MakeRegalProc(loader_glUpdateObjectBufferATI,layer);
    _getProcAddress( driver_glVariantArrayObjectATI, glVariantArrayObjectATI, "glVariantArrayObjectATI" );
    if( driver_glVariantArrayObjectATI == NULL ) {
      driver_glVariantArrayObjectATI = missing_glVariantArrayObjectATI;
    }
    dt.glVariantArrayObjectATI = MakeRegalProc(loader_glVariantArrayObjectATI,layer);

    // GL_ATI_vertex_attrib_array_object

    _getProcAddress( driver_glGetVertexAttribArrayObjectfvATI, glGetVertexAttribArrayObjectfvATI, "glGetVertexAttribArrayObjectfvATI" );
    if( driver_glGetVertexAttribArrayObjectfvATI == NULL ) {
      driver_glGetVertexAttribArrayObjectfvATI = missing_glGetVertexAttribArrayObjectfvATI;
    }
    dt.glGetVertexAttribArrayObjectfvATI = MakeRegalProc(loader_glGetVertexAttribArrayObjectfvATI,layer);
    _getProcAddress( driver_glGetVertexAttribArrayObjectivATI, glGetVertexAttribArrayObjectivATI, "glGetVertexAttribArrayObjectivATI" );
    if( driver_glGetVertexAttribArrayObjectivATI == NULL ) {
      driver_glGetVertexAttribArrayObjectivATI = missing_glGetVertexAttribArrayObjectivATI;
    }
    dt.glGetVertexAttribArrayObjectivATI = MakeRegalProc(loader_glGetVertexAttribArrayObjectivATI,layer);
    _getProcAddress( driver_glVertexAttribArrayObjectATI, glVertexAttribArrayObjectATI, "glVertexAttribArrayObjectATI" );
    if( driver_glVertexAttribArrayObjectATI == NULL ) {
      driver_glVertexAttribArrayObjectATI = missing_glVertexAttribArrayObjectATI;
    }
    dt.glVertexAttribArrayObjectATI = MakeRegalProc(loader_glVertexAttribArrayObjectATI,layer);

    // GL_ATI_vertex_streams

    _getProcAddress( driver_glClientActiveVertexStreamATI, glClientActiveVertexStreamATI, "glClientActiveVertexStreamATI" );
    if( driver_glClientActiveVertexStreamATI == NULL ) {
      driver_glClientActiveVertexStreamATI = missing_glClientActiveVertexStreamATI;
    }
    dt.glClientActiveVertexStreamATI = MakeRegalProc(loader_glClientActiveVertexStreamATI,layer);
    _getProcAddress( driver_glNormalStream3bATI, glNormalStream3bATI, "glNormalStream3bATI" );
    if( driver_glNormalStream3bATI == NULL ) {
      driver_glNormalStream3bATI = missing_glNormalStream3bATI;
    }
    dt.glNormalStream3bATI = MakeRegalProc(loader_glNormalStream3bATI,layer);
    _getProcAddress( driver_glNormalStream3bvATI, glNormalStream3bvATI, "glNormalStream3bvATI" );
    if( driver_glNormalStream3bvATI == NULL ) {
      driver_glNormalStream3bvATI = missing_glNormalStream3bvATI;
    }
    dt.glNormalStream3bvATI = MakeRegalProc(loader_glNormalStream3bvATI,layer);
    _getProcAddress( driver_glNormalStream3dATI, glNormalStream3dATI, "glNormalStream3dATI" );
    if( driver_glNormalStream3dATI == NULL ) {
      driver_glNormalStream3dATI = missing_glNormalStream3dATI;
    }
    dt.glNormalStream3dATI = MakeRegalProc(loader_glNormalStream3dATI,layer);
    _getProcAddress( driver_glNormalStream3dvATI, glNormalStream3dvATI, "glNormalStream3dvATI" );
    if( driver_glNormalStream3dvATI == NULL ) {
      driver_glNormalStream3dvATI = missing_glNormalStream3dvATI;
    }
    dt.glNormalStream3dvATI = MakeRegalProc(loader_glNormalStream3dvATI,layer);
    _getProcAddress( driver_glNormalStream3fATI, glNormalStream3fATI, "glNormalStream3fATI" );
    if( driver_glNormalStream3fATI == NULL ) {
      driver_glNormalStream3fATI = missing_glNormalStream3fATI;
    }
    dt.glNormalStream3fATI = MakeRegalProc(loader_glNormalStream3fATI,layer);
    _getProcAddress( driver_glNormalStream3fvATI, glNormalStream3fvATI, "glNormalStream3fvATI" );
    if( driver_glNormalStream3fvATI == NULL ) {
      driver_glNormalStream3fvATI = missing_glNormalStream3fvATI;
    }
    dt.glNormalStream3fvATI = MakeRegalProc(loader_glNormalStream3fvATI,layer);
    _getProcAddress( driver_glNormalStream3iATI, glNormalStream3iATI, "glNormalStream3iATI" );
    if( driver_glNormalStream3iATI == NULL ) {
      driver_glNormalStream3iATI = missing_glNormalStream3iATI;
    }
    dt.glNormalStream3iATI = MakeRegalProc(loader_glNormalStream3iATI,layer);
    _getProcAddress( driver_glNormalStream3ivATI, glNormalStream3ivATI, "glNormalStream3ivATI" );
    if( driver_glNormalStream3ivATI == NULL ) {
      driver_glNormalStream3ivATI = missing_glNormalStream3ivATI;
    }
    dt.glNormalStream3ivATI = MakeRegalProc(loader_glNormalStream3ivATI,layer);
    _getProcAddress( driver_glNormalStream3sATI, glNormalStream3sATI, "glNormalStream3sATI" );
    if( driver_glNormalStream3sATI == NULL ) {
      driver_glNormalStream3sATI = missing_glNormalStream3sATI;
    }
    dt.glNormalStream3sATI = MakeRegalProc(loader_glNormalStream3sATI,layer);
    _getProcAddress( driver_glNormalStream3svATI, glNormalStream3svATI, "glNormalStream3svATI" );
    if( driver_glNormalStream3svATI == NULL ) {
      driver_glNormalStream3svATI = missing_glNormalStream3svATI;
    }
    dt.glNormalStream3svATI = MakeRegalProc(loader_glNormalStream3svATI,layer);
    _getProcAddress( driver_glVertexBlendEnvfATI, glVertexBlendEnvfATI, "glVertexBlendEnvfATI" );
    if( driver_glVertexBlendEnvfATI == NULL ) {
      driver_glVertexBlendEnvfATI = missing_glVertexBlendEnvfATI;
    }
    dt.glVertexBlendEnvfATI = MakeRegalProc(loader_glVertexBlendEnvfATI,layer);
    _getProcAddress( driver_glVertexBlendEnviATI, glVertexBlendEnviATI, "glVertexBlendEnviATI" );
    if( driver_glVertexBlendEnviATI == NULL ) {
      driver_glVertexBlendEnviATI = missing_glVertexBlendEnviATI;
    }
    dt.glVertexBlendEnviATI = MakeRegalProc(loader_glVertexBlendEnviATI,layer);
    _getProcAddress( driver_glVertexStream1dATI, glVertexStream1dATI, "glVertexStream1dATI" );
    if( driver_glVertexStream1dATI == NULL ) {
      driver_glVertexStream1dATI = missing_glVertexStream1dATI;
    }
    dt.glVertexStream1dATI = MakeRegalProc(loader_glVertexStream1dATI,layer);
    _getProcAddress( driver_glVertexStream1dvATI, glVertexStream1dvATI, "glVertexStream1dvATI" );
    if( driver_glVertexStream1dvATI == NULL ) {
      driver_glVertexStream1dvATI = missing_glVertexStream1dvATI;
    }
    dt.glVertexStream1dvATI = MakeRegalProc(loader_glVertexStream1dvATI,layer);
    _getProcAddress( driver_glVertexStream1fATI, glVertexStream1fATI, "glVertexStream1fATI" );
    if( driver_glVertexStream1fATI == NULL ) {
      driver_glVertexStream1fATI = missing_glVertexStream1fATI;
    }
    dt.glVertexStream1fATI = MakeRegalProc(loader_glVertexStream1fATI,layer);
    _getProcAddress( driver_glVertexStream1fvATI, glVertexStream1fvATI, "glVertexStream1fvATI" );
    if( driver_glVertexStream1fvATI == NULL ) {
      driver_glVertexStream1fvATI = missing_glVertexStream1fvATI;
    }
    dt.glVertexStream1fvATI = MakeRegalProc(loader_glVertexStream1fvATI,layer);
    _getProcAddress( driver_glVertexStream1iATI, glVertexStream1iATI, "glVertexStream1iATI" );
    if( driver_glVertexStream1iATI == NULL ) {
      driver_glVertexStream1iATI = missing_glVertexStream1iATI;
    }
    dt.glVertexStream1iATI = MakeRegalProc(loader_glVertexStream1iATI,layer);
    _getProcAddress( driver_glVertexStream1ivATI, glVertexStream1ivATI, "glVertexStream1ivATI" );
    if( driver_glVertexStream1ivATI == NULL ) {
      driver_glVertexStream1ivATI = missing_glVertexStream1ivATI;
    }
    dt.glVertexStream1ivATI = MakeRegalProc(loader_glVertexStream1ivATI,layer);
    _getProcAddress( driver_glVertexStream1sATI, glVertexStream1sATI, "glVertexStream1sATI" );
    if( driver_glVertexStream1sATI == NULL ) {
      driver_glVertexStream1sATI = missing_glVertexStream1sATI;
    }
    dt.glVertexStream1sATI = MakeRegalProc(loader_glVertexStream1sATI,layer);
    _getProcAddress( driver_glVertexStream1svATI, glVertexStream1svATI, "glVertexStream1svATI" );
    if( driver_glVertexStream1svATI == NULL ) {
      driver_glVertexStream1svATI = missing_glVertexStream1svATI;
    }
    dt.glVertexStream1svATI = MakeRegalProc(loader_glVertexStream1svATI,layer);
    _getProcAddress( driver_glVertexStream2dATI, glVertexStream2dATI, "glVertexStream2dATI" );
    if( driver_glVertexStream2dATI == NULL ) {
      driver_glVertexStream2dATI = missing_glVertexStream2dATI;
    }
    dt.glVertexStream2dATI = MakeRegalProc(loader_glVertexStream2dATI,layer);
    _getProcAddress( driver_glVertexStream2dvATI, glVertexStream2dvATI, "glVertexStream2dvATI" );
    if( driver_glVertexStream2dvATI == NULL ) {
      driver_glVertexStream2dvATI = missing_glVertexStream2dvATI;
    }
    dt.glVertexStream2dvATI = MakeRegalProc(loader_glVertexStream2dvATI,layer);
    _getProcAddress( driver_glVertexStream2fATI, glVertexStream2fATI, "glVertexStream2fATI" );
    if( driver_glVertexStream2fATI == NULL ) {
      driver_glVertexStream2fATI = missing_glVertexStream2fATI;
    }
    dt.glVertexStream2fATI = MakeRegalProc(loader_glVertexStream2fATI,layer);
    _getProcAddress( driver_glVertexStream2fvATI, glVertexStream2fvATI, "glVertexStream2fvATI" );
    if( driver_glVertexStream2fvATI == NULL ) {
      driver_glVertexStream2fvATI = missing_glVertexStream2fvATI;
    }
    dt.glVertexStream2fvATI = MakeRegalProc(loader_glVertexStream2fvATI,layer);
    _getProcAddress( driver_glVertexStream2iATI, glVertexStream2iATI, "glVertexStream2iATI" );
    if( driver_glVertexStream2iATI == NULL ) {
      driver_glVertexStream2iATI = missing_glVertexStream2iATI;
    }
    dt.glVertexStream2iATI = MakeRegalProc(loader_glVertexStream2iATI,layer);
    _getProcAddress( driver_glVertexStream2ivATI, glVertexStream2ivATI, "glVertexStream2ivATI" );
    if( driver_glVertexStream2ivATI == NULL ) {
      driver_glVertexStream2ivATI = missing_glVertexStream2ivATI;
    }
    dt.glVertexStream2ivATI = MakeRegalProc(loader_glVertexStream2ivATI,layer);
    _getProcAddress( driver_glVertexStream2sATI, glVertexStream2sATI, "glVertexStream2sATI" );
    if( driver_glVertexStream2sATI == NULL ) {
      driver_glVertexStream2sATI = missing_glVertexStream2sATI;
    }
    dt.glVertexStream2sATI = MakeRegalProc(loader_glVertexStream2sATI,layer);
    _getProcAddress( driver_glVertexStream2svATI, glVertexStream2svATI, "glVertexStream2svATI" );
    if( driver_glVertexStream2svATI == NULL ) {
      driver_glVertexStream2svATI = missing_glVertexStream2svATI;
    }
    dt.glVertexStream2svATI = MakeRegalProc(loader_glVertexStream2svATI,layer);
    _getProcAddress( driver_glVertexStream3dATI, glVertexStream3dATI, "glVertexStream3dATI" );
    if( driver_glVertexStream3dATI == NULL ) {
      driver_glVertexStream3dATI = missing_glVertexStream3dATI;
    }
    dt.glVertexStream3dATI = MakeRegalProc(loader_glVertexStream3dATI,layer);
    _getProcAddress( driver_glVertexStream3dvATI, glVertexStream3dvATI, "glVertexStream3dvATI" );
    if( driver_glVertexStream3dvATI == NULL ) {
      driver_glVertexStream3dvATI = missing_glVertexStream3dvATI;
    }
    dt.glVertexStream3dvATI = MakeRegalProc(loader_glVertexStream3dvATI,layer);
    _getProcAddress( driver_glVertexStream3fATI, glVertexStream3fATI, "glVertexStream3fATI" );
    if( driver_glVertexStream3fATI == NULL ) {
      driver_glVertexStream3fATI = missing_glVertexStream3fATI;
    }
    dt.glVertexStream3fATI = MakeRegalProc(loader_glVertexStream3fATI,layer);
    _getProcAddress( driver_glVertexStream3fvATI, glVertexStream3fvATI, "glVertexStream3fvATI" );
    if( driver_glVertexStream3fvATI == NULL ) {
      driver_glVertexStream3fvATI = missing_glVertexStream3fvATI;
    }
    dt.glVertexStream3fvATI = MakeRegalProc(loader_glVertexStream3fvATI,layer);
    _getProcAddress( driver_glVertexStream3iATI, glVertexStream3iATI, "glVertexStream3iATI" );
    if( driver_glVertexStream3iATI == NULL ) {
      driver_glVertexStream3iATI = missing_glVertexStream3iATI;
    }
    dt.glVertexStream3iATI = MakeRegalProc(loader_glVertexStream3iATI,layer);
    _getProcAddress( driver_glVertexStream3ivATI, glVertexStream3ivATI, "glVertexStream3ivATI" );
    if( driver_glVertexStream3ivATI == NULL ) {
      driver_glVertexStream3ivATI = missing_glVertexStream3ivATI;
    }
    dt.glVertexStream3ivATI = MakeRegalProc(loader_glVertexStream3ivATI,layer);
    _getProcAddress( driver_glVertexStream3sATI, glVertexStream3sATI, "glVertexStream3sATI" );
    if( driver_glVertexStream3sATI == NULL ) {
      driver_glVertexStream3sATI = missing_glVertexStream3sATI;
    }
    dt.glVertexStream3sATI = MakeRegalProc(loader_glVertexStream3sATI,layer);
    _getProcAddress( driver_glVertexStream3svATI, glVertexStream3svATI, "glVertexStream3svATI" );
    if( driver_glVertexStream3svATI == NULL ) {
      driver_glVertexStream3svATI = missing_glVertexStream3svATI;
    }
    dt.glVertexStream3svATI = MakeRegalProc(loader_glVertexStream3svATI,layer);
    _getProcAddress( driver_glVertexStream4dATI, glVertexStream4dATI, "glVertexStream4dATI" );
    if( driver_glVertexStream4dATI == NULL ) {
      driver_glVertexStream4dATI = missing_glVertexStream4dATI;
    }
    dt.glVertexStream4dATI = MakeRegalProc(loader_glVertexStream4dATI,layer);
    _getProcAddress( driver_glVertexStream4dvATI, glVertexStream4dvATI, "glVertexStream4dvATI" );
    if( driver_glVertexStream4dvATI == NULL ) {
      driver_glVertexStream4dvATI = missing_glVertexStream4dvATI;
    }
    dt.glVertexStream4dvATI = MakeRegalProc(loader_glVertexStream4dvATI,layer);
    _getProcAddress( driver_glVertexStream4fATI, glVertexStream4fATI, "glVertexStream4fATI" );
    if( driver_glVertexStream4fATI == NULL ) {
      driver_glVertexStream4fATI = missing_glVertexStream4fATI;
    }
    dt.glVertexStream4fATI = MakeRegalProc(loader_glVertexStream4fATI,layer);
    _getProcAddress( driver_glVertexStream4fvATI, glVertexStream4fvATI, "glVertexStream4fvATI" );
    if( driver_glVertexStream4fvATI == NULL ) {
      driver_glVertexStream4fvATI = missing_glVertexStream4fvATI;
    }
    dt.glVertexStream4fvATI = MakeRegalProc(loader_glVertexStream4fvATI,layer);
    _getProcAddress( driver_glVertexStream4iATI, glVertexStream4iATI, "glVertexStream4iATI" );
    if( driver_glVertexStream4iATI == NULL ) {
      driver_glVertexStream4iATI = missing_glVertexStream4iATI;
    }
    dt.glVertexStream4iATI = MakeRegalProc(loader_glVertexStream4iATI,layer);
    _getProcAddress( driver_glVertexStream4ivATI, glVertexStream4ivATI, "glVertexStream4ivATI" );
    if( driver_glVertexStream4ivATI == NULL ) {
      driver_glVertexStream4ivATI = missing_glVertexStream4ivATI;
    }
    dt.glVertexStream4ivATI = MakeRegalProc(loader_glVertexStream4ivATI,layer);
    _getProcAddress( driver_glVertexStream4sATI, glVertexStream4sATI, "glVertexStream4sATI" );
    if( driver_glVertexStream4sATI == NULL ) {
      driver_glVertexStream4sATI = missing_glVertexStream4sATI;
    }
    dt.glVertexStream4sATI = MakeRegalProc(loader_glVertexStream4sATI,layer);
    _getProcAddress( driver_glVertexStream4svATI, glVertexStream4svATI, "glVertexStream4svATI" );
    if( driver_glVertexStream4svATI == NULL ) {
      driver_glVertexStream4svATI = missing_glVertexStream4svATI;
    }
    dt.glVertexStream4svATI = MakeRegalProc(loader_glVertexStream4svATI,layer);

    // GL_EXT_bindable_uniform

    _getProcAddress( driver_glGetUniformBufferSizeEXT, glGetUniformBufferSizeEXT, "glGetUniformBufferSizeEXT" );
    if( driver_glGetUniformBufferSizeEXT == NULL ) {
      driver_glGetUniformBufferSizeEXT = missing_glGetUniformBufferSizeEXT;
    }
    dt.glGetUniformBufferSizeEXT = MakeRegalProc(loader_glGetUniformBufferSizeEXT,layer);
    _getProcAddress( driver_glGetUniformOffsetEXT, glGetUniformOffsetEXT, "glGetUniformOffsetEXT" );
    if( driver_glGetUniformOffsetEXT == NULL ) {
      driver_glGetUniformOffsetEXT = missing_glGetUniformOffsetEXT;
    }
    dt.glGetUniformOffsetEXT = MakeRegalProc(loader_glGetUniformOffsetEXT,layer);
    _getProcAddress( driver_glUniformBufferEXT, glUniformBufferEXT, "glUniformBufferEXT" );
    if( driver_glUniformBufferEXT == NULL ) {
      driver_glUniformBufferEXT = missing_glUniformBufferEXT;
    }
    dt.glUniformBufferEXT = MakeRegalProc(loader_glUniformBufferEXT,layer);

    // GL_EXT_blend_color

    _getProcAddress( driver_glBlendColorEXT, glBlendColorEXT, "glBlendColorEXT" );
    if( driver_glBlendColorEXT == NULL ) {
      driver_glBlendColorEXT = missing_glBlendColorEXT;
    }
    dt.glBlendColorEXT = MakeRegalProc(loader_glBlendColorEXT,layer);

    // GL_EXT_blend_equation_separate

    _getProcAddress( driver_glBlendEquationSeparateEXT, glBlendEquationSeparateEXT, "glBlendEquationSeparateEXT" );
    if( driver_glBlendEquationSeparateEXT == NULL ) {
      driver_glBlendEquationSeparateEXT = missing_glBlendEquationSeparateEXT;
    }
    dt.glBlendEquationSeparateEXT = MakeRegalProc(loader_glBlendEquationSeparateEXT,layer);

    // GL_EXT_blend_func_separate

    _getProcAddress( driver_glBlendFuncSeparateEXT, glBlendFuncSeparateEXT, "glBlendFuncSeparateEXT" );
    if( driver_glBlendFuncSeparateEXT == NULL ) {
      driver_glBlendFuncSeparateEXT = missing_glBlendFuncSeparateEXT;
    }
    dt.glBlendFuncSeparateEXT = MakeRegalProc(loader_glBlendFuncSeparateEXT,layer);

    // GL_EXT_blend_minmax

    _getProcAddress( driver_glBlendEquationEXT, glBlendEquationEXT, "glBlendEquationEXT" );
    if( driver_glBlendEquationEXT == NULL ) {
      driver_glBlendEquationEXT = missing_glBlendEquationEXT;
    }
    dt.glBlendEquationEXT = MakeRegalProc(loader_glBlendEquationEXT,layer);

    // GL_EXT_color_subtable

    _getProcAddress( driver_glColorSubTableEXT, glColorSubTableEXT, "glColorSubTableEXT" );
    if( driver_glColorSubTableEXT == NULL ) {
      driver_glColorSubTableEXT = missing_glColorSubTableEXT;
    }
    dt.glColorSubTableEXT = MakeRegalProc(loader_glColorSubTableEXT,layer);
    _getProcAddress( driver_glCopyColorSubTableEXT, glCopyColorSubTableEXT, "glCopyColorSubTableEXT" );
    if( driver_glCopyColorSubTableEXT == NULL ) {
      driver_glCopyColorSubTableEXT = missing_glCopyColorSubTableEXT;
    }
    dt.glCopyColorSubTableEXT = MakeRegalProc(loader_glCopyColorSubTableEXT,layer);

    // GL_EXT_compiled_vertex_array

    _getProcAddress( driver_glLockArraysEXT, glLockArraysEXT, "glLockArraysEXT" );
    if( driver_glLockArraysEXT == NULL ) {
      driver_glLockArraysEXT = missing_glLockArraysEXT;
    }
    dt.glLockArraysEXT = MakeRegalProc(loader_glLockArraysEXT,layer);
    _getProcAddress( driver_glUnlockArraysEXT, glUnlockArraysEXT, "glUnlockArraysEXT" );
    if( driver_glUnlockArraysEXT == NULL ) {
      driver_glUnlockArraysEXT = missing_glUnlockArraysEXT;
    }
    dt.glUnlockArraysEXT = MakeRegalProc(loader_glUnlockArraysEXT,layer);

    // GL_EXT_convolution

    _getProcAddress( driver_glConvolutionFilter1DEXT, glConvolutionFilter1DEXT, "glConvolutionFilter1DEXT" );
    if( driver_glConvolutionFilter1DEXT == NULL ) {
      driver_glConvolutionFilter1DEXT = missing_glConvolutionFilter1DEXT;
    }
    dt.glConvolutionFilter1DEXT = MakeRegalProc(loader_glConvolutionFilter1DEXT,layer);
    _getProcAddress( driver_glConvolutionFilter2DEXT, glConvolutionFilter2DEXT, "glConvolutionFilter2DEXT" );
    if( driver_glConvolutionFilter2DEXT == NULL ) {
      driver_glConvolutionFilter2DEXT = missing_glConvolutionFilter2DEXT;
    }
    dt.glConvolutionFilter2DEXT = MakeRegalProc(loader_glConvolutionFilter2DEXT,layer);
    _getProcAddress( driver_glConvolutionParameterfEXT, glConvolutionParameterfEXT, "glConvolutionParameterfEXT" );
    if( driver_glConvolutionParameterfEXT == NULL ) {
      driver_glConvolutionParameterfEXT = missing_glConvolutionParameterfEXT;
    }
    dt.glConvolutionParameterfEXT = MakeRegalProc(loader_glConvolutionParameterfEXT,layer);
    _getProcAddress( driver_glConvolutionParameterfvEXT, glConvolutionParameterfvEXT, "glConvolutionParameterfvEXT" );
    if( driver_glConvolutionParameterfvEXT == NULL ) {
      driver_glConvolutionParameterfvEXT = missing_glConvolutionParameterfvEXT;
    }
    dt.glConvolutionParameterfvEXT = MakeRegalProc(loader_glConvolutionParameterfvEXT,layer);
    _getProcAddress( driver_glConvolutionParameteriEXT, glConvolutionParameteriEXT, "glConvolutionParameteriEXT" );
    if( driver_glConvolutionParameteriEXT == NULL ) {
      driver_glConvolutionParameteriEXT = missing_glConvolutionParameteriEXT;
    }
    dt.glConvolutionParameteriEXT = MakeRegalProc(loader_glConvolutionParameteriEXT,layer);
    _getProcAddress( driver_glConvolutionParameterivEXT, glConvolutionParameterivEXT, "glConvolutionParameterivEXT" );
    if( driver_glConvolutionParameterivEXT == NULL ) {
      driver_glConvolutionParameterivEXT = missing_glConvolutionParameterivEXT;
    }
    dt.glConvolutionParameterivEXT = MakeRegalProc(loader_glConvolutionParameterivEXT,layer);
    _getProcAddress( driver_glCopyConvolutionFilter1DEXT, glCopyConvolutionFilter1DEXT, "glCopyConvolutionFilter1DEXT" );
    if( driver_glCopyConvolutionFilter1DEXT == NULL ) {
      driver_glCopyConvolutionFilter1DEXT = missing_glCopyConvolutionFilter1DEXT;
    }
    dt.glCopyConvolutionFilter1DEXT = MakeRegalProc(loader_glCopyConvolutionFilter1DEXT,layer);
    _getProcAddress( driver_glCopyConvolutionFilter2DEXT, glCopyConvolutionFilter2DEXT, "glCopyConvolutionFilter2DEXT" );
    if( driver_glCopyConvolutionFilter2DEXT == NULL ) {
      driver_glCopyConvolutionFilter2DEXT = missing_glCopyConvolutionFilter2DEXT;
    }
    dt.glCopyConvolutionFilter2DEXT = MakeRegalProc(loader_glCopyConvolutionFilter2DEXT,layer);
    _getProcAddress( driver_glGetConvolutionFilterEXT, glGetConvolutionFilterEXT, "glGetConvolutionFilterEXT" );
    if( driver_glGetConvolutionFilterEXT == NULL ) {
      driver_glGetConvolutionFilterEXT = missing_glGetConvolutionFilterEXT;
    }
    dt.glGetConvolutionFilterEXT = MakeRegalProc(loader_glGetConvolutionFilterEXT,layer);
    _getProcAddress( driver_glGetConvolutionParameterfvEXT, glGetConvolutionParameterfvEXT, "glGetConvolutionParameterfvEXT" );
    if( driver_glGetConvolutionParameterfvEXT == NULL ) {
      driver_glGetConvolutionParameterfvEXT = missing_glGetConvolutionParameterfvEXT;
    }
    dt.glGetConvolutionParameterfvEXT = MakeRegalProc(loader_glGetConvolutionParameterfvEXT,layer);
    _getProcAddress( driver_glGetConvolutionParameterivEXT, glGetConvolutionParameterivEXT, "glGetConvolutionParameterivEXT" );
    if( driver_glGetConvolutionParameterivEXT == NULL ) {
      driver_glGetConvolutionParameterivEXT = missing_glGetConvolutionParameterivEXT;
    }
    dt.glGetConvolutionParameterivEXT = MakeRegalProc(loader_glGetConvolutionParameterivEXT,layer);
    _getProcAddress( driver_glGetSeparableFilterEXT, glGetSeparableFilterEXT, "glGetSeparableFilterEXT" );
    if( driver_glGetSeparableFilterEXT == NULL ) {
      driver_glGetSeparableFilterEXT = missing_glGetSeparableFilterEXT;
    }
    dt.glGetSeparableFilterEXT = MakeRegalProc(loader_glGetSeparableFilterEXT,layer);
    _getProcAddress( driver_glSeparableFilter2DEXT, glSeparableFilter2DEXT, "glSeparableFilter2DEXT" );
    if( driver_glSeparableFilter2DEXT == NULL ) {
      driver_glSeparableFilter2DEXT = missing_glSeparableFilter2DEXT;
    }
    dt.glSeparableFilter2DEXT = MakeRegalProc(loader_glSeparableFilter2DEXT,layer);

    // GL_EXT_coordinate_frame

    _getProcAddress( driver_glBinormal3bEXT, glBinormal3bEXT, "glBinormal3bEXT" );
    if( driver_glBinormal3bEXT == NULL ) {
      driver_glBinormal3bEXT = missing_glBinormal3bEXT;
    }
    dt.glBinormal3bEXT = MakeRegalProc(loader_glBinormal3bEXT,layer);
    _getProcAddress( driver_glBinormal3bvEXT, glBinormal3bvEXT, "glBinormal3bvEXT" );
    if( driver_glBinormal3bvEXT == NULL ) {
      driver_glBinormal3bvEXT = missing_glBinormal3bvEXT;
    }
    dt.glBinormal3bvEXT = MakeRegalProc(loader_glBinormal3bvEXT,layer);
    _getProcAddress( driver_glBinormal3dEXT, glBinormal3dEXT, "glBinormal3dEXT" );
    if( driver_glBinormal3dEXT == NULL ) {
      driver_glBinormal3dEXT = missing_glBinormal3dEXT;
    }
    dt.glBinormal3dEXT = MakeRegalProc(loader_glBinormal3dEXT,layer);
    _getProcAddress( driver_glBinormal3dvEXT, glBinormal3dvEXT, "glBinormal3dvEXT" );
    if( driver_glBinormal3dvEXT == NULL ) {
      driver_glBinormal3dvEXT = missing_glBinormal3dvEXT;
    }
    dt.glBinormal3dvEXT = MakeRegalProc(loader_glBinormal3dvEXT,layer);
    _getProcAddress( driver_glBinormal3fEXT, glBinormal3fEXT, "glBinormal3fEXT" );
    if( driver_glBinormal3fEXT == NULL ) {
      driver_glBinormal3fEXT = missing_glBinormal3fEXT;
    }
    dt.glBinormal3fEXT = MakeRegalProc(loader_glBinormal3fEXT,layer);
    _getProcAddress( driver_glBinormal3fvEXT, glBinormal3fvEXT, "glBinormal3fvEXT" );
    if( driver_glBinormal3fvEXT == NULL ) {
      driver_glBinormal3fvEXT = missing_glBinormal3fvEXT;
    }
    dt.glBinormal3fvEXT = MakeRegalProc(loader_glBinormal3fvEXT,layer);
    _getProcAddress( driver_glBinormal3iEXT, glBinormal3iEXT, "glBinormal3iEXT" );
    if( driver_glBinormal3iEXT == NULL ) {
      driver_glBinormal3iEXT = missing_glBinormal3iEXT;
    }
    dt.glBinormal3iEXT = MakeRegalProc(loader_glBinormal3iEXT,layer);
    _getProcAddress( driver_glBinormal3ivEXT, glBinormal3ivEXT, "glBinormal3ivEXT" );
    if( driver_glBinormal3ivEXT == NULL ) {
      driver_glBinormal3ivEXT = missing_glBinormal3ivEXT;
    }
    dt.glBinormal3ivEXT = MakeRegalProc(loader_glBinormal3ivEXT,layer);
    _getProcAddress( driver_glBinormal3sEXT, glBinormal3sEXT, "glBinormal3sEXT" );
    if( driver_glBinormal3sEXT == NULL ) {
      driver_glBinormal3sEXT = missing_glBinormal3sEXT;
    }
    dt.glBinormal3sEXT = MakeRegalProc(loader_glBinormal3sEXT,layer);
    _getProcAddress( driver_glBinormal3svEXT, glBinormal3svEXT, "glBinormal3svEXT" );
    if( driver_glBinormal3svEXT == NULL ) {
      driver_glBinormal3svEXT = missing_glBinormal3svEXT;
    }
    dt.glBinormal3svEXT = MakeRegalProc(loader_glBinormal3svEXT,layer);
    _getProcAddress( driver_glBinormalPointerEXT, glBinormalPointerEXT, "glBinormalPointerEXT" );
    if( driver_glBinormalPointerEXT == NULL ) {
      driver_glBinormalPointerEXT = missing_glBinormalPointerEXT;
    }
    dt.glBinormalPointerEXT = MakeRegalProc(loader_glBinormalPointerEXT,layer);
    _getProcAddress( driver_glTangent3bEXT, glTangent3bEXT, "glTangent3bEXT" );
    if( driver_glTangent3bEXT == NULL ) {
      driver_glTangent3bEXT = missing_glTangent3bEXT;
    }
    dt.glTangent3bEXT = MakeRegalProc(loader_glTangent3bEXT,layer);
    _getProcAddress( driver_glTangent3bvEXT, glTangent3bvEXT, "glTangent3bvEXT" );
    if( driver_glTangent3bvEXT == NULL ) {
      driver_glTangent3bvEXT = missing_glTangent3bvEXT;
    }
    dt.glTangent3bvEXT = MakeRegalProc(loader_glTangent3bvEXT,layer);
    _getProcAddress( driver_glTangent3dEXT, glTangent3dEXT, "glTangent3dEXT" );
    if( driver_glTangent3dEXT == NULL ) {
      driver_glTangent3dEXT = missing_glTangent3dEXT;
    }
    dt.glTangent3dEXT = MakeRegalProc(loader_glTangent3dEXT,layer);
    _getProcAddress( driver_glTangent3dvEXT, glTangent3dvEXT, "glTangent3dvEXT" );
    if( driver_glTangent3dvEXT == NULL ) {
      driver_glTangent3dvEXT = missing_glTangent3dvEXT;
    }
    dt.glTangent3dvEXT = MakeRegalProc(loader_glTangent3dvEXT,layer);
    _getProcAddress( driver_glTangent3fEXT, glTangent3fEXT, "glTangent3fEXT" );
    if( driver_glTangent3fEXT == NULL ) {
      driver_glTangent3fEXT = missing_glTangent3fEXT;
    }
    dt.glTangent3fEXT = MakeRegalProc(loader_glTangent3fEXT,layer);
    _getProcAddress( driver_glTangent3fvEXT, glTangent3fvEXT, "glTangent3fvEXT" );
    if( driver_glTangent3fvEXT == NULL ) {
      driver_glTangent3fvEXT = missing_glTangent3fvEXT;
    }
    dt.glTangent3fvEXT = MakeRegalProc(loader_glTangent3fvEXT,layer);
    _getProcAddress( driver_glTangent3iEXT, glTangent3iEXT, "glTangent3iEXT" );
    if( driver_glTangent3iEXT == NULL ) {
      driver_glTangent3iEXT = missing_glTangent3iEXT;
    }
    dt.glTangent3iEXT = MakeRegalProc(loader_glTangent3iEXT,layer);
    _getProcAddress( driver_glTangent3ivEXT, glTangent3ivEXT, "glTangent3ivEXT" );
    if( driver_glTangent3ivEXT == NULL ) {
      driver_glTangent3ivEXT = missing_glTangent3ivEXT;
    }
    dt.glTangent3ivEXT = MakeRegalProc(loader_glTangent3ivEXT,layer);
    _getProcAddress( driver_glTangent3sEXT, glTangent3sEXT, "glTangent3sEXT" );
    if( driver_glTangent3sEXT == NULL ) {
      driver_glTangent3sEXT = missing_glTangent3sEXT;
    }
    dt.glTangent3sEXT = MakeRegalProc(loader_glTangent3sEXT,layer);
    _getProcAddress( driver_glTangent3svEXT, glTangent3svEXT, "glTangent3svEXT" );
    if( driver_glTangent3svEXT == NULL ) {
      driver_glTangent3svEXT = missing_glTangent3svEXT;
    }
    dt.glTangent3svEXT = MakeRegalProc(loader_glTangent3svEXT,layer);
    _getProcAddress( driver_glTangentPointerEXT, glTangentPointerEXT, "glTangentPointerEXT" );
    if( driver_glTangentPointerEXT == NULL ) {
      driver_glTangentPointerEXT = missing_glTangentPointerEXT;
    }
    dt.glTangentPointerEXT = MakeRegalProc(loader_glTangentPointerEXT,layer);

    // GL_EXT_copy_texture

    _getProcAddress( driver_glCopyTexImage1DEXT, glCopyTexImage1DEXT, "glCopyTexImage1DEXT" );
    if( driver_glCopyTexImage1DEXT == NULL ) {
      driver_glCopyTexImage1DEXT = missing_glCopyTexImage1DEXT;
    }
    dt.glCopyTexImage1DEXT = MakeRegalProc(loader_glCopyTexImage1DEXT,layer);
    _getProcAddress( driver_glCopyTexImage2DEXT, glCopyTexImage2DEXT, "glCopyTexImage2DEXT" );
    if( driver_glCopyTexImage2DEXT == NULL ) {
      driver_glCopyTexImage2DEXT = missing_glCopyTexImage2DEXT;
    }
    dt.glCopyTexImage2DEXT = MakeRegalProc(loader_glCopyTexImage2DEXT,layer);
    _getProcAddress( driver_glCopyTexSubImage1DEXT, glCopyTexSubImage1DEXT, "glCopyTexSubImage1DEXT" );
    if( driver_glCopyTexSubImage1DEXT == NULL ) {
      driver_glCopyTexSubImage1DEXT = missing_glCopyTexSubImage1DEXT;
    }
    dt.glCopyTexSubImage1DEXT = MakeRegalProc(loader_glCopyTexSubImage1DEXT,layer);
    _getProcAddress( driver_glCopyTexSubImage2DEXT, glCopyTexSubImage2DEXT, "glCopyTexSubImage2DEXT" );
    if( driver_glCopyTexSubImage2DEXT == NULL ) {
      driver_glCopyTexSubImage2DEXT = missing_glCopyTexSubImage2DEXT;
    }
    dt.glCopyTexSubImage2DEXT = MakeRegalProc(loader_glCopyTexSubImage2DEXT,layer);
    _getProcAddress( driver_glCopyTexSubImage3DEXT, glCopyTexSubImage3DEXT, "glCopyTexSubImage3DEXT" );
    if( driver_glCopyTexSubImage3DEXT == NULL ) {
      driver_glCopyTexSubImage3DEXT = missing_glCopyTexSubImage3DEXT;
    }
    dt.glCopyTexSubImage3DEXT = MakeRegalProc(loader_glCopyTexSubImage3DEXT,layer);

    // GL_EXT_cull_vertex

    _getProcAddress( driver_glCullParameterdvEXT, glCullParameterdvEXT, "glCullParameterdvEXT" );
    if( driver_glCullParameterdvEXT == NULL ) {
      driver_glCullParameterdvEXT = missing_glCullParameterdvEXT;
    }
    dt.glCullParameterdvEXT = MakeRegalProc(loader_glCullParameterdvEXT,layer);
    _getProcAddress( driver_glCullParameterfvEXT, glCullParameterfvEXT, "glCullParameterfvEXT" );
    if( driver_glCullParameterfvEXT == NULL ) {
      driver_glCullParameterfvEXT = missing_glCullParameterfvEXT;
    }
    dt.glCullParameterfvEXT = MakeRegalProc(loader_glCullParameterfvEXT,layer);

    // GL_EXT_debug_label

    _getProcAddress( driver_glGetObjectLabelEXT, glGetObjectLabelEXT, "glGetObjectLabelEXT" );
    if( driver_glGetObjectLabelEXT == NULL ) {
      driver_glGetObjectLabelEXT = missing_glGetObjectLabelEXT;
    }
    dt.glGetObjectLabelEXT = MakeRegalProc(loader_glGetObjectLabelEXT,layer);
    _getProcAddress( driver_glLabelObjectEXT, glLabelObjectEXT, "glLabelObjectEXT" );
    if( driver_glLabelObjectEXT == NULL ) {
      driver_glLabelObjectEXT = missing_glLabelObjectEXT;
    }
    dt.glLabelObjectEXT = MakeRegalProc(loader_glLabelObjectEXT,layer);

    // GL_EXT_debug_marker

    _getProcAddress( driver_glInsertEventMarkerEXT, glInsertEventMarkerEXT, "glInsertEventMarkerEXT" );
    if( driver_glInsertEventMarkerEXT == NULL ) {
      driver_glInsertEventMarkerEXT = missing_glInsertEventMarkerEXT;
    }
    dt.glInsertEventMarkerEXT = MakeRegalProc(loader_glInsertEventMarkerEXT,layer);
    _getProcAddress( driver_glPopGroupMarkerEXT, glPopGroupMarkerEXT, "glPopGroupMarkerEXT" );
    if( driver_glPopGroupMarkerEXT == NULL ) {
      driver_glPopGroupMarkerEXT = missing_glPopGroupMarkerEXT;
    }
    dt.glPopGroupMarkerEXT = MakeRegalProc(loader_glPopGroupMarkerEXT,layer);
    _getProcAddress( driver_glPushGroupMarkerEXT, glPushGroupMarkerEXT, "glPushGroupMarkerEXT" );
    if( driver_glPushGroupMarkerEXT == NULL ) {
      driver_glPushGroupMarkerEXT = missing_glPushGroupMarkerEXT;
    }
    dt.glPushGroupMarkerEXT = MakeRegalProc(loader_glPushGroupMarkerEXT,layer);

    // GL_EXT_depth_bounds_test

    _getProcAddress( driver_glDepthBoundsEXT, glDepthBoundsEXT, "glDepthBoundsEXT" );
    if( driver_glDepthBoundsEXT == NULL ) {
      driver_glDepthBoundsEXT = missing_glDepthBoundsEXT;
    }
    dt.glDepthBoundsEXT = MakeRegalProc(loader_glDepthBoundsEXT,layer);

    // GL_EXT_direct_state_access

    _getProcAddress( driver_glBindMultiTextureEXT, glBindMultiTextureEXT, "glBindMultiTextureEXT" );
    if( driver_glBindMultiTextureEXT == NULL ) {
      driver_glBindMultiTextureEXT = missing_glBindMultiTextureEXT;
    }
    dt.glBindMultiTextureEXT = MakeRegalProc(loader_glBindMultiTextureEXT,layer);
    _getProcAddress( driver_glCheckNamedFramebufferStatusEXT, glCheckNamedFramebufferStatusEXT, "glCheckNamedFramebufferStatusEXT" );
    if( driver_glCheckNamedFramebufferStatusEXT == NULL ) {
      driver_glCheckNamedFramebufferStatusEXT = missing_glCheckNamedFramebufferStatusEXT;
    }
    dt.glCheckNamedFramebufferStatusEXT = MakeRegalProc(loader_glCheckNamedFramebufferStatusEXT,layer);
    _getProcAddress( driver_glClientAttribDefaultEXT, glClientAttribDefaultEXT, "glClientAttribDefaultEXT" );
    if( driver_glClientAttribDefaultEXT == NULL ) {
      driver_glClientAttribDefaultEXT = missing_glClientAttribDefaultEXT;
    }
    dt.glClientAttribDefaultEXT = MakeRegalProc(loader_glClientAttribDefaultEXT,layer);
    _getProcAddress( driver_glCompressedMultiTexImage1DEXT, glCompressedMultiTexImage1DEXT, "glCompressedMultiTexImage1DEXT" );
    if( driver_glCompressedMultiTexImage1DEXT == NULL ) {
      driver_glCompressedMultiTexImage1DEXT = missing_glCompressedMultiTexImage1DEXT;
    }
    dt.glCompressedMultiTexImage1DEXT = MakeRegalProc(loader_glCompressedMultiTexImage1DEXT,layer);
    _getProcAddress( driver_glCompressedMultiTexImage2DEXT, glCompressedMultiTexImage2DEXT, "glCompressedMultiTexImage2DEXT" );
    if( driver_glCompressedMultiTexImage2DEXT == NULL ) {
      driver_glCompressedMultiTexImage2DEXT = missing_glCompressedMultiTexImage2DEXT;
    }
    dt.glCompressedMultiTexImage2DEXT = MakeRegalProc(loader_glCompressedMultiTexImage2DEXT,layer);
    _getProcAddress( driver_glCompressedMultiTexImage3DEXT, glCompressedMultiTexImage3DEXT, "glCompressedMultiTexImage3DEXT" );
    if( driver_glCompressedMultiTexImage3DEXT == NULL ) {
      driver_glCompressedMultiTexImage3DEXT = missing_glCompressedMultiTexImage3DEXT;
    }
    dt.glCompressedMultiTexImage3DEXT = MakeRegalProc(loader_glCompressedMultiTexImage3DEXT,layer);
    _getProcAddress( driver_glCompressedMultiTexSubImage1DEXT, glCompressedMultiTexSubImage1DEXT, "glCompressedMultiTexSubImage1DEXT" );
    if( driver_glCompressedMultiTexSubImage1DEXT == NULL ) {
      driver_glCompressedMultiTexSubImage1DEXT = missing_glCompressedMultiTexSubImage1DEXT;
    }
    dt.glCompressedMultiTexSubImage1DEXT = MakeRegalProc(loader_glCompressedMultiTexSubImage1DEXT,layer);
    _getProcAddress( driver_glCompressedMultiTexSubImage2DEXT, glCompressedMultiTexSubImage2DEXT, "glCompressedMultiTexSubImage2DEXT" );
    if( driver_glCompressedMultiTexSubImage2DEXT == NULL ) {
      driver_glCompressedMultiTexSubImage2DEXT = missing_glCompressedMultiTexSubImage2DEXT;
    }
    dt.glCompressedMultiTexSubImage2DEXT = MakeRegalProc(loader_glCompressedMultiTexSubImage2DEXT,layer);
    _getProcAddress( driver_glCompressedMultiTexSubImage3DEXT, glCompressedMultiTexSubImage3DEXT, "glCompressedMultiTexSubImage3DEXT" );
    if( driver_glCompressedMultiTexSubImage3DEXT == NULL ) {
      driver_glCompressedMultiTexSubImage3DEXT = missing_glCompressedMultiTexSubImage3DEXT;
    }
    dt.glCompressedMultiTexSubImage3DEXT = MakeRegalProc(loader_glCompressedMultiTexSubImage3DEXT,layer);
    _getProcAddress( driver_glCompressedTextureImage1DEXT, glCompressedTextureImage1DEXT, "glCompressedTextureImage1DEXT" );
    if( driver_glCompressedTextureImage1DEXT == NULL ) {
      driver_glCompressedTextureImage1DEXT = missing_glCompressedTextureImage1DEXT;
    }
    dt.glCompressedTextureImage1DEXT = MakeRegalProc(loader_glCompressedTextureImage1DEXT,layer);
    _getProcAddress( driver_glCompressedTextureImage2DEXT, glCompressedTextureImage2DEXT, "glCompressedTextureImage2DEXT" );
    if( driver_glCompressedTextureImage2DEXT == NULL ) {
      driver_glCompressedTextureImage2DEXT = missing_glCompressedTextureImage2DEXT;
    }
    dt.glCompressedTextureImage2DEXT = MakeRegalProc(loader_glCompressedTextureImage2DEXT,layer);
    _getProcAddress( driver_glCompressedTextureImage3DEXT, glCompressedTextureImage3DEXT, "glCompressedTextureImage3DEXT" );
    if( driver_glCompressedTextureImage3DEXT == NULL ) {
      driver_glCompressedTextureImage3DEXT = missing_glCompressedTextureImage3DEXT;
    }
    dt.glCompressedTextureImage3DEXT = MakeRegalProc(loader_glCompressedTextureImage3DEXT,layer);
    _getProcAddress( driver_glCompressedTextureSubImage1DEXT, glCompressedTextureSubImage1DEXT, "glCompressedTextureSubImage1DEXT" );
    if( driver_glCompressedTextureSubImage1DEXT == NULL ) {
      driver_glCompressedTextureSubImage1DEXT = missing_glCompressedTextureSubImage1DEXT;
    }
    dt.glCompressedTextureSubImage1DEXT = MakeRegalProc(loader_glCompressedTextureSubImage1DEXT,layer);
    _getProcAddress( driver_glCompressedTextureSubImage2DEXT, glCompressedTextureSubImage2DEXT, "glCompressedTextureSubImage2DEXT" );
    if( driver_glCompressedTextureSubImage2DEXT == NULL ) {
      driver_glCompressedTextureSubImage2DEXT = missing_glCompressedTextureSubImage2DEXT;
    }
    dt.glCompressedTextureSubImage2DEXT = MakeRegalProc(loader_glCompressedTextureSubImage2DEXT,layer);
    _getProcAddress( driver_glCompressedTextureSubImage3DEXT, glCompressedTextureSubImage3DEXT, "glCompressedTextureSubImage3DEXT" );
    if( driver_glCompressedTextureSubImage3DEXT == NULL ) {
      driver_glCompressedTextureSubImage3DEXT = missing_glCompressedTextureSubImage3DEXT;
    }
    dt.glCompressedTextureSubImage3DEXT = MakeRegalProc(loader_glCompressedTextureSubImage3DEXT,layer);
    _getProcAddress( driver_glCopyMultiTexImage1DEXT, glCopyMultiTexImage1DEXT, "glCopyMultiTexImage1DEXT" );
    if( driver_glCopyMultiTexImage1DEXT == NULL ) {
      driver_glCopyMultiTexImage1DEXT = missing_glCopyMultiTexImage1DEXT;
    }
    dt.glCopyMultiTexImage1DEXT = MakeRegalProc(loader_glCopyMultiTexImage1DEXT,layer);
    _getProcAddress( driver_glCopyMultiTexImage2DEXT, glCopyMultiTexImage2DEXT, "glCopyMultiTexImage2DEXT" );
    if( driver_glCopyMultiTexImage2DEXT == NULL ) {
      driver_glCopyMultiTexImage2DEXT = missing_glCopyMultiTexImage2DEXT;
    }
    dt.glCopyMultiTexImage2DEXT = MakeRegalProc(loader_glCopyMultiTexImage2DEXT,layer);
    _getProcAddress( driver_glCopyMultiTexSubImage1DEXT, glCopyMultiTexSubImage1DEXT, "glCopyMultiTexSubImage1DEXT" );
    if( driver_glCopyMultiTexSubImage1DEXT == NULL ) {
      driver_glCopyMultiTexSubImage1DEXT = missing_glCopyMultiTexSubImage1DEXT;
    }
    dt.glCopyMultiTexSubImage1DEXT = MakeRegalProc(loader_glCopyMultiTexSubImage1DEXT,layer);
    _getProcAddress( driver_glCopyMultiTexSubImage2DEXT, glCopyMultiTexSubImage2DEXT, "glCopyMultiTexSubImage2DEXT" );
    if( driver_glCopyMultiTexSubImage2DEXT == NULL ) {
      driver_glCopyMultiTexSubImage2DEXT = missing_glCopyMultiTexSubImage2DEXT;
    }
    dt.glCopyMultiTexSubImage2DEXT = MakeRegalProc(loader_glCopyMultiTexSubImage2DEXT,layer);
    _getProcAddress( driver_glCopyMultiTexSubImage3DEXT, glCopyMultiTexSubImage3DEXT, "glCopyMultiTexSubImage3DEXT" );
    if( driver_glCopyMultiTexSubImage3DEXT == NULL ) {
      driver_glCopyMultiTexSubImage3DEXT = missing_glCopyMultiTexSubImage3DEXT;
    }
    dt.glCopyMultiTexSubImage3DEXT = MakeRegalProc(loader_glCopyMultiTexSubImage3DEXT,layer);
    _getProcAddress( driver_glCopyTextureImage1DEXT, glCopyTextureImage1DEXT, "glCopyTextureImage1DEXT" );
    if( driver_glCopyTextureImage1DEXT == NULL ) {
      driver_glCopyTextureImage1DEXT = missing_glCopyTextureImage1DEXT;
    }
    dt.glCopyTextureImage1DEXT = MakeRegalProc(loader_glCopyTextureImage1DEXT,layer);
    _getProcAddress( driver_glCopyTextureImage2DEXT, glCopyTextureImage2DEXT, "glCopyTextureImage2DEXT" );
    if( driver_glCopyTextureImage2DEXT == NULL ) {
      driver_glCopyTextureImage2DEXT = missing_glCopyTextureImage2DEXT;
    }
    dt.glCopyTextureImage2DEXT = MakeRegalProc(loader_glCopyTextureImage2DEXT,layer);
    _getProcAddress( driver_glCopyTextureSubImage1DEXT, glCopyTextureSubImage1DEXT, "glCopyTextureSubImage1DEXT" );
    if( driver_glCopyTextureSubImage1DEXT == NULL ) {
      driver_glCopyTextureSubImage1DEXT = missing_glCopyTextureSubImage1DEXT;
    }
    dt.glCopyTextureSubImage1DEXT = MakeRegalProc(loader_glCopyTextureSubImage1DEXT,layer);
    _getProcAddress( driver_glCopyTextureSubImage2DEXT, glCopyTextureSubImage2DEXT, "glCopyTextureSubImage2DEXT" );
    if( driver_glCopyTextureSubImage2DEXT == NULL ) {
      driver_glCopyTextureSubImage2DEXT = missing_glCopyTextureSubImage2DEXT;
    }
    dt.glCopyTextureSubImage2DEXT = MakeRegalProc(loader_glCopyTextureSubImage2DEXT,layer);
    _getProcAddress( driver_glCopyTextureSubImage3DEXT, glCopyTextureSubImage3DEXT, "glCopyTextureSubImage3DEXT" );
    if( driver_glCopyTextureSubImage3DEXT == NULL ) {
      driver_glCopyTextureSubImage3DEXT = missing_glCopyTextureSubImage3DEXT;
    }
    dt.glCopyTextureSubImage3DEXT = MakeRegalProc(loader_glCopyTextureSubImage3DEXT,layer);
    _getProcAddress( driver_glDisableClientStateIndexedEXT, glDisableClientStateIndexedEXT, "glDisableClientStateIndexedEXT" );
    if( driver_glDisableClientStateIndexedEXT == NULL ) {
      driver_glDisableClientStateIndexedEXT = missing_glDisableClientStateIndexedEXT;
    }
    dt.glDisableClientStateIndexedEXT = MakeRegalProc(loader_glDisableClientStateIndexedEXT,layer);
    _getProcAddress( driver_glDisableClientStateiEXT, glDisableClientStateiEXT, "glDisableClientStateiEXT" );
    if( driver_glDisableClientStateiEXT == NULL ) {
      driver_glDisableClientStateiEXT = missing_glDisableClientStateiEXT;
    }
    dt.glDisableClientStateiEXT = MakeRegalProc(loader_glDisableClientStateiEXT,layer);
    _getProcAddress( driver_glDisableVertexArrayAttribEXT, glDisableVertexArrayAttribEXT, "glDisableVertexArrayAttribEXT" );
    if( driver_glDisableVertexArrayAttribEXT == NULL ) {
      driver_glDisableVertexArrayAttribEXT = missing_glDisableVertexArrayAttribEXT;
    }
    dt.glDisableVertexArrayAttribEXT = MakeRegalProc(loader_glDisableVertexArrayAttribEXT,layer);
    _getProcAddress( driver_glDisableVertexArrayEXT, glDisableVertexArrayEXT, "glDisableVertexArrayEXT" );
    if( driver_glDisableVertexArrayEXT == NULL ) {
      driver_glDisableVertexArrayEXT = missing_glDisableVertexArrayEXT;
    }
    dt.glDisableVertexArrayEXT = MakeRegalProc(loader_glDisableVertexArrayEXT,layer);
    _getProcAddress( driver_glEnableClientStateIndexedEXT, glEnableClientStateIndexedEXT, "glEnableClientStateIndexedEXT" );
    if( driver_glEnableClientStateIndexedEXT == NULL ) {
      driver_glEnableClientStateIndexedEXT = missing_glEnableClientStateIndexedEXT;
    }
    dt.glEnableClientStateIndexedEXT = MakeRegalProc(loader_glEnableClientStateIndexedEXT,layer);
    _getProcAddress( driver_glEnableClientStateiEXT, glEnableClientStateiEXT, "glEnableClientStateiEXT" );
    if( driver_glEnableClientStateiEXT == NULL ) {
      driver_glEnableClientStateiEXT = missing_glEnableClientStateiEXT;
    }
    dt.glEnableClientStateiEXT = MakeRegalProc(loader_glEnableClientStateiEXT,layer);
    _getProcAddress( driver_glEnableVertexArrayAttribEXT, glEnableVertexArrayAttribEXT, "glEnableVertexArrayAttribEXT" );
    if( driver_glEnableVertexArrayAttribEXT == NULL ) {
      driver_glEnableVertexArrayAttribEXT = missing_glEnableVertexArrayAttribEXT;
    }
    dt.glEnableVertexArrayAttribEXT = MakeRegalProc(loader_glEnableVertexArrayAttribEXT,layer);
    _getProcAddress( driver_glEnableVertexArrayEXT, glEnableVertexArrayEXT, "glEnableVertexArrayEXT" );
    if( driver_glEnableVertexArrayEXT == NULL ) {
      driver_glEnableVertexArrayEXT = missing_glEnableVertexArrayEXT;
    }
    dt.glEnableVertexArrayEXT = MakeRegalProc(loader_glEnableVertexArrayEXT,layer);
    _getProcAddress( driver_glFlushMappedNamedBufferRangeEXT, glFlushMappedNamedBufferRangeEXT, "glFlushMappedNamedBufferRangeEXT" );
    if( driver_glFlushMappedNamedBufferRangeEXT == NULL ) {
      driver_glFlushMappedNamedBufferRangeEXT = missing_glFlushMappedNamedBufferRangeEXT;
    }
    dt.glFlushMappedNamedBufferRangeEXT = MakeRegalProc(loader_glFlushMappedNamedBufferRangeEXT,layer);
    _getProcAddress( driver_glFramebufferDrawBufferEXT, glFramebufferDrawBufferEXT, "glFramebufferDrawBufferEXT" );
    if( driver_glFramebufferDrawBufferEXT == NULL ) {
      driver_glFramebufferDrawBufferEXT = missing_glFramebufferDrawBufferEXT;
    }
    dt.glFramebufferDrawBufferEXT = MakeRegalProc(loader_glFramebufferDrawBufferEXT,layer);
    _getProcAddress( driver_glFramebufferDrawBuffersEXT, glFramebufferDrawBuffersEXT, "glFramebufferDrawBuffersEXT" );
    if( driver_glFramebufferDrawBuffersEXT == NULL ) {
      driver_glFramebufferDrawBuffersEXT = missing_glFramebufferDrawBuffersEXT;
    }
    dt.glFramebufferDrawBuffersEXT = MakeRegalProc(loader_glFramebufferDrawBuffersEXT,layer);
    _getProcAddress( driver_glFramebufferReadBufferEXT, glFramebufferReadBufferEXT, "glFramebufferReadBufferEXT" );
    if( driver_glFramebufferReadBufferEXT == NULL ) {
      driver_glFramebufferReadBufferEXT = missing_glFramebufferReadBufferEXT;
    }
    dt.glFramebufferReadBufferEXT = MakeRegalProc(loader_glFramebufferReadBufferEXT,layer);
    _getProcAddress( driver_glGenerateMultiTexMipmapEXT, glGenerateMultiTexMipmapEXT, "glGenerateMultiTexMipmapEXT" );
    if( driver_glGenerateMultiTexMipmapEXT == NULL ) {
      driver_glGenerateMultiTexMipmapEXT = missing_glGenerateMultiTexMipmapEXT;
    }
    dt.glGenerateMultiTexMipmapEXT = MakeRegalProc(loader_glGenerateMultiTexMipmapEXT,layer);
    _getProcAddress( driver_glGenerateTextureMipmapEXT, glGenerateTextureMipmapEXT, "glGenerateTextureMipmapEXT" );
    if( driver_glGenerateTextureMipmapEXT == NULL ) {
      driver_glGenerateTextureMipmapEXT = missing_glGenerateTextureMipmapEXT;
    }
    dt.glGenerateTextureMipmapEXT = MakeRegalProc(loader_glGenerateTextureMipmapEXT,layer);
    _getProcAddress( driver_glGetCompressedMultiTexImageEXT, glGetCompressedMultiTexImageEXT, "glGetCompressedMultiTexImageEXT" );
    if( driver_glGetCompressedMultiTexImageEXT == NULL ) {
      driver_glGetCompressedMultiTexImageEXT = missing_glGetCompressedMultiTexImageEXT;
    }
    dt.glGetCompressedMultiTexImageEXT = MakeRegalProc(loader_glGetCompressedMultiTexImageEXT,layer);
    _getProcAddress( driver_glGetCompressedTextureImageEXT, glGetCompressedTextureImageEXT, "glGetCompressedTextureImageEXT" );
    if( driver_glGetCompressedTextureImageEXT == NULL ) {
      driver_glGetCompressedTextureImageEXT = missing_glGetCompressedTextureImageEXT;
    }
    dt.glGetCompressedTextureImageEXT = MakeRegalProc(loader_glGetCompressedTextureImageEXT,layer);
    _getProcAddress( driver_glGetDoubleIndexedvEXT, glGetDoubleIndexedvEXT, "glGetDoubleIndexedvEXT" );
    if( driver_glGetDoubleIndexedvEXT == NULL ) {
      driver_glGetDoubleIndexedvEXT = missing_glGetDoubleIndexedvEXT;
    }
    dt.glGetDoubleIndexedvEXT = MakeRegalProc(loader_glGetDoubleIndexedvEXT,layer);
    _getProcAddress( driver_glGetDoublei_vEXT, glGetDoublei_vEXT, "glGetDoublei_vEXT" );
    if( driver_glGetDoublei_vEXT == NULL ) {
      driver_glGetDoublei_vEXT = missing_glGetDoublei_vEXT;
    }
    dt.glGetDoublei_vEXT = MakeRegalProc(loader_glGetDoublei_vEXT,layer);
    _getProcAddress( driver_glGetFloatIndexedvEXT, glGetFloatIndexedvEXT, "glGetFloatIndexedvEXT" );
    if( driver_glGetFloatIndexedvEXT == NULL ) {
      driver_glGetFloatIndexedvEXT = missing_glGetFloatIndexedvEXT;
    }
    dt.glGetFloatIndexedvEXT = MakeRegalProc(loader_glGetFloatIndexedvEXT,layer);
    _getProcAddress( driver_glGetFloati_vEXT, glGetFloati_vEXT, "glGetFloati_vEXT" );
    if( driver_glGetFloati_vEXT == NULL ) {
      driver_glGetFloati_vEXT = missing_glGetFloati_vEXT;
    }
    dt.glGetFloati_vEXT = MakeRegalProc(loader_glGetFloati_vEXT,layer);
    _getProcAddress( driver_glGetFramebufferParameterivEXT, glGetFramebufferParameterivEXT, "glGetFramebufferParameterivEXT" );
    if( driver_glGetFramebufferParameterivEXT == NULL ) {
      driver_glGetFramebufferParameterivEXT = missing_glGetFramebufferParameterivEXT;
    }
    dt.glGetFramebufferParameterivEXT = MakeRegalProc(loader_glGetFramebufferParameterivEXT,layer);
    _getProcAddress( driver_glGetMultiTexEnvfvEXT, glGetMultiTexEnvfvEXT, "glGetMultiTexEnvfvEXT" );
    if( driver_glGetMultiTexEnvfvEXT == NULL ) {
      driver_glGetMultiTexEnvfvEXT = missing_glGetMultiTexEnvfvEXT;
    }
    dt.glGetMultiTexEnvfvEXT = MakeRegalProc(loader_glGetMultiTexEnvfvEXT,layer);
    _getProcAddress( driver_glGetMultiTexEnvivEXT, glGetMultiTexEnvivEXT, "glGetMultiTexEnvivEXT" );
    if( driver_glGetMultiTexEnvivEXT == NULL ) {
      driver_glGetMultiTexEnvivEXT = missing_glGetMultiTexEnvivEXT;
    }
    dt.glGetMultiTexEnvivEXT = MakeRegalProc(loader_glGetMultiTexEnvivEXT,layer);
    _getProcAddress( driver_glGetMultiTexGendvEXT, glGetMultiTexGendvEXT, "glGetMultiTexGendvEXT" );
    if( driver_glGetMultiTexGendvEXT == NULL ) {
      driver_glGetMultiTexGendvEXT = missing_glGetMultiTexGendvEXT;
    }
    dt.glGetMultiTexGendvEXT = MakeRegalProc(loader_glGetMultiTexGendvEXT,layer);
    _getProcAddress( driver_glGetMultiTexGenfvEXT, glGetMultiTexGenfvEXT, "glGetMultiTexGenfvEXT" );
    if( driver_glGetMultiTexGenfvEXT == NULL ) {
      driver_glGetMultiTexGenfvEXT = missing_glGetMultiTexGenfvEXT;
    }
    dt.glGetMultiTexGenfvEXT = MakeRegalProc(loader_glGetMultiTexGenfvEXT,layer);
    _getProcAddress( driver_glGetMultiTexGenivEXT, glGetMultiTexGenivEXT, "glGetMultiTexGenivEXT" );
    if( driver_glGetMultiTexGenivEXT == NULL ) {
      driver_glGetMultiTexGenivEXT = missing_glGetMultiTexGenivEXT;
    }
    dt.glGetMultiTexGenivEXT = MakeRegalProc(loader_glGetMultiTexGenivEXT,layer);
    _getProcAddress( driver_glGetMultiTexImageEXT, glGetMultiTexImageEXT, "glGetMultiTexImageEXT" );
    if( driver_glGetMultiTexImageEXT == NULL ) {
      driver_glGetMultiTexImageEXT = missing_glGetMultiTexImageEXT;
    }
    dt.glGetMultiTexImageEXT = MakeRegalProc(loader_glGetMultiTexImageEXT,layer);
    _getProcAddress( driver_glGetMultiTexLevelParameterfvEXT, glGetMultiTexLevelParameterfvEXT, "glGetMultiTexLevelParameterfvEXT" );
    if( driver_glGetMultiTexLevelParameterfvEXT == NULL ) {
      driver_glGetMultiTexLevelParameterfvEXT = missing_glGetMultiTexLevelParameterfvEXT;
    }
    dt.glGetMultiTexLevelParameterfvEXT = MakeRegalProc(loader_glGetMultiTexLevelParameterfvEXT,layer);
    _getProcAddress( driver_glGetMultiTexLevelParameterivEXT, glGetMultiTexLevelParameterivEXT, "glGetMultiTexLevelParameterivEXT" );
    if( driver_glGetMultiTexLevelParameterivEXT == NULL ) {
      driver_glGetMultiTexLevelParameterivEXT = missing_glGetMultiTexLevelParameterivEXT;
    }
    dt.glGetMultiTexLevelParameterivEXT = MakeRegalProc(loader_glGetMultiTexLevelParameterivEXT,layer);
    _getProcAddress( driver_glGetMultiTexParameterIivEXT, glGetMultiTexParameterIivEXT, "glGetMultiTexParameterIivEXT" );
    if( driver_glGetMultiTexParameterIivEXT == NULL ) {
      driver_glGetMultiTexParameterIivEXT = missing_glGetMultiTexParameterIivEXT;
    }
    dt.glGetMultiTexParameterIivEXT = MakeRegalProc(loader_glGetMultiTexParameterIivEXT,layer);
    _getProcAddress( driver_glGetMultiTexParameterIuivEXT, glGetMultiTexParameterIuivEXT, "glGetMultiTexParameterIuivEXT" );
    if( driver_glGetMultiTexParameterIuivEXT == NULL ) {
      driver_glGetMultiTexParameterIuivEXT = missing_glGetMultiTexParameterIuivEXT;
    }
    dt.glGetMultiTexParameterIuivEXT = MakeRegalProc(loader_glGetMultiTexParameterIuivEXT,layer);
    _getProcAddress( driver_glGetMultiTexParameterfvEXT, glGetMultiTexParameterfvEXT, "glGetMultiTexParameterfvEXT" );
    if( driver_glGetMultiTexParameterfvEXT == NULL ) {
      driver_glGetMultiTexParameterfvEXT = missing_glGetMultiTexParameterfvEXT;
    }
    dt.glGetMultiTexParameterfvEXT = MakeRegalProc(loader_glGetMultiTexParameterfvEXT,layer);
    _getProcAddress( driver_glGetMultiTexParameterivEXT, glGetMultiTexParameterivEXT, "glGetMultiTexParameterivEXT" );
    if( driver_glGetMultiTexParameterivEXT == NULL ) {
      driver_glGetMultiTexParameterivEXT = missing_glGetMultiTexParameterivEXT;
    }
    dt.glGetMultiTexParameterivEXT = MakeRegalProc(loader_glGetMultiTexParameterivEXT,layer);
    _getProcAddress( driver_glGetNamedBufferParameterivEXT, glGetNamedBufferParameterivEXT, "glGetNamedBufferParameterivEXT" );
    if( driver_glGetNamedBufferParameterivEXT == NULL ) {
      driver_glGetNamedBufferParameterivEXT = missing_glGetNamedBufferParameterivEXT;
    }
    dt.glGetNamedBufferParameterivEXT = MakeRegalProc(loader_glGetNamedBufferParameterivEXT,layer);
    _getProcAddress( driver_glGetNamedBufferPointervEXT, glGetNamedBufferPointervEXT, "glGetNamedBufferPointervEXT" );
    if( driver_glGetNamedBufferPointervEXT == NULL ) {
      driver_glGetNamedBufferPointervEXT = missing_glGetNamedBufferPointervEXT;
    }
    dt.glGetNamedBufferPointervEXT = MakeRegalProc(loader_glGetNamedBufferPointervEXT,layer);
    _getProcAddress( driver_glGetNamedBufferSubDataEXT, glGetNamedBufferSubDataEXT, "glGetNamedBufferSubDataEXT" );
    if( driver_glGetNamedBufferSubDataEXT == NULL ) {
      driver_glGetNamedBufferSubDataEXT = missing_glGetNamedBufferSubDataEXT;
    }
    dt.glGetNamedBufferSubDataEXT = MakeRegalProc(loader_glGetNamedBufferSubDataEXT,layer);
    _getProcAddress( driver_glGetNamedFramebufferAttachmentParameterivEXT, glGetNamedFramebufferAttachmentParameterivEXT, "glGetNamedFramebufferAttachmentParameterivEXT" );
    if( driver_glGetNamedFramebufferAttachmentParameterivEXT == NULL ) {
      driver_glGetNamedFramebufferAttachmentParameterivEXT = missing_glGetNamedFramebufferAttachmentParameterivEXT;
    }
    dt.glGetNamedFramebufferAttachmentParameterivEXT = MakeRegalProc(loader_glGetNamedFramebufferAttachmentParameterivEXT,layer);
    _getProcAddress( driver_glGetNamedProgramLocalParameterIivEXT, glGetNamedProgramLocalParameterIivEXT, "glGetNamedProgramLocalParameterIivEXT" );
    if( driver_glGetNamedProgramLocalParameterIivEXT == NULL ) {
      driver_glGetNamedProgramLocalParameterIivEXT = missing_glGetNamedProgramLocalParameterIivEXT;
    }
    dt.glGetNamedProgramLocalParameterIivEXT = MakeRegalProc(loader_glGetNamedProgramLocalParameterIivEXT,layer);
    _getProcAddress( driver_glGetNamedProgramLocalParameterIuivEXT, glGetNamedProgramLocalParameterIuivEXT, "glGetNamedProgramLocalParameterIuivEXT" );
    if( driver_glGetNamedProgramLocalParameterIuivEXT == NULL ) {
      driver_glGetNamedProgramLocalParameterIuivEXT = missing_glGetNamedProgramLocalParameterIuivEXT;
    }
    dt.glGetNamedProgramLocalParameterIuivEXT = MakeRegalProc(loader_glGetNamedProgramLocalParameterIuivEXT,layer);
    _getProcAddress( driver_glGetNamedProgramLocalParameterdvEXT, glGetNamedProgramLocalParameterdvEXT, "glGetNamedProgramLocalParameterdvEXT" );
    if( driver_glGetNamedProgramLocalParameterdvEXT == NULL ) {
      driver_glGetNamedProgramLocalParameterdvEXT = missing_glGetNamedProgramLocalParameterdvEXT;
    }
    dt.glGetNamedProgramLocalParameterdvEXT = MakeRegalProc(loader_glGetNamedProgramLocalParameterdvEXT,layer);
    _getProcAddress( driver_glGetNamedProgramLocalParameterfvEXT, glGetNamedProgramLocalParameterfvEXT, "glGetNamedProgramLocalParameterfvEXT" );
    if( driver_glGetNamedProgramLocalParameterfvEXT == NULL ) {
      driver_glGetNamedProgramLocalParameterfvEXT = missing_glGetNamedProgramLocalParameterfvEXT;
    }
    dt.glGetNamedProgramLocalParameterfvEXT = MakeRegalProc(loader_glGetNamedProgramLocalParameterfvEXT,layer);
    _getProcAddress( driver_glGetNamedProgramStringEXT, glGetNamedProgramStringEXT, "glGetNamedProgramStringEXT" );
    if( driver_glGetNamedProgramStringEXT == NULL ) {
      driver_glGetNamedProgramStringEXT = missing_glGetNamedProgramStringEXT;
    }
    dt.glGetNamedProgramStringEXT = MakeRegalProc(loader_glGetNamedProgramStringEXT,layer);
    _getProcAddress( driver_glGetNamedProgramivEXT, glGetNamedProgramivEXT, "glGetNamedProgramivEXT" );
    if( driver_glGetNamedProgramivEXT == NULL ) {
      driver_glGetNamedProgramivEXT = missing_glGetNamedProgramivEXT;
    }
    dt.glGetNamedProgramivEXT = MakeRegalProc(loader_glGetNamedProgramivEXT,layer);
    _getProcAddress( driver_glGetNamedRenderbufferParameterivEXT, glGetNamedRenderbufferParameterivEXT, "glGetNamedRenderbufferParameterivEXT" );
    if( driver_glGetNamedRenderbufferParameterivEXT == NULL ) {
      driver_glGetNamedRenderbufferParameterivEXT = missing_glGetNamedRenderbufferParameterivEXT;
    }
    dt.glGetNamedRenderbufferParameterivEXT = MakeRegalProc(loader_glGetNamedRenderbufferParameterivEXT,layer);
    _getProcAddress( driver_glGetPointerIndexedvEXT, glGetPointerIndexedvEXT, "glGetPointerIndexedvEXT" );
    if( driver_glGetPointerIndexedvEXT == NULL ) {
      driver_glGetPointerIndexedvEXT = missing_glGetPointerIndexedvEXT;
    }
    dt.glGetPointerIndexedvEXT = MakeRegalProc(loader_glGetPointerIndexedvEXT,layer);
    _getProcAddress( driver_glGetPointeri_vEXT, glGetPointeri_vEXT, "glGetPointeri_vEXT" );
    if( driver_glGetPointeri_vEXT == NULL ) {
      driver_glGetPointeri_vEXT = missing_glGetPointeri_vEXT;
    }
    dt.glGetPointeri_vEXT = MakeRegalProc(loader_glGetPointeri_vEXT,layer);
    _getProcAddress( driver_glGetTextureImageEXT, glGetTextureImageEXT, "glGetTextureImageEXT" );
    if( driver_glGetTextureImageEXT == NULL ) {
      driver_glGetTextureImageEXT = missing_glGetTextureImageEXT;
    }
    dt.glGetTextureImageEXT = MakeRegalProc(loader_glGetTextureImageEXT,layer);
    _getProcAddress( driver_glGetTextureLevelParameterfvEXT, glGetTextureLevelParameterfvEXT, "glGetTextureLevelParameterfvEXT" );
    if( driver_glGetTextureLevelParameterfvEXT == NULL ) {
      driver_glGetTextureLevelParameterfvEXT = missing_glGetTextureLevelParameterfvEXT;
    }
    dt.glGetTextureLevelParameterfvEXT = MakeRegalProc(loader_glGetTextureLevelParameterfvEXT,layer);
    _getProcAddress( driver_glGetTextureLevelParameterivEXT, glGetTextureLevelParameterivEXT, "glGetTextureLevelParameterivEXT" );
    if( driver_glGetTextureLevelParameterivEXT == NULL ) {
      driver_glGetTextureLevelParameterivEXT = missing_glGetTextureLevelParameterivEXT;
    }
    dt.glGetTextureLevelParameterivEXT = MakeRegalProc(loader_glGetTextureLevelParameterivEXT,layer);
    _getProcAddress( driver_glGetTextureParameterIivEXT, glGetTextureParameterIivEXT, "glGetTextureParameterIivEXT" );
    if( driver_glGetTextureParameterIivEXT == NULL ) {
      driver_glGetTextureParameterIivEXT = missing_glGetTextureParameterIivEXT;
    }
    dt.glGetTextureParameterIivEXT = MakeRegalProc(loader_glGetTextureParameterIivEXT,layer);
    _getProcAddress( driver_glGetTextureParameterIuivEXT, glGetTextureParameterIuivEXT, "glGetTextureParameterIuivEXT" );
    if( driver_glGetTextureParameterIuivEXT == NULL ) {
      driver_glGetTextureParameterIuivEXT = missing_glGetTextureParameterIuivEXT;
    }
    dt.glGetTextureParameterIuivEXT = MakeRegalProc(loader_glGetTextureParameterIuivEXT,layer);
    _getProcAddress( driver_glGetTextureParameterfvEXT, glGetTextureParameterfvEXT, "glGetTextureParameterfvEXT" );
    if( driver_glGetTextureParameterfvEXT == NULL ) {
      driver_glGetTextureParameterfvEXT = missing_glGetTextureParameterfvEXT;
    }
    dt.glGetTextureParameterfvEXT = MakeRegalProc(loader_glGetTextureParameterfvEXT,layer);
    _getProcAddress( driver_glGetTextureParameterivEXT, glGetTextureParameterivEXT, "glGetTextureParameterivEXT" );
    if( driver_glGetTextureParameterivEXT == NULL ) {
      driver_glGetTextureParameterivEXT = missing_glGetTextureParameterivEXT;
    }
    dt.glGetTextureParameterivEXT = MakeRegalProc(loader_glGetTextureParameterivEXT,layer);
    _getProcAddress( driver_glGetVertexArrayIntegeri_vEXT, glGetVertexArrayIntegeri_vEXT, "glGetVertexArrayIntegeri_vEXT" );
    if( driver_glGetVertexArrayIntegeri_vEXT == NULL ) {
      driver_glGetVertexArrayIntegeri_vEXT = missing_glGetVertexArrayIntegeri_vEXT;
    }
    dt.glGetVertexArrayIntegeri_vEXT = MakeRegalProc(loader_glGetVertexArrayIntegeri_vEXT,layer);
    _getProcAddress( driver_glGetVertexArrayIntegervEXT, glGetVertexArrayIntegervEXT, "glGetVertexArrayIntegervEXT" );
    if( driver_glGetVertexArrayIntegervEXT == NULL ) {
      driver_glGetVertexArrayIntegervEXT = missing_glGetVertexArrayIntegervEXT;
    }
    dt.glGetVertexArrayIntegervEXT = MakeRegalProc(loader_glGetVertexArrayIntegervEXT,layer);
    _getProcAddress( driver_glGetVertexArrayPointeri_vEXT, glGetVertexArrayPointeri_vEXT, "glGetVertexArrayPointeri_vEXT" );
    if( driver_glGetVertexArrayPointeri_vEXT == NULL ) {
      driver_glGetVertexArrayPointeri_vEXT = missing_glGetVertexArrayPointeri_vEXT;
    }
    dt.glGetVertexArrayPointeri_vEXT = MakeRegalProc(loader_glGetVertexArrayPointeri_vEXT,layer);
    _getProcAddress( driver_glGetVertexArrayPointervEXT, glGetVertexArrayPointervEXT, "glGetVertexArrayPointervEXT" );
    if( driver_glGetVertexArrayPointervEXT == NULL ) {
      driver_glGetVertexArrayPointervEXT = missing_glGetVertexArrayPointervEXT;
    }
    dt.glGetVertexArrayPointervEXT = MakeRegalProc(loader_glGetVertexArrayPointervEXT,layer);
    _getProcAddress( driver_glMapNamedBufferEXT, glMapNamedBufferEXT, "glMapNamedBufferEXT" );
    if( driver_glMapNamedBufferEXT == NULL ) {
      driver_glMapNamedBufferEXT = missing_glMapNamedBufferEXT;
    }
    dt.glMapNamedBufferEXT = MakeRegalProc(loader_glMapNamedBufferEXT,layer);
    _getProcAddress( driver_glMapNamedBufferRangeEXT, glMapNamedBufferRangeEXT, "glMapNamedBufferRangeEXT" );
    if( driver_glMapNamedBufferRangeEXT == NULL ) {
      driver_glMapNamedBufferRangeEXT = missing_glMapNamedBufferRangeEXT;
    }
    dt.glMapNamedBufferRangeEXT = MakeRegalProc(loader_glMapNamedBufferRangeEXT,layer);
    _getProcAddress( driver_glMatrixFrustumEXT, glMatrixFrustumEXT, "glMatrixFrustumEXT" );
    if( driver_glMatrixFrustumEXT == NULL ) {
      driver_glMatrixFrustumEXT = missing_glMatrixFrustumEXT;
    }
    dt.glMatrixFrustumEXT = MakeRegalProc(loader_glMatrixFrustumEXT,layer);
    _getProcAddress( driver_glMatrixLoadIdentityEXT, glMatrixLoadIdentityEXT, "glMatrixLoadIdentityEXT" );
    if( driver_glMatrixLoadIdentityEXT == NULL ) {
      driver_glMatrixLoadIdentityEXT = missing_glMatrixLoadIdentityEXT;
    }
    dt.glMatrixLoadIdentityEXT = MakeRegalProc(loader_glMatrixLoadIdentityEXT,layer);
    _getProcAddress( driver_glMatrixLoadTransposedEXT, glMatrixLoadTransposedEXT, "glMatrixLoadTransposedEXT" );
    if( driver_glMatrixLoadTransposedEXT == NULL ) {
      driver_glMatrixLoadTransposedEXT = missing_glMatrixLoadTransposedEXT;
    }
    dt.glMatrixLoadTransposedEXT = MakeRegalProc(loader_glMatrixLoadTransposedEXT,layer);
    _getProcAddress( driver_glMatrixLoadTransposefEXT, glMatrixLoadTransposefEXT, "glMatrixLoadTransposefEXT" );
    if( driver_glMatrixLoadTransposefEXT == NULL ) {
      driver_glMatrixLoadTransposefEXT = missing_glMatrixLoadTransposefEXT;
    }
    dt.glMatrixLoadTransposefEXT = MakeRegalProc(loader_glMatrixLoadTransposefEXT,layer);
    _getProcAddress( driver_glMatrixLoaddEXT, glMatrixLoaddEXT, "glMatrixLoaddEXT" );
    if( driver_glMatrixLoaddEXT == NULL ) {
      driver_glMatrixLoaddEXT = missing_glMatrixLoaddEXT;
    }
    dt.glMatrixLoaddEXT = MakeRegalProc(loader_glMatrixLoaddEXT,layer);
    _getProcAddress( driver_glMatrixLoadfEXT, glMatrixLoadfEXT, "glMatrixLoadfEXT" );
    if( driver_glMatrixLoadfEXT == NULL ) {
      driver_glMatrixLoadfEXT = missing_glMatrixLoadfEXT;
    }
    dt.glMatrixLoadfEXT = MakeRegalProc(loader_glMatrixLoadfEXT,layer);
    _getProcAddress( driver_glMatrixMultTransposedEXT, glMatrixMultTransposedEXT, "glMatrixMultTransposedEXT" );
    if( driver_glMatrixMultTransposedEXT == NULL ) {
      driver_glMatrixMultTransposedEXT = missing_glMatrixMultTransposedEXT;
    }
    dt.glMatrixMultTransposedEXT = MakeRegalProc(loader_glMatrixMultTransposedEXT,layer);
    _getProcAddress( driver_glMatrixMultTransposefEXT, glMatrixMultTransposefEXT, "glMatrixMultTransposefEXT" );
    if( driver_glMatrixMultTransposefEXT == NULL ) {
      driver_glMatrixMultTransposefEXT = missing_glMatrixMultTransposefEXT;
    }
    dt.glMatrixMultTransposefEXT = MakeRegalProc(loader_glMatrixMultTransposefEXT,layer);
    _getProcAddress( driver_glMatrixMultdEXT, glMatrixMultdEXT, "glMatrixMultdEXT" );
    if( driver_glMatrixMultdEXT == NULL ) {
      driver_glMatrixMultdEXT = missing_glMatrixMultdEXT;
    }
    dt.glMatrixMultdEXT = MakeRegalProc(loader_glMatrixMultdEXT,layer);
    _getProcAddress( driver_glMatrixMultfEXT, glMatrixMultfEXT, "glMatrixMultfEXT" );
    if( driver_glMatrixMultfEXT == NULL ) {
      driver_glMatrixMultfEXT = missing_glMatrixMultfEXT;
    }
    dt.glMatrixMultfEXT = MakeRegalProc(loader_glMatrixMultfEXT,layer);
    _getProcAddress( driver_glMatrixOrthoEXT, glMatrixOrthoEXT, "glMatrixOrthoEXT" );
    if( driver_glMatrixOrthoEXT == NULL ) {
      driver_glMatrixOrthoEXT = missing_glMatrixOrthoEXT;
    }
    dt.glMatrixOrthoEXT = MakeRegalProc(loader_glMatrixOrthoEXT,layer);
    _getProcAddress( driver_glMatrixPopEXT, glMatrixPopEXT, "glMatrixPopEXT" );
    if( driver_glMatrixPopEXT == NULL ) {
      driver_glMatrixPopEXT = missing_glMatrixPopEXT;
    }
    dt.glMatrixPopEXT = MakeRegalProc(loader_glMatrixPopEXT,layer);
    _getProcAddress( driver_glMatrixPushEXT, glMatrixPushEXT, "glMatrixPushEXT" );
    if( driver_glMatrixPushEXT == NULL ) {
      driver_glMatrixPushEXT = missing_glMatrixPushEXT;
    }
    dt.glMatrixPushEXT = MakeRegalProc(loader_glMatrixPushEXT,layer);
    _getProcAddress( driver_glMatrixRotatedEXT, glMatrixRotatedEXT, "glMatrixRotatedEXT" );
    if( driver_glMatrixRotatedEXT == NULL ) {
      driver_glMatrixRotatedEXT = missing_glMatrixRotatedEXT;
    }
    dt.glMatrixRotatedEXT = MakeRegalProc(loader_glMatrixRotatedEXT,layer);
    _getProcAddress( driver_glMatrixRotatefEXT, glMatrixRotatefEXT, "glMatrixRotatefEXT" );
    if( driver_glMatrixRotatefEXT == NULL ) {
      driver_glMatrixRotatefEXT = missing_glMatrixRotatefEXT;
    }
    dt.glMatrixRotatefEXT = MakeRegalProc(loader_glMatrixRotatefEXT,layer);
    _getProcAddress( driver_glMatrixScaledEXT, glMatrixScaledEXT, "glMatrixScaledEXT" );
    if( driver_glMatrixScaledEXT == NULL ) {
      driver_glMatrixScaledEXT = missing_glMatrixScaledEXT;
    }
    dt.glMatrixScaledEXT = MakeRegalProc(loader_glMatrixScaledEXT,layer);
    _getProcAddress( driver_glMatrixScalefEXT, glMatrixScalefEXT, "glMatrixScalefEXT" );
    if( driver_glMatrixScalefEXT == NULL ) {
      driver_glMatrixScalefEXT = missing_glMatrixScalefEXT;
    }
    dt.glMatrixScalefEXT = MakeRegalProc(loader_glMatrixScalefEXT,layer);
    _getProcAddress( driver_glMatrixTranslatedEXT, glMatrixTranslatedEXT, "glMatrixTranslatedEXT" );
    if( driver_glMatrixTranslatedEXT == NULL ) {
      driver_glMatrixTranslatedEXT = missing_glMatrixTranslatedEXT;
    }
    dt.glMatrixTranslatedEXT = MakeRegalProc(loader_glMatrixTranslatedEXT,layer);
    _getProcAddress( driver_glMatrixTranslatefEXT, glMatrixTranslatefEXT, "glMatrixTranslatefEXT" );
    if( driver_glMatrixTranslatefEXT == NULL ) {
      driver_glMatrixTranslatefEXT = missing_glMatrixTranslatefEXT;
    }
    dt.glMatrixTranslatefEXT = MakeRegalProc(loader_glMatrixTranslatefEXT,layer);
    _getProcAddress( driver_glMultiTexBufferEXT, glMultiTexBufferEXT, "glMultiTexBufferEXT" );
    if( driver_glMultiTexBufferEXT == NULL ) {
      driver_glMultiTexBufferEXT = missing_glMultiTexBufferEXT;
    }
    dt.glMultiTexBufferEXT = MakeRegalProc(loader_glMultiTexBufferEXT,layer);
    _getProcAddress( driver_glMultiTexCoordPointerEXT, glMultiTexCoordPointerEXT, "glMultiTexCoordPointerEXT" );
    if( driver_glMultiTexCoordPointerEXT == NULL ) {
      driver_glMultiTexCoordPointerEXT = missing_glMultiTexCoordPointerEXT;
    }
    dt.glMultiTexCoordPointerEXT = MakeRegalProc(loader_glMultiTexCoordPointerEXT,layer);
    _getProcAddress( driver_glMultiTexEnvfEXT, glMultiTexEnvfEXT, "glMultiTexEnvfEXT" );
    if( driver_glMultiTexEnvfEXT == NULL ) {
      driver_glMultiTexEnvfEXT = missing_glMultiTexEnvfEXT;
    }
    dt.glMultiTexEnvfEXT = MakeRegalProc(loader_glMultiTexEnvfEXT,layer);
    _getProcAddress( driver_glMultiTexEnvfvEXT, glMultiTexEnvfvEXT, "glMultiTexEnvfvEXT" );
    if( driver_glMultiTexEnvfvEXT == NULL ) {
      driver_glMultiTexEnvfvEXT = missing_glMultiTexEnvfvEXT;
    }
    dt.glMultiTexEnvfvEXT = MakeRegalProc(loader_glMultiTexEnvfvEXT,layer);
    _getProcAddress( driver_glMultiTexEnviEXT, glMultiTexEnviEXT, "glMultiTexEnviEXT" );
    if( driver_glMultiTexEnviEXT == NULL ) {
      driver_glMultiTexEnviEXT = missing_glMultiTexEnviEXT;
    }
    dt.glMultiTexEnviEXT = MakeRegalProc(loader_glMultiTexEnviEXT,layer);
    _getProcAddress( driver_glMultiTexEnvivEXT, glMultiTexEnvivEXT, "glMultiTexEnvivEXT" );
    if( driver_glMultiTexEnvivEXT == NULL ) {
      driver_glMultiTexEnvivEXT = missing_glMultiTexEnvivEXT;
    }
    dt.glMultiTexEnvivEXT = MakeRegalProc(loader_glMultiTexEnvivEXT,layer);
    _getProcAddress( driver_glMultiTexGendEXT, glMultiTexGendEXT, "glMultiTexGendEXT" );
    if( driver_glMultiTexGendEXT == NULL ) {
      driver_glMultiTexGendEXT = missing_glMultiTexGendEXT;
    }
    dt.glMultiTexGendEXT = MakeRegalProc(loader_glMultiTexGendEXT,layer);
    _getProcAddress( driver_glMultiTexGendvEXT, glMultiTexGendvEXT, "glMultiTexGendvEXT" );
    if( driver_glMultiTexGendvEXT == NULL ) {
      driver_glMultiTexGendvEXT = missing_glMultiTexGendvEXT;
    }
    dt.glMultiTexGendvEXT = MakeRegalProc(loader_glMultiTexGendvEXT,layer);
    _getProcAddress( driver_glMultiTexGenfEXT, glMultiTexGenfEXT, "glMultiTexGenfEXT" );
    if( driver_glMultiTexGenfEXT == NULL ) {
      driver_glMultiTexGenfEXT = missing_glMultiTexGenfEXT;
    }
    dt.glMultiTexGenfEXT = MakeRegalProc(loader_glMultiTexGenfEXT,layer);
    _getProcAddress( driver_glMultiTexGenfvEXT, glMultiTexGenfvEXT, "glMultiTexGenfvEXT" );
    if( driver_glMultiTexGenfvEXT == NULL ) {
      driver_glMultiTexGenfvEXT = missing_glMultiTexGenfvEXT;
    }
    dt.glMultiTexGenfvEXT = MakeRegalProc(loader_glMultiTexGenfvEXT,layer);
    _getProcAddress( driver_glMultiTexGeniEXT, glMultiTexGeniEXT, "glMultiTexGeniEXT" );
    if( driver_glMultiTexGeniEXT == NULL ) {
      driver_glMultiTexGeniEXT = missing_glMultiTexGeniEXT;
    }
    dt.glMultiTexGeniEXT = MakeRegalProc(loader_glMultiTexGeniEXT,layer);
    _getProcAddress( driver_glMultiTexGenivEXT, glMultiTexGenivEXT, "glMultiTexGenivEXT" );
    if( driver_glMultiTexGenivEXT == NULL ) {
      driver_glMultiTexGenivEXT = missing_glMultiTexGenivEXT;
    }
    dt.glMultiTexGenivEXT = MakeRegalProc(loader_glMultiTexGenivEXT,layer);
    _getProcAddress( driver_glMultiTexImage1DEXT, glMultiTexImage1DEXT, "glMultiTexImage1DEXT" );
    if( driver_glMultiTexImage1DEXT == NULL ) {
      driver_glMultiTexImage1DEXT = missing_glMultiTexImage1DEXT;
    }
    dt.glMultiTexImage1DEXT = MakeRegalProc(loader_glMultiTexImage1DEXT,layer);
    _getProcAddress( driver_glMultiTexImage2DEXT, glMultiTexImage2DEXT, "glMultiTexImage2DEXT" );
    if( driver_glMultiTexImage2DEXT == NULL ) {
      driver_glMultiTexImage2DEXT = missing_glMultiTexImage2DEXT;
    }
    dt.glMultiTexImage2DEXT = MakeRegalProc(loader_glMultiTexImage2DEXT,layer);
    _getProcAddress( driver_glMultiTexImage3DEXT, glMultiTexImage3DEXT, "glMultiTexImage3DEXT" );
    if( driver_glMultiTexImage3DEXT == NULL ) {
      driver_glMultiTexImage3DEXT = missing_glMultiTexImage3DEXT;
    }
    dt.glMultiTexImage3DEXT = MakeRegalProc(loader_glMultiTexImage3DEXT,layer);
    _getProcAddress( driver_glMultiTexParameterIivEXT, glMultiTexParameterIivEXT, "glMultiTexParameterIivEXT" );
    if( driver_glMultiTexParameterIivEXT == NULL ) {
      driver_glMultiTexParameterIivEXT = missing_glMultiTexParameterIivEXT;
    }
    dt.glMultiTexParameterIivEXT = MakeRegalProc(loader_glMultiTexParameterIivEXT,layer);
    _getProcAddress( driver_glMultiTexParameterIuivEXT, glMultiTexParameterIuivEXT, "glMultiTexParameterIuivEXT" );
    if( driver_glMultiTexParameterIuivEXT == NULL ) {
      driver_glMultiTexParameterIuivEXT = missing_glMultiTexParameterIuivEXT;
    }
    dt.glMultiTexParameterIuivEXT = MakeRegalProc(loader_glMultiTexParameterIuivEXT,layer);
    _getProcAddress( driver_glMultiTexParameterfEXT, glMultiTexParameterfEXT, "glMultiTexParameterfEXT" );
    if( driver_glMultiTexParameterfEXT == NULL ) {
      driver_glMultiTexParameterfEXT = missing_glMultiTexParameterfEXT;
    }
    dt.glMultiTexParameterfEXT = MakeRegalProc(loader_glMultiTexParameterfEXT,layer);
    _getProcAddress( driver_glMultiTexParameterfvEXT, glMultiTexParameterfvEXT, "glMultiTexParameterfvEXT" );
    if( driver_glMultiTexParameterfvEXT == NULL ) {
      driver_glMultiTexParameterfvEXT = missing_glMultiTexParameterfvEXT;
    }
    dt.glMultiTexParameterfvEXT = MakeRegalProc(loader_glMultiTexParameterfvEXT,layer);
    _getProcAddress( driver_glMultiTexParameteriEXT, glMultiTexParameteriEXT, "glMultiTexParameteriEXT" );
    if( driver_glMultiTexParameteriEXT == NULL ) {
      driver_glMultiTexParameteriEXT = missing_glMultiTexParameteriEXT;
    }
    dt.glMultiTexParameteriEXT = MakeRegalProc(loader_glMultiTexParameteriEXT,layer);
    _getProcAddress( driver_glMultiTexParameterivEXT, glMultiTexParameterivEXT, "glMultiTexParameterivEXT" );
    if( driver_glMultiTexParameterivEXT == NULL ) {
      driver_glMultiTexParameterivEXT = missing_glMultiTexParameterivEXT;
    }
    dt.glMultiTexParameterivEXT = MakeRegalProc(loader_glMultiTexParameterivEXT,layer);
    _getProcAddress( driver_glMultiTexRenderbufferEXT, glMultiTexRenderbufferEXT, "glMultiTexRenderbufferEXT" );
    if( driver_glMultiTexRenderbufferEXT == NULL ) {
      driver_glMultiTexRenderbufferEXT = missing_glMultiTexRenderbufferEXT;
    }
    dt.glMultiTexRenderbufferEXT = MakeRegalProc(loader_glMultiTexRenderbufferEXT,layer);
    _getProcAddress( driver_glMultiTexSubImage1DEXT, glMultiTexSubImage1DEXT, "glMultiTexSubImage1DEXT" );
    if( driver_glMultiTexSubImage1DEXT == NULL ) {
      driver_glMultiTexSubImage1DEXT = missing_glMultiTexSubImage1DEXT;
    }
    dt.glMultiTexSubImage1DEXT = MakeRegalProc(loader_glMultiTexSubImage1DEXT,layer);
    _getProcAddress( driver_glMultiTexSubImage2DEXT, glMultiTexSubImage2DEXT, "glMultiTexSubImage2DEXT" );
    if( driver_glMultiTexSubImage2DEXT == NULL ) {
      driver_glMultiTexSubImage2DEXT = missing_glMultiTexSubImage2DEXT;
    }
    dt.glMultiTexSubImage2DEXT = MakeRegalProc(loader_glMultiTexSubImage2DEXT,layer);
    _getProcAddress( driver_glMultiTexSubImage3DEXT, glMultiTexSubImage3DEXT, "glMultiTexSubImage3DEXT" );
    if( driver_glMultiTexSubImage3DEXT == NULL ) {
      driver_glMultiTexSubImage3DEXT = missing_glMultiTexSubImage3DEXT;
    }
    dt.glMultiTexSubImage3DEXT = MakeRegalProc(loader_glMultiTexSubImage3DEXT,layer);
    _getProcAddress( driver_glNamedBufferDataEXT, glNamedBufferDataEXT, "glNamedBufferDataEXT" );
    if( driver_glNamedBufferDataEXT == NULL ) {
      driver_glNamedBufferDataEXT = missing_glNamedBufferDataEXT;
    }
    dt.glNamedBufferDataEXT = MakeRegalProc(loader_glNamedBufferDataEXT,layer);
    _getProcAddress( driver_glNamedBufferSubDataEXT, glNamedBufferSubDataEXT, "glNamedBufferSubDataEXT" );
    if( driver_glNamedBufferSubDataEXT == NULL ) {
      driver_glNamedBufferSubDataEXT = missing_glNamedBufferSubDataEXT;
    }
    dt.glNamedBufferSubDataEXT = MakeRegalProc(loader_glNamedBufferSubDataEXT,layer);
    _getProcAddress( driver_glNamedCopyBufferSubDataEXT, glNamedCopyBufferSubDataEXT, "glNamedCopyBufferSubDataEXT" );
    if( driver_glNamedCopyBufferSubDataEXT == NULL ) {
      driver_glNamedCopyBufferSubDataEXT = missing_glNamedCopyBufferSubDataEXT;
    }
    dt.glNamedCopyBufferSubDataEXT = MakeRegalProc(loader_glNamedCopyBufferSubDataEXT,layer);
    _getProcAddress( driver_glNamedFramebufferRenderbufferEXT, glNamedFramebufferRenderbufferEXT, "glNamedFramebufferRenderbufferEXT" );
    if( driver_glNamedFramebufferRenderbufferEXT == NULL ) {
      driver_glNamedFramebufferRenderbufferEXT = missing_glNamedFramebufferRenderbufferEXT;
    }
    dt.glNamedFramebufferRenderbufferEXT = MakeRegalProc(loader_glNamedFramebufferRenderbufferEXT,layer);
    _getProcAddress( driver_glNamedFramebufferTexture1DEXT, glNamedFramebufferTexture1DEXT, "glNamedFramebufferTexture1DEXT" );
    if( driver_glNamedFramebufferTexture1DEXT == NULL ) {
      driver_glNamedFramebufferTexture1DEXT = missing_glNamedFramebufferTexture1DEXT;
    }
    dt.glNamedFramebufferTexture1DEXT = MakeRegalProc(loader_glNamedFramebufferTexture1DEXT,layer);
    _getProcAddress( driver_glNamedFramebufferTexture2DEXT, glNamedFramebufferTexture2DEXT, "glNamedFramebufferTexture2DEXT" );
    if( driver_glNamedFramebufferTexture2DEXT == NULL ) {
      driver_glNamedFramebufferTexture2DEXT = missing_glNamedFramebufferTexture2DEXT;
    }
    dt.glNamedFramebufferTexture2DEXT = MakeRegalProc(loader_glNamedFramebufferTexture2DEXT,layer);
    _getProcAddress( driver_glNamedFramebufferTexture3DEXT, glNamedFramebufferTexture3DEXT, "glNamedFramebufferTexture3DEXT" );
    if( driver_glNamedFramebufferTexture3DEXT == NULL ) {
      driver_glNamedFramebufferTexture3DEXT = missing_glNamedFramebufferTexture3DEXT;
    }
    dt.glNamedFramebufferTexture3DEXT = MakeRegalProc(loader_glNamedFramebufferTexture3DEXT,layer);
    _getProcAddress( driver_glNamedFramebufferTextureEXT, glNamedFramebufferTextureEXT, "glNamedFramebufferTextureEXT" );
    if( driver_glNamedFramebufferTextureEXT == NULL ) {
      driver_glNamedFramebufferTextureEXT = missing_glNamedFramebufferTextureEXT;
    }
    dt.glNamedFramebufferTextureEXT = MakeRegalProc(loader_glNamedFramebufferTextureEXT,layer);
    _getProcAddress( driver_glNamedFramebufferTextureFaceEXT, glNamedFramebufferTextureFaceEXT, "glNamedFramebufferTextureFaceEXT" );
    if( driver_glNamedFramebufferTextureFaceEXT == NULL ) {
      driver_glNamedFramebufferTextureFaceEXT = missing_glNamedFramebufferTextureFaceEXT;
    }
    dt.glNamedFramebufferTextureFaceEXT = MakeRegalProc(loader_glNamedFramebufferTextureFaceEXT,layer);
    _getProcAddress( driver_glNamedFramebufferTextureLayerEXT, glNamedFramebufferTextureLayerEXT, "glNamedFramebufferTextureLayerEXT" );
    if( driver_glNamedFramebufferTextureLayerEXT == NULL ) {
      driver_glNamedFramebufferTextureLayerEXT = missing_glNamedFramebufferTextureLayerEXT;
    }
    dt.glNamedFramebufferTextureLayerEXT = MakeRegalProc(loader_glNamedFramebufferTextureLayerEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameter4dEXT, glNamedProgramLocalParameter4dEXT, "glNamedProgramLocalParameter4dEXT" );
    if( driver_glNamedProgramLocalParameter4dEXT == NULL ) {
      driver_glNamedProgramLocalParameter4dEXT = missing_glNamedProgramLocalParameter4dEXT;
    }
    dt.glNamedProgramLocalParameter4dEXT = MakeRegalProc(loader_glNamedProgramLocalParameter4dEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameter4dvEXT, glNamedProgramLocalParameter4dvEXT, "glNamedProgramLocalParameter4dvEXT" );
    if( driver_glNamedProgramLocalParameter4dvEXT == NULL ) {
      driver_glNamedProgramLocalParameter4dvEXT = missing_glNamedProgramLocalParameter4dvEXT;
    }
    dt.glNamedProgramLocalParameter4dvEXT = MakeRegalProc(loader_glNamedProgramLocalParameter4dvEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameter4fEXT, glNamedProgramLocalParameter4fEXT, "glNamedProgramLocalParameter4fEXT" );
    if( driver_glNamedProgramLocalParameter4fEXT == NULL ) {
      driver_glNamedProgramLocalParameter4fEXT = missing_glNamedProgramLocalParameter4fEXT;
    }
    dt.glNamedProgramLocalParameter4fEXT = MakeRegalProc(loader_glNamedProgramLocalParameter4fEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameter4fvEXT, glNamedProgramLocalParameter4fvEXT, "glNamedProgramLocalParameter4fvEXT" );
    if( driver_glNamedProgramLocalParameter4fvEXT == NULL ) {
      driver_glNamedProgramLocalParameter4fvEXT = missing_glNamedProgramLocalParameter4fvEXT;
    }
    dt.glNamedProgramLocalParameter4fvEXT = MakeRegalProc(loader_glNamedProgramLocalParameter4fvEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameterI4iEXT, glNamedProgramLocalParameterI4iEXT, "glNamedProgramLocalParameterI4iEXT" );
    if( driver_glNamedProgramLocalParameterI4iEXT == NULL ) {
      driver_glNamedProgramLocalParameterI4iEXT = missing_glNamedProgramLocalParameterI4iEXT;
    }
    dt.glNamedProgramLocalParameterI4iEXT = MakeRegalProc(loader_glNamedProgramLocalParameterI4iEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameterI4ivEXT, glNamedProgramLocalParameterI4ivEXT, "glNamedProgramLocalParameterI4ivEXT" );
    if( driver_glNamedProgramLocalParameterI4ivEXT == NULL ) {
      driver_glNamedProgramLocalParameterI4ivEXT = missing_glNamedProgramLocalParameterI4ivEXT;
    }
    dt.glNamedProgramLocalParameterI4ivEXT = MakeRegalProc(loader_glNamedProgramLocalParameterI4ivEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameterI4uiEXT, glNamedProgramLocalParameterI4uiEXT, "glNamedProgramLocalParameterI4uiEXT" );
    if( driver_glNamedProgramLocalParameterI4uiEXT == NULL ) {
      driver_glNamedProgramLocalParameterI4uiEXT = missing_glNamedProgramLocalParameterI4uiEXT;
    }
    dt.glNamedProgramLocalParameterI4uiEXT = MakeRegalProc(loader_glNamedProgramLocalParameterI4uiEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameterI4uivEXT, glNamedProgramLocalParameterI4uivEXT, "glNamedProgramLocalParameterI4uivEXT" );
    if( driver_glNamedProgramLocalParameterI4uivEXT == NULL ) {
      driver_glNamedProgramLocalParameterI4uivEXT = missing_glNamedProgramLocalParameterI4uivEXT;
    }
    dt.glNamedProgramLocalParameterI4uivEXT = MakeRegalProc(loader_glNamedProgramLocalParameterI4uivEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParameters4fvEXT, glNamedProgramLocalParameters4fvEXT, "glNamedProgramLocalParameters4fvEXT" );
    if( driver_glNamedProgramLocalParameters4fvEXT == NULL ) {
      driver_glNamedProgramLocalParameters4fvEXT = missing_glNamedProgramLocalParameters4fvEXT;
    }
    dt.glNamedProgramLocalParameters4fvEXT = MakeRegalProc(loader_glNamedProgramLocalParameters4fvEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParametersI4ivEXT, glNamedProgramLocalParametersI4ivEXT, "glNamedProgramLocalParametersI4ivEXT" );
    if( driver_glNamedProgramLocalParametersI4ivEXT == NULL ) {
      driver_glNamedProgramLocalParametersI4ivEXT = missing_glNamedProgramLocalParametersI4ivEXT;
    }
    dt.glNamedProgramLocalParametersI4ivEXT = MakeRegalProc(loader_glNamedProgramLocalParametersI4ivEXT,layer);
    _getProcAddress( driver_glNamedProgramLocalParametersI4uivEXT, glNamedProgramLocalParametersI4uivEXT, "glNamedProgramLocalParametersI4uivEXT" );
    if( driver_glNamedProgramLocalParametersI4uivEXT == NULL ) {
      driver_glNamedProgramLocalParametersI4uivEXT = missing_glNamedProgramLocalParametersI4uivEXT;
    }
    dt.glNamedProgramLocalParametersI4uivEXT = MakeRegalProc(loader_glNamedProgramLocalParametersI4uivEXT,layer);
    _getProcAddress( driver_glNamedProgramStringEXT, glNamedProgramStringEXT, "glNamedProgramStringEXT" );
    if( driver_glNamedProgramStringEXT == NULL ) {
      driver_glNamedProgramStringEXT = missing_glNamedProgramStringEXT;
    }
    dt.glNamedProgramStringEXT = MakeRegalProc(loader_glNamedProgramStringEXT,layer);
    _getProcAddress( driver_glNamedRenderbufferStorageEXT, glNamedRenderbufferStorageEXT, "glNamedRenderbufferStorageEXT" );
    if( driver_glNamedRenderbufferStorageEXT == NULL ) {
      driver_glNamedRenderbufferStorageEXT = missing_glNamedRenderbufferStorageEXT;
    }
    dt.glNamedRenderbufferStorageEXT = MakeRegalProc(loader_glNamedRenderbufferStorageEXT,layer);
    _getProcAddress( driver_glNamedRenderbufferStorageMultisampleCoverageEXT, glNamedRenderbufferStorageMultisampleCoverageEXT, "glNamedRenderbufferStorageMultisampleCoverageEXT" );
    if( driver_glNamedRenderbufferStorageMultisampleCoverageEXT == NULL ) {
      driver_glNamedRenderbufferStorageMultisampleCoverageEXT = missing_glNamedRenderbufferStorageMultisampleCoverageEXT;
    }
    dt.glNamedRenderbufferStorageMultisampleCoverageEXT = MakeRegalProc(loader_glNamedRenderbufferStorageMultisampleCoverageEXT,layer);
    _getProcAddress( driver_glNamedRenderbufferStorageMultisampleEXT, glNamedRenderbufferStorageMultisampleEXT, "glNamedRenderbufferStorageMultisampleEXT" );
    if( driver_glNamedRenderbufferStorageMultisampleEXT == NULL ) {
      driver_glNamedRenderbufferStorageMultisampleEXT = missing_glNamedRenderbufferStorageMultisampleEXT;
    }
    dt.glNamedRenderbufferStorageMultisampleEXT = MakeRegalProc(loader_glNamedRenderbufferStorageMultisampleEXT,layer);
    _getProcAddress( driver_glProgramUniform1dEXT, glProgramUniform1dEXT, "glProgramUniform1dEXT" );
    if( driver_glProgramUniform1dEXT == NULL ) {
      driver_glProgramUniform1dEXT = missing_glProgramUniform1dEXT;
    }
    dt.glProgramUniform1dEXT = MakeRegalProc(loader_glProgramUniform1dEXT,layer);
    _getProcAddress( driver_glProgramUniform1dvEXT, glProgramUniform1dvEXT, "glProgramUniform1dvEXT" );
    if( driver_glProgramUniform1dvEXT == NULL ) {
      driver_glProgramUniform1dvEXT = missing_glProgramUniform1dvEXT;
    }
    dt.glProgramUniform1dvEXT = MakeRegalProc(loader_glProgramUniform1dvEXT,layer);
    _getProcAddress( driver_glProgramUniform1fEXT, glProgramUniform1fEXT, "glProgramUniform1fEXT" );
    if( driver_glProgramUniform1fEXT == NULL ) {
      driver_glProgramUniform1fEXT = missing_glProgramUniform1fEXT;
    }
    dt.glProgramUniform1fEXT = MakeRegalProc(loader_glProgramUniform1fEXT,layer);
    _getProcAddress( driver_glProgramUniform1fvEXT, glProgramUniform1fvEXT, "glProgramUniform1fvEXT" );
    if( driver_glProgramUniform1fvEXT == NULL ) {
      driver_glProgramUniform1fvEXT = missing_glProgramUniform1fvEXT;
    }
    dt.glProgramUniform1fvEXT = MakeRegalProc(loader_glProgramUniform1fvEXT,layer);
    _getProcAddress( driver_glProgramUniform1iEXT, glProgramUniform1iEXT, "glProgramUniform1iEXT" );
    if( driver_glProgramUniform1iEXT == NULL ) {
      driver_glProgramUniform1iEXT = missing_glProgramUniform1iEXT;
    }
    dt.glProgramUniform1iEXT = MakeRegalProc(loader_glProgramUniform1iEXT,layer);
    _getProcAddress( driver_glProgramUniform1ivEXT, glProgramUniform1ivEXT, "glProgramUniform1ivEXT" );
    if( driver_glProgramUniform1ivEXT == NULL ) {
      driver_glProgramUniform1ivEXT = missing_glProgramUniform1ivEXT;
    }
    dt.glProgramUniform1ivEXT = MakeRegalProc(loader_glProgramUniform1ivEXT,layer);
    _getProcAddress( driver_glProgramUniform1uiEXT, glProgramUniform1uiEXT, "glProgramUniform1uiEXT" );
    if( driver_glProgramUniform1uiEXT == NULL ) {
      driver_glProgramUniform1uiEXT = missing_glProgramUniform1uiEXT;
    }
    dt.glProgramUniform1uiEXT = MakeRegalProc(loader_glProgramUniform1uiEXT,layer);
    _getProcAddress( driver_glProgramUniform1uivEXT, glProgramUniform1uivEXT, "glProgramUniform1uivEXT" );
    if( driver_glProgramUniform1uivEXT == NULL ) {
      driver_glProgramUniform1uivEXT = missing_glProgramUniform1uivEXT;
    }
    dt.glProgramUniform1uivEXT = MakeRegalProc(loader_glProgramUniform1uivEXT,layer);
    _getProcAddress( driver_glProgramUniform2dEXT, glProgramUniform2dEXT, "glProgramUniform2dEXT" );
    if( driver_glProgramUniform2dEXT == NULL ) {
      driver_glProgramUniform2dEXT = missing_glProgramUniform2dEXT;
    }
    dt.glProgramUniform2dEXT = MakeRegalProc(loader_glProgramUniform2dEXT,layer);
    _getProcAddress( driver_glProgramUniform2dvEXT, glProgramUniform2dvEXT, "glProgramUniform2dvEXT" );
    if( driver_glProgramUniform2dvEXT == NULL ) {
      driver_glProgramUniform2dvEXT = missing_glProgramUniform2dvEXT;
    }
    dt.glProgramUniform2dvEXT = MakeRegalProc(loader_glProgramUniform2dvEXT,layer);
    _getProcAddress( driver_glProgramUniform2fEXT, glProgramUniform2fEXT, "glProgramUniform2fEXT" );
    if( driver_glProgramUniform2fEXT == NULL ) {
      driver_glProgramUniform2fEXT = missing_glProgramUniform2fEXT;
    }
    dt.glProgramUniform2fEXT = MakeRegalProc(loader_glProgramUniform2fEXT,layer);
    _getProcAddress( driver_glProgramUniform2fvEXT, glProgramUniform2fvEXT, "glProgramUniform2fvEXT" );
    if( driver_glProgramUniform2fvEXT == NULL ) {
      driver_glProgramUniform2fvEXT = missing_glProgramUniform2fvEXT;
    }
    dt.glProgramUniform2fvEXT = MakeRegalProc(loader_glProgramUniform2fvEXT,layer);
    _getProcAddress( driver_glProgramUniform2iEXT, glProgramUniform2iEXT, "glProgramUniform2iEXT" );
    if( driver_glProgramUniform2iEXT == NULL ) {
      driver_glProgramUniform2iEXT = missing_glProgramUniform2iEXT;
    }
    dt.glProgramUniform2iEXT = MakeRegalProc(loader_glProgramUniform2iEXT,layer);
    _getProcAddress( driver_glProgramUniform2ivEXT, glProgramUniform2ivEXT, "glProgramUniform2ivEXT" );
    if( driver_glProgramUniform2ivEXT == NULL ) {
      driver_glProgramUniform2ivEXT = missing_glProgramUniform2ivEXT;
    }
    dt.glProgramUniform2ivEXT = MakeRegalProc(loader_glProgramUniform2ivEXT,layer);
    _getProcAddress( driver_glProgramUniform2uiEXT, glProgramUniform2uiEXT, "glProgramUniform2uiEXT" );
    if( driver_glProgramUniform2uiEXT == NULL ) {
      driver_glProgramUniform2uiEXT = missing_glProgramUniform2uiEXT;
    }
    dt.glProgramUniform2uiEXT = MakeRegalProc(loader_glProgramUniform2uiEXT,layer);
    _getProcAddress( driver_glProgramUniform2uivEXT, glProgramUniform2uivEXT, "glProgramUniform2uivEXT" );
    if( driver_glProgramUniform2uivEXT == NULL ) {
      driver_glProgramUniform2uivEXT = missing_glProgramUniform2uivEXT;
    }
    dt.glProgramUniform2uivEXT = MakeRegalProc(loader_glProgramUniform2uivEXT,layer);
    _getProcAddress( driver_glProgramUniform3dEXT, glProgramUniform3dEXT, "glProgramUniform3dEXT" );
    if( driver_glProgramUniform3dEXT == NULL ) {
      driver_glProgramUniform3dEXT = missing_glProgramUniform3dEXT;
    }
    dt.glProgramUniform3dEXT = MakeRegalProc(loader_glProgramUniform3dEXT,layer);
    _getProcAddress( driver_glProgramUniform3dvEXT, glProgramUniform3dvEXT, "glProgramUniform3dvEXT" );
    if( driver_glProgramUniform3dvEXT == NULL ) {
      driver_glProgramUniform3dvEXT = missing_glProgramUniform3dvEXT;
    }
    dt.glProgramUniform3dvEXT = MakeRegalProc(loader_glProgramUniform3dvEXT,layer);
    _getProcAddress( driver_glProgramUniform3fEXT, glProgramUniform3fEXT, "glProgramUniform3fEXT" );
    if( driver_glProgramUniform3fEXT == NULL ) {
      driver_glProgramUniform3fEXT = missing_glProgramUniform3fEXT;
    }
    dt.glProgramUniform3fEXT = MakeRegalProc(loader_glProgramUniform3fEXT,layer);
    _getProcAddress( driver_glProgramUniform3fvEXT, glProgramUniform3fvEXT, "glProgramUniform3fvEXT" );
    if( driver_glProgramUniform3fvEXT == NULL ) {
      driver_glProgramUniform3fvEXT = missing_glProgramUniform3fvEXT;
    }
    dt.glProgramUniform3fvEXT = MakeRegalProc(loader_glProgramUniform3fvEXT,layer);
    _getProcAddress( driver_glProgramUniform3iEXT, glProgramUniform3iEXT, "glProgramUniform3iEXT" );
    if( driver_glProgramUniform3iEXT == NULL ) {
      driver_glProgramUniform3iEXT = missing_glProgramUniform3iEXT;
    }
    dt.glProgramUniform3iEXT = MakeRegalProc(loader_glProgramUniform3iEXT,layer);
    _getProcAddress( driver_glProgramUniform3ivEXT, glProgramUniform3ivEXT, "glProgramUniform3ivEXT" );
    if( driver_glProgramUniform3ivEXT == NULL ) {
      driver_glProgramUniform3ivEXT = missing_glProgramUniform3ivEXT;
    }
    dt.glProgramUniform3ivEXT = MakeRegalProc(loader_glProgramUniform3ivEXT,layer);
    _getProcAddress( driver_glProgramUniform3uiEXT, glProgramUniform3uiEXT, "glProgramUniform3uiEXT" );
    if( driver_glProgramUniform3uiEXT == NULL ) {
      driver_glProgramUniform3uiEXT = missing_glProgramUniform3uiEXT;
    }
    dt.glProgramUniform3uiEXT = MakeRegalProc(loader_glProgramUniform3uiEXT,layer);
    _getProcAddress( driver_glProgramUniform3uivEXT, glProgramUniform3uivEXT, "glProgramUniform3uivEXT" );
    if( driver_glProgramUniform3uivEXT == NULL ) {
      driver_glProgramUniform3uivEXT = missing_glProgramUniform3uivEXT;
    }
    dt.glProgramUniform3uivEXT = MakeRegalProc(loader_glProgramUniform3uivEXT,layer);
    _getProcAddress( driver_glProgramUniform4dEXT, glProgramUniform4dEXT, "glProgramUniform4dEXT" );
    if( driver_glProgramUniform4dEXT == NULL ) {
      driver_glProgramUniform4dEXT = missing_glProgramUniform4dEXT;
    }
    dt.glProgramUniform4dEXT = MakeRegalProc(loader_glProgramUniform4dEXT,layer);
    _getProcAddress( driver_glProgramUniform4dvEXT, glProgramUniform4dvEXT, "glProgramUniform4dvEXT" );
    if( driver_glProgramUniform4dvEXT == NULL ) {
      driver_glProgramUniform4dvEXT = missing_glProgramUniform4dvEXT;
    }
    dt.glProgramUniform4dvEXT = MakeRegalProc(loader_glProgramUniform4dvEXT,layer);
    _getProcAddress( driver_glProgramUniform4fEXT, glProgramUniform4fEXT, "glProgramUniform4fEXT" );
    if( driver_glProgramUniform4fEXT == NULL ) {
      driver_glProgramUniform4fEXT = missing_glProgramUniform4fEXT;
    }
    dt.glProgramUniform4fEXT = MakeRegalProc(loader_glProgramUniform4fEXT,layer);
    _getProcAddress( driver_glProgramUniform4fvEXT, glProgramUniform4fvEXT, "glProgramUniform4fvEXT" );
    if( driver_glProgramUniform4fvEXT == NULL ) {
      driver_glProgramUniform4fvEXT = missing_glProgramUniform4fvEXT;
    }
    dt.glProgramUniform4fvEXT = MakeRegalProc(loader_glProgramUniform4fvEXT,layer);
    _getProcAddress( driver_glProgramUniform4iEXT, glProgramUniform4iEXT, "glProgramUniform4iEXT" );
    if( driver_glProgramUniform4iEXT == NULL ) {
      driver_glProgramUniform4iEXT = missing_glProgramUniform4iEXT;
    }
    dt.glProgramUniform4iEXT = MakeRegalProc(loader_glProgramUniform4iEXT,layer);
    _getProcAddress( driver_glProgramUniform4ivEXT, glProgramUniform4ivEXT, "glProgramUniform4ivEXT" );
    if( driver_glProgramUniform4ivEXT == NULL ) {
      driver_glProgramUniform4ivEXT = missing_glProgramUniform4ivEXT;
    }
    dt.glProgramUniform4ivEXT = MakeRegalProc(loader_glProgramUniform4ivEXT,layer);
    _getProcAddress( driver_glProgramUniform4uiEXT, glProgramUniform4uiEXT, "glProgramUniform4uiEXT" );
    if( driver_glProgramUniform4uiEXT == NULL ) {
      driver_glProgramUniform4uiEXT = missing_glProgramUniform4uiEXT;
    }
    dt.glProgramUniform4uiEXT = MakeRegalProc(loader_glProgramUniform4uiEXT,layer);
    _getProcAddress( driver_glProgramUniform4uivEXT, glProgramUniform4uivEXT, "glProgramUniform4uivEXT" );
    if( driver_glProgramUniform4uivEXT == NULL ) {
      driver_glProgramUniform4uivEXT = missing_glProgramUniform4uivEXT;
    }
    dt.glProgramUniform4uivEXT = MakeRegalProc(loader_glProgramUniform4uivEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix2dvEXT, glProgramUniformMatrix2dvEXT, "glProgramUniformMatrix2dvEXT" );
    if( driver_glProgramUniformMatrix2dvEXT == NULL ) {
      driver_glProgramUniformMatrix2dvEXT = missing_glProgramUniformMatrix2dvEXT;
    }
    dt.glProgramUniformMatrix2dvEXT = MakeRegalProc(loader_glProgramUniformMatrix2dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix2fvEXT, glProgramUniformMatrix2fvEXT, "glProgramUniformMatrix2fvEXT" );
    if( driver_glProgramUniformMatrix2fvEXT == NULL ) {
      driver_glProgramUniformMatrix2fvEXT = missing_glProgramUniformMatrix2fvEXT;
    }
    dt.glProgramUniformMatrix2fvEXT = MakeRegalProc(loader_glProgramUniformMatrix2fvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix2x3dvEXT, glProgramUniformMatrix2x3dvEXT, "glProgramUniformMatrix2x3dvEXT" );
    if( driver_glProgramUniformMatrix2x3dvEXT == NULL ) {
      driver_glProgramUniformMatrix2x3dvEXT = missing_glProgramUniformMatrix2x3dvEXT;
    }
    dt.glProgramUniformMatrix2x3dvEXT = MakeRegalProc(loader_glProgramUniformMatrix2x3dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix2x3fvEXT, glProgramUniformMatrix2x3fvEXT, "glProgramUniformMatrix2x3fvEXT" );
    if( driver_glProgramUniformMatrix2x3fvEXT == NULL ) {
      driver_glProgramUniformMatrix2x3fvEXT = missing_glProgramUniformMatrix2x3fvEXT;
    }
    dt.glProgramUniformMatrix2x3fvEXT = MakeRegalProc(loader_glProgramUniformMatrix2x3fvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix2x4dvEXT, glProgramUniformMatrix2x4dvEXT, "glProgramUniformMatrix2x4dvEXT" );
    if( driver_glProgramUniformMatrix2x4dvEXT == NULL ) {
      driver_glProgramUniformMatrix2x4dvEXT = missing_glProgramUniformMatrix2x4dvEXT;
    }
    dt.glProgramUniformMatrix2x4dvEXT = MakeRegalProc(loader_glProgramUniformMatrix2x4dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix2x4fvEXT, glProgramUniformMatrix2x4fvEXT, "glProgramUniformMatrix2x4fvEXT" );
    if( driver_glProgramUniformMatrix2x4fvEXT == NULL ) {
      driver_glProgramUniformMatrix2x4fvEXT = missing_glProgramUniformMatrix2x4fvEXT;
    }
    dt.glProgramUniformMatrix2x4fvEXT = MakeRegalProc(loader_glProgramUniformMatrix2x4fvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix3dvEXT, glProgramUniformMatrix3dvEXT, "glProgramUniformMatrix3dvEXT" );
    if( driver_glProgramUniformMatrix3dvEXT == NULL ) {
      driver_glProgramUniformMatrix3dvEXT = missing_glProgramUniformMatrix3dvEXT;
    }
    dt.glProgramUniformMatrix3dvEXT = MakeRegalProc(loader_glProgramUniformMatrix3dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix3fvEXT, glProgramUniformMatrix3fvEXT, "glProgramUniformMatrix3fvEXT" );
    if( driver_glProgramUniformMatrix3fvEXT == NULL ) {
      driver_glProgramUniformMatrix3fvEXT = missing_glProgramUniformMatrix3fvEXT;
    }
    dt.glProgramUniformMatrix3fvEXT = MakeRegalProc(loader_glProgramUniformMatrix3fvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix3x2dvEXT, glProgramUniformMatrix3x2dvEXT, "glProgramUniformMatrix3x2dvEXT" );
    if( driver_glProgramUniformMatrix3x2dvEXT == NULL ) {
      driver_glProgramUniformMatrix3x2dvEXT = missing_glProgramUniformMatrix3x2dvEXT;
    }
    dt.glProgramUniformMatrix3x2dvEXT = MakeRegalProc(loader_glProgramUniformMatrix3x2dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix3x2fvEXT, glProgramUniformMatrix3x2fvEXT, "glProgramUniformMatrix3x2fvEXT" );
    if( driver_glProgramUniformMatrix3x2fvEXT == NULL ) {
      driver_glProgramUniformMatrix3x2fvEXT = missing_glProgramUniformMatrix3x2fvEXT;
    }
    dt.glProgramUniformMatrix3x2fvEXT = MakeRegalProc(loader_glProgramUniformMatrix3x2fvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix3x4dvEXT, glProgramUniformMatrix3x4dvEXT, "glProgramUniformMatrix3x4dvEXT" );
    if( driver_glProgramUniformMatrix3x4dvEXT == NULL ) {
      driver_glProgramUniformMatrix3x4dvEXT = missing_glProgramUniformMatrix3x4dvEXT;
    }
    dt.glProgramUniformMatrix3x4dvEXT = MakeRegalProc(loader_glProgramUniformMatrix3x4dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix3x4fvEXT, glProgramUniformMatrix3x4fvEXT, "glProgramUniformMatrix3x4fvEXT" );
    if( driver_glProgramUniformMatrix3x4fvEXT == NULL ) {
      driver_glProgramUniformMatrix3x4fvEXT = missing_glProgramUniformMatrix3x4fvEXT;
    }
    dt.glProgramUniformMatrix3x4fvEXT = MakeRegalProc(loader_glProgramUniformMatrix3x4fvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix4dvEXT, glProgramUniformMatrix4dvEXT, "glProgramUniformMatrix4dvEXT" );
    if( driver_glProgramUniformMatrix4dvEXT == NULL ) {
      driver_glProgramUniformMatrix4dvEXT = missing_glProgramUniformMatrix4dvEXT;
    }
    dt.glProgramUniformMatrix4dvEXT = MakeRegalProc(loader_glProgramUniformMatrix4dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix4fvEXT, glProgramUniformMatrix4fvEXT, "glProgramUniformMatrix4fvEXT" );
    if( driver_glProgramUniformMatrix4fvEXT == NULL ) {
      driver_glProgramUniformMatrix4fvEXT = missing_glProgramUniformMatrix4fvEXT;
    }
    dt.glProgramUniformMatrix4fvEXT = MakeRegalProc(loader_glProgramUniformMatrix4fvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix4x2dvEXT, glProgramUniformMatrix4x2dvEXT, "glProgramUniformMatrix4x2dvEXT" );
    if( driver_glProgramUniformMatrix4x2dvEXT == NULL ) {
      driver_glProgramUniformMatrix4x2dvEXT = missing_glProgramUniformMatrix4x2dvEXT;
    }
    dt.glProgramUniformMatrix4x2dvEXT = MakeRegalProc(loader_glProgramUniformMatrix4x2dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix4x2fvEXT, glProgramUniformMatrix4x2fvEXT, "glProgramUniformMatrix4x2fvEXT" );
    if( driver_glProgramUniformMatrix4x2fvEXT == NULL ) {
      driver_glProgramUniformMatrix4x2fvEXT = missing_glProgramUniformMatrix4x2fvEXT;
    }
    dt.glProgramUniformMatrix4x2fvEXT = MakeRegalProc(loader_glProgramUniformMatrix4x2fvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix4x3dvEXT, glProgramUniformMatrix4x3dvEXT, "glProgramUniformMatrix4x3dvEXT" );
    if( driver_glProgramUniformMatrix4x3dvEXT == NULL ) {
      driver_glProgramUniformMatrix4x3dvEXT = missing_glProgramUniformMatrix4x3dvEXT;
    }
    dt.glProgramUniformMatrix4x3dvEXT = MakeRegalProc(loader_glProgramUniformMatrix4x3dvEXT,layer);
    _getProcAddress( driver_glProgramUniformMatrix4x3fvEXT, glProgramUniformMatrix4x3fvEXT, "glProgramUniformMatrix4x3fvEXT" );
    if( driver_glProgramUniformMatrix4x3fvEXT == NULL ) {
      driver_glProgramUniformMatrix4x3fvEXT = missing_glProgramUniformMatrix4x3fvEXT;
    }
    dt.glProgramUniformMatrix4x3fvEXT = MakeRegalProc(loader_glProgramUniformMatrix4x3fvEXT,layer);
    _getProcAddress( driver_glPushClientAttribDefaultEXT, glPushClientAttribDefaultEXT, "glPushClientAttribDefaultEXT" );
    if( driver_glPushClientAttribDefaultEXT == NULL ) {
      driver_glPushClientAttribDefaultEXT = missing_glPushClientAttribDefaultEXT;
    }
    dt.glPushClientAttribDefaultEXT = MakeRegalProc(loader_glPushClientAttribDefaultEXT,layer);
    _getProcAddress( driver_glTextureBufferEXT, glTextureBufferEXT, "glTextureBufferEXT" );
    if( driver_glTextureBufferEXT == NULL ) {
      driver_glTextureBufferEXT = missing_glTextureBufferEXT;
    }
    dt.glTextureBufferEXT = MakeRegalProc(loader_glTextureBufferEXT,layer);
    _getProcAddress( driver_glTextureImage1DEXT, glTextureImage1DEXT, "glTextureImage1DEXT" );
    if( driver_glTextureImage1DEXT == NULL ) {
      driver_glTextureImage1DEXT = missing_glTextureImage1DEXT;
    }
    dt.glTextureImage1DEXT = MakeRegalProc(loader_glTextureImage1DEXT,layer);
    _getProcAddress( driver_glTextureImage2DEXT, glTextureImage2DEXT, "glTextureImage2DEXT" );
    if( driver_glTextureImage2DEXT == NULL ) {
      driver_glTextureImage2DEXT = missing_glTextureImage2DEXT;
    }
    dt.glTextureImage2DEXT = MakeRegalProc(loader_glTextureImage2DEXT,layer);
    _getProcAddress( driver_glTextureImage3DEXT, glTextureImage3DEXT, "glTextureImage3DEXT" );
    if( driver_glTextureImage3DEXT == NULL ) {
      driver_glTextureImage3DEXT = missing_glTextureImage3DEXT;
    }
    dt.glTextureImage3DEXT = MakeRegalProc(loader_glTextureImage3DEXT,layer);
    _getProcAddress( driver_glTextureParameterIivEXT, glTextureParameterIivEXT, "glTextureParameterIivEXT" );
    if( driver_glTextureParameterIivEXT == NULL ) {
      driver_glTextureParameterIivEXT = missing_glTextureParameterIivEXT;
    }
    dt.glTextureParameterIivEXT = MakeRegalProc(loader_glTextureParameterIivEXT,layer);
    _getProcAddress( driver_glTextureParameterIuivEXT, glTextureParameterIuivEXT, "glTextureParameterIuivEXT" );
    if( driver_glTextureParameterIuivEXT == NULL ) {
      driver_glTextureParameterIuivEXT = missing_glTextureParameterIuivEXT;
    }
    dt.glTextureParameterIuivEXT = MakeRegalProc(loader_glTextureParameterIuivEXT,layer);
    _getProcAddress( driver_glTextureParameterfEXT, glTextureParameterfEXT, "glTextureParameterfEXT" );
    if( driver_glTextureParameterfEXT == NULL ) {
      driver_glTextureParameterfEXT = missing_glTextureParameterfEXT;
    }
    dt.glTextureParameterfEXT = MakeRegalProc(loader_glTextureParameterfEXT,layer);
    _getProcAddress( driver_glTextureParameterfvEXT, glTextureParameterfvEXT, "glTextureParameterfvEXT" );
    if( driver_glTextureParameterfvEXT == NULL ) {
      driver_glTextureParameterfvEXT = missing_glTextureParameterfvEXT;
    }
    dt.glTextureParameterfvEXT = MakeRegalProc(loader_glTextureParameterfvEXT,layer);
    _getProcAddress( driver_glTextureParameteriEXT, glTextureParameteriEXT, "glTextureParameteriEXT" );
    if( driver_glTextureParameteriEXT == NULL ) {
      driver_glTextureParameteriEXT = missing_glTextureParameteriEXT;
    }
    dt.glTextureParameteriEXT = MakeRegalProc(loader_glTextureParameteriEXT,layer);
    _getProcAddress( driver_glTextureParameterivEXT, glTextureParameterivEXT, "glTextureParameterivEXT" );
    if( driver_glTextureParameterivEXT == NULL ) {
      driver_glTextureParameterivEXT = missing_glTextureParameterivEXT;
    }
    dt.glTextureParameterivEXT = MakeRegalProc(loader_glTextureParameterivEXT,layer);
    _getProcAddress( driver_glTextureRenderbufferEXT, glTextureRenderbufferEXT, "glTextureRenderbufferEXT" );
    if( driver_glTextureRenderbufferEXT == NULL ) {
      driver_glTextureRenderbufferEXT = missing_glTextureRenderbufferEXT;
    }
    dt.glTextureRenderbufferEXT = MakeRegalProc(loader_glTextureRenderbufferEXT,layer);
    _getProcAddress( driver_glTextureSubImage1DEXT, glTextureSubImage1DEXT, "glTextureSubImage1DEXT" );
    if( driver_glTextureSubImage1DEXT == NULL ) {
      driver_glTextureSubImage1DEXT = missing_glTextureSubImage1DEXT;
    }
    dt.glTextureSubImage1DEXT = MakeRegalProc(loader_glTextureSubImage1DEXT,layer);
    _getProcAddress( driver_glTextureSubImage2DEXT, glTextureSubImage2DEXT, "glTextureSubImage2DEXT" );
    if( driver_glTextureSubImage2DEXT == NULL ) {
      driver_glTextureSubImage2DEXT = missing_glTextureSubImage2DEXT;
    }
    dt.glTextureSubImage2DEXT = MakeRegalProc(loader_glTextureSubImage2DEXT,layer);
    _getProcAddress( driver_glTextureSubImage3DEXT, glTextureSubImage3DEXT, "glTextureSubImage3DEXT" );
    if( driver_glTextureSubImage3DEXT == NULL ) {
      driver_glTextureSubImage3DEXT = missing_glTextureSubImage3DEXT;
    }
    dt.glTextureSubImage3DEXT = MakeRegalProc(loader_glTextureSubImage3DEXT,layer);
    _getProcAddress( driver_glUnmapNamedBufferEXT, glUnmapNamedBufferEXT, "glUnmapNamedBufferEXT" );
    if( driver_glUnmapNamedBufferEXT == NULL ) {
      driver_glUnmapNamedBufferEXT = missing_glUnmapNamedBufferEXT;
    }
    dt.glUnmapNamedBufferEXT = MakeRegalProc(loader_glUnmapNamedBufferEXT,layer);
    _getProcAddress( driver_glVertexArrayColorOffsetEXT, glVertexArrayColorOffsetEXT, "glVertexArrayColorOffsetEXT" );
    if( driver_glVertexArrayColorOffsetEXT == NULL ) {
      driver_glVertexArrayColorOffsetEXT = missing_glVertexArrayColorOffsetEXT;
    }
    dt.glVertexArrayColorOffsetEXT = MakeRegalProc(loader_glVertexArrayColorOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayEdgeFlagOffsetEXT, glVertexArrayEdgeFlagOffsetEXT, "glVertexArrayEdgeFlagOffsetEXT" );
    if( driver_glVertexArrayEdgeFlagOffsetEXT == NULL ) {
      driver_glVertexArrayEdgeFlagOffsetEXT = missing_glVertexArrayEdgeFlagOffsetEXT;
    }
    dt.glVertexArrayEdgeFlagOffsetEXT = MakeRegalProc(loader_glVertexArrayEdgeFlagOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayFogCoordOffsetEXT, glVertexArrayFogCoordOffsetEXT, "glVertexArrayFogCoordOffsetEXT" );
    if( driver_glVertexArrayFogCoordOffsetEXT == NULL ) {
      driver_glVertexArrayFogCoordOffsetEXT = missing_glVertexArrayFogCoordOffsetEXT;
    }
    dt.glVertexArrayFogCoordOffsetEXT = MakeRegalProc(loader_glVertexArrayFogCoordOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayIndexOffsetEXT, glVertexArrayIndexOffsetEXT, "glVertexArrayIndexOffsetEXT" );
    if( driver_glVertexArrayIndexOffsetEXT == NULL ) {
      driver_glVertexArrayIndexOffsetEXT = missing_glVertexArrayIndexOffsetEXT;
    }
    dt.glVertexArrayIndexOffsetEXT = MakeRegalProc(loader_glVertexArrayIndexOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayMultiTexCoordOffsetEXT, glVertexArrayMultiTexCoordOffsetEXT, "glVertexArrayMultiTexCoordOffsetEXT" );
    if( driver_glVertexArrayMultiTexCoordOffsetEXT == NULL ) {
      driver_glVertexArrayMultiTexCoordOffsetEXT = missing_glVertexArrayMultiTexCoordOffsetEXT;
    }
    dt.glVertexArrayMultiTexCoordOffsetEXT = MakeRegalProc(loader_glVertexArrayMultiTexCoordOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayNormalOffsetEXT, glVertexArrayNormalOffsetEXT, "glVertexArrayNormalOffsetEXT" );
    if( driver_glVertexArrayNormalOffsetEXT == NULL ) {
      driver_glVertexArrayNormalOffsetEXT = missing_glVertexArrayNormalOffsetEXT;
    }
    dt.glVertexArrayNormalOffsetEXT = MakeRegalProc(loader_glVertexArrayNormalOffsetEXT,layer);
    _getProcAddress( driver_glVertexArraySecondaryColorOffsetEXT, glVertexArraySecondaryColorOffsetEXT, "glVertexArraySecondaryColorOffsetEXT" );
    if( driver_glVertexArraySecondaryColorOffsetEXT == NULL ) {
      driver_glVertexArraySecondaryColorOffsetEXT = missing_glVertexArraySecondaryColorOffsetEXT;
    }
    dt.glVertexArraySecondaryColorOffsetEXT = MakeRegalProc(loader_glVertexArraySecondaryColorOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayTexCoordOffsetEXT, glVertexArrayTexCoordOffsetEXT, "glVertexArrayTexCoordOffsetEXT" );
    if( driver_glVertexArrayTexCoordOffsetEXT == NULL ) {
      driver_glVertexArrayTexCoordOffsetEXT = missing_glVertexArrayTexCoordOffsetEXT;
    }
    dt.glVertexArrayTexCoordOffsetEXT = MakeRegalProc(loader_glVertexArrayTexCoordOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexAttribIOffsetEXT, glVertexArrayVertexAttribIOffsetEXT, "glVertexArrayVertexAttribIOffsetEXT" );
    if( driver_glVertexArrayVertexAttribIOffsetEXT == NULL ) {
      driver_glVertexArrayVertexAttribIOffsetEXT = missing_glVertexArrayVertexAttribIOffsetEXT;
    }
    dt.glVertexArrayVertexAttribIOffsetEXT = MakeRegalProc(loader_glVertexArrayVertexAttribIOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexAttribOffsetEXT, glVertexArrayVertexAttribOffsetEXT, "glVertexArrayVertexAttribOffsetEXT" );
    if( driver_glVertexArrayVertexAttribOffsetEXT == NULL ) {
      driver_glVertexArrayVertexAttribOffsetEXT = missing_glVertexArrayVertexAttribOffsetEXT;
    }
    dt.glVertexArrayVertexAttribOffsetEXT = MakeRegalProc(loader_glVertexArrayVertexAttribOffsetEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexOffsetEXT, glVertexArrayVertexOffsetEXT, "glVertexArrayVertexOffsetEXT" );
    if( driver_glVertexArrayVertexOffsetEXT == NULL ) {
      driver_glVertexArrayVertexOffsetEXT = missing_glVertexArrayVertexOffsetEXT;
    }
    dt.glVertexArrayVertexOffsetEXT = MakeRegalProc(loader_glVertexArrayVertexOffsetEXT,layer);

    // GL_EXT_discard_framebuffer

    _getProcAddress( driver_glDiscardFramebufferEXT, glDiscardFramebufferEXT, "glDiscardFramebufferEXT" );
    if( driver_glDiscardFramebufferEXT == NULL ) {
      driver_glDiscardFramebufferEXT = missing_glDiscardFramebufferEXT;
    }
    dt.glDiscardFramebufferEXT = MakeRegalProc(loader_glDiscardFramebufferEXT,layer);

    // GL_EXT_disjoint_timer_query

    _getProcAddress( driver_glGetQueryObjectivEXT, glGetQueryObjectivEXT, "glGetQueryObjectivEXT" );
    if( driver_glGetQueryObjectivEXT == NULL ) {
      driver_glGetQueryObjectivEXT = missing_glGetQueryObjectivEXT;
    }
    dt.glGetQueryObjectivEXT = MakeRegalProc(loader_glGetQueryObjectivEXT,layer);
    _getProcAddress( driver_glQueryCounterEXT, glQueryCounterEXT, "glQueryCounterEXT" );
    if( driver_glQueryCounterEXT == NULL ) {
      driver_glQueryCounterEXT = missing_glQueryCounterEXT;
    }
    dt.glQueryCounterEXT = MakeRegalProc(loader_glQueryCounterEXT,layer);

    // GL_EXT_draw_buffers2

    _getProcAddress( driver_glColorMaskIndexedEXT, glColorMaskIndexedEXT, "glColorMaskIndexedEXT" );
    if( driver_glColorMaskIndexedEXT == NULL ) {
      driver_glColorMaskIndexedEXT = missing_glColorMaskIndexedEXT;
    }
    dt.glColorMaskIndexedEXT = MakeRegalProc(loader_glColorMaskIndexedEXT,layer);
    _getProcAddress( driver_glDisableIndexedEXT, glDisableIndexedEXT, "glDisableIndexedEXT" );
    if( driver_glDisableIndexedEXT == NULL ) {
      driver_glDisableIndexedEXT = missing_glDisableIndexedEXT;
    }
    dt.glDisableIndexedEXT = MakeRegalProc(loader_glDisableIndexedEXT,layer);
    _getProcAddress( driver_glEnableIndexedEXT, glEnableIndexedEXT, "glEnableIndexedEXT" );
    if( driver_glEnableIndexedEXT == NULL ) {
      driver_glEnableIndexedEXT = missing_glEnableIndexedEXT;
    }
    dt.glEnableIndexedEXT = MakeRegalProc(loader_glEnableIndexedEXT,layer);
    _getProcAddress( driver_glGetBooleanIndexedvEXT, glGetBooleanIndexedvEXT, "glGetBooleanIndexedvEXT" );
    if( driver_glGetBooleanIndexedvEXT == NULL ) {
      driver_glGetBooleanIndexedvEXT = missing_glGetBooleanIndexedvEXT;
    }
    dt.glGetBooleanIndexedvEXT = MakeRegalProc(loader_glGetBooleanIndexedvEXT,layer);
    _getProcAddress( driver_glGetIntegerIndexedvEXT, glGetIntegerIndexedvEXT, "glGetIntegerIndexedvEXT" );
    if( driver_glGetIntegerIndexedvEXT == NULL ) {
      driver_glGetIntegerIndexedvEXT = missing_glGetIntegerIndexedvEXT;
    }
    dt.glGetIntegerIndexedvEXT = MakeRegalProc(loader_glGetIntegerIndexedvEXT,layer);
    _getProcAddress( driver_glIsEnabledIndexedEXT, glIsEnabledIndexedEXT, "glIsEnabledIndexedEXT" );
    if( driver_glIsEnabledIndexedEXT == NULL ) {
      driver_glIsEnabledIndexedEXT = missing_glIsEnabledIndexedEXT;
    }
    dt.glIsEnabledIndexedEXT = MakeRegalProc(loader_glIsEnabledIndexedEXT,layer);

    // GL_EXT_draw_instanced

    _getProcAddress( driver_glDrawArraysInstancedEXT, glDrawArraysInstancedEXT, "glDrawArraysInstancedEXT" );
    if( driver_glDrawArraysInstancedEXT == NULL ) {
      driver_glDrawArraysInstancedEXT = missing_glDrawArraysInstancedEXT;
    }
    dt.glDrawArraysInstancedEXT = MakeRegalProc(loader_glDrawArraysInstancedEXT,layer);
    _getProcAddress( driver_glDrawElementsInstancedEXT, glDrawElementsInstancedEXT, "glDrawElementsInstancedEXT" );
    if( driver_glDrawElementsInstancedEXT == NULL ) {
      driver_glDrawElementsInstancedEXT = missing_glDrawElementsInstancedEXT;
    }
    dt.glDrawElementsInstancedEXT = MakeRegalProc(loader_glDrawElementsInstancedEXT,layer);

    // GL_EXT_draw_range_elements

    _getProcAddress( driver_glDrawRangeElementsEXT, glDrawRangeElementsEXT, "glDrawRangeElementsEXT" );
    if( driver_glDrawRangeElementsEXT == NULL ) {
      driver_glDrawRangeElementsEXT = missing_glDrawRangeElementsEXT;
    }
    dt.glDrawRangeElementsEXT = MakeRegalProc(loader_glDrawRangeElementsEXT,layer);

    // GL_EXT_fog_coord

    _getProcAddress( driver_glFogCoordPointerEXT, glFogCoordPointerEXT, "glFogCoordPointerEXT" );
    if( driver_glFogCoordPointerEXT == NULL ) {
      driver_glFogCoordPointerEXT = missing_glFogCoordPointerEXT;
    }
    dt.glFogCoordPointerEXT = MakeRegalProc(loader_glFogCoordPointerEXT,layer);
    _getProcAddress( driver_glFogCoorddEXT, glFogCoorddEXT, "glFogCoorddEXT" );
    if( driver_glFogCoorddEXT == NULL ) {
      driver_glFogCoorddEXT = missing_glFogCoorddEXT;
    }
    dt.glFogCoorddEXT = MakeRegalProc(loader_glFogCoorddEXT,layer);
    _getProcAddress( driver_glFogCoorddvEXT, glFogCoorddvEXT, "glFogCoorddvEXT" );
    if( driver_glFogCoorddvEXT == NULL ) {
      driver_glFogCoorddvEXT = missing_glFogCoorddvEXT;
    }
    dt.glFogCoorddvEXT = MakeRegalProc(loader_glFogCoorddvEXT,layer);
    _getProcAddress( driver_glFogCoordfEXT, glFogCoordfEXT, "glFogCoordfEXT" );
    if( driver_glFogCoordfEXT == NULL ) {
      driver_glFogCoordfEXT = missing_glFogCoordfEXT;
    }
    dt.glFogCoordfEXT = MakeRegalProc(loader_glFogCoordfEXT,layer);
    _getProcAddress( driver_glFogCoordfvEXT, glFogCoordfvEXT, "glFogCoordfvEXT" );
    if( driver_glFogCoordfvEXT == NULL ) {
      driver_glFogCoordfvEXT = missing_glFogCoordfvEXT;
    }
    dt.glFogCoordfvEXT = MakeRegalProc(loader_glFogCoordfvEXT,layer);

    // GL_EXT_fragment_lighting

    _getProcAddress( driver_glFragmentColorMaterialEXT, glFragmentColorMaterialEXT, "glFragmentColorMaterialEXT" );
    if( driver_glFragmentColorMaterialEXT == NULL ) {
      driver_glFragmentColorMaterialEXT = missing_glFragmentColorMaterialEXT;
    }
    dt.glFragmentColorMaterialEXT = MakeRegalProc(loader_glFragmentColorMaterialEXT,layer);
    _getProcAddress( driver_glFragmentLightModelfEXT, glFragmentLightModelfEXT, "glFragmentLightModelfEXT" );
    if( driver_glFragmentLightModelfEXT == NULL ) {
      driver_glFragmentLightModelfEXT = missing_glFragmentLightModelfEXT;
    }
    dt.glFragmentLightModelfEXT = MakeRegalProc(loader_glFragmentLightModelfEXT,layer);
    _getProcAddress( driver_glFragmentLightModelfvEXT, glFragmentLightModelfvEXT, "glFragmentLightModelfvEXT" );
    if( driver_glFragmentLightModelfvEXT == NULL ) {
      driver_glFragmentLightModelfvEXT = missing_glFragmentLightModelfvEXT;
    }
    dt.glFragmentLightModelfvEXT = MakeRegalProc(loader_glFragmentLightModelfvEXT,layer);
    _getProcAddress( driver_glFragmentLightModeliEXT, glFragmentLightModeliEXT, "glFragmentLightModeliEXT" );
    if( driver_glFragmentLightModeliEXT == NULL ) {
      driver_glFragmentLightModeliEXT = missing_glFragmentLightModeliEXT;
    }
    dt.glFragmentLightModeliEXT = MakeRegalProc(loader_glFragmentLightModeliEXT,layer);
    _getProcAddress( driver_glFragmentLightModelivEXT, glFragmentLightModelivEXT, "glFragmentLightModelivEXT" );
    if( driver_glFragmentLightModelivEXT == NULL ) {
      driver_glFragmentLightModelivEXT = missing_glFragmentLightModelivEXT;
    }
    dt.glFragmentLightModelivEXT = MakeRegalProc(loader_glFragmentLightModelivEXT,layer);
    _getProcAddress( driver_glFragmentLightfEXT, glFragmentLightfEXT, "glFragmentLightfEXT" );
    if( driver_glFragmentLightfEXT == NULL ) {
      driver_glFragmentLightfEXT = missing_glFragmentLightfEXT;
    }
    dt.glFragmentLightfEXT = MakeRegalProc(loader_glFragmentLightfEXT,layer);
    _getProcAddress( driver_glFragmentLightfvEXT, glFragmentLightfvEXT, "glFragmentLightfvEXT" );
    if( driver_glFragmentLightfvEXT == NULL ) {
      driver_glFragmentLightfvEXT = missing_glFragmentLightfvEXT;
    }
    dt.glFragmentLightfvEXT = MakeRegalProc(loader_glFragmentLightfvEXT,layer);
    _getProcAddress( driver_glFragmentLightiEXT, glFragmentLightiEXT, "glFragmentLightiEXT" );
    if( driver_glFragmentLightiEXT == NULL ) {
      driver_glFragmentLightiEXT = missing_glFragmentLightiEXT;
    }
    dt.glFragmentLightiEXT = MakeRegalProc(loader_glFragmentLightiEXT,layer);
    _getProcAddress( driver_glFragmentLightivEXT, glFragmentLightivEXT, "glFragmentLightivEXT" );
    if( driver_glFragmentLightivEXT == NULL ) {
      driver_glFragmentLightivEXT = missing_glFragmentLightivEXT;
    }
    dt.glFragmentLightivEXT = MakeRegalProc(loader_glFragmentLightivEXT,layer);
    _getProcAddress( driver_glFragmentMaterialfEXT, glFragmentMaterialfEXT, "glFragmentMaterialfEXT" );
    if( driver_glFragmentMaterialfEXT == NULL ) {
      driver_glFragmentMaterialfEXT = missing_glFragmentMaterialfEXT;
    }
    dt.glFragmentMaterialfEXT = MakeRegalProc(loader_glFragmentMaterialfEXT,layer);
    _getProcAddress( driver_glFragmentMaterialfvEXT, glFragmentMaterialfvEXT, "glFragmentMaterialfvEXT" );
    if( driver_glFragmentMaterialfvEXT == NULL ) {
      driver_glFragmentMaterialfvEXT = missing_glFragmentMaterialfvEXT;
    }
    dt.glFragmentMaterialfvEXT = MakeRegalProc(loader_glFragmentMaterialfvEXT,layer);
    _getProcAddress( driver_glFragmentMaterialiEXT, glFragmentMaterialiEXT, "glFragmentMaterialiEXT" );
    if( driver_glFragmentMaterialiEXT == NULL ) {
      driver_glFragmentMaterialiEXT = missing_glFragmentMaterialiEXT;
    }
    dt.glFragmentMaterialiEXT = MakeRegalProc(loader_glFragmentMaterialiEXT,layer);
    _getProcAddress( driver_glFragmentMaterialivEXT, glFragmentMaterialivEXT, "glFragmentMaterialivEXT" );
    if( driver_glFragmentMaterialivEXT == NULL ) {
      driver_glFragmentMaterialivEXT = missing_glFragmentMaterialivEXT;
    }
    dt.glFragmentMaterialivEXT = MakeRegalProc(loader_glFragmentMaterialivEXT,layer);
    _getProcAddress( driver_glGetFragmentLightfvEXT, glGetFragmentLightfvEXT, "glGetFragmentLightfvEXT" );
    if( driver_glGetFragmentLightfvEXT == NULL ) {
      driver_glGetFragmentLightfvEXT = missing_glGetFragmentLightfvEXT;
    }
    dt.glGetFragmentLightfvEXT = MakeRegalProc(loader_glGetFragmentLightfvEXT,layer);
    _getProcAddress( driver_glGetFragmentLightivEXT, glGetFragmentLightivEXT, "glGetFragmentLightivEXT" );
    if( driver_glGetFragmentLightivEXT == NULL ) {
      driver_glGetFragmentLightivEXT = missing_glGetFragmentLightivEXT;
    }
    dt.glGetFragmentLightivEXT = MakeRegalProc(loader_glGetFragmentLightivEXT,layer);
    _getProcAddress( driver_glGetFragmentMaterialfvEXT, glGetFragmentMaterialfvEXT, "glGetFragmentMaterialfvEXT" );
    if( driver_glGetFragmentMaterialfvEXT == NULL ) {
      driver_glGetFragmentMaterialfvEXT = missing_glGetFragmentMaterialfvEXT;
    }
    dt.glGetFragmentMaterialfvEXT = MakeRegalProc(loader_glGetFragmentMaterialfvEXT,layer);
    _getProcAddress( driver_glGetFragmentMaterialivEXT, glGetFragmentMaterialivEXT, "glGetFragmentMaterialivEXT" );
    if( driver_glGetFragmentMaterialivEXT == NULL ) {
      driver_glGetFragmentMaterialivEXT = missing_glGetFragmentMaterialivEXT;
    }
    dt.glGetFragmentMaterialivEXT = MakeRegalProc(loader_glGetFragmentMaterialivEXT,layer);
    _getProcAddress( driver_glLightEnviEXT, glLightEnviEXT, "glLightEnviEXT" );
    if( driver_glLightEnviEXT == NULL ) {
      driver_glLightEnviEXT = missing_glLightEnviEXT;
    }
    dt.glLightEnviEXT = MakeRegalProc(loader_glLightEnviEXT,layer);

    // GL_EXT_framebuffer_blit

    _getProcAddress( driver_glBlitFramebufferEXT, glBlitFramebufferEXT, "glBlitFramebufferEXT" );
    if( driver_glBlitFramebufferEXT == NULL ) {
      driver_glBlitFramebufferEXT = missing_glBlitFramebufferEXT;
    }
    dt.glBlitFramebufferEXT = MakeRegalProc(loader_glBlitFramebufferEXT,layer);

    // GL_EXT_framebuffer_multisample

    _getProcAddress( driver_glRenderbufferStorageMultisampleEXT, glRenderbufferStorageMultisampleEXT, "glRenderbufferStorageMultisampleEXT" );
    if( driver_glRenderbufferStorageMultisampleEXT == NULL ) {
      driver_glRenderbufferStorageMultisampleEXT = missing_glRenderbufferStorageMultisampleEXT;
    }
    dt.glRenderbufferStorageMultisampleEXT = MakeRegalProc(loader_glRenderbufferStorageMultisampleEXT,layer);

    // GL_EXT_framebuffer_object

    _getProcAddress( driver_glBindFramebufferEXT, glBindFramebufferEXT, "glBindFramebufferEXT" );
    if( driver_glBindFramebufferEXT == NULL ) {
      driver_glBindFramebufferEXT = missing_glBindFramebufferEXT;
    }
    dt.glBindFramebufferEXT = MakeRegalProc(loader_glBindFramebufferEXT,layer);
    _getProcAddress( driver_glBindRenderbufferEXT, glBindRenderbufferEXT, "glBindRenderbufferEXT" );
    if( driver_glBindRenderbufferEXT == NULL ) {
      driver_glBindRenderbufferEXT = missing_glBindRenderbufferEXT;
    }
    dt.glBindRenderbufferEXT = MakeRegalProc(loader_glBindRenderbufferEXT,layer);
    _getProcAddress( driver_glCheckFramebufferStatusEXT, glCheckFramebufferStatusEXT, "glCheckFramebufferStatusEXT" );
    if( driver_glCheckFramebufferStatusEXT == NULL ) {
      driver_glCheckFramebufferStatusEXT = missing_glCheckFramebufferStatusEXT;
    }
    dt.glCheckFramebufferStatusEXT = MakeRegalProc(loader_glCheckFramebufferStatusEXT,layer);
    _getProcAddress( driver_glDeleteFramebuffersEXT, glDeleteFramebuffersEXT, "glDeleteFramebuffersEXT" );
    if( driver_glDeleteFramebuffersEXT == NULL ) {
      driver_glDeleteFramebuffersEXT = missing_glDeleteFramebuffersEXT;
    }
    dt.glDeleteFramebuffersEXT = MakeRegalProc(loader_glDeleteFramebuffersEXT,layer);
    _getProcAddress( driver_glDeleteRenderbuffersEXT, glDeleteRenderbuffersEXT, "glDeleteRenderbuffersEXT" );
    if( driver_glDeleteRenderbuffersEXT == NULL ) {
      driver_glDeleteRenderbuffersEXT = missing_glDeleteRenderbuffersEXT;
    }
    dt.glDeleteRenderbuffersEXT = MakeRegalProc(loader_glDeleteRenderbuffersEXT,layer);
    _getProcAddress( driver_glFramebufferRenderbufferEXT, glFramebufferRenderbufferEXT, "glFramebufferRenderbufferEXT" );
    if( driver_glFramebufferRenderbufferEXT == NULL ) {
      driver_glFramebufferRenderbufferEXT = missing_glFramebufferRenderbufferEXT;
    }
    dt.glFramebufferRenderbufferEXT = MakeRegalProc(loader_glFramebufferRenderbufferEXT,layer);
    _getProcAddress( driver_glFramebufferTexture1DEXT, glFramebufferTexture1DEXT, "glFramebufferTexture1DEXT" );
    if( driver_glFramebufferTexture1DEXT == NULL ) {
      driver_glFramebufferTexture1DEXT = missing_glFramebufferTexture1DEXT;
    }
    dt.glFramebufferTexture1DEXT = MakeRegalProc(loader_glFramebufferTexture1DEXT,layer);
    _getProcAddress( driver_glFramebufferTexture2DEXT, glFramebufferTexture2DEXT, "glFramebufferTexture2DEXT" );
    if( driver_glFramebufferTexture2DEXT == NULL ) {
      driver_glFramebufferTexture2DEXT = missing_glFramebufferTexture2DEXT;
    }
    dt.glFramebufferTexture2DEXT = MakeRegalProc(loader_glFramebufferTexture2DEXT,layer);
    _getProcAddress( driver_glFramebufferTexture3DEXT, glFramebufferTexture3DEXT, "glFramebufferTexture3DEXT" );
    if( driver_glFramebufferTexture3DEXT == NULL ) {
      driver_glFramebufferTexture3DEXT = missing_glFramebufferTexture3DEXT;
    }
    dt.glFramebufferTexture3DEXT = MakeRegalProc(loader_glFramebufferTexture3DEXT,layer);
    _getProcAddress( driver_glGenFramebuffersEXT, glGenFramebuffersEXT, "glGenFramebuffersEXT" );
    if( driver_glGenFramebuffersEXT == NULL ) {
      driver_glGenFramebuffersEXT = missing_glGenFramebuffersEXT;
    }
    dt.glGenFramebuffersEXT = MakeRegalProc(loader_glGenFramebuffersEXT,layer);
    _getProcAddress( driver_glGenRenderbuffersEXT, glGenRenderbuffersEXT, "glGenRenderbuffersEXT" );
    if( driver_glGenRenderbuffersEXT == NULL ) {
      driver_glGenRenderbuffersEXT = missing_glGenRenderbuffersEXT;
    }
    dt.glGenRenderbuffersEXT = MakeRegalProc(loader_glGenRenderbuffersEXT,layer);
    _getProcAddress( driver_glGenerateMipmapEXT, glGenerateMipmapEXT, "glGenerateMipmapEXT" );
    if( driver_glGenerateMipmapEXT == NULL ) {
      driver_glGenerateMipmapEXT = missing_glGenerateMipmapEXT;
    }
    dt.glGenerateMipmapEXT = MakeRegalProc(loader_glGenerateMipmapEXT,layer);
    _getProcAddress( driver_glGetFramebufferAttachmentParameterivEXT, glGetFramebufferAttachmentParameterivEXT, "glGetFramebufferAttachmentParameterivEXT" );
    if( driver_glGetFramebufferAttachmentParameterivEXT == NULL ) {
      driver_glGetFramebufferAttachmentParameterivEXT = missing_glGetFramebufferAttachmentParameterivEXT;
    }
    dt.glGetFramebufferAttachmentParameterivEXT = MakeRegalProc(loader_glGetFramebufferAttachmentParameterivEXT,layer);
    _getProcAddress( driver_glGetRenderbufferParameterivEXT, glGetRenderbufferParameterivEXT, "glGetRenderbufferParameterivEXT" );
    if( driver_glGetRenderbufferParameterivEXT == NULL ) {
      driver_glGetRenderbufferParameterivEXT = missing_glGetRenderbufferParameterivEXT;
    }
    dt.glGetRenderbufferParameterivEXT = MakeRegalProc(loader_glGetRenderbufferParameterivEXT,layer);
    _getProcAddress( driver_glIsFramebufferEXT, glIsFramebufferEXT, "glIsFramebufferEXT" );
    if( driver_glIsFramebufferEXT == NULL ) {
      driver_glIsFramebufferEXT = missing_glIsFramebufferEXT;
    }
    dt.glIsFramebufferEXT = MakeRegalProc(loader_glIsFramebufferEXT,layer);
    _getProcAddress( driver_glIsRenderbufferEXT, glIsRenderbufferEXT, "glIsRenderbufferEXT" );
    if( driver_glIsRenderbufferEXT == NULL ) {
      driver_glIsRenderbufferEXT = missing_glIsRenderbufferEXT;
    }
    dt.glIsRenderbufferEXT = MakeRegalProc(loader_glIsRenderbufferEXT,layer);
    _getProcAddress( driver_glRenderbufferStorageEXT, glRenderbufferStorageEXT, "glRenderbufferStorageEXT" );
    if( driver_glRenderbufferStorageEXT == NULL ) {
      driver_glRenderbufferStorageEXT = missing_glRenderbufferStorageEXT;
    }
    dt.glRenderbufferStorageEXT = MakeRegalProc(loader_glRenderbufferStorageEXT,layer);

    // GL_EXT_geometry_shader4

    _getProcAddress( driver_glFramebufferTextureEXT, glFramebufferTextureEXT, "glFramebufferTextureEXT" );
    if( driver_glFramebufferTextureEXT == NULL ) {
      driver_glFramebufferTextureEXT = missing_glFramebufferTextureEXT;
    }
    dt.glFramebufferTextureEXT = MakeRegalProc(loader_glFramebufferTextureEXT,layer);
    _getProcAddress( driver_glFramebufferTextureFaceEXT, glFramebufferTextureFaceEXT, "glFramebufferTextureFaceEXT" );
    if( driver_glFramebufferTextureFaceEXT == NULL ) {
      driver_glFramebufferTextureFaceEXT = missing_glFramebufferTextureFaceEXT;
    }
    dt.glFramebufferTextureFaceEXT = MakeRegalProc(loader_glFramebufferTextureFaceEXT,layer);
    _getProcAddress( driver_glProgramParameteriEXT, glProgramParameteriEXT, "glProgramParameteriEXT" );
    if( driver_glProgramParameteriEXT == NULL ) {
      driver_glProgramParameteriEXT = missing_glProgramParameteriEXT;
    }
    dt.glProgramParameteriEXT = MakeRegalProc(loader_glProgramParameteriEXT,layer);

    // GL_EXT_gpu_program_parameters

    _getProcAddress( driver_glProgramEnvParameters4fvEXT, glProgramEnvParameters4fvEXT, "glProgramEnvParameters4fvEXT" );
    if( driver_glProgramEnvParameters4fvEXT == NULL ) {
      driver_glProgramEnvParameters4fvEXT = missing_glProgramEnvParameters4fvEXT;
    }
    dt.glProgramEnvParameters4fvEXT = MakeRegalProc(loader_glProgramEnvParameters4fvEXT,layer);
    _getProcAddress( driver_glProgramLocalParameters4fvEXT, glProgramLocalParameters4fvEXT, "glProgramLocalParameters4fvEXT" );
    if( driver_glProgramLocalParameters4fvEXT == NULL ) {
      driver_glProgramLocalParameters4fvEXT = missing_glProgramLocalParameters4fvEXT;
    }
    dt.glProgramLocalParameters4fvEXT = MakeRegalProc(loader_glProgramLocalParameters4fvEXT,layer);

    // GL_EXT_gpu_shader4

    _getProcAddress( driver_glBindFragDataLocationEXT, glBindFragDataLocationEXT, "glBindFragDataLocationEXT" );
    if( driver_glBindFragDataLocationEXT == NULL ) {
      driver_glBindFragDataLocationEXT = missing_glBindFragDataLocationEXT;
    }
    dt.glBindFragDataLocationEXT = MakeRegalProc(loader_glBindFragDataLocationEXT,layer);
    _getProcAddress( driver_glGetFragDataLocationEXT, glGetFragDataLocationEXT, "glGetFragDataLocationEXT" );
    if( driver_glGetFragDataLocationEXT == NULL ) {
      driver_glGetFragDataLocationEXT = missing_glGetFragDataLocationEXT;
    }
    dt.glGetFragDataLocationEXT = MakeRegalProc(loader_glGetFragDataLocationEXT,layer);
    _getProcAddress( driver_glGetUniformuivEXT, glGetUniformuivEXT, "glGetUniformuivEXT" );
    if( driver_glGetUniformuivEXT == NULL ) {
      driver_glGetUniformuivEXT = missing_glGetUniformuivEXT;
    }
    dt.glGetUniformuivEXT = MakeRegalProc(loader_glGetUniformuivEXT,layer);
    _getProcAddress( driver_glGetVertexAttribIivEXT, glGetVertexAttribIivEXT, "glGetVertexAttribIivEXT" );
    if( driver_glGetVertexAttribIivEXT == NULL ) {
      driver_glGetVertexAttribIivEXT = missing_glGetVertexAttribIivEXT;
    }
    dt.glGetVertexAttribIivEXT = MakeRegalProc(loader_glGetVertexAttribIivEXT,layer);
    _getProcAddress( driver_glGetVertexAttribIuivEXT, glGetVertexAttribIuivEXT, "glGetVertexAttribIuivEXT" );
    if( driver_glGetVertexAttribIuivEXT == NULL ) {
      driver_glGetVertexAttribIuivEXT = missing_glGetVertexAttribIuivEXT;
    }
    dt.glGetVertexAttribIuivEXT = MakeRegalProc(loader_glGetVertexAttribIuivEXT,layer);
    _getProcAddress( driver_glUniform1uiEXT, glUniform1uiEXT, "glUniform1uiEXT" );
    if( driver_glUniform1uiEXT == NULL ) {
      driver_glUniform1uiEXT = missing_glUniform1uiEXT;
    }
    dt.glUniform1uiEXT = MakeRegalProc(loader_glUniform1uiEXT,layer);
    _getProcAddress( driver_glUniform1uivEXT, glUniform1uivEXT, "glUniform1uivEXT" );
    if( driver_glUniform1uivEXT == NULL ) {
      driver_glUniform1uivEXT = missing_glUniform1uivEXT;
    }
    dt.glUniform1uivEXT = MakeRegalProc(loader_glUniform1uivEXT,layer);
    _getProcAddress( driver_glUniform2uiEXT, glUniform2uiEXT, "glUniform2uiEXT" );
    if( driver_glUniform2uiEXT == NULL ) {
      driver_glUniform2uiEXT = missing_glUniform2uiEXT;
    }
    dt.glUniform2uiEXT = MakeRegalProc(loader_glUniform2uiEXT,layer);
    _getProcAddress( driver_glUniform2uivEXT, glUniform2uivEXT, "glUniform2uivEXT" );
    if( driver_glUniform2uivEXT == NULL ) {
      driver_glUniform2uivEXT = missing_glUniform2uivEXT;
    }
    dt.glUniform2uivEXT = MakeRegalProc(loader_glUniform2uivEXT,layer);
    _getProcAddress( driver_glUniform3uiEXT, glUniform3uiEXT, "glUniform3uiEXT" );
    if( driver_glUniform3uiEXT == NULL ) {
      driver_glUniform3uiEXT = missing_glUniform3uiEXT;
    }
    dt.glUniform3uiEXT = MakeRegalProc(loader_glUniform3uiEXT,layer);
    _getProcAddress( driver_glUniform3uivEXT, glUniform3uivEXT, "glUniform3uivEXT" );
    if( driver_glUniform3uivEXT == NULL ) {
      driver_glUniform3uivEXT = missing_glUniform3uivEXT;
    }
    dt.glUniform3uivEXT = MakeRegalProc(loader_glUniform3uivEXT,layer);
    _getProcAddress( driver_glUniform4uiEXT, glUniform4uiEXT, "glUniform4uiEXT" );
    if( driver_glUniform4uiEXT == NULL ) {
      driver_glUniform4uiEXT = missing_glUniform4uiEXT;
    }
    dt.glUniform4uiEXT = MakeRegalProc(loader_glUniform4uiEXT,layer);
    _getProcAddress( driver_glUniform4uivEXT, glUniform4uivEXT, "glUniform4uivEXT" );
    if( driver_glUniform4uivEXT == NULL ) {
      driver_glUniform4uivEXT = missing_glUniform4uivEXT;
    }
    dt.glUniform4uivEXT = MakeRegalProc(loader_glUniform4uivEXT,layer);
    _getProcAddress( driver_glVertexAttribI1iEXT, glVertexAttribI1iEXT, "glVertexAttribI1iEXT" );
    if( driver_glVertexAttribI1iEXT == NULL ) {
      driver_glVertexAttribI1iEXT = missing_glVertexAttribI1iEXT;
    }
    dt.glVertexAttribI1iEXT = MakeRegalProc(loader_glVertexAttribI1iEXT,layer);
    _getProcAddress( driver_glVertexAttribI1ivEXT, glVertexAttribI1ivEXT, "glVertexAttribI1ivEXT" );
    if( driver_glVertexAttribI1ivEXT == NULL ) {
      driver_glVertexAttribI1ivEXT = missing_glVertexAttribI1ivEXT;
    }
    dt.glVertexAttribI1ivEXT = MakeRegalProc(loader_glVertexAttribI1ivEXT,layer);
    _getProcAddress( driver_glVertexAttribI1uiEXT, glVertexAttribI1uiEXT, "glVertexAttribI1uiEXT" );
    if( driver_glVertexAttribI1uiEXT == NULL ) {
      driver_glVertexAttribI1uiEXT = missing_glVertexAttribI1uiEXT;
    }
    dt.glVertexAttribI1uiEXT = MakeRegalProc(loader_glVertexAttribI1uiEXT,layer);
    _getProcAddress( driver_glVertexAttribI1uivEXT, glVertexAttribI1uivEXT, "glVertexAttribI1uivEXT" );
    if( driver_glVertexAttribI1uivEXT == NULL ) {
      driver_glVertexAttribI1uivEXT = missing_glVertexAttribI1uivEXT;
    }
    dt.glVertexAttribI1uivEXT = MakeRegalProc(loader_glVertexAttribI1uivEXT,layer);
    _getProcAddress( driver_glVertexAttribI2iEXT, glVertexAttribI2iEXT, "glVertexAttribI2iEXT" );
    if( driver_glVertexAttribI2iEXT == NULL ) {
      driver_glVertexAttribI2iEXT = missing_glVertexAttribI2iEXT;
    }
    dt.glVertexAttribI2iEXT = MakeRegalProc(loader_glVertexAttribI2iEXT,layer);
    _getProcAddress( driver_glVertexAttribI2ivEXT, glVertexAttribI2ivEXT, "glVertexAttribI2ivEXT" );
    if( driver_glVertexAttribI2ivEXT == NULL ) {
      driver_glVertexAttribI2ivEXT = missing_glVertexAttribI2ivEXT;
    }
    dt.glVertexAttribI2ivEXT = MakeRegalProc(loader_glVertexAttribI2ivEXT,layer);
    _getProcAddress( driver_glVertexAttribI2uiEXT, glVertexAttribI2uiEXT, "glVertexAttribI2uiEXT" );
    if( driver_glVertexAttribI2uiEXT == NULL ) {
      driver_glVertexAttribI2uiEXT = missing_glVertexAttribI2uiEXT;
    }
    dt.glVertexAttribI2uiEXT = MakeRegalProc(loader_glVertexAttribI2uiEXT,layer);
    _getProcAddress( driver_glVertexAttribI2uivEXT, glVertexAttribI2uivEXT, "glVertexAttribI2uivEXT" );
    if( driver_glVertexAttribI2uivEXT == NULL ) {
      driver_glVertexAttribI2uivEXT = missing_glVertexAttribI2uivEXT;
    }
    dt.glVertexAttribI2uivEXT = MakeRegalProc(loader_glVertexAttribI2uivEXT,layer);
    _getProcAddress( driver_glVertexAttribI3iEXT, glVertexAttribI3iEXT, "glVertexAttribI3iEXT" );
    if( driver_glVertexAttribI3iEXT == NULL ) {
      driver_glVertexAttribI3iEXT = missing_glVertexAttribI3iEXT;
    }
    dt.glVertexAttribI3iEXT = MakeRegalProc(loader_glVertexAttribI3iEXT,layer);
    _getProcAddress( driver_glVertexAttribI3ivEXT, glVertexAttribI3ivEXT, "glVertexAttribI3ivEXT" );
    if( driver_glVertexAttribI3ivEXT == NULL ) {
      driver_glVertexAttribI3ivEXT = missing_glVertexAttribI3ivEXT;
    }
    dt.glVertexAttribI3ivEXT = MakeRegalProc(loader_glVertexAttribI3ivEXT,layer);
    _getProcAddress( driver_glVertexAttribI3uiEXT, glVertexAttribI3uiEXT, "glVertexAttribI3uiEXT" );
    if( driver_glVertexAttribI3uiEXT == NULL ) {
      driver_glVertexAttribI3uiEXT = missing_glVertexAttribI3uiEXT;
    }
    dt.glVertexAttribI3uiEXT = MakeRegalProc(loader_glVertexAttribI3uiEXT,layer);
    _getProcAddress( driver_glVertexAttribI3uivEXT, glVertexAttribI3uivEXT, "glVertexAttribI3uivEXT" );
    if( driver_glVertexAttribI3uivEXT == NULL ) {
      driver_glVertexAttribI3uivEXT = missing_glVertexAttribI3uivEXT;
    }
    dt.glVertexAttribI3uivEXT = MakeRegalProc(loader_glVertexAttribI3uivEXT,layer);
    _getProcAddress( driver_glVertexAttribI4bvEXT, glVertexAttribI4bvEXT, "glVertexAttribI4bvEXT" );
    if( driver_glVertexAttribI4bvEXT == NULL ) {
      driver_glVertexAttribI4bvEXT = missing_glVertexAttribI4bvEXT;
    }
    dt.glVertexAttribI4bvEXT = MakeRegalProc(loader_glVertexAttribI4bvEXT,layer);
    _getProcAddress( driver_glVertexAttribI4iEXT, glVertexAttribI4iEXT, "glVertexAttribI4iEXT" );
    if( driver_glVertexAttribI4iEXT == NULL ) {
      driver_glVertexAttribI4iEXT = missing_glVertexAttribI4iEXT;
    }
    dt.glVertexAttribI4iEXT = MakeRegalProc(loader_glVertexAttribI4iEXT,layer);
    _getProcAddress( driver_glVertexAttribI4ivEXT, glVertexAttribI4ivEXT, "glVertexAttribI4ivEXT" );
    if( driver_glVertexAttribI4ivEXT == NULL ) {
      driver_glVertexAttribI4ivEXT = missing_glVertexAttribI4ivEXT;
    }
    dt.glVertexAttribI4ivEXT = MakeRegalProc(loader_glVertexAttribI4ivEXT,layer);
    _getProcAddress( driver_glVertexAttribI4svEXT, glVertexAttribI4svEXT, "glVertexAttribI4svEXT" );
    if( driver_glVertexAttribI4svEXT == NULL ) {
      driver_glVertexAttribI4svEXT = missing_glVertexAttribI4svEXT;
    }
    dt.glVertexAttribI4svEXT = MakeRegalProc(loader_glVertexAttribI4svEXT,layer);
    _getProcAddress( driver_glVertexAttribI4ubvEXT, glVertexAttribI4ubvEXT, "glVertexAttribI4ubvEXT" );
    if( driver_glVertexAttribI4ubvEXT == NULL ) {
      driver_glVertexAttribI4ubvEXT = missing_glVertexAttribI4ubvEXT;
    }
    dt.glVertexAttribI4ubvEXT = MakeRegalProc(loader_glVertexAttribI4ubvEXT,layer);
    _getProcAddress( driver_glVertexAttribI4uiEXT, glVertexAttribI4uiEXT, "glVertexAttribI4uiEXT" );
    if( driver_glVertexAttribI4uiEXT == NULL ) {
      driver_glVertexAttribI4uiEXT = missing_glVertexAttribI4uiEXT;
    }
    dt.glVertexAttribI4uiEXT = MakeRegalProc(loader_glVertexAttribI4uiEXT,layer);
    _getProcAddress( driver_glVertexAttribI4uivEXT, glVertexAttribI4uivEXT, "glVertexAttribI4uivEXT" );
    if( driver_glVertexAttribI4uivEXT == NULL ) {
      driver_glVertexAttribI4uivEXT = missing_glVertexAttribI4uivEXT;
    }
    dt.glVertexAttribI4uivEXT = MakeRegalProc(loader_glVertexAttribI4uivEXT,layer);
    _getProcAddress( driver_glVertexAttribI4usvEXT, glVertexAttribI4usvEXT, "glVertexAttribI4usvEXT" );
    if( driver_glVertexAttribI4usvEXT == NULL ) {
      driver_glVertexAttribI4usvEXT = missing_glVertexAttribI4usvEXT;
    }
    dt.glVertexAttribI4usvEXT = MakeRegalProc(loader_glVertexAttribI4usvEXT,layer);
    _getProcAddress( driver_glVertexAttribIPointerEXT, glVertexAttribIPointerEXT, "glVertexAttribIPointerEXT" );
    if( driver_glVertexAttribIPointerEXT == NULL ) {
      driver_glVertexAttribIPointerEXT = missing_glVertexAttribIPointerEXT;
    }
    dt.glVertexAttribIPointerEXT = MakeRegalProc(loader_glVertexAttribIPointerEXT,layer);

    // GL_EXT_histogram

    _getProcAddress( driver_glGetHistogramEXT, glGetHistogramEXT, "glGetHistogramEXT" );
    if( driver_glGetHistogramEXT == NULL ) {
      driver_glGetHistogramEXT = missing_glGetHistogramEXT;
    }
    dt.glGetHistogramEXT = MakeRegalProc(loader_glGetHistogramEXT,layer);
    _getProcAddress( driver_glGetHistogramParameterfvEXT, glGetHistogramParameterfvEXT, "glGetHistogramParameterfvEXT" );
    if( driver_glGetHistogramParameterfvEXT == NULL ) {
      driver_glGetHistogramParameterfvEXT = missing_glGetHistogramParameterfvEXT;
    }
    dt.glGetHistogramParameterfvEXT = MakeRegalProc(loader_glGetHistogramParameterfvEXT,layer);
    _getProcAddress( driver_glGetHistogramParameterivEXT, glGetHistogramParameterivEXT, "glGetHistogramParameterivEXT" );
    if( driver_glGetHistogramParameterivEXT == NULL ) {
      driver_glGetHistogramParameterivEXT = missing_glGetHistogramParameterivEXT;
    }
    dt.glGetHistogramParameterivEXT = MakeRegalProc(loader_glGetHistogramParameterivEXT,layer);
    _getProcAddress( driver_glGetMinmaxEXT, glGetMinmaxEXT, "glGetMinmaxEXT" );
    if( driver_glGetMinmaxEXT == NULL ) {
      driver_glGetMinmaxEXT = missing_glGetMinmaxEXT;
    }
    dt.glGetMinmaxEXT = MakeRegalProc(loader_glGetMinmaxEXT,layer);
    _getProcAddress( driver_glGetMinmaxParameterfvEXT, glGetMinmaxParameterfvEXT, "glGetMinmaxParameterfvEXT" );
    if( driver_glGetMinmaxParameterfvEXT == NULL ) {
      driver_glGetMinmaxParameterfvEXT = missing_glGetMinmaxParameterfvEXT;
    }
    dt.glGetMinmaxParameterfvEXT = MakeRegalProc(loader_glGetMinmaxParameterfvEXT,layer);
    _getProcAddress( driver_glGetMinmaxParameterivEXT, glGetMinmaxParameterivEXT, "glGetMinmaxParameterivEXT" );
    if( driver_glGetMinmaxParameterivEXT == NULL ) {
      driver_glGetMinmaxParameterivEXT = missing_glGetMinmaxParameterivEXT;
    }
    dt.glGetMinmaxParameterivEXT = MakeRegalProc(loader_glGetMinmaxParameterivEXT,layer);
    _getProcAddress( driver_glHistogramEXT, glHistogramEXT, "glHistogramEXT" );
    if( driver_glHistogramEXT == NULL ) {
      driver_glHistogramEXT = missing_glHistogramEXT;
    }
    dt.glHistogramEXT = MakeRegalProc(loader_glHistogramEXT,layer);
    _getProcAddress( driver_glMinmaxEXT, glMinmaxEXT, "glMinmaxEXT" );
    if( driver_glMinmaxEXT == NULL ) {
      driver_glMinmaxEXT = missing_glMinmaxEXT;
    }
    dt.glMinmaxEXT = MakeRegalProc(loader_glMinmaxEXT,layer);
    _getProcAddress( driver_glResetHistogramEXT, glResetHistogramEXT, "glResetHistogramEXT" );
    if( driver_glResetHistogramEXT == NULL ) {
      driver_glResetHistogramEXT = missing_glResetHistogramEXT;
    }
    dt.glResetHistogramEXT = MakeRegalProc(loader_glResetHistogramEXT,layer);
    _getProcAddress( driver_glResetMinmaxEXT, glResetMinmaxEXT, "glResetMinmaxEXT" );
    if( driver_glResetMinmaxEXT == NULL ) {
      driver_glResetMinmaxEXT = missing_glResetMinmaxEXT;
    }
    dt.glResetMinmaxEXT = MakeRegalProc(loader_glResetMinmaxEXT,layer);

    // GL_EXT_index_func

    _getProcAddress( driver_glIndexFuncEXT, glIndexFuncEXT, "glIndexFuncEXT" );
    if( driver_glIndexFuncEXT == NULL ) {
      driver_glIndexFuncEXT = missing_glIndexFuncEXT;
    }
    dt.glIndexFuncEXT = MakeRegalProc(loader_glIndexFuncEXT,layer);

    // GL_EXT_index_material

    _getProcAddress( driver_glIndexMaterialEXT, glIndexMaterialEXT, "glIndexMaterialEXT" );
    if( driver_glIndexMaterialEXT == NULL ) {
      driver_glIndexMaterialEXT = missing_glIndexMaterialEXT;
    }
    dt.glIndexMaterialEXT = MakeRegalProc(loader_glIndexMaterialEXT,layer);

    // GL_EXT_light_texture

    _getProcAddress( driver_glApplyTextureEXT, glApplyTextureEXT, "glApplyTextureEXT" );
    if( driver_glApplyTextureEXT == NULL ) {
      driver_glApplyTextureEXT = missing_glApplyTextureEXT;
    }
    dt.glApplyTextureEXT = MakeRegalProc(loader_glApplyTextureEXT,layer);
    _getProcAddress( driver_glTextureLightEXT, glTextureLightEXT, "glTextureLightEXT" );
    if( driver_glTextureLightEXT == NULL ) {
      driver_glTextureLightEXT = missing_glTextureLightEXT;
    }
    dt.glTextureLightEXT = MakeRegalProc(loader_glTextureLightEXT,layer);
    _getProcAddress( driver_glTextureMaterialEXT, glTextureMaterialEXT, "glTextureMaterialEXT" );
    if( driver_glTextureMaterialEXT == NULL ) {
      driver_glTextureMaterialEXT = missing_glTextureMaterialEXT;
    }
    dt.glTextureMaterialEXT = MakeRegalProc(loader_glTextureMaterialEXT,layer);

    // GL_EXT_map_buffer_range

    _getProcAddress( driver_glFlushMappedBufferRangeEXT, glFlushMappedBufferRangeEXT, "glFlushMappedBufferRangeEXT" );
    if( driver_glFlushMappedBufferRangeEXT == NULL ) {
      driver_glFlushMappedBufferRangeEXT = missing_glFlushMappedBufferRangeEXT;
    }
    dt.glFlushMappedBufferRangeEXT = MakeRegalProc(loader_glFlushMappedBufferRangeEXT,layer);
    _getProcAddress( driver_glMapBufferRangeEXT, glMapBufferRangeEXT, "glMapBufferRangeEXT" );
    if( driver_glMapBufferRangeEXT == NULL ) {
      driver_glMapBufferRangeEXT = missing_glMapBufferRangeEXT;
    }
    dt.glMapBufferRangeEXT = MakeRegalProc(loader_glMapBufferRangeEXT,layer);

    // GL_EXT_multi_draw_arrays

    _getProcAddress( driver_glMultiDrawArraysEXT, glMultiDrawArraysEXT, "glMultiDrawArraysEXT" );
    if( driver_glMultiDrawArraysEXT == NULL ) {
      driver_glMultiDrawArraysEXT = missing_glMultiDrawArraysEXT;
    }
    dt.glMultiDrawArraysEXT = MakeRegalProc(loader_glMultiDrawArraysEXT,layer);
    _getProcAddress( driver_glMultiDrawElementsEXT, glMultiDrawElementsEXT, "glMultiDrawElementsEXT" );
    if( driver_glMultiDrawElementsEXT == NULL ) {
      driver_glMultiDrawElementsEXT = missing_glMultiDrawElementsEXT;
    }
    dt.glMultiDrawElementsEXT = MakeRegalProc(loader_glMultiDrawElementsEXT,layer);

    // GL_EXT_multisample

    _getProcAddress( driver_glSampleMaskEXT, glSampleMaskEXT, "glSampleMaskEXT" );
    if( driver_glSampleMaskEXT == NULL ) {
      driver_glSampleMaskEXT = missing_glSampleMaskEXT;
    }
    dt.glSampleMaskEXT = MakeRegalProc(loader_glSampleMaskEXT,layer);
    _getProcAddress( driver_glSamplePatternEXT, glSamplePatternEXT, "glSamplePatternEXT" );
    if( driver_glSamplePatternEXT == NULL ) {
      driver_glSamplePatternEXT = missing_glSamplePatternEXT;
    }
    dt.glSamplePatternEXT = MakeRegalProc(loader_glSamplePatternEXT,layer);

    // GL_EXT_multisampled_render_to_texture

    _getProcAddress( driver_glFramebufferTexture2DMultisampleEXT, glFramebufferTexture2DMultisampleEXT, "glFramebufferTexture2DMultisampleEXT" );
    if( driver_glFramebufferTexture2DMultisampleEXT == NULL ) {
      driver_glFramebufferTexture2DMultisampleEXT = missing_glFramebufferTexture2DMultisampleEXT;
    }
    dt.glFramebufferTexture2DMultisampleEXT = MakeRegalProc(loader_glFramebufferTexture2DMultisampleEXT,layer);

    // GL_EXT_multiview_draw_buffers

    _getProcAddress( driver_glDrawBuffersIndexedEXT, glDrawBuffersIndexedEXT, "glDrawBuffersIndexedEXT" );
    if( driver_glDrawBuffersIndexedEXT == NULL ) {
      driver_glDrawBuffersIndexedEXT = missing_glDrawBuffersIndexedEXT;
    }
    dt.glDrawBuffersIndexedEXT = MakeRegalProc(loader_glDrawBuffersIndexedEXT,layer);
    _getProcAddress( driver_glGetIntegeri_vEXT, glGetIntegeri_vEXT, "glGetIntegeri_vEXT" );
    if( driver_glGetIntegeri_vEXT == NULL ) {
      driver_glGetIntegeri_vEXT = missing_glGetIntegeri_vEXT;
    }
    dt.glGetIntegeri_vEXT = MakeRegalProc(loader_glGetIntegeri_vEXT,layer);
    _getProcAddress( driver_glReadBufferIndexedEXT, glReadBufferIndexedEXT, "glReadBufferIndexedEXT" );
    if( driver_glReadBufferIndexedEXT == NULL ) {
      driver_glReadBufferIndexedEXT = missing_glReadBufferIndexedEXT;
    }
    dt.glReadBufferIndexedEXT = MakeRegalProc(loader_glReadBufferIndexedEXT,layer);

    // GL_EXT_occlusion_query_boolean

    _getProcAddress( driver_glBeginQueryEXT, glBeginQueryEXT, "glBeginQueryEXT" );
    if( driver_glBeginQueryEXT == NULL ) {
      driver_glBeginQueryEXT = missing_glBeginQueryEXT;
    }
    dt.glBeginQueryEXT = MakeRegalProc(loader_glBeginQueryEXT,layer);
    _getProcAddress( driver_glDeleteQueriesEXT, glDeleteQueriesEXT, "glDeleteQueriesEXT" );
    if( driver_glDeleteQueriesEXT == NULL ) {
      driver_glDeleteQueriesEXT = missing_glDeleteQueriesEXT;
    }
    dt.glDeleteQueriesEXT = MakeRegalProc(loader_glDeleteQueriesEXT,layer);
    _getProcAddress( driver_glEndQueryEXT, glEndQueryEXT, "glEndQueryEXT" );
    if( driver_glEndQueryEXT == NULL ) {
      driver_glEndQueryEXT = missing_glEndQueryEXT;
    }
    dt.glEndQueryEXT = MakeRegalProc(loader_glEndQueryEXT,layer);
    _getProcAddress( driver_glGenQueriesEXT, glGenQueriesEXT, "glGenQueriesEXT" );
    if( driver_glGenQueriesEXT == NULL ) {
      driver_glGenQueriesEXT = missing_glGenQueriesEXT;
    }
    dt.glGenQueriesEXT = MakeRegalProc(loader_glGenQueriesEXT,layer);
    _getProcAddress( driver_glGetQueryObjectuivEXT, glGetQueryObjectuivEXT, "glGetQueryObjectuivEXT" );
    if( driver_glGetQueryObjectuivEXT == NULL ) {
      driver_glGetQueryObjectuivEXT = missing_glGetQueryObjectuivEXT;
    }
    dt.glGetQueryObjectuivEXT = MakeRegalProc(loader_glGetQueryObjectuivEXT,layer);
    _getProcAddress( driver_glGetQueryivEXT, glGetQueryivEXT, "glGetQueryivEXT" );
    if( driver_glGetQueryivEXT == NULL ) {
      driver_glGetQueryivEXT = missing_glGetQueryivEXT;
    }
    dt.glGetQueryivEXT = MakeRegalProc(loader_glGetQueryivEXT,layer);
    _getProcAddress( driver_glIsQueryEXT, glIsQueryEXT, "glIsQueryEXT" );
    if( driver_glIsQueryEXT == NULL ) {
      driver_glIsQueryEXT = missing_glIsQueryEXT;
    }
    dt.glIsQueryEXT = MakeRegalProc(loader_glIsQueryEXT,layer);

    // GL_EXT_paletted_texture

    _getProcAddress( driver_glColorTableEXT, glColorTableEXT, "glColorTableEXT" );
    if( driver_glColorTableEXT == NULL ) {
      driver_glColorTableEXT = missing_glColorTableEXT;
    }
    dt.glColorTableEXT = MakeRegalProc(loader_glColorTableEXT,layer);
    _getProcAddress( driver_glGetColorTableEXT, glGetColorTableEXT, "glGetColorTableEXT" );
    if( driver_glGetColorTableEXT == NULL ) {
      driver_glGetColorTableEXT = missing_glGetColorTableEXT;
    }
    dt.glGetColorTableEXT = MakeRegalProc(loader_glGetColorTableEXT,layer);
    _getProcAddress( driver_glGetColorTableParameterfvEXT, glGetColorTableParameterfvEXT, "glGetColorTableParameterfvEXT" );
    if( driver_glGetColorTableParameterfvEXT == NULL ) {
      driver_glGetColorTableParameterfvEXT = missing_glGetColorTableParameterfvEXT;
    }
    dt.glGetColorTableParameterfvEXT = MakeRegalProc(loader_glGetColorTableParameterfvEXT,layer);
    _getProcAddress( driver_glGetColorTableParameterivEXT, glGetColorTableParameterivEXT, "glGetColorTableParameterivEXT" );
    if( driver_glGetColorTableParameterivEXT == NULL ) {
      driver_glGetColorTableParameterivEXT = missing_glGetColorTableParameterivEXT;
    }
    dt.glGetColorTableParameterivEXT = MakeRegalProc(loader_glGetColorTableParameterivEXT,layer);

    // GL_EXT_pixel_transform

    _getProcAddress( driver_glGetPixelTransformParameterfvEXT, glGetPixelTransformParameterfvEXT, "glGetPixelTransformParameterfvEXT" );
    if( driver_glGetPixelTransformParameterfvEXT == NULL ) {
      driver_glGetPixelTransformParameterfvEXT = missing_glGetPixelTransformParameterfvEXT;
    }
    dt.glGetPixelTransformParameterfvEXT = MakeRegalProc(loader_glGetPixelTransformParameterfvEXT,layer);
    _getProcAddress( driver_glGetPixelTransformParameterivEXT, glGetPixelTransformParameterivEXT, "glGetPixelTransformParameterivEXT" );
    if( driver_glGetPixelTransformParameterivEXT == NULL ) {
      driver_glGetPixelTransformParameterivEXT = missing_glGetPixelTransformParameterivEXT;
    }
    dt.glGetPixelTransformParameterivEXT = MakeRegalProc(loader_glGetPixelTransformParameterivEXT,layer);
    _getProcAddress( driver_glPixelTransformParameterfEXT, glPixelTransformParameterfEXT, "glPixelTransformParameterfEXT" );
    if( driver_glPixelTransformParameterfEXT == NULL ) {
      driver_glPixelTransformParameterfEXT = missing_glPixelTransformParameterfEXT;
    }
    dt.glPixelTransformParameterfEXT = MakeRegalProc(loader_glPixelTransformParameterfEXT,layer);
    _getProcAddress( driver_glPixelTransformParameterfvEXT, glPixelTransformParameterfvEXT, "glPixelTransformParameterfvEXT" );
    if( driver_glPixelTransformParameterfvEXT == NULL ) {
      driver_glPixelTransformParameterfvEXT = missing_glPixelTransformParameterfvEXT;
    }
    dt.glPixelTransformParameterfvEXT = MakeRegalProc(loader_glPixelTransformParameterfvEXT,layer);
    _getProcAddress( driver_glPixelTransformParameteriEXT, glPixelTransformParameteriEXT, "glPixelTransformParameteriEXT" );
    if( driver_glPixelTransformParameteriEXT == NULL ) {
      driver_glPixelTransformParameteriEXT = missing_glPixelTransformParameteriEXT;
    }
    dt.glPixelTransformParameteriEXT = MakeRegalProc(loader_glPixelTransformParameteriEXT,layer);
    _getProcAddress( driver_glPixelTransformParameterivEXT, glPixelTransformParameterivEXT, "glPixelTransformParameterivEXT" );
    if( driver_glPixelTransformParameterivEXT == NULL ) {
      driver_glPixelTransformParameterivEXT = missing_glPixelTransformParameterivEXT;
    }
    dt.glPixelTransformParameterivEXT = MakeRegalProc(loader_glPixelTransformParameterivEXT,layer);

    // GL_EXT_point_parameters

    _getProcAddress( driver_glPointParameterfEXT, glPointParameterfEXT, "glPointParameterfEXT" );
    if( driver_glPointParameterfEXT == NULL ) {
      driver_glPointParameterfEXT = missing_glPointParameterfEXT;
    }
    dt.glPointParameterfEXT = MakeRegalProc(loader_glPointParameterfEXT,layer);
    _getProcAddress( driver_glPointParameterfvEXT, glPointParameterfvEXT, "glPointParameterfvEXT" );
    if( driver_glPointParameterfvEXT == NULL ) {
      driver_glPointParameterfvEXT = missing_glPointParameterfvEXT;
    }
    dt.glPointParameterfvEXT = MakeRegalProc(loader_glPointParameterfvEXT,layer);

    // GL_EXT_polygon_offset

    _getProcAddress( driver_glPolygonOffsetEXT, glPolygonOffsetEXT, "glPolygonOffsetEXT" );
    if( driver_glPolygonOffsetEXT == NULL ) {
      driver_glPolygonOffsetEXT = missing_glPolygonOffsetEXT;
    }
    dt.glPolygonOffsetEXT = MakeRegalProc(loader_glPolygonOffsetEXT,layer);

    // GL_EXT_provoking_vertex

    _getProcAddress( driver_glProvokingVertexEXT, glProvokingVertexEXT, "glProvokingVertexEXT" );
    if( driver_glProvokingVertexEXT == NULL ) {
      driver_glProvokingVertexEXT = missing_glProvokingVertexEXT;
    }
    dt.glProvokingVertexEXT = MakeRegalProc(loader_glProvokingVertexEXT,layer);

    // GL_EXT_robustness

    _getProcAddress( driver_glGetnUniformfvEXT, glGetnUniformfvEXT, "glGetnUniformfvEXT" );
    if( driver_glGetnUniformfvEXT == NULL ) {
      driver_glGetnUniformfvEXT = missing_glGetnUniformfvEXT;
    }
    dt.glGetnUniformfvEXT = MakeRegalProc(loader_glGetnUniformfvEXT,layer);
    _getProcAddress( driver_glGetnUniformivEXT, glGetnUniformivEXT, "glGetnUniformivEXT" );
    if( driver_glGetnUniformivEXT == NULL ) {
      driver_glGetnUniformivEXT = missing_glGetnUniformivEXT;
    }
    dt.glGetnUniformivEXT = MakeRegalProc(loader_glGetnUniformivEXT,layer);
    _getProcAddress( driver_glReadnPixelsEXT, glReadnPixelsEXT, "glReadnPixelsEXT" );
    if( driver_glReadnPixelsEXT == NULL ) {
      driver_glReadnPixelsEXT = missing_glReadnPixelsEXT;
    }
    dt.glReadnPixelsEXT = MakeRegalProc(loader_glReadnPixelsEXT,layer);

    // GL_EXT_scene_marker

    _getProcAddress( driver_glBeginSceneEXT, glBeginSceneEXT, "glBeginSceneEXT" );
    if( driver_glBeginSceneEXT == NULL ) {
      driver_glBeginSceneEXT = missing_glBeginSceneEXT;
    }
    dt.glBeginSceneEXT = MakeRegalProc(loader_glBeginSceneEXT,layer);
    _getProcAddress( driver_glEndSceneEXT, glEndSceneEXT, "glEndSceneEXT" );
    if( driver_glEndSceneEXT == NULL ) {
      driver_glEndSceneEXT = missing_glEndSceneEXT;
    }
    dt.glEndSceneEXT = MakeRegalProc(loader_glEndSceneEXT,layer);

    // GL_EXT_secondary_color

    _getProcAddress( driver_glSecondaryColor3bEXT, glSecondaryColor3bEXT, "glSecondaryColor3bEXT" );
    if( driver_glSecondaryColor3bEXT == NULL ) {
      driver_glSecondaryColor3bEXT = missing_glSecondaryColor3bEXT;
    }
    dt.glSecondaryColor3bEXT = MakeRegalProc(loader_glSecondaryColor3bEXT,layer);
    _getProcAddress( driver_glSecondaryColor3bvEXT, glSecondaryColor3bvEXT, "glSecondaryColor3bvEXT" );
    if( driver_glSecondaryColor3bvEXT == NULL ) {
      driver_glSecondaryColor3bvEXT = missing_glSecondaryColor3bvEXT;
    }
    dt.glSecondaryColor3bvEXT = MakeRegalProc(loader_glSecondaryColor3bvEXT,layer);
    _getProcAddress( driver_glSecondaryColor3dEXT, glSecondaryColor3dEXT, "glSecondaryColor3dEXT" );
    if( driver_glSecondaryColor3dEXT == NULL ) {
      driver_glSecondaryColor3dEXT = missing_glSecondaryColor3dEXT;
    }
    dt.glSecondaryColor3dEXT = MakeRegalProc(loader_glSecondaryColor3dEXT,layer);
    _getProcAddress( driver_glSecondaryColor3dvEXT, glSecondaryColor3dvEXT, "glSecondaryColor3dvEXT" );
    if( driver_glSecondaryColor3dvEXT == NULL ) {
      driver_glSecondaryColor3dvEXT = missing_glSecondaryColor3dvEXT;
    }
    dt.glSecondaryColor3dvEXT = MakeRegalProc(loader_glSecondaryColor3dvEXT,layer);
    _getProcAddress( driver_glSecondaryColor3fEXT, glSecondaryColor3fEXT, "glSecondaryColor3fEXT" );
    if( driver_glSecondaryColor3fEXT == NULL ) {
      driver_glSecondaryColor3fEXT = missing_glSecondaryColor3fEXT;
    }
    dt.glSecondaryColor3fEXT = MakeRegalProc(loader_glSecondaryColor3fEXT,layer);
    _getProcAddress( driver_glSecondaryColor3fvEXT, glSecondaryColor3fvEXT, "glSecondaryColor3fvEXT" );
    if( driver_glSecondaryColor3fvEXT == NULL ) {
      driver_glSecondaryColor3fvEXT = missing_glSecondaryColor3fvEXT;
    }
    dt.glSecondaryColor3fvEXT = MakeRegalProc(loader_glSecondaryColor3fvEXT,layer);
    _getProcAddress( driver_glSecondaryColor3iEXT, glSecondaryColor3iEXT, "glSecondaryColor3iEXT" );
    if( driver_glSecondaryColor3iEXT == NULL ) {
      driver_glSecondaryColor3iEXT = missing_glSecondaryColor3iEXT;
    }
    dt.glSecondaryColor3iEXT = MakeRegalProc(loader_glSecondaryColor3iEXT,layer);
    _getProcAddress( driver_glSecondaryColor3ivEXT, glSecondaryColor3ivEXT, "glSecondaryColor3ivEXT" );
    if( driver_glSecondaryColor3ivEXT == NULL ) {
      driver_glSecondaryColor3ivEXT = missing_glSecondaryColor3ivEXT;
    }
    dt.glSecondaryColor3ivEXT = MakeRegalProc(loader_glSecondaryColor3ivEXT,layer);
    _getProcAddress( driver_glSecondaryColor3sEXT, glSecondaryColor3sEXT, "glSecondaryColor3sEXT" );
    if( driver_glSecondaryColor3sEXT == NULL ) {
      driver_glSecondaryColor3sEXT = missing_glSecondaryColor3sEXT;
    }
    dt.glSecondaryColor3sEXT = MakeRegalProc(loader_glSecondaryColor3sEXT,layer);
    _getProcAddress( driver_glSecondaryColor3svEXT, glSecondaryColor3svEXT, "glSecondaryColor3svEXT" );
    if( driver_glSecondaryColor3svEXT == NULL ) {
      driver_glSecondaryColor3svEXT = missing_glSecondaryColor3svEXT;
    }
    dt.glSecondaryColor3svEXT = MakeRegalProc(loader_glSecondaryColor3svEXT,layer);
    _getProcAddress( driver_glSecondaryColor3ubEXT, glSecondaryColor3ubEXT, "glSecondaryColor3ubEXT" );
    if( driver_glSecondaryColor3ubEXT == NULL ) {
      driver_glSecondaryColor3ubEXT = missing_glSecondaryColor3ubEXT;
    }
    dt.glSecondaryColor3ubEXT = MakeRegalProc(loader_glSecondaryColor3ubEXT,layer);
    _getProcAddress( driver_glSecondaryColor3ubvEXT, glSecondaryColor3ubvEXT, "glSecondaryColor3ubvEXT" );
    if( driver_glSecondaryColor3ubvEXT == NULL ) {
      driver_glSecondaryColor3ubvEXT = missing_glSecondaryColor3ubvEXT;
    }
    dt.glSecondaryColor3ubvEXT = MakeRegalProc(loader_glSecondaryColor3ubvEXT,layer);
    _getProcAddress( driver_glSecondaryColor3uiEXT, glSecondaryColor3uiEXT, "glSecondaryColor3uiEXT" );
    if( driver_glSecondaryColor3uiEXT == NULL ) {
      driver_glSecondaryColor3uiEXT = missing_glSecondaryColor3uiEXT;
    }
    dt.glSecondaryColor3uiEXT = MakeRegalProc(loader_glSecondaryColor3uiEXT,layer);
    _getProcAddress( driver_glSecondaryColor3uivEXT, glSecondaryColor3uivEXT, "glSecondaryColor3uivEXT" );
    if( driver_glSecondaryColor3uivEXT == NULL ) {
      driver_glSecondaryColor3uivEXT = missing_glSecondaryColor3uivEXT;
    }
    dt.glSecondaryColor3uivEXT = MakeRegalProc(loader_glSecondaryColor3uivEXT,layer);
    _getProcAddress( driver_glSecondaryColor3usEXT, glSecondaryColor3usEXT, "glSecondaryColor3usEXT" );
    if( driver_glSecondaryColor3usEXT == NULL ) {
      driver_glSecondaryColor3usEXT = missing_glSecondaryColor3usEXT;
    }
    dt.glSecondaryColor3usEXT = MakeRegalProc(loader_glSecondaryColor3usEXT,layer);
    _getProcAddress( driver_glSecondaryColor3usvEXT, glSecondaryColor3usvEXT, "glSecondaryColor3usvEXT" );
    if( driver_glSecondaryColor3usvEXT == NULL ) {
      driver_glSecondaryColor3usvEXT = missing_glSecondaryColor3usvEXT;
    }
    dt.glSecondaryColor3usvEXT = MakeRegalProc(loader_glSecondaryColor3usvEXT,layer);
    _getProcAddress( driver_glSecondaryColorPointerEXT, glSecondaryColorPointerEXT, "glSecondaryColorPointerEXT" );
    if( driver_glSecondaryColorPointerEXT == NULL ) {
      driver_glSecondaryColorPointerEXT = missing_glSecondaryColorPointerEXT;
    }
    dt.glSecondaryColorPointerEXT = MakeRegalProc(loader_glSecondaryColorPointerEXT,layer);

    // GL_EXT_separate_shader_objects

    _getProcAddress( driver_glActiveProgramEXT, glActiveProgramEXT, "glActiveProgramEXT" );
    if( driver_glActiveProgramEXT == NULL ) {
      driver_glActiveProgramEXT = missing_glActiveProgramEXT;
    }
    dt.glActiveProgramEXT = MakeRegalProc(loader_glActiveProgramEXT,layer);
    _getProcAddress( driver_glCreateShaderProgramEXT, glCreateShaderProgramEXT, "glCreateShaderProgramEXT" );
    if( driver_glCreateShaderProgramEXT == NULL ) {
      driver_glCreateShaderProgramEXT = missing_glCreateShaderProgramEXT;
    }
    dt.glCreateShaderProgramEXT = MakeRegalProc(loader_glCreateShaderProgramEXT,layer);
    _getProcAddress( driver_glUseShaderProgramEXT, glUseShaderProgramEXT, "glUseShaderProgramEXT" );
    if( driver_glUseShaderProgramEXT == NULL ) {
      driver_glUseShaderProgramEXT = missing_glUseShaderProgramEXT;
    }
    dt.glUseShaderProgramEXT = MakeRegalProc(loader_glUseShaderProgramEXT,layer);

    // GL_EXT_shader_image_load_store

    _getProcAddress( driver_glBindImageTextureEXT, glBindImageTextureEXT, "glBindImageTextureEXT" );
    if( driver_glBindImageTextureEXT == NULL ) {
      driver_glBindImageTextureEXT = missing_glBindImageTextureEXT;
    }
    dt.glBindImageTextureEXT = MakeRegalProc(loader_glBindImageTextureEXT,layer);
    _getProcAddress( driver_glMemoryBarrierEXT, glMemoryBarrierEXT, "glMemoryBarrierEXT" );
    if( driver_glMemoryBarrierEXT == NULL ) {
      driver_glMemoryBarrierEXT = missing_glMemoryBarrierEXT;
    }
    dt.glMemoryBarrierEXT = MakeRegalProc(loader_glMemoryBarrierEXT,layer);

    // GL_EXT_stencil_clear_tag

    _getProcAddress( driver_glStencilClearTagEXT, glStencilClearTagEXT, "glStencilClearTagEXT" );
    if( driver_glStencilClearTagEXT == NULL ) {
      driver_glStencilClearTagEXT = missing_glStencilClearTagEXT;
    }
    dt.glStencilClearTagEXT = MakeRegalProc(loader_glStencilClearTagEXT,layer);

    // GL_EXT_stencil_two_side

    _getProcAddress( driver_glActiveStencilFaceEXT, glActiveStencilFaceEXT, "glActiveStencilFaceEXT" );
    if( driver_glActiveStencilFaceEXT == NULL ) {
      driver_glActiveStencilFaceEXT = missing_glActiveStencilFaceEXT;
    }
    dt.glActiveStencilFaceEXT = MakeRegalProc(loader_glActiveStencilFaceEXT,layer);

    // GL_EXT_subtexture

    _getProcAddress( driver_glTexSubImage1DEXT, glTexSubImage1DEXT, "glTexSubImage1DEXT" );
    if( driver_glTexSubImage1DEXT == NULL ) {
      driver_glTexSubImage1DEXT = missing_glTexSubImage1DEXT;
    }
    dt.glTexSubImage1DEXT = MakeRegalProc(loader_glTexSubImage1DEXT,layer);
    _getProcAddress( driver_glTexSubImage2DEXT, glTexSubImage2DEXT, "glTexSubImage2DEXT" );
    if( driver_glTexSubImage2DEXT == NULL ) {
      driver_glTexSubImage2DEXT = missing_glTexSubImage2DEXT;
    }
    dt.glTexSubImage2DEXT = MakeRegalProc(loader_glTexSubImage2DEXT,layer);
    _getProcAddress( driver_glTexSubImage3DEXT, glTexSubImage3DEXT, "glTexSubImage3DEXT" );
    if( driver_glTexSubImage3DEXT == NULL ) {
      driver_glTexSubImage3DEXT = missing_glTexSubImage3DEXT;
    }
    dt.glTexSubImage3DEXT = MakeRegalProc(loader_glTexSubImage3DEXT,layer);

    // GL_EXT_texture3D

    _getProcAddress( driver_glTexImage3DEXT, glTexImage3DEXT, "glTexImage3DEXT" );
    if( driver_glTexImage3DEXT == NULL ) {
      driver_glTexImage3DEXT = missing_glTexImage3DEXT;
    }
    dt.glTexImage3DEXT = MakeRegalProc(loader_glTexImage3DEXT,layer);

    // GL_EXT_texture_array

    _getProcAddress( driver_glFramebufferTextureLayerEXT, glFramebufferTextureLayerEXT, "glFramebufferTextureLayerEXT" );
    if( driver_glFramebufferTextureLayerEXT == NULL ) {
      driver_glFramebufferTextureLayerEXT = missing_glFramebufferTextureLayerEXT;
    }
    dt.glFramebufferTextureLayerEXT = MakeRegalProc(loader_glFramebufferTextureLayerEXT,layer);

    // GL_EXT_texture_buffer_object

    _getProcAddress( driver_glTexBufferEXT, glTexBufferEXT, "glTexBufferEXT" );
    if( driver_glTexBufferEXT == NULL ) {
      driver_glTexBufferEXT = missing_glTexBufferEXT;
    }
    dt.glTexBufferEXT = MakeRegalProc(loader_glTexBufferEXT,layer);

    // GL_EXT_texture_integer

    _getProcAddress( driver_glClearColorIiEXT, glClearColorIiEXT, "glClearColorIiEXT" );
    if( driver_glClearColorIiEXT == NULL ) {
      driver_glClearColorIiEXT = missing_glClearColorIiEXT;
    }
    dt.glClearColorIiEXT = MakeRegalProc(loader_glClearColorIiEXT,layer);
    _getProcAddress( driver_glClearColorIuiEXT, glClearColorIuiEXT, "glClearColorIuiEXT" );
    if( driver_glClearColorIuiEXT == NULL ) {
      driver_glClearColorIuiEXT = missing_glClearColorIuiEXT;
    }
    dt.glClearColorIuiEXT = MakeRegalProc(loader_glClearColorIuiEXT,layer);
    _getProcAddress( driver_glGetTexParameterIivEXT, glGetTexParameterIivEXT, "glGetTexParameterIivEXT" );
    if( driver_glGetTexParameterIivEXT == NULL ) {
      driver_glGetTexParameterIivEXT = missing_glGetTexParameterIivEXT;
    }
    dt.glGetTexParameterIivEXT = MakeRegalProc(loader_glGetTexParameterIivEXT,layer);
    _getProcAddress( driver_glGetTexParameterIuivEXT, glGetTexParameterIuivEXT, "glGetTexParameterIuivEXT" );
    if( driver_glGetTexParameterIuivEXT == NULL ) {
      driver_glGetTexParameterIuivEXT = missing_glGetTexParameterIuivEXT;
    }
    dt.glGetTexParameterIuivEXT = MakeRegalProc(loader_glGetTexParameterIuivEXT,layer);
    _getProcAddress( driver_glTexParameterIivEXT, glTexParameterIivEXT, "glTexParameterIivEXT" );
    if( driver_glTexParameterIivEXT == NULL ) {
      driver_glTexParameterIivEXT = missing_glTexParameterIivEXT;
    }
    dt.glTexParameterIivEXT = MakeRegalProc(loader_glTexParameterIivEXT,layer);
    _getProcAddress( driver_glTexParameterIuivEXT, glTexParameterIuivEXT, "glTexParameterIuivEXT" );
    if( driver_glTexParameterIuivEXT == NULL ) {
      driver_glTexParameterIuivEXT = missing_glTexParameterIuivEXT;
    }
    dt.glTexParameterIuivEXT = MakeRegalProc(loader_glTexParameterIuivEXT,layer);

    // GL_EXT_texture_object

    _getProcAddress( driver_glAreTexturesResidentEXT, glAreTexturesResidentEXT, "glAreTexturesResidentEXT" );
    if( driver_glAreTexturesResidentEXT == NULL ) {
      driver_glAreTexturesResidentEXT = missing_glAreTexturesResidentEXT;
    }
    dt.glAreTexturesResidentEXT = MakeRegalProc(loader_glAreTexturesResidentEXT,layer);
    _getProcAddress( driver_glBindTextureEXT, glBindTextureEXT, "glBindTextureEXT" );
    if( driver_glBindTextureEXT == NULL ) {
      driver_glBindTextureEXT = missing_glBindTextureEXT;
    }
    dt.glBindTextureEXT = MakeRegalProc(loader_glBindTextureEXT,layer);
    _getProcAddress( driver_glDeleteTexturesEXT, glDeleteTexturesEXT, "glDeleteTexturesEXT" );
    if( driver_glDeleteTexturesEXT == NULL ) {
      driver_glDeleteTexturesEXT = missing_glDeleteTexturesEXT;
    }
    dt.glDeleteTexturesEXT = MakeRegalProc(loader_glDeleteTexturesEXT,layer);
    _getProcAddress( driver_glGenTexturesEXT, glGenTexturesEXT, "glGenTexturesEXT" );
    if( driver_glGenTexturesEXT == NULL ) {
      driver_glGenTexturesEXT = missing_glGenTexturesEXT;
    }
    dt.glGenTexturesEXT = MakeRegalProc(loader_glGenTexturesEXT,layer);
    _getProcAddress( driver_glIsTextureEXT, glIsTextureEXT, "glIsTextureEXT" );
    if( driver_glIsTextureEXT == NULL ) {
      driver_glIsTextureEXT = missing_glIsTextureEXT;
    }
    dt.glIsTextureEXT = MakeRegalProc(loader_glIsTextureEXT,layer);
    _getProcAddress( driver_glPrioritizeTexturesEXT, glPrioritizeTexturesEXT, "glPrioritizeTexturesEXT" );
    if( driver_glPrioritizeTexturesEXT == NULL ) {
      driver_glPrioritizeTexturesEXT = missing_glPrioritizeTexturesEXT;
    }
    dt.glPrioritizeTexturesEXT = MakeRegalProc(loader_glPrioritizeTexturesEXT,layer);

    // GL_EXT_texture_perturb_normal

    _getProcAddress( driver_glTextureNormalEXT, glTextureNormalEXT, "glTextureNormalEXT" );
    if( driver_glTextureNormalEXT == NULL ) {
      driver_glTextureNormalEXT = missing_glTextureNormalEXT;
    }
    dt.glTextureNormalEXT = MakeRegalProc(loader_glTextureNormalEXT,layer);

    // GL_EXT_texture_storage

    _getProcAddress( driver_glTexStorage1DEXT, glTexStorage1DEXT, "glTexStorage1DEXT" );
    if( driver_glTexStorage1DEXT == NULL ) {
      driver_glTexStorage1DEXT = missing_glTexStorage1DEXT;
    }
    dt.glTexStorage1DEXT = MakeRegalProc(loader_glTexStorage1DEXT,layer);
    _getProcAddress( driver_glTexStorage2DEXT, glTexStorage2DEXT, "glTexStorage2DEXT" );
    if( driver_glTexStorage2DEXT == NULL ) {
      driver_glTexStorage2DEXT = missing_glTexStorage2DEXT;
    }
    dt.glTexStorage2DEXT = MakeRegalProc(loader_glTexStorage2DEXT,layer);
    _getProcAddress( driver_glTexStorage3DEXT, glTexStorage3DEXT, "glTexStorage3DEXT" );
    if( driver_glTexStorage3DEXT == NULL ) {
      driver_glTexStorage3DEXT = missing_glTexStorage3DEXT;
    }
    dt.glTexStorage3DEXT = MakeRegalProc(loader_glTexStorage3DEXT,layer);

    // GL_EXT_timer_query

    _getProcAddress( driver_glGetQueryObjecti64vEXT, glGetQueryObjecti64vEXT, "glGetQueryObjecti64vEXT" );
    if( driver_glGetQueryObjecti64vEXT == NULL ) {
      driver_glGetQueryObjecti64vEXT = missing_glGetQueryObjecti64vEXT;
    }
    dt.glGetQueryObjecti64vEXT = MakeRegalProc(loader_glGetQueryObjecti64vEXT,layer);
    _getProcAddress( driver_glGetQueryObjectui64vEXT, glGetQueryObjectui64vEXT, "glGetQueryObjectui64vEXT" );
    if( driver_glGetQueryObjectui64vEXT == NULL ) {
      driver_glGetQueryObjectui64vEXT = missing_glGetQueryObjectui64vEXT;
    }
    dt.glGetQueryObjectui64vEXT = MakeRegalProc(loader_glGetQueryObjectui64vEXT,layer);

    // GL_EXT_transform_feedback

    _getProcAddress( driver_glBeginTransformFeedbackEXT, glBeginTransformFeedbackEXT, "glBeginTransformFeedbackEXT" );
    if( driver_glBeginTransformFeedbackEXT == NULL ) {
      driver_glBeginTransformFeedbackEXT = missing_glBeginTransformFeedbackEXT;
    }
    dt.glBeginTransformFeedbackEXT = MakeRegalProc(loader_glBeginTransformFeedbackEXT,layer);
    _getProcAddress( driver_glBindBufferBaseEXT, glBindBufferBaseEXT, "glBindBufferBaseEXT" );
    if( driver_glBindBufferBaseEXT == NULL ) {
      driver_glBindBufferBaseEXT = missing_glBindBufferBaseEXT;
    }
    dt.glBindBufferBaseEXT = MakeRegalProc(loader_glBindBufferBaseEXT,layer);
    _getProcAddress( driver_glBindBufferOffsetEXT, glBindBufferOffsetEXT, "glBindBufferOffsetEXT" );
    if( driver_glBindBufferOffsetEXT == NULL ) {
      driver_glBindBufferOffsetEXT = missing_glBindBufferOffsetEXT;
    }
    dt.glBindBufferOffsetEXT = MakeRegalProc(loader_glBindBufferOffsetEXT,layer);
    _getProcAddress( driver_glBindBufferRangeEXT, glBindBufferRangeEXT, "glBindBufferRangeEXT" );
    if( driver_glBindBufferRangeEXT == NULL ) {
      driver_glBindBufferRangeEXT = missing_glBindBufferRangeEXT;
    }
    dt.glBindBufferRangeEXT = MakeRegalProc(loader_glBindBufferRangeEXT,layer);
    _getProcAddress( driver_glEndTransformFeedbackEXT, glEndTransformFeedbackEXT, "glEndTransformFeedbackEXT" );
    if( driver_glEndTransformFeedbackEXT == NULL ) {
      driver_glEndTransformFeedbackEXT = missing_glEndTransformFeedbackEXT;
    }
    dt.glEndTransformFeedbackEXT = MakeRegalProc(loader_glEndTransformFeedbackEXT,layer);
    _getProcAddress( driver_glGetTransformFeedbackVaryingEXT, glGetTransformFeedbackVaryingEXT, "glGetTransformFeedbackVaryingEXT" );
    if( driver_glGetTransformFeedbackVaryingEXT == NULL ) {
      driver_glGetTransformFeedbackVaryingEXT = missing_glGetTransformFeedbackVaryingEXT;
    }
    dt.glGetTransformFeedbackVaryingEXT = MakeRegalProc(loader_glGetTransformFeedbackVaryingEXT,layer);
    _getProcAddress( driver_glTransformFeedbackVaryingsEXT, glTransformFeedbackVaryingsEXT, "glTransformFeedbackVaryingsEXT" );
    if( driver_glTransformFeedbackVaryingsEXT == NULL ) {
      driver_glTransformFeedbackVaryingsEXT = missing_glTransformFeedbackVaryingsEXT;
    }
    dt.glTransformFeedbackVaryingsEXT = MakeRegalProc(loader_glTransformFeedbackVaryingsEXT,layer);

    // GL_EXT_vertex_array

    _getProcAddress( driver_glArrayElementEXT, glArrayElementEXT, "glArrayElementEXT" );
    if( driver_glArrayElementEXT == NULL ) {
      driver_glArrayElementEXT = missing_glArrayElementEXT;
    }
    dt.glArrayElementEXT = MakeRegalProc(loader_glArrayElementEXT,layer);
    _getProcAddress( driver_glColorPointerEXT, glColorPointerEXT, "glColorPointerEXT" );
    if( driver_glColorPointerEXT == NULL ) {
      driver_glColorPointerEXT = missing_glColorPointerEXT;
    }
    dt.glColorPointerEXT = MakeRegalProc(loader_glColorPointerEXT,layer);
    _getProcAddress( driver_glDrawArraysEXT, glDrawArraysEXT, "glDrawArraysEXT" );
    if( driver_glDrawArraysEXT == NULL ) {
      driver_glDrawArraysEXT = missing_glDrawArraysEXT;
    }
    dt.glDrawArraysEXT = MakeRegalProc(loader_glDrawArraysEXT,layer);
    _getProcAddress( driver_glEdgeFlagPointerEXT, glEdgeFlagPointerEXT, "glEdgeFlagPointerEXT" );
    if( driver_glEdgeFlagPointerEXT == NULL ) {
      driver_glEdgeFlagPointerEXT = missing_glEdgeFlagPointerEXT;
    }
    dt.glEdgeFlagPointerEXT = MakeRegalProc(loader_glEdgeFlagPointerEXT,layer);
    _getProcAddress( driver_glGetPointervEXT, glGetPointervEXT, "glGetPointervEXT" );
    if( driver_glGetPointervEXT == NULL ) {
      driver_glGetPointervEXT = missing_glGetPointervEXT;
    }
    dt.glGetPointervEXT = MakeRegalProc(loader_glGetPointervEXT,layer);
    _getProcAddress( driver_glIndexPointerEXT, glIndexPointerEXT, "glIndexPointerEXT" );
    if( driver_glIndexPointerEXT == NULL ) {
      driver_glIndexPointerEXT = missing_glIndexPointerEXT;
    }
    dt.glIndexPointerEXT = MakeRegalProc(loader_glIndexPointerEXT,layer);
    _getProcAddress( driver_glNormalPointerEXT, glNormalPointerEXT, "glNormalPointerEXT" );
    if( driver_glNormalPointerEXT == NULL ) {
      driver_glNormalPointerEXT = missing_glNormalPointerEXT;
    }
    dt.glNormalPointerEXT = MakeRegalProc(loader_glNormalPointerEXT,layer);
    _getProcAddress( driver_glTexCoordPointerEXT, glTexCoordPointerEXT, "glTexCoordPointerEXT" );
    if( driver_glTexCoordPointerEXT == NULL ) {
      driver_glTexCoordPointerEXT = missing_glTexCoordPointerEXT;
    }
    dt.glTexCoordPointerEXT = MakeRegalProc(loader_glTexCoordPointerEXT,layer);
    _getProcAddress( driver_glVertexPointerEXT, glVertexPointerEXT, "glVertexPointerEXT" );
    if( driver_glVertexPointerEXT == NULL ) {
      driver_glVertexPointerEXT = missing_glVertexPointerEXT;
    }
    dt.glVertexPointerEXT = MakeRegalProc(loader_glVertexPointerEXT,layer);

    // GL_EXT_vertex_attrib_64bit

    _getProcAddress( driver_glGetVertexAttribLdvEXT, glGetVertexAttribLdvEXT, "glGetVertexAttribLdvEXT" );
    if( driver_glGetVertexAttribLdvEXT == NULL ) {
      driver_glGetVertexAttribLdvEXT = missing_glGetVertexAttribLdvEXT;
    }
    dt.glGetVertexAttribLdvEXT = MakeRegalProc(loader_glGetVertexAttribLdvEXT,layer);
    _getProcAddress( driver_glVertexArrayVertexAttribLOffsetEXT, glVertexArrayVertexAttribLOffsetEXT, "glVertexArrayVertexAttribLOffsetEXT" );
    if( driver_glVertexArrayVertexAttribLOffsetEXT == NULL ) {
      driver_glVertexArrayVertexAttribLOffsetEXT = missing_glVertexArrayVertexAttribLOffsetEXT;
    }
    dt.glVertexArrayVertexAttribLOffsetEXT = MakeRegalProc(loader_glVertexArrayVertexAttribLOffsetEXT,layer);
    _getProcAddress( driver_glVertexAttribL1dEXT, glVertexAttribL1dEXT, "glVertexAttribL1dEXT" );
    if( driver_glVertexAttribL1dEXT == NULL ) {
      driver_glVertexAttribL1dEXT = missing_glVertexAttribL1dEXT;
    }
    dt.glVertexAttribL1dEXT = MakeRegalProc(loader_glVertexAttribL1dEXT,layer);
    _getProcAddress( driver_glVertexAttribL1dvEXT, glVertexAttribL1dvEXT, "glVertexAttribL1dvEXT" );
    if( driver_glVertexAttribL1dvEXT == NULL ) {
      driver_glVertexAttribL1dvEXT = missing_glVertexAttribL1dvEXT;
    }
    dt.glVertexAttribL1dvEXT = MakeRegalProc(loader_glVertexAttribL1dvEXT,layer);
    _getProcAddress( driver_glVertexAttribL2dEXT, glVertexAttribL2dEXT, "glVertexAttribL2dEXT" );
    if( driver_glVertexAttribL2dEXT == NULL ) {
      driver_glVertexAttribL2dEXT = missing_glVertexAttribL2dEXT;
    }
    dt.glVertexAttribL2dEXT = MakeRegalProc(loader_glVertexAttribL2dEXT,layer);
    _getProcAddress( driver_glVertexAttribL2dvEXT, glVertexAttribL2dvEXT, "glVertexAttribL2dvEXT" );
    if( driver_glVertexAttribL2dvEXT == NULL ) {
      driver_glVertexAttribL2dvEXT = missing_glVertexAttribL2dvEXT;
    }
    dt.glVertexAttribL2dvEXT = MakeRegalProc(loader_glVertexAttribL2dvEXT,layer);
    _getProcAddress( driver_glVertexAttribL3dEXT, glVertexAttribL3dEXT, "glVertexAttribL3dEXT" );
    if( driver_glVertexAttribL3dEXT == NULL ) {
      driver_glVertexAttribL3dEXT = missing_glVertexAttribL3dEXT;
    }
    dt.glVertexAttribL3dEXT = MakeRegalProc(loader_glVertexAttribL3dEXT,layer);
    _getProcAddress( driver_glVertexAttribL3dvEXT, glVertexAttribL3dvEXT, "glVertexAttribL3dvEXT" );
    if( driver_glVertexAttribL3dvEXT == NULL ) {
      driver_glVertexAttribL3dvEXT = missing_glVertexAttribL3dvEXT;
    }
    dt.glVertexAttribL3dvEXT = MakeRegalProc(loader_glVertexAttribL3dvEXT,layer);
    _getProcAddress( driver_glVertexAttribL4dEXT, glVertexAttribL4dEXT, "glVertexAttribL4dEXT" );
    if( driver_glVertexAttribL4dEXT == NULL ) {
      driver_glVertexAttribL4dEXT = missing_glVertexAttribL4dEXT;
    }
    dt.glVertexAttribL4dEXT = MakeRegalProc(loader_glVertexAttribL4dEXT,layer);
    _getProcAddress( driver_glVertexAttribL4dvEXT, glVertexAttribL4dvEXT, "glVertexAttribL4dvEXT" );
    if( driver_glVertexAttribL4dvEXT == NULL ) {
      driver_glVertexAttribL4dvEXT = missing_glVertexAttribL4dvEXT;
    }
    dt.glVertexAttribL4dvEXT = MakeRegalProc(loader_glVertexAttribL4dvEXT,layer);
    _getProcAddress( driver_glVertexAttribLPointerEXT, glVertexAttribLPointerEXT, "glVertexAttribLPointerEXT" );
    if( driver_glVertexAttribLPointerEXT == NULL ) {
      driver_glVertexAttribLPointerEXT = missing_glVertexAttribLPointerEXT;
    }
    dt.glVertexAttribLPointerEXT = MakeRegalProc(loader_glVertexAttribLPointerEXT,layer);

    // GL_EXT_vertex_shader

    _getProcAddress( driver_glBeginVertexShaderEXT, glBeginVertexShaderEXT, "glBeginVertexShaderEXT" );
    if( driver_glBeginVertexShaderEXT == NULL ) {
      driver_glBeginVertexShaderEXT = missing_glBeginVertexShaderEXT;
    }
    dt.glBeginVertexShaderEXT = MakeRegalProc(loader_glBeginVertexShaderEXT,layer);
    _getProcAddress( driver_glBindLightParameterEXT, glBindLightParameterEXT, "glBindLightParameterEXT" );
    if( driver_glBindLightParameterEXT == NULL ) {
      driver_glBindLightParameterEXT = missing_glBindLightParameterEXT;
    }
    dt.glBindLightParameterEXT = MakeRegalProc(loader_glBindLightParameterEXT,layer);
    _getProcAddress( driver_glBindMaterialParameterEXT, glBindMaterialParameterEXT, "glBindMaterialParameterEXT" );
    if( driver_glBindMaterialParameterEXT == NULL ) {
      driver_glBindMaterialParameterEXT = missing_glBindMaterialParameterEXT;
    }
    dt.glBindMaterialParameterEXT = MakeRegalProc(loader_glBindMaterialParameterEXT,layer);
    _getProcAddress( driver_glBindParameterEXT, glBindParameterEXT, "glBindParameterEXT" );
    if( driver_glBindParameterEXT == NULL ) {
      driver_glBindParameterEXT = missing_glBindParameterEXT;
    }
    dt.glBindParameterEXT = MakeRegalProc(loader_glBindParameterEXT,layer);
    _getProcAddress( driver_glBindTexGenParameterEXT, glBindTexGenParameterEXT, "glBindTexGenParameterEXT" );
    if( driver_glBindTexGenParameterEXT == NULL ) {
      driver_glBindTexGenParameterEXT = missing_glBindTexGenParameterEXT;
    }
    dt.glBindTexGenParameterEXT = MakeRegalProc(loader_glBindTexGenParameterEXT,layer);
    _getProcAddress( driver_glBindTextureUnitParameterEXT, glBindTextureUnitParameterEXT, "glBindTextureUnitParameterEXT" );
    if( driver_glBindTextureUnitParameterEXT == NULL ) {
      driver_glBindTextureUnitParameterEXT = missing_glBindTextureUnitParameterEXT;
    }
    dt.glBindTextureUnitParameterEXT = MakeRegalProc(loader_glBindTextureUnitParameterEXT,layer);
    _getProcAddress( driver_glBindVertexShaderEXT, glBindVertexShaderEXT, "glBindVertexShaderEXT" );
    if( driver_glBindVertexShaderEXT == NULL ) {
      driver_glBindVertexShaderEXT = missing_glBindVertexShaderEXT;
    }
    dt.glBindVertexShaderEXT = MakeRegalProc(loader_glBindVertexShaderEXT,layer);
    _getProcAddress( driver_glDeleteVertexShaderEXT, glDeleteVertexShaderEXT, "glDeleteVertexShaderEXT" );
    if( driver_glDeleteVertexShaderEXT == NULL ) {
      driver_glDeleteVertexShaderEXT = missing_glDeleteVertexShaderEXT;
    }
    dt.glDeleteVertexShaderEXT = MakeRegalProc(loader_glDeleteVertexShaderEXT,layer);
    _getProcAddress( driver_glDisableVariantClientStateEXT, glDisableVariantClientStateEXT, "glDisableVariantClientStateEXT" );
    if( driver_glDisableVariantClientStateEXT == NULL ) {
      driver_glDisableVariantClientStateEXT = missing_glDisableVariantClientStateEXT;
    }
    dt.glDisableVariantClientStateEXT = MakeRegalProc(loader_glDisableVariantClientStateEXT,layer);
    _getProcAddress( driver_glEnableVariantClientStateEXT, glEnableVariantClientStateEXT, "glEnableVariantClientStateEXT" );
    if( driver_glEnableVariantClientStateEXT == NULL ) {
      driver_glEnableVariantClientStateEXT = missing_glEnableVariantClientStateEXT;
    }
    dt.glEnableVariantClientStateEXT = MakeRegalProc(loader_glEnableVariantClientStateEXT,layer);
    _getProcAddress( driver_glEndVertexShaderEXT, glEndVertexShaderEXT, "glEndVertexShaderEXT" );
    if( driver_glEndVertexShaderEXT == NULL ) {
      driver_glEndVertexShaderEXT = missing_glEndVertexShaderEXT;
    }
    dt.glEndVertexShaderEXT = MakeRegalProc(loader_glEndVertexShaderEXT,layer);
    _getProcAddress( driver_glExtractComponentEXT, glExtractComponentEXT, "glExtractComponentEXT" );
    if( driver_glExtractComponentEXT == NULL ) {
      driver_glExtractComponentEXT = missing_glExtractComponentEXT;
    }
    dt.glExtractComponentEXT = MakeRegalProc(loader_glExtractComponentEXT,layer);
    _getProcAddress( driver_glGenSymbolsEXT, glGenSymbolsEXT, "glGenSymbolsEXT" );
    if( driver_glGenSymbolsEXT == NULL ) {
      driver_glGenSymbolsEXT = missing_glGenSymbolsEXT;
    }
    dt.glGenSymbolsEXT = MakeRegalProc(loader_glGenSymbolsEXT,layer);
    _getProcAddress( driver_glGenVertexShadersEXT, glGenVertexShadersEXT, "glGenVertexShadersEXT" );
    if( driver_glGenVertexShadersEXT == NULL ) {
      driver_glGenVertexShadersEXT = missing_glGenVertexShadersEXT;
    }
    dt.glGenVertexShadersEXT = MakeRegalProc(loader_glGenVertexShadersEXT,layer);
    _getProcAddress( driver_glGetInvariantBooleanvEXT, glGetInvariantBooleanvEXT, "glGetInvariantBooleanvEXT" );
    if( driver_glGetInvariantBooleanvEXT == NULL ) {
      driver_glGetInvariantBooleanvEXT = missing_glGetInvariantBooleanvEXT;
    }
    dt.glGetInvariantBooleanvEXT = MakeRegalProc(loader_glGetInvariantBooleanvEXT,layer);
    _getProcAddress( driver_glGetInvariantFloatvEXT, glGetInvariantFloatvEXT, "glGetInvariantFloatvEXT" );
    if( driver_glGetInvariantFloatvEXT == NULL ) {
      driver_glGetInvariantFloatvEXT = missing_glGetInvariantFloatvEXT;
    }
    dt.glGetInvariantFloatvEXT = MakeRegalProc(loader_glGetInvariantFloatvEXT,layer);
    _getProcAddress( driver_glGetInvariantIntegervEXT, glGetInvariantIntegervEXT, "glGetInvariantIntegervEXT" );
    if( driver_glGetInvariantIntegervEXT == NULL ) {
      driver_glGetInvariantIntegervEXT = missing_glGetInvariantIntegervEXT;
    }
    dt.glGetInvariantIntegervEXT = MakeRegalProc(loader_glGetInvariantIntegervEXT,layer);
    _getProcAddress( driver_glGetLocalConstantBooleanvEXT, glGetLocalConstantBooleanvEXT, "glGetLocalConstantBooleanvEXT" );
    if( driver_glGetLocalConstantBooleanvEXT == NULL ) {
      driver_glGetLocalConstantBooleanvEXT = missing_glGetLocalConstantBooleanvEXT;
    }
    dt.glGetLocalConstantBooleanvEXT = MakeRegalProc(loader_glGetLocalConstantBooleanvEXT,layer);
    _getProcAddress( driver_glGetLocalConstantFloatvEXT, glGetLocalConstantFloatvEXT, "glGetLocalConstantFloatvEXT" );
    if( driver_glGetLocalConstantFloatvEXT == NULL ) {
      driver_glGetLocalConstantFloatvEXT = missing_glGetLocalConstantFloatvEXT;
    }
    dt.glGetLocalConstantFloatvEXT = MakeRegalProc(loader_glGetLocalConstantFloatvEXT,layer);
    _getProcAddress( driver_glGetLocalConstantIntegervEXT, glGetLocalConstantIntegervEXT, "glGetLocalConstantIntegervEXT" );
    if( driver_glGetLocalConstantIntegervEXT == NULL ) {
      driver_glGetLocalConstantIntegervEXT = missing_glGetLocalConstantIntegervEXT;
    }
    dt.glGetLocalConstantIntegervEXT = MakeRegalProc(loader_glGetLocalConstantIntegervEXT,layer);
    _getProcAddress( driver_glGetVariantBooleanvEXT, glGetVariantBooleanvEXT, "glGetVariantBooleanvEXT" );
    if( driver_glGetVariantBooleanvEXT == NULL ) {
      driver_glGetVariantBooleanvEXT = missing_glGetVariantBooleanvEXT;
    }
    dt.glGetVariantBooleanvEXT = MakeRegalProc(loader_glGetVariantBooleanvEXT,layer);
    _getProcAddress( driver_glGetVariantFloatvEXT, glGetVariantFloatvEXT, "glGetVariantFloatvEXT" );
    if( driver_glGetVariantFloatvEXT == NULL ) {
      driver_glGetVariantFloatvEXT = missing_glGetVariantFloatvEXT;
    }
    dt.glGetVariantFloatvEXT = MakeRegalProc(loader_glGetVariantFloatvEXT,layer);
    _getProcAddress( driver_glGetVariantIntegervEXT, glGetVariantIntegervEXT, "glGetVariantIntegervEXT" );
    if( driver_glGetVariantIntegervEXT == NULL ) {
      driver_glGetVariantIntegervEXT = missing_glGetVariantIntegervEXT;
    }
    dt.glGetVariantIntegervEXT = MakeRegalProc(loader_glGetVariantIntegervEXT,layer);
    _getProcAddress( driver_glGetVariantPointervEXT, glGetVariantPointervEXT, "glGetVariantPointervEXT" );
    if( driver_glGetVariantPointervEXT == NULL ) {
      driver_glGetVariantPointervEXT = missing_glGetVariantPointervEXT;
    }
    dt.glGetVariantPointervEXT = MakeRegalProc(loader_glGetVariantPointervEXT,layer);
    _getProcAddress( driver_glInsertComponentEXT, glInsertComponentEXT, "glInsertComponentEXT" );
    if( driver_glInsertComponentEXT == NULL ) {
      driver_glInsertComponentEXT = missing_glInsertComponentEXT;
    }
    dt.glInsertComponentEXT = MakeRegalProc(loader_glInsertComponentEXT,layer);
    _getProcAddress( driver_glIsVariantEnabledEXT, glIsVariantEnabledEXT, "glIsVariantEnabledEXT" );
    if( driver_glIsVariantEnabledEXT == NULL ) {
      driver_glIsVariantEnabledEXT = missing_glIsVariantEnabledEXT;
    }
    dt.glIsVariantEnabledEXT = MakeRegalProc(loader_glIsVariantEnabledEXT,layer);
    _getProcAddress( driver_glSetInvariantEXT, glSetInvariantEXT, "glSetInvariantEXT" );
    if( driver_glSetInvariantEXT == NULL ) {
      driver_glSetInvariantEXT = missing_glSetInvariantEXT;
    }
    dt.glSetInvariantEXT = MakeRegalProc(loader_glSetInvariantEXT,layer);
    _getProcAddress( driver_glSetLocalConstantEXT, glSetLocalConstantEXT, "glSetLocalConstantEXT" );
    if( driver_glSetLocalConstantEXT == NULL ) {
      driver_glSetLocalConstantEXT = missing_glSetLocalConstantEXT;
    }
    dt.glSetLocalConstantEXT = MakeRegalProc(loader_glSetLocalConstantEXT,layer);
    _getProcAddress( driver_glShaderOp1EXT, glShaderOp1EXT, "glShaderOp1EXT" );
    if( driver_glShaderOp1EXT == NULL ) {
      driver_glShaderOp1EXT = missing_glShaderOp1EXT;
    }
    dt.glShaderOp1EXT = MakeRegalProc(loader_glShaderOp1EXT,layer);
    _getProcAddress( driver_glShaderOp2EXT, glShaderOp2EXT, "glShaderOp2EXT" );
    if( driver_glShaderOp2EXT == NULL ) {
      driver_glShaderOp2EXT = missing_glShaderOp2EXT;
    }
    dt.glShaderOp2EXT = MakeRegalProc(loader_glShaderOp2EXT,layer);
    _getProcAddress( driver_glShaderOp3EXT, glShaderOp3EXT, "glShaderOp3EXT" );
    if( driver_glShaderOp3EXT == NULL ) {
      driver_glShaderOp3EXT = missing_glShaderOp3EXT;
    }
    dt.glShaderOp3EXT = MakeRegalProc(loader_glShaderOp3EXT,layer);
    _getProcAddress( driver_glSwizzleEXT, glSwizzleEXT, "glSwizzleEXT" );
    if( driver_glSwizzleEXT == NULL ) {
      driver_glSwizzleEXT = missing_glSwizzleEXT;
    }
    dt.glSwizzleEXT = MakeRegalProc(loader_glSwizzleEXT,layer);
    _getProcAddress( driver_glVariantPointerEXT, glVariantPointerEXT, "glVariantPointerEXT" );
    if( driver_glVariantPointerEXT == NULL ) {
      driver_glVariantPointerEXT = missing_glVariantPointerEXT;
    }
    dt.glVariantPointerEXT = MakeRegalProc(loader_glVariantPointerEXT,layer);
    _getProcAddress( driver_glVariantbvEXT, glVariantbvEXT, "glVariantbvEXT" );
    if( driver_glVariantbvEXT == NULL ) {
      driver_glVariantbvEXT = missing_glVariantbvEXT;
    }
    dt.glVariantbvEXT = MakeRegalProc(loader_glVariantbvEXT,layer);
    _getProcAddress( driver_glVariantdvEXT, glVariantdvEXT, "glVariantdvEXT" );
    if( driver_glVariantdvEXT == NULL ) {
      driver_glVariantdvEXT = missing_glVariantdvEXT;
    }
    dt.glVariantdvEXT = MakeRegalProc(loader_glVariantdvEXT,layer);
    _getProcAddress( driver_glVariantfvEXT, glVariantfvEXT, "glVariantfvEXT" );
    if( driver_glVariantfvEXT == NULL ) {
      driver_glVariantfvEXT = missing_glVariantfvEXT;
    }
    dt.glVariantfvEXT = MakeRegalProc(loader_glVariantfvEXT,layer);
    _getProcAddress( driver_glVariantivEXT, glVariantivEXT, "glVariantivEXT" );
    if( driver_glVariantivEXT == NULL ) {
      driver_glVariantivEXT = missing_glVariantivEXT;
    }
    dt.glVariantivEXT = MakeRegalProc(loader_glVariantivEXT,layer);
    _getProcAddress( driver_glVariantsvEXT, glVariantsvEXT, "glVariantsvEXT" );
    if( driver_glVariantsvEXT == NULL ) {
      driver_glVariantsvEXT = missing_glVariantsvEXT;
    }
    dt.glVariantsvEXT = MakeRegalProc(loader_glVariantsvEXT,layer);
    _getProcAddress( driver_glVariantubvEXT, glVariantubvEXT, "glVariantubvEXT" );
    if( driver_glVariantubvEXT == NULL ) {
      driver_glVariantubvEXT = missing_glVariantubvEXT;
    }
    dt.glVariantubvEXT = MakeRegalProc(loader_glVariantubvEXT,layer);
    _getProcAddress( driver_glVariantuivEXT, glVariantuivEXT, "glVariantuivEXT" );
    if( driver_glVariantuivEXT == NULL ) {
      driver_glVariantuivEXT = missing_glVariantuivEXT;
    }
    dt.glVariantuivEXT = MakeRegalProc(loader_glVariantuivEXT,layer);
    _getProcAddress( driver_glVariantusvEXT, glVariantusvEXT, "glVariantusvEXT" );
    if( driver_glVariantusvEXT == NULL ) {
      driver_glVariantusvEXT = missing_glVariantusvEXT;
    }
    dt.glVariantusvEXT = MakeRegalProc(loader_glVariantusvEXT,layer);
    _getProcAddress( driver_glWriteMaskEXT, glWriteMaskEXT, "glWriteMaskEXT" );
    if( driver_glWriteMaskEXT == NULL ) {
      driver_glWriteMaskEXT = missing_glWriteMaskEXT;
    }
    dt.glWriteMaskEXT = MakeRegalProc(loader_glWriteMaskEXT,layer);

    // GL_EXT_vertex_weighting

    _getProcAddress( driver_glVertexWeightPointerEXT, glVertexWeightPointerEXT, "glVertexWeightPointerEXT" );
    if( driver_glVertexWeightPointerEXT == NULL ) {
      driver_glVertexWeightPointerEXT = missing_glVertexWeightPointerEXT;
    }
    dt.glVertexWeightPointerEXT = MakeRegalProc(loader_glVertexWeightPointerEXT,layer);
    _getProcAddress( driver_glVertexWeightfEXT, glVertexWeightfEXT, "glVertexWeightfEXT" );
    if( driver_glVertexWeightfEXT == NULL ) {
      driver_glVertexWeightfEXT = missing_glVertexWeightfEXT;
    }
    dt.glVertexWeightfEXT = MakeRegalProc(loader_glVertexWeightfEXT,layer);
    _getProcAddress( driver_glVertexWeightfvEXT, glVertexWeightfvEXT, "glVertexWeightfvEXT" );
    if( driver_glVertexWeightfvEXT == NULL ) {
      driver_glVertexWeightfvEXT = missing_glVertexWeightfvEXT;
    }
    dt.glVertexWeightfvEXT = MakeRegalProc(loader_glVertexWeightfvEXT,layer);

    // GL_EXT_x11_sync_object

    _getProcAddress( driver_glImportSyncEXT, glImportSyncEXT, "glImportSyncEXT" );
    if( driver_glImportSyncEXT == NULL ) {
      driver_glImportSyncEXT = missing_glImportSyncEXT;
    }
    dt.glImportSyncEXT = MakeRegalProc(loader_glImportSyncEXT,layer);

    // GL_GREMEDY_frame_terminator

    _getProcAddress( driver_glFrameTerminatorGREMEDY, glFrameTerminatorGREMEDY, "glFrameTerminatorGREMEDY" );
    if( driver_glFrameTerminatorGREMEDY == NULL ) {
      driver_glFrameTerminatorGREMEDY = missing_glFrameTerminatorGREMEDY;
    }
    dt.glFrameTerminatorGREMEDY = MakeRegalProc(loader_glFrameTerminatorGREMEDY,layer);

    // GL_GREMEDY_string_marker

    _getProcAddress( driver_glStringMarkerGREMEDY, glStringMarkerGREMEDY, "glStringMarkerGREMEDY" );
    if( driver_glStringMarkerGREMEDY == NULL ) {
      driver_glStringMarkerGREMEDY = missing_glStringMarkerGREMEDY;
    }
    dt.glStringMarkerGREMEDY = MakeRegalProc(loader_glStringMarkerGREMEDY,layer);

    // GL_HP_image_transform

    _getProcAddress( driver_glGetImageTransformParameterfvHP, glGetImageTransformParameterfvHP, "glGetImageTransformParameterfvHP" );
    if( driver_glGetImageTransformParameterfvHP == NULL ) {
      driver_glGetImageTransformParameterfvHP = missing_glGetImageTransformParameterfvHP;
    }
    dt.glGetImageTransformParameterfvHP = MakeRegalProc(loader_glGetImageTransformParameterfvHP,layer);
    _getProcAddress( driver_glGetImageTransformParameterivHP, glGetImageTransformParameterivHP, "glGetImageTransformParameterivHP" );
    if( driver_glGetImageTransformParameterivHP == NULL ) {
      driver_glGetImageTransformParameterivHP = missing_glGetImageTransformParameterivHP;
    }
    dt.glGetImageTransformParameterivHP = MakeRegalProc(loader_glGetImageTransformParameterivHP,layer);
    _getProcAddress( driver_glImageTransformParameterfHP, glImageTransformParameterfHP, "glImageTransformParameterfHP" );
    if( driver_glImageTransformParameterfHP == NULL ) {
      driver_glImageTransformParameterfHP = missing_glImageTransformParameterfHP;
    }
    dt.glImageTransformParameterfHP = MakeRegalProc(loader_glImageTransformParameterfHP,layer);
    _getProcAddress( driver_glImageTransformParameterfvHP, glImageTransformParameterfvHP, "glImageTransformParameterfvHP" );
    if( driver_glImageTransformParameterfvHP == NULL ) {
      driver_glImageTransformParameterfvHP = missing_glImageTransformParameterfvHP;
    }
    dt.glImageTransformParameterfvHP = MakeRegalProc(loader_glImageTransformParameterfvHP,layer);
    _getProcAddress( driver_glImageTransformParameteriHP, glImageTransformParameteriHP, "glImageTransformParameteriHP" );
    if( driver_glImageTransformParameteriHP == NULL ) {
      driver_glImageTransformParameteriHP = missing_glImageTransformParameteriHP;
    }
    dt.glImageTransformParameteriHP = MakeRegalProc(loader_glImageTransformParameteriHP,layer);
    _getProcAddress( driver_glImageTransformParameterivHP, glImageTransformParameterivHP, "glImageTransformParameterivHP" );
    if( driver_glImageTransformParameterivHP == NULL ) {
      driver_glImageTransformParameterivHP = missing_glImageTransformParameterivHP;
    }
    dt.glImageTransformParameterivHP = MakeRegalProc(loader_glImageTransformParameterivHP,layer);

    // GL_IBM_multimode_draw_arrays

    _getProcAddress( driver_glMultiModeDrawArraysIBM, glMultiModeDrawArraysIBM, "glMultiModeDrawArraysIBM" );
    if( driver_glMultiModeDrawArraysIBM == NULL ) {
      driver_glMultiModeDrawArraysIBM = missing_glMultiModeDrawArraysIBM;
    }
    dt.glMultiModeDrawArraysIBM = MakeRegalProc(loader_glMultiModeDrawArraysIBM,layer);
    _getProcAddress( driver_glMultiModeDrawElementsIBM, glMultiModeDrawElementsIBM, "glMultiModeDrawElementsIBM" );
    if( driver_glMultiModeDrawElementsIBM == NULL ) {
      driver_glMultiModeDrawElementsIBM = missing_glMultiModeDrawElementsIBM;
    }
    dt.glMultiModeDrawElementsIBM = MakeRegalProc(loader_glMultiModeDrawElementsIBM,layer);

    // GL_IBM_vertex_array_lists

    _getProcAddress( driver_glColorPointerListIBM, glColorPointerListIBM, "glColorPointerListIBM" );
    if( driver_glColorPointerListIBM == NULL ) {
      driver_glColorPointerListIBM = missing_glColorPointerListIBM;
    }
    dt.glColorPointerListIBM = MakeRegalProc(loader_glColorPointerListIBM,layer);
    _getProcAddress( driver_glEdgeFlagPointerListIBM, glEdgeFlagPointerListIBM, "glEdgeFlagPointerListIBM" );
    if( driver_glEdgeFlagPointerListIBM == NULL ) {
      driver_glEdgeFlagPointerListIBM = missing_glEdgeFlagPointerListIBM;
    }
    dt.glEdgeFlagPointerListIBM = MakeRegalProc(loader_glEdgeFlagPointerListIBM,layer);
    _getProcAddress( driver_glFogCoordPointerListIBM, glFogCoordPointerListIBM, "glFogCoordPointerListIBM" );
    if( driver_glFogCoordPointerListIBM == NULL ) {
      driver_glFogCoordPointerListIBM = missing_glFogCoordPointerListIBM;
    }
    dt.glFogCoordPointerListIBM = MakeRegalProc(loader_glFogCoordPointerListIBM,layer);
    _getProcAddress( driver_glIndexPointerListIBM, glIndexPointerListIBM, "glIndexPointerListIBM" );
    if( driver_glIndexPointerListIBM == NULL ) {
      driver_glIndexPointerListIBM = missing_glIndexPointerListIBM;
    }
    dt.glIndexPointerListIBM = MakeRegalProc(loader_glIndexPointerListIBM,layer);
    _getProcAddress( driver_glNormalPointerListIBM, glNormalPointerListIBM, "glNormalPointerListIBM" );
    if( driver_glNormalPointerListIBM == NULL ) {
      driver_glNormalPointerListIBM = missing_glNormalPointerListIBM;
    }
    dt.glNormalPointerListIBM = MakeRegalProc(loader_glNormalPointerListIBM,layer);
    _getProcAddress( driver_glSecondaryColorPointerListIBM, glSecondaryColorPointerListIBM, "glSecondaryColorPointerListIBM" );
    if( driver_glSecondaryColorPointerListIBM == NULL ) {
      driver_glSecondaryColorPointerListIBM = missing_glSecondaryColorPointerListIBM;
    }
    dt.glSecondaryColorPointerListIBM = MakeRegalProc(loader_glSecondaryColorPointerListIBM,layer);
    _getProcAddress( driver_glTexCoordPointerListIBM, glTexCoordPointerListIBM, "glTexCoordPointerListIBM" );
    if( driver_glTexCoordPointerListIBM == NULL ) {
      driver_glTexCoordPointerListIBM = missing_glTexCoordPointerListIBM;
    }
    dt.glTexCoordPointerListIBM = MakeRegalProc(loader_glTexCoordPointerListIBM,layer);
    _getProcAddress( driver_glVertexPointerListIBM, glVertexPointerListIBM, "glVertexPointerListIBM" );
    if( driver_glVertexPointerListIBM == NULL ) {
      driver_glVertexPointerListIBM = missing_glVertexPointerListIBM;
    }
    dt.glVertexPointerListIBM = MakeRegalProc(loader_glVertexPointerListIBM,layer);

    // GL_IMG_multisampled_render_to_texture

    _getProcAddress( driver_glFramebufferTexture2DMultisampleIMG, glFramebufferTexture2DMultisampleIMG, "glFramebufferTexture2DMultisampleIMG" );
    if( driver_glFramebufferTexture2DMultisampleIMG == NULL ) {
      driver_glFramebufferTexture2DMultisampleIMG = missing_glFramebufferTexture2DMultisampleIMG;
    }
    dt.glFramebufferTexture2DMultisampleIMG = MakeRegalProc(loader_glFramebufferTexture2DMultisampleIMG,layer);
    _getProcAddress( driver_glRenderbufferStorageMultisampleIMG, glRenderbufferStorageMultisampleIMG, "glRenderbufferStorageMultisampleIMG" );
    if( driver_glRenderbufferStorageMultisampleIMG == NULL ) {
      driver_glRenderbufferStorageMultisampleIMG = missing_glRenderbufferStorageMultisampleIMG;
    }
    dt.glRenderbufferStorageMultisampleIMG = MakeRegalProc(loader_glRenderbufferStorageMultisampleIMG,layer);

    // GL_INGR_blend_func_separate

    _getProcAddress( driver_glBlendFuncSeparateINGR, glBlendFuncSeparateINGR, "glBlendFuncSeparateINGR" );
    if( driver_glBlendFuncSeparateINGR == NULL ) {
      driver_glBlendFuncSeparateINGR = missing_glBlendFuncSeparateINGR;
    }
    dt.glBlendFuncSeparateINGR = MakeRegalProc(loader_glBlendFuncSeparateINGR,layer);

    // GL_INTEL_map_texture

    _getProcAddress( driver_glMapTexture2DINTEL, glMapTexture2DINTEL, "glMapTexture2DINTEL" );
    if( driver_glMapTexture2DINTEL == NULL ) {
      driver_glMapTexture2DINTEL = missing_glMapTexture2DINTEL;
    }
    dt.glMapTexture2DINTEL = MakeRegalProc(loader_glMapTexture2DINTEL,layer);
    _getProcAddress( driver_glSyncTextureINTEL, glSyncTextureINTEL, "glSyncTextureINTEL" );
    if( driver_glSyncTextureINTEL == NULL ) {
      driver_glSyncTextureINTEL = missing_glSyncTextureINTEL;
    }
    dt.glSyncTextureINTEL = MakeRegalProc(loader_glSyncTextureINTEL,layer);
    _getProcAddress( driver_glUnmapTexture2DINTEL, glUnmapTexture2DINTEL, "glUnmapTexture2DINTEL" );
    if( driver_glUnmapTexture2DINTEL == NULL ) {
      driver_glUnmapTexture2DINTEL = missing_glUnmapTexture2DINTEL;
    }
    dt.glUnmapTexture2DINTEL = MakeRegalProc(loader_glUnmapTexture2DINTEL,layer);

    // GL_INTEL_parallel_arrays

    _getProcAddress( driver_glColorPointervINTEL, glColorPointervINTEL, "glColorPointervINTEL" );
    if( driver_glColorPointervINTEL == NULL ) {
      driver_glColorPointervINTEL = missing_glColorPointervINTEL;
    }
    dt.glColorPointervINTEL = MakeRegalProc(loader_glColorPointervINTEL,layer);
    _getProcAddress( driver_glNormalPointervINTEL, glNormalPointervINTEL, "glNormalPointervINTEL" );
    if( driver_glNormalPointervINTEL == NULL ) {
      driver_glNormalPointervINTEL = missing_glNormalPointervINTEL;
    }
    dt.glNormalPointervINTEL = MakeRegalProc(loader_glNormalPointervINTEL,layer);
    _getProcAddress( driver_glTexCoordPointervINTEL, glTexCoordPointervINTEL, "glTexCoordPointervINTEL" );
    if( driver_glTexCoordPointervINTEL == NULL ) {
      driver_glTexCoordPointervINTEL = missing_glTexCoordPointervINTEL;
    }
    dt.glTexCoordPointervINTEL = MakeRegalProc(loader_glTexCoordPointervINTEL,layer);
    _getProcAddress( driver_glVertexPointervINTEL, glVertexPointervINTEL, "glVertexPointervINTEL" );
    if( driver_glVertexPointervINTEL == NULL ) {
      driver_glVertexPointervINTEL = missing_glVertexPointervINTEL;
    }
    dt.glVertexPointervINTEL = MakeRegalProc(loader_glVertexPointervINTEL,layer);

    // GL_INTEL_texture_scissor

    _getProcAddress( driver_glTexScissorFuncINTEL, glTexScissorFuncINTEL, "glTexScissorFuncINTEL" );
    if( driver_glTexScissorFuncINTEL == NULL ) {
      driver_glTexScissorFuncINTEL = missing_glTexScissorFuncINTEL;
    }
    dt.glTexScissorFuncINTEL = MakeRegalProc(loader_glTexScissorFuncINTEL,layer);
    _getProcAddress( driver_glTexScissorINTEL, glTexScissorINTEL, "glTexScissorINTEL" );
    if( driver_glTexScissorINTEL == NULL ) {
      driver_glTexScissorINTEL = missing_glTexScissorINTEL;
    }
    dt.glTexScissorINTEL = MakeRegalProc(loader_glTexScissorINTEL,layer);

    // GL_KHR_debug

    _getProcAddress( driver_glDebugMessageCallback, glDebugMessageCallback, "glDebugMessageCallback" );
    if( driver_glDebugMessageCallback == NULL ) {
      driver_glDebugMessageCallback = missing_glDebugMessageCallback;
    }
    dt.glDebugMessageCallback = MakeRegalProc(loader_glDebugMessageCallback,layer);
    _getProcAddress( driver_glDebugMessageControl, glDebugMessageControl, "glDebugMessageControl" );
    if( driver_glDebugMessageControl == NULL ) {
      driver_glDebugMessageControl = missing_glDebugMessageControl;
    }
    dt.glDebugMessageControl = MakeRegalProc(loader_glDebugMessageControl,layer);
    _getProcAddress( driver_glDebugMessageInsert, glDebugMessageInsert, "glDebugMessageInsert" );
    if( driver_glDebugMessageInsert == NULL ) {
      driver_glDebugMessageInsert = missing_glDebugMessageInsert;
    }
    dt.glDebugMessageInsert = MakeRegalProc(loader_glDebugMessageInsert,layer);
    _getProcAddress( driver_glGetDebugMessageLog, glGetDebugMessageLog, "glGetDebugMessageLog" );
    if( driver_glGetDebugMessageLog == NULL ) {
      driver_glGetDebugMessageLog = missing_glGetDebugMessageLog;
    }
    dt.glGetDebugMessageLog = MakeRegalProc(loader_glGetDebugMessageLog,layer);
    _getProcAddress( driver_glGetObjectLabel, glGetObjectLabel, "glGetObjectLabel" );
    if( driver_glGetObjectLabel == NULL ) {
      driver_glGetObjectLabel = missing_glGetObjectLabel;
    }
    dt.glGetObjectLabel = MakeRegalProc(loader_glGetObjectLabel,layer);
    _getProcAddress( driver_glGetObjectPtrLabel, glGetObjectPtrLabel, "glGetObjectPtrLabel" );
    if( driver_glGetObjectPtrLabel == NULL ) {
      driver_glGetObjectPtrLabel = missing_glGetObjectPtrLabel;
    }
    dt.glGetObjectPtrLabel = MakeRegalProc(loader_glGetObjectPtrLabel,layer);
    _getProcAddress( driver_glObjectLabel, glObjectLabel, "glObjectLabel" );
    if( driver_glObjectLabel == NULL ) {
      driver_glObjectLabel = missing_glObjectLabel;
    }
    dt.glObjectLabel = MakeRegalProc(loader_glObjectLabel,layer);
    _getProcAddress( driver_glObjectPtrLabel, glObjectPtrLabel, "glObjectPtrLabel" );
    if( driver_glObjectPtrLabel == NULL ) {
      driver_glObjectPtrLabel = missing_glObjectPtrLabel;
    }
    dt.glObjectPtrLabel = MakeRegalProc(loader_glObjectPtrLabel,layer);
    _getProcAddress( driver_glPopDebugGroup, glPopDebugGroup, "glPopDebugGroup" );
    if( driver_glPopDebugGroup == NULL ) {
      driver_glPopDebugGroup = missing_glPopDebugGroup;
    }
    dt.glPopDebugGroup = MakeRegalProc(loader_glPopDebugGroup,layer);
    _getProcAddress( driver_glPushDebugGroup, glPushDebugGroup, "glPushDebugGroup" );
    if( driver_glPushDebugGroup == NULL ) {
      driver_glPushDebugGroup = missing_glPushDebugGroup;
    }
    dt.glPushDebugGroup = MakeRegalProc(loader_glPushDebugGroup,layer);

    // GL_KTX_buffer_region

    _getProcAddress( driver_glBufferRegionEnabled, glBufferRegionEnabled, "glBufferRegionEnabled" );
    if( driver_glBufferRegionEnabled == NULL ) {
      driver_glBufferRegionEnabled = missing_glBufferRegionEnabled;
    }
    dt.glBufferRegionEnabled = MakeRegalProc(loader_glBufferRegionEnabled,layer);
    _getProcAddress( driver_glDeleteBufferRegion, glDeleteBufferRegion, "glDeleteBufferRegion" );
    if( driver_glDeleteBufferRegion == NULL ) {
      driver_glDeleteBufferRegion = missing_glDeleteBufferRegion;
    }
    dt.glDeleteBufferRegion = MakeRegalProc(loader_glDeleteBufferRegion,layer);
    _getProcAddress( driver_glDrawBufferRegion, glDrawBufferRegion, "glDrawBufferRegion" );
    if( driver_glDrawBufferRegion == NULL ) {
      driver_glDrawBufferRegion = missing_glDrawBufferRegion;
    }
    dt.glDrawBufferRegion = MakeRegalProc(loader_glDrawBufferRegion,layer);
    _getProcAddress( driver_glNewBufferRegion, glNewBufferRegion, "glNewBufferRegion" );
    if( driver_glNewBufferRegion == NULL ) {
      driver_glNewBufferRegion = missing_glNewBufferRegion;
    }
    dt.glNewBufferRegion = MakeRegalProc(loader_glNewBufferRegion,layer);
    _getProcAddress( driver_glReadBufferRegion, glReadBufferRegion, "glReadBufferRegion" );
    if( driver_glReadBufferRegion == NULL ) {
      driver_glReadBufferRegion = missing_glReadBufferRegion;
    }
    dt.glReadBufferRegion = MakeRegalProc(loader_glReadBufferRegion,layer);

    // GL_MESA_resize_buffers

    _getProcAddress( driver_glResizeBuffersMESA, glResizeBuffersMESA, "glResizeBuffersMESA" );
    if( driver_glResizeBuffersMESA == NULL ) {
      driver_glResizeBuffersMESA = missing_glResizeBuffersMESA;
    }
    dt.glResizeBuffersMESA = MakeRegalProc(loader_glResizeBuffersMESA,layer);

    // GL_MESA_window_pos

    _getProcAddress( driver_glWindowPos2dMESA, glWindowPos2dMESA, "glWindowPos2dMESA" );
    if( driver_glWindowPos2dMESA == NULL ) {
      driver_glWindowPos2dMESA = missing_glWindowPos2dMESA;
    }
    dt.glWindowPos2dMESA = MakeRegalProc(loader_glWindowPos2dMESA,layer);
    _getProcAddress( driver_glWindowPos2dvMESA, glWindowPos2dvMESA, "glWindowPos2dvMESA" );
    if( driver_glWindowPos2dvMESA == NULL ) {
      driver_glWindowPos2dvMESA = missing_glWindowPos2dvMESA;
    }
    dt.glWindowPos2dvMESA = MakeRegalProc(loader_glWindowPos2dvMESA,layer);
    _getProcAddress( driver_glWindowPos2fMESA, glWindowPos2fMESA, "glWindowPos2fMESA" );
    if( driver_glWindowPos2fMESA == NULL ) {
      driver_glWindowPos2fMESA = missing_glWindowPos2fMESA;
    }
    dt.glWindowPos2fMESA = MakeRegalProc(loader_glWindowPos2fMESA,layer);
    _getProcAddress( driver_glWindowPos2fvMESA, glWindowPos2fvMESA, "glWindowPos2fvMESA" );
    if( driver_glWindowPos2fvMESA == NULL ) {
      driver_glWindowPos2fvMESA = missing_glWindowPos2fvMESA;
    }
    dt.glWindowPos2fvMESA = MakeRegalProc(loader_glWindowPos2fvMESA,layer);
    _getProcAddress( driver_glWindowPos2iMESA, glWindowPos2iMESA, "glWindowPos2iMESA" );
    if( driver_glWindowPos2iMESA == NULL ) {
      driver_glWindowPos2iMESA = missing_glWindowPos2iMESA;
    }
    dt.glWindowPos2iMESA = MakeRegalProc(loader_glWindowPos2iMESA,layer);
    _getProcAddress( driver_glWindowPos2ivMESA, glWindowPos2ivMESA, "glWindowPos2ivMESA" );
    if( driver_glWindowPos2ivMESA == NULL ) {
      driver_glWindowPos2ivMESA = missing_glWindowPos2ivMESA;
    }
    dt.glWindowPos2ivMESA = MakeRegalProc(loader_glWindowPos2ivMESA,layer);
    _getProcAddress( driver_glWindowPos2sMESA, glWindowPos2sMESA, "glWindowPos2sMESA" );
    if( driver_glWindowPos2sMESA == NULL ) {
      driver_glWindowPos2sMESA = missing_glWindowPos2sMESA;
    }
    dt.glWindowPos2sMESA = MakeRegalProc(loader_glWindowPos2sMESA,layer);
    _getProcAddress( driver_glWindowPos2svMESA, glWindowPos2svMESA, "glWindowPos2svMESA" );
    if( driver_glWindowPos2svMESA == NULL ) {
      driver_glWindowPos2svMESA = missing_glWindowPos2svMESA;
    }
    dt.glWindowPos2svMESA = MakeRegalProc(loader_glWindowPos2svMESA,layer);
    _getProcAddress( driver_glWindowPos3dMESA, glWindowPos3dMESA, "glWindowPos3dMESA" );
    if( driver_glWindowPos3dMESA == NULL ) {
      driver_glWindowPos3dMESA = missing_glWindowPos3dMESA;
    }
    dt.glWindowPos3dMESA = MakeRegalProc(loader_glWindowPos3dMESA,layer);
    _getProcAddress( driver_glWindowPos3dvMESA, glWindowPos3dvMESA, "glWindowPos3dvMESA" );
    if( driver_glWindowPos3dvMESA == NULL ) {
      driver_glWindowPos3dvMESA = missing_glWindowPos3dvMESA;
    }
    dt.glWindowPos3dvMESA = MakeRegalProc(loader_glWindowPos3dvMESA,layer);
    _getProcAddress( driver_glWindowPos3fMESA, glWindowPos3fMESA, "glWindowPos3fMESA" );
    if( driver_glWindowPos3fMESA == NULL ) {
      driver_glWindowPos3fMESA = missing_glWindowPos3fMESA;
    }
    dt.glWindowPos3fMESA = MakeRegalProc(loader_glWindowPos3fMESA,layer);
    _getProcAddress( driver_glWindowPos3fvMESA, glWindowPos3fvMESA, "glWindowPos3fvMESA" );
    if( driver_glWindowPos3fvMESA == NULL ) {
      driver_glWindowPos3fvMESA = missing_glWindowPos3fvMESA;
    }
    dt.glWindowPos3fvMESA = MakeRegalProc(loader_glWindowPos3fvMESA,layer);
    _getProcAddress( driver_glWindowPos3iMESA, glWindowPos3iMESA, "glWindowPos3iMESA" );
    if( driver_glWindowPos3iMESA == NULL ) {
      driver_glWindowPos3iMESA = missing_glWindowPos3iMESA;
    }
    dt.glWindowPos3iMESA = MakeRegalProc(loader_glWindowPos3iMESA,layer);
    _getProcAddress( driver_glWindowPos3ivMESA, glWindowPos3ivMESA, "glWindowPos3ivMESA" );
    if( driver_glWindowPos3ivMESA == NULL ) {
      driver_glWindowPos3ivMESA = missing_glWindowPos3ivMESA;
    }
    dt.glWindowPos3ivMESA = MakeRegalProc(loader_glWindowPos3ivMESA,layer);
    _getProcAddress( driver_glWindowPos3sMESA, glWindowPos3sMESA, "glWindowPos3sMESA" );
    if( driver_glWindowPos3sMESA == NULL ) {
      driver_glWindowPos3sMESA = missing_glWindowPos3sMESA;
    }
    dt.glWindowPos3sMESA = MakeRegalProc(loader_glWindowPos3sMESA,layer);
    _getProcAddress( driver_glWindowPos3svMESA, glWindowPos3svMESA, "glWindowPos3svMESA" );
    if( driver_glWindowPos3svMESA == NULL ) {
      driver_glWindowPos3svMESA = missing_glWindowPos3svMESA;
    }
    dt.glWindowPos3svMESA = MakeRegalProc(loader_glWindowPos3svMESA,layer);
    _getProcAddress( driver_glWindowPos4dMESA, glWindowPos4dMESA, "glWindowPos4dMESA" );
    if( driver_glWindowPos4dMESA == NULL ) {
      driver_glWindowPos4dMESA = missing_glWindowPos4dMESA;
    }
    dt.glWindowPos4dMESA = MakeRegalProc(loader_glWindowPos4dMESA,layer);
    _getProcAddress( driver_glWindowPos4dvMESA, glWindowPos4dvMESA, "glWindowPos4dvMESA" );
    if( driver_glWindowPos4dvMESA == NULL ) {
      driver_glWindowPos4dvMESA = missing_glWindowPos4dvMESA;
    }
    dt.glWindowPos4dvMESA = MakeRegalProc(loader_glWindowPos4dvMESA,layer);
    _getProcAddress( driver_glWindowPos4fMESA, glWindowPos4fMESA, "glWindowPos4fMESA" );
    if( driver_glWindowPos4fMESA == NULL ) {
      driver_glWindowPos4fMESA = missing_glWindowPos4fMESA;
    }
    dt.glWindowPos4fMESA = MakeRegalProc(loader_glWindowPos4fMESA,layer);
    _getProcAddress( driver_glWindowPos4fvMESA, glWindowPos4fvMESA, "glWindowPos4fvMESA" );
    if( driver_glWindowPos4fvMESA == NULL ) {
      driver_glWindowPos4fvMESA = missing_glWindowPos4fvMESA;
    }
    dt.glWindowPos4fvMESA = MakeRegalProc(loader_glWindowPos4fvMESA,layer);
    _getProcAddress( driver_glWindowPos4iMESA, glWindowPos4iMESA, "glWindowPos4iMESA" );
    if( driver_glWindowPos4iMESA == NULL ) {
      driver_glWindowPos4iMESA = missing_glWindowPos4iMESA;
    }
    dt.glWindowPos4iMESA = MakeRegalProc(loader_glWindowPos4iMESA,layer);
    _getProcAddress( driver_glWindowPos4ivMESA, glWindowPos4ivMESA, "glWindowPos4ivMESA" );
    if( driver_glWindowPos4ivMESA == NULL ) {
      driver_glWindowPos4ivMESA = missing_glWindowPos4ivMESA;
    }
    dt.glWindowPos4ivMESA = MakeRegalProc(loader_glWindowPos4ivMESA,layer);
    _getProcAddress( driver_glWindowPos4sMESA, glWindowPos4sMESA, "glWindowPos4sMESA" );
    if( driver_glWindowPos4sMESA == NULL ) {
      driver_glWindowPos4sMESA = missing_glWindowPos4sMESA;
    }
    dt.glWindowPos4sMESA = MakeRegalProc(loader_glWindowPos4sMESA,layer);
    _getProcAddress( driver_glWindowPos4svMESA, glWindowPos4svMESA, "glWindowPos4svMESA" );
    if( driver_glWindowPos4svMESA == NULL ) {
      driver_glWindowPos4svMESA = missing_glWindowPos4svMESA;
    }
    dt.glWindowPos4svMESA = MakeRegalProc(loader_glWindowPos4svMESA,layer);

    // GL_NVX_conditional_render

    _getProcAddress( driver_glBeginConditionalRenderNVX, glBeginConditionalRenderNVX, "glBeginConditionalRenderNVX" );
    if( driver_glBeginConditionalRenderNVX == NULL ) {
      driver_glBeginConditionalRenderNVX = missing_glBeginConditionalRenderNVX;
    }
    dt.glBeginConditionalRenderNVX = MakeRegalProc(loader_glBeginConditionalRenderNVX,layer);
    _getProcAddress( driver_glEndConditionalRenderNVX, glEndConditionalRenderNVX, "glEndConditionalRenderNVX" );
    if( driver_glEndConditionalRenderNVX == NULL ) {
      driver_glEndConditionalRenderNVX = missing_glEndConditionalRenderNVX;
    }
    dt.glEndConditionalRenderNVX = MakeRegalProc(loader_glEndConditionalRenderNVX,layer);

    // GL_NV_bindless_texture

    _getProcAddress( driver_glGetImageHandleNV, glGetImageHandleNV, "glGetImageHandleNV" );
    if( driver_glGetImageHandleNV == NULL ) {
      driver_glGetImageHandleNV = missing_glGetImageHandleNV;
    }
    dt.glGetImageHandleNV = MakeRegalProc(loader_glGetImageHandleNV,layer);
    _getProcAddress( driver_glGetTextureHandleNV, glGetTextureHandleNV, "glGetTextureHandleNV" );
    if( driver_glGetTextureHandleNV == NULL ) {
      driver_glGetTextureHandleNV = missing_glGetTextureHandleNV;
    }
    dt.glGetTextureHandleNV = MakeRegalProc(loader_glGetTextureHandleNV,layer);
    _getProcAddress( driver_glGetTextureSamplerHandleNV, glGetTextureSamplerHandleNV, "glGetTextureSamplerHandleNV" );
    if( driver_glGetTextureSamplerHandleNV == NULL ) {
      driver_glGetTextureSamplerHandleNV = missing_glGetTextureSamplerHandleNV;
    }
    dt.glGetTextureSamplerHandleNV = MakeRegalProc(loader_glGetTextureSamplerHandleNV,layer);
    _getProcAddress( driver_glIsImageHandleResidentNV, glIsImageHandleResidentNV, "glIsImageHandleResidentNV" );
    if( driver_glIsImageHandleResidentNV == NULL ) {
      driver_glIsImageHandleResidentNV = missing_glIsImageHandleResidentNV;
    }
    dt.glIsImageHandleResidentNV = MakeRegalProc(loader_glIsImageHandleResidentNV,layer);
    _getProcAddress( driver_glIsTextureHandleResidentNV, glIsTextureHandleResidentNV, "glIsTextureHandleResidentNV" );
    if( driver_glIsTextureHandleResidentNV == NULL ) {
      driver_glIsTextureHandleResidentNV = missing_glIsTextureHandleResidentNV;
    }
    dt.glIsTextureHandleResidentNV = MakeRegalProc(loader_glIsTextureHandleResidentNV,layer);
    _getProcAddress( driver_glMakeImageHandleNonResidentNV, glMakeImageHandleNonResidentNV, "glMakeImageHandleNonResidentNV" );
    if( driver_glMakeImageHandleNonResidentNV == NULL ) {
      driver_glMakeImageHandleNonResidentNV = missing_glMakeImageHandleNonResidentNV;
    }
    dt.glMakeImageHandleNonResidentNV = MakeRegalProc(loader_glMakeImageHandleNonResidentNV,layer);
    _getProcAddress( driver_glMakeImageHandleResidentNV, glMakeImageHandleResidentNV, "glMakeImageHandleResidentNV" );
    if( driver_glMakeImageHandleResidentNV == NULL ) {
      driver_glMakeImageHandleResidentNV = missing_glMakeImageHandleResidentNV;
    }
    dt.glMakeImageHandleResidentNV = MakeRegalProc(loader_glMakeImageHandleResidentNV,layer);
    _getProcAddress( driver_glMakeTextureHandleNonResidentNV, glMakeTextureHandleNonResidentNV, "glMakeTextureHandleNonResidentNV" );
    if( driver_glMakeTextureHandleNonResidentNV == NULL ) {
      driver_glMakeTextureHandleNonResidentNV = missing_glMakeTextureHandleNonResidentNV;
    }
    dt.glMakeTextureHandleNonResidentNV = MakeRegalProc(loader_glMakeTextureHandleNonResidentNV,layer);
    _getProcAddress( driver_glMakeTextureHandleResidentNV, glMakeTextureHandleResidentNV, "glMakeTextureHandleResidentNV" );
    if( driver_glMakeTextureHandleResidentNV == NULL ) {
      driver_glMakeTextureHandleResidentNV = missing_glMakeTextureHandleResidentNV;
    }
    dt.glMakeTextureHandleResidentNV = MakeRegalProc(loader_glMakeTextureHandleResidentNV,layer);
    _getProcAddress( driver_glProgramUniformHandleui64NV, glProgramUniformHandleui64NV, "glProgramUniformHandleui64NV" );
    if( driver_glProgramUniformHandleui64NV == NULL ) {
      driver_glProgramUniformHandleui64NV = missing_glProgramUniformHandleui64NV;
    }
    dt.glProgramUniformHandleui64NV = MakeRegalProc(loader_glProgramUniformHandleui64NV,layer);
    _getProcAddress( driver_glProgramUniformHandleui64vNV, glProgramUniformHandleui64vNV, "glProgramUniformHandleui64vNV" );
    if( driver_glProgramUniformHandleui64vNV == NULL ) {
      driver_glProgramUniformHandleui64vNV = missing_glProgramUniformHandleui64vNV;
    }
    dt.glProgramUniformHandleui64vNV = MakeRegalProc(loader_glProgramUniformHandleui64vNV,layer);
    _getProcAddress( driver_glUniformHandleui64NV, glUniformHandleui64NV, "glUniformHandleui64NV" );
    if( driver_glUniformHandleui64NV == NULL ) {
      driver_glUniformHandleui64NV = missing_glUniformHandleui64NV;
    }
    dt.glUniformHandleui64NV = MakeRegalProc(loader_glUniformHandleui64NV,layer);
    _getProcAddress( driver_glUniformHandleui64vNV, glUniformHandleui64vNV, "glUniformHandleui64vNV" );
    if( driver_glUniformHandleui64vNV == NULL ) {
      driver_glUniformHandleui64vNV = missing_glUniformHandleui64vNV;
    }
    dt.glUniformHandleui64vNV = MakeRegalProc(loader_glUniformHandleui64vNV,layer);

    // GL_NV_blend_equation_advanced

    _getProcAddress( driver_glBlendBarrierNV, glBlendBarrierNV, "glBlendBarrierNV" );
    if( driver_glBlendBarrierNV == NULL ) {
      driver_glBlendBarrierNV = missing_glBlendBarrierNV;
    }
    dt.glBlendBarrierNV = MakeRegalProc(loader_glBlendBarrierNV,layer);
    _getProcAddress( driver_glBlendParameteriNV, glBlendParameteriNV, "glBlendParameteriNV" );
    if( driver_glBlendParameteriNV == NULL ) {
      driver_glBlendParameteriNV = missing_glBlendParameteriNV;
    }
    dt.glBlendParameteriNV = MakeRegalProc(loader_glBlendParameteriNV,layer);

    // GL_NV_conditional_render

    _getProcAddress( driver_glBeginConditionalRenderNV, glBeginConditionalRenderNV, "glBeginConditionalRenderNV" );
    if( driver_glBeginConditionalRenderNV == NULL ) {
      driver_glBeginConditionalRenderNV = missing_glBeginConditionalRenderNV;
    }
    dt.glBeginConditionalRenderNV = MakeRegalProc(loader_glBeginConditionalRenderNV,layer);
    _getProcAddress( driver_glEndConditionalRenderNV, glEndConditionalRenderNV, "glEndConditionalRenderNV" );
    if( driver_glEndConditionalRenderNV == NULL ) {
      driver_glEndConditionalRenderNV = missing_glEndConditionalRenderNV;
    }
    dt.glEndConditionalRenderNV = MakeRegalProc(loader_glEndConditionalRenderNV,layer);

    // GL_NV_copy_buffer

    _getProcAddress( driver_glCopyBufferSubDataNV, glCopyBufferSubDataNV, "glCopyBufferSubDataNV" );
    if( driver_glCopyBufferSubDataNV == NULL ) {
      driver_glCopyBufferSubDataNV = missing_glCopyBufferSubDataNV;
    }
    dt.glCopyBufferSubDataNV = MakeRegalProc(loader_glCopyBufferSubDataNV,layer);

    // GL_NV_copy_image

    _getProcAddress( driver_glCopyImageSubDataNV, glCopyImageSubDataNV, "glCopyImageSubDataNV" );
    if( driver_glCopyImageSubDataNV == NULL ) {
      driver_glCopyImageSubDataNV = missing_glCopyImageSubDataNV;
    }
    dt.glCopyImageSubDataNV = MakeRegalProc(loader_glCopyImageSubDataNV,layer);

    // GL_NV_coverage_sample

    _getProcAddress( driver_glCoverageMaskNV, glCoverageMaskNV, "glCoverageMaskNV" );
    if( driver_glCoverageMaskNV == NULL ) {
      driver_glCoverageMaskNV = missing_glCoverageMaskNV;
    }
    dt.glCoverageMaskNV = MakeRegalProc(loader_glCoverageMaskNV,layer);
    _getProcAddress( driver_glCoverageOperationNV, glCoverageOperationNV, "glCoverageOperationNV" );
    if( driver_glCoverageOperationNV == NULL ) {
      driver_glCoverageOperationNV = missing_glCoverageOperationNV;
    }
    dt.glCoverageOperationNV = MakeRegalProc(loader_glCoverageOperationNV,layer);

    // GL_NV_depth_buffer_float

    _getProcAddress( driver_glClearDepthdNV, glClearDepthdNV, "glClearDepthdNV" );
    if( driver_glClearDepthdNV == NULL ) {
      driver_glClearDepthdNV = missing_glClearDepthdNV;
    }
    dt.glClearDepthdNV = MakeRegalProc(loader_glClearDepthdNV,layer);
    _getProcAddress( driver_glDepthBoundsdNV, glDepthBoundsdNV, "glDepthBoundsdNV" );
    if( driver_glDepthBoundsdNV == NULL ) {
      driver_glDepthBoundsdNV = missing_glDepthBoundsdNV;
    }
    dt.glDepthBoundsdNV = MakeRegalProc(loader_glDepthBoundsdNV,layer);
    _getProcAddress( driver_glDepthRangedNV, glDepthRangedNV, "glDepthRangedNV" );
    if( driver_glDepthRangedNV == NULL ) {
      driver_glDepthRangedNV = missing_glDepthRangedNV;
    }
    dt.glDepthRangedNV = MakeRegalProc(loader_glDepthRangedNV,layer);

    // GL_NV_draw_buffers

    _getProcAddress( driver_glDrawBuffersNV, glDrawBuffersNV, "glDrawBuffersNV" );
    if( driver_glDrawBuffersNV == NULL ) {
      driver_glDrawBuffersNV = missing_glDrawBuffersNV;
    }
    dt.glDrawBuffersNV = MakeRegalProc(loader_glDrawBuffersNV,layer);

    // GL_NV_draw_texture

    _getProcAddress( driver_glDrawTextureNV, glDrawTextureNV, "glDrawTextureNV" );
    if( driver_glDrawTextureNV == NULL ) {
      driver_glDrawTextureNV = missing_glDrawTextureNV;
    }
    dt.glDrawTextureNV = MakeRegalProc(loader_glDrawTextureNV,layer);

    // GL_NV_evaluators

    _getProcAddress( driver_glEvalMapsNV, glEvalMapsNV, "glEvalMapsNV" );
    if( driver_glEvalMapsNV == NULL ) {
      driver_glEvalMapsNV = missing_glEvalMapsNV;
    }
    dt.glEvalMapsNV = MakeRegalProc(loader_glEvalMapsNV,layer);
    _getProcAddress( driver_glGetMapAttribParameterfvNV, glGetMapAttribParameterfvNV, "glGetMapAttribParameterfvNV" );
    if( driver_glGetMapAttribParameterfvNV == NULL ) {
      driver_glGetMapAttribParameterfvNV = missing_glGetMapAttribParameterfvNV;
    }
    dt.glGetMapAttribParameterfvNV = MakeRegalProc(loader_glGetMapAttribParameterfvNV,layer);
    _getProcAddress( driver_glGetMapAttribParameterivNV, glGetMapAttribParameterivNV, "glGetMapAttribParameterivNV" );
    if( driver_glGetMapAttribParameterivNV == NULL ) {
      driver_glGetMapAttribParameterivNV = missing_glGetMapAttribParameterivNV;
    }
    dt.glGetMapAttribParameterivNV = MakeRegalProc(loader_glGetMapAttribParameterivNV,layer);
    _getProcAddress( driver_glGetMapControlPointsNV, glGetMapControlPointsNV, "glGetMapControlPointsNV" );
    if( driver_glGetMapControlPointsNV == NULL ) {
      driver_glGetMapControlPointsNV = missing_glGetMapControlPointsNV;
    }
    dt.glGetMapControlPointsNV = MakeRegalProc(loader_glGetMapControlPointsNV,layer);
    _getProcAddress( driver_glGetMapParameterfvNV, glGetMapParameterfvNV, "glGetMapParameterfvNV" );
    if( driver_glGetMapParameterfvNV == NULL ) {
      driver_glGetMapParameterfvNV = missing_glGetMapParameterfvNV;
    }
    dt.glGetMapParameterfvNV = MakeRegalProc(loader_glGetMapParameterfvNV,layer);
    _getProcAddress( driver_glGetMapParameterivNV, glGetMapParameterivNV, "glGetMapParameterivNV" );
    if( driver_glGetMapParameterivNV == NULL ) {
      driver_glGetMapParameterivNV = missing_glGetMapParameterivNV;
    }
    dt.glGetMapParameterivNV = MakeRegalProc(loader_glGetMapParameterivNV,layer);
    _getProcAddress( driver_glMapControlPointsNV, glMapControlPointsNV, "glMapControlPointsNV" );
    if( driver_glMapControlPointsNV == NULL ) {
      driver_glMapControlPointsNV = missing_glMapControlPointsNV;
    }
    dt.glMapControlPointsNV = MakeRegalProc(loader_glMapControlPointsNV,layer);
    _getProcAddress( driver_glMapParameterfvNV, glMapParameterfvNV, "glMapParameterfvNV" );
    if( driver_glMapParameterfvNV == NULL ) {
      driver_glMapParameterfvNV = missing_glMapParameterfvNV;
    }
    dt.glMapParameterfvNV = MakeRegalProc(loader_glMapParameterfvNV,layer);
    _getProcAddress( driver_glMapParameterivNV, glMapParameterivNV, "glMapParameterivNV" );
    if( driver_glMapParameterivNV == NULL ) {
      driver_glMapParameterivNV = missing_glMapParameterivNV;
    }
    dt.glMapParameterivNV = MakeRegalProc(loader_glMapParameterivNV,layer);

    // GL_NV_explicit_multisample

    _getProcAddress( driver_glGetMultisamplefvNV, glGetMultisamplefvNV, "glGetMultisamplefvNV" );
    if( driver_glGetMultisamplefvNV == NULL ) {
      driver_glGetMultisamplefvNV = missing_glGetMultisamplefvNV;
    }
    dt.glGetMultisamplefvNV = MakeRegalProc(loader_glGetMultisamplefvNV,layer);
    _getProcAddress( driver_glSampleMaskIndexedNV, glSampleMaskIndexedNV, "glSampleMaskIndexedNV" );
    if( driver_glSampleMaskIndexedNV == NULL ) {
      driver_glSampleMaskIndexedNV = missing_glSampleMaskIndexedNV;
    }
    dt.glSampleMaskIndexedNV = MakeRegalProc(loader_glSampleMaskIndexedNV,layer);
    _getProcAddress( driver_glTexRenderbufferNV, glTexRenderbufferNV, "glTexRenderbufferNV" );
    if( driver_glTexRenderbufferNV == NULL ) {
      driver_glTexRenderbufferNV = missing_glTexRenderbufferNV;
    }
    dt.glTexRenderbufferNV = MakeRegalProc(loader_glTexRenderbufferNV,layer);

    // GL_NV_fence

    _getProcAddress( driver_glDeleteFencesNV, glDeleteFencesNV, "glDeleteFencesNV" );
    if( driver_glDeleteFencesNV == NULL ) {
      driver_glDeleteFencesNV = missing_glDeleteFencesNV;
    }
    dt.glDeleteFencesNV = MakeRegalProc(loader_glDeleteFencesNV,layer);
    _getProcAddress( driver_glFinishFenceNV, glFinishFenceNV, "glFinishFenceNV" );
    if( driver_glFinishFenceNV == NULL ) {
      driver_glFinishFenceNV = missing_glFinishFenceNV;
    }
    dt.glFinishFenceNV = MakeRegalProc(loader_glFinishFenceNV,layer);
    _getProcAddress( driver_glGenFencesNV, glGenFencesNV, "glGenFencesNV" );
    if( driver_glGenFencesNV == NULL ) {
      driver_glGenFencesNV = missing_glGenFencesNV;
    }
    dt.glGenFencesNV = MakeRegalProc(loader_glGenFencesNV,layer);
    _getProcAddress( driver_glGetFenceivNV, glGetFenceivNV, "glGetFenceivNV" );
    if( driver_glGetFenceivNV == NULL ) {
      driver_glGetFenceivNV = missing_glGetFenceivNV;
    }
    dt.glGetFenceivNV = MakeRegalProc(loader_glGetFenceivNV,layer);
    _getProcAddress( driver_glIsFenceNV, glIsFenceNV, "glIsFenceNV" );
    if( driver_glIsFenceNV == NULL ) {
      driver_glIsFenceNV = missing_glIsFenceNV;
    }
    dt.glIsFenceNV = MakeRegalProc(loader_glIsFenceNV,layer);
    _getProcAddress( driver_glSetFenceNV, glSetFenceNV, "glSetFenceNV" );
    if( driver_glSetFenceNV == NULL ) {
      driver_glSetFenceNV = missing_glSetFenceNV;
    }
    dt.glSetFenceNV = MakeRegalProc(loader_glSetFenceNV,layer);
    _getProcAddress( driver_glTestFenceNV, glTestFenceNV, "glTestFenceNV" );
    if( driver_glTestFenceNV == NULL ) {
      driver_glTestFenceNV = missing_glTestFenceNV;
    }
    dt.glTestFenceNV = MakeRegalProc(loader_glTestFenceNV,layer);

    // GL_NV_fragment_program

    _getProcAddress( driver_glGetProgramNamedParameterdvNV, glGetProgramNamedParameterdvNV, "glGetProgramNamedParameterdvNV" );
    if( driver_glGetProgramNamedParameterdvNV == NULL ) {
      driver_glGetProgramNamedParameterdvNV = missing_glGetProgramNamedParameterdvNV;
    }
    dt.glGetProgramNamedParameterdvNV = MakeRegalProc(loader_glGetProgramNamedParameterdvNV,layer);
    _getProcAddress( driver_glGetProgramNamedParameterfvNV, glGetProgramNamedParameterfvNV, "glGetProgramNamedParameterfvNV" );
    if( driver_glGetProgramNamedParameterfvNV == NULL ) {
      driver_glGetProgramNamedParameterfvNV = missing_glGetProgramNamedParameterfvNV;
    }
    dt.glGetProgramNamedParameterfvNV = MakeRegalProc(loader_glGetProgramNamedParameterfvNV,layer);
    _getProcAddress( driver_glProgramNamedParameter4dNV, glProgramNamedParameter4dNV, "glProgramNamedParameter4dNV" );
    if( driver_glProgramNamedParameter4dNV == NULL ) {
      driver_glProgramNamedParameter4dNV = missing_glProgramNamedParameter4dNV;
    }
    dt.glProgramNamedParameter4dNV = MakeRegalProc(loader_glProgramNamedParameter4dNV,layer);
    _getProcAddress( driver_glProgramNamedParameter4dvNV, glProgramNamedParameter4dvNV, "glProgramNamedParameter4dvNV" );
    if( driver_glProgramNamedParameter4dvNV == NULL ) {
      driver_glProgramNamedParameter4dvNV = missing_glProgramNamedParameter4dvNV;
    }
    dt.glProgramNamedParameter4dvNV = MakeRegalProc(loader_glProgramNamedParameter4dvNV,layer);
    _getProcAddress( driver_glProgramNamedParameter4fNV, glProgramNamedParameter4fNV, "glProgramNamedParameter4fNV" );
    if( driver_glProgramNamedParameter4fNV == NULL ) {
      driver_glProgramNamedParameter4fNV = missing_glProgramNamedParameter4fNV;
    }
    dt.glProgramNamedParameter4fNV = MakeRegalProc(loader_glProgramNamedParameter4fNV,layer);
    _getProcAddress( driver_glProgramNamedParameter4fvNV, glProgramNamedParameter4fvNV, "glProgramNamedParameter4fvNV" );
    if( driver_glProgramNamedParameter4fvNV == NULL ) {
      driver_glProgramNamedParameter4fvNV = missing_glProgramNamedParameter4fvNV;
    }
    dt.glProgramNamedParameter4fvNV = MakeRegalProc(loader_glProgramNamedParameter4fvNV,layer);

    // GL_NV_framebuffer_blit

    _getProcAddress( driver_glBlitFramebufferNV, glBlitFramebufferNV, "glBlitFramebufferNV" );
    if( driver_glBlitFramebufferNV == NULL ) {
      driver_glBlitFramebufferNV = missing_glBlitFramebufferNV;
    }
    dt.glBlitFramebufferNV = MakeRegalProc(loader_glBlitFramebufferNV,layer);

    // GL_NV_framebuffer_multisample_coverage

    _getProcAddress( driver_glRenderbufferStorageMultisampleCoverageNV, glRenderbufferStorageMultisampleCoverageNV, "glRenderbufferStorageMultisampleCoverageNV" );
    if( driver_glRenderbufferStorageMultisampleCoverageNV == NULL ) {
      driver_glRenderbufferStorageMultisampleCoverageNV = missing_glRenderbufferStorageMultisampleCoverageNV;
    }
    dt.glRenderbufferStorageMultisampleCoverageNV = MakeRegalProc(loader_glRenderbufferStorageMultisampleCoverageNV,layer);

    // GL_NV_geometry_program4

    _getProcAddress( driver_glProgramVertexLimitNV, glProgramVertexLimitNV, "glProgramVertexLimitNV" );
    if( driver_glProgramVertexLimitNV == NULL ) {
      driver_glProgramVertexLimitNV = missing_glProgramVertexLimitNV;
    }
    dt.glProgramVertexLimitNV = MakeRegalProc(loader_glProgramVertexLimitNV,layer);

    // GL_NV_gpu_program4

    _getProcAddress( driver_glGetProgramEnvParameterIivNV, glGetProgramEnvParameterIivNV, "glGetProgramEnvParameterIivNV" );
    if( driver_glGetProgramEnvParameterIivNV == NULL ) {
      driver_glGetProgramEnvParameterIivNV = missing_glGetProgramEnvParameterIivNV;
    }
    dt.glGetProgramEnvParameterIivNV = MakeRegalProc(loader_glGetProgramEnvParameterIivNV,layer);
    _getProcAddress( driver_glGetProgramEnvParameterIuivNV, glGetProgramEnvParameterIuivNV, "glGetProgramEnvParameterIuivNV" );
    if( driver_glGetProgramEnvParameterIuivNV == NULL ) {
      driver_glGetProgramEnvParameterIuivNV = missing_glGetProgramEnvParameterIuivNV;
    }
    dt.glGetProgramEnvParameterIuivNV = MakeRegalProc(loader_glGetProgramEnvParameterIuivNV,layer);
    _getProcAddress( driver_glGetProgramLocalParameterIivNV, glGetProgramLocalParameterIivNV, "glGetProgramLocalParameterIivNV" );
    if( driver_glGetProgramLocalParameterIivNV == NULL ) {
      driver_glGetProgramLocalParameterIivNV = missing_glGetProgramLocalParameterIivNV;
    }
    dt.glGetProgramLocalParameterIivNV = MakeRegalProc(loader_glGetProgramLocalParameterIivNV,layer);
    _getProcAddress( driver_glGetProgramLocalParameterIuivNV, glGetProgramLocalParameterIuivNV, "glGetProgramLocalParameterIuivNV" );
    if( driver_glGetProgramLocalParameterIuivNV == NULL ) {
      driver_glGetProgramLocalParameterIuivNV = missing_glGetProgramLocalParameterIuivNV;
    }
    dt.glGetProgramLocalParameterIuivNV = MakeRegalProc(loader_glGetProgramLocalParameterIuivNV,layer);
    _getProcAddress( driver_glProgramEnvParameterI4iNV, glProgramEnvParameterI4iNV, "glProgramEnvParameterI4iNV" );
    if( driver_glProgramEnvParameterI4iNV == NULL ) {
      driver_glProgramEnvParameterI4iNV = missing_glProgramEnvParameterI4iNV;
    }
    dt.glProgramEnvParameterI4iNV = MakeRegalProc(loader_glProgramEnvParameterI4iNV,layer);
    _getProcAddress( driver_glProgramEnvParameterI4ivNV, glProgramEnvParameterI4ivNV, "glProgramEnvParameterI4ivNV" );
    if( driver_glProgramEnvParameterI4ivNV == NULL ) {
      driver_glProgramEnvParameterI4ivNV = missing_glProgramEnvParameterI4ivNV;
    }
    dt.glProgramEnvParameterI4ivNV = MakeRegalProc(loader_glProgramEnvParameterI4ivNV,layer);
    _getProcAddress( driver_glProgramEnvParameterI4uiNV, glProgramEnvParameterI4uiNV, "glProgramEnvParameterI4uiNV" );
    if( driver_glProgramEnvParameterI4uiNV == NULL ) {
      driver_glProgramEnvParameterI4uiNV = missing_glProgramEnvParameterI4uiNV;
    }
    dt.glProgramEnvParameterI4uiNV = MakeRegalProc(loader_glProgramEnvParameterI4uiNV,layer);
    _getProcAddress( driver_glProgramEnvParameterI4uivNV, glProgramEnvParameterI4uivNV, "glProgramEnvParameterI4uivNV" );
    if( driver_glProgramEnvParameterI4uivNV == NULL ) {
      driver_glProgramEnvParameterI4uivNV = missing_glProgramEnvParameterI4uivNV;
    }
    dt.glProgramEnvParameterI4uivNV = MakeRegalProc(loader_glProgramEnvParameterI4uivNV,layer);
    _getProcAddress( driver_glProgramEnvParametersI4ivNV, glProgramEnvParametersI4ivNV, "glProgramEnvParametersI4ivNV" );
    if( driver_glProgramEnvParametersI4ivNV == NULL ) {
      driver_glProgramEnvParametersI4ivNV = missing_glProgramEnvParametersI4ivNV;
    }
    dt.glProgramEnvParametersI4ivNV = MakeRegalProc(loader_glProgramEnvParametersI4ivNV,layer);
    _getProcAddress( driver_glProgramEnvParametersI4uivNV, glProgramEnvParametersI4uivNV, "glProgramEnvParametersI4uivNV" );
    if( driver_glProgramEnvParametersI4uivNV == NULL ) {
      driver_glProgramEnvParametersI4uivNV = missing_glProgramEnvParametersI4uivNV;
    }
    dt.glProgramEnvParametersI4uivNV = MakeRegalProc(loader_glProgramEnvParametersI4uivNV,layer);
    _getProcAddress( driver_glProgramLocalParameterI4iNV, glProgramLocalParameterI4iNV, "glProgramLocalParameterI4iNV" );
    if( driver_glProgramLocalParameterI4iNV == NULL ) {
      driver_glProgramLocalParameterI4iNV = missing_glProgramLocalParameterI4iNV;
    }
    dt.glProgramLocalParameterI4iNV = MakeRegalProc(loader_glProgramLocalParameterI4iNV,layer);
    _getProcAddress( driver_glProgramLocalParameterI4ivNV, glProgramLocalParameterI4ivNV, "glProgramLocalParameterI4ivNV" );
    if( driver_glProgramLocalParameterI4ivNV == NULL ) {
      driver_glProgramLocalParameterI4ivNV = missing_glProgramLocalParameterI4ivNV;
    }
    dt.glProgramLocalParameterI4ivNV = MakeRegalProc(loader_glProgramLocalParameterI4ivNV,layer);
    _getProcAddress( driver_glProgramLocalParameterI4uiNV, glProgramLocalParameterI4uiNV, "glProgramLocalParameterI4uiNV" );
    if( driver_glProgramLocalParameterI4uiNV == NULL ) {
      driver_glProgramLocalParameterI4uiNV = missing_glProgramLocalParameterI4uiNV;
    }
    dt.glProgramLocalParameterI4uiNV = MakeRegalProc(loader_glProgramLocalParameterI4uiNV,layer);
    _getProcAddress( driver_glProgramLocalParameterI4uivNV, glProgramLocalParameterI4uivNV, "glProgramLocalParameterI4uivNV" );
    if( driver_glProgramLocalParameterI4uivNV == NULL ) {
      driver_glProgramLocalParameterI4uivNV = missing_glProgramLocalParameterI4uivNV;
    }
    dt.glProgramLocalParameterI4uivNV = MakeRegalProc(loader_glProgramLocalParameterI4uivNV,layer);
    _getProcAddress( driver_glProgramLocalParametersI4ivNV, glProgramLocalParametersI4ivNV, "glProgramLocalParametersI4ivNV" );
    if( driver_glProgramLocalParametersI4ivNV == NULL ) {
      driver_glProgramLocalParametersI4ivNV = missing_glProgramLocalParametersI4ivNV;
    }
    dt.glProgramLocalParametersI4ivNV = MakeRegalProc(loader_glProgramLocalParametersI4ivNV,layer);
    _getProcAddress( driver_glProgramLocalParametersI4uivNV, glProgramLocalParametersI4uivNV, "glProgramLocalParametersI4uivNV" );
    if( driver_glProgramLocalParametersI4uivNV == NULL ) {
      driver_glProgramLocalParametersI4uivNV = missing_glProgramLocalParametersI4uivNV;
    }
    dt.glProgramLocalParametersI4uivNV = MakeRegalProc(loader_glProgramLocalParametersI4uivNV,layer);

    // GL_NV_gpu_shader5

    _getProcAddress( driver_glGetUniformi64vNV, glGetUniformi64vNV, "glGetUniformi64vNV" );
    if( driver_glGetUniformi64vNV == NULL ) {
      driver_glGetUniformi64vNV = missing_glGetUniformi64vNV;
    }
    dt.glGetUniformi64vNV = MakeRegalProc(loader_glGetUniformi64vNV,layer);
    _getProcAddress( driver_glProgramUniform1i64NV, glProgramUniform1i64NV, "glProgramUniform1i64NV" );
    if( driver_glProgramUniform1i64NV == NULL ) {
      driver_glProgramUniform1i64NV = missing_glProgramUniform1i64NV;
    }
    dt.glProgramUniform1i64NV = MakeRegalProc(loader_glProgramUniform1i64NV,layer);
    _getProcAddress( driver_glProgramUniform1i64vNV, glProgramUniform1i64vNV, "glProgramUniform1i64vNV" );
    if( driver_glProgramUniform1i64vNV == NULL ) {
      driver_glProgramUniform1i64vNV = missing_glProgramUniform1i64vNV;
    }
    dt.glProgramUniform1i64vNV = MakeRegalProc(loader_glProgramUniform1i64vNV,layer);
    _getProcAddress( driver_glProgramUniform1ui64NV, glProgramUniform1ui64NV, "glProgramUniform1ui64NV" );
    if( driver_glProgramUniform1ui64NV == NULL ) {
      driver_glProgramUniform1ui64NV = missing_glProgramUniform1ui64NV;
    }
    dt.glProgramUniform1ui64NV = MakeRegalProc(loader_glProgramUniform1ui64NV,layer);
    _getProcAddress( driver_glProgramUniform1ui64vNV, glProgramUniform1ui64vNV, "glProgramUniform1ui64vNV" );
    if( driver_glProgramUniform1ui64vNV == NULL ) {
      driver_glProgramUniform1ui64vNV = missing_glProgramUniform1ui64vNV;
    }
    dt.glProgramUniform1ui64vNV = MakeRegalProc(loader_glProgramUniform1ui64vNV,layer);
    _getProcAddress( driver_glProgramUniform2i64NV, glProgramUniform2i64NV, "glProgramUniform2i64NV" );
    if( driver_glProgramUniform2i64NV == NULL ) {
      driver_glProgramUniform2i64NV = missing_glProgramUniform2i64NV;
    }
    dt.glProgramUniform2i64NV = MakeRegalProc(loader_glProgramUniform2i64NV,layer);
    _getProcAddress( driver_glProgramUniform2i64vNV, glProgramUniform2i64vNV, "glProgramUniform2i64vNV" );
    if( driver_glProgramUniform2i64vNV == NULL ) {
      driver_glProgramUniform2i64vNV = missing_glProgramUniform2i64vNV;
    }
    dt.glProgramUniform2i64vNV = MakeRegalProc(loader_glProgramUniform2i64vNV,layer);
    _getProcAddress( driver_glProgramUniform2ui64NV, glProgramUniform2ui64NV, "glProgramUniform2ui64NV" );
    if( driver_glProgramUniform2ui64NV == NULL ) {
      driver_glProgramUniform2ui64NV = missing_glProgramUniform2ui64NV;
    }
    dt.glProgramUniform2ui64NV = MakeRegalProc(loader_glProgramUniform2ui64NV,layer);
    _getProcAddress( driver_glProgramUniform2ui64vNV, glProgramUniform2ui64vNV, "glProgramUniform2ui64vNV" );
    if( driver_glProgramUniform2ui64vNV == NULL ) {
      driver_glProgramUniform2ui64vNV = missing_glProgramUniform2ui64vNV;
    }
    dt.glProgramUniform2ui64vNV = MakeRegalProc(loader_glProgramUniform2ui64vNV,layer);
    _getProcAddress( driver_glProgramUniform3i64NV, glProgramUniform3i64NV, "glProgramUniform3i64NV" );
    if( driver_glProgramUniform3i64NV == NULL ) {
      driver_glProgramUniform3i64NV = missing_glProgramUniform3i64NV;
    }
    dt.glProgramUniform3i64NV = MakeRegalProc(loader_glProgramUniform3i64NV,layer);
    _getProcAddress( driver_glProgramUniform3i64vNV, glProgramUniform3i64vNV, "glProgramUniform3i64vNV" );
    if( driver_glProgramUniform3i64vNV == NULL ) {
      driver_glProgramUniform3i64vNV = missing_glProgramUniform3i64vNV;
    }
    dt.glProgramUniform3i64vNV = MakeRegalProc(loader_glProgramUniform3i64vNV,layer);
    _getProcAddress( driver_glProgramUniform3ui64NV, glProgramUniform3ui64NV, "glProgramUniform3ui64NV" );
    if( driver_glProgramUniform3ui64NV == NULL ) {
      driver_glProgramUniform3ui64NV = missing_glProgramUniform3ui64NV;
    }
    dt.glProgramUniform3ui64NV = MakeRegalProc(loader_glProgramUniform3ui64NV,layer);
    _getProcAddress( driver_glProgramUniform3ui64vNV, glProgramUniform3ui64vNV, "glProgramUniform3ui64vNV" );
    if( driver_glProgramUniform3ui64vNV == NULL ) {
      driver_glProgramUniform3ui64vNV = missing_glProgramUniform3ui64vNV;
    }
    dt.glProgramUniform3ui64vNV = MakeRegalProc(loader_glProgramUniform3ui64vNV,layer);
    _getProcAddress( driver_glProgramUniform4i64NV, glProgramUniform4i64NV, "glProgramUniform4i64NV" );
    if( driver_glProgramUniform4i64NV == NULL ) {
      driver_glProgramUniform4i64NV = missing_glProgramUniform4i64NV;
    }
    dt.glProgramUniform4i64NV = MakeRegalProc(loader_glProgramUniform4i64NV,layer);
    _getProcAddress( driver_glProgramUniform4i64vNV, glProgramUniform4i64vNV, "glProgramUniform4i64vNV" );
    if( driver_glProgramUniform4i64vNV == NULL ) {
      driver_glProgramUniform4i64vNV = missing_glProgramUniform4i64vNV;
    }
    dt.glProgramUniform4i64vNV = MakeRegalProc(loader_glProgramUniform4i64vNV,layer);
    _getProcAddress( driver_glProgramUniform4ui64NV, glProgramUniform4ui64NV, "glProgramUniform4ui64NV" );
    if( driver_glProgramUniform4ui64NV == NULL ) {
      driver_glProgramUniform4ui64NV = missing_glProgramUniform4ui64NV;
    }
    dt.glProgramUniform4ui64NV = MakeRegalProc(loader_glProgramUniform4ui64NV,layer);
    _getProcAddress( driver_glProgramUniform4ui64vNV, glProgramUniform4ui64vNV, "glProgramUniform4ui64vNV" );
    if( driver_glProgramUniform4ui64vNV == NULL ) {
      driver_glProgramUniform4ui64vNV = missing_glProgramUniform4ui64vNV;
    }
    dt.glProgramUniform4ui64vNV = MakeRegalProc(loader_glProgramUniform4ui64vNV,layer);
    _getProcAddress( driver_glUniform1i64NV, glUniform1i64NV, "glUniform1i64NV" );
    if( driver_glUniform1i64NV == NULL ) {
      driver_glUniform1i64NV = missing_glUniform1i64NV;
    }
    dt.glUniform1i64NV = MakeRegalProc(loader_glUniform1i64NV,layer);
    _getProcAddress( driver_glUniform1i64vNV, glUniform1i64vNV, "glUniform1i64vNV" );
    if( driver_glUniform1i64vNV == NULL ) {
      driver_glUniform1i64vNV = missing_glUniform1i64vNV;
    }
    dt.glUniform1i64vNV = MakeRegalProc(loader_glUniform1i64vNV,layer);
    _getProcAddress( driver_glUniform1ui64NV, glUniform1ui64NV, "glUniform1ui64NV" );
    if( driver_glUniform1ui64NV == NULL ) {
      driver_glUniform1ui64NV = missing_glUniform1ui64NV;
    }
    dt.glUniform1ui64NV = MakeRegalProc(loader_glUniform1ui64NV,layer);
    _getProcAddress( driver_glUniform1ui64vNV, glUniform1ui64vNV, "glUniform1ui64vNV" );
    if( driver_glUniform1ui64vNV == NULL ) {
      driver_glUniform1ui64vNV = missing_glUniform1ui64vNV;
    }
    dt.glUniform1ui64vNV = MakeRegalProc(loader_glUniform1ui64vNV,layer);
    _getProcAddress( driver_glUniform2i64NV, glUniform2i64NV, "glUniform2i64NV" );
    if( driver_glUniform2i64NV == NULL ) {
      driver_glUniform2i64NV = missing_glUniform2i64NV;
    }
    dt.glUniform2i64NV = MakeRegalProc(loader_glUniform2i64NV,layer);
    _getProcAddress( driver_glUniform2i64vNV, glUniform2i64vNV, "glUniform2i64vNV" );
    if( driver_glUniform2i64vNV == NULL ) {
      driver_glUniform2i64vNV = missing_glUniform2i64vNV;
    }
    dt.glUniform2i64vNV = MakeRegalProc(loader_glUniform2i64vNV,layer);
    _getProcAddress( driver_glUniform2ui64NV, glUniform2ui64NV, "glUniform2ui64NV" );
    if( driver_glUniform2ui64NV == NULL ) {
      driver_glUniform2ui64NV = missing_glUniform2ui64NV;
    }
    dt.glUniform2ui64NV = MakeRegalProc(loader_glUniform2ui64NV,layer);
    _getProcAddress( driver_glUniform2ui64vNV, glUniform2ui64vNV, "glUniform2ui64vNV" );
    if( driver_glUniform2ui64vNV == NULL ) {
      driver_glUniform2ui64vNV = missing_glUniform2ui64vNV;
    }
    dt.glUniform2ui64vNV = MakeRegalProc(loader_glUniform2ui64vNV,layer);
    _getProcAddress( driver_glUniform3i64NV, glUniform3i64NV, "glUniform3i64NV" );
    if( driver_glUniform3i64NV == NULL ) {
      driver_glUniform3i64NV = missing_glUniform3i64NV;
    }
    dt.glUniform3i64NV = MakeRegalProc(loader_glUniform3i64NV,layer);
    _getProcAddress( driver_glUniform3i64vNV, glUniform3i64vNV, "glUniform3i64vNV" );
    if( driver_glUniform3i64vNV == NULL ) {
      driver_glUniform3i64vNV = missing_glUniform3i64vNV;
    }
    dt.glUniform3i64vNV = MakeRegalProc(loader_glUniform3i64vNV,layer);
    _getProcAddress( driver_glUniform3ui64NV, glUniform3ui64NV, "glUniform3ui64NV" );
    if( driver_glUniform3ui64NV == NULL ) {
      driver_glUniform3ui64NV = missing_glUniform3ui64NV;
    }
    dt.glUniform3ui64NV = MakeRegalProc(loader_glUniform3ui64NV,layer);
    _getProcAddress( driver_glUniform3ui64vNV, glUniform3ui64vNV, "glUniform3ui64vNV" );
    if( driver_glUniform3ui64vNV == NULL ) {
      driver_glUniform3ui64vNV = missing_glUniform3ui64vNV;
    }
    dt.glUniform3ui64vNV = MakeRegalProc(loader_glUniform3ui64vNV,layer);
    _getProcAddress( driver_glUniform4i64NV, glUniform4i64NV, "glUniform4i64NV" );
    if( driver_glUniform4i64NV == NULL ) {
      driver_glUniform4i64NV = missing_glUniform4i64NV;
    }
    dt.glUniform4i64NV = MakeRegalProc(loader_glUniform4i64NV,layer);
    _getProcAddress( driver_glUniform4i64vNV, glUniform4i64vNV, "glUniform4i64vNV" );
    if( driver_glUniform4i64vNV == NULL ) {
      driver_glUniform4i64vNV = missing_glUniform4i64vNV;
    }
    dt.glUniform4i64vNV = MakeRegalProc(loader_glUniform4i64vNV,layer);
    _getProcAddress( driver_glUniform4ui64NV, glUniform4ui64NV, "glUniform4ui64NV" );
    if( driver_glUniform4ui64NV == NULL ) {
      driver_glUniform4ui64NV = missing_glUniform4ui64NV;
    }
    dt.glUniform4ui64NV = MakeRegalProc(loader_glUniform4ui64NV,layer);
    _getProcAddress( driver_glUniform4ui64vNV, glUniform4ui64vNV, "glUniform4ui64vNV" );
    if( driver_glUniform4ui64vNV == NULL ) {
      driver_glUniform4ui64vNV = missing_glUniform4ui64vNV;
    }
    dt.glUniform4ui64vNV = MakeRegalProc(loader_glUniform4ui64vNV,layer);

    // GL_NV_half_float

    _getProcAddress( driver_glColor3hNV, glColor3hNV, "glColor3hNV" );
    if( driver_glColor3hNV == NULL ) {
      driver_glColor3hNV = missing_glColor3hNV;
    }
    dt.glColor3hNV = MakeRegalProc(loader_glColor3hNV,layer);
    _getProcAddress( driver_glColor3hvNV, glColor3hvNV, "glColor3hvNV" );
    if( driver_glColor3hvNV == NULL ) {
      driver_glColor3hvNV = missing_glColor3hvNV;
    }
    dt.glColor3hvNV = MakeRegalProc(loader_glColor3hvNV,layer);
    _getProcAddress( driver_glColor4hNV, glColor4hNV, "glColor4hNV" );
    if( driver_glColor4hNV == NULL ) {
      driver_glColor4hNV = missing_glColor4hNV;
    }
    dt.glColor4hNV = MakeRegalProc(loader_glColor4hNV,layer);
    _getProcAddress( driver_glColor4hvNV, glColor4hvNV, "glColor4hvNV" );
    if( driver_glColor4hvNV == NULL ) {
      driver_glColor4hvNV = missing_glColor4hvNV;
    }
    dt.glColor4hvNV = MakeRegalProc(loader_glColor4hvNV,layer);
    _getProcAddress( driver_glFogCoordhNV, glFogCoordhNV, "glFogCoordhNV" );
    if( driver_glFogCoordhNV == NULL ) {
      driver_glFogCoordhNV = missing_glFogCoordhNV;
    }
    dt.glFogCoordhNV = MakeRegalProc(loader_glFogCoordhNV,layer);
    _getProcAddress( driver_glFogCoordhvNV, glFogCoordhvNV, "glFogCoordhvNV" );
    if( driver_glFogCoordhvNV == NULL ) {
      driver_glFogCoordhvNV = missing_glFogCoordhvNV;
    }
    dt.glFogCoordhvNV = MakeRegalProc(loader_glFogCoordhvNV,layer);
    _getProcAddress( driver_glMultiTexCoord1hNV, glMultiTexCoord1hNV, "glMultiTexCoord1hNV" );
    if( driver_glMultiTexCoord1hNV == NULL ) {
      driver_glMultiTexCoord1hNV = missing_glMultiTexCoord1hNV;
    }
    dt.glMultiTexCoord1hNV = MakeRegalProc(loader_glMultiTexCoord1hNV,layer);
    _getProcAddress( driver_glMultiTexCoord1hvNV, glMultiTexCoord1hvNV, "glMultiTexCoord1hvNV" );
    if( driver_glMultiTexCoord1hvNV == NULL ) {
      driver_glMultiTexCoord1hvNV = missing_glMultiTexCoord1hvNV;
    }
    dt.glMultiTexCoord1hvNV = MakeRegalProc(loader_glMultiTexCoord1hvNV,layer);
    _getProcAddress( driver_glMultiTexCoord2hNV, glMultiTexCoord2hNV, "glMultiTexCoord2hNV" );
    if( driver_glMultiTexCoord2hNV == NULL ) {
      driver_glMultiTexCoord2hNV = missing_glMultiTexCoord2hNV;
    }
    dt.glMultiTexCoord2hNV = MakeRegalProc(loader_glMultiTexCoord2hNV,layer);
    _getProcAddress( driver_glMultiTexCoord2hvNV, glMultiTexCoord2hvNV, "glMultiTexCoord2hvNV" );
    if( driver_glMultiTexCoord2hvNV == NULL ) {
      driver_glMultiTexCoord2hvNV = missing_glMultiTexCoord2hvNV;
    }
    dt.glMultiTexCoord2hvNV = MakeRegalProc(loader_glMultiTexCoord2hvNV,layer);
    _getProcAddress( driver_glMultiTexCoord3hNV, glMultiTexCoord3hNV, "glMultiTexCoord3hNV" );
    if( driver_glMultiTexCoord3hNV == NULL ) {
      driver_glMultiTexCoord3hNV = missing_glMultiTexCoord3hNV;
    }
    dt.glMultiTexCoord3hNV = MakeRegalProc(loader_glMultiTexCoord3hNV,layer);
    _getProcAddress( driver_glMultiTexCoord3hvNV, glMultiTexCoord3hvNV, "glMultiTexCoord3hvNV" );
    if( driver_glMultiTexCoord3hvNV == NULL ) {
      driver_glMultiTexCoord3hvNV = missing_glMultiTexCoord3hvNV;
    }
    dt.glMultiTexCoord3hvNV = MakeRegalProc(loader_glMultiTexCoord3hvNV,layer);
    _getProcAddress( driver_glMultiTexCoord4hNV, glMultiTexCoord4hNV, "glMultiTexCoord4hNV" );
    if( driver_glMultiTexCoord4hNV == NULL ) {
      driver_glMultiTexCoord4hNV = missing_glMultiTexCoord4hNV;
    }
    dt.glMultiTexCoord4hNV = MakeRegalProc(loader_glMultiTexCoord4hNV,layer);
    _getProcAddress( driver_glMultiTexCoord4hvNV, glMultiTexCoord4hvNV, "glMultiTexCoord4hvNV" );
    if( driver_glMultiTexCoord4hvNV == NULL ) {
      driver_glMultiTexCoord4hvNV = missing_glMultiTexCoord4hvNV;
    }
    dt.glMultiTexCoord4hvNV = MakeRegalProc(loader_glMultiTexCoord4hvNV,layer);
    _getProcAddress( driver_glNormal3hNV, glNormal3hNV, "glNormal3hNV" );
    if( driver_glNormal3hNV == NULL ) {
      driver_glNormal3hNV = missing_glNormal3hNV;
    }
    dt.glNormal3hNV = MakeRegalProc(loader_glNormal3hNV,layer);
    _getProcAddress( driver_glNormal3hvNV, glNormal3hvNV, "glNormal3hvNV" );
    if( driver_glNormal3hvNV == NULL ) {
      driver_glNormal3hvNV = missing_glNormal3hvNV;
    }
    dt.glNormal3hvNV = MakeRegalProc(loader_glNormal3hvNV,layer);
    _getProcAddress( driver_glSecondaryColor3hNV, glSecondaryColor3hNV, "glSecondaryColor3hNV" );
    if( driver_glSecondaryColor3hNV == NULL ) {
      driver_glSecondaryColor3hNV = missing_glSecondaryColor3hNV;
    }
    dt.glSecondaryColor3hNV = MakeRegalProc(loader_glSecondaryColor3hNV,layer);
    _getProcAddress( driver_glSecondaryColor3hvNV, glSecondaryColor3hvNV, "glSecondaryColor3hvNV" );
    if( driver_glSecondaryColor3hvNV == NULL ) {
      driver_glSecondaryColor3hvNV = missing_glSecondaryColor3hvNV;
    }
    dt.glSecondaryColor3hvNV = MakeRegalProc(loader_glSecondaryColor3hvNV,layer);
    _getProcAddress( driver_glTexCoord1hNV, glTexCoord1hNV, "glTexCoord1hNV" );
    if( driver_glTexCoord1hNV == NULL ) {
      driver_glTexCoord1hNV = missing_glTexCoord1hNV;
    }
    dt.glTexCoord1hNV = MakeRegalProc(loader_glTexCoord1hNV,layer);
    _getProcAddress( driver_glTexCoord1hvNV, glTexCoord1hvNV, "glTexCoord1hvNV" );
    if( driver_glTexCoord1hvNV == NULL ) {
      driver_glTexCoord1hvNV = missing_glTexCoord1hvNV;
    }
    dt.glTexCoord1hvNV = MakeRegalProc(loader_glTexCoord1hvNV,layer);
    _getProcAddress( driver_glTexCoord2hNV, glTexCoord2hNV, "glTexCoord2hNV" );
    if( driver_glTexCoord2hNV == NULL ) {
      driver_glTexCoord2hNV = missing_glTexCoord2hNV;
    }
    dt.glTexCoord2hNV = MakeRegalProc(loader_glTexCoord2hNV,layer);
    _getProcAddress( driver_glTexCoord2hvNV, glTexCoord2hvNV, "glTexCoord2hvNV" );
    if( driver_glTexCoord2hvNV == NULL ) {
      driver_glTexCoord2hvNV = missing_glTexCoord2hvNV;
    }
    dt.glTexCoord2hvNV = MakeRegalProc(loader_glTexCoord2hvNV,layer);
    _getProcAddress( driver_glTexCoord3hNV, glTexCoord3hNV, "glTexCoord3hNV" );
    if( driver_glTexCoord3hNV == NULL ) {
      driver_glTexCoord3hNV = missing_glTexCoord3hNV;
    }
    dt.glTexCoord3hNV = MakeRegalProc(loader_glTexCoord3hNV,layer);
    _getProcAddress( driver_glTexCoord3hvNV, glTexCoord3hvNV, "glTexCoord3hvNV" );
    if( driver_glTexCoord3hvNV == NULL ) {
      driver_glTexCoord3hvNV = missing_glTexCoord3hvNV;
    }
    dt.glTexCoord3hvNV = MakeRegalProc(loader_glTexCoord3hvNV,layer);
    _getProcAddress( driver_glTexCoord4hNV, glTexCoord4hNV, "glTexCoord4hNV" );
    if( driver_glTexCoord4hNV == NULL ) {
      driver_glTexCoord4hNV = missing_glTexCoord4hNV;
    }
    dt.glTexCoord4hNV = MakeRegalProc(loader_glTexCoord4hNV,layer);
    _getProcAddress( driver_glTexCoord4hvNV, glTexCoord4hvNV, "glTexCoord4hvNV" );
    if( driver_glTexCoord4hvNV == NULL ) {
      driver_glTexCoord4hvNV = missing_glTexCoord4hvNV;
    }
    dt.glTexCoord4hvNV = MakeRegalProc(loader_glTexCoord4hvNV,layer);
    _getProcAddress( driver_glVertex2hNV, glVertex2hNV, "glVertex2hNV" );
    if( driver_glVertex2hNV == NULL ) {
      driver_glVertex2hNV = missing_glVertex2hNV;
    }
    dt.glVertex2hNV = MakeRegalProc(loader_glVertex2hNV,layer);
    _getProcAddress( driver_glVertex2hvNV, glVertex2hvNV, "glVertex2hvNV" );
    if( driver_glVertex2hvNV == NULL ) {
      driver_glVertex2hvNV = missing_glVertex2hvNV;
    }
    dt.glVertex2hvNV = MakeRegalProc(loader_glVertex2hvNV,layer);
    _getProcAddress( driver_glVertex3hNV, glVertex3hNV, "glVertex3hNV" );
    if( driver_glVertex3hNV == NULL ) {
      driver_glVertex3hNV = missing_glVertex3hNV;
    }
    dt.glVertex3hNV = MakeRegalProc(loader_glVertex3hNV,layer);
    _getProcAddress( driver_glVertex3hvNV, glVertex3hvNV, "glVertex3hvNV" );
    if( driver_glVertex3hvNV == NULL ) {
      driver_glVertex3hvNV = missing_glVertex3hvNV;
    }
    dt.glVertex3hvNV = MakeRegalProc(loader_glVertex3hvNV,layer);
    _getProcAddress( driver_glVertex4hNV, glVertex4hNV, "glVertex4hNV" );
    if( driver_glVertex4hNV == NULL ) {
      driver_glVertex4hNV = missing_glVertex4hNV;
    }
    dt.glVertex4hNV = MakeRegalProc(loader_glVertex4hNV,layer);
    _getProcAddress( driver_glVertex4hvNV, glVertex4hvNV, "glVertex4hvNV" );
    if( driver_glVertex4hvNV == NULL ) {
      driver_glVertex4hvNV = missing_glVertex4hvNV;
    }
    dt.glVertex4hvNV = MakeRegalProc(loader_glVertex4hvNV,layer);
    _getProcAddress( driver_glVertexAttrib1hNV, glVertexAttrib1hNV, "glVertexAttrib1hNV" );
    if( driver_glVertexAttrib1hNV == NULL ) {
      driver_glVertexAttrib1hNV = missing_glVertexAttrib1hNV;
    }
    dt.glVertexAttrib1hNV = MakeRegalProc(loader_glVertexAttrib1hNV,layer);
    _getProcAddress( driver_glVertexAttrib1hvNV, glVertexAttrib1hvNV, "glVertexAttrib1hvNV" );
    if( driver_glVertexAttrib1hvNV == NULL ) {
      driver_glVertexAttrib1hvNV = missing_glVertexAttrib1hvNV;
    }
    dt.glVertexAttrib1hvNV = MakeRegalProc(loader_glVertexAttrib1hvNV,layer);
    _getProcAddress( driver_glVertexAttrib2hNV, glVertexAttrib2hNV, "glVertexAttrib2hNV" );
    if( driver_glVertexAttrib2hNV == NULL ) {
      driver_glVertexAttrib2hNV = missing_glVertexAttrib2hNV;
    }
    dt.glVertexAttrib2hNV = MakeRegalProc(loader_glVertexAttrib2hNV,layer);
    _getProcAddress( driver_glVertexAttrib2hvNV, glVertexAttrib2hvNV, "glVertexAttrib2hvNV" );
    if( driver_glVertexAttrib2hvNV == NULL ) {
      driver_glVertexAttrib2hvNV = missing_glVertexAttrib2hvNV;
    }
    dt.glVertexAttrib2hvNV = MakeRegalProc(loader_glVertexAttrib2hvNV,layer);
    _getProcAddress( driver_glVertexAttrib3hNV, glVertexAttrib3hNV, "glVertexAttrib3hNV" );
    if( driver_glVertexAttrib3hNV == NULL ) {
      driver_glVertexAttrib3hNV = missing_glVertexAttrib3hNV;
    }
    dt.glVertexAttrib3hNV = MakeRegalProc(loader_glVertexAttrib3hNV,layer);
    _getProcAddress( driver_glVertexAttrib3hvNV, glVertexAttrib3hvNV, "glVertexAttrib3hvNV" );
    if( driver_glVertexAttrib3hvNV == NULL ) {
      driver_glVertexAttrib3hvNV = missing_glVertexAttrib3hvNV;
    }
    dt.glVertexAttrib3hvNV = MakeRegalProc(loader_glVertexAttrib3hvNV,layer);
    _getProcAddress( driver_glVertexAttrib4hNV, glVertexAttrib4hNV, "glVertexAttrib4hNV" );
    if( driver_glVertexAttrib4hNV == NULL ) {
      driver_glVertexAttrib4hNV = missing_glVertexAttrib4hNV;
    }
    dt.glVertexAttrib4hNV = MakeRegalProc(loader_glVertexAttrib4hNV,layer);
    _getProcAddress( driver_glVertexAttrib4hvNV, glVertexAttrib4hvNV, "glVertexAttrib4hvNV" );
    if( driver_glVertexAttrib4hvNV == NULL ) {
      driver_glVertexAttrib4hvNV = missing_glVertexAttrib4hvNV;
    }
    dt.glVertexAttrib4hvNV = MakeRegalProc(loader_glVertexAttrib4hvNV,layer);
    _getProcAddress( driver_glVertexAttribs1hvNV, glVertexAttribs1hvNV, "glVertexAttribs1hvNV" );
    if( driver_glVertexAttribs1hvNV == NULL ) {
      driver_glVertexAttribs1hvNV = missing_glVertexAttribs1hvNV;
    }
    dt.glVertexAttribs1hvNV = MakeRegalProc(loader_glVertexAttribs1hvNV,layer);
    _getProcAddress( driver_glVertexAttribs2hvNV, glVertexAttribs2hvNV, "glVertexAttribs2hvNV" );
    if( driver_glVertexAttribs2hvNV == NULL ) {
      driver_glVertexAttribs2hvNV = missing_glVertexAttribs2hvNV;
    }
    dt.glVertexAttribs2hvNV = MakeRegalProc(loader_glVertexAttribs2hvNV,layer);
    _getProcAddress( driver_glVertexAttribs3hvNV, glVertexAttribs3hvNV, "glVertexAttribs3hvNV" );
    if( driver_glVertexAttribs3hvNV == NULL ) {
      driver_glVertexAttribs3hvNV = missing_glVertexAttribs3hvNV;
    }
    dt.glVertexAttribs3hvNV = MakeRegalProc(loader_glVertexAttribs3hvNV,layer);
    _getProcAddress( driver_glVertexAttribs4hvNV, glVertexAttribs4hvNV, "glVertexAttribs4hvNV" );
    if( driver_glVertexAttribs4hvNV == NULL ) {
      driver_glVertexAttribs4hvNV = missing_glVertexAttribs4hvNV;
    }
    dt.glVertexAttribs4hvNV = MakeRegalProc(loader_glVertexAttribs4hvNV,layer);
    _getProcAddress( driver_glVertexWeighthNV, glVertexWeighthNV, "glVertexWeighthNV" );
    if( driver_glVertexWeighthNV == NULL ) {
      driver_glVertexWeighthNV = missing_glVertexWeighthNV;
    }
    dt.glVertexWeighthNV = MakeRegalProc(loader_glVertexWeighthNV,layer);
    _getProcAddress( driver_glVertexWeighthvNV, glVertexWeighthvNV, "glVertexWeighthvNV" );
    if( driver_glVertexWeighthvNV == NULL ) {
      driver_glVertexWeighthvNV = missing_glVertexWeighthvNV;
    }
    dt.glVertexWeighthvNV = MakeRegalProc(loader_glVertexWeighthvNV,layer);

    // GL_NV_non_square_matrices

    _getProcAddress( driver_glUniformMatrix2x3fvNV, glUniformMatrix2x3fvNV, "glUniformMatrix2x3fvNV" );
    if( driver_glUniformMatrix2x3fvNV == NULL ) {
      driver_glUniformMatrix2x3fvNV = missing_glUniformMatrix2x3fvNV;
    }
    dt.glUniformMatrix2x3fvNV = MakeRegalProc(loader_glUniformMatrix2x3fvNV,layer);
    _getProcAddress( driver_glUniformMatrix2x4fvNV, glUniformMatrix2x4fvNV, "glUniformMatrix2x4fvNV" );
    if( driver_glUniformMatrix2x4fvNV == NULL ) {
      driver_glUniformMatrix2x4fvNV = missing_glUniformMatrix2x4fvNV;
    }
    dt.glUniformMatrix2x4fvNV = MakeRegalProc(loader_glUniformMatrix2x4fvNV,layer);
    _getProcAddress( driver_glUniformMatrix3x2fvNV, glUniformMatrix3x2fvNV, "glUniformMatrix3x2fvNV" );
    if( driver_glUniformMatrix3x2fvNV == NULL ) {
      driver_glUniformMatrix3x2fvNV = missing_glUniformMatrix3x2fvNV;
    }
    dt.glUniformMatrix3x2fvNV = MakeRegalProc(loader_glUniformMatrix3x2fvNV,layer);
    _getProcAddress( driver_glUniformMatrix3x4fvNV, glUniformMatrix3x4fvNV, "glUniformMatrix3x4fvNV" );
    if( driver_glUniformMatrix3x4fvNV == NULL ) {
      driver_glUniformMatrix3x4fvNV = missing_glUniformMatrix3x4fvNV;
    }
    dt.glUniformMatrix3x4fvNV = MakeRegalProc(loader_glUniformMatrix3x4fvNV,layer);
    _getProcAddress( driver_glUniformMatrix4x2fvNV, glUniformMatrix4x2fvNV, "glUniformMatrix4x2fvNV" );
    if( driver_glUniformMatrix4x2fvNV == NULL ) {
      driver_glUniformMatrix4x2fvNV = missing_glUniformMatrix4x2fvNV;
    }
    dt.glUniformMatrix4x2fvNV = MakeRegalProc(loader_glUniformMatrix4x2fvNV,layer);
    _getProcAddress( driver_glUniformMatrix4x3fvNV, glUniformMatrix4x3fvNV, "glUniformMatrix4x3fvNV" );
    if( driver_glUniformMatrix4x3fvNV == NULL ) {
      driver_glUniformMatrix4x3fvNV = missing_glUniformMatrix4x3fvNV;
    }
    dt.glUniformMatrix4x3fvNV = MakeRegalProc(loader_glUniformMatrix4x3fvNV,layer);

    // GL_NV_occlusion_query

    _getProcAddress( driver_glBeginOcclusionQueryNV, glBeginOcclusionQueryNV, "glBeginOcclusionQueryNV" );
    if( driver_glBeginOcclusionQueryNV == NULL ) {
      driver_glBeginOcclusionQueryNV = missing_glBeginOcclusionQueryNV;
    }
    dt.glBeginOcclusionQueryNV = MakeRegalProc(loader_glBeginOcclusionQueryNV,layer);
    _getProcAddress( driver_glDeleteOcclusionQueriesNV, glDeleteOcclusionQueriesNV, "glDeleteOcclusionQueriesNV" );
    if( driver_glDeleteOcclusionQueriesNV == NULL ) {
      driver_glDeleteOcclusionQueriesNV = missing_glDeleteOcclusionQueriesNV;
    }
    dt.glDeleteOcclusionQueriesNV = MakeRegalProc(loader_glDeleteOcclusionQueriesNV,layer);
    _getProcAddress( driver_glEndOcclusionQueryNV, glEndOcclusionQueryNV, "glEndOcclusionQueryNV" );
    if( driver_glEndOcclusionQueryNV == NULL ) {
      driver_glEndOcclusionQueryNV = missing_glEndOcclusionQueryNV;
    }
    dt.glEndOcclusionQueryNV = MakeRegalProc(loader_glEndOcclusionQueryNV,layer);
    _getProcAddress( driver_glGenOcclusionQueriesNV, glGenOcclusionQueriesNV, "glGenOcclusionQueriesNV" );
    if( driver_glGenOcclusionQueriesNV == NULL ) {
      driver_glGenOcclusionQueriesNV = missing_glGenOcclusionQueriesNV;
    }
    dt.glGenOcclusionQueriesNV = MakeRegalProc(loader_glGenOcclusionQueriesNV,layer);
    _getProcAddress( driver_glGetOcclusionQueryivNV, glGetOcclusionQueryivNV, "glGetOcclusionQueryivNV" );
    if( driver_glGetOcclusionQueryivNV == NULL ) {
      driver_glGetOcclusionQueryivNV = missing_glGetOcclusionQueryivNV;
    }
    dt.glGetOcclusionQueryivNV = MakeRegalProc(loader_glGetOcclusionQueryivNV,layer);
    _getProcAddress( driver_glGetOcclusionQueryuivNV, glGetOcclusionQueryuivNV, "glGetOcclusionQueryuivNV" );
    if( driver_glGetOcclusionQueryuivNV == NULL ) {
      driver_glGetOcclusionQueryuivNV = missing_glGetOcclusionQueryuivNV;
    }
    dt.glGetOcclusionQueryuivNV = MakeRegalProc(loader_glGetOcclusionQueryuivNV,layer);
    _getProcAddress( driver_glIsOcclusionQueryNV, glIsOcclusionQueryNV, "glIsOcclusionQueryNV" );
    if( driver_glIsOcclusionQueryNV == NULL ) {
      driver_glIsOcclusionQueryNV = missing_glIsOcclusionQueryNV;
    }
    dt.glIsOcclusionQueryNV = MakeRegalProc(loader_glIsOcclusionQueryNV,layer);

    // GL_NV_parameter_buffer_object

    _getProcAddress( driver_glProgramBufferParametersIivNV, glProgramBufferParametersIivNV, "glProgramBufferParametersIivNV" );
    if( driver_glProgramBufferParametersIivNV == NULL ) {
      driver_glProgramBufferParametersIivNV = missing_glProgramBufferParametersIivNV;
    }
    dt.glProgramBufferParametersIivNV = MakeRegalProc(loader_glProgramBufferParametersIivNV,layer);
    _getProcAddress( driver_glProgramBufferParametersIuivNV, glProgramBufferParametersIuivNV, "glProgramBufferParametersIuivNV" );
    if( driver_glProgramBufferParametersIuivNV == NULL ) {
      driver_glProgramBufferParametersIuivNV = missing_glProgramBufferParametersIuivNV;
    }
    dt.glProgramBufferParametersIuivNV = MakeRegalProc(loader_glProgramBufferParametersIuivNV,layer);
    _getProcAddress( driver_glProgramBufferParametersfvNV, glProgramBufferParametersfvNV, "glProgramBufferParametersfvNV" );
    if( driver_glProgramBufferParametersfvNV == NULL ) {
      driver_glProgramBufferParametersfvNV = missing_glProgramBufferParametersfvNV;
    }
    dt.glProgramBufferParametersfvNV = MakeRegalProc(loader_glProgramBufferParametersfvNV,layer);

    // GL_NV_path_rendering

    _getProcAddress( driver_glCopyPathNV, glCopyPathNV, "glCopyPathNV" );
    if( driver_glCopyPathNV == NULL ) {
      driver_glCopyPathNV = missing_glCopyPathNV;
    }
    dt.glCopyPathNV = MakeRegalProc(loader_glCopyPathNV,layer);
    _getProcAddress( driver_glCoverFillPathInstancedNV, glCoverFillPathInstancedNV, "glCoverFillPathInstancedNV" );
    if( driver_glCoverFillPathInstancedNV == NULL ) {
      driver_glCoverFillPathInstancedNV = missing_glCoverFillPathInstancedNV;
    }
    dt.glCoverFillPathInstancedNV = MakeRegalProc(loader_glCoverFillPathInstancedNV,layer);
    _getProcAddress( driver_glCoverFillPathNV, glCoverFillPathNV, "glCoverFillPathNV" );
    if( driver_glCoverFillPathNV == NULL ) {
      driver_glCoverFillPathNV = missing_glCoverFillPathNV;
    }
    dt.glCoverFillPathNV = MakeRegalProc(loader_glCoverFillPathNV,layer);
    _getProcAddress( driver_glCoverStrokePathInstancedNV, glCoverStrokePathInstancedNV, "glCoverStrokePathInstancedNV" );
    if( driver_glCoverStrokePathInstancedNV == NULL ) {
      driver_glCoverStrokePathInstancedNV = missing_glCoverStrokePathInstancedNV;
    }
    dt.glCoverStrokePathInstancedNV = MakeRegalProc(loader_glCoverStrokePathInstancedNV,layer);
    _getProcAddress( driver_glCoverStrokePathNV, glCoverStrokePathNV, "glCoverStrokePathNV" );
    if( driver_glCoverStrokePathNV == NULL ) {
      driver_glCoverStrokePathNV = missing_glCoverStrokePathNV;
    }
    dt.glCoverStrokePathNV = MakeRegalProc(loader_glCoverStrokePathNV,layer);
    _getProcAddress( driver_glDeletePathsNV, glDeletePathsNV, "glDeletePathsNV" );
    if( driver_glDeletePathsNV == NULL ) {
      driver_glDeletePathsNV = missing_glDeletePathsNV;
    }
    dt.glDeletePathsNV = MakeRegalProc(loader_glDeletePathsNV,layer);
    _getProcAddress( driver_glGenPathsNV, glGenPathsNV, "glGenPathsNV" );
    if( driver_glGenPathsNV == NULL ) {
      driver_glGenPathsNV = missing_glGenPathsNV;
    }
    dt.glGenPathsNV = MakeRegalProc(loader_glGenPathsNV,layer);
    _getProcAddress( driver_glGetPathColorGenfvNV, glGetPathColorGenfvNV, "glGetPathColorGenfvNV" );
    if( driver_glGetPathColorGenfvNV == NULL ) {
      driver_glGetPathColorGenfvNV = missing_glGetPathColorGenfvNV;
    }
    dt.glGetPathColorGenfvNV = MakeRegalProc(loader_glGetPathColorGenfvNV,layer);
    _getProcAddress( driver_glGetPathColorGenivNV, glGetPathColorGenivNV, "glGetPathColorGenivNV" );
    if( driver_glGetPathColorGenivNV == NULL ) {
      driver_glGetPathColorGenivNV = missing_glGetPathColorGenivNV;
    }
    dt.glGetPathColorGenivNV = MakeRegalProc(loader_glGetPathColorGenivNV,layer);
    _getProcAddress( driver_glGetPathCommandsNV, glGetPathCommandsNV, "glGetPathCommandsNV" );
    if( driver_glGetPathCommandsNV == NULL ) {
      driver_glGetPathCommandsNV = missing_glGetPathCommandsNV;
    }
    dt.glGetPathCommandsNV = MakeRegalProc(loader_glGetPathCommandsNV,layer);
    _getProcAddress( driver_glGetPathCoordsNV, glGetPathCoordsNV, "glGetPathCoordsNV" );
    if( driver_glGetPathCoordsNV == NULL ) {
      driver_glGetPathCoordsNV = missing_glGetPathCoordsNV;
    }
    dt.glGetPathCoordsNV = MakeRegalProc(loader_glGetPathCoordsNV,layer);
    _getProcAddress( driver_glGetPathDashArrayNV, glGetPathDashArrayNV, "glGetPathDashArrayNV" );
    if( driver_glGetPathDashArrayNV == NULL ) {
      driver_glGetPathDashArrayNV = missing_glGetPathDashArrayNV;
    }
    dt.glGetPathDashArrayNV = MakeRegalProc(loader_glGetPathDashArrayNV,layer);
    _getProcAddress( driver_glGetPathLengthNV, glGetPathLengthNV, "glGetPathLengthNV" );
    if( driver_glGetPathLengthNV == NULL ) {
      driver_glGetPathLengthNV = missing_glGetPathLengthNV;
    }
    dt.glGetPathLengthNV = MakeRegalProc(loader_glGetPathLengthNV,layer);
    _getProcAddress( driver_glGetPathMetricRangeNV, glGetPathMetricRangeNV, "glGetPathMetricRangeNV" );
    if( driver_glGetPathMetricRangeNV == NULL ) {
      driver_glGetPathMetricRangeNV = missing_glGetPathMetricRangeNV;
    }
    dt.glGetPathMetricRangeNV = MakeRegalProc(loader_glGetPathMetricRangeNV,layer);
    _getProcAddress( driver_glGetPathMetricsNV, glGetPathMetricsNV, "glGetPathMetricsNV" );
    if( driver_glGetPathMetricsNV == NULL ) {
      driver_glGetPathMetricsNV = missing_glGetPathMetricsNV;
    }
    dt.glGetPathMetricsNV = MakeRegalProc(loader_glGetPathMetricsNV,layer);
    _getProcAddress( driver_glGetPathParameterfvNV, glGetPathParameterfvNV, "glGetPathParameterfvNV" );
    if( driver_glGetPathParameterfvNV == NULL ) {
      driver_glGetPathParameterfvNV = missing_glGetPathParameterfvNV;
    }
    dt.glGetPathParameterfvNV = MakeRegalProc(loader_glGetPathParameterfvNV,layer);
    _getProcAddress( driver_glGetPathParameterivNV, glGetPathParameterivNV, "glGetPathParameterivNV" );
    if( driver_glGetPathParameterivNV == NULL ) {
      driver_glGetPathParameterivNV = missing_glGetPathParameterivNV;
    }
    dt.glGetPathParameterivNV = MakeRegalProc(loader_glGetPathParameterivNV,layer);
    _getProcAddress( driver_glGetPathSpacingNV, glGetPathSpacingNV, "glGetPathSpacingNV" );
    if( driver_glGetPathSpacingNV == NULL ) {
      driver_glGetPathSpacingNV = missing_glGetPathSpacingNV;
    }
    dt.glGetPathSpacingNV = MakeRegalProc(loader_glGetPathSpacingNV,layer);
    _getProcAddress( driver_glGetPathTexGenfvNV, glGetPathTexGenfvNV, "glGetPathTexGenfvNV" );
    if( driver_glGetPathTexGenfvNV == NULL ) {
      driver_glGetPathTexGenfvNV = missing_glGetPathTexGenfvNV;
    }
    dt.glGetPathTexGenfvNV = MakeRegalProc(loader_glGetPathTexGenfvNV,layer);
    _getProcAddress( driver_glGetPathTexGenivNV, glGetPathTexGenivNV, "glGetPathTexGenivNV" );
    if( driver_glGetPathTexGenivNV == NULL ) {
      driver_glGetPathTexGenivNV = missing_glGetPathTexGenivNV;
    }
    dt.glGetPathTexGenivNV = MakeRegalProc(loader_glGetPathTexGenivNV,layer);
    _getProcAddress( driver_glInterpolatePathsNV, glInterpolatePathsNV, "glInterpolatePathsNV" );
    if( driver_glInterpolatePathsNV == NULL ) {
      driver_glInterpolatePathsNV = missing_glInterpolatePathsNV;
    }
    dt.glInterpolatePathsNV = MakeRegalProc(loader_glInterpolatePathsNV,layer);
    _getProcAddress( driver_glIsPathNV, glIsPathNV, "glIsPathNV" );
    if( driver_glIsPathNV == NULL ) {
      driver_glIsPathNV = missing_glIsPathNV;
    }
    dt.glIsPathNV = MakeRegalProc(loader_glIsPathNV,layer);
    _getProcAddress( driver_glIsPointInFillPathNV, glIsPointInFillPathNV, "glIsPointInFillPathNV" );
    if( driver_glIsPointInFillPathNV == NULL ) {
      driver_glIsPointInFillPathNV = missing_glIsPointInFillPathNV;
    }
    dt.glIsPointInFillPathNV = MakeRegalProc(loader_glIsPointInFillPathNV,layer);
    _getProcAddress( driver_glIsPointInStrokePathNV, glIsPointInStrokePathNV, "glIsPointInStrokePathNV" );
    if( driver_glIsPointInStrokePathNV == NULL ) {
      driver_glIsPointInStrokePathNV = missing_glIsPointInStrokePathNV;
    }
    dt.glIsPointInStrokePathNV = MakeRegalProc(loader_glIsPointInStrokePathNV,layer);
    _getProcAddress( driver_glPathColorGenNV, glPathColorGenNV, "glPathColorGenNV" );
    if( driver_glPathColorGenNV == NULL ) {
      driver_glPathColorGenNV = missing_glPathColorGenNV;
    }
    dt.glPathColorGenNV = MakeRegalProc(loader_glPathColorGenNV,layer);
    _getProcAddress( driver_glPathCommandsNV, glPathCommandsNV, "glPathCommandsNV" );
    if( driver_glPathCommandsNV == NULL ) {
      driver_glPathCommandsNV = missing_glPathCommandsNV;
    }
    dt.glPathCommandsNV = MakeRegalProc(loader_glPathCommandsNV,layer);
    _getProcAddress( driver_glPathCoordsNV, glPathCoordsNV, "glPathCoordsNV" );
    if( driver_glPathCoordsNV == NULL ) {
      driver_glPathCoordsNV = missing_glPathCoordsNV;
    }
    dt.glPathCoordsNV = MakeRegalProc(loader_glPathCoordsNV,layer);
    _getProcAddress( driver_glPathCoverDepthFuncNV, glPathCoverDepthFuncNV, "glPathCoverDepthFuncNV" );
    if( driver_glPathCoverDepthFuncNV == NULL ) {
      driver_glPathCoverDepthFuncNV = missing_glPathCoverDepthFuncNV;
    }
    dt.glPathCoverDepthFuncNV = MakeRegalProc(loader_glPathCoverDepthFuncNV,layer);
    _getProcAddress( driver_glPathDashArrayNV, glPathDashArrayNV, "glPathDashArrayNV" );
    if( driver_glPathDashArrayNV == NULL ) {
      driver_glPathDashArrayNV = missing_glPathDashArrayNV;
    }
    dt.glPathDashArrayNV = MakeRegalProc(loader_glPathDashArrayNV,layer);
    _getProcAddress( driver_glPathFogGenNV, glPathFogGenNV, "glPathFogGenNV" );
    if( driver_glPathFogGenNV == NULL ) {
      driver_glPathFogGenNV = missing_glPathFogGenNV;
    }
    dt.glPathFogGenNV = MakeRegalProc(loader_glPathFogGenNV,layer);
    _getProcAddress( driver_glPathGlyphRangeNV, glPathGlyphRangeNV, "glPathGlyphRangeNV" );
    if( driver_glPathGlyphRangeNV == NULL ) {
      driver_glPathGlyphRangeNV = missing_glPathGlyphRangeNV;
    }
    dt.glPathGlyphRangeNV = MakeRegalProc(loader_glPathGlyphRangeNV,layer);
    _getProcAddress( driver_glPathGlyphsNV, glPathGlyphsNV, "glPathGlyphsNV" );
    if( driver_glPathGlyphsNV == NULL ) {
      driver_glPathGlyphsNV = missing_glPathGlyphsNV;
    }
    dt.glPathGlyphsNV = MakeRegalProc(loader_glPathGlyphsNV,layer);
    _getProcAddress( driver_glPathParameterfNV, glPathParameterfNV, "glPathParameterfNV" );
    if( driver_glPathParameterfNV == NULL ) {
      driver_glPathParameterfNV = missing_glPathParameterfNV;
    }
    dt.glPathParameterfNV = MakeRegalProc(loader_glPathParameterfNV,layer);
    _getProcAddress( driver_glPathParameterfvNV, glPathParameterfvNV, "glPathParameterfvNV" );
    if( driver_glPathParameterfvNV == NULL ) {
      driver_glPathParameterfvNV = missing_glPathParameterfvNV;
    }
    dt.glPathParameterfvNV = MakeRegalProc(loader_glPathParameterfvNV,layer);
    _getProcAddress( driver_glPathParameteriNV, glPathParameteriNV, "glPathParameteriNV" );
    if( driver_glPathParameteriNV == NULL ) {
      driver_glPathParameteriNV = missing_glPathParameteriNV;
    }
    dt.glPathParameteriNV = MakeRegalProc(loader_glPathParameteriNV,layer);
    _getProcAddress( driver_glPathParameterivNV, glPathParameterivNV, "glPathParameterivNV" );
    if( driver_glPathParameterivNV == NULL ) {
      driver_glPathParameterivNV = missing_glPathParameterivNV;
    }
    dt.glPathParameterivNV = MakeRegalProc(loader_glPathParameterivNV,layer);
    _getProcAddress( driver_glPathStencilDepthOffsetNV, glPathStencilDepthOffsetNV, "glPathStencilDepthOffsetNV" );
    if( driver_glPathStencilDepthOffsetNV == NULL ) {
      driver_glPathStencilDepthOffsetNV = missing_glPathStencilDepthOffsetNV;
    }
    dt.glPathStencilDepthOffsetNV = MakeRegalProc(loader_glPathStencilDepthOffsetNV,layer);
    _getProcAddress( driver_glPathStencilFuncNV, glPathStencilFuncNV, "glPathStencilFuncNV" );
    if( driver_glPathStencilFuncNV == NULL ) {
      driver_glPathStencilFuncNV = missing_glPathStencilFuncNV;
    }
    dt.glPathStencilFuncNV = MakeRegalProc(loader_glPathStencilFuncNV,layer);
    _getProcAddress( driver_glPathStringNV, glPathStringNV, "glPathStringNV" );
    if( driver_glPathStringNV == NULL ) {
      driver_glPathStringNV = missing_glPathStringNV;
    }
    dt.glPathStringNV = MakeRegalProc(loader_glPathStringNV,layer);
    _getProcAddress( driver_glPathSubCommandsNV, glPathSubCommandsNV, "glPathSubCommandsNV" );
    if( driver_glPathSubCommandsNV == NULL ) {
      driver_glPathSubCommandsNV = missing_glPathSubCommandsNV;
    }
    dt.glPathSubCommandsNV = MakeRegalProc(loader_glPathSubCommandsNV,layer);
    _getProcAddress( driver_glPathSubCoordsNV, glPathSubCoordsNV, "glPathSubCoordsNV" );
    if( driver_glPathSubCoordsNV == NULL ) {
      driver_glPathSubCoordsNV = missing_glPathSubCoordsNV;
    }
    dt.glPathSubCoordsNV = MakeRegalProc(loader_glPathSubCoordsNV,layer);
    _getProcAddress( driver_glPathTexGenNV, glPathTexGenNV, "glPathTexGenNV" );
    if( driver_glPathTexGenNV == NULL ) {
      driver_glPathTexGenNV = missing_glPathTexGenNV;
    }
    dt.glPathTexGenNV = MakeRegalProc(loader_glPathTexGenNV,layer);
    _getProcAddress( driver_glPointAlongPathNV, glPointAlongPathNV, "glPointAlongPathNV" );
    if( driver_glPointAlongPathNV == NULL ) {
      driver_glPointAlongPathNV = missing_glPointAlongPathNV;
    }
    dt.glPointAlongPathNV = MakeRegalProc(loader_glPointAlongPathNV,layer);
    _getProcAddress( driver_glStencilFillPathInstancedNV, glStencilFillPathInstancedNV, "glStencilFillPathInstancedNV" );
    if( driver_glStencilFillPathInstancedNV == NULL ) {
      driver_glStencilFillPathInstancedNV = missing_glStencilFillPathInstancedNV;
    }
    dt.glStencilFillPathInstancedNV = MakeRegalProc(loader_glStencilFillPathInstancedNV,layer);
    _getProcAddress( driver_glStencilFillPathNV, glStencilFillPathNV, "glStencilFillPathNV" );
    if( driver_glStencilFillPathNV == NULL ) {
      driver_glStencilFillPathNV = missing_glStencilFillPathNV;
    }
    dt.glStencilFillPathNV = MakeRegalProc(loader_glStencilFillPathNV,layer);
    _getProcAddress( driver_glStencilStrokePathInstancedNV, glStencilStrokePathInstancedNV, "glStencilStrokePathInstancedNV" );
    if( driver_glStencilStrokePathInstancedNV == NULL ) {
      driver_glStencilStrokePathInstancedNV = missing_glStencilStrokePathInstancedNV;
    }
    dt.glStencilStrokePathInstancedNV = MakeRegalProc(loader_glStencilStrokePathInstancedNV,layer);
    _getProcAddress( driver_glStencilStrokePathNV, glStencilStrokePathNV, "glStencilStrokePathNV" );
    if( driver_glStencilStrokePathNV == NULL ) {
      driver_glStencilStrokePathNV = missing_glStencilStrokePathNV;
    }
    dt.glStencilStrokePathNV = MakeRegalProc(loader_glStencilStrokePathNV,layer);
    _getProcAddress( driver_glTransformPathNV, glTransformPathNV, "glTransformPathNV" );
    if( driver_glTransformPathNV == NULL ) {
      driver_glTransformPathNV = missing_glTransformPathNV;
    }
    dt.glTransformPathNV = MakeRegalProc(loader_glTransformPathNV,layer);
    _getProcAddress( driver_glWeightPathsNV, glWeightPathsNV, "glWeightPathsNV" );
    if( driver_glWeightPathsNV == NULL ) {
      driver_glWeightPathsNV = missing_glWeightPathsNV;
    }
    dt.glWeightPathsNV = MakeRegalProc(loader_glWeightPathsNV,layer);

    // GL_NV_pixel_data_range

    _getProcAddress( driver_glFlushPixelDataRangeNV, glFlushPixelDataRangeNV, "glFlushPixelDataRangeNV" );
    if( driver_glFlushPixelDataRangeNV == NULL ) {
      driver_glFlushPixelDataRangeNV = missing_glFlushPixelDataRangeNV;
    }
    dt.glFlushPixelDataRangeNV = MakeRegalProc(loader_glFlushPixelDataRangeNV,layer);
    _getProcAddress( driver_glPixelDataRangeNV, glPixelDataRangeNV, "glPixelDataRangeNV" );
    if( driver_glPixelDataRangeNV == NULL ) {
      driver_glPixelDataRangeNV = missing_glPixelDataRangeNV;
    }
    dt.glPixelDataRangeNV = MakeRegalProc(loader_glPixelDataRangeNV,layer);

    // GL_NV_point_sprite

    _getProcAddress( driver_glPointParameteriNV, glPointParameteriNV, "glPointParameteriNV" );
    if( driver_glPointParameteriNV == NULL ) {
      driver_glPointParameteriNV = missing_glPointParameteriNV;
    }
    dt.glPointParameteriNV = MakeRegalProc(loader_glPointParameteriNV,layer);
    _getProcAddress( driver_glPointParameterivNV, glPointParameterivNV, "glPointParameterivNV" );
    if( driver_glPointParameterivNV == NULL ) {
      driver_glPointParameterivNV = missing_glPointParameterivNV;
    }
    dt.glPointParameterivNV = MakeRegalProc(loader_glPointParameterivNV,layer);

    // GL_NV_present_video

    _getProcAddress( driver_glGetVideoi64vNV, glGetVideoi64vNV, "glGetVideoi64vNV" );
    if( driver_glGetVideoi64vNV == NULL ) {
      driver_glGetVideoi64vNV = missing_glGetVideoi64vNV;
    }
    dt.glGetVideoi64vNV = MakeRegalProc(loader_glGetVideoi64vNV,layer);
    _getProcAddress( driver_glGetVideoivNV, glGetVideoivNV, "glGetVideoivNV" );
    if( driver_glGetVideoivNV == NULL ) {
      driver_glGetVideoivNV = missing_glGetVideoivNV;
    }
    dt.glGetVideoivNV = MakeRegalProc(loader_glGetVideoivNV,layer);
    _getProcAddress( driver_glGetVideoui64vNV, glGetVideoui64vNV, "glGetVideoui64vNV" );
    if( driver_glGetVideoui64vNV == NULL ) {
      driver_glGetVideoui64vNV = missing_glGetVideoui64vNV;
    }
    dt.glGetVideoui64vNV = MakeRegalProc(loader_glGetVideoui64vNV,layer);
    _getProcAddress( driver_glGetVideouivNV, glGetVideouivNV, "glGetVideouivNV" );
    if( driver_glGetVideouivNV == NULL ) {
      driver_glGetVideouivNV = missing_glGetVideouivNV;
    }
    dt.glGetVideouivNV = MakeRegalProc(loader_glGetVideouivNV,layer);
    _getProcAddress( driver_glPresentFrameDualFillNV, glPresentFrameDualFillNV, "glPresentFrameDualFillNV" );
    if( driver_glPresentFrameDualFillNV == NULL ) {
      driver_glPresentFrameDualFillNV = missing_glPresentFrameDualFillNV;
    }
    dt.glPresentFrameDualFillNV = MakeRegalProc(loader_glPresentFrameDualFillNV,layer);
    _getProcAddress( driver_glPresentFrameKeyedNV, glPresentFrameKeyedNV, "glPresentFrameKeyedNV" );
    if( driver_glPresentFrameKeyedNV == NULL ) {
      driver_glPresentFrameKeyedNV = missing_glPresentFrameKeyedNV;
    }
    dt.glPresentFrameKeyedNV = MakeRegalProc(loader_glPresentFrameKeyedNV,layer);

    // GL_NV_primitive_restart

    _getProcAddress( driver_glPrimitiveRestartIndexNV, glPrimitiveRestartIndexNV, "glPrimitiveRestartIndexNV" );
    if( driver_glPrimitiveRestartIndexNV == NULL ) {
      driver_glPrimitiveRestartIndexNV = missing_glPrimitiveRestartIndexNV;
    }
    dt.glPrimitiveRestartIndexNV = MakeRegalProc(loader_glPrimitiveRestartIndexNV,layer);
    _getProcAddress( driver_glPrimitiveRestartNV, glPrimitiveRestartNV, "glPrimitiveRestartNV" );
    if( driver_glPrimitiveRestartNV == NULL ) {
      driver_glPrimitiveRestartNV = missing_glPrimitiveRestartNV;
    }
    dt.glPrimitiveRestartNV = MakeRegalProc(loader_glPrimitiveRestartNV,layer);

    // GL_NV_read_buffer

    _getProcAddress( driver_glReadBufferNV, glReadBufferNV, "glReadBufferNV" );
    if( driver_glReadBufferNV == NULL ) {
      driver_glReadBufferNV = missing_glReadBufferNV;
    }
    dt.glReadBufferNV = MakeRegalProc(loader_glReadBufferNV,layer);

    // GL_NV_register_combiners

    _getProcAddress( driver_glCombinerInputNV, glCombinerInputNV, "glCombinerInputNV" );
    if( driver_glCombinerInputNV == NULL ) {
      driver_glCombinerInputNV = missing_glCombinerInputNV;
    }
    dt.glCombinerInputNV = MakeRegalProc(loader_glCombinerInputNV,layer);
    _getProcAddress( driver_glCombinerOutputNV, glCombinerOutputNV, "glCombinerOutputNV" );
    if( driver_glCombinerOutputNV == NULL ) {
      driver_glCombinerOutputNV = missing_glCombinerOutputNV;
    }
    dt.glCombinerOutputNV = MakeRegalProc(loader_glCombinerOutputNV,layer);
    _getProcAddress( driver_glCombinerParameterfNV, glCombinerParameterfNV, "glCombinerParameterfNV" );
    if( driver_glCombinerParameterfNV == NULL ) {
      driver_glCombinerParameterfNV = missing_glCombinerParameterfNV;
    }
    dt.glCombinerParameterfNV = MakeRegalProc(loader_glCombinerParameterfNV,layer);
    _getProcAddress( driver_glCombinerParameterfvNV, glCombinerParameterfvNV, "glCombinerParameterfvNV" );
    if( driver_glCombinerParameterfvNV == NULL ) {
      driver_glCombinerParameterfvNV = missing_glCombinerParameterfvNV;
    }
    dt.glCombinerParameterfvNV = MakeRegalProc(loader_glCombinerParameterfvNV,layer);
    _getProcAddress( driver_glCombinerParameteriNV, glCombinerParameteriNV, "glCombinerParameteriNV" );
    if( driver_glCombinerParameteriNV == NULL ) {
      driver_glCombinerParameteriNV = missing_glCombinerParameteriNV;
    }
    dt.glCombinerParameteriNV = MakeRegalProc(loader_glCombinerParameteriNV,layer);
    _getProcAddress( driver_glCombinerParameterivNV, glCombinerParameterivNV, "glCombinerParameterivNV" );
    if( driver_glCombinerParameterivNV == NULL ) {
      driver_glCombinerParameterivNV = missing_glCombinerParameterivNV;
    }
    dt.glCombinerParameterivNV = MakeRegalProc(loader_glCombinerParameterivNV,layer);
    _getProcAddress( driver_glFinalCombinerInputNV, glFinalCombinerInputNV, "glFinalCombinerInputNV" );
    if( driver_glFinalCombinerInputNV == NULL ) {
      driver_glFinalCombinerInputNV = missing_glFinalCombinerInputNV;
    }
    dt.glFinalCombinerInputNV = MakeRegalProc(loader_glFinalCombinerInputNV,layer);
    _getProcAddress( driver_glGetCombinerInputParameterfvNV, glGetCombinerInputParameterfvNV, "glGetCombinerInputParameterfvNV" );
    if( driver_glGetCombinerInputParameterfvNV == NULL ) {
      driver_glGetCombinerInputParameterfvNV = missing_glGetCombinerInputParameterfvNV;
    }
    dt.glGetCombinerInputParameterfvNV = MakeRegalProc(loader_glGetCombinerInputParameterfvNV,layer);
    _getProcAddress( driver_glGetCombinerInputParameterivNV, glGetCombinerInputParameterivNV, "glGetCombinerInputParameterivNV" );
    if( driver_glGetCombinerInputParameterivNV == NULL ) {
      driver_glGetCombinerInputParameterivNV = missing_glGetCombinerInputParameterivNV;
    }
    dt.glGetCombinerInputParameterivNV = MakeRegalProc(loader_glGetCombinerInputParameterivNV,layer);
    _getProcAddress( driver_glGetCombinerOutputParameterfvNV, glGetCombinerOutputParameterfvNV, "glGetCombinerOutputParameterfvNV" );
    if( driver_glGetCombinerOutputParameterfvNV == NULL ) {
      driver_glGetCombinerOutputParameterfvNV = missing_glGetCombinerOutputParameterfvNV;
    }
    dt.glGetCombinerOutputParameterfvNV = MakeRegalProc(loader_glGetCombinerOutputParameterfvNV,layer);
    _getProcAddress( driver_glGetCombinerOutputParameterivNV, glGetCombinerOutputParameterivNV, "glGetCombinerOutputParameterivNV" );
    if( driver_glGetCombinerOutputParameterivNV == NULL ) {
      driver_glGetCombinerOutputParameterivNV = missing_glGetCombinerOutputParameterivNV;
    }
    dt.glGetCombinerOutputParameterivNV = MakeRegalProc(loader_glGetCombinerOutputParameterivNV,layer);
    _getProcAddress( driver_glGetFinalCombinerInputParameterfvNV, glGetFinalCombinerInputParameterfvNV, "glGetFinalCombinerInputParameterfvNV" );
    if( driver_glGetFinalCombinerInputParameterfvNV == NULL ) {
      driver_glGetFinalCombinerInputParameterfvNV = missing_glGetFinalCombinerInputParameterfvNV;
    }
    dt.glGetFinalCombinerInputParameterfvNV = MakeRegalProc(loader_glGetFinalCombinerInputParameterfvNV,layer);
    _getProcAddress( driver_glGetFinalCombinerInputParameterivNV, glGetFinalCombinerInputParameterivNV, "glGetFinalCombinerInputParameterivNV" );
    if( driver_glGetFinalCombinerInputParameterivNV == NULL ) {
      driver_glGetFinalCombinerInputParameterivNV = missing_glGetFinalCombinerInputParameterivNV;
    }
    dt.glGetFinalCombinerInputParameterivNV = MakeRegalProc(loader_glGetFinalCombinerInputParameterivNV,layer);

    // GL_NV_register_combiners2

    _getProcAddress( driver_glCombinerStageParameterfvNV, glCombinerStageParameterfvNV, "glCombinerStageParameterfvNV" );
    if( driver_glCombinerStageParameterfvNV == NULL ) {
      driver_glCombinerStageParameterfvNV = missing_glCombinerStageParameterfvNV;
    }
    dt.glCombinerStageParameterfvNV = MakeRegalProc(loader_glCombinerStageParameterfvNV,layer);
    _getProcAddress( driver_glGetCombinerStageParameterfvNV, glGetCombinerStageParameterfvNV, "glGetCombinerStageParameterfvNV" );
    if( driver_glGetCombinerStageParameterfvNV == NULL ) {
      driver_glGetCombinerStageParameterfvNV = missing_glGetCombinerStageParameterfvNV;
    }
    dt.glGetCombinerStageParameterfvNV = MakeRegalProc(loader_glGetCombinerStageParameterfvNV,layer);

    // GL_NV_shader_buffer_load

    _getProcAddress( driver_glGetBufferParameterui64vNV, glGetBufferParameterui64vNV, "glGetBufferParameterui64vNV" );
    if( driver_glGetBufferParameterui64vNV == NULL ) {
      driver_glGetBufferParameterui64vNV = missing_glGetBufferParameterui64vNV;
    }
    dt.glGetBufferParameterui64vNV = MakeRegalProc(loader_glGetBufferParameterui64vNV,layer);
    _getProcAddress( driver_glGetIntegerui64vNV, glGetIntegerui64vNV, "glGetIntegerui64vNV" );
    if( driver_glGetIntegerui64vNV == NULL ) {
      driver_glGetIntegerui64vNV = missing_glGetIntegerui64vNV;
    }
    dt.glGetIntegerui64vNV = MakeRegalProc(loader_glGetIntegerui64vNV,layer);
    _getProcAddress( driver_glGetNamedBufferParameterui64vNV, glGetNamedBufferParameterui64vNV, "glGetNamedBufferParameterui64vNV" );
    if( driver_glGetNamedBufferParameterui64vNV == NULL ) {
      driver_glGetNamedBufferParameterui64vNV = missing_glGetNamedBufferParameterui64vNV;
    }
    dt.glGetNamedBufferParameterui64vNV = MakeRegalProc(loader_glGetNamedBufferParameterui64vNV,layer);
    _getProcAddress( driver_glGetUniformui64vNV, glGetUniformui64vNV, "glGetUniformui64vNV" );
    if( driver_glGetUniformui64vNV == NULL ) {
      driver_glGetUniformui64vNV = missing_glGetUniformui64vNV;
    }
    dt.glGetUniformui64vNV = MakeRegalProc(loader_glGetUniformui64vNV,layer);
    _getProcAddress( driver_glIsBufferResidentNV, glIsBufferResidentNV, "glIsBufferResidentNV" );
    if( driver_glIsBufferResidentNV == NULL ) {
      driver_glIsBufferResidentNV = missing_glIsBufferResidentNV;
    }
    dt.glIsBufferResidentNV = MakeRegalProc(loader_glIsBufferResidentNV,layer);
    _getProcAddress( driver_glIsNamedBufferResidentNV, glIsNamedBufferResidentNV, "glIsNamedBufferResidentNV" );
    if( driver_glIsNamedBufferResidentNV == NULL ) {
      driver_glIsNamedBufferResidentNV = missing_glIsNamedBufferResidentNV;
    }
    dt.glIsNamedBufferResidentNV = MakeRegalProc(loader_glIsNamedBufferResidentNV,layer);
    _getProcAddress( driver_glMakeBufferNonResidentNV, glMakeBufferNonResidentNV, "glMakeBufferNonResidentNV" );
    if( driver_glMakeBufferNonResidentNV == NULL ) {
      driver_glMakeBufferNonResidentNV = missing_glMakeBufferNonResidentNV;
    }
    dt.glMakeBufferNonResidentNV = MakeRegalProc(loader_glMakeBufferNonResidentNV,layer);
    _getProcAddress( driver_glMakeBufferResidentNV, glMakeBufferResidentNV, "glMakeBufferResidentNV" );
    if( driver_glMakeBufferResidentNV == NULL ) {
      driver_glMakeBufferResidentNV = missing_glMakeBufferResidentNV;
    }
    dt.glMakeBufferResidentNV = MakeRegalProc(loader_glMakeBufferResidentNV,layer);
    _getProcAddress( driver_glMakeNamedBufferNonResidentNV, glMakeNamedBufferNonResidentNV, "glMakeNamedBufferNonResidentNV" );
    if( driver_glMakeNamedBufferNonResidentNV == NULL ) {
      driver_glMakeNamedBufferNonResidentNV = missing_glMakeNamedBufferNonResidentNV;
    }
    dt.glMakeNamedBufferNonResidentNV = MakeRegalProc(loader_glMakeNamedBufferNonResidentNV,layer);
    _getProcAddress( driver_glMakeNamedBufferResidentNV, glMakeNamedBufferResidentNV, "glMakeNamedBufferResidentNV" );
    if( driver_glMakeNamedBufferResidentNV == NULL ) {
      driver_glMakeNamedBufferResidentNV = missing_glMakeNamedBufferResidentNV;
    }
    dt.glMakeNamedBufferResidentNV = MakeRegalProc(loader_glMakeNamedBufferResidentNV,layer);
    _getProcAddress( driver_glProgramUniformui64NV, glProgramUniformui64NV, "glProgramUniformui64NV" );
    if( driver_glProgramUniformui64NV == NULL ) {
      driver_glProgramUniformui64NV = missing_glProgramUniformui64NV;
    }
    dt.glProgramUniformui64NV = MakeRegalProc(loader_glProgramUniformui64NV,layer);
    _getProcAddress( driver_glProgramUniformui64vNV, glProgramUniformui64vNV, "glProgramUniformui64vNV" );
    if( driver_glProgramUniformui64vNV == NULL ) {
      driver_glProgramUniformui64vNV = missing_glProgramUniformui64vNV;
    }
    dt.glProgramUniformui64vNV = MakeRegalProc(loader_glProgramUniformui64vNV,layer);
    _getProcAddress( driver_glUniformui64NV, glUniformui64NV, "glUniformui64NV" );
    if( driver_glUniformui64NV == NULL ) {
      driver_glUniformui64NV = missing_glUniformui64NV;
    }
    dt.glUniformui64NV = MakeRegalProc(loader_glUniformui64NV,layer);
    _getProcAddress( driver_glUniformui64vNV, glUniformui64vNV, "glUniformui64vNV" );
    if( driver_glUniformui64vNV == NULL ) {
      driver_glUniformui64vNV = missing_glUniformui64vNV;
    }
    dt.glUniformui64vNV = MakeRegalProc(loader_glUniformui64vNV,layer);

    // GL_NV_texture_barrier

    _getProcAddress( driver_glTextureBarrierNV, glTextureBarrierNV, "glTextureBarrierNV" );
    if( driver_glTextureBarrierNV == NULL ) {
      driver_glTextureBarrierNV = missing_glTextureBarrierNV;
    }
    dt.glTextureBarrierNV = MakeRegalProc(loader_glTextureBarrierNV,layer);

    // GL_NV_texture_multisample

    _getProcAddress( driver_glTexImage2DMultisampleCoverageNV, glTexImage2DMultisampleCoverageNV, "glTexImage2DMultisampleCoverageNV" );
    if( driver_glTexImage2DMultisampleCoverageNV == NULL ) {
      driver_glTexImage2DMultisampleCoverageNV = missing_glTexImage2DMultisampleCoverageNV;
    }
    dt.glTexImage2DMultisampleCoverageNV = MakeRegalProc(loader_glTexImage2DMultisampleCoverageNV,layer);
    _getProcAddress( driver_glTexImage3DMultisampleCoverageNV, glTexImage3DMultisampleCoverageNV, "glTexImage3DMultisampleCoverageNV" );
    if( driver_glTexImage3DMultisampleCoverageNV == NULL ) {
      driver_glTexImage3DMultisampleCoverageNV = missing_glTexImage3DMultisampleCoverageNV;
    }
    dt.glTexImage3DMultisampleCoverageNV = MakeRegalProc(loader_glTexImage3DMultisampleCoverageNV,layer);
    _getProcAddress( driver_glTextureImage2DMultisampleCoverageNV, glTextureImage2DMultisampleCoverageNV, "glTextureImage2DMultisampleCoverageNV" );
    if( driver_glTextureImage2DMultisampleCoverageNV == NULL ) {
      driver_glTextureImage2DMultisampleCoverageNV = missing_glTextureImage2DMultisampleCoverageNV;
    }
    dt.glTextureImage2DMultisampleCoverageNV = MakeRegalProc(loader_glTextureImage2DMultisampleCoverageNV,layer);
    _getProcAddress( driver_glTextureImage2DMultisampleNV, glTextureImage2DMultisampleNV, "glTextureImage2DMultisampleNV" );
    if( driver_glTextureImage2DMultisampleNV == NULL ) {
      driver_glTextureImage2DMultisampleNV = missing_glTextureImage2DMultisampleNV;
    }
    dt.glTextureImage2DMultisampleNV = MakeRegalProc(loader_glTextureImage2DMultisampleNV,layer);
    _getProcAddress( driver_glTextureImage3DMultisampleCoverageNV, glTextureImage3DMultisampleCoverageNV, "glTextureImage3DMultisampleCoverageNV" );
    if( driver_glTextureImage3DMultisampleCoverageNV == NULL ) {
      driver_glTextureImage3DMultisampleCoverageNV = missing_glTextureImage3DMultisampleCoverageNV;
    }
    dt.glTextureImage3DMultisampleCoverageNV = MakeRegalProc(loader_glTextureImage3DMultisampleCoverageNV,layer);
    _getProcAddress( driver_glTextureImage3DMultisampleNV, glTextureImage3DMultisampleNV, "glTextureImage3DMultisampleNV" );
    if( driver_glTextureImage3DMultisampleNV == NULL ) {
      driver_glTextureImage3DMultisampleNV = missing_glTextureImage3DMultisampleNV;
    }
    dt.glTextureImage3DMultisampleNV = MakeRegalProc(loader_glTextureImage3DMultisampleNV,layer);

    // GL_NV_transform_feedback

    _getProcAddress( driver_glActiveVaryingNV, glActiveVaryingNV, "glActiveVaryingNV" );
    if( driver_glActiveVaryingNV == NULL ) {
      driver_glActiveVaryingNV = missing_glActiveVaryingNV;
    }
    dt.glActiveVaryingNV = MakeRegalProc(loader_glActiveVaryingNV,layer);
    _getProcAddress( driver_glBeginTransformFeedbackNV, glBeginTransformFeedbackNV, "glBeginTransformFeedbackNV" );
    if( driver_glBeginTransformFeedbackNV == NULL ) {
      driver_glBeginTransformFeedbackNV = missing_glBeginTransformFeedbackNV;
    }
    dt.glBeginTransformFeedbackNV = MakeRegalProc(loader_glBeginTransformFeedbackNV,layer);
    _getProcAddress( driver_glBindBufferBaseNV, glBindBufferBaseNV, "glBindBufferBaseNV" );
    if( driver_glBindBufferBaseNV == NULL ) {
      driver_glBindBufferBaseNV = missing_glBindBufferBaseNV;
    }
    dt.glBindBufferBaseNV = MakeRegalProc(loader_glBindBufferBaseNV,layer);
    _getProcAddress( driver_glBindBufferOffsetNV, glBindBufferOffsetNV, "glBindBufferOffsetNV" );
    if( driver_glBindBufferOffsetNV == NULL ) {
      driver_glBindBufferOffsetNV = missing_glBindBufferOffsetNV;
    }
    dt.glBindBufferOffsetNV = MakeRegalProc(loader_glBindBufferOffsetNV,layer);
    _getProcAddress( driver_glBindBufferRangeNV, glBindBufferRangeNV, "glBindBufferRangeNV" );
    if( driver_glBindBufferRangeNV == NULL ) {
      driver_glBindBufferRangeNV = missing_glBindBufferRangeNV;
    }
    dt.glBindBufferRangeNV = MakeRegalProc(loader_glBindBufferRangeNV,layer);
    _getProcAddress( driver_glEndTransformFeedbackNV, glEndTransformFeedbackNV, "glEndTransformFeedbackNV" );
    if( driver_glEndTransformFeedbackNV == NULL ) {
      driver_glEndTransformFeedbackNV = missing_glEndTransformFeedbackNV;
    }
    dt.glEndTransformFeedbackNV = MakeRegalProc(loader_glEndTransformFeedbackNV,layer);
    _getProcAddress( driver_glGetActiveVaryingNV, glGetActiveVaryingNV, "glGetActiveVaryingNV" );
    if( driver_glGetActiveVaryingNV == NULL ) {
      driver_glGetActiveVaryingNV = missing_glGetActiveVaryingNV;
    }
    dt.glGetActiveVaryingNV = MakeRegalProc(loader_glGetActiveVaryingNV,layer);
    _getProcAddress( driver_glGetTransformFeedbackVaryingNV, glGetTransformFeedbackVaryingNV, "glGetTransformFeedbackVaryingNV" );
    if( driver_glGetTransformFeedbackVaryingNV == NULL ) {
      driver_glGetTransformFeedbackVaryingNV = missing_glGetTransformFeedbackVaryingNV;
    }
    dt.glGetTransformFeedbackVaryingNV = MakeRegalProc(loader_glGetTransformFeedbackVaryingNV,layer);
    _getProcAddress( driver_glGetVaryingLocationNV, glGetVaryingLocationNV, "glGetVaryingLocationNV" );
    if( driver_glGetVaryingLocationNV == NULL ) {
      driver_glGetVaryingLocationNV = missing_glGetVaryingLocationNV;
    }
    dt.glGetVaryingLocationNV = MakeRegalProc(loader_glGetVaryingLocationNV,layer);
    _getProcAddress( driver_glTransformFeedbackAttribsNV, glTransformFeedbackAttribsNV, "glTransformFeedbackAttribsNV" );
    if( driver_glTransformFeedbackAttribsNV == NULL ) {
      driver_glTransformFeedbackAttribsNV = missing_glTransformFeedbackAttribsNV;
    }
    dt.glTransformFeedbackAttribsNV = MakeRegalProc(loader_glTransformFeedbackAttribsNV,layer);
    _getProcAddress( driver_glTransformFeedbackVaryingsNV, glTransformFeedbackVaryingsNV, "glTransformFeedbackVaryingsNV" );
    if( driver_glTransformFeedbackVaryingsNV == NULL ) {
      driver_glTransformFeedbackVaryingsNV = missing_glTransformFeedbackVaryingsNV;
    }
    dt.glTransformFeedbackVaryingsNV = MakeRegalProc(loader_glTransformFeedbackVaryingsNV,layer);

    // GL_NV_transform_feedback2

    _getProcAddress( driver_glBindTransformFeedbackNV, glBindTransformFeedbackNV, "glBindTransformFeedbackNV" );
    if( driver_glBindTransformFeedbackNV == NULL ) {
      driver_glBindTransformFeedbackNV = missing_glBindTransformFeedbackNV;
    }
    dt.glBindTransformFeedbackNV = MakeRegalProc(loader_glBindTransformFeedbackNV,layer);
    _getProcAddress( driver_glDeleteTransformFeedbacksNV, glDeleteTransformFeedbacksNV, "glDeleteTransformFeedbacksNV" );
    if( driver_glDeleteTransformFeedbacksNV == NULL ) {
      driver_glDeleteTransformFeedbacksNV = missing_glDeleteTransformFeedbacksNV;
    }
    dt.glDeleteTransformFeedbacksNV = MakeRegalProc(loader_glDeleteTransformFeedbacksNV,layer);
    _getProcAddress( driver_glDrawTransformFeedbackNV, glDrawTransformFeedbackNV, "glDrawTransformFeedbackNV" );
    if( driver_glDrawTransformFeedbackNV == NULL ) {
      driver_glDrawTransformFeedbackNV = missing_glDrawTransformFeedbackNV;
    }
    dt.glDrawTransformFeedbackNV = MakeRegalProc(loader_glDrawTransformFeedbackNV,layer);
    _getProcAddress( driver_glGenTransformFeedbacksNV, glGenTransformFeedbacksNV, "glGenTransformFeedbacksNV" );
    if( driver_glGenTransformFeedbacksNV == NULL ) {
      driver_glGenTransformFeedbacksNV = missing_glGenTransformFeedbacksNV;
    }
    dt.glGenTransformFeedbacksNV = MakeRegalProc(loader_glGenTransformFeedbacksNV,layer);
    _getProcAddress( driver_glIsTransformFeedbackNV, glIsTransformFeedbackNV, "glIsTransformFeedbackNV" );
    if( driver_glIsTransformFeedbackNV == NULL ) {
      driver_glIsTransformFeedbackNV = missing_glIsTransformFeedbackNV;
    }
    dt.glIsTransformFeedbackNV = MakeRegalProc(loader_glIsTransformFeedbackNV,layer);
    _getProcAddress( driver_glPauseTransformFeedbackNV, glPauseTransformFeedbackNV, "glPauseTransformFeedbackNV" );
    if( driver_glPauseTransformFeedbackNV == NULL ) {
      driver_glPauseTransformFeedbackNV = missing_glPauseTransformFeedbackNV;
    }
    dt.glPauseTransformFeedbackNV = MakeRegalProc(loader_glPauseTransformFeedbackNV,layer);
    _getProcAddress( driver_glResumeTransformFeedbackNV, glResumeTransformFeedbackNV, "glResumeTransformFeedbackNV" );
    if( driver_glResumeTransformFeedbackNV == NULL ) {
      driver_glResumeTransformFeedbackNV = missing_glResumeTransformFeedbackNV;
    }
    dt.glResumeTransformFeedbackNV = MakeRegalProc(loader_glResumeTransformFeedbackNV,layer);

    // GL_NV_vdpau_interop

    _getProcAddress( driver_glVDPAUFiniNV, glVDPAUFiniNV, "glVDPAUFiniNV" );
    if( driver_glVDPAUFiniNV == NULL ) {
      driver_glVDPAUFiniNV = missing_glVDPAUFiniNV;
    }
    dt.glVDPAUFiniNV = MakeRegalProc(loader_glVDPAUFiniNV,layer);
    _getProcAddress( driver_glVDPAUGetSurfaceivNV, glVDPAUGetSurfaceivNV, "glVDPAUGetSurfaceivNV" );
    if( driver_glVDPAUGetSurfaceivNV == NULL ) {
      driver_glVDPAUGetSurfaceivNV = missing_glVDPAUGetSurfaceivNV;
    }
    dt.glVDPAUGetSurfaceivNV = MakeRegalProc(loader_glVDPAUGetSurfaceivNV,layer);
    _getProcAddress( driver_glVDPAUInitNV, glVDPAUInitNV, "glVDPAUInitNV" );
    if( driver_glVDPAUInitNV == NULL ) {
      driver_glVDPAUInitNV = missing_glVDPAUInitNV;
    }
    dt.glVDPAUInitNV = MakeRegalProc(loader_glVDPAUInitNV,layer);
    _getProcAddress( driver_glVDPAUIsSurfaceNV, glVDPAUIsSurfaceNV, "glVDPAUIsSurfaceNV" );
    if( driver_glVDPAUIsSurfaceNV == NULL ) {
      driver_glVDPAUIsSurfaceNV = missing_glVDPAUIsSurfaceNV;
    }
    dt.glVDPAUIsSurfaceNV = MakeRegalProc(loader_glVDPAUIsSurfaceNV,layer);
    _getProcAddress( driver_glVDPAUMapSurfacesNV, glVDPAUMapSurfacesNV, "glVDPAUMapSurfacesNV" );
    if( driver_glVDPAUMapSurfacesNV == NULL ) {
      driver_glVDPAUMapSurfacesNV = missing_glVDPAUMapSurfacesNV;
    }
    dt.glVDPAUMapSurfacesNV = MakeRegalProc(loader_glVDPAUMapSurfacesNV,layer);
    _getProcAddress( driver_glVDPAURegisterOutputSurfaceNV, glVDPAURegisterOutputSurfaceNV, "glVDPAURegisterOutputSurfaceNV" );
    if( driver_glVDPAURegisterOutputSurfaceNV == NULL ) {
      driver_glVDPAURegisterOutputSurfaceNV = missing_glVDPAURegisterOutputSurfaceNV;
    }
    dt.glVDPAURegisterOutputSurfaceNV = MakeRegalProc(loader_glVDPAURegisterOutputSurfaceNV,layer);
    _getProcAddress( driver_glVDPAURegisterVideoSurfaceNV, glVDPAURegisterVideoSurfaceNV, "glVDPAURegisterVideoSurfaceNV" );
    if( driver_glVDPAURegisterVideoSurfaceNV == NULL ) {
      driver_glVDPAURegisterVideoSurfaceNV = missing_glVDPAURegisterVideoSurfaceNV;
    }
    dt.glVDPAURegisterVideoSurfaceNV = MakeRegalProc(loader_glVDPAURegisterVideoSurfaceNV,layer);
    _getProcAddress( driver_glVDPAUSurfaceAccessNV, glVDPAUSurfaceAccessNV, "glVDPAUSurfaceAccessNV" );
    if( driver_glVDPAUSurfaceAccessNV == NULL ) {
      driver_glVDPAUSurfaceAccessNV = missing_glVDPAUSurfaceAccessNV;
    }
    dt.glVDPAUSurfaceAccessNV = MakeRegalProc(loader_glVDPAUSurfaceAccessNV,layer);
    _getProcAddress( driver_glVDPAUUnmapSurfacesNV, glVDPAUUnmapSurfacesNV, "glVDPAUUnmapSurfacesNV" );
    if( driver_glVDPAUUnmapSurfacesNV == NULL ) {
      driver_glVDPAUUnmapSurfacesNV = missing_glVDPAUUnmapSurfacesNV;
    }
    dt.glVDPAUUnmapSurfacesNV = MakeRegalProc(loader_glVDPAUUnmapSurfacesNV,layer);
    _getProcAddress( driver_glVDPAUUnregisterSurfaceNV, glVDPAUUnregisterSurfaceNV, "glVDPAUUnregisterSurfaceNV" );
    if( driver_glVDPAUUnregisterSurfaceNV == NULL ) {
      driver_glVDPAUUnregisterSurfaceNV = missing_glVDPAUUnregisterSurfaceNV;
    }
    dt.glVDPAUUnregisterSurfaceNV = MakeRegalProc(loader_glVDPAUUnregisterSurfaceNV,layer);

    // GL_NV_vertex_array_range

    _getProcAddress( driver_glFlushVertexArrayRangeNV, glFlushVertexArrayRangeNV, "glFlushVertexArrayRangeNV" );
    if( driver_glFlushVertexArrayRangeNV == NULL ) {
      driver_glFlushVertexArrayRangeNV = missing_glFlushVertexArrayRangeNV;
    }
    dt.glFlushVertexArrayRangeNV = MakeRegalProc(loader_glFlushVertexArrayRangeNV,layer);
    _getProcAddress( driver_glVertexArrayRangeNV, glVertexArrayRangeNV, "glVertexArrayRangeNV" );
    if( driver_glVertexArrayRangeNV == NULL ) {
      driver_glVertexArrayRangeNV = missing_glVertexArrayRangeNV;
    }
    dt.glVertexArrayRangeNV = MakeRegalProc(loader_glVertexArrayRangeNV,layer);

    // GL_NV_vertex_attrib_integer_64bit

    _getProcAddress( driver_glGetVertexAttribLi64vNV, glGetVertexAttribLi64vNV, "glGetVertexAttribLi64vNV" );
    if( driver_glGetVertexAttribLi64vNV == NULL ) {
      driver_glGetVertexAttribLi64vNV = missing_glGetVertexAttribLi64vNV;
    }
    dt.glGetVertexAttribLi64vNV = MakeRegalProc(loader_glGetVertexAttribLi64vNV,layer);
    _getProcAddress( driver_glGetVertexAttribLui64vNV, glGetVertexAttribLui64vNV, "glGetVertexAttribLui64vNV" );
    if( driver_glGetVertexAttribLui64vNV == NULL ) {
      driver_glGetVertexAttribLui64vNV = missing_glGetVertexAttribLui64vNV;
    }
    dt.glGetVertexAttribLui64vNV = MakeRegalProc(loader_glGetVertexAttribLui64vNV,layer);
    _getProcAddress( driver_glVertexAttribL1i64NV, glVertexAttribL1i64NV, "glVertexAttribL1i64NV" );
    if( driver_glVertexAttribL1i64NV == NULL ) {
      driver_glVertexAttribL1i64NV = missing_glVertexAttribL1i64NV;
    }
    dt.glVertexAttribL1i64NV = MakeRegalProc(loader_glVertexAttribL1i64NV,layer);
    _getProcAddress( driver_glVertexAttribL1i64vNV, glVertexAttribL1i64vNV, "glVertexAttribL1i64vNV" );
    if( driver_glVertexAttribL1i64vNV == NULL ) {
      driver_glVertexAttribL1i64vNV = missing_glVertexAttribL1i64vNV;
    }
    dt.glVertexAttribL1i64vNV = MakeRegalProc(loader_glVertexAttribL1i64vNV,layer);
    _getProcAddress( driver_glVertexAttribL1ui64NV, glVertexAttribL1ui64NV, "glVertexAttribL1ui64NV" );
    if( driver_glVertexAttribL1ui64NV == NULL ) {
      driver_glVertexAttribL1ui64NV = missing_glVertexAttribL1ui64NV;
    }
    dt.glVertexAttribL1ui64NV = MakeRegalProc(loader_glVertexAttribL1ui64NV,layer);
    _getProcAddress( driver_glVertexAttribL1ui64vNV, glVertexAttribL1ui64vNV, "glVertexAttribL1ui64vNV" );
    if( driver_glVertexAttribL1ui64vNV == NULL ) {
      driver_glVertexAttribL1ui64vNV = missing_glVertexAttribL1ui64vNV;
    }
    dt.glVertexAttribL1ui64vNV = MakeRegalProc(loader_glVertexAttribL1ui64vNV,layer);
    _getProcAddress( driver_glVertexAttribL2i64NV, glVertexAttribL2i64NV, "glVertexAttribL2i64NV" );
    if( driver_glVertexAttribL2i64NV == NULL ) {
      driver_glVertexAttribL2i64NV = missing_glVertexAttribL2i64NV;
    }
    dt.glVertexAttribL2i64NV = MakeRegalProc(loader_glVertexAttribL2i64NV,layer);
    _getProcAddress( driver_glVertexAttribL2i64vNV, glVertexAttribL2i64vNV, "glVertexAttribL2i64vNV" );
    if( driver_glVertexAttribL2i64vNV == NULL ) {
      driver_glVertexAttribL2i64vNV = missing_glVertexAttribL2i64vNV;
    }
    dt.glVertexAttribL2i64vNV = MakeRegalProc(loader_glVertexAttribL2i64vNV,layer);
    _getProcAddress( driver_glVertexAttribL2ui64NV, glVertexAttribL2ui64NV, "glVertexAttribL2ui64NV" );
    if( driver_glVertexAttribL2ui64NV == NULL ) {
      driver_glVertexAttribL2ui64NV = missing_glVertexAttribL2ui64NV;
    }
    dt.glVertexAttribL2ui64NV = MakeRegalProc(loader_glVertexAttribL2ui64NV,layer);
    _getProcAddress( driver_glVertexAttribL2ui64vNV, glVertexAttribL2ui64vNV, "glVertexAttribL2ui64vNV" );
    if( driver_glVertexAttribL2ui64vNV == NULL ) {
      driver_glVertexAttribL2ui64vNV = missing_glVertexAttribL2ui64vNV;
    }
    dt.glVertexAttribL2ui64vNV = MakeRegalProc(loader_glVertexAttribL2ui64vNV,layer);
    _getProcAddress( driver_glVertexAttribL3i64NV, glVertexAttribL3i64NV, "glVertexAttribL3i64NV" );
    if( driver_glVertexAttribL3i64NV == NULL ) {
      driver_glVertexAttribL3i64NV = missing_glVertexAttribL3i64NV;
    }
    dt.glVertexAttribL3i64NV = MakeRegalProc(loader_glVertexAttribL3i64NV,layer);
    _getProcAddress( driver_glVertexAttribL3i64vNV, glVertexAttribL3i64vNV, "glVertexAttribL3i64vNV" );
    if( driver_glVertexAttribL3i64vNV == NULL ) {
      driver_glVertexAttribL3i64vNV = missing_glVertexAttribL3i64vNV;
    }
    dt.glVertexAttribL3i64vNV = MakeRegalProc(loader_glVertexAttribL3i64vNV,layer);
    _getProcAddress( driver_glVertexAttribL3ui64NV, glVertexAttribL3ui64NV, "glVertexAttribL3ui64NV" );
    if( driver_glVertexAttribL3ui64NV == NULL ) {
      driver_glVertexAttribL3ui64NV = missing_glVertexAttribL3ui64NV;
    }
    dt.glVertexAttribL3ui64NV = MakeRegalProc(loader_glVertexAttribL3ui64NV,layer);
    _getProcAddress( driver_glVertexAttribL3ui64vNV, glVertexAttribL3ui64vNV, "glVertexAttribL3ui64vNV" );
    if( driver_glVertexAttribL3ui64vNV == NULL ) {
      driver_glVertexAttribL3ui64vNV = missing_glVertexAttribL3ui64vNV;
    }
    dt.glVertexAttribL3ui64vNV = MakeRegalProc(loader_glVertexAttribL3ui64vNV,layer);
    _getProcAddress( driver_glVertexAttribL4i64NV, glVertexAttribL4i64NV, "glVertexAttribL4i64NV" );
    if( driver_glVertexAttribL4i64NV == NULL ) {
      driver_glVertexAttribL4i64NV = missing_glVertexAttribL4i64NV;
    }
    dt.glVertexAttribL4i64NV = MakeRegalProc(loader_glVertexAttribL4i64NV,layer);
    _getProcAddress( driver_glVertexAttribL4i64vNV, glVertexAttribL4i64vNV, "glVertexAttribL4i64vNV" );
    if( driver_glVertexAttribL4i64vNV == NULL ) {
      driver_glVertexAttribL4i64vNV = missing_glVertexAttribL4i64vNV;
    }
    dt.glVertexAttribL4i64vNV = MakeRegalProc(loader_glVertexAttribL4i64vNV,layer);
    _getProcAddress( driver_glVertexAttribL4ui64NV, glVertexAttribL4ui64NV, "glVertexAttribL4ui64NV" );
    if( driver_glVertexAttribL4ui64NV == NULL ) {
      driver_glVertexAttribL4ui64NV = missing_glVertexAttribL4ui64NV;
    }
    dt.glVertexAttribL4ui64NV = MakeRegalProc(loader_glVertexAttribL4ui64NV,layer);
    _getProcAddress( driver_glVertexAttribL4ui64vNV, glVertexAttribL4ui64vNV, "glVertexAttribL4ui64vNV" );
    if( driver_glVertexAttribL4ui64vNV == NULL ) {
      driver_glVertexAttribL4ui64vNV = missing_glVertexAttribL4ui64vNV;
    }
    dt.glVertexAttribL4ui64vNV = MakeRegalProc(loader_glVertexAttribL4ui64vNV,layer);
    _getProcAddress( driver_glVertexAttribLFormatNV, glVertexAttribLFormatNV, "glVertexAttribLFormatNV" );
    if( driver_glVertexAttribLFormatNV == NULL ) {
      driver_glVertexAttribLFormatNV = missing_glVertexAttribLFormatNV;
    }
    dt.glVertexAttribLFormatNV = MakeRegalProc(loader_glVertexAttribLFormatNV,layer);

    // GL_NV_vertex_buffer_unified_memory

    _getProcAddress( driver_glBufferAddressRangeNV, glBufferAddressRangeNV, "glBufferAddressRangeNV" );
    if( driver_glBufferAddressRangeNV == NULL ) {
      driver_glBufferAddressRangeNV = missing_glBufferAddressRangeNV;
    }
    dt.glBufferAddressRangeNV = MakeRegalProc(loader_glBufferAddressRangeNV,layer);
    _getProcAddress( driver_glColorFormatNV, glColorFormatNV, "glColorFormatNV" );
    if( driver_glColorFormatNV == NULL ) {
      driver_glColorFormatNV = missing_glColorFormatNV;
    }
    dt.glColorFormatNV = MakeRegalProc(loader_glColorFormatNV,layer);
    _getProcAddress( driver_glEdgeFlagFormatNV, glEdgeFlagFormatNV, "glEdgeFlagFormatNV" );
    if( driver_glEdgeFlagFormatNV == NULL ) {
      driver_glEdgeFlagFormatNV = missing_glEdgeFlagFormatNV;
    }
    dt.glEdgeFlagFormatNV = MakeRegalProc(loader_glEdgeFlagFormatNV,layer);
    _getProcAddress( driver_glFogCoordFormatNV, glFogCoordFormatNV, "glFogCoordFormatNV" );
    if( driver_glFogCoordFormatNV == NULL ) {
      driver_glFogCoordFormatNV = missing_glFogCoordFormatNV;
    }
    dt.glFogCoordFormatNV = MakeRegalProc(loader_glFogCoordFormatNV,layer);
    _getProcAddress( driver_glGetIntegerui64i_vNV, glGetIntegerui64i_vNV, "glGetIntegerui64i_vNV" );
    if( driver_glGetIntegerui64i_vNV == NULL ) {
      driver_glGetIntegerui64i_vNV = missing_glGetIntegerui64i_vNV;
    }
    dt.glGetIntegerui64i_vNV = MakeRegalProc(loader_glGetIntegerui64i_vNV,layer);
    _getProcAddress( driver_glIndexFormatNV, glIndexFormatNV, "glIndexFormatNV" );
    if( driver_glIndexFormatNV == NULL ) {
      driver_glIndexFormatNV = missing_glIndexFormatNV;
    }
    dt.glIndexFormatNV = MakeRegalProc(loader_glIndexFormatNV,layer);
    _getProcAddress( driver_glNormalFormatNV, glNormalFormatNV, "glNormalFormatNV" );
    if( driver_glNormalFormatNV == NULL ) {
      driver_glNormalFormatNV = missing_glNormalFormatNV;
    }
    dt.glNormalFormatNV = MakeRegalProc(loader_glNormalFormatNV,layer);
    _getProcAddress( driver_glSecondaryColorFormatNV, glSecondaryColorFormatNV, "glSecondaryColorFormatNV" );
    if( driver_glSecondaryColorFormatNV == NULL ) {
      driver_glSecondaryColorFormatNV = missing_glSecondaryColorFormatNV;
    }
    dt.glSecondaryColorFormatNV = MakeRegalProc(loader_glSecondaryColorFormatNV,layer);
    _getProcAddress( driver_glTexCoordFormatNV, glTexCoordFormatNV, "glTexCoordFormatNV" );
    if( driver_glTexCoordFormatNV == NULL ) {
      driver_glTexCoordFormatNV = missing_glTexCoordFormatNV;
    }
    dt.glTexCoordFormatNV = MakeRegalProc(loader_glTexCoordFormatNV,layer);
    _getProcAddress( driver_glVertexAttribFormatNV, glVertexAttribFormatNV, "glVertexAttribFormatNV" );
    if( driver_glVertexAttribFormatNV == NULL ) {
      driver_glVertexAttribFormatNV = missing_glVertexAttribFormatNV;
    }
    dt.glVertexAttribFormatNV = MakeRegalProc(loader_glVertexAttribFormatNV,layer);
    _getProcAddress( driver_glVertexAttribIFormatNV, glVertexAttribIFormatNV, "glVertexAttribIFormatNV" );
    if( driver_glVertexAttribIFormatNV == NULL ) {
      driver_glVertexAttribIFormatNV = missing_glVertexAttribIFormatNV;
    }
    dt.glVertexAttribIFormatNV = MakeRegalProc(loader_glVertexAttribIFormatNV,layer);
    _getProcAddress( driver_glVertexFormatNV, glVertexFormatNV, "glVertexFormatNV" );
    if( driver_glVertexFormatNV == NULL ) {
      driver_glVertexFormatNV = missing_glVertexFormatNV;
    }
    dt.glVertexFormatNV = MakeRegalProc(loader_glVertexFormatNV,layer);

    // GL_NV_vertex_program

    _getProcAddress( driver_glAreProgramsResidentNV, glAreProgramsResidentNV, "glAreProgramsResidentNV" );
    if( driver_glAreProgramsResidentNV == NULL ) {
      driver_glAreProgramsResidentNV = missing_glAreProgramsResidentNV;
    }
    dt.glAreProgramsResidentNV = MakeRegalProc(loader_glAreProgramsResidentNV,layer);
    _getProcAddress( driver_glBindProgramNV, glBindProgramNV, "glBindProgramNV" );
    if( driver_glBindProgramNV == NULL ) {
      driver_glBindProgramNV = missing_glBindProgramNV;
    }
    dt.glBindProgramNV = MakeRegalProc(loader_glBindProgramNV,layer);
    _getProcAddress( driver_glDeleteProgramsNV, glDeleteProgramsNV, "glDeleteProgramsNV" );
    if( driver_glDeleteProgramsNV == NULL ) {
      driver_glDeleteProgramsNV = missing_glDeleteProgramsNV;
    }
    dt.glDeleteProgramsNV = MakeRegalProc(loader_glDeleteProgramsNV,layer);
    _getProcAddress( driver_glExecuteProgramNV, glExecuteProgramNV, "glExecuteProgramNV" );
    if( driver_glExecuteProgramNV == NULL ) {
      driver_glExecuteProgramNV = missing_glExecuteProgramNV;
    }
    dt.glExecuteProgramNV = MakeRegalProc(loader_glExecuteProgramNV,layer);
    _getProcAddress( driver_glGenProgramsNV, glGenProgramsNV, "glGenProgramsNV" );
    if( driver_glGenProgramsNV == NULL ) {
      driver_glGenProgramsNV = missing_glGenProgramsNV;
    }
    dt.glGenProgramsNV = MakeRegalProc(loader_glGenProgramsNV,layer);
    _getProcAddress( driver_glGetProgramParameterdvNV, glGetProgramParameterdvNV, "glGetProgramParameterdvNV" );
    if( driver_glGetProgramParameterdvNV == NULL ) {
      driver_glGetProgramParameterdvNV = missing_glGetProgramParameterdvNV;
    }
    dt.glGetProgramParameterdvNV = MakeRegalProc(loader_glGetProgramParameterdvNV,layer);
    _getProcAddress( driver_glGetProgramParameterfvNV, glGetProgramParameterfvNV, "glGetProgramParameterfvNV" );
    if( driver_glGetProgramParameterfvNV == NULL ) {
      driver_glGetProgramParameterfvNV = missing_glGetProgramParameterfvNV;
    }
    dt.glGetProgramParameterfvNV = MakeRegalProc(loader_glGetProgramParameterfvNV,layer);
    _getProcAddress( driver_glGetProgramStringNV, glGetProgramStringNV, "glGetProgramStringNV" );
    if( driver_glGetProgramStringNV == NULL ) {
      driver_glGetProgramStringNV = missing_glGetProgramStringNV;
    }
    dt.glGetProgramStringNV = MakeRegalProc(loader_glGetProgramStringNV,layer);
    _getProcAddress( driver_glGetProgramivNV, glGetProgramivNV, "glGetProgramivNV" );
    if( driver_glGetProgramivNV == NULL ) {
      driver_glGetProgramivNV = missing_glGetProgramivNV;
    }
    dt.glGetProgramivNV = MakeRegalProc(loader_glGetProgramivNV,layer);
    _getProcAddress( driver_glGetTrackMatrixivNV, glGetTrackMatrixivNV, "glGetTrackMatrixivNV" );
    if( driver_glGetTrackMatrixivNV == NULL ) {
      driver_glGetTrackMatrixivNV = missing_glGetTrackMatrixivNV;
    }
    dt.glGetTrackMatrixivNV = MakeRegalProc(loader_glGetTrackMatrixivNV,layer);
    _getProcAddress( driver_glGetVertexAttribPointervNV, glGetVertexAttribPointervNV, "glGetVertexAttribPointervNV" );
    if( driver_glGetVertexAttribPointervNV == NULL ) {
      driver_glGetVertexAttribPointervNV = missing_glGetVertexAttribPointervNV;
    }
    dt.glGetVertexAttribPointervNV = MakeRegalProc(loader_glGetVertexAttribPointervNV,layer);
    _getProcAddress( driver_glGetVertexAttribdvNV, glGetVertexAttribdvNV, "glGetVertexAttribdvNV" );
    if( driver_glGetVertexAttribdvNV == NULL ) {
      driver_glGetVertexAttribdvNV = missing_glGetVertexAttribdvNV;
    }
    dt.glGetVertexAttribdvNV = MakeRegalProc(loader_glGetVertexAttribdvNV,layer);
    _getProcAddress( driver_glGetVertexAttribfvNV, glGetVertexAttribfvNV, "glGetVertexAttribfvNV" );
    if( driver_glGetVertexAttribfvNV == NULL ) {
      driver_glGetVertexAttribfvNV = missing_glGetVertexAttribfvNV;
    }
    dt.glGetVertexAttribfvNV = MakeRegalProc(loader_glGetVertexAttribfvNV,layer);
    _getProcAddress( driver_glGetVertexAttribivNV, glGetVertexAttribivNV, "glGetVertexAttribivNV" );
    if( driver_glGetVertexAttribivNV == NULL ) {
      driver_glGetVertexAttribivNV = missing_glGetVertexAttribivNV;
    }
    dt.glGetVertexAttribivNV = MakeRegalProc(loader_glGetVertexAttribivNV,layer);
    _getProcAddress( driver_glIsProgramNV, glIsProgramNV, "glIsProgramNV" );
    if( driver_glIsProgramNV == NULL ) {
      driver_glIsProgramNV = missing_glIsProgramNV;
    }
    dt.glIsProgramNV = MakeRegalProc(loader_glIsProgramNV,layer);
    _getProcAddress( driver_glLoadProgramNV, glLoadProgramNV, "glLoadProgramNV" );
    if( driver_glLoadProgramNV == NULL ) {
      driver_glLoadProgramNV = missing_glLoadProgramNV;
    }
    dt.glLoadProgramNV = MakeRegalProc(loader_glLoadProgramNV,layer);
    _getProcAddress( driver_glProgramParameter4dNV, glProgramParameter4dNV, "glProgramParameter4dNV" );
    if( driver_glProgramParameter4dNV == NULL ) {
      driver_glProgramParameter4dNV = missing_glProgramParameter4dNV;
    }
    dt.glProgramParameter4dNV = MakeRegalProc(loader_glProgramParameter4dNV,layer);
    _getProcAddress( driver_glProgramParameter4dvNV, glProgramParameter4dvNV, "glProgramParameter4dvNV" );
    if( driver_glProgramParameter4dvNV == NULL ) {
      driver_glProgramParameter4dvNV = missing_glProgramParameter4dvNV;
    }
    dt.glProgramParameter4dvNV = MakeRegalProc(loader_glProgramParameter4dvNV,layer);
    _getProcAddress( driver_glProgramParameter4fNV, glProgramParameter4fNV, "glProgramParameter4fNV" );
    if( driver_glProgramParameter4fNV == NULL ) {
      driver_glProgramParameter4fNV = missing_glProgramParameter4fNV;
    }
    dt.glProgramParameter4fNV = MakeRegalProc(loader_glProgramParameter4fNV,layer);
    _getProcAddress( driver_glProgramParameter4fvNV, glProgramParameter4fvNV, "glProgramParameter4fvNV" );
    if( driver_glProgramParameter4fvNV == NULL ) {
      driver_glProgramParameter4fvNV = missing_glProgramParameter4fvNV;
    }
    dt.glProgramParameter4fvNV = MakeRegalProc(loader_glProgramParameter4fvNV,layer);
    _getProcAddress( driver_glProgramParameters4dvNV, glProgramParameters4dvNV, "glProgramParameters4dvNV" );
    if( driver_glProgramParameters4dvNV == NULL ) {
      driver_glProgramParameters4dvNV = missing_glProgramParameters4dvNV;
    }
    dt.glProgramParameters4dvNV = MakeRegalProc(loader_glProgramParameters4dvNV,layer);
    _getProcAddress( driver_glProgramParameters4fvNV, glProgramParameters4fvNV, "glProgramParameters4fvNV" );
    if( driver_glProgramParameters4fvNV == NULL ) {
      driver_glProgramParameters4fvNV = missing_glProgramParameters4fvNV;
    }
    dt.glProgramParameters4fvNV = MakeRegalProc(loader_glProgramParameters4fvNV,layer);
    _getProcAddress( driver_glRequestResidentProgramsNV, glRequestResidentProgramsNV, "glRequestResidentProgramsNV" );
    if( driver_glRequestResidentProgramsNV == NULL ) {
      driver_glRequestResidentProgramsNV = missing_glRequestResidentProgramsNV;
    }
    dt.glRequestResidentProgramsNV = MakeRegalProc(loader_glRequestResidentProgramsNV,layer);
    _getProcAddress( driver_glTrackMatrixNV, glTrackMatrixNV, "glTrackMatrixNV" );
    if( driver_glTrackMatrixNV == NULL ) {
      driver_glTrackMatrixNV = missing_glTrackMatrixNV;
    }
    dt.glTrackMatrixNV = MakeRegalProc(loader_glTrackMatrixNV,layer);
    _getProcAddress( driver_glVertexAttrib1dNV, glVertexAttrib1dNV, "glVertexAttrib1dNV" );
    if( driver_glVertexAttrib1dNV == NULL ) {
      driver_glVertexAttrib1dNV = missing_glVertexAttrib1dNV;
    }
    dt.glVertexAttrib1dNV = MakeRegalProc(loader_glVertexAttrib1dNV,layer);
    _getProcAddress( driver_glVertexAttrib1dvNV, glVertexAttrib1dvNV, "glVertexAttrib1dvNV" );
    if( driver_glVertexAttrib1dvNV == NULL ) {
      driver_glVertexAttrib1dvNV = missing_glVertexAttrib1dvNV;
    }
    dt.glVertexAttrib1dvNV = MakeRegalProc(loader_glVertexAttrib1dvNV,layer);
    _getProcAddress( driver_glVertexAttrib1fNV, glVertexAttrib1fNV, "glVertexAttrib1fNV" );
    if( driver_glVertexAttrib1fNV == NULL ) {
      driver_glVertexAttrib1fNV = missing_glVertexAttrib1fNV;
    }
    dt.glVertexAttrib1fNV = MakeRegalProc(loader_glVertexAttrib1fNV,layer);
    _getProcAddress( driver_glVertexAttrib1fvNV, glVertexAttrib1fvNV, "glVertexAttrib1fvNV" );
    if( driver_glVertexAttrib1fvNV == NULL ) {
      driver_glVertexAttrib1fvNV = missing_glVertexAttrib1fvNV;
    }
    dt.glVertexAttrib1fvNV = MakeRegalProc(loader_glVertexAttrib1fvNV,layer);
    _getProcAddress( driver_glVertexAttrib1sNV, glVertexAttrib1sNV, "glVertexAttrib1sNV" );
    if( driver_glVertexAttrib1sNV == NULL ) {
      driver_glVertexAttrib1sNV = missing_glVertexAttrib1sNV;
    }
    dt.glVertexAttrib1sNV = MakeRegalProc(loader_glVertexAttrib1sNV,layer);
    _getProcAddress( driver_glVertexAttrib1svNV, glVertexAttrib1svNV, "glVertexAttrib1svNV" );
    if( driver_glVertexAttrib1svNV == NULL ) {
      driver_glVertexAttrib1svNV = missing_glVertexAttrib1svNV;
    }
    dt.glVertexAttrib1svNV = MakeRegalProc(loader_glVertexAttrib1svNV,layer);
    _getProcAddress( driver_glVertexAttrib2dNV, glVertexAttrib2dNV, "glVertexAttrib2dNV" );
    if( driver_glVertexAttrib2dNV == NULL ) {
      driver_glVertexAttrib2dNV = missing_glVertexAttrib2dNV;
    }
    dt.glVertexAttrib2dNV = MakeRegalProc(loader_glVertexAttrib2dNV,layer);
    _getProcAddress( driver_glVertexAttrib2dvNV, glVertexAttrib2dvNV, "glVertexAttrib2dvNV" );
    if( driver_glVertexAttrib2dvNV == NULL ) {
      driver_glVertexAttrib2dvNV = missing_glVertexAttrib2dvNV;
    }
    dt.glVertexAttrib2dvNV = MakeRegalProc(loader_glVertexAttrib2dvNV,layer);
    _getProcAddress( driver_glVertexAttrib2fNV, glVertexAttrib2fNV, "glVertexAttrib2fNV" );
    if( driver_glVertexAttrib2fNV == NULL ) {
      driver_glVertexAttrib2fNV = missing_glVertexAttrib2fNV;
    }
    dt.glVertexAttrib2fNV = MakeRegalProc(loader_glVertexAttrib2fNV,layer);
    _getProcAddress( driver_glVertexAttrib2fvNV, glVertexAttrib2fvNV, "glVertexAttrib2fvNV" );
    if( driver_glVertexAttrib2fvNV == NULL ) {
      driver_glVertexAttrib2fvNV = missing_glVertexAttrib2fvNV;
    }
    dt.glVertexAttrib2fvNV = MakeRegalProc(loader_glVertexAttrib2fvNV,layer);
    _getProcAddress( driver_glVertexAttrib2sNV, glVertexAttrib2sNV, "glVertexAttrib2sNV" );
    if( driver_glVertexAttrib2sNV == NULL ) {
      driver_glVertexAttrib2sNV = missing_glVertexAttrib2sNV;
    }
    dt.glVertexAttrib2sNV = MakeRegalProc(loader_glVertexAttrib2sNV,layer);
    _getProcAddress( driver_glVertexAttrib2svNV, glVertexAttrib2svNV, "glVertexAttrib2svNV" );
    if( driver_glVertexAttrib2svNV == NULL ) {
      driver_glVertexAttrib2svNV = missing_glVertexAttrib2svNV;
    }
    dt.glVertexAttrib2svNV = MakeRegalProc(loader_glVertexAttrib2svNV,layer);
    _getProcAddress( driver_glVertexAttrib3dNV, glVertexAttrib3dNV, "glVertexAttrib3dNV" );
    if( driver_glVertexAttrib3dNV == NULL ) {
      driver_glVertexAttrib3dNV = missing_glVertexAttrib3dNV;
    }
    dt.glVertexAttrib3dNV = MakeRegalProc(loader_glVertexAttrib3dNV,layer);
    _getProcAddress( driver_glVertexAttrib3dvNV, glVertexAttrib3dvNV, "glVertexAttrib3dvNV" );
    if( driver_glVertexAttrib3dvNV == NULL ) {
      driver_glVertexAttrib3dvNV = missing_glVertexAttrib3dvNV;
    }
    dt.glVertexAttrib3dvNV = MakeRegalProc(loader_glVertexAttrib3dvNV,layer);
    _getProcAddress( driver_glVertexAttrib3fNV, glVertexAttrib3fNV, "glVertexAttrib3fNV" );
    if( driver_glVertexAttrib3fNV == NULL ) {
      driver_glVertexAttrib3fNV = missing_glVertexAttrib3fNV;
    }
    dt.glVertexAttrib3fNV = MakeRegalProc(loader_glVertexAttrib3fNV,layer);
    _getProcAddress( driver_glVertexAttrib3fvNV, glVertexAttrib3fvNV, "glVertexAttrib3fvNV" );
    if( driver_glVertexAttrib3fvNV == NULL ) {
      driver_glVertexAttrib3fvNV = missing_glVertexAttrib3fvNV;
    }
    dt.glVertexAttrib3fvNV = MakeRegalProc(loader_glVertexAttrib3fvNV,layer);
    _getProcAddress( driver_glVertexAttrib3sNV, glVertexAttrib3sNV, "glVertexAttrib3sNV" );
    if( driver_glVertexAttrib3sNV == NULL ) {
      driver_glVertexAttrib3sNV = missing_glVertexAttrib3sNV;
    }
    dt.glVertexAttrib3sNV = MakeRegalProc(loader_glVertexAttrib3sNV,layer);
    _getProcAddress( driver_glVertexAttrib3svNV, glVertexAttrib3svNV, "glVertexAttrib3svNV" );
    if( driver_glVertexAttrib3svNV == NULL ) {
      driver_glVertexAttrib3svNV = missing_glVertexAttrib3svNV;
    }
    dt.glVertexAttrib3svNV = MakeRegalProc(loader_glVertexAttrib3svNV,layer);
    _getProcAddress( driver_glVertexAttrib4dNV, glVertexAttrib4dNV, "glVertexAttrib4dNV" );
    if( driver_glVertexAttrib4dNV == NULL ) {
      driver_glVertexAttrib4dNV = missing_glVertexAttrib4dNV;
    }
    dt.glVertexAttrib4dNV = MakeRegalProc(loader_glVertexAttrib4dNV,layer);
    _getProcAddress( driver_glVertexAttrib4dvNV, glVertexAttrib4dvNV, "glVertexAttrib4dvNV" );
    if( driver_glVertexAttrib4dvNV == NULL ) {
      driver_glVertexAttrib4dvNV = missing_glVertexAttrib4dvNV;
    }
    dt.glVertexAttrib4dvNV = MakeRegalProc(loader_glVertexAttrib4dvNV,layer);
    _getProcAddress( driver_glVertexAttrib4fNV, glVertexAttrib4fNV, "glVertexAttrib4fNV" );
    if( driver_glVertexAttrib4fNV == NULL ) {
      driver_glVertexAttrib4fNV = missing_glVertexAttrib4fNV;
    }
    dt.glVertexAttrib4fNV = MakeRegalProc(loader_glVertexAttrib4fNV,layer);
    _getProcAddress( driver_glVertexAttrib4fvNV, glVertexAttrib4fvNV, "glVertexAttrib4fvNV" );
    if( driver_glVertexAttrib4fvNV == NULL ) {
      driver_glVertexAttrib4fvNV = missing_glVertexAttrib4fvNV;
    }
    dt.glVertexAttrib4fvNV = MakeRegalProc(loader_glVertexAttrib4fvNV,layer);
    _getProcAddress( driver_glVertexAttrib4sNV, glVertexAttrib4sNV, "glVertexAttrib4sNV" );
    if( driver_glVertexAttrib4sNV == NULL ) {
      driver_glVertexAttrib4sNV = missing_glVertexAttrib4sNV;
    }
    dt.glVertexAttrib4sNV = MakeRegalProc(loader_glVertexAttrib4sNV,layer);
    _getProcAddress( driver_glVertexAttrib4svNV, glVertexAttrib4svNV, "glVertexAttrib4svNV" );
    if( driver_glVertexAttrib4svNV == NULL ) {
      driver_glVertexAttrib4svNV = missing_glVertexAttrib4svNV;
    }
    dt.glVertexAttrib4svNV = MakeRegalProc(loader_glVertexAttrib4svNV,layer);
    _getProcAddress( driver_glVertexAttrib4ubNV, glVertexAttrib4ubNV, "glVertexAttrib4ubNV" );
    if( driver_glVertexAttrib4ubNV == NULL ) {
      driver_glVertexAttrib4ubNV = missing_glVertexAttrib4ubNV;
    }
    dt.glVertexAttrib4ubNV = MakeRegalProc(loader_glVertexAttrib4ubNV,layer);
    _getProcAddress( driver_glVertexAttrib4ubvNV, glVertexAttrib4ubvNV, "glVertexAttrib4ubvNV" );
    if( driver_glVertexAttrib4ubvNV == NULL ) {
      driver_glVertexAttrib4ubvNV = missing_glVertexAttrib4ubvNV;
    }
    dt.glVertexAttrib4ubvNV = MakeRegalProc(loader_glVertexAttrib4ubvNV,layer);
    _getProcAddress( driver_glVertexAttribPointerNV, glVertexAttribPointerNV, "glVertexAttribPointerNV" );
    if( driver_glVertexAttribPointerNV == NULL ) {
      driver_glVertexAttribPointerNV = missing_glVertexAttribPointerNV;
    }
    dt.glVertexAttribPointerNV = MakeRegalProc(loader_glVertexAttribPointerNV,layer);
    _getProcAddress( driver_glVertexAttribs1dvNV, glVertexAttribs1dvNV, "glVertexAttribs1dvNV" );
    if( driver_glVertexAttribs1dvNV == NULL ) {
      driver_glVertexAttribs1dvNV = missing_glVertexAttribs1dvNV;
    }
    dt.glVertexAttribs1dvNV = MakeRegalProc(loader_glVertexAttribs1dvNV,layer);
    _getProcAddress( driver_glVertexAttribs1fvNV, glVertexAttribs1fvNV, "glVertexAttribs1fvNV" );
    if( driver_glVertexAttribs1fvNV == NULL ) {
      driver_glVertexAttribs1fvNV = missing_glVertexAttribs1fvNV;
    }
    dt.glVertexAttribs1fvNV = MakeRegalProc(loader_glVertexAttribs1fvNV,layer);
    _getProcAddress( driver_glVertexAttribs1svNV, glVertexAttribs1svNV, "glVertexAttribs1svNV" );
    if( driver_glVertexAttribs1svNV == NULL ) {
      driver_glVertexAttribs1svNV = missing_glVertexAttribs1svNV;
    }
    dt.glVertexAttribs1svNV = MakeRegalProc(loader_glVertexAttribs1svNV,layer);
    _getProcAddress( driver_glVertexAttribs2dvNV, glVertexAttribs2dvNV, "glVertexAttribs2dvNV" );
    if( driver_glVertexAttribs2dvNV == NULL ) {
      driver_glVertexAttribs2dvNV = missing_glVertexAttribs2dvNV;
    }
    dt.glVertexAttribs2dvNV = MakeRegalProc(loader_glVertexAttribs2dvNV,layer);
    _getProcAddress( driver_glVertexAttribs2fvNV, glVertexAttribs2fvNV, "glVertexAttribs2fvNV" );
    if( driver_glVertexAttribs2fvNV == NULL ) {
      driver_glVertexAttribs2fvNV = missing_glVertexAttribs2fvNV;
    }
    dt.glVertexAttribs2fvNV = MakeRegalProc(loader_glVertexAttribs2fvNV,layer);
    _getProcAddress( driver_glVertexAttribs2svNV, glVertexAttribs2svNV, "glVertexAttribs2svNV" );
    if( driver_glVertexAttribs2svNV == NULL ) {
      driver_glVertexAttribs2svNV = missing_glVertexAttribs2svNV;
    }
    dt.glVertexAttribs2svNV = MakeRegalProc(loader_glVertexAttribs2svNV,layer);
    _getProcAddress( driver_glVertexAttribs3dvNV, glVertexAttribs3dvNV, "glVertexAttribs3dvNV" );
    if( driver_glVertexAttribs3dvNV == NULL ) {
      driver_glVertexAttribs3dvNV = missing_glVertexAttribs3dvNV;
    }
    dt.glVertexAttribs3dvNV = MakeRegalProc(loader_glVertexAttribs3dvNV,layer);
    _getProcAddress( driver_glVertexAttribs3fvNV, glVertexAttribs3fvNV, "glVertexAttribs3fvNV" );
    if( driver_glVertexAttribs3fvNV == NULL ) {
      driver_glVertexAttribs3fvNV = missing_glVertexAttribs3fvNV;
    }
    dt.glVertexAttribs3fvNV = MakeRegalProc(loader_glVertexAttribs3fvNV,layer);
    _getProcAddress( driver_glVertexAttribs3svNV, glVertexAttribs3svNV, "glVertexAttribs3svNV" );
    if( driver_glVertexAttribs3svNV == NULL ) {
      driver_glVertexAttribs3svNV = missing_glVertexAttribs3svNV;
    }
    dt.glVertexAttribs3svNV = MakeRegalProc(loader_glVertexAttribs3svNV,layer);
    _getProcAddress( driver_glVertexAttribs4dvNV, glVertexAttribs4dvNV, "glVertexAttribs4dvNV" );
    if( driver_glVertexAttribs4dvNV == NULL ) {
      driver_glVertexAttribs4dvNV = missing_glVertexAttribs4dvNV;
    }
    dt.glVertexAttribs4dvNV = MakeRegalProc(loader_glVertexAttribs4dvNV,layer);
    _getProcAddress( driver_glVertexAttribs4fvNV, glVertexAttribs4fvNV, "glVertexAttribs4fvNV" );
    if( driver_glVertexAttribs4fvNV == NULL ) {
      driver_glVertexAttribs4fvNV = missing_glVertexAttribs4fvNV;
    }
    dt.glVertexAttribs4fvNV = MakeRegalProc(loader_glVertexAttribs4fvNV,layer);
    _getProcAddress( driver_glVertexAttribs4svNV, glVertexAttribs4svNV, "glVertexAttribs4svNV" );
    if( driver_glVertexAttribs4svNV == NULL ) {
      driver_glVertexAttribs4svNV = missing_glVertexAttribs4svNV;
    }
    dt.glVertexAttribs4svNV = MakeRegalProc(loader_glVertexAttribs4svNV,layer);
    _getProcAddress( driver_glVertexAttribs4ubvNV, glVertexAttribs4ubvNV, "glVertexAttribs4ubvNV" );
    if( driver_glVertexAttribs4ubvNV == NULL ) {
      driver_glVertexAttribs4ubvNV = missing_glVertexAttribs4ubvNV;
    }
    dt.glVertexAttribs4ubvNV = MakeRegalProc(loader_glVertexAttribs4ubvNV,layer);

    // GL_NV_video_capture

    _getProcAddress( driver_glBeginVideoCaptureNV, glBeginVideoCaptureNV, "glBeginVideoCaptureNV" );
    if( driver_glBeginVideoCaptureNV == NULL ) {
      driver_glBeginVideoCaptureNV = missing_glBeginVideoCaptureNV;
    }
    dt.glBeginVideoCaptureNV = MakeRegalProc(loader_glBeginVideoCaptureNV,layer);
    _getProcAddress( driver_glBindVideoCaptureStreamBufferNV, glBindVideoCaptureStreamBufferNV, "glBindVideoCaptureStreamBufferNV" );
    if( driver_glBindVideoCaptureStreamBufferNV == NULL ) {
      driver_glBindVideoCaptureStreamBufferNV = missing_glBindVideoCaptureStreamBufferNV;
    }
    dt.glBindVideoCaptureStreamBufferNV = MakeRegalProc(loader_glBindVideoCaptureStreamBufferNV,layer);
    _getProcAddress( driver_glBindVideoCaptureStreamTextureNV, glBindVideoCaptureStreamTextureNV, "glBindVideoCaptureStreamTextureNV" );
    if( driver_glBindVideoCaptureStreamTextureNV == NULL ) {
      driver_glBindVideoCaptureStreamTextureNV = missing_glBindVideoCaptureStreamTextureNV;
    }
    dt.glBindVideoCaptureStreamTextureNV = MakeRegalProc(loader_glBindVideoCaptureStreamTextureNV,layer);
    _getProcAddress( driver_glEndVideoCaptureNV, glEndVideoCaptureNV, "glEndVideoCaptureNV" );
    if( driver_glEndVideoCaptureNV == NULL ) {
      driver_glEndVideoCaptureNV = missing_glEndVideoCaptureNV;
    }
    dt.glEndVideoCaptureNV = MakeRegalProc(loader_glEndVideoCaptureNV,layer);
    _getProcAddress( driver_glGetVideoCaptureStreamdvNV, glGetVideoCaptureStreamdvNV, "glGetVideoCaptureStreamdvNV" );
    if( driver_glGetVideoCaptureStreamdvNV == NULL ) {
      driver_glGetVideoCaptureStreamdvNV = missing_glGetVideoCaptureStreamdvNV;
    }
    dt.glGetVideoCaptureStreamdvNV = MakeRegalProc(loader_glGetVideoCaptureStreamdvNV,layer);
    _getProcAddress( driver_glGetVideoCaptureStreamfvNV, glGetVideoCaptureStreamfvNV, "glGetVideoCaptureStreamfvNV" );
    if( driver_glGetVideoCaptureStreamfvNV == NULL ) {
      driver_glGetVideoCaptureStreamfvNV = missing_glGetVideoCaptureStreamfvNV;
    }
    dt.glGetVideoCaptureStreamfvNV = MakeRegalProc(loader_glGetVideoCaptureStreamfvNV,layer);
    _getProcAddress( driver_glGetVideoCaptureStreamivNV, glGetVideoCaptureStreamivNV, "glGetVideoCaptureStreamivNV" );
    if( driver_glGetVideoCaptureStreamivNV == NULL ) {
      driver_glGetVideoCaptureStreamivNV = missing_glGetVideoCaptureStreamivNV;
    }
    dt.glGetVideoCaptureStreamivNV = MakeRegalProc(loader_glGetVideoCaptureStreamivNV,layer);
    _getProcAddress( driver_glGetVideoCaptureivNV, glGetVideoCaptureivNV, "glGetVideoCaptureivNV" );
    if( driver_glGetVideoCaptureivNV == NULL ) {
      driver_glGetVideoCaptureivNV = missing_glGetVideoCaptureivNV;
    }
    dt.glGetVideoCaptureivNV = MakeRegalProc(loader_glGetVideoCaptureivNV,layer);
    _getProcAddress( driver_glVideoCaptureNV, glVideoCaptureNV, "glVideoCaptureNV" );
    if( driver_glVideoCaptureNV == NULL ) {
      driver_glVideoCaptureNV = missing_glVideoCaptureNV;
    }
    dt.glVideoCaptureNV = MakeRegalProc(loader_glVideoCaptureNV,layer);
    _getProcAddress( driver_glVideoCaptureStreamParameterdvNV, glVideoCaptureStreamParameterdvNV, "glVideoCaptureStreamParameterdvNV" );
    if( driver_glVideoCaptureStreamParameterdvNV == NULL ) {
      driver_glVideoCaptureStreamParameterdvNV = missing_glVideoCaptureStreamParameterdvNV;
    }
    dt.glVideoCaptureStreamParameterdvNV = MakeRegalProc(loader_glVideoCaptureStreamParameterdvNV,layer);
    _getProcAddress( driver_glVideoCaptureStreamParameterfvNV, glVideoCaptureStreamParameterfvNV, "glVideoCaptureStreamParameterfvNV" );
    if( driver_glVideoCaptureStreamParameterfvNV == NULL ) {
      driver_glVideoCaptureStreamParameterfvNV = missing_glVideoCaptureStreamParameterfvNV;
    }
    dt.glVideoCaptureStreamParameterfvNV = MakeRegalProc(loader_glVideoCaptureStreamParameterfvNV,layer);
    _getProcAddress( driver_glVideoCaptureStreamParameterivNV, glVideoCaptureStreamParameterivNV, "glVideoCaptureStreamParameterivNV" );
    if( driver_glVideoCaptureStreamParameterivNV == NULL ) {
      driver_glVideoCaptureStreamParameterivNV = missing_glVideoCaptureStreamParameterivNV;
    }
    dt.glVideoCaptureStreamParameterivNV = MakeRegalProc(loader_glVideoCaptureStreamParameterivNV,layer);

    // GL_OES_blend_equation_separate

    _getProcAddress( driver_glBlendEquationSeparateOES, glBlendEquationSeparateOES, "glBlendEquationSeparateOES" );
    if( driver_glBlendEquationSeparateOES == NULL ) {
      driver_glBlendEquationSeparateOES = missing_glBlendEquationSeparateOES;
    }
    dt.glBlendEquationSeparateOES = MakeRegalProc(loader_glBlendEquationSeparateOES,layer);

    // GL_OES_blend_func_separate

    _getProcAddress( driver_glBlendFuncSeparateOES, glBlendFuncSeparateOES, "glBlendFuncSeparateOES" );
    if( driver_glBlendFuncSeparateOES == NULL ) {
      driver_glBlendFuncSeparateOES = missing_glBlendFuncSeparateOES;
    }
    dt.glBlendFuncSeparateOES = MakeRegalProc(loader_glBlendFuncSeparateOES,layer);

    // GL_OES_blend_subtract

    _getProcAddress( driver_glBlendEquationOES, glBlendEquationOES, "glBlendEquationOES" );
    if( driver_glBlendEquationOES == NULL ) {
      driver_glBlendEquationOES = missing_glBlendEquationOES;
    }
    dt.glBlendEquationOES = MakeRegalProc(loader_glBlendEquationOES,layer);

    // GL_OES_framebuffer_object

    _getProcAddress( driver_glBindFramebufferOES, glBindFramebufferOES, "glBindFramebufferOES" );
    if( driver_glBindFramebufferOES == NULL ) {
      driver_glBindFramebufferOES = missing_glBindFramebufferOES;
    }
    dt.glBindFramebufferOES = MakeRegalProc(loader_glBindFramebufferOES,layer);
    _getProcAddress( driver_glBindRenderbufferOES, glBindRenderbufferOES, "glBindRenderbufferOES" );
    if( driver_glBindRenderbufferOES == NULL ) {
      driver_glBindRenderbufferOES = missing_glBindRenderbufferOES;
    }
    dt.glBindRenderbufferOES = MakeRegalProc(loader_glBindRenderbufferOES,layer);
    _getProcAddress( driver_glCheckFramebufferStatusOES, glCheckFramebufferStatusOES, "glCheckFramebufferStatusOES" );
    if( driver_glCheckFramebufferStatusOES == NULL ) {
      driver_glCheckFramebufferStatusOES = missing_glCheckFramebufferStatusOES;
    }
    dt.glCheckFramebufferStatusOES = MakeRegalProc(loader_glCheckFramebufferStatusOES,layer);
    _getProcAddress( driver_glDeleteFramebuffersOES, glDeleteFramebuffersOES, "glDeleteFramebuffersOES" );
    if( driver_glDeleteFramebuffersOES == NULL ) {
      driver_glDeleteFramebuffersOES = missing_glDeleteFramebuffersOES;
    }
    dt.glDeleteFramebuffersOES = MakeRegalProc(loader_glDeleteFramebuffersOES,layer);
    _getProcAddress( driver_glDeleteRenderbuffersOES, glDeleteRenderbuffersOES, "glDeleteRenderbuffersOES" );
    if( driver_glDeleteRenderbuffersOES == NULL ) {
      driver_glDeleteRenderbuffersOES = missing_glDeleteRenderbuffersOES;
    }
    dt.glDeleteRenderbuffersOES = MakeRegalProc(loader_glDeleteRenderbuffersOES,layer);
    _getProcAddress( driver_glFramebufferRenderbufferOES, glFramebufferRenderbufferOES, "glFramebufferRenderbufferOES" );
    if( driver_glFramebufferRenderbufferOES == NULL ) {
      driver_glFramebufferRenderbufferOES = missing_glFramebufferRenderbufferOES;
    }
    dt.glFramebufferRenderbufferOES = MakeRegalProc(loader_glFramebufferRenderbufferOES,layer);
    _getProcAddress( driver_glFramebufferTexture2DOES, glFramebufferTexture2DOES, "glFramebufferTexture2DOES" );
    if( driver_glFramebufferTexture2DOES == NULL ) {
      driver_glFramebufferTexture2DOES = missing_glFramebufferTexture2DOES;
    }
    dt.glFramebufferTexture2DOES = MakeRegalProc(loader_glFramebufferTexture2DOES,layer);
    _getProcAddress( driver_glGenFramebuffersOES, glGenFramebuffersOES, "glGenFramebuffersOES" );
    if( driver_glGenFramebuffersOES == NULL ) {
      driver_glGenFramebuffersOES = missing_glGenFramebuffersOES;
    }
    dt.glGenFramebuffersOES = MakeRegalProc(loader_glGenFramebuffersOES,layer);
    _getProcAddress( driver_glGenRenderbuffersOES, glGenRenderbuffersOES, "glGenRenderbuffersOES" );
    if( driver_glGenRenderbuffersOES == NULL ) {
      driver_glGenRenderbuffersOES = missing_glGenRenderbuffersOES;
    }
    dt.glGenRenderbuffersOES = MakeRegalProc(loader_glGenRenderbuffersOES,layer);
    _getProcAddress( driver_glGenerateMipmapOES, glGenerateMipmapOES, "glGenerateMipmapOES" );
    if( driver_glGenerateMipmapOES == NULL ) {
      driver_glGenerateMipmapOES = missing_glGenerateMipmapOES;
    }
    dt.glGenerateMipmapOES = MakeRegalProc(loader_glGenerateMipmapOES,layer);
    _getProcAddress( driver_glGetFramebufferAttachmentParameterivOES, glGetFramebufferAttachmentParameterivOES, "glGetFramebufferAttachmentParameterivOES" );
    if( driver_glGetFramebufferAttachmentParameterivOES == NULL ) {
      driver_glGetFramebufferAttachmentParameterivOES = missing_glGetFramebufferAttachmentParameterivOES;
    }
    dt.glGetFramebufferAttachmentParameterivOES = MakeRegalProc(loader_glGetFramebufferAttachmentParameterivOES,layer);
    _getProcAddress( driver_glGetRenderbufferParameterivOES, glGetRenderbufferParameterivOES, "glGetRenderbufferParameterivOES" );
    if( driver_glGetRenderbufferParameterivOES == NULL ) {
      driver_glGetRenderbufferParameterivOES = missing_glGetRenderbufferParameterivOES;
    }
    dt.glGetRenderbufferParameterivOES = MakeRegalProc(loader_glGetRenderbufferParameterivOES,layer);
    _getProcAddress( driver_glIsFramebufferOES, glIsFramebufferOES, "glIsFramebufferOES" );
    if( driver_glIsFramebufferOES == NULL ) {
      driver_glIsFramebufferOES = missing_glIsFramebufferOES;
    }
    dt.glIsFramebufferOES = MakeRegalProc(loader_glIsFramebufferOES,layer);
    _getProcAddress( driver_glIsRenderbufferOES, glIsRenderbufferOES, "glIsRenderbufferOES" );
    if( driver_glIsRenderbufferOES == NULL ) {
      driver_glIsRenderbufferOES = missing_glIsRenderbufferOES;
    }
    dt.glIsRenderbufferOES = MakeRegalProc(loader_glIsRenderbufferOES,layer);
    _getProcAddress( driver_glRenderbufferStorageOES, glRenderbufferStorageOES, "glRenderbufferStorageOES" );
    if( driver_glRenderbufferStorageOES == NULL ) {
      driver_glRenderbufferStorageOES = missing_glRenderbufferStorageOES;
    }
    dt.glRenderbufferStorageOES = MakeRegalProc(loader_glRenderbufferStorageOES,layer);

    // GL_OES_get_program_binary

    _getProcAddress( driver_glGetProgramBinaryOES, glGetProgramBinaryOES, "glGetProgramBinaryOES" );
    if( driver_glGetProgramBinaryOES == NULL ) {
      driver_glGetProgramBinaryOES = missing_glGetProgramBinaryOES;
    }
    dt.glGetProgramBinaryOES = MakeRegalProc(loader_glGetProgramBinaryOES,layer);
    _getProcAddress( driver_glProgramBinaryOES, glProgramBinaryOES, "glProgramBinaryOES" );
    if( driver_glProgramBinaryOES == NULL ) {
      driver_glProgramBinaryOES = missing_glProgramBinaryOES;
    }
    dt.glProgramBinaryOES = MakeRegalProc(loader_glProgramBinaryOES,layer);

    // GL_OES_mapbuffer

    _getProcAddress( driver_glGetBufferPointervOES, glGetBufferPointervOES, "glGetBufferPointervOES" );
    if( driver_glGetBufferPointervOES == NULL ) {
      driver_glGetBufferPointervOES = missing_glGetBufferPointervOES;
    }
    dt.glGetBufferPointervOES = MakeRegalProc(loader_glGetBufferPointervOES,layer);
    _getProcAddress( driver_glMapBufferOES, glMapBufferOES, "glMapBufferOES" );
    if( driver_glMapBufferOES == NULL ) {
      driver_glMapBufferOES = missing_glMapBufferOES;
    }
    dt.glMapBufferOES = MakeRegalProc(loader_glMapBufferOES,layer);
    _getProcAddress( driver_glUnmapBufferOES, glUnmapBufferOES, "glUnmapBufferOES" );
    if( driver_glUnmapBufferOES == NULL ) {
      driver_glUnmapBufferOES = missing_glUnmapBufferOES;
    }
    dt.glUnmapBufferOES = MakeRegalProc(loader_glUnmapBufferOES,layer);

    // GL_OES_matrix_palette

    _getProcAddress( driver_glCurrentPaletteMatrixOES, glCurrentPaletteMatrixOES, "glCurrentPaletteMatrixOES" );
    if( driver_glCurrentPaletteMatrixOES == NULL ) {
      driver_glCurrentPaletteMatrixOES = missing_glCurrentPaletteMatrixOES;
    }
    dt.glCurrentPaletteMatrixOES = MakeRegalProc(loader_glCurrentPaletteMatrixOES,layer);
    _getProcAddress( driver_glMatrixIndexPointerOES, glMatrixIndexPointerOES, "glMatrixIndexPointerOES" );
    if( driver_glMatrixIndexPointerOES == NULL ) {
      driver_glMatrixIndexPointerOES = missing_glMatrixIndexPointerOES;
    }
    dt.glMatrixIndexPointerOES = MakeRegalProc(loader_glMatrixIndexPointerOES,layer);
    _getProcAddress( driver_glWeightPointerOES, glWeightPointerOES, "glWeightPointerOES" );
    if( driver_glWeightPointerOES == NULL ) {
      driver_glWeightPointerOES = missing_glWeightPointerOES;
    }
    dt.glWeightPointerOES = MakeRegalProc(loader_glWeightPointerOES,layer);

    // GL_OES_single_precision

    _getProcAddress( driver_glClearDepthfOES, glClearDepthfOES, "glClearDepthfOES" );
    if( driver_glClearDepthfOES == NULL ) {
      driver_glClearDepthfOES = missing_glClearDepthfOES;
    }
    dt.glClearDepthfOES = MakeRegalProc(loader_glClearDepthfOES,layer);
    _getProcAddress( driver_glClipPlanefOES, glClipPlanefOES, "glClipPlanefOES" );
    if( driver_glClipPlanefOES == NULL ) {
      driver_glClipPlanefOES = missing_glClipPlanefOES;
    }
    dt.glClipPlanefOES = MakeRegalProc(loader_glClipPlanefOES,layer);
    _getProcAddress( driver_glDepthRangefOES, glDepthRangefOES, "glDepthRangefOES" );
    if( driver_glDepthRangefOES == NULL ) {
      driver_glDepthRangefOES = missing_glDepthRangefOES;
    }
    dt.glDepthRangefOES = MakeRegalProc(loader_glDepthRangefOES,layer);
    _getProcAddress( driver_glFrustumfOES, glFrustumfOES, "glFrustumfOES" );
    if( driver_glFrustumfOES == NULL ) {
      driver_glFrustumfOES = missing_glFrustumfOES;
    }
    dt.glFrustumfOES = MakeRegalProc(loader_glFrustumfOES,layer);
    _getProcAddress( driver_glGetClipPlanefOES, glGetClipPlanefOES, "glGetClipPlanefOES" );
    if( driver_glGetClipPlanefOES == NULL ) {
      driver_glGetClipPlanefOES = missing_glGetClipPlanefOES;
    }
    dt.glGetClipPlanefOES = MakeRegalProc(loader_glGetClipPlanefOES,layer);
    _getProcAddress( driver_glOrthofOES, glOrthofOES, "glOrthofOES" );
    if( driver_glOrthofOES == NULL ) {
      driver_glOrthofOES = missing_glOrthofOES;
    }
    dt.glOrthofOES = MakeRegalProc(loader_glOrthofOES,layer);

    // GL_OES_texture_3D

    _getProcAddress( driver_glCompressedTexImage3DOES, glCompressedTexImage3DOES, "glCompressedTexImage3DOES" );
    if( driver_glCompressedTexImage3DOES == NULL ) {
      driver_glCompressedTexImage3DOES = missing_glCompressedTexImage3DOES;
    }
    dt.glCompressedTexImage3DOES = MakeRegalProc(loader_glCompressedTexImage3DOES,layer);
    _getProcAddress( driver_glCompressedTexSubImage3DOES, glCompressedTexSubImage3DOES, "glCompressedTexSubImage3DOES" );
    if( driver_glCompressedTexSubImage3DOES == NULL ) {
      driver_glCompressedTexSubImage3DOES = missing_glCompressedTexSubImage3DOES;
    }
    dt.glCompressedTexSubImage3DOES = MakeRegalProc(loader_glCompressedTexSubImage3DOES,layer);
    _getProcAddress( driver_glCopyTexSubImage3DOES, glCopyTexSubImage3DOES, "glCopyTexSubImage3DOES" );
    if( driver_glCopyTexSubImage3DOES == NULL ) {
      driver_glCopyTexSubImage3DOES = missing_glCopyTexSubImage3DOES;
    }
    dt.glCopyTexSubImage3DOES = MakeRegalProc(loader_glCopyTexSubImage3DOES,layer);
    _getProcAddress( driver_glFramebufferTexture3DOES, glFramebufferTexture3DOES, "glFramebufferTexture3DOES" );
    if( driver_glFramebufferTexture3DOES == NULL ) {
      driver_glFramebufferTexture3DOES = missing_glFramebufferTexture3DOES;
    }
    dt.glFramebufferTexture3DOES = MakeRegalProc(loader_glFramebufferTexture3DOES,layer);
    _getProcAddress( driver_glTexImage3DOES, glTexImage3DOES, "glTexImage3DOES" );
    if( driver_glTexImage3DOES == NULL ) {
      driver_glTexImage3DOES = missing_glTexImage3DOES;
    }
    dt.glTexImage3DOES = MakeRegalProc(loader_glTexImage3DOES,layer);
    _getProcAddress( driver_glTexSubImage3DOES, glTexSubImage3DOES, "glTexSubImage3DOES" );
    if( driver_glTexSubImage3DOES == NULL ) {
      driver_glTexSubImage3DOES = missing_glTexSubImage3DOES;
    }
    dt.glTexSubImage3DOES = MakeRegalProc(loader_glTexSubImage3DOES,layer);

    // GL_OES_texture_cube_map

    _getProcAddress( driver_glGetTexGenfvOES, glGetTexGenfvOES, "glGetTexGenfvOES" );
    if( driver_glGetTexGenfvOES == NULL ) {
      driver_glGetTexGenfvOES = missing_glGetTexGenfvOES;
    }
    dt.glGetTexGenfvOES = MakeRegalProc(loader_glGetTexGenfvOES,layer);
    _getProcAddress( driver_glGetTexGenivOES, glGetTexGenivOES, "glGetTexGenivOES" );
    if( driver_glGetTexGenivOES == NULL ) {
      driver_glGetTexGenivOES = missing_glGetTexGenivOES;
    }
    dt.glGetTexGenivOES = MakeRegalProc(loader_glGetTexGenivOES,layer);
    _getProcAddress( driver_glGetTexGenxvOES, glGetTexGenxvOES, "glGetTexGenxvOES" );
    if( driver_glGetTexGenxvOES == NULL ) {
      driver_glGetTexGenxvOES = missing_glGetTexGenxvOES;
    }
    dt.glGetTexGenxvOES = MakeRegalProc(loader_glGetTexGenxvOES,layer);
    _getProcAddress( driver_glTexGenfOES, glTexGenfOES, "glTexGenfOES" );
    if( driver_glTexGenfOES == NULL ) {
      driver_glTexGenfOES = missing_glTexGenfOES;
    }
    dt.glTexGenfOES = MakeRegalProc(loader_glTexGenfOES,layer);
    _getProcAddress( driver_glTexGenfvOES, glTexGenfvOES, "glTexGenfvOES" );
    if( driver_glTexGenfvOES == NULL ) {
      driver_glTexGenfvOES = missing_glTexGenfvOES;
    }
    dt.glTexGenfvOES = MakeRegalProc(loader_glTexGenfvOES,layer);
    _getProcAddress( driver_glTexGeniOES, glTexGeniOES, "glTexGeniOES" );
    if( driver_glTexGeniOES == NULL ) {
      driver_glTexGeniOES = missing_glTexGeniOES;
    }
    dt.glTexGeniOES = MakeRegalProc(loader_glTexGeniOES,layer);
    _getProcAddress( driver_glTexGenivOES, glTexGenivOES, "glTexGenivOES" );
    if( driver_glTexGenivOES == NULL ) {
      driver_glTexGenivOES = missing_glTexGenivOES;
    }
    dt.glTexGenivOES = MakeRegalProc(loader_glTexGenivOES,layer);
    _getProcAddress( driver_glTexGenxOES, glTexGenxOES, "glTexGenxOES" );
    if( driver_glTexGenxOES == NULL ) {
      driver_glTexGenxOES = missing_glTexGenxOES;
    }
    dt.glTexGenxOES = MakeRegalProc(loader_glTexGenxOES,layer);
    _getProcAddress( driver_glTexGenxvOES, glTexGenxvOES, "glTexGenxvOES" );
    if( driver_glTexGenxvOES == NULL ) {
      driver_glTexGenxvOES = missing_glTexGenxvOES;
    }
    dt.glTexGenxvOES = MakeRegalProc(loader_glTexGenxvOES,layer);

    // GL_OES_vertex_array_object

    _getProcAddress( driver_glBindVertexArrayOES, glBindVertexArrayOES, "glBindVertexArrayOES" );
    if( driver_glBindVertexArrayOES == NULL ) {
      driver_glBindVertexArrayOES = missing_glBindVertexArrayOES;
    }
    dt.glBindVertexArrayOES = MakeRegalProc(loader_glBindVertexArrayOES,layer);
    _getProcAddress( driver_glDeleteVertexArraysOES, glDeleteVertexArraysOES, "glDeleteVertexArraysOES" );
    if( driver_glDeleteVertexArraysOES == NULL ) {
      driver_glDeleteVertexArraysOES = missing_glDeleteVertexArraysOES;
    }
    dt.glDeleteVertexArraysOES = MakeRegalProc(loader_glDeleteVertexArraysOES,layer);
    _getProcAddress( driver_glGenVertexArraysOES, glGenVertexArraysOES, "glGenVertexArraysOES" );
    if( driver_glGenVertexArraysOES == NULL ) {
      driver_glGenVertexArraysOES = missing_glGenVertexArraysOES;
    }
    dt.glGenVertexArraysOES = MakeRegalProc(loader_glGenVertexArraysOES,layer);
    _getProcAddress( driver_glIsVertexArrayOES, glIsVertexArrayOES, "glIsVertexArrayOES" );
    if( driver_glIsVertexArrayOES == NULL ) {
      driver_glIsVertexArrayOES = missing_glIsVertexArrayOES;
    }
    dt.glIsVertexArrayOES = MakeRegalProc(loader_glIsVertexArrayOES,layer);

    // GL_PGI_misc_hints

    _getProcAddress( driver_glHintPGI, glHintPGI, "glHintPGI" );
    if( driver_glHintPGI == NULL ) {
      driver_glHintPGI = missing_glHintPGI;
    }
    dt.glHintPGI = MakeRegalProc(loader_glHintPGI,layer);

    // GL_QCOM_alpha_test

    _getProcAddress( driver_glAlphaFuncQCOM, glAlphaFuncQCOM, "glAlphaFuncQCOM" );
    if( driver_glAlphaFuncQCOM == NULL ) {
      driver_glAlphaFuncQCOM = missing_glAlphaFuncQCOM;
    }
    dt.glAlphaFuncQCOM = MakeRegalProc(loader_glAlphaFuncQCOM,layer);

    // GL_QCOM_driver_control

    _getProcAddress( driver_glDisableDriverControlQCOM, glDisableDriverControlQCOM, "glDisableDriverControlQCOM" );
    if( driver_glDisableDriverControlQCOM == NULL ) {
      driver_glDisableDriverControlQCOM = missing_glDisableDriverControlQCOM;
    }
    dt.glDisableDriverControlQCOM = MakeRegalProc(loader_glDisableDriverControlQCOM,layer);
    _getProcAddress( driver_glEnableDriverControlQCOM, glEnableDriverControlQCOM, "glEnableDriverControlQCOM" );
    if( driver_glEnableDriverControlQCOM == NULL ) {
      driver_glEnableDriverControlQCOM = missing_glEnableDriverControlQCOM;
    }
    dt.glEnableDriverControlQCOM = MakeRegalProc(loader_glEnableDriverControlQCOM,layer);
    _getProcAddress( driver_glGetDriverControlStringQCOM, glGetDriverControlStringQCOM, "glGetDriverControlStringQCOM" );
    if( driver_glGetDriverControlStringQCOM == NULL ) {
      driver_glGetDriverControlStringQCOM = missing_glGetDriverControlStringQCOM;
    }
    dt.glGetDriverControlStringQCOM = MakeRegalProc(loader_glGetDriverControlStringQCOM,layer);
    _getProcAddress( driver_glGetDriverControlsQCOM, glGetDriverControlsQCOM, "glGetDriverControlsQCOM" );
    if( driver_glGetDriverControlsQCOM == NULL ) {
      driver_glGetDriverControlsQCOM = missing_glGetDriverControlsQCOM;
    }
    dt.glGetDriverControlsQCOM = MakeRegalProc(loader_glGetDriverControlsQCOM,layer);

    // GL_QCOM_extended_get

    _getProcAddress( driver_glExtGetBufferPointervQCOM, glExtGetBufferPointervQCOM, "glExtGetBufferPointervQCOM" );
    if( driver_glExtGetBufferPointervQCOM == NULL ) {
      driver_glExtGetBufferPointervQCOM = missing_glExtGetBufferPointervQCOM;
    }
    dt.glExtGetBufferPointervQCOM = MakeRegalProc(loader_glExtGetBufferPointervQCOM,layer);
    _getProcAddress( driver_glExtGetBuffersQCOM, glExtGetBuffersQCOM, "glExtGetBuffersQCOM" );
    if( driver_glExtGetBuffersQCOM == NULL ) {
      driver_glExtGetBuffersQCOM = missing_glExtGetBuffersQCOM;
    }
    dt.glExtGetBuffersQCOM = MakeRegalProc(loader_glExtGetBuffersQCOM,layer);
    _getProcAddress( driver_glExtGetFramebuffersQCOM, glExtGetFramebuffersQCOM, "glExtGetFramebuffersQCOM" );
    if( driver_glExtGetFramebuffersQCOM == NULL ) {
      driver_glExtGetFramebuffersQCOM = missing_glExtGetFramebuffersQCOM;
    }
    dt.glExtGetFramebuffersQCOM = MakeRegalProc(loader_glExtGetFramebuffersQCOM,layer);
    _getProcAddress( driver_glExtGetRenderbuffersQCOM, glExtGetRenderbuffersQCOM, "glExtGetRenderbuffersQCOM" );
    if( driver_glExtGetRenderbuffersQCOM == NULL ) {
      driver_glExtGetRenderbuffersQCOM = missing_glExtGetRenderbuffersQCOM;
    }
    dt.glExtGetRenderbuffersQCOM = MakeRegalProc(loader_glExtGetRenderbuffersQCOM,layer);
    _getProcAddress( driver_glExtGetTexLevelParameterivQCOM, glExtGetTexLevelParameterivQCOM, "glExtGetTexLevelParameterivQCOM" );
    if( driver_glExtGetTexLevelParameterivQCOM == NULL ) {
      driver_glExtGetTexLevelParameterivQCOM = missing_glExtGetTexLevelParameterivQCOM;
    }
    dt.glExtGetTexLevelParameterivQCOM = MakeRegalProc(loader_glExtGetTexLevelParameterivQCOM,layer);
    _getProcAddress( driver_glExtGetTexSubImageQCOM, glExtGetTexSubImageQCOM, "glExtGetTexSubImageQCOM" );
    if( driver_glExtGetTexSubImageQCOM == NULL ) {
      driver_glExtGetTexSubImageQCOM = missing_glExtGetTexSubImageQCOM;
    }
    dt.glExtGetTexSubImageQCOM = MakeRegalProc(loader_glExtGetTexSubImageQCOM,layer);
    _getProcAddress( driver_glExtGetTexturesQCOM, glExtGetTexturesQCOM, "glExtGetTexturesQCOM" );
    if( driver_glExtGetTexturesQCOM == NULL ) {
      driver_glExtGetTexturesQCOM = missing_glExtGetTexturesQCOM;
    }
    dt.glExtGetTexturesQCOM = MakeRegalProc(loader_glExtGetTexturesQCOM,layer);
    _getProcAddress( driver_glExtTexObjectStateOverrideiQCOM, glExtTexObjectStateOverrideiQCOM, "glExtTexObjectStateOverrideiQCOM" );
    if( driver_glExtTexObjectStateOverrideiQCOM == NULL ) {
      driver_glExtTexObjectStateOverrideiQCOM = missing_glExtTexObjectStateOverrideiQCOM;
    }
    dt.glExtTexObjectStateOverrideiQCOM = MakeRegalProc(loader_glExtTexObjectStateOverrideiQCOM,layer);

    // GL_QCOM_extended_get2

    _getProcAddress( driver_glExtGetProgramBinarySourceQCOM, glExtGetProgramBinarySourceQCOM, "glExtGetProgramBinarySourceQCOM" );
    if( driver_glExtGetProgramBinarySourceQCOM == NULL ) {
      driver_glExtGetProgramBinarySourceQCOM = missing_glExtGetProgramBinarySourceQCOM;
    }
    dt.glExtGetProgramBinarySourceQCOM = MakeRegalProc(loader_glExtGetProgramBinarySourceQCOM,layer);
    _getProcAddress( driver_glExtGetProgramsQCOM, glExtGetProgramsQCOM, "glExtGetProgramsQCOM" );
    if( driver_glExtGetProgramsQCOM == NULL ) {
      driver_glExtGetProgramsQCOM = missing_glExtGetProgramsQCOM;
    }
    dt.glExtGetProgramsQCOM = MakeRegalProc(loader_glExtGetProgramsQCOM,layer);
    _getProcAddress( driver_glExtGetShadersQCOM, glExtGetShadersQCOM, "glExtGetShadersQCOM" );
    if( driver_glExtGetShadersQCOM == NULL ) {
      driver_glExtGetShadersQCOM = missing_glExtGetShadersQCOM;
    }
    dt.glExtGetShadersQCOM = MakeRegalProc(loader_glExtGetShadersQCOM,layer);
    _getProcAddress( driver_glExtIsProgramBinaryQCOM, glExtIsProgramBinaryQCOM, "glExtIsProgramBinaryQCOM" );
    if( driver_glExtIsProgramBinaryQCOM == NULL ) {
      driver_glExtIsProgramBinaryQCOM = missing_glExtIsProgramBinaryQCOM;
    }
    dt.glExtIsProgramBinaryQCOM = MakeRegalProc(loader_glExtIsProgramBinaryQCOM,layer);

    // GL_QCOM_tiled_rendering

    _getProcAddress( driver_glEndTilingQCOM, glEndTilingQCOM, "glEndTilingQCOM" );
    if( driver_glEndTilingQCOM == NULL ) {
      driver_glEndTilingQCOM = missing_glEndTilingQCOM;
    }
    dt.glEndTilingQCOM = MakeRegalProc(loader_glEndTilingQCOM,layer);
    _getProcAddress( driver_glStartTilingQCOM, glStartTilingQCOM, "glStartTilingQCOM" );
    if( driver_glStartTilingQCOM == NULL ) {
      driver_glStartTilingQCOM = missing_glStartTilingQCOM;
    }
    dt.glStartTilingQCOM = MakeRegalProc(loader_glStartTilingQCOM,layer);

    // GL_REGAL_ES1_0_compatibility

    _getProcAddress( driver_glAlphaFuncx, glAlphaFuncx, "glAlphaFuncx" );
    if( driver_glAlphaFuncx == NULL ) {
      driver_glAlphaFuncx = missing_glAlphaFuncx;
    }
    dt.glAlphaFuncx = MakeRegalProc(loader_glAlphaFuncx,layer);
    _getProcAddress( driver_glClearColorx, glClearColorx, "glClearColorx" );
    if( driver_glClearColorx == NULL ) {
      driver_glClearColorx = missing_glClearColorx;
    }
    dt.glClearColorx = MakeRegalProc(loader_glClearColorx,layer);
    _getProcAddress( driver_glClearDepthx, glClearDepthx, "glClearDepthx" );
    if( driver_glClearDepthx == NULL ) {
      driver_glClearDepthx = missing_glClearDepthx;
    }
    dt.glClearDepthx = MakeRegalProc(loader_glClearDepthx,layer);
    _getProcAddress( driver_glColor4x, glColor4x, "glColor4x" );
    if( driver_glColor4x == NULL ) {
      driver_glColor4x = missing_glColor4x;
    }
    dt.glColor4x = MakeRegalProc(loader_glColor4x,layer);
    _getProcAddress( driver_glDepthRangex, glDepthRangex, "glDepthRangex" );
    if( driver_glDepthRangex == NULL ) {
      driver_glDepthRangex = missing_glDepthRangex;
    }
    dt.glDepthRangex = MakeRegalProc(loader_glDepthRangex,layer);
    _getProcAddress( driver_glFogx, glFogx, "glFogx" );
    if( driver_glFogx == NULL ) {
      driver_glFogx = missing_glFogx;
    }
    dt.glFogx = MakeRegalProc(loader_glFogx,layer);
    _getProcAddress( driver_glFogxv, glFogxv, "glFogxv" );
    if( driver_glFogxv == NULL ) {
      driver_glFogxv = missing_glFogxv;
    }
    dt.glFogxv = MakeRegalProc(loader_glFogxv,layer);
    _getProcAddress( driver_glFrustumf, glFrustumf, "glFrustumf" );
    if( driver_glFrustumf == NULL ) {
      driver_glFrustumf = missing_glFrustumf;
    }
    dt.glFrustumf = MakeRegalProc(loader_glFrustumf,layer);
    _getProcAddress( driver_glFrustumx, glFrustumx, "glFrustumx" );
    if( driver_glFrustumx == NULL ) {
      driver_glFrustumx = missing_glFrustumx;
    }
    dt.glFrustumx = MakeRegalProc(loader_glFrustumx,layer);
    _getProcAddress( driver_glLightModelx, glLightModelx, "glLightModelx" );
    if( driver_glLightModelx == NULL ) {
      driver_glLightModelx = missing_glLightModelx;
    }
    dt.glLightModelx = MakeRegalProc(loader_glLightModelx,layer);
    _getProcAddress( driver_glLightModelxv, glLightModelxv, "glLightModelxv" );
    if( driver_glLightModelxv == NULL ) {
      driver_glLightModelxv = missing_glLightModelxv;
    }
    dt.glLightModelxv = MakeRegalProc(loader_glLightModelxv,layer);
    _getProcAddress( driver_glLightx, glLightx, "glLightx" );
    if( driver_glLightx == NULL ) {
      driver_glLightx = missing_glLightx;
    }
    dt.glLightx = MakeRegalProc(loader_glLightx,layer);
    _getProcAddress( driver_glLightxv, glLightxv, "glLightxv" );
    if( driver_glLightxv == NULL ) {
      driver_glLightxv = missing_glLightxv;
    }
    dt.glLightxv = MakeRegalProc(loader_glLightxv,layer);
    _getProcAddress( driver_glLineWidthx, glLineWidthx, "glLineWidthx" );
    if( driver_glLineWidthx == NULL ) {
      driver_glLineWidthx = missing_glLineWidthx;
    }
    dt.glLineWidthx = MakeRegalProc(loader_glLineWidthx,layer);
    _getProcAddress( driver_glLoadMatrixx, glLoadMatrixx, "glLoadMatrixx" );
    if( driver_glLoadMatrixx == NULL ) {
      driver_glLoadMatrixx = missing_glLoadMatrixx;
    }
    dt.glLoadMatrixx = MakeRegalProc(loader_glLoadMatrixx,layer);
    _getProcAddress( driver_glMaterialx, glMaterialx, "glMaterialx" );
    if( driver_glMaterialx == NULL ) {
      driver_glMaterialx = missing_glMaterialx;
    }
    dt.glMaterialx = MakeRegalProc(loader_glMaterialx,layer);
    _getProcAddress( driver_glMaterialxv, glMaterialxv, "glMaterialxv" );
    if( driver_glMaterialxv == NULL ) {
      driver_glMaterialxv = missing_glMaterialxv;
    }
    dt.glMaterialxv = MakeRegalProc(loader_glMaterialxv,layer);
    _getProcAddress( driver_glMultMatrixx, glMultMatrixx, "glMultMatrixx" );
    if( driver_glMultMatrixx == NULL ) {
      driver_glMultMatrixx = missing_glMultMatrixx;
    }
    dt.glMultMatrixx = MakeRegalProc(loader_glMultMatrixx,layer);
    _getProcAddress( driver_glMultiTexCoord4x, glMultiTexCoord4x, "glMultiTexCoord4x" );
    if( driver_glMultiTexCoord4x == NULL ) {
      driver_glMultiTexCoord4x = missing_glMultiTexCoord4x;
    }
    dt.glMultiTexCoord4x = MakeRegalProc(loader_glMultiTexCoord4x,layer);
    _getProcAddress( driver_glNormal3x, glNormal3x, "glNormal3x" );
    if( driver_glNormal3x == NULL ) {
      driver_glNormal3x = missing_glNormal3x;
    }
    dt.glNormal3x = MakeRegalProc(loader_glNormal3x,layer);
    _getProcAddress( driver_glOrthof, glOrthof, "glOrthof" );
    if( driver_glOrthof == NULL ) {
      driver_glOrthof = missing_glOrthof;
    }
    dt.glOrthof = MakeRegalProc(loader_glOrthof,layer);
    _getProcAddress( driver_glOrthox, glOrthox, "glOrthox" );
    if( driver_glOrthox == NULL ) {
      driver_glOrthox = missing_glOrthox;
    }
    dt.glOrthox = MakeRegalProc(loader_glOrthox,layer);
    _getProcAddress( driver_glPointSizex, glPointSizex, "glPointSizex" );
    if( driver_glPointSizex == NULL ) {
      driver_glPointSizex = missing_glPointSizex;
    }
    dt.glPointSizex = MakeRegalProc(loader_glPointSizex,layer);
    _getProcAddress( driver_glPolygonOffsetx, glPolygonOffsetx, "glPolygonOffsetx" );
    if( driver_glPolygonOffsetx == NULL ) {
      driver_glPolygonOffsetx = missing_glPolygonOffsetx;
    }
    dt.glPolygonOffsetx = MakeRegalProc(loader_glPolygonOffsetx,layer);
    _getProcAddress( driver_glRotatex, glRotatex, "glRotatex" );
    if( driver_glRotatex == NULL ) {
      driver_glRotatex = missing_glRotatex;
    }
    dt.glRotatex = MakeRegalProc(loader_glRotatex,layer);
    _getProcAddress( driver_glSampleCoveragex, glSampleCoveragex, "glSampleCoveragex" );
    if( driver_glSampleCoveragex == NULL ) {
      driver_glSampleCoveragex = missing_glSampleCoveragex;
    }
    dt.glSampleCoveragex = MakeRegalProc(loader_glSampleCoveragex,layer);
    _getProcAddress( driver_glScalex, glScalex, "glScalex" );
    if( driver_glScalex == NULL ) {
      driver_glScalex = missing_glScalex;
    }
    dt.glScalex = MakeRegalProc(loader_glScalex,layer);
    _getProcAddress( driver_glTexEnvx, glTexEnvx, "glTexEnvx" );
    if( driver_glTexEnvx == NULL ) {
      driver_glTexEnvx = missing_glTexEnvx;
    }
    dt.glTexEnvx = MakeRegalProc(loader_glTexEnvx,layer);
    _getProcAddress( driver_glTexEnvxv, glTexEnvxv, "glTexEnvxv" );
    if( driver_glTexEnvxv == NULL ) {
      driver_glTexEnvxv = missing_glTexEnvxv;
    }
    dt.glTexEnvxv = MakeRegalProc(loader_glTexEnvxv,layer);
    _getProcAddress( driver_glTexParameterx, glTexParameterx, "glTexParameterx" );
    if( driver_glTexParameterx == NULL ) {
      driver_glTexParameterx = missing_glTexParameterx;
    }
    dt.glTexParameterx = MakeRegalProc(loader_glTexParameterx,layer);
    _getProcAddress( driver_glTranslatex, glTranslatex, "glTranslatex" );
    if( driver_glTranslatex == NULL ) {
      driver_glTranslatex = missing_glTranslatex;
    }
    dt.glTranslatex = MakeRegalProc(loader_glTranslatex,layer);

    // GL_REGAL_ES1_1_compatibility

    _getProcAddress( driver_glClipPlanef, glClipPlanef, "glClipPlanef" );
    if( driver_glClipPlanef == NULL ) {
      driver_glClipPlanef = missing_glClipPlanef;
    }
    dt.glClipPlanef = MakeRegalProc(loader_glClipPlanef,layer);
    _getProcAddress( driver_glClipPlanex, glClipPlanex, "glClipPlanex" );
    if( driver_glClipPlanex == NULL ) {
      driver_glClipPlanex = missing_glClipPlanex;
    }
    dt.glClipPlanex = MakeRegalProc(loader_glClipPlanex,layer);
    _getProcAddress( driver_glGetClipPlanef, glGetClipPlanef, "glGetClipPlanef" );
    if( driver_glGetClipPlanef == NULL ) {
      driver_glGetClipPlanef = missing_glGetClipPlanef;
    }
    dt.glGetClipPlanef = MakeRegalProc(loader_glGetClipPlanef,layer);
    _getProcAddress( driver_glGetClipPlanex, glGetClipPlanex, "glGetClipPlanex" );
    if( driver_glGetClipPlanex == NULL ) {
      driver_glGetClipPlanex = missing_glGetClipPlanex;
    }
    dt.glGetClipPlanex = MakeRegalProc(loader_glGetClipPlanex,layer);
    _getProcAddress( driver_glGetFixedv, glGetFixedv, "glGetFixedv" );
    if( driver_glGetFixedv == NULL ) {
      driver_glGetFixedv = missing_glGetFixedv;
    }
    dt.glGetFixedv = MakeRegalProc(loader_glGetFixedv,layer);
    _getProcAddress( driver_glGetLightxv, glGetLightxv, "glGetLightxv" );
    if( driver_glGetLightxv == NULL ) {
      driver_glGetLightxv = missing_glGetLightxv;
    }
    dt.glGetLightxv = MakeRegalProc(loader_glGetLightxv,layer);
    _getProcAddress( driver_glGetMaterialxv, glGetMaterialxv, "glGetMaterialxv" );
    if( driver_glGetMaterialxv == NULL ) {
      driver_glGetMaterialxv = missing_glGetMaterialxv;
    }
    dt.glGetMaterialxv = MakeRegalProc(loader_glGetMaterialxv,layer);
    _getProcAddress( driver_glGetTexEnvxv, glGetTexEnvxv, "glGetTexEnvxv" );
    if( driver_glGetTexEnvxv == NULL ) {
      driver_glGetTexEnvxv = missing_glGetTexEnvxv;
    }
    dt.glGetTexEnvxv = MakeRegalProc(loader_glGetTexEnvxv,layer);
    _getProcAddress( driver_glGetTexParameterxv, glGetTexParameterxv, "glGetTexParameterxv" );
    if( driver_glGetTexParameterxv == NULL ) {
      driver_glGetTexParameterxv = missing_glGetTexParameterxv;
    }
    dt.glGetTexParameterxv = MakeRegalProc(loader_glGetTexParameterxv,layer);
    _getProcAddress( driver_glPointParameterx, glPointParameterx, "glPointParameterx" );
    if( driver_glPointParameterx == NULL ) {
      driver_glPointParameterx = missing_glPointParameterx;
    }
    dt.glPointParameterx = MakeRegalProc(loader_glPointParameterx,layer);
    _getProcAddress( driver_glPointParameterxv, glPointParameterxv, "glPointParameterxv" );
    if( driver_glPointParameterxv == NULL ) {
      driver_glPointParameterxv = missing_glPointParameterxv;
    }
    dt.glPointParameterxv = MakeRegalProc(loader_glPointParameterxv,layer);
    _getProcAddress( driver_glPointSizePointerOES, glPointSizePointerOES, "glPointSizePointerOES" );
    if( driver_glPointSizePointerOES == NULL ) {
      driver_glPointSizePointerOES = missing_glPointSizePointerOES;
    }
    dt.glPointSizePointerOES = MakeRegalProc(loader_glPointSizePointerOES,layer);
    _getProcAddress( driver_glTexParameterxv, glTexParameterxv, "glTexParameterxv" );
    if( driver_glTexParameterxv == NULL ) {
      driver_glTexParameterxv = missing_glTexParameterxv;
    }
    dt.glTexParameterxv = MakeRegalProc(loader_glTexParameterxv,layer);

    // GL_REGAL_log

    _getProcAddress( driver_glLogMessageCallbackREGAL, glLogMessageCallbackREGAL, "glLogMessageCallbackREGAL" );
    if( driver_glLogMessageCallbackREGAL == NULL ) {
      driver_glLogMessageCallbackREGAL = missing_glLogMessageCallbackREGAL;
    }
    dt.glLogMessageCallbackREGAL = MakeRegalProc(loader_glLogMessageCallbackREGAL,layer);

    // GL_SGIS_detail_texture

    _getProcAddress( driver_glDetailTexFuncSGIS, glDetailTexFuncSGIS, "glDetailTexFuncSGIS" );
    if( driver_glDetailTexFuncSGIS == NULL ) {
      driver_glDetailTexFuncSGIS = missing_glDetailTexFuncSGIS;
    }
    dt.glDetailTexFuncSGIS = MakeRegalProc(loader_glDetailTexFuncSGIS,layer);
    _getProcAddress( driver_glGetDetailTexFuncSGIS, glGetDetailTexFuncSGIS, "glGetDetailTexFuncSGIS" );
    if( driver_glGetDetailTexFuncSGIS == NULL ) {
      driver_glGetDetailTexFuncSGIS = missing_glGetDetailTexFuncSGIS;
    }
    dt.glGetDetailTexFuncSGIS = MakeRegalProc(loader_glGetDetailTexFuncSGIS,layer);

    // GL_SGIS_fog_function

    _getProcAddress( driver_glFogFuncSGIS, glFogFuncSGIS, "glFogFuncSGIS" );
    if( driver_glFogFuncSGIS == NULL ) {
      driver_glFogFuncSGIS = missing_glFogFuncSGIS;
    }
    dt.glFogFuncSGIS = MakeRegalProc(loader_glFogFuncSGIS,layer);
    _getProcAddress( driver_glGetFogFuncSGIS, glGetFogFuncSGIS, "glGetFogFuncSGIS" );
    if( driver_glGetFogFuncSGIS == NULL ) {
      driver_glGetFogFuncSGIS = missing_glGetFogFuncSGIS;
    }
    dt.glGetFogFuncSGIS = MakeRegalProc(loader_glGetFogFuncSGIS,layer);

    // GL_SGIS_multisample

    _getProcAddress( driver_glSampleMaskSGIS, glSampleMaskSGIS, "glSampleMaskSGIS" );
    if( driver_glSampleMaskSGIS == NULL ) {
      driver_glSampleMaskSGIS = missing_glSampleMaskSGIS;
    }
    dt.glSampleMaskSGIS = MakeRegalProc(loader_glSampleMaskSGIS,layer);
    _getProcAddress( driver_glSamplePatternSGIS, glSamplePatternSGIS, "glSamplePatternSGIS" );
    if( driver_glSamplePatternSGIS == NULL ) {
      driver_glSamplePatternSGIS = missing_glSamplePatternSGIS;
    }
    dt.glSamplePatternSGIS = MakeRegalProc(loader_glSamplePatternSGIS,layer);

    // GL_SGIS_pixel_texture

    _getProcAddress( driver_glGetPixelTexGenParameterfvSGIS, glGetPixelTexGenParameterfvSGIS, "glGetPixelTexGenParameterfvSGIS" );
    if( driver_glGetPixelTexGenParameterfvSGIS == NULL ) {
      driver_glGetPixelTexGenParameterfvSGIS = missing_glGetPixelTexGenParameterfvSGIS;
    }
    dt.glGetPixelTexGenParameterfvSGIS = MakeRegalProc(loader_glGetPixelTexGenParameterfvSGIS,layer);
    _getProcAddress( driver_glGetPixelTexGenParameterivSGIS, glGetPixelTexGenParameterivSGIS, "glGetPixelTexGenParameterivSGIS" );
    if( driver_glGetPixelTexGenParameterivSGIS == NULL ) {
      driver_glGetPixelTexGenParameterivSGIS = missing_glGetPixelTexGenParameterivSGIS;
    }
    dt.glGetPixelTexGenParameterivSGIS = MakeRegalProc(loader_glGetPixelTexGenParameterivSGIS,layer);
    _getProcAddress( driver_glPixelTexGenParameterfSGIS, glPixelTexGenParameterfSGIS, "glPixelTexGenParameterfSGIS" );
    if( driver_glPixelTexGenParameterfSGIS == NULL ) {
      driver_glPixelTexGenParameterfSGIS = missing_glPixelTexGenParameterfSGIS;
    }
    dt.glPixelTexGenParameterfSGIS = MakeRegalProc(loader_glPixelTexGenParameterfSGIS,layer);
    _getProcAddress( driver_glPixelTexGenParameterfvSGIS, glPixelTexGenParameterfvSGIS, "glPixelTexGenParameterfvSGIS" );
    if( driver_glPixelTexGenParameterfvSGIS == NULL ) {
      driver_glPixelTexGenParameterfvSGIS = missing_glPixelTexGenParameterfvSGIS;
    }
    dt.glPixelTexGenParameterfvSGIS = MakeRegalProc(loader_glPixelTexGenParameterfvSGIS,layer);
    _getProcAddress( driver_glPixelTexGenParameteriSGIS, glPixelTexGenParameteriSGIS, "glPixelTexGenParameteriSGIS" );
    if( driver_glPixelTexGenParameteriSGIS == NULL ) {
      driver_glPixelTexGenParameteriSGIS = missing_glPixelTexGenParameteriSGIS;
    }
    dt.glPixelTexGenParameteriSGIS = MakeRegalProc(loader_glPixelTexGenParameteriSGIS,layer);
    _getProcAddress( driver_glPixelTexGenParameterivSGIS, glPixelTexGenParameterivSGIS, "glPixelTexGenParameterivSGIS" );
    if( driver_glPixelTexGenParameterivSGIS == NULL ) {
      driver_glPixelTexGenParameterivSGIS = missing_glPixelTexGenParameterivSGIS;
    }
    dt.glPixelTexGenParameterivSGIS = MakeRegalProc(loader_glPixelTexGenParameterivSGIS,layer);

    // GL_SGIS_point_parameters

    _getProcAddress( driver_glPointParameterfSGIS, glPointParameterfSGIS, "glPointParameterfSGIS" );
    if( driver_glPointParameterfSGIS == NULL ) {
      driver_glPointParameterfSGIS = missing_glPointParameterfSGIS;
    }
    dt.glPointParameterfSGIS = MakeRegalProc(loader_glPointParameterfSGIS,layer);
    _getProcAddress( driver_glPointParameterfvSGIS, glPointParameterfvSGIS, "glPointParameterfvSGIS" );
    if( driver_glPointParameterfvSGIS == NULL ) {
      driver_glPointParameterfvSGIS = missing_glPointParameterfvSGIS;
    }
    dt.glPointParameterfvSGIS = MakeRegalProc(loader_glPointParameterfvSGIS,layer);

    // GL_SGIS_sharpen_texture

    _getProcAddress( driver_glGetSharpenTexFuncSGIS, glGetSharpenTexFuncSGIS, "glGetSharpenTexFuncSGIS" );
    if( driver_glGetSharpenTexFuncSGIS == NULL ) {
      driver_glGetSharpenTexFuncSGIS = missing_glGetSharpenTexFuncSGIS;
    }
    dt.glGetSharpenTexFuncSGIS = MakeRegalProc(loader_glGetSharpenTexFuncSGIS,layer);
    _getProcAddress( driver_glSharpenTexFuncSGIS, glSharpenTexFuncSGIS, "glSharpenTexFuncSGIS" );
    if( driver_glSharpenTexFuncSGIS == NULL ) {
      driver_glSharpenTexFuncSGIS = missing_glSharpenTexFuncSGIS;
    }
    dt.glSharpenTexFuncSGIS = MakeRegalProc(loader_glSharpenTexFuncSGIS,layer);

    // GL_SGIS_texture4D

    _getProcAddress( driver_glTexImage4DSGIS, glTexImage4DSGIS, "glTexImage4DSGIS" );
    if( driver_glTexImage4DSGIS == NULL ) {
      driver_glTexImage4DSGIS = missing_glTexImage4DSGIS;
    }
    dt.glTexImage4DSGIS = MakeRegalProc(loader_glTexImage4DSGIS,layer);
    _getProcAddress( driver_glTexSubImage4DSGIS, glTexSubImage4DSGIS, "glTexSubImage4DSGIS" );
    if( driver_glTexSubImage4DSGIS == NULL ) {
      driver_glTexSubImage4DSGIS = missing_glTexSubImage4DSGIS;
    }
    dt.glTexSubImage4DSGIS = MakeRegalProc(loader_glTexSubImage4DSGIS,layer);

    // GL_SGIS_texture_color_mask

    _getProcAddress( driver_glTextureColorMaskSGIS, glTextureColorMaskSGIS, "glTextureColorMaskSGIS" );
    if( driver_glTextureColorMaskSGIS == NULL ) {
      driver_glTextureColorMaskSGIS = missing_glTextureColorMaskSGIS;
    }
    dt.glTextureColorMaskSGIS = MakeRegalProc(loader_glTextureColorMaskSGIS,layer);

    // GL_SGIS_texture_filter4

    _getProcAddress( driver_glGetTexFilterFuncSGIS, glGetTexFilterFuncSGIS, "glGetTexFilterFuncSGIS" );
    if( driver_glGetTexFilterFuncSGIS == NULL ) {
      driver_glGetTexFilterFuncSGIS = missing_glGetTexFilterFuncSGIS;
    }
    dt.glGetTexFilterFuncSGIS = MakeRegalProc(loader_glGetTexFilterFuncSGIS,layer);
    _getProcAddress( driver_glTexFilterFuncSGIS, glTexFilterFuncSGIS, "glTexFilterFuncSGIS" );
    if( driver_glTexFilterFuncSGIS == NULL ) {
      driver_glTexFilterFuncSGIS = missing_glTexFilterFuncSGIS;
    }
    dt.glTexFilterFuncSGIS = MakeRegalProc(loader_glTexFilterFuncSGIS,layer);

    // GL_SGIX_async

    _getProcAddress( driver_glAsyncMarkerSGIX, glAsyncMarkerSGIX, "glAsyncMarkerSGIX" );
    if( driver_glAsyncMarkerSGIX == NULL ) {
      driver_glAsyncMarkerSGIX = missing_glAsyncMarkerSGIX;
    }
    dt.glAsyncMarkerSGIX = MakeRegalProc(loader_glAsyncMarkerSGIX,layer);
    _getProcAddress( driver_glDeleteAsyncMarkersSGIX, glDeleteAsyncMarkersSGIX, "glDeleteAsyncMarkersSGIX" );
    if( driver_glDeleteAsyncMarkersSGIX == NULL ) {
      driver_glDeleteAsyncMarkersSGIX = missing_glDeleteAsyncMarkersSGIX;
    }
    dt.glDeleteAsyncMarkersSGIX = MakeRegalProc(loader_glDeleteAsyncMarkersSGIX,layer);
    _getProcAddress( driver_glFinishAsyncSGIX, glFinishAsyncSGIX, "glFinishAsyncSGIX" );
    if( driver_glFinishAsyncSGIX == NULL ) {
      driver_glFinishAsyncSGIX = missing_glFinishAsyncSGIX;
    }
    dt.glFinishAsyncSGIX = MakeRegalProc(loader_glFinishAsyncSGIX,layer);
    _getProcAddress( driver_glGenAsyncMarkersSGIX, glGenAsyncMarkersSGIX, "glGenAsyncMarkersSGIX" );
    if( driver_glGenAsyncMarkersSGIX == NULL ) {
      driver_glGenAsyncMarkersSGIX = missing_glGenAsyncMarkersSGIX;
    }
    dt.glGenAsyncMarkersSGIX = MakeRegalProc(loader_glGenAsyncMarkersSGIX,layer);
    _getProcAddress( driver_glIsAsyncMarkerSGIX, glIsAsyncMarkerSGIX, "glIsAsyncMarkerSGIX" );
    if( driver_glIsAsyncMarkerSGIX == NULL ) {
      driver_glIsAsyncMarkerSGIX = missing_glIsAsyncMarkerSGIX;
    }
    dt.glIsAsyncMarkerSGIX = MakeRegalProc(loader_glIsAsyncMarkerSGIX,layer);
    _getProcAddress( driver_glPollAsyncSGIX, glPollAsyncSGIX, "glPollAsyncSGIX" );
    if( driver_glPollAsyncSGIX == NULL ) {
      driver_glPollAsyncSGIX = missing_glPollAsyncSGIX;
    }
    dt.glPollAsyncSGIX = MakeRegalProc(loader_glPollAsyncSGIX,layer);

    // GL_SGIX_flush_raster

    _getProcAddress( driver_glFlushRasterSGIX, glFlushRasterSGIX, "glFlushRasterSGIX" );
    if( driver_glFlushRasterSGIX == NULL ) {
      driver_glFlushRasterSGIX = missing_glFlushRasterSGIX;
    }
    dt.glFlushRasterSGIX = MakeRegalProc(loader_glFlushRasterSGIX,layer);

    // GL_SGIX_fog_texture

    _getProcAddress( driver_glTextureFogSGIX, glTextureFogSGIX, "glTextureFogSGIX" );
    if( driver_glTextureFogSGIX == NULL ) {
      driver_glTextureFogSGIX = missing_glTextureFogSGIX;
    }
    dt.glTextureFogSGIX = MakeRegalProc(loader_glTextureFogSGIX,layer);

    // GL_SGIX_fragment_lighting

    _getProcAddress( driver_glFragmentColorMaterialSGIX, glFragmentColorMaterialSGIX, "glFragmentColorMaterialSGIX" );
    if( driver_glFragmentColorMaterialSGIX == NULL ) {
      driver_glFragmentColorMaterialSGIX = missing_glFragmentColorMaterialSGIX;
    }
    dt.glFragmentColorMaterialSGIX = MakeRegalProc(loader_glFragmentColorMaterialSGIX,layer);
    _getProcAddress( driver_glFragmentLightModelfSGIX, glFragmentLightModelfSGIX, "glFragmentLightModelfSGIX" );
    if( driver_glFragmentLightModelfSGIX == NULL ) {
      driver_glFragmentLightModelfSGIX = missing_glFragmentLightModelfSGIX;
    }
    dt.glFragmentLightModelfSGIX = MakeRegalProc(loader_glFragmentLightModelfSGIX,layer);
    _getProcAddress( driver_glFragmentLightModelfvSGIX, glFragmentLightModelfvSGIX, "glFragmentLightModelfvSGIX" );
    if( driver_glFragmentLightModelfvSGIX == NULL ) {
      driver_glFragmentLightModelfvSGIX = missing_glFragmentLightModelfvSGIX;
    }
    dt.glFragmentLightModelfvSGIX = MakeRegalProc(loader_glFragmentLightModelfvSGIX,layer);
    _getProcAddress( driver_glFragmentLightModeliSGIX, glFragmentLightModeliSGIX, "glFragmentLightModeliSGIX" );
    if( driver_glFragmentLightModeliSGIX == NULL ) {
      driver_glFragmentLightModeliSGIX = missing_glFragmentLightModeliSGIX;
    }
    dt.glFragmentLightModeliSGIX = MakeRegalProc(loader_glFragmentLightModeliSGIX,layer);
    _getProcAddress( driver_glFragmentLightModelivSGIX, glFragmentLightModelivSGIX, "glFragmentLightModelivSGIX" );
    if( driver_glFragmentLightModelivSGIX == NULL ) {
      driver_glFragmentLightModelivSGIX = missing_glFragmentLightModelivSGIX;
    }
    dt.glFragmentLightModelivSGIX = MakeRegalProc(loader_glFragmentLightModelivSGIX,layer);
    _getProcAddress( driver_glFragmentLightfSGIX, glFragmentLightfSGIX, "glFragmentLightfSGIX" );
    if( driver_glFragmentLightfSGIX == NULL ) {
      driver_glFragmentLightfSGIX = missing_glFragmentLightfSGIX;
    }
    dt.glFragmentLightfSGIX = MakeRegalProc(loader_glFragmentLightfSGIX,layer);
    _getProcAddress( driver_glFragmentLightfvSGIX, glFragmentLightfvSGIX, "glFragmentLightfvSGIX" );
    if( driver_glFragmentLightfvSGIX == NULL ) {
      driver_glFragmentLightfvSGIX = missing_glFragmentLightfvSGIX;
    }
    dt.glFragmentLightfvSGIX = MakeRegalProc(loader_glFragmentLightfvSGIX,layer);
    _getProcAddress( driver_glFragmentLightiSGIX, glFragmentLightiSGIX, "glFragmentLightiSGIX" );
    if( driver_glFragmentLightiSGIX == NULL ) {
      driver_glFragmentLightiSGIX = missing_glFragmentLightiSGIX;
    }
    dt.glFragmentLightiSGIX = MakeRegalProc(loader_glFragmentLightiSGIX,layer);
    _getProcAddress( driver_glFragmentLightivSGIX, glFragmentLightivSGIX, "glFragmentLightivSGIX" );
    if( driver_glFragmentLightivSGIX == NULL ) {
      driver_glFragmentLightivSGIX = missing_glFragmentLightivSGIX;
    }
    dt.glFragmentLightivSGIX = MakeRegalProc(loader_glFragmentLightivSGIX,layer);
    _getProcAddress( driver_glFragmentMaterialfSGIX, glFragmentMaterialfSGIX, "glFragmentMaterialfSGIX" );
    if( driver_glFragmentMaterialfSGIX == NULL ) {
      driver_glFragmentMaterialfSGIX = missing_glFragmentMaterialfSGIX;
    }
    dt.glFragmentMaterialfSGIX = MakeRegalProc(loader_glFragmentMaterialfSGIX,layer);
    _getProcAddress( driver_glFragmentMaterialfvSGIX, glFragmentMaterialfvSGIX, "glFragmentMaterialfvSGIX" );
    if( driver_glFragmentMaterialfvSGIX == NULL ) {
      driver_glFragmentMaterialfvSGIX = missing_glFragmentMaterialfvSGIX;
    }
    dt.glFragmentMaterialfvSGIX = MakeRegalProc(loader_glFragmentMaterialfvSGIX,layer);
    _getProcAddress( driver_glFragmentMaterialiSGIX, glFragmentMaterialiSGIX, "glFragmentMaterialiSGIX" );
    if( driver_glFragmentMaterialiSGIX == NULL ) {
      driver_glFragmentMaterialiSGIX = missing_glFragmentMaterialiSGIX;
    }
    dt.glFragmentMaterialiSGIX = MakeRegalProc(loader_glFragmentMaterialiSGIX,layer);
    _getProcAddress( driver_glFragmentMaterialivSGIX, glFragmentMaterialivSGIX, "glFragmentMaterialivSGIX" );
    if( driver_glFragmentMaterialivSGIX == NULL ) {
      driver_glFragmentMaterialivSGIX = missing_glFragmentMaterialivSGIX;
    }
    dt.glFragmentMaterialivSGIX = MakeRegalProc(loader_glFragmentMaterialivSGIX,layer);
    _getProcAddress( driver_glGetFragmentLightfvSGIX, glGetFragmentLightfvSGIX, "glGetFragmentLightfvSGIX" );
    if( driver_glGetFragmentLightfvSGIX == NULL ) {
      driver_glGetFragmentLightfvSGIX = missing_glGetFragmentLightfvSGIX;
    }
    dt.glGetFragmentLightfvSGIX = MakeRegalProc(loader_glGetFragmentLightfvSGIX,layer);
    _getProcAddress( driver_glGetFragmentLightivSGIX, glGetFragmentLightivSGIX, "glGetFragmentLightivSGIX" );
    if( driver_glGetFragmentLightivSGIX == NULL ) {
      driver_glGetFragmentLightivSGIX = missing_glGetFragmentLightivSGIX;
    }
    dt.glGetFragmentLightivSGIX = MakeRegalProc(loader_glGetFragmentLightivSGIX,layer);
    _getProcAddress( driver_glGetFragmentMaterialfvSGIX, glGetFragmentMaterialfvSGIX, "glGetFragmentMaterialfvSGIX" );
    if( driver_glGetFragmentMaterialfvSGIX == NULL ) {
      driver_glGetFragmentMaterialfvSGIX = missing_glGetFragmentMaterialfvSGIX;
    }
    dt.glGetFragmentMaterialfvSGIX = MakeRegalProc(loader_glGetFragmentMaterialfvSGIX,layer);
    _getProcAddress( driver_glGetFragmentMaterialivSGIX, glGetFragmentMaterialivSGIX, "glGetFragmentMaterialivSGIX" );
    if( driver_glGetFragmentMaterialivSGIX == NULL ) {
      driver_glGetFragmentMaterialivSGIX = missing_glGetFragmentMaterialivSGIX;
    }
    dt.glGetFragmentMaterialivSGIX = MakeRegalProc(loader_glGetFragmentMaterialivSGIX,layer);
    _getProcAddress( driver_glLightEnviSGIX, glLightEnviSGIX, "glLightEnviSGIX" );
    if( driver_glLightEnviSGIX == NULL ) {
      driver_glLightEnviSGIX = missing_glLightEnviSGIX;
    }
    dt.glLightEnviSGIX = MakeRegalProc(loader_glLightEnviSGIX,layer);

    // GL_SGIX_framezoom

    _getProcAddress( driver_glFrameZoomSGIX, glFrameZoomSGIX, "glFrameZoomSGIX" );
    if( driver_glFrameZoomSGIX == NULL ) {
      driver_glFrameZoomSGIX = missing_glFrameZoomSGIX;
    }
    dt.glFrameZoomSGIX = MakeRegalProc(loader_glFrameZoomSGIX,layer);

    // GL_SGIX_igloo_interface

    _getProcAddress( driver_glIglooInterfaceSGIX, glIglooInterfaceSGIX, "glIglooInterfaceSGIX" );
    if( driver_glIglooInterfaceSGIX == NULL ) {
      driver_glIglooInterfaceSGIX = missing_glIglooInterfaceSGIX;
    }
    dt.glIglooInterfaceSGIX = MakeRegalProc(loader_glIglooInterfaceSGIX,layer);

    // GL_SGIX_instruments

    _getProcAddress( driver_glGetInstrumentsSGIX, glGetInstrumentsSGIX, "glGetInstrumentsSGIX" );
    if( driver_glGetInstrumentsSGIX == NULL ) {
      driver_glGetInstrumentsSGIX = missing_glGetInstrumentsSGIX;
    }
    dt.glGetInstrumentsSGIX = MakeRegalProc(loader_glGetInstrumentsSGIX,layer);
    _getProcAddress( driver_glInstrumentsBufferSGIX, glInstrumentsBufferSGIX, "glInstrumentsBufferSGIX" );
    if( driver_glInstrumentsBufferSGIX == NULL ) {
      driver_glInstrumentsBufferSGIX = missing_glInstrumentsBufferSGIX;
    }
    dt.glInstrumentsBufferSGIX = MakeRegalProc(loader_glInstrumentsBufferSGIX,layer);
    _getProcAddress( driver_glPollInstrumentsSGIX, glPollInstrumentsSGIX, "glPollInstrumentsSGIX" );
    if( driver_glPollInstrumentsSGIX == NULL ) {
      driver_glPollInstrumentsSGIX = missing_glPollInstrumentsSGIX;
    }
    dt.glPollInstrumentsSGIX = MakeRegalProc(loader_glPollInstrumentsSGIX,layer);
    _getProcAddress( driver_glReadInstrumentsSGIX, glReadInstrumentsSGIX, "glReadInstrumentsSGIX" );
    if( driver_glReadInstrumentsSGIX == NULL ) {
      driver_glReadInstrumentsSGIX = missing_glReadInstrumentsSGIX;
    }
    dt.glReadInstrumentsSGIX = MakeRegalProc(loader_glReadInstrumentsSGIX,layer);
    _getProcAddress( driver_glStartInstrumentsSGIX, glStartInstrumentsSGIX, "glStartInstrumentsSGIX" );
    if( driver_glStartInstrumentsSGIX == NULL ) {
      driver_glStartInstrumentsSGIX = missing_glStartInstrumentsSGIX;
    }
    dt.glStartInstrumentsSGIX = MakeRegalProc(loader_glStartInstrumentsSGIX,layer);
    _getProcAddress( driver_glStopInstrumentsSGIX, glStopInstrumentsSGIX, "glStopInstrumentsSGIX" );
    if( driver_glStopInstrumentsSGIX == NULL ) {
      driver_glStopInstrumentsSGIX = missing_glStopInstrumentsSGIX;
    }
    dt.glStopInstrumentsSGIX = MakeRegalProc(loader_glStopInstrumentsSGIX,layer);

    // GL_SGIX_list_priority

    _getProcAddress( driver_glGetListParameterfvSGIX, glGetListParameterfvSGIX, "glGetListParameterfvSGIX" );
    if( driver_glGetListParameterfvSGIX == NULL ) {
      driver_glGetListParameterfvSGIX = missing_glGetListParameterfvSGIX;
    }
    dt.glGetListParameterfvSGIX = MakeRegalProc(loader_glGetListParameterfvSGIX,layer);
    _getProcAddress( driver_glGetListParameterivSGIX, glGetListParameterivSGIX, "glGetListParameterivSGIX" );
    if( driver_glGetListParameterivSGIX == NULL ) {
      driver_glGetListParameterivSGIX = missing_glGetListParameterivSGIX;
    }
    dt.glGetListParameterivSGIX = MakeRegalProc(loader_glGetListParameterivSGIX,layer);
    _getProcAddress( driver_glListParameterfSGIX, glListParameterfSGIX, "glListParameterfSGIX" );
    if( driver_glListParameterfSGIX == NULL ) {
      driver_glListParameterfSGIX = missing_glListParameterfSGIX;
    }
    dt.glListParameterfSGIX = MakeRegalProc(loader_glListParameterfSGIX,layer);
    _getProcAddress( driver_glListParameterfvSGIX, glListParameterfvSGIX, "glListParameterfvSGIX" );
    if( driver_glListParameterfvSGIX == NULL ) {
      driver_glListParameterfvSGIX = missing_glListParameterfvSGIX;
    }
    dt.glListParameterfvSGIX = MakeRegalProc(loader_glListParameterfvSGIX,layer);
    _getProcAddress( driver_glListParameteriSGIX, glListParameteriSGIX, "glListParameteriSGIX" );
    if( driver_glListParameteriSGIX == NULL ) {
      driver_glListParameteriSGIX = missing_glListParameteriSGIX;
    }
    dt.glListParameteriSGIX = MakeRegalProc(loader_glListParameteriSGIX,layer);
    _getProcAddress( driver_glListParameterivSGIX, glListParameterivSGIX, "glListParameterivSGIX" );
    if( driver_glListParameterivSGIX == NULL ) {
      driver_glListParameterivSGIX = missing_glListParameterivSGIX;
    }
    dt.glListParameterivSGIX = MakeRegalProc(loader_glListParameterivSGIX,layer);

    // GL_SGIX_pixel_texture

    _getProcAddress( driver_glPixelTexGenSGIX, glPixelTexGenSGIX, "glPixelTexGenSGIX" );
    if( driver_glPixelTexGenSGIX == NULL ) {
      driver_glPixelTexGenSGIX = missing_glPixelTexGenSGIX;
    }
    dt.glPixelTexGenSGIX = MakeRegalProc(loader_glPixelTexGenSGIX,layer);

    // GL_SGIX_polynomial_ffd

    _getProcAddress( driver_glDeformSGIX, glDeformSGIX, "glDeformSGIX" );
    if( driver_glDeformSGIX == NULL ) {
      driver_glDeformSGIX = missing_glDeformSGIX;
    }
    dt.glDeformSGIX = MakeRegalProc(loader_glDeformSGIX,layer);
    _getProcAddress( driver_glDeformationMap3dSGIX, glDeformationMap3dSGIX, "glDeformationMap3dSGIX" );
    if( driver_glDeformationMap3dSGIX == NULL ) {
      driver_glDeformationMap3dSGIX = missing_glDeformationMap3dSGIX;
    }
    dt.glDeformationMap3dSGIX = MakeRegalProc(loader_glDeformationMap3dSGIX,layer);
    _getProcAddress( driver_glDeformationMap3fSGIX, glDeformationMap3fSGIX, "glDeformationMap3fSGIX" );
    if( driver_glDeformationMap3fSGIX == NULL ) {
      driver_glDeformationMap3fSGIX = missing_glDeformationMap3fSGIX;
    }
    dt.glDeformationMap3fSGIX = MakeRegalProc(loader_glDeformationMap3fSGIX,layer);
    _getProcAddress( driver_glLoadIdentityDeformationMapSGIX, glLoadIdentityDeformationMapSGIX, "glLoadIdentityDeformationMapSGIX" );
    if( driver_glLoadIdentityDeformationMapSGIX == NULL ) {
      driver_glLoadIdentityDeformationMapSGIX = missing_glLoadIdentityDeformationMapSGIX;
    }
    dt.glLoadIdentityDeformationMapSGIX = MakeRegalProc(loader_glLoadIdentityDeformationMapSGIX,layer);

    // GL_SGIX_reference_plane

    _getProcAddress( driver_glReferencePlaneSGIX, glReferencePlaneSGIX, "glReferencePlaneSGIX" );
    if( driver_glReferencePlaneSGIX == NULL ) {
      driver_glReferencePlaneSGIX = missing_glReferencePlaneSGIX;
    }
    dt.glReferencePlaneSGIX = MakeRegalProc(loader_glReferencePlaneSGIX,layer);

    // GL_SGIX_sprite

    _getProcAddress( driver_glSpriteParameterfSGIX, glSpriteParameterfSGIX, "glSpriteParameterfSGIX" );
    if( driver_glSpriteParameterfSGIX == NULL ) {
      driver_glSpriteParameterfSGIX = missing_glSpriteParameterfSGIX;
    }
    dt.glSpriteParameterfSGIX = MakeRegalProc(loader_glSpriteParameterfSGIX,layer);
    _getProcAddress( driver_glSpriteParameterfvSGIX, glSpriteParameterfvSGIX, "glSpriteParameterfvSGIX" );
    if( driver_glSpriteParameterfvSGIX == NULL ) {
      driver_glSpriteParameterfvSGIX = missing_glSpriteParameterfvSGIX;
    }
    dt.glSpriteParameterfvSGIX = MakeRegalProc(loader_glSpriteParameterfvSGIX,layer);
    _getProcAddress( driver_glSpriteParameteriSGIX, glSpriteParameteriSGIX, "glSpriteParameteriSGIX" );
    if( driver_glSpriteParameteriSGIX == NULL ) {
      driver_glSpriteParameteriSGIX = missing_glSpriteParameteriSGIX;
    }
    dt.glSpriteParameteriSGIX = MakeRegalProc(loader_glSpriteParameteriSGIX,layer);
    _getProcAddress( driver_glSpriteParameterivSGIX, glSpriteParameterivSGIX, "glSpriteParameterivSGIX" );
    if( driver_glSpriteParameterivSGIX == NULL ) {
      driver_glSpriteParameterivSGIX = missing_glSpriteParameterivSGIX;
    }
    dt.glSpriteParameterivSGIX = MakeRegalProc(loader_glSpriteParameterivSGIX,layer);

    // GL_SGIX_tag_sample_buffer

    _getProcAddress( driver_glTagSampleBufferSGIX, glTagSampleBufferSGIX, "glTagSampleBufferSGIX" );
    if( driver_glTagSampleBufferSGIX == NULL ) {
      driver_glTagSampleBufferSGIX = missing_glTagSampleBufferSGIX;
    }
    dt.glTagSampleBufferSGIX = MakeRegalProc(loader_glTagSampleBufferSGIX,layer);

    // GL_SGI_color_table

    _getProcAddress( driver_glColorTableParameterfvSGI, glColorTableParameterfvSGI, "glColorTableParameterfvSGI" );
    if( driver_glColorTableParameterfvSGI == NULL ) {
      driver_glColorTableParameterfvSGI = missing_glColorTableParameterfvSGI;
    }
    dt.glColorTableParameterfvSGI = MakeRegalProc(loader_glColorTableParameterfvSGI,layer);
    _getProcAddress( driver_glColorTableParameterivSGI, glColorTableParameterivSGI, "glColorTableParameterivSGI" );
    if( driver_glColorTableParameterivSGI == NULL ) {
      driver_glColorTableParameterivSGI = missing_glColorTableParameterivSGI;
    }
    dt.glColorTableParameterivSGI = MakeRegalProc(loader_glColorTableParameterivSGI,layer);
    _getProcAddress( driver_glColorTableSGI, glColorTableSGI, "glColorTableSGI" );
    if( driver_glColorTableSGI == NULL ) {
      driver_glColorTableSGI = missing_glColorTableSGI;
    }
    dt.glColorTableSGI = MakeRegalProc(loader_glColorTableSGI,layer);
    _getProcAddress( driver_glCopyColorTableSGI, glCopyColorTableSGI, "glCopyColorTableSGI" );
    if( driver_glCopyColorTableSGI == NULL ) {
      driver_glCopyColorTableSGI = missing_glCopyColorTableSGI;
    }
    dt.glCopyColorTableSGI = MakeRegalProc(loader_glCopyColorTableSGI,layer);
    _getProcAddress( driver_glGetColorTableParameterfvSGI, glGetColorTableParameterfvSGI, "glGetColorTableParameterfvSGI" );
    if( driver_glGetColorTableParameterfvSGI == NULL ) {
      driver_glGetColorTableParameterfvSGI = missing_glGetColorTableParameterfvSGI;
    }
    dt.glGetColorTableParameterfvSGI = MakeRegalProc(loader_glGetColorTableParameterfvSGI,layer);
    _getProcAddress( driver_glGetColorTableParameterivSGI, glGetColorTableParameterivSGI, "glGetColorTableParameterivSGI" );
    if( driver_glGetColorTableParameterivSGI == NULL ) {
      driver_glGetColorTableParameterivSGI = missing_glGetColorTableParameterivSGI;
    }
    dt.glGetColorTableParameterivSGI = MakeRegalProc(loader_glGetColorTableParameterivSGI,layer);
    _getProcAddress( driver_glGetColorTableSGI, glGetColorTableSGI, "glGetColorTableSGI" );
    if( driver_glGetColorTableSGI == NULL ) {
      driver_glGetColorTableSGI = missing_glGetColorTableSGI;
    }
    dt.glGetColorTableSGI = MakeRegalProc(loader_glGetColorTableSGI,layer);

    // GL_SUNX_constant_data

    _getProcAddress( driver_glFinishTextureSUNX, glFinishTextureSUNX, "glFinishTextureSUNX" );
    if( driver_glFinishTextureSUNX == NULL ) {
      driver_glFinishTextureSUNX = missing_glFinishTextureSUNX;
    }
    dt.glFinishTextureSUNX = MakeRegalProc(loader_glFinishTextureSUNX,layer);

    // GL_SUN_global_alpha

    _getProcAddress( driver_glGlobalAlphaFactorbSUN, glGlobalAlphaFactorbSUN, "glGlobalAlphaFactorbSUN" );
    if( driver_glGlobalAlphaFactorbSUN == NULL ) {
      driver_glGlobalAlphaFactorbSUN = missing_glGlobalAlphaFactorbSUN;
    }
    dt.glGlobalAlphaFactorbSUN = MakeRegalProc(loader_glGlobalAlphaFactorbSUN,layer);
    _getProcAddress( driver_glGlobalAlphaFactordSUN, glGlobalAlphaFactordSUN, "glGlobalAlphaFactordSUN" );
    if( driver_glGlobalAlphaFactordSUN == NULL ) {
      driver_glGlobalAlphaFactordSUN = missing_glGlobalAlphaFactordSUN;
    }
    dt.glGlobalAlphaFactordSUN = MakeRegalProc(loader_glGlobalAlphaFactordSUN,layer);
    _getProcAddress( driver_glGlobalAlphaFactorfSUN, glGlobalAlphaFactorfSUN, "glGlobalAlphaFactorfSUN" );
    if( driver_glGlobalAlphaFactorfSUN == NULL ) {
      driver_glGlobalAlphaFactorfSUN = missing_glGlobalAlphaFactorfSUN;
    }
    dt.glGlobalAlphaFactorfSUN = MakeRegalProc(loader_glGlobalAlphaFactorfSUN,layer);
    _getProcAddress( driver_glGlobalAlphaFactoriSUN, glGlobalAlphaFactoriSUN, "glGlobalAlphaFactoriSUN" );
    if( driver_glGlobalAlphaFactoriSUN == NULL ) {
      driver_glGlobalAlphaFactoriSUN = missing_glGlobalAlphaFactoriSUN;
    }
    dt.glGlobalAlphaFactoriSUN = MakeRegalProc(loader_glGlobalAlphaFactoriSUN,layer);
    _getProcAddress( driver_glGlobalAlphaFactorsSUN, glGlobalAlphaFactorsSUN, "glGlobalAlphaFactorsSUN" );
    if( driver_glGlobalAlphaFactorsSUN == NULL ) {
      driver_glGlobalAlphaFactorsSUN = missing_glGlobalAlphaFactorsSUN;
    }
    dt.glGlobalAlphaFactorsSUN = MakeRegalProc(loader_glGlobalAlphaFactorsSUN,layer);
    _getProcAddress( driver_glGlobalAlphaFactorubSUN, glGlobalAlphaFactorubSUN, "glGlobalAlphaFactorubSUN" );
    if( driver_glGlobalAlphaFactorubSUN == NULL ) {
      driver_glGlobalAlphaFactorubSUN = missing_glGlobalAlphaFactorubSUN;
    }
    dt.glGlobalAlphaFactorubSUN = MakeRegalProc(loader_glGlobalAlphaFactorubSUN,layer);
    _getProcAddress( driver_glGlobalAlphaFactoruiSUN, glGlobalAlphaFactoruiSUN, "glGlobalAlphaFactoruiSUN" );
    if( driver_glGlobalAlphaFactoruiSUN == NULL ) {
      driver_glGlobalAlphaFactoruiSUN = missing_glGlobalAlphaFactoruiSUN;
    }
    dt.glGlobalAlphaFactoruiSUN = MakeRegalProc(loader_glGlobalAlphaFactoruiSUN,layer);
    _getProcAddress( driver_glGlobalAlphaFactorusSUN, glGlobalAlphaFactorusSUN, "glGlobalAlphaFactorusSUN" );
    if( driver_glGlobalAlphaFactorusSUN == NULL ) {
      driver_glGlobalAlphaFactorusSUN = missing_glGlobalAlphaFactorusSUN;
    }
    dt.glGlobalAlphaFactorusSUN = MakeRegalProc(loader_glGlobalAlphaFactorusSUN,layer);

    // GL_SUN_mesh_array

    _getProcAddress( driver_glDrawMeshArraysSUN, glDrawMeshArraysSUN, "glDrawMeshArraysSUN" );
    if( driver_glDrawMeshArraysSUN == NULL ) {
      driver_glDrawMeshArraysSUN = missing_glDrawMeshArraysSUN;
    }
    dt.glDrawMeshArraysSUN = MakeRegalProc(loader_glDrawMeshArraysSUN,layer);

    // GL_SUN_read_video_pixels

    _getProcAddress( driver_glReadVideoPixelsSUN, glReadVideoPixelsSUN, "glReadVideoPixelsSUN" );
    if( driver_glReadVideoPixelsSUN == NULL ) {
      driver_glReadVideoPixelsSUN = missing_glReadVideoPixelsSUN;
    }
    dt.glReadVideoPixelsSUN = MakeRegalProc(loader_glReadVideoPixelsSUN,layer);

    // GL_SUN_triangle_list

    _getProcAddress( driver_glReplacementCodePointerSUN, glReplacementCodePointerSUN, "glReplacementCodePointerSUN" );
    if( driver_glReplacementCodePointerSUN == NULL ) {
      driver_glReplacementCodePointerSUN = missing_glReplacementCodePointerSUN;
    }
    dt.glReplacementCodePointerSUN = MakeRegalProc(loader_glReplacementCodePointerSUN,layer);
    _getProcAddress( driver_glReplacementCodeubSUN, glReplacementCodeubSUN, "glReplacementCodeubSUN" );
    if( driver_glReplacementCodeubSUN == NULL ) {
      driver_glReplacementCodeubSUN = missing_glReplacementCodeubSUN;
    }
    dt.glReplacementCodeubSUN = MakeRegalProc(loader_glReplacementCodeubSUN,layer);
    _getProcAddress( driver_glReplacementCodeubvSUN, glReplacementCodeubvSUN, "glReplacementCodeubvSUN" );
    if( driver_glReplacementCodeubvSUN == NULL ) {
      driver_glReplacementCodeubvSUN = missing_glReplacementCodeubvSUN;
    }
    dt.glReplacementCodeubvSUN = MakeRegalProc(loader_glReplacementCodeubvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiSUN, glReplacementCodeuiSUN, "glReplacementCodeuiSUN" );
    if( driver_glReplacementCodeuiSUN == NULL ) {
      driver_glReplacementCodeuiSUN = missing_glReplacementCodeuiSUN;
    }
    dt.glReplacementCodeuiSUN = MakeRegalProc(loader_glReplacementCodeuiSUN,layer);
    _getProcAddress( driver_glReplacementCodeuivSUN, glReplacementCodeuivSUN, "glReplacementCodeuivSUN" );
    if( driver_glReplacementCodeuivSUN == NULL ) {
      driver_glReplacementCodeuivSUN = missing_glReplacementCodeuivSUN;
    }
    dt.glReplacementCodeuivSUN = MakeRegalProc(loader_glReplacementCodeuivSUN,layer);
    _getProcAddress( driver_glReplacementCodeusSUN, glReplacementCodeusSUN, "glReplacementCodeusSUN" );
    if( driver_glReplacementCodeusSUN == NULL ) {
      driver_glReplacementCodeusSUN = missing_glReplacementCodeusSUN;
    }
    dt.glReplacementCodeusSUN = MakeRegalProc(loader_glReplacementCodeusSUN,layer);
    _getProcAddress( driver_glReplacementCodeusvSUN, glReplacementCodeusvSUN, "glReplacementCodeusvSUN" );
    if( driver_glReplacementCodeusvSUN == NULL ) {
      driver_glReplacementCodeusvSUN = missing_glReplacementCodeusvSUN;
    }
    dt.glReplacementCodeusvSUN = MakeRegalProc(loader_glReplacementCodeusvSUN,layer);

    // GL_SUN_vertex

    _getProcAddress( driver_glColor3fVertex3fSUN, glColor3fVertex3fSUN, "glColor3fVertex3fSUN" );
    if( driver_glColor3fVertex3fSUN == NULL ) {
      driver_glColor3fVertex3fSUN = missing_glColor3fVertex3fSUN;
    }
    dt.glColor3fVertex3fSUN = MakeRegalProc(loader_glColor3fVertex3fSUN,layer);
    _getProcAddress( driver_glColor3fVertex3fvSUN, glColor3fVertex3fvSUN, "glColor3fVertex3fvSUN" );
    if( driver_glColor3fVertex3fvSUN == NULL ) {
      driver_glColor3fVertex3fvSUN = missing_glColor3fVertex3fvSUN;
    }
    dt.glColor3fVertex3fvSUN = MakeRegalProc(loader_glColor3fVertex3fvSUN,layer);
    _getProcAddress( driver_glColor4fNormal3fVertex3fSUN, glColor4fNormal3fVertex3fSUN, "glColor4fNormal3fVertex3fSUN" );
    if( driver_glColor4fNormal3fVertex3fSUN == NULL ) {
      driver_glColor4fNormal3fVertex3fSUN = missing_glColor4fNormal3fVertex3fSUN;
    }
    dt.glColor4fNormal3fVertex3fSUN = MakeRegalProc(loader_glColor4fNormal3fVertex3fSUN,layer);
    _getProcAddress( driver_glColor4fNormal3fVertex3fvSUN, glColor4fNormal3fVertex3fvSUN, "glColor4fNormal3fVertex3fvSUN" );
    if( driver_glColor4fNormal3fVertex3fvSUN == NULL ) {
      driver_glColor4fNormal3fVertex3fvSUN = missing_glColor4fNormal3fVertex3fvSUN;
    }
    dt.glColor4fNormal3fVertex3fvSUN = MakeRegalProc(loader_glColor4fNormal3fVertex3fvSUN,layer);
    _getProcAddress( driver_glColor4ubVertex2fSUN, glColor4ubVertex2fSUN, "glColor4ubVertex2fSUN" );
    if( driver_glColor4ubVertex2fSUN == NULL ) {
      driver_glColor4ubVertex2fSUN = missing_glColor4ubVertex2fSUN;
    }
    dt.glColor4ubVertex2fSUN = MakeRegalProc(loader_glColor4ubVertex2fSUN,layer);
    _getProcAddress( driver_glColor4ubVertex2fvSUN, glColor4ubVertex2fvSUN, "glColor4ubVertex2fvSUN" );
    if( driver_glColor4ubVertex2fvSUN == NULL ) {
      driver_glColor4ubVertex2fvSUN = missing_glColor4ubVertex2fvSUN;
    }
    dt.glColor4ubVertex2fvSUN = MakeRegalProc(loader_glColor4ubVertex2fvSUN,layer);
    _getProcAddress( driver_glColor4ubVertex3fSUN, glColor4ubVertex3fSUN, "glColor4ubVertex3fSUN" );
    if( driver_glColor4ubVertex3fSUN == NULL ) {
      driver_glColor4ubVertex3fSUN = missing_glColor4ubVertex3fSUN;
    }
    dt.glColor4ubVertex3fSUN = MakeRegalProc(loader_glColor4ubVertex3fSUN,layer);
    _getProcAddress( driver_glColor4ubVertex3fvSUN, glColor4ubVertex3fvSUN, "glColor4ubVertex3fvSUN" );
    if( driver_glColor4ubVertex3fvSUN == NULL ) {
      driver_glColor4ubVertex3fvSUN = missing_glColor4ubVertex3fvSUN;
    }
    dt.glColor4ubVertex3fvSUN = MakeRegalProc(loader_glColor4ubVertex3fvSUN,layer);
    _getProcAddress( driver_glNormal3fVertex3fSUN, glNormal3fVertex3fSUN, "glNormal3fVertex3fSUN" );
    if( driver_glNormal3fVertex3fSUN == NULL ) {
      driver_glNormal3fVertex3fSUN = missing_glNormal3fVertex3fSUN;
    }
    dt.glNormal3fVertex3fSUN = MakeRegalProc(loader_glNormal3fVertex3fSUN,layer);
    _getProcAddress( driver_glNormal3fVertex3fvSUN, glNormal3fVertex3fvSUN, "glNormal3fVertex3fvSUN" );
    if( driver_glNormal3fVertex3fvSUN == NULL ) {
      driver_glNormal3fVertex3fvSUN = missing_glNormal3fVertex3fvSUN;
    }
    dt.glNormal3fVertex3fvSUN = MakeRegalProc(loader_glNormal3fVertex3fvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiColor3fVertex3fSUN, glReplacementCodeuiColor3fVertex3fSUN, "glReplacementCodeuiColor3fVertex3fSUN" );
    if( driver_glReplacementCodeuiColor3fVertex3fSUN == NULL ) {
      driver_glReplacementCodeuiColor3fVertex3fSUN = missing_glReplacementCodeuiColor3fVertex3fSUN;
    }
    dt.glReplacementCodeuiColor3fVertex3fSUN = MakeRegalProc(loader_glReplacementCodeuiColor3fVertex3fSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiColor3fVertex3fvSUN, glReplacementCodeuiColor3fVertex3fvSUN, "glReplacementCodeuiColor3fVertex3fvSUN" );
    if( driver_glReplacementCodeuiColor3fVertex3fvSUN == NULL ) {
      driver_glReplacementCodeuiColor3fVertex3fvSUN = missing_glReplacementCodeuiColor3fVertex3fvSUN;
    }
    dt.glReplacementCodeuiColor3fVertex3fvSUN = MakeRegalProc(loader_glReplacementCodeuiColor3fVertex3fvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiColor4fNormal3fVertex3fSUN, glReplacementCodeuiColor4fNormal3fVertex3fSUN, "glReplacementCodeuiColor4fNormal3fVertex3fSUN" );
    if( driver_glReplacementCodeuiColor4fNormal3fVertex3fSUN == NULL ) {
      driver_glReplacementCodeuiColor4fNormal3fVertex3fSUN = missing_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
    }
    dt.glReplacementCodeuiColor4fNormal3fVertex3fSUN = MakeRegalProc(loader_glReplacementCodeuiColor4fNormal3fVertex3fSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiColor4fNormal3fVertex3fvSUN, glReplacementCodeuiColor4fNormal3fVertex3fvSUN, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN" );
    if( driver_glReplacementCodeuiColor4fNormal3fVertex3fvSUN == NULL ) {
      driver_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = missing_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
    }
    dt.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = MakeRegalProc(loader_glReplacementCodeuiColor4fNormal3fVertex3fvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiColor4ubVertex3fSUN, glReplacementCodeuiColor4ubVertex3fSUN, "glReplacementCodeuiColor4ubVertex3fSUN" );
    if( driver_glReplacementCodeuiColor4ubVertex3fSUN == NULL ) {
      driver_glReplacementCodeuiColor4ubVertex3fSUN = missing_glReplacementCodeuiColor4ubVertex3fSUN;
    }
    dt.glReplacementCodeuiColor4ubVertex3fSUN = MakeRegalProc(loader_glReplacementCodeuiColor4ubVertex3fSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiColor4ubVertex3fvSUN, glReplacementCodeuiColor4ubVertex3fvSUN, "glReplacementCodeuiColor4ubVertex3fvSUN" );
    if( driver_glReplacementCodeuiColor4ubVertex3fvSUN == NULL ) {
      driver_glReplacementCodeuiColor4ubVertex3fvSUN = missing_glReplacementCodeuiColor4ubVertex3fvSUN;
    }
    dt.glReplacementCodeuiColor4ubVertex3fvSUN = MakeRegalProc(loader_glReplacementCodeuiColor4ubVertex3fvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiNormal3fVertex3fSUN, glReplacementCodeuiNormal3fVertex3fSUN, "glReplacementCodeuiNormal3fVertex3fSUN" );
    if( driver_glReplacementCodeuiNormal3fVertex3fSUN == NULL ) {
      driver_glReplacementCodeuiNormal3fVertex3fSUN = missing_glReplacementCodeuiNormal3fVertex3fSUN;
    }
    dt.glReplacementCodeuiNormal3fVertex3fSUN = MakeRegalProc(loader_glReplacementCodeuiNormal3fVertex3fSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiNormal3fVertex3fvSUN, glReplacementCodeuiNormal3fVertex3fvSUN, "glReplacementCodeuiNormal3fVertex3fvSUN" );
    if( driver_glReplacementCodeuiNormal3fVertex3fvSUN == NULL ) {
      driver_glReplacementCodeuiNormal3fVertex3fvSUN = missing_glReplacementCodeuiNormal3fVertex3fvSUN;
    }
    dt.glReplacementCodeuiNormal3fVertex3fvSUN = MakeRegalProc(loader_glReplacementCodeuiNormal3fVertex3fvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN" );
    if( driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN == NULL ) {
      driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
    }
    dt.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = MakeRegalProc(loader_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN" );
    if( driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN == NULL ) {
      driver_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
    }
    dt.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = MakeRegalProc(loader_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN" );
    if( driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN == NULL ) {
      driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
    }
    dt.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = MakeRegalProc(loader_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN" );
    if( driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN == NULL ) {
      driver_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
    }
    dt.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = MakeRegalProc(loader_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiTexCoord2fVertex3fSUN, glReplacementCodeuiTexCoord2fVertex3fSUN, "glReplacementCodeuiTexCoord2fVertex3fSUN" );
    if( driver_glReplacementCodeuiTexCoord2fVertex3fSUN == NULL ) {
      driver_glReplacementCodeuiTexCoord2fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fVertex3fSUN;
    }
    dt.glReplacementCodeuiTexCoord2fVertex3fSUN = MakeRegalProc(loader_glReplacementCodeuiTexCoord2fVertex3fSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiTexCoord2fVertex3fvSUN, glReplacementCodeuiTexCoord2fVertex3fvSUN, "glReplacementCodeuiTexCoord2fVertex3fvSUN" );
    if( driver_glReplacementCodeuiTexCoord2fVertex3fvSUN == NULL ) {
      driver_glReplacementCodeuiTexCoord2fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fVertex3fvSUN;
    }
    dt.glReplacementCodeuiTexCoord2fVertex3fvSUN = MakeRegalProc(loader_glReplacementCodeuiTexCoord2fVertex3fvSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiVertex3fSUN, glReplacementCodeuiVertex3fSUN, "glReplacementCodeuiVertex3fSUN" );
    if( driver_glReplacementCodeuiVertex3fSUN == NULL ) {
      driver_glReplacementCodeuiVertex3fSUN = missing_glReplacementCodeuiVertex3fSUN;
    }
    dt.glReplacementCodeuiVertex3fSUN = MakeRegalProc(loader_glReplacementCodeuiVertex3fSUN,layer);
    _getProcAddress( driver_glReplacementCodeuiVertex3fvSUN, glReplacementCodeuiVertex3fvSUN, "glReplacementCodeuiVertex3fvSUN" );
    if( driver_glReplacementCodeuiVertex3fvSUN == NULL ) {
      driver_glReplacementCodeuiVertex3fvSUN = missing_glReplacementCodeuiVertex3fvSUN;
    }
    dt.glReplacementCodeuiVertex3fvSUN = MakeRegalProc(loader_glReplacementCodeuiVertex3fvSUN,layer);
    _getProcAddress( driver_glTexCoord2fColor3fVertex3fSUN, glTexCoord2fColor3fVertex3fSUN, "glTexCoord2fColor3fVertex3fSUN" );
    if( driver_glTexCoord2fColor3fVertex3fSUN == NULL ) {
      driver_glTexCoord2fColor3fVertex3fSUN = missing_glTexCoord2fColor3fVertex3fSUN;
    }
    dt.glTexCoord2fColor3fVertex3fSUN = MakeRegalProc(loader_glTexCoord2fColor3fVertex3fSUN,layer);
    _getProcAddress( driver_glTexCoord2fColor3fVertex3fvSUN, glTexCoord2fColor3fVertex3fvSUN, "glTexCoord2fColor3fVertex3fvSUN" );
    if( driver_glTexCoord2fColor3fVertex3fvSUN == NULL ) {
      driver_glTexCoord2fColor3fVertex3fvSUN = missing_glTexCoord2fColor3fVertex3fvSUN;
    }
    dt.glTexCoord2fColor3fVertex3fvSUN = MakeRegalProc(loader_glTexCoord2fColor3fVertex3fvSUN,layer);
    _getProcAddress( driver_glTexCoord2fColor4fNormal3fVertex3fSUN, glTexCoord2fColor4fNormal3fVertex3fSUN, "glTexCoord2fColor4fNormal3fVertex3fSUN" );
    if( driver_glTexCoord2fColor4fNormal3fVertex3fSUN == NULL ) {
      driver_glTexCoord2fColor4fNormal3fVertex3fSUN = missing_glTexCoord2fColor4fNormal3fVertex3fSUN;
    }
    dt.glTexCoord2fColor4fNormal3fVertex3fSUN = MakeRegalProc(loader_glTexCoord2fColor4fNormal3fVertex3fSUN,layer);
    _getProcAddress( driver_glTexCoord2fColor4fNormal3fVertex3fvSUN, glTexCoord2fColor4fNormal3fVertex3fvSUN, "glTexCoord2fColor4fNormal3fVertex3fvSUN" );
    if( driver_glTexCoord2fColor4fNormal3fVertex3fvSUN == NULL ) {
      driver_glTexCoord2fColor4fNormal3fVertex3fvSUN = missing_glTexCoord2fColor4fNormal3fVertex3fvSUN;
    }
    dt.glTexCoord2fColor4fNormal3fVertex3fvSUN = MakeRegalProc(loader_glTexCoord2fColor4fNormal3fVertex3fvSUN,layer);
    _getProcAddress( driver_glTexCoord2fColor4ubVertex3fSUN, glTexCoord2fColor4ubVertex3fSUN, "glTexCoord2fColor4ubVertex3fSUN" );
    if( driver_glTexCoord2fColor4ubVertex3fSUN == NULL ) {
      driver_glTexCoord2fColor4ubVertex3fSUN = missing_glTexCoord2fColor4ubVertex3fSUN;
    }
    dt.glTexCoord2fColor4ubVertex3fSUN = MakeRegalProc(loader_glTexCoord2fColor4ubVertex3fSUN,layer);
    _getProcAddress( driver_glTexCoord2fColor4ubVertex3fvSUN, glTexCoord2fColor4ubVertex3fvSUN, "glTexCoord2fColor4ubVertex3fvSUN" );
    if( driver_glTexCoord2fColor4ubVertex3fvSUN == NULL ) {
      driver_glTexCoord2fColor4ubVertex3fvSUN = missing_glTexCoord2fColor4ubVertex3fvSUN;
    }
    dt.glTexCoord2fColor4ubVertex3fvSUN = MakeRegalProc(loader_glTexCoord2fColor4ubVertex3fvSUN,layer);
    _getProcAddress( driver_glTexCoord2fNormal3fVertex3fSUN, glTexCoord2fNormal3fVertex3fSUN, "glTexCoord2fNormal3fVertex3fSUN" );
    if( driver_glTexCoord2fNormal3fVertex3fSUN == NULL ) {
      driver_glTexCoord2fNormal3fVertex3fSUN = missing_glTexCoord2fNormal3fVertex3fSUN;
    }
    dt.glTexCoord2fNormal3fVertex3fSUN = MakeRegalProc(loader_glTexCoord2fNormal3fVertex3fSUN,layer);
    _getProcAddress( driver_glTexCoord2fNormal3fVertex3fvSUN, glTexCoord2fNormal3fVertex3fvSUN, "glTexCoord2fNormal3fVertex3fvSUN" );
    if( driver_glTexCoord2fNormal3fVertex3fvSUN == NULL ) {
      driver_glTexCoord2fNormal3fVertex3fvSUN = missing_glTexCoord2fNormal3fVertex3fvSUN;
    }
    dt.glTexCoord2fNormal3fVertex3fvSUN = MakeRegalProc(loader_glTexCoord2fNormal3fVertex3fvSUN,layer);
    _getProcAddress( driver_glTexCoord2fVertex3fSUN, glTexCoord2fVertex3fSUN, "glTexCoord2fVertex3fSUN" );
    if( driver_glTexCoord2fVertex3fSUN == NULL ) {
      driver_glTexCoord2fVertex3fSUN = missing_glTexCoord2fVertex3fSUN;
    }
    dt.glTexCoord2fVertex3fSUN = MakeRegalProc(loader_glTexCoord2fVertex3fSUN,layer);
    _getProcAddress( driver_glTexCoord2fVertex3fvSUN, glTexCoord2fVertex3fvSUN, "glTexCoord2fVertex3fvSUN" );
    if( driver_glTexCoord2fVertex3fvSUN == NULL ) {
      driver_glTexCoord2fVertex3fvSUN = missing_glTexCoord2fVertex3fvSUN;
    }
    dt.glTexCoord2fVertex3fvSUN = MakeRegalProc(loader_glTexCoord2fVertex3fvSUN,layer);
    _getProcAddress( driver_glTexCoord4fColor4fNormal3fVertex4fSUN, glTexCoord4fColor4fNormal3fVertex4fSUN, "glTexCoord4fColor4fNormal3fVertex4fSUN" );
    if( driver_glTexCoord4fColor4fNormal3fVertex4fSUN == NULL ) {
      driver_glTexCoord4fColor4fNormal3fVertex4fSUN = missing_glTexCoord4fColor4fNormal3fVertex4fSUN;
    }
    dt.glTexCoord4fColor4fNormal3fVertex4fSUN = MakeRegalProc(loader_glTexCoord4fColor4fNormal3fVertex4fSUN,layer);
    _getProcAddress( driver_glTexCoord4fColor4fNormal3fVertex4fvSUN, glTexCoord4fColor4fNormal3fVertex4fvSUN, "glTexCoord4fColor4fNormal3fVertex4fvSUN" );
    if( driver_glTexCoord4fColor4fNormal3fVertex4fvSUN == NULL ) {
      driver_glTexCoord4fColor4fNormal3fVertex4fvSUN = missing_glTexCoord4fColor4fNormal3fVertex4fvSUN;
    }
    dt.glTexCoord4fColor4fNormal3fVertex4fvSUN = MakeRegalProc(loader_glTexCoord4fColor4fNormal3fVertex4fvSUN,layer);
    _getProcAddress( driver_glTexCoord4fVertex4fSUN, glTexCoord4fVertex4fSUN, "glTexCoord4fVertex4fSUN" );
    if( driver_glTexCoord4fVertex4fSUN == NULL ) {
      driver_glTexCoord4fVertex4fSUN = missing_glTexCoord4fVertex4fSUN;
    }
    dt.glTexCoord4fVertex4fSUN = MakeRegalProc(loader_glTexCoord4fVertex4fSUN,layer);
    _getProcAddress( driver_glTexCoord4fVertex4fvSUN, glTexCoord4fVertex4fvSUN, "glTexCoord4fVertex4fvSUN" );
    if( driver_glTexCoord4fVertex4fvSUN == NULL ) {
      driver_glTexCoord4fVertex4fvSUN = missing_glTexCoord4fVertex4fvSUN;
    }
    dt.glTexCoord4fVertex4fvSUN = MakeRegalProc(loader_glTexCoord4fVertex4fvSUN,layer);

    // GL_WIN_swap_hint

    _getProcAddress( driver_glAddSwapHintRectWIN, glAddSwapHintRectWIN, "glAddSwapHintRectWIN" );
    if( driver_glAddSwapHintRectWIN == NULL ) {
      driver_glAddSwapHintRectWIN = missing_glAddSwapHintRectWIN;
    }
    dt.glAddSwapHintRectWIN = MakeRegalProc(loader_glAddSwapHintRectWIN,layer);

  }

 void InitDispatchLoader(Layer *layer, Dispatch::Global &dt) {

  #if REGAL_SYS_WGL
    // WGL_3DL_stereo_control

    _getProcAddress( driver_wglSetStereoEmitterState3DL, wglSetStereoEmitterState3DL, "wglSetStereoEmitterState3DL" );
    if( driver_wglSetStereoEmitterState3DL == NULL ) {
      driver_wglSetStereoEmitterState3DL = missing_wglSetStereoEmitterState3DL;
    }
    dt.wglSetStereoEmitterState3DL = MakeRegalProc(loader_wglSetStereoEmitterState3DL, layer);

    // WGL_AMD_gpu_association

    _getProcAddress( driver_wglBlitContextFramebufferAMD, wglBlitContextFramebufferAMD, "wglBlitContextFramebufferAMD" );
    if( driver_wglBlitContextFramebufferAMD == NULL ) {
      driver_wglBlitContextFramebufferAMD = missing_wglBlitContextFramebufferAMD;
    }
    dt.wglBlitContextFramebufferAMD = MakeRegalProc(loader_wglBlitContextFramebufferAMD, layer);

    _getProcAddress( driver_wglCreateAssociatedContextAMD, wglCreateAssociatedContextAMD, "wglCreateAssociatedContextAMD" );
    if( driver_wglCreateAssociatedContextAMD == NULL ) {
      driver_wglCreateAssociatedContextAMD = missing_wglCreateAssociatedContextAMD;
    }
    dt.wglCreateAssociatedContextAMD = MakeRegalProc(loader_wglCreateAssociatedContextAMD, layer);

    _getProcAddress( driver_wglCreateAssociatedContextAttribsAMD, wglCreateAssociatedContextAttribsAMD, "wglCreateAssociatedContextAttribsAMD" );
    if( driver_wglCreateAssociatedContextAttribsAMD == NULL ) {
      driver_wglCreateAssociatedContextAttribsAMD = missing_wglCreateAssociatedContextAttribsAMD;
    }
    dt.wglCreateAssociatedContextAttribsAMD = MakeRegalProc(loader_wglCreateAssociatedContextAttribsAMD, layer);

    _getProcAddress( driver_wglDeleteAssociatedContextAMD, wglDeleteAssociatedContextAMD, "wglDeleteAssociatedContextAMD" );
    if( driver_wglDeleteAssociatedContextAMD == NULL ) {
      driver_wglDeleteAssociatedContextAMD = missing_wglDeleteAssociatedContextAMD;
    }
    dt.wglDeleteAssociatedContextAMD = MakeRegalProc(loader_wglDeleteAssociatedContextAMD, layer);

    _getProcAddress( driver_wglGetContextGPUIDAMD, wglGetContextGPUIDAMD, "wglGetContextGPUIDAMD" );
    if( driver_wglGetContextGPUIDAMD == NULL ) {
      driver_wglGetContextGPUIDAMD = missing_wglGetContextGPUIDAMD;
    }
    dt.wglGetContextGPUIDAMD = MakeRegalProc(loader_wglGetContextGPUIDAMD, layer);

    _getProcAddress( driver_wglGetCurrentAssociatedContextAMD, wglGetCurrentAssociatedContextAMD, "wglGetCurrentAssociatedContextAMD" );
    if( driver_wglGetCurrentAssociatedContextAMD == NULL ) {
      driver_wglGetCurrentAssociatedContextAMD = missing_wglGetCurrentAssociatedContextAMD;
    }
    dt.wglGetCurrentAssociatedContextAMD = MakeRegalProc(loader_wglGetCurrentAssociatedContextAMD, layer);

    _getProcAddress( driver_wglGetGPUIDsAMD, wglGetGPUIDsAMD, "wglGetGPUIDsAMD" );
    if( driver_wglGetGPUIDsAMD == NULL ) {
      driver_wglGetGPUIDsAMD = missing_wglGetGPUIDsAMD;
    }
    dt.wglGetGPUIDsAMD = MakeRegalProc(loader_wglGetGPUIDsAMD, layer);

    _getProcAddress( driver_wglGetGPUInfoAMD, wglGetGPUInfoAMD, "wglGetGPUInfoAMD" );
    if( driver_wglGetGPUInfoAMD == NULL ) {
      driver_wglGetGPUInfoAMD = missing_wglGetGPUInfoAMD;
    }
    dt.wglGetGPUInfoAMD = MakeRegalProc(loader_wglGetGPUInfoAMD, layer);

    _getProcAddress( driver_wglMakeAssociatedContextCurrentAMD, wglMakeAssociatedContextCurrentAMD, "wglMakeAssociatedContextCurrentAMD" );
    if( driver_wglMakeAssociatedContextCurrentAMD == NULL ) {
      driver_wglMakeAssociatedContextCurrentAMD = missing_wglMakeAssociatedContextCurrentAMD;
    }
    dt.wglMakeAssociatedContextCurrentAMD = MakeRegalProc(loader_wglMakeAssociatedContextCurrentAMD, layer);

    // WGL_ARB_buffer_region

    _getProcAddress( driver_wglCreateBufferRegionARB, wglCreateBufferRegionARB, "wglCreateBufferRegionARB" );
    if( driver_wglCreateBufferRegionARB == NULL ) {
      driver_wglCreateBufferRegionARB = missing_wglCreateBufferRegionARB;
    }
    dt.wglCreateBufferRegionARB = MakeRegalProc(loader_wglCreateBufferRegionARB, layer);

    _getProcAddress( driver_wglDeleteBufferRegionARB, wglDeleteBufferRegionARB, "wglDeleteBufferRegionARB" );
    if( driver_wglDeleteBufferRegionARB == NULL ) {
      driver_wglDeleteBufferRegionARB = missing_wglDeleteBufferRegionARB;
    }
    dt.wglDeleteBufferRegionARB = MakeRegalProc(loader_wglDeleteBufferRegionARB, layer);

    _getProcAddress( driver_wglRestoreBufferRegionARB, wglRestoreBufferRegionARB, "wglRestoreBufferRegionARB" );
    if( driver_wglRestoreBufferRegionARB == NULL ) {
      driver_wglRestoreBufferRegionARB = missing_wglRestoreBufferRegionARB;
    }
    dt.wglRestoreBufferRegionARB = MakeRegalProc(loader_wglRestoreBufferRegionARB, layer);

    _getProcAddress( driver_wglSaveBufferRegionARB, wglSaveBufferRegionARB, "wglSaveBufferRegionARB" );
    if( driver_wglSaveBufferRegionARB == NULL ) {
      driver_wglSaveBufferRegionARB = missing_wglSaveBufferRegionARB;
    }
    dt.wglSaveBufferRegionARB = MakeRegalProc(loader_wglSaveBufferRegionARB, layer);

    // WGL_ARB_create_context

    _getProcAddress( driver_wglCreateContextAttribsARB, wglCreateContextAttribsARB, "wglCreateContextAttribsARB" );
    if( driver_wglCreateContextAttribsARB == NULL ) {
      driver_wglCreateContextAttribsARB = missing_wglCreateContextAttribsARB;
    }
    dt.wglCreateContextAttribsARB = MakeRegalProc(loader_wglCreateContextAttribsARB, layer);

    // WGL_ARB_extensions_string

    _getProcAddress( driver_wglGetExtensionsStringARB, wglGetExtensionsStringARB, "wglGetExtensionsStringARB" );
    if( driver_wglGetExtensionsStringARB == NULL ) {
      driver_wglGetExtensionsStringARB = missing_wglGetExtensionsStringARB;
    }
    dt.wglGetExtensionsStringARB = MakeRegalProc(loader_wglGetExtensionsStringARB, layer);

    // WGL_ARB_make_current_read

    _getProcAddress( driver_wglGetCurrentReadDCARB, wglGetCurrentReadDCARB, "wglGetCurrentReadDCARB" );
    if( driver_wglGetCurrentReadDCARB == NULL ) {
      driver_wglGetCurrentReadDCARB = missing_wglGetCurrentReadDCARB;
    }
    dt.wglGetCurrentReadDCARB = MakeRegalProc(loader_wglGetCurrentReadDCARB, layer);

    _getProcAddress( driver_wglMakeContextCurrentARB, wglMakeContextCurrentARB, "wglMakeContextCurrentARB" );
    if( driver_wglMakeContextCurrentARB == NULL ) {
      driver_wglMakeContextCurrentARB = missing_wglMakeContextCurrentARB;
    }
    dt.wglMakeContextCurrentARB = MakeRegalProc(loader_wglMakeContextCurrentARB, layer);

    // WGL_ARB_pbuffer

    _getProcAddress( driver_wglCreatePbufferARB, wglCreatePbufferARB, "wglCreatePbufferARB" );
    if( driver_wglCreatePbufferARB == NULL ) {
      driver_wglCreatePbufferARB = missing_wglCreatePbufferARB;
    }
    dt.wglCreatePbufferARB = MakeRegalProc(loader_wglCreatePbufferARB, layer);

    _getProcAddress( driver_wglDestroyPbufferARB, wglDestroyPbufferARB, "wglDestroyPbufferARB" );
    if( driver_wglDestroyPbufferARB == NULL ) {
      driver_wglDestroyPbufferARB = missing_wglDestroyPbufferARB;
    }
    dt.wglDestroyPbufferARB = MakeRegalProc(loader_wglDestroyPbufferARB, layer);

    _getProcAddress( driver_wglGetPbufferDCARB, wglGetPbufferDCARB, "wglGetPbufferDCARB" );
    if( driver_wglGetPbufferDCARB == NULL ) {
      driver_wglGetPbufferDCARB = missing_wglGetPbufferDCARB;
    }
    dt.wglGetPbufferDCARB = MakeRegalProc(loader_wglGetPbufferDCARB, layer);

    _getProcAddress( driver_wglQueryPbufferARB, wglQueryPbufferARB, "wglQueryPbufferARB" );
    if( driver_wglQueryPbufferARB == NULL ) {
      driver_wglQueryPbufferARB = missing_wglQueryPbufferARB;
    }
    dt.wglQueryPbufferARB = MakeRegalProc(loader_wglQueryPbufferARB, layer);

    _getProcAddress( driver_wglReleasePbufferDCARB, wglReleasePbufferDCARB, "wglReleasePbufferDCARB" );
    if( driver_wglReleasePbufferDCARB == NULL ) {
      driver_wglReleasePbufferDCARB = missing_wglReleasePbufferDCARB;
    }
    dt.wglReleasePbufferDCARB = MakeRegalProc(loader_wglReleasePbufferDCARB, layer);

    // WGL_ARB_pixel_format

    _getProcAddress( driver_wglChoosePixelFormatARB, wglChoosePixelFormatARB, "wglChoosePixelFormatARB" );
    if( driver_wglChoosePixelFormatARB == NULL ) {
      driver_wglChoosePixelFormatARB = missing_wglChoosePixelFormatARB;
    }
    dt.wglChoosePixelFormatARB = MakeRegalProc(loader_wglChoosePixelFormatARB, layer);

    _getProcAddress( driver_wglGetPixelFormatAttribfvARB, wglGetPixelFormatAttribfvARB, "wglGetPixelFormatAttribfvARB" );
    if( driver_wglGetPixelFormatAttribfvARB == NULL ) {
      driver_wglGetPixelFormatAttribfvARB = missing_wglGetPixelFormatAttribfvARB;
    }
    dt.wglGetPixelFormatAttribfvARB = MakeRegalProc(loader_wglGetPixelFormatAttribfvARB, layer);

    _getProcAddress( driver_wglGetPixelFormatAttribivARB, wglGetPixelFormatAttribivARB, "wglGetPixelFormatAttribivARB" );
    if( driver_wglGetPixelFormatAttribivARB == NULL ) {
      driver_wglGetPixelFormatAttribivARB = missing_wglGetPixelFormatAttribivARB;
    }
    dt.wglGetPixelFormatAttribivARB = MakeRegalProc(loader_wglGetPixelFormatAttribivARB, layer);

    // WGL_ARB_render_texture

    _getProcAddress( driver_wglBindTexImageARB, wglBindTexImageARB, "wglBindTexImageARB" );
    if( driver_wglBindTexImageARB == NULL ) {
      driver_wglBindTexImageARB = missing_wglBindTexImageARB;
    }
    dt.wglBindTexImageARB = MakeRegalProc(loader_wglBindTexImageARB, layer);

    _getProcAddress( driver_wglReleaseTexImageARB, wglReleaseTexImageARB, "wglReleaseTexImageARB" );
    if( driver_wglReleaseTexImageARB == NULL ) {
      driver_wglReleaseTexImageARB = missing_wglReleaseTexImageARB;
    }
    dt.wglReleaseTexImageARB = MakeRegalProc(loader_wglReleaseTexImageARB, layer);

    _getProcAddress( driver_wglSetPbufferAttribARB, wglSetPbufferAttribARB, "wglSetPbufferAttribARB" );
    if( driver_wglSetPbufferAttribARB == NULL ) {
      driver_wglSetPbufferAttribARB = missing_wglSetPbufferAttribARB;
    }
    dt.wglSetPbufferAttribARB = MakeRegalProc(loader_wglSetPbufferAttribARB, layer);

    // WGL_EXT_display_color_table

    _getProcAddress( driver_wglBindDisplayColorTableEXT, wglBindDisplayColorTableEXT, "wglBindDisplayColorTableEXT" );
    if( driver_wglBindDisplayColorTableEXT == NULL ) {
      driver_wglBindDisplayColorTableEXT = missing_wglBindDisplayColorTableEXT;
    }
    dt.wglBindDisplayColorTableEXT = MakeRegalProc(loader_wglBindDisplayColorTableEXT, layer);

    _getProcAddress( driver_wglCreateDisplayColorTableEXT, wglCreateDisplayColorTableEXT, "wglCreateDisplayColorTableEXT" );
    if( driver_wglCreateDisplayColorTableEXT == NULL ) {
      driver_wglCreateDisplayColorTableEXT = missing_wglCreateDisplayColorTableEXT;
    }
    dt.wglCreateDisplayColorTableEXT = MakeRegalProc(loader_wglCreateDisplayColorTableEXT, layer);

    _getProcAddress( driver_wglDestroyDisplayColorTableEXT, wglDestroyDisplayColorTableEXT, "wglDestroyDisplayColorTableEXT" );
    if( driver_wglDestroyDisplayColorTableEXT == NULL ) {
      driver_wglDestroyDisplayColorTableEXT = missing_wglDestroyDisplayColorTableEXT;
    }
    dt.wglDestroyDisplayColorTableEXT = MakeRegalProc(loader_wglDestroyDisplayColorTableEXT, layer);

    _getProcAddress( driver_wglLoadDisplayColorTableEXT, wglLoadDisplayColorTableEXT, "wglLoadDisplayColorTableEXT" );
    if( driver_wglLoadDisplayColorTableEXT == NULL ) {
      driver_wglLoadDisplayColorTableEXT = missing_wglLoadDisplayColorTableEXT;
    }
    dt.wglLoadDisplayColorTableEXT = MakeRegalProc(loader_wglLoadDisplayColorTableEXT, layer);

    // WGL_EXT_extensions_string

    _getProcAddress( driver_wglGetExtensionsStringEXT, wglGetExtensionsStringEXT, "wglGetExtensionsStringEXT" );
    if( driver_wglGetExtensionsStringEXT == NULL ) {
      driver_wglGetExtensionsStringEXT = missing_wglGetExtensionsStringEXT;
    }
    dt.wglGetExtensionsStringEXT = MakeRegalProc(loader_wglGetExtensionsStringEXT, layer);

    // WGL_EXT_make_current_read

    _getProcAddress( driver_wglGetCurrentReadDCEXT, wglGetCurrentReadDCEXT, "wglGetCurrentReadDCEXT" );
    if( driver_wglGetCurrentReadDCEXT == NULL ) {
      driver_wglGetCurrentReadDCEXT = missing_wglGetCurrentReadDCEXT;
    }
    dt.wglGetCurrentReadDCEXT = MakeRegalProc(loader_wglGetCurrentReadDCEXT, layer);

    _getProcAddress( driver_wglMakeContextCurrentEXT, wglMakeContextCurrentEXT, "wglMakeContextCurrentEXT" );
    if( driver_wglMakeContextCurrentEXT == NULL ) {
      driver_wglMakeContextCurrentEXT = missing_wglMakeContextCurrentEXT;
    }
    dt.wglMakeContextCurrentEXT = MakeRegalProc(loader_wglMakeContextCurrentEXT, layer);

    // WGL_EXT_pbuffer

    _getProcAddress( driver_wglCreatePbufferEXT, wglCreatePbufferEXT, "wglCreatePbufferEXT" );
    if( driver_wglCreatePbufferEXT == NULL ) {
      driver_wglCreatePbufferEXT = missing_wglCreatePbufferEXT;
    }
    dt.wglCreatePbufferEXT = MakeRegalProc(loader_wglCreatePbufferEXT, layer);

    _getProcAddress( driver_wglDestroyPbufferEXT, wglDestroyPbufferEXT, "wglDestroyPbufferEXT" );
    if( driver_wglDestroyPbufferEXT == NULL ) {
      driver_wglDestroyPbufferEXT = missing_wglDestroyPbufferEXT;
    }
    dt.wglDestroyPbufferEXT = MakeRegalProc(loader_wglDestroyPbufferEXT, layer);

    _getProcAddress( driver_wglGetPbufferDCEXT, wglGetPbufferDCEXT, "wglGetPbufferDCEXT" );
    if( driver_wglGetPbufferDCEXT == NULL ) {
      driver_wglGetPbufferDCEXT = missing_wglGetPbufferDCEXT;
    }
    dt.wglGetPbufferDCEXT = MakeRegalProc(loader_wglGetPbufferDCEXT, layer);

    _getProcAddress( driver_wglQueryPbufferEXT, wglQueryPbufferEXT, "wglQueryPbufferEXT" );
    if( driver_wglQueryPbufferEXT == NULL ) {
      driver_wglQueryPbufferEXT = missing_wglQueryPbufferEXT;
    }
    dt.wglQueryPbufferEXT = MakeRegalProc(loader_wglQueryPbufferEXT, layer);

    _getProcAddress( driver_wglReleasePbufferDCEXT, wglReleasePbufferDCEXT, "wglReleasePbufferDCEXT" );
    if( driver_wglReleasePbufferDCEXT == NULL ) {
      driver_wglReleasePbufferDCEXT = missing_wglReleasePbufferDCEXT;
    }
    dt.wglReleasePbufferDCEXT = MakeRegalProc(loader_wglReleasePbufferDCEXT, layer);

    // WGL_EXT_pixel_format

    _getProcAddress( driver_wglChoosePixelFormatEXT, wglChoosePixelFormatEXT, "wglChoosePixelFormatEXT" );
    if( driver_wglChoosePixelFormatEXT == NULL ) {
      driver_wglChoosePixelFormatEXT = missing_wglChoosePixelFormatEXT;
    }
    dt.wglChoosePixelFormatEXT = MakeRegalProc(loader_wglChoosePixelFormatEXT, layer);

    _getProcAddress( driver_wglGetPixelFormatAttribfvEXT, wglGetPixelFormatAttribfvEXT, "wglGetPixelFormatAttribfvEXT" );
    if( driver_wglGetPixelFormatAttribfvEXT == NULL ) {
      driver_wglGetPixelFormatAttribfvEXT = missing_wglGetPixelFormatAttribfvEXT;
    }
    dt.wglGetPixelFormatAttribfvEXT = MakeRegalProc(loader_wglGetPixelFormatAttribfvEXT, layer);

    _getProcAddress( driver_wglGetPixelFormatAttribivEXT, wglGetPixelFormatAttribivEXT, "wglGetPixelFormatAttribivEXT" );
    if( driver_wglGetPixelFormatAttribivEXT == NULL ) {
      driver_wglGetPixelFormatAttribivEXT = missing_wglGetPixelFormatAttribivEXT;
    }
    dt.wglGetPixelFormatAttribivEXT = MakeRegalProc(loader_wglGetPixelFormatAttribivEXT, layer);

    // WGL_EXT_swap_control

    _getProcAddress( driver_wglGetSwapIntervalEXT, wglGetSwapIntervalEXT, "wglGetSwapIntervalEXT" );
    if( driver_wglGetSwapIntervalEXT == NULL ) {
      driver_wglGetSwapIntervalEXT = missing_wglGetSwapIntervalEXT;
    }
    dt.wglGetSwapIntervalEXT = MakeRegalProc(loader_wglGetSwapIntervalEXT, layer);

    _getProcAddress( driver_wglSwapIntervalEXT, wglSwapIntervalEXT, "wglSwapIntervalEXT" );
    if( driver_wglSwapIntervalEXT == NULL ) {
      driver_wglSwapIntervalEXT = missing_wglSwapIntervalEXT;
    }
    dt.wglSwapIntervalEXT = MakeRegalProc(loader_wglSwapIntervalEXT, layer);

    // WGL_GDI

    _getProcAddress( driver_SwapBuffers, SwapBuffers, "SwapBuffers" );
    if( driver_SwapBuffers == NULL ) {
      driver_SwapBuffers = missing_SwapBuffers;
    }
    dt.SwapBuffers = MakeRegalProc(loader_SwapBuffers, layer);

    _getProcAddress( driver_wglChoosePixelFormat, wglChoosePixelFormat, "wglChoosePixelFormat" );
    if( driver_wglChoosePixelFormat == NULL ) {
      driver_wglChoosePixelFormat = missing_wglChoosePixelFormat;
    }
    dt.wglChoosePixelFormat = MakeRegalProc(loader_wglChoosePixelFormat, layer);

    _getProcAddress( driver_wglDescribePixelFormat, wglDescribePixelFormat, "wglDescribePixelFormat" );
    if( driver_wglDescribePixelFormat == NULL ) {
      driver_wglDescribePixelFormat = missing_wglDescribePixelFormat;
    }
    dt.wglDescribePixelFormat = MakeRegalProc(loader_wglDescribePixelFormat, layer);

    _getProcAddress( driver_wglGetPixelFormat, wglGetPixelFormat, "wglGetPixelFormat" );
    if( driver_wglGetPixelFormat == NULL ) {
      driver_wglGetPixelFormat = missing_wglGetPixelFormat;
    }
    dt.wglGetPixelFormat = MakeRegalProc(loader_wglGetPixelFormat, layer);

    _getProcAddress( driver_wglSetPixelFormat, wglSetPixelFormat, "wglSetPixelFormat" );
    if( driver_wglSetPixelFormat == NULL ) {
      driver_wglSetPixelFormat = missing_wglSetPixelFormat;
    }
    dt.wglSetPixelFormat = MakeRegalProc(loader_wglSetPixelFormat, layer);

    _getProcAddress( driver_wglSwapBuffers, wglSwapBuffers, "wglSwapBuffers" );
    if( driver_wglSwapBuffers == NULL ) {
      driver_wglSwapBuffers = missing_wglSwapBuffers;
    }
    dt.wglSwapBuffers = MakeRegalProc(loader_wglSwapBuffers, layer);

    // WGL_I3D_digital_video_control

    _getProcAddress( driver_wglGetDigitalVideoParametersI3D, wglGetDigitalVideoParametersI3D, "wglGetDigitalVideoParametersI3D" );
    if( driver_wglGetDigitalVideoParametersI3D == NULL ) {
      driver_wglGetDigitalVideoParametersI3D = missing_wglGetDigitalVideoParametersI3D;
    }
    dt.wglGetDigitalVideoParametersI3D = MakeRegalProc(loader_wglGetDigitalVideoParametersI3D, layer);

    _getProcAddress( driver_wglSetDigitalVideoParametersI3D, wglSetDigitalVideoParametersI3D, "wglSetDigitalVideoParametersI3D" );
    if( driver_wglSetDigitalVideoParametersI3D == NULL ) {
      driver_wglSetDigitalVideoParametersI3D = missing_wglSetDigitalVideoParametersI3D;
    }
    dt.wglSetDigitalVideoParametersI3D = MakeRegalProc(loader_wglSetDigitalVideoParametersI3D, layer);

    // WGL_I3D_gamma

    _getProcAddress( driver_wglGetGammaTableI3D, wglGetGammaTableI3D, "wglGetGammaTableI3D" );
    if( driver_wglGetGammaTableI3D == NULL ) {
      driver_wglGetGammaTableI3D = missing_wglGetGammaTableI3D;
    }
    dt.wglGetGammaTableI3D = MakeRegalProc(loader_wglGetGammaTableI3D, layer);

    _getProcAddress( driver_wglGetGammaTableParametersI3D, wglGetGammaTableParametersI3D, "wglGetGammaTableParametersI3D" );
    if( driver_wglGetGammaTableParametersI3D == NULL ) {
      driver_wglGetGammaTableParametersI3D = missing_wglGetGammaTableParametersI3D;
    }
    dt.wglGetGammaTableParametersI3D = MakeRegalProc(loader_wglGetGammaTableParametersI3D, layer);

    _getProcAddress( driver_wglSetGammaTableI3D, wglSetGammaTableI3D, "wglSetGammaTableI3D" );
    if( driver_wglSetGammaTableI3D == NULL ) {
      driver_wglSetGammaTableI3D = missing_wglSetGammaTableI3D;
    }
    dt.wglSetGammaTableI3D = MakeRegalProc(loader_wglSetGammaTableI3D, layer);

    _getProcAddress( driver_wglSetGammaTableParametersI3D, wglSetGammaTableParametersI3D, "wglSetGammaTableParametersI3D" );
    if( driver_wglSetGammaTableParametersI3D == NULL ) {
      driver_wglSetGammaTableParametersI3D = missing_wglSetGammaTableParametersI3D;
    }
    dt.wglSetGammaTableParametersI3D = MakeRegalProc(loader_wglSetGammaTableParametersI3D, layer);

    // WGL_I3D_genlock

    _getProcAddress( driver_wglDisableGenlockI3D, wglDisableGenlockI3D, "wglDisableGenlockI3D" );
    if( driver_wglDisableGenlockI3D == NULL ) {
      driver_wglDisableGenlockI3D = missing_wglDisableGenlockI3D;
    }
    dt.wglDisableGenlockI3D = MakeRegalProc(loader_wglDisableGenlockI3D, layer);

    _getProcAddress( driver_wglEnableGenlockI3D, wglEnableGenlockI3D, "wglEnableGenlockI3D" );
    if( driver_wglEnableGenlockI3D == NULL ) {
      driver_wglEnableGenlockI3D = missing_wglEnableGenlockI3D;
    }
    dt.wglEnableGenlockI3D = MakeRegalProc(loader_wglEnableGenlockI3D, layer);

    _getProcAddress( driver_wglGenlockSampleRateI3D, wglGenlockSampleRateI3D, "wglGenlockSampleRateI3D" );
    if( driver_wglGenlockSampleRateI3D == NULL ) {
      driver_wglGenlockSampleRateI3D = missing_wglGenlockSampleRateI3D;
    }
    dt.wglGenlockSampleRateI3D = MakeRegalProc(loader_wglGenlockSampleRateI3D, layer);

    _getProcAddress( driver_wglGenlockSourceDelayI3D, wglGenlockSourceDelayI3D, "wglGenlockSourceDelayI3D" );
    if( driver_wglGenlockSourceDelayI3D == NULL ) {
      driver_wglGenlockSourceDelayI3D = missing_wglGenlockSourceDelayI3D;
    }
    dt.wglGenlockSourceDelayI3D = MakeRegalProc(loader_wglGenlockSourceDelayI3D, layer);

    _getProcAddress( driver_wglGenlockSourceEdgeI3D, wglGenlockSourceEdgeI3D, "wglGenlockSourceEdgeI3D" );
    if( driver_wglGenlockSourceEdgeI3D == NULL ) {
      driver_wglGenlockSourceEdgeI3D = missing_wglGenlockSourceEdgeI3D;
    }
    dt.wglGenlockSourceEdgeI3D = MakeRegalProc(loader_wglGenlockSourceEdgeI3D, layer);

    _getProcAddress( driver_wglGenlockSourceI3D, wglGenlockSourceI3D, "wglGenlockSourceI3D" );
    if( driver_wglGenlockSourceI3D == NULL ) {
      driver_wglGenlockSourceI3D = missing_wglGenlockSourceI3D;
    }
    dt.wglGenlockSourceI3D = MakeRegalProc(loader_wglGenlockSourceI3D, layer);

    _getProcAddress( driver_wglGetGenlockSampleRateI3D, wglGetGenlockSampleRateI3D, "wglGetGenlockSampleRateI3D" );
    if( driver_wglGetGenlockSampleRateI3D == NULL ) {
      driver_wglGetGenlockSampleRateI3D = missing_wglGetGenlockSampleRateI3D;
    }
    dt.wglGetGenlockSampleRateI3D = MakeRegalProc(loader_wglGetGenlockSampleRateI3D, layer);

    _getProcAddress( driver_wglGetGenlockSourceDelayI3D, wglGetGenlockSourceDelayI3D, "wglGetGenlockSourceDelayI3D" );
    if( driver_wglGetGenlockSourceDelayI3D == NULL ) {
      driver_wglGetGenlockSourceDelayI3D = missing_wglGetGenlockSourceDelayI3D;
    }
    dt.wglGetGenlockSourceDelayI3D = MakeRegalProc(loader_wglGetGenlockSourceDelayI3D, layer);

    _getProcAddress( driver_wglGetGenlockSourceEdgeI3D, wglGetGenlockSourceEdgeI3D, "wglGetGenlockSourceEdgeI3D" );
    if( driver_wglGetGenlockSourceEdgeI3D == NULL ) {
      driver_wglGetGenlockSourceEdgeI3D = missing_wglGetGenlockSourceEdgeI3D;
    }
    dt.wglGetGenlockSourceEdgeI3D = MakeRegalProc(loader_wglGetGenlockSourceEdgeI3D, layer);

    _getProcAddress( driver_wglGetGenlockSourceI3D, wglGetGenlockSourceI3D, "wglGetGenlockSourceI3D" );
    if( driver_wglGetGenlockSourceI3D == NULL ) {
      driver_wglGetGenlockSourceI3D = missing_wglGetGenlockSourceI3D;
    }
    dt.wglGetGenlockSourceI3D = MakeRegalProc(loader_wglGetGenlockSourceI3D, layer);

    _getProcAddress( driver_wglIsEnabledGenlockI3D, wglIsEnabledGenlockI3D, "wglIsEnabledGenlockI3D" );
    if( driver_wglIsEnabledGenlockI3D == NULL ) {
      driver_wglIsEnabledGenlockI3D = missing_wglIsEnabledGenlockI3D;
    }
    dt.wglIsEnabledGenlockI3D = MakeRegalProc(loader_wglIsEnabledGenlockI3D, layer);

    _getProcAddress( driver_wglQueryGenlockMaxSourceDelayI3D, wglQueryGenlockMaxSourceDelayI3D, "wglQueryGenlockMaxSourceDelayI3D" );
    if( driver_wglQueryGenlockMaxSourceDelayI3D == NULL ) {
      driver_wglQueryGenlockMaxSourceDelayI3D = missing_wglQueryGenlockMaxSourceDelayI3D;
    }
    dt.wglQueryGenlockMaxSourceDelayI3D = MakeRegalProc(loader_wglQueryGenlockMaxSourceDelayI3D, layer);

    // WGL_I3D_image_buffer

    _getProcAddress( driver_wglAssociateImageBufferEventsI3D, wglAssociateImageBufferEventsI3D, "wglAssociateImageBufferEventsI3D" );
    if( driver_wglAssociateImageBufferEventsI3D == NULL ) {
      driver_wglAssociateImageBufferEventsI3D = missing_wglAssociateImageBufferEventsI3D;
    }
    dt.wglAssociateImageBufferEventsI3D = MakeRegalProc(loader_wglAssociateImageBufferEventsI3D, layer);

    _getProcAddress( driver_wglCreateImageBufferI3D, wglCreateImageBufferI3D, "wglCreateImageBufferI3D" );
    if( driver_wglCreateImageBufferI3D == NULL ) {
      driver_wglCreateImageBufferI3D = missing_wglCreateImageBufferI3D;
    }
    dt.wglCreateImageBufferI3D = MakeRegalProc(loader_wglCreateImageBufferI3D, layer);

    _getProcAddress( driver_wglDestroyImageBufferI3D, wglDestroyImageBufferI3D, "wglDestroyImageBufferI3D" );
    if( driver_wglDestroyImageBufferI3D == NULL ) {
      driver_wglDestroyImageBufferI3D = missing_wglDestroyImageBufferI3D;
    }
    dt.wglDestroyImageBufferI3D = MakeRegalProc(loader_wglDestroyImageBufferI3D, layer);

    _getProcAddress( driver_wglReleaseImageBufferEventsI3D, wglReleaseImageBufferEventsI3D, "wglReleaseImageBufferEventsI3D" );
    if( driver_wglReleaseImageBufferEventsI3D == NULL ) {
      driver_wglReleaseImageBufferEventsI3D = missing_wglReleaseImageBufferEventsI3D;
    }
    dt.wglReleaseImageBufferEventsI3D = MakeRegalProc(loader_wglReleaseImageBufferEventsI3D, layer);

    // WGL_I3D_swap_frame_lock

    _getProcAddress( driver_wglDisableFrameLockI3D, wglDisableFrameLockI3D, "wglDisableFrameLockI3D" );
    if( driver_wglDisableFrameLockI3D == NULL ) {
      driver_wglDisableFrameLockI3D = missing_wglDisableFrameLockI3D;
    }
    dt.wglDisableFrameLockI3D = MakeRegalProc(loader_wglDisableFrameLockI3D, layer);

    _getProcAddress( driver_wglEnableFrameLockI3D, wglEnableFrameLockI3D, "wglEnableFrameLockI3D" );
    if( driver_wglEnableFrameLockI3D == NULL ) {
      driver_wglEnableFrameLockI3D = missing_wglEnableFrameLockI3D;
    }
    dt.wglEnableFrameLockI3D = MakeRegalProc(loader_wglEnableFrameLockI3D, layer);

    _getProcAddress( driver_wglIsEnabledFrameLockI3D, wglIsEnabledFrameLockI3D, "wglIsEnabledFrameLockI3D" );
    if( driver_wglIsEnabledFrameLockI3D == NULL ) {
      driver_wglIsEnabledFrameLockI3D = missing_wglIsEnabledFrameLockI3D;
    }
    dt.wglIsEnabledFrameLockI3D = MakeRegalProc(loader_wglIsEnabledFrameLockI3D, layer);

    _getProcAddress( driver_wglQueryFrameLockMasterI3D, wglQueryFrameLockMasterI3D, "wglQueryFrameLockMasterI3D" );
    if( driver_wglQueryFrameLockMasterI3D == NULL ) {
      driver_wglQueryFrameLockMasterI3D = missing_wglQueryFrameLockMasterI3D;
    }
    dt.wglQueryFrameLockMasterI3D = MakeRegalProc(loader_wglQueryFrameLockMasterI3D, layer);

    // WGL_I3D_swap_frame_usage

    _getProcAddress( driver_wglBeginFrameTrackingI3D, wglBeginFrameTrackingI3D, "wglBeginFrameTrackingI3D" );
    if( driver_wglBeginFrameTrackingI3D == NULL ) {
      driver_wglBeginFrameTrackingI3D = missing_wglBeginFrameTrackingI3D;
    }
    dt.wglBeginFrameTrackingI3D = MakeRegalProc(loader_wglBeginFrameTrackingI3D, layer);

    _getProcAddress( driver_wglEndFrameTrackingI3D, wglEndFrameTrackingI3D, "wglEndFrameTrackingI3D" );
    if( driver_wglEndFrameTrackingI3D == NULL ) {
      driver_wglEndFrameTrackingI3D = missing_wglEndFrameTrackingI3D;
    }
    dt.wglEndFrameTrackingI3D = MakeRegalProc(loader_wglEndFrameTrackingI3D, layer);

    _getProcAddress( driver_wglGetFrameUsageI3D, wglGetFrameUsageI3D, "wglGetFrameUsageI3D" );
    if( driver_wglGetFrameUsageI3D == NULL ) {
      driver_wglGetFrameUsageI3D = missing_wglGetFrameUsageI3D;
    }
    dt.wglGetFrameUsageI3D = MakeRegalProc(loader_wglGetFrameUsageI3D, layer);

    _getProcAddress( driver_wglQueryFrameTrackingI3D, wglQueryFrameTrackingI3D, "wglQueryFrameTrackingI3D" );
    if( driver_wglQueryFrameTrackingI3D == NULL ) {
      driver_wglQueryFrameTrackingI3D = missing_wglQueryFrameTrackingI3D;
    }
    dt.wglQueryFrameTrackingI3D = MakeRegalProc(loader_wglQueryFrameTrackingI3D, layer);

    // WGL_NV_DX_interop

    _getProcAddress( driver_wglDXCloseDeviceNV, wglDXCloseDeviceNV, "wglDXCloseDeviceNV" );
    if( driver_wglDXCloseDeviceNV == NULL ) {
      driver_wglDXCloseDeviceNV = missing_wglDXCloseDeviceNV;
    }
    dt.wglDXCloseDeviceNV = MakeRegalProc(loader_wglDXCloseDeviceNV, layer);

    _getProcAddress( driver_wglDXLockObjectsNV, wglDXLockObjectsNV, "wglDXLockObjectsNV" );
    if( driver_wglDXLockObjectsNV == NULL ) {
      driver_wglDXLockObjectsNV = missing_wglDXLockObjectsNV;
    }
    dt.wglDXLockObjectsNV = MakeRegalProc(loader_wglDXLockObjectsNV, layer);

    _getProcAddress( driver_wglDXObjectAccessNV, wglDXObjectAccessNV, "wglDXObjectAccessNV" );
    if( driver_wglDXObjectAccessNV == NULL ) {
      driver_wglDXObjectAccessNV = missing_wglDXObjectAccessNV;
    }
    dt.wglDXObjectAccessNV = MakeRegalProc(loader_wglDXObjectAccessNV, layer);

    _getProcAddress( driver_wglDXOpenDeviceNV, wglDXOpenDeviceNV, "wglDXOpenDeviceNV" );
    if( driver_wglDXOpenDeviceNV == NULL ) {
      driver_wglDXOpenDeviceNV = missing_wglDXOpenDeviceNV;
    }
    dt.wglDXOpenDeviceNV = MakeRegalProc(loader_wglDXOpenDeviceNV, layer);

    _getProcAddress( driver_wglDXRegisterObjectNV, wglDXRegisterObjectNV, "wglDXRegisterObjectNV" );
    if( driver_wglDXRegisterObjectNV == NULL ) {
      driver_wglDXRegisterObjectNV = missing_wglDXRegisterObjectNV;
    }
    dt.wglDXRegisterObjectNV = MakeRegalProc(loader_wglDXRegisterObjectNV, layer);

    _getProcAddress( driver_wglDXSetResourceShareHandleNV, wglDXSetResourceShareHandleNV, "wglDXSetResourceShareHandleNV" );
    if( driver_wglDXSetResourceShareHandleNV == NULL ) {
      driver_wglDXSetResourceShareHandleNV = missing_wglDXSetResourceShareHandleNV;
    }
    dt.wglDXSetResourceShareHandleNV = MakeRegalProc(loader_wglDXSetResourceShareHandleNV, layer);

    _getProcAddress( driver_wglDXUnlockObjectsNV, wglDXUnlockObjectsNV, "wglDXUnlockObjectsNV" );
    if( driver_wglDXUnlockObjectsNV == NULL ) {
      driver_wglDXUnlockObjectsNV = missing_wglDXUnlockObjectsNV;
    }
    dt.wglDXUnlockObjectsNV = MakeRegalProc(loader_wglDXUnlockObjectsNV, layer);

    _getProcAddress( driver_wglDXUnregisterObjectNV, wglDXUnregisterObjectNV, "wglDXUnregisterObjectNV" );
    if( driver_wglDXUnregisterObjectNV == NULL ) {
      driver_wglDXUnregisterObjectNV = missing_wglDXUnregisterObjectNV;
    }
    dt.wglDXUnregisterObjectNV = MakeRegalProc(loader_wglDXUnregisterObjectNV, layer);

    // WGL_NV_copy_image

    _getProcAddress( driver_wglCopyImageSubDataNV, wglCopyImageSubDataNV, "wglCopyImageSubDataNV" );
    if( driver_wglCopyImageSubDataNV == NULL ) {
      driver_wglCopyImageSubDataNV = missing_wglCopyImageSubDataNV;
    }
    dt.wglCopyImageSubDataNV = MakeRegalProc(loader_wglCopyImageSubDataNV, layer);

    // WGL_NV_gpu_affinity

    _getProcAddress( driver_wglCreateAffinityDCNV, wglCreateAffinityDCNV, "wglCreateAffinityDCNV" );
    if( driver_wglCreateAffinityDCNV == NULL ) {
      driver_wglCreateAffinityDCNV = missing_wglCreateAffinityDCNV;
    }
    dt.wglCreateAffinityDCNV = MakeRegalProc(loader_wglCreateAffinityDCNV, layer);

    _getProcAddress( driver_wglDeleteDCNV, wglDeleteDCNV, "wglDeleteDCNV" );
    if( driver_wglDeleteDCNV == NULL ) {
      driver_wglDeleteDCNV = missing_wglDeleteDCNV;
    }
    dt.wglDeleteDCNV = MakeRegalProc(loader_wglDeleteDCNV, layer);

    _getProcAddress( driver_wglEnumGpuDevicesNV, wglEnumGpuDevicesNV, "wglEnumGpuDevicesNV" );
    if( driver_wglEnumGpuDevicesNV == NULL ) {
      driver_wglEnumGpuDevicesNV = missing_wglEnumGpuDevicesNV;
    }
    dt.wglEnumGpuDevicesNV = MakeRegalProc(loader_wglEnumGpuDevicesNV, layer);

    _getProcAddress( driver_wglEnumGpusFromAffinityDCNV, wglEnumGpusFromAffinityDCNV, "wglEnumGpusFromAffinityDCNV" );
    if( driver_wglEnumGpusFromAffinityDCNV == NULL ) {
      driver_wglEnumGpusFromAffinityDCNV = missing_wglEnumGpusFromAffinityDCNV;
    }
    dt.wglEnumGpusFromAffinityDCNV = MakeRegalProc(loader_wglEnumGpusFromAffinityDCNV, layer);

    _getProcAddress( driver_wglEnumGpusNV, wglEnumGpusNV, "wglEnumGpusNV" );
    if( driver_wglEnumGpusNV == NULL ) {
      driver_wglEnumGpusNV = missing_wglEnumGpusNV;
    }
    dt.wglEnumGpusNV = MakeRegalProc(loader_wglEnumGpusNV, layer);

    // WGL_NV_present_video

    _getProcAddress( driver_wglBindVideoDeviceNV, wglBindVideoDeviceNV, "wglBindVideoDeviceNV" );
    if( driver_wglBindVideoDeviceNV == NULL ) {
      driver_wglBindVideoDeviceNV = missing_wglBindVideoDeviceNV;
    }
    dt.wglBindVideoDeviceNV = MakeRegalProc(loader_wglBindVideoDeviceNV, layer);

    _getProcAddress( driver_wglEnumerateVideoDevicesNV, wglEnumerateVideoDevicesNV, "wglEnumerateVideoDevicesNV" );
    if( driver_wglEnumerateVideoDevicesNV == NULL ) {
      driver_wglEnumerateVideoDevicesNV = missing_wglEnumerateVideoDevicesNV;
    }
    dt.wglEnumerateVideoDevicesNV = MakeRegalProc(loader_wglEnumerateVideoDevicesNV, layer);

    _getProcAddress( driver_wglQueryCurrentContextNV, wglQueryCurrentContextNV, "wglQueryCurrentContextNV" );
    if( driver_wglQueryCurrentContextNV == NULL ) {
      driver_wglQueryCurrentContextNV = missing_wglQueryCurrentContextNV;
    }
    dt.wglQueryCurrentContextNV = MakeRegalProc(loader_wglQueryCurrentContextNV, layer);

    // WGL_NV_swap_group

    _getProcAddress( driver_wglBindSwapBarrierNV, wglBindSwapBarrierNV, "wglBindSwapBarrierNV" );
    if( driver_wglBindSwapBarrierNV == NULL ) {
      driver_wglBindSwapBarrierNV = missing_wglBindSwapBarrierNV;
    }
    dt.wglBindSwapBarrierNV = MakeRegalProc(loader_wglBindSwapBarrierNV, layer);

    _getProcAddress( driver_wglJoinSwapGroupNV, wglJoinSwapGroupNV, "wglJoinSwapGroupNV" );
    if( driver_wglJoinSwapGroupNV == NULL ) {
      driver_wglJoinSwapGroupNV = missing_wglJoinSwapGroupNV;
    }
    dt.wglJoinSwapGroupNV = MakeRegalProc(loader_wglJoinSwapGroupNV, layer);

    _getProcAddress( driver_wglQueryFrameCountNV, wglQueryFrameCountNV, "wglQueryFrameCountNV" );
    if( driver_wglQueryFrameCountNV == NULL ) {
      driver_wglQueryFrameCountNV = missing_wglQueryFrameCountNV;
    }
    dt.wglQueryFrameCountNV = MakeRegalProc(loader_wglQueryFrameCountNV, layer);

    _getProcAddress( driver_wglQueryMaxSwapGroupsNV, wglQueryMaxSwapGroupsNV, "wglQueryMaxSwapGroupsNV" );
    if( driver_wglQueryMaxSwapGroupsNV == NULL ) {
      driver_wglQueryMaxSwapGroupsNV = missing_wglQueryMaxSwapGroupsNV;
    }
    dt.wglQueryMaxSwapGroupsNV = MakeRegalProc(loader_wglQueryMaxSwapGroupsNV, layer);

    _getProcAddress( driver_wglQuerySwapGroupNV, wglQuerySwapGroupNV, "wglQuerySwapGroupNV" );
    if( driver_wglQuerySwapGroupNV == NULL ) {
      driver_wglQuerySwapGroupNV = missing_wglQuerySwapGroupNV;
    }
    dt.wglQuerySwapGroupNV = MakeRegalProc(loader_wglQuerySwapGroupNV, layer);

    _getProcAddress( driver_wglResetFrameCountNV, wglResetFrameCountNV, "wglResetFrameCountNV" );
    if( driver_wglResetFrameCountNV == NULL ) {
      driver_wglResetFrameCountNV = missing_wglResetFrameCountNV;
    }
    dt.wglResetFrameCountNV = MakeRegalProc(loader_wglResetFrameCountNV, layer);

    // WGL_NV_vertex_array_range

    _getProcAddress( driver_wglAllocateMemoryNV, wglAllocateMemoryNV, "wglAllocateMemoryNV" );
    if( driver_wglAllocateMemoryNV == NULL ) {
      driver_wglAllocateMemoryNV = missing_wglAllocateMemoryNV;
    }
    dt.wglAllocateMemoryNV = MakeRegalProc(loader_wglAllocateMemoryNV, layer);

    _getProcAddress( driver_wglFreeMemoryNV, wglFreeMemoryNV, "wglFreeMemoryNV" );
    if( driver_wglFreeMemoryNV == NULL ) {
      driver_wglFreeMemoryNV = missing_wglFreeMemoryNV;
    }
    dt.wglFreeMemoryNV = MakeRegalProc(loader_wglFreeMemoryNV, layer);

    // WGL_NV_video_capture

    _getProcAddress( driver_wglBindVideoCaptureDeviceNV, wglBindVideoCaptureDeviceNV, "wglBindVideoCaptureDeviceNV" );
    if( driver_wglBindVideoCaptureDeviceNV == NULL ) {
      driver_wglBindVideoCaptureDeviceNV = missing_wglBindVideoCaptureDeviceNV;
    }
    dt.wglBindVideoCaptureDeviceNV = MakeRegalProc(loader_wglBindVideoCaptureDeviceNV, layer);

    _getProcAddress( driver_wglEnumerateVideoCaptureDevicesNV, wglEnumerateVideoCaptureDevicesNV, "wglEnumerateVideoCaptureDevicesNV" );
    if( driver_wglEnumerateVideoCaptureDevicesNV == NULL ) {
      driver_wglEnumerateVideoCaptureDevicesNV = missing_wglEnumerateVideoCaptureDevicesNV;
    }
    dt.wglEnumerateVideoCaptureDevicesNV = MakeRegalProc(loader_wglEnumerateVideoCaptureDevicesNV, layer);

    _getProcAddress( driver_wglLockVideoCaptureDeviceNV, wglLockVideoCaptureDeviceNV, "wglLockVideoCaptureDeviceNV" );
    if( driver_wglLockVideoCaptureDeviceNV == NULL ) {
      driver_wglLockVideoCaptureDeviceNV = missing_wglLockVideoCaptureDeviceNV;
    }
    dt.wglLockVideoCaptureDeviceNV = MakeRegalProc(loader_wglLockVideoCaptureDeviceNV, layer);

    _getProcAddress( driver_wglQueryVideoCaptureDeviceNV, wglQueryVideoCaptureDeviceNV, "wglQueryVideoCaptureDeviceNV" );
    if( driver_wglQueryVideoCaptureDeviceNV == NULL ) {
      driver_wglQueryVideoCaptureDeviceNV = missing_wglQueryVideoCaptureDeviceNV;
    }
    dt.wglQueryVideoCaptureDeviceNV = MakeRegalProc(loader_wglQueryVideoCaptureDeviceNV, layer);

    _getProcAddress( driver_wglReleaseVideoCaptureDeviceNV, wglReleaseVideoCaptureDeviceNV, "wglReleaseVideoCaptureDeviceNV" );
    if( driver_wglReleaseVideoCaptureDeviceNV == NULL ) {
      driver_wglReleaseVideoCaptureDeviceNV = missing_wglReleaseVideoCaptureDeviceNV;
    }
    dt.wglReleaseVideoCaptureDeviceNV = MakeRegalProc(loader_wglReleaseVideoCaptureDeviceNV, layer);

    // WGL_NV_video_output

    _getProcAddress( driver_wglBindVideoImageNV, wglBindVideoImageNV, "wglBindVideoImageNV" );
    if( driver_wglBindVideoImageNV == NULL ) {
      driver_wglBindVideoImageNV = missing_wglBindVideoImageNV;
    }
    dt.wglBindVideoImageNV = MakeRegalProc(loader_wglBindVideoImageNV, layer);

    _getProcAddress( driver_wglGetVideoDeviceNV, wglGetVideoDeviceNV, "wglGetVideoDeviceNV" );
    if( driver_wglGetVideoDeviceNV == NULL ) {
      driver_wglGetVideoDeviceNV = missing_wglGetVideoDeviceNV;
    }
    dt.wglGetVideoDeviceNV = MakeRegalProc(loader_wglGetVideoDeviceNV, layer);

    _getProcAddress( driver_wglGetVideoInfoNV, wglGetVideoInfoNV, "wglGetVideoInfoNV" );
    if( driver_wglGetVideoInfoNV == NULL ) {
      driver_wglGetVideoInfoNV = missing_wglGetVideoInfoNV;
    }
    dt.wglGetVideoInfoNV = MakeRegalProc(loader_wglGetVideoInfoNV, layer);

    _getProcAddress( driver_wglReleaseVideoDeviceNV, wglReleaseVideoDeviceNV, "wglReleaseVideoDeviceNV" );
    if( driver_wglReleaseVideoDeviceNV == NULL ) {
      driver_wglReleaseVideoDeviceNV = missing_wglReleaseVideoDeviceNV;
    }
    dt.wglReleaseVideoDeviceNV = MakeRegalProc(loader_wglReleaseVideoDeviceNV, layer);

    _getProcAddress( driver_wglReleaseVideoImageNV, wglReleaseVideoImageNV, "wglReleaseVideoImageNV" );
    if( driver_wglReleaseVideoImageNV == NULL ) {
      driver_wglReleaseVideoImageNV = missing_wglReleaseVideoImageNV;
    }
    dt.wglReleaseVideoImageNV = MakeRegalProc(loader_wglReleaseVideoImageNV, layer);

    _getProcAddress( driver_wglSendPbufferToVideoNV, wglSendPbufferToVideoNV, "wglSendPbufferToVideoNV" );
    if( driver_wglSendPbufferToVideoNV == NULL ) {
      driver_wglSendPbufferToVideoNV = missing_wglSendPbufferToVideoNV;
    }
    dt.wglSendPbufferToVideoNV = MakeRegalProc(loader_wglSendPbufferToVideoNV, layer);

    // WGL_OML_sync_control

    _getProcAddress( driver_wglGetMscRateOML, wglGetMscRateOML, "wglGetMscRateOML" );
    if( driver_wglGetMscRateOML == NULL ) {
      driver_wglGetMscRateOML = missing_wglGetMscRateOML;
    }
    dt.wglGetMscRateOML = MakeRegalProc(loader_wglGetMscRateOML, layer);

    _getProcAddress( driver_wglGetSyncValuesOML, wglGetSyncValuesOML, "wglGetSyncValuesOML" );
    if( driver_wglGetSyncValuesOML == NULL ) {
      driver_wglGetSyncValuesOML = missing_wglGetSyncValuesOML;
    }
    dt.wglGetSyncValuesOML = MakeRegalProc(loader_wglGetSyncValuesOML, layer);

    _getProcAddress( driver_wglSwapBuffersMscOML, wglSwapBuffersMscOML, "wglSwapBuffersMscOML" );
    if( driver_wglSwapBuffersMscOML == NULL ) {
      driver_wglSwapBuffersMscOML = missing_wglSwapBuffersMscOML;
    }
    dt.wglSwapBuffersMscOML = MakeRegalProc(loader_wglSwapBuffersMscOML, layer);

    _getProcAddress( driver_wglSwapLayerBuffersMscOML, wglSwapLayerBuffersMscOML, "wglSwapLayerBuffersMscOML" );
    if( driver_wglSwapLayerBuffersMscOML == NULL ) {
      driver_wglSwapLayerBuffersMscOML = missing_wglSwapLayerBuffersMscOML;
    }
    dt.wglSwapLayerBuffersMscOML = MakeRegalProc(loader_wglSwapLayerBuffersMscOML, layer);

    _getProcAddress( driver_wglWaitForMscOML, wglWaitForMscOML, "wglWaitForMscOML" );
    if( driver_wglWaitForMscOML == NULL ) {
      driver_wglWaitForMscOML = missing_wglWaitForMscOML;
    }
    dt.wglWaitForMscOML = MakeRegalProc(loader_wglWaitForMscOML, layer);

    _getProcAddress( driver_wglWaitForSbcOML, wglWaitForSbcOML, "wglWaitForSbcOML" );
    if( driver_wglWaitForSbcOML == NULL ) {
      driver_wglWaitForSbcOML = missing_wglWaitForSbcOML;
    }
    dt.wglWaitForSbcOML = MakeRegalProc(loader_wglWaitForSbcOML, layer);

    // WGL_core

    _getProcAddress( driver_wglCopyContext, wglCopyContext, "wglCopyContext" );
    if( driver_wglCopyContext == NULL ) {
      driver_wglCopyContext = missing_wglCopyContext;
    }
    dt.wglCopyContext = MakeRegalProc(loader_wglCopyContext, layer);

    _getProcAddress( driver_wglCreateContext, wglCreateContext, "wglCreateContext" );
    if( driver_wglCreateContext == NULL ) {
      driver_wglCreateContext = missing_wglCreateContext;
    }
    dt.wglCreateContext = MakeRegalProc(loader_wglCreateContext, layer);

    _getProcAddress( driver_wglCreateLayerContext, wglCreateLayerContext, "wglCreateLayerContext" );
    if( driver_wglCreateLayerContext == NULL ) {
      driver_wglCreateLayerContext = missing_wglCreateLayerContext;
    }
    dt.wglCreateLayerContext = MakeRegalProc(loader_wglCreateLayerContext, layer);

    _getProcAddress( driver_wglDeleteContext, wglDeleteContext, "wglDeleteContext" );
    if( driver_wglDeleteContext == NULL ) {
      driver_wglDeleteContext = missing_wglDeleteContext;
    }
    dt.wglDeleteContext = MakeRegalProc(loader_wglDeleteContext, layer);

    _getProcAddress( driver_wglDescribeLayerPlane, wglDescribeLayerPlane, "wglDescribeLayerPlane" );
    if( driver_wglDescribeLayerPlane == NULL ) {
      driver_wglDescribeLayerPlane = missing_wglDescribeLayerPlane;
    }
    dt.wglDescribeLayerPlane = MakeRegalProc(loader_wglDescribeLayerPlane, layer);

    _getProcAddress( driver_wglGetCurrentContext, wglGetCurrentContext, "wglGetCurrentContext" );
    if( driver_wglGetCurrentContext == NULL ) {
      driver_wglGetCurrentContext = missing_wglGetCurrentContext;
    }
    dt.wglGetCurrentContext = MakeRegalProc(loader_wglGetCurrentContext, layer);

    _getProcAddress( driver_wglGetCurrentDC, wglGetCurrentDC, "wglGetCurrentDC" );
    if( driver_wglGetCurrentDC == NULL ) {
      driver_wglGetCurrentDC = missing_wglGetCurrentDC;
    }
    dt.wglGetCurrentDC = MakeRegalProc(loader_wglGetCurrentDC, layer);

    _getProcAddress( driver_wglGetDefaultProcAddress, wglGetDefaultProcAddress, "wglGetDefaultProcAddress" );
    if( driver_wglGetDefaultProcAddress == NULL ) {
      driver_wglGetDefaultProcAddress = missing_wglGetDefaultProcAddress;
    }
    dt.wglGetDefaultProcAddress = MakeRegalProc(loader_wglGetDefaultProcAddress, layer);

    _getProcAddress( driver_wglGetLayerPaletteEntries, wglGetLayerPaletteEntries, "wglGetLayerPaletteEntries" );
    if( driver_wglGetLayerPaletteEntries == NULL ) {
      driver_wglGetLayerPaletteEntries = missing_wglGetLayerPaletteEntries;
    }
    dt.wglGetLayerPaletteEntries = MakeRegalProc(loader_wglGetLayerPaletteEntries, layer);

    _getProcAddress( driver_wglGetProcAddress, wglGetProcAddress, "wglGetProcAddress" );
    if( driver_wglGetProcAddress == NULL ) {
      driver_wglGetProcAddress = missing_wglGetProcAddress;
    }
    dt.wglGetProcAddress = MakeRegalProc(loader_wglGetProcAddress, layer);

    _getProcAddress( driver_wglMakeCurrent, wglMakeCurrent, "wglMakeCurrent" );
    if( driver_wglMakeCurrent == NULL ) {
      driver_wglMakeCurrent = missing_wglMakeCurrent;
    }
    dt.wglMakeCurrent = MakeRegalProc(loader_wglMakeCurrent, layer);

    _getProcAddress( driver_wglRealizeLayerPalette, wglRealizeLayerPalette, "wglRealizeLayerPalette" );
    if( driver_wglRealizeLayerPalette == NULL ) {
      driver_wglRealizeLayerPalette = missing_wglRealizeLayerPalette;
    }
    dt.wglRealizeLayerPalette = MakeRegalProc(loader_wglRealizeLayerPalette, layer);

    _getProcAddress( driver_wglSetLayerPaletteEntries, wglSetLayerPaletteEntries, "wglSetLayerPaletteEntries" );
    if( driver_wglSetLayerPaletteEntries == NULL ) {
      driver_wglSetLayerPaletteEntries = missing_wglSetLayerPaletteEntries;
    }
    dt.wglSetLayerPaletteEntries = MakeRegalProc(loader_wglSetLayerPaletteEntries, layer);

    _getProcAddress( driver_wglShareLists, wglShareLists, "wglShareLists" );
    if( driver_wglShareLists == NULL ) {
      driver_wglShareLists = missing_wglShareLists;
    }
    dt.wglShareLists = MakeRegalProc(loader_wglShareLists, layer);

    _getProcAddress( driver_wglSwapLayerBuffers, wglSwapLayerBuffers, "wglSwapLayerBuffers" );
    if( driver_wglSwapLayerBuffers == NULL ) {
      driver_wglSwapLayerBuffers = missing_wglSwapLayerBuffers;
    }
    dt.wglSwapLayerBuffers = MakeRegalProc(loader_wglSwapLayerBuffers, layer);

    _getProcAddress( driver_wglSwapMultipleBuffers, wglSwapMultipleBuffers, "wglSwapMultipleBuffers" );
    if( driver_wglSwapMultipleBuffers == NULL ) {
      driver_wglSwapMultipleBuffers = missing_wglSwapMultipleBuffers;
    }
    dt.wglSwapMultipleBuffers = MakeRegalProc(loader_wglSwapMultipleBuffers, layer);

    _getProcAddress( driver_wglUseFontBitmapsA, wglUseFontBitmapsA, "wglUseFontBitmapsA" );
    if( driver_wglUseFontBitmapsA == NULL ) {
      driver_wglUseFontBitmapsA = missing_wglUseFontBitmapsA;
    }
    dt.wglUseFontBitmapsA = MakeRegalProc(loader_wglUseFontBitmapsA, layer);

    _getProcAddress( driver_wglUseFontBitmapsW, wglUseFontBitmapsW, "wglUseFontBitmapsW" );
    if( driver_wglUseFontBitmapsW == NULL ) {
      driver_wglUseFontBitmapsW = missing_wglUseFontBitmapsW;
    }
    dt.wglUseFontBitmapsW = MakeRegalProc(loader_wglUseFontBitmapsW, layer);

    _getProcAddress( driver_wglUseFontOutlinesA, wglUseFontOutlinesA, "wglUseFontOutlinesA" );
    if( driver_wglUseFontOutlinesA == NULL ) {
      driver_wglUseFontOutlinesA = missing_wglUseFontOutlinesA;
    }
    dt.wglUseFontOutlinesA = MakeRegalProc(loader_wglUseFontOutlinesA, layer);

    _getProcAddress( driver_wglUseFontOutlinesW, wglUseFontOutlinesW, "wglUseFontOutlinesW" );
    if( driver_wglUseFontOutlinesW == NULL ) {
      driver_wglUseFontOutlinesW = missing_wglUseFontOutlinesW;
    }
    dt.wglUseFontOutlinesW = MakeRegalProc(loader_wglUseFontOutlinesW, layer);

  #endif // REGAL_SYS_WGL

  #if REGAL_SYS_GLX

    // GLX_VERSION_1_0

    _getProcAddress( driver_glXChooseVisual, glXChooseVisual, "glXChooseVisual" );
    if( driver_glXChooseVisual == NULL ) {
      driver_glXChooseVisual = missing_glXChooseVisual;
    }
    dt.glXChooseVisual = MakeRegalProc(loader_glXChooseVisual, layer);

    _getProcAddress( driver_glXCopyContext, glXCopyContext, "glXCopyContext" );
    if( driver_glXCopyContext == NULL ) {
      driver_glXCopyContext = missing_glXCopyContext;
    }
    dt.glXCopyContext = MakeRegalProc(loader_glXCopyContext, layer);

    _getProcAddress( driver_glXCreateContext, glXCreateContext, "glXCreateContext" );
    if( driver_glXCreateContext == NULL ) {
      driver_glXCreateContext = missing_glXCreateContext;
    }
    dt.glXCreateContext = MakeRegalProc(loader_glXCreateContext, layer);

    _getProcAddress( driver_glXCreateGLXPixmap, glXCreateGLXPixmap, "glXCreateGLXPixmap" );
    if( driver_glXCreateGLXPixmap == NULL ) {
      driver_glXCreateGLXPixmap = missing_glXCreateGLXPixmap;
    }
    dt.glXCreateGLXPixmap = MakeRegalProc(loader_glXCreateGLXPixmap, layer);

    _getProcAddress( driver_glXDestroyContext, glXDestroyContext, "glXDestroyContext" );
    if( driver_glXDestroyContext == NULL ) {
      driver_glXDestroyContext = missing_glXDestroyContext;
    }
    dt.glXDestroyContext = MakeRegalProc(loader_glXDestroyContext, layer);

    _getProcAddress( driver_glXDestroyGLXPixmap, glXDestroyGLXPixmap, "glXDestroyGLXPixmap" );
    if( driver_glXDestroyGLXPixmap == NULL ) {
      driver_glXDestroyGLXPixmap = missing_glXDestroyGLXPixmap;
    }
    dt.glXDestroyGLXPixmap = MakeRegalProc(loader_glXDestroyGLXPixmap, layer);

    _getProcAddress( driver_glXGetConfig, glXGetConfig, "glXGetConfig" );
    if( driver_glXGetConfig == NULL ) {
      driver_glXGetConfig = missing_glXGetConfig;
    }
    dt.glXGetConfig = MakeRegalProc(loader_glXGetConfig, layer);

    _getProcAddress( driver_glXGetCurrentContext, glXGetCurrentContext, "glXGetCurrentContext" );
    if( driver_glXGetCurrentContext == NULL ) {
      driver_glXGetCurrentContext = missing_glXGetCurrentContext;
    }
    dt.glXGetCurrentContext = MakeRegalProc(loader_glXGetCurrentContext, layer);

    _getProcAddress( driver_glXGetCurrentDrawable, glXGetCurrentDrawable, "glXGetCurrentDrawable" );
    if( driver_glXGetCurrentDrawable == NULL ) {
      driver_glXGetCurrentDrawable = missing_glXGetCurrentDrawable;
    }
    dt.glXGetCurrentDrawable = MakeRegalProc(loader_glXGetCurrentDrawable, layer);

    _getProcAddress( driver_glXIsDirect, glXIsDirect, "glXIsDirect" );
    if( driver_glXIsDirect == NULL ) {
      driver_glXIsDirect = missing_glXIsDirect;
    }
    dt.glXIsDirect = MakeRegalProc(loader_glXIsDirect, layer);

    _getProcAddress( driver_glXMakeCurrent, glXMakeCurrent, "glXMakeCurrent" );
    if( driver_glXMakeCurrent == NULL ) {
      driver_glXMakeCurrent = missing_glXMakeCurrent;
    }
    dt.glXMakeCurrent = MakeRegalProc(loader_glXMakeCurrent, layer);

    _getProcAddress( driver_glXQueryExtension, glXQueryExtension, "glXQueryExtension" );
    if( driver_glXQueryExtension == NULL ) {
      driver_glXQueryExtension = missing_glXQueryExtension;
    }
    dt.glXQueryExtension = MakeRegalProc(loader_glXQueryExtension, layer);

    _getProcAddress( driver_glXQueryVersion, glXQueryVersion, "glXQueryVersion" );
    if( driver_glXQueryVersion == NULL ) {
      driver_glXQueryVersion = missing_glXQueryVersion;
    }
    dt.glXQueryVersion = MakeRegalProc(loader_glXQueryVersion, layer);

    _getProcAddress( driver_glXSwapBuffers, glXSwapBuffers, "glXSwapBuffers" );
    if( driver_glXSwapBuffers == NULL ) {
      driver_glXSwapBuffers = missing_glXSwapBuffers;
    }
    dt.glXSwapBuffers = MakeRegalProc(loader_glXSwapBuffers, layer);

    _getProcAddress( driver_glXUseXFont, glXUseXFont, "glXUseXFont" );
    if( driver_glXUseXFont == NULL ) {
      driver_glXUseXFont = missing_glXUseXFont;
    }
    dt.glXUseXFont = MakeRegalProc(loader_glXUseXFont, layer);

    _getProcAddress( driver_glXWaitGL, glXWaitGL, "glXWaitGL" );
    if( driver_glXWaitGL == NULL ) {
      driver_glXWaitGL = missing_glXWaitGL;
    }
    dt.glXWaitGL = MakeRegalProc(loader_glXWaitGL, layer);

    _getProcAddress( driver_glXWaitX, glXWaitX, "glXWaitX" );
    if( driver_glXWaitX == NULL ) {
      driver_glXWaitX = missing_glXWaitX;
    }
    dt.glXWaitX = MakeRegalProc(loader_glXWaitX, layer);

    // GLX_VERSION_1_1

    _getProcAddress( driver_glXGetClientString, glXGetClientString, "glXGetClientString" );
    if( driver_glXGetClientString == NULL ) {
      driver_glXGetClientString = missing_glXGetClientString;
    }
    dt.glXGetClientString = MakeRegalProc(loader_glXGetClientString, layer);

    _getProcAddress( driver_glXQueryExtensionsString, glXQueryExtensionsString, "glXQueryExtensionsString" );
    if( driver_glXQueryExtensionsString == NULL ) {
      driver_glXQueryExtensionsString = missing_glXQueryExtensionsString;
    }
    dt.glXQueryExtensionsString = MakeRegalProc(loader_glXQueryExtensionsString, layer);

    _getProcAddress( driver_glXQueryServerString, glXQueryServerString, "glXQueryServerString" );
    if( driver_glXQueryServerString == NULL ) {
      driver_glXQueryServerString = missing_glXQueryServerString;
    }
    dt.glXQueryServerString = MakeRegalProc(loader_glXQueryServerString, layer);

    // GLX_VERSION_1_2

    _getProcAddress( driver_glXGetCurrentDisplay, glXGetCurrentDisplay, "glXGetCurrentDisplay" );
    if( driver_glXGetCurrentDisplay == NULL ) {
      driver_glXGetCurrentDisplay = missing_glXGetCurrentDisplay;
    }
    dt.glXGetCurrentDisplay = MakeRegalProc(loader_glXGetCurrentDisplay, layer);

    // GLX_VERSION_1_3

    _getProcAddress( driver_glXChooseFBConfig, glXChooseFBConfig, "glXChooseFBConfig" );
    if( driver_glXChooseFBConfig == NULL ) {
      driver_glXChooseFBConfig = missing_glXChooseFBConfig;
    }
    dt.glXChooseFBConfig = MakeRegalProc(loader_glXChooseFBConfig, layer);

    _getProcAddress( driver_glXCreateNewContext, glXCreateNewContext, "glXCreateNewContext" );
    if( driver_glXCreateNewContext == NULL ) {
      driver_glXCreateNewContext = missing_glXCreateNewContext;
    }
    dt.glXCreateNewContext = MakeRegalProc(loader_glXCreateNewContext, layer);

    _getProcAddress( driver_glXCreatePbuffer, glXCreatePbuffer, "glXCreatePbuffer" );
    if( driver_glXCreatePbuffer == NULL ) {
      driver_glXCreatePbuffer = missing_glXCreatePbuffer;
    }
    dt.glXCreatePbuffer = MakeRegalProc(loader_glXCreatePbuffer, layer);

    _getProcAddress( driver_glXCreatePixmap, glXCreatePixmap, "glXCreatePixmap" );
    if( driver_glXCreatePixmap == NULL ) {
      driver_glXCreatePixmap = missing_glXCreatePixmap;
    }
    dt.glXCreatePixmap = MakeRegalProc(loader_glXCreatePixmap, layer);

    _getProcAddress( driver_glXCreateWindow, glXCreateWindow, "glXCreateWindow" );
    if( driver_glXCreateWindow == NULL ) {
      driver_glXCreateWindow = missing_glXCreateWindow;
    }
    dt.glXCreateWindow = MakeRegalProc(loader_glXCreateWindow, layer);

    _getProcAddress( driver_glXDestroyPbuffer, glXDestroyPbuffer, "glXDestroyPbuffer" );
    if( driver_glXDestroyPbuffer == NULL ) {
      driver_glXDestroyPbuffer = missing_glXDestroyPbuffer;
    }
    dt.glXDestroyPbuffer = MakeRegalProc(loader_glXDestroyPbuffer, layer);

    _getProcAddress( driver_glXDestroyPixmap, glXDestroyPixmap, "glXDestroyPixmap" );
    if( driver_glXDestroyPixmap == NULL ) {
      driver_glXDestroyPixmap = missing_glXDestroyPixmap;
    }
    dt.glXDestroyPixmap = MakeRegalProc(loader_glXDestroyPixmap, layer);

    _getProcAddress( driver_glXDestroyWindow, glXDestroyWindow, "glXDestroyWindow" );
    if( driver_glXDestroyWindow == NULL ) {
      driver_glXDestroyWindow = missing_glXDestroyWindow;
    }
    dt.glXDestroyWindow = MakeRegalProc(loader_glXDestroyWindow, layer);

    _getProcAddress( driver_glXGetCurrentReadDrawable, glXGetCurrentReadDrawable, "glXGetCurrentReadDrawable" );
    if( driver_glXGetCurrentReadDrawable == NULL ) {
      driver_glXGetCurrentReadDrawable = missing_glXGetCurrentReadDrawable;
    }
    dt.glXGetCurrentReadDrawable = MakeRegalProc(loader_glXGetCurrentReadDrawable, layer);

    _getProcAddress( driver_glXGetFBConfigAttrib, glXGetFBConfigAttrib, "glXGetFBConfigAttrib" );
    if( driver_glXGetFBConfigAttrib == NULL ) {
      driver_glXGetFBConfigAttrib = missing_glXGetFBConfigAttrib;
    }
    dt.glXGetFBConfigAttrib = MakeRegalProc(loader_glXGetFBConfigAttrib, layer);

    _getProcAddress( driver_glXGetFBConfigs, glXGetFBConfigs, "glXGetFBConfigs" );
    if( driver_glXGetFBConfigs == NULL ) {
      driver_glXGetFBConfigs = missing_glXGetFBConfigs;
    }
    dt.glXGetFBConfigs = MakeRegalProc(loader_glXGetFBConfigs, layer);

    _getProcAddress( driver_glXGetSelectedEvent, glXGetSelectedEvent, "glXGetSelectedEvent" );
    if( driver_glXGetSelectedEvent == NULL ) {
      driver_glXGetSelectedEvent = missing_glXGetSelectedEvent;
    }
    dt.glXGetSelectedEvent = MakeRegalProc(loader_glXGetSelectedEvent, layer);

    _getProcAddress( driver_glXGetVisualFromFBConfig, glXGetVisualFromFBConfig, "glXGetVisualFromFBConfig" );
    if( driver_glXGetVisualFromFBConfig == NULL ) {
      driver_glXGetVisualFromFBConfig = missing_glXGetVisualFromFBConfig;
    }
    dt.glXGetVisualFromFBConfig = MakeRegalProc(loader_glXGetVisualFromFBConfig, layer);

    _getProcAddress( driver_glXMakeContextCurrent, glXMakeContextCurrent, "glXMakeContextCurrent" );
    if( driver_glXMakeContextCurrent == NULL ) {
      driver_glXMakeContextCurrent = missing_glXMakeContextCurrent;
    }
    dt.glXMakeContextCurrent = MakeRegalProc(loader_glXMakeContextCurrent, layer);

    _getProcAddress( driver_glXQueryContext, glXQueryContext, "glXQueryContext" );
    if( driver_glXQueryContext == NULL ) {
      driver_glXQueryContext = missing_glXQueryContext;
    }
    dt.glXQueryContext = MakeRegalProc(loader_glXQueryContext, layer);

    _getProcAddress( driver_glXQueryDrawable, glXQueryDrawable, "glXQueryDrawable" );
    if( driver_glXQueryDrawable == NULL ) {
      driver_glXQueryDrawable = missing_glXQueryDrawable;
    }
    dt.glXQueryDrawable = MakeRegalProc(loader_glXQueryDrawable, layer);

    _getProcAddress( driver_glXSelectEvent, glXSelectEvent, "glXSelectEvent" );
    if( driver_glXSelectEvent == NULL ) {
      driver_glXSelectEvent = missing_glXSelectEvent;
    }
    dt.glXSelectEvent = MakeRegalProc(loader_glXSelectEvent, layer);

    // GLX_VERSION_1_4

    _getProcAddress( driver_glXGetProcAddress, glXGetProcAddress, "glXGetProcAddress" );
    if( driver_glXGetProcAddress == NULL ) {
      driver_glXGetProcAddress = missing_glXGetProcAddress;
    }
    dt.glXGetProcAddress = MakeRegalProc(loader_glXGetProcAddress, layer);

    // GLX_AMD_gpu_association

    _getProcAddress( driver_glXBlitContextFramebufferAMD, glXBlitContextFramebufferAMD, "glXBlitContextFramebufferAMD" );
    if( driver_glXBlitContextFramebufferAMD == NULL ) {
      driver_glXBlitContextFramebufferAMD = missing_glXBlitContextFramebufferAMD;
    }
    dt.glXBlitContextFramebufferAMD = MakeRegalProc(loader_glXBlitContextFramebufferAMD, layer);

    _getProcAddress( driver_glXCreateAssociatedContextAMD, glXCreateAssociatedContextAMD, "glXCreateAssociatedContextAMD" );
    if( driver_glXCreateAssociatedContextAMD == NULL ) {
      driver_glXCreateAssociatedContextAMD = missing_glXCreateAssociatedContextAMD;
    }
    dt.glXCreateAssociatedContextAMD = MakeRegalProc(loader_glXCreateAssociatedContextAMD, layer);

    _getProcAddress( driver_glXCreateAssociatedContextAttribsAMD, glXCreateAssociatedContextAttribsAMD, "glXCreateAssociatedContextAttribsAMD" );
    if( driver_glXCreateAssociatedContextAttribsAMD == NULL ) {
      driver_glXCreateAssociatedContextAttribsAMD = missing_glXCreateAssociatedContextAttribsAMD;
    }
    dt.glXCreateAssociatedContextAttribsAMD = MakeRegalProc(loader_glXCreateAssociatedContextAttribsAMD, layer);

    _getProcAddress( driver_glXDeleteAssociatedContextAMD, glXDeleteAssociatedContextAMD, "glXDeleteAssociatedContextAMD" );
    if( driver_glXDeleteAssociatedContextAMD == NULL ) {
      driver_glXDeleteAssociatedContextAMD = missing_glXDeleteAssociatedContextAMD;
    }
    dt.glXDeleteAssociatedContextAMD = MakeRegalProc(loader_glXDeleteAssociatedContextAMD, layer);

    _getProcAddress( driver_glXGetContextGPUIDAMD, glXGetContextGPUIDAMD, "glXGetContextGPUIDAMD" );
    if( driver_glXGetContextGPUIDAMD == NULL ) {
      driver_glXGetContextGPUIDAMD = missing_glXGetContextGPUIDAMD;
    }
    dt.glXGetContextGPUIDAMD = MakeRegalProc(loader_glXGetContextGPUIDAMD, layer);

    _getProcAddress( driver_glXGetCurrentAssociatedContextAMD, glXGetCurrentAssociatedContextAMD, "glXGetCurrentAssociatedContextAMD" );
    if( driver_glXGetCurrentAssociatedContextAMD == NULL ) {
      driver_glXGetCurrentAssociatedContextAMD = missing_glXGetCurrentAssociatedContextAMD;
    }
    dt.glXGetCurrentAssociatedContextAMD = MakeRegalProc(loader_glXGetCurrentAssociatedContextAMD, layer);

    _getProcAddress( driver_glXGetGPUIDsAMD, glXGetGPUIDsAMD, "glXGetGPUIDsAMD" );
    if( driver_glXGetGPUIDsAMD == NULL ) {
      driver_glXGetGPUIDsAMD = missing_glXGetGPUIDsAMD;
    }
    dt.glXGetGPUIDsAMD = MakeRegalProc(loader_glXGetGPUIDsAMD, layer);

    _getProcAddress( driver_glXGetGPUInfoAMD, glXGetGPUInfoAMD, "glXGetGPUInfoAMD" );
    if( driver_glXGetGPUInfoAMD == NULL ) {
      driver_glXGetGPUInfoAMD = missing_glXGetGPUInfoAMD;
    }
    dt.glXGetGPUInfoAMD = MakeRegalProc(loader_glXGetGPUInfoAMD, layer);

    _getProcAddress( driver_glXMakeAssociatedContextCurrentAMD, glXMakeAssociatedContextCurrentAMD, "glXMakeAssociatedContextCurrentAMD" );
    if( driver_glXMakeAssociatedContextCurrentAMD == NULL ) {
      driver_glXMakeAssociatedContextCurrentAMD = missing_glXMakeAssociatedContextCurrentAMD;
    }
    dt.glXMakeAssociatedContextCurrentAMD = MakeRegalProc(loader_glXMakeAssociatedContextCurrentAMD, layer);

    // GLX_ARB_create_context

    _getProcAddress( driver_glXCreateContextAttribsARB, glXCreateContextAttribsARB, "glXCreateContextAttribsARB" );
    if( driver_glXCreateContextAttribsARB == NULL ) {
      driver_glXCreateContextAttribsARB = missing_glXCreateContextAttribsARB;
    }
    dt.glXCreateContextAttribsARB = MakeRegalProc(loader_glXCreateContextAttribsARB, layer);

    // GLX_ARB_get_proc_address

    _getProcAddress( driver_glXGetProcAddressARB, glXGetProcAddressARB, "glXGetProcAddressARB" );
    if( driver_glXGetProcAddressARB == NULL ) {
      driver_glXGetProcAddressARB = missing_glXGetProcAddressARB;
    }
    dt.glXGetProcAddressARB = MakeRegalProc(loader_glXGetProcAddressARB, layer);

    // GLX_ATI_render_texture

    _getProcAddress( driver_glXBindTexImageATI, glXBindTexImageATI, "glXBindTexImageATI" );
    if( driver_glXBindTexImageATI == NULL ) {
      driver_glXBindTexImageATI = missing_glXBindTexImageATI;
    }
    dt.glXBindTexImageATI = MakeRegalProc(loader_glXBindTexImageATI, layer);

    _getProcAddress( driver_glXDrawableAttribATI, glXDrawableAttribATI, "glXDrawableAttribATI" );
    if( driver_glXDrawableAttribATI == NULL ) {
      driver_glXDrawableAttribATI = missing_glXDrawableAttribATI;
    }
    dt.glXDrawableAttribATI = MakeRegalProc(loader_glXDrawableAttribATI, layer);

    _getProcAddress( driver_glXReleaseTexImageATI, glXReleaseTexImageATI, "glXReleaseTexImageATI" );
    if( driver_glXReleaseTexImageATI == NULL ) {
      driver_glXReleaseTexImageATI = missing_glXReleaseTexImageATI;
    }
    dt.glXReleaseTexImageATI = MakeRegalProc(loader_glXReleaseTexImageATI, layer);

    // GLX_EXT_import_context

    _getProcAddress( driver_glXFreeContextEXT, glXFreeContextEXT, "glXFreeContextEXT" );
    if( driver_glXFreeContextEXT == NULL ) {
      driver_glXFreeContextEXT = missing_glXFreeContextEXT;
    }
    dt.glXFreeContextEXT = MakeRegalProc(loader_glXFreeContextEXT, layer);

    _getProcAddress( driver_glXGetContextIDEXT, glXGetContextIDEXT, "glXGetContextIDEXT" );
    if( driver_glXGetContextIDEXT == NULL ) {
      driver_glXGetContextIDEXT = missing_glXGetContextIDEXT;
    }
    dt.glXGetContextIDEXT = MakeRegalProc(loader_glXGetContextIDEXT, layer);

    _getProcAddress( driver_glXImportContextEXT, glXImportContextEXT, "glXImportContextEXT" );
    if( driver_glXImportContextEXT == NULL ) {
      driver_glXImportContextEXT = missing_glXImportContextEXT;
    }
    dt.glXImportContextEXT = MakeRegalProc(loader_glXImportContextEXT, layer);

    _getProcAddress( driver_glXQueryContextInfoEXT, glXQueryContextInfoEXT, "glXQueryContextInfoEXT" );
    if( driver_glXQueryContextInfoEXT == NULL ) {
      driver_glXQueryContextInfoEXT = missing_glXQueryContextInfoEXT;
    }
    dt.glXQueryContextInfoEXT = MakeRegalProc(loader_glXQueryContextInfoEXT, layer);

    // GLX_EXT_swap_control

    _getProcAddress( driver_glXSwapIntervalEXT, glXSwapIntervalEXT, "glXSwapIntervalEXT" );
    if( driver_glXSwapIntervalEXT == NULL ) {
      driver_glXSwapIntervalEXT = missing_glXSwapIntervalEXT;
    }
    dt.glXSwapIntervalEXT = MakeRegalProc(loader_glXSwapIntervalEXT, layer);

    // GLX_EXT_texture_from_pixmap

    _getProcAddress( driver_glXBindTexImageEXT, glXBindTexImageEXT, "glXBindTexImageEXT" );
    if( driver_glXBindTexImageEXT == NULL ) {
      driver_glXBindTexImageEXT = missing_glXBindTexImageEXT;
    }
    dt.glXBindTexImageEXT = MakeRegalProc(loader_glXBindTexImageEXT, layer);

    _getProcAddress( driver_glXReleaseTexImageEXT, glXReleaseTexImageEXT, "glXReleaseTexImageEXT" );
    if( driver_glXReleaseTexImageEXT == NULL ) {
      driver_glXReleaseTexImageEXT = missing_glXReleaseTexImageEXT;
    }
    dt.glXReleaseTexImageEXT = MakeRegalProc(loader_glXReleaseTexImageEXT, layer);

    // GLX_MESA_agp_offset

    _getProcAddress( driver_glXGetAGPOffsetMESA, glXGetAGPOffsetMESA, "glXGetAGPOffsetMESA" );
    if( driver_glXGetAGPOffsetMESA == NULL ) {
      driver_glXGetAGPOffsetMESA = missing_glXGetAGPOffsetMESA;
    }
    dt.glXGetAGPOffsetMESA = MakeRegalProc(loader_glXGetAGPOffsetMESA, layer);

    // GLX_MESA_copy_sub_buffer

    _getProcAddress( driver_glXCopySubBufferMESA, glXCopySubBufferMESA, "glXCopySubBufferMESA" );
    if( driver_glXCopySubBufferMESA == NULL ) {
      driver_glXCopySubBufferMESA = missing_glXCopySubBufferMESA;
    }
    dt.glXCopySubBufferMESA = MakeRegalProc(loader_glXCopySubBufferMESA, layer);

    // GLX_MESA_pixmap_colormap

    _getProcAddress( driver_glXCreateGLXPixmapMESA, glXCreateGLXPixmapMESA, "glXCreateGLXPixmapMESA" );
    if( driver_glXCreateGLXPixmapMESA == NULL ) {
      driver_glXCreateGLXPixmapMESA = missing_glXCreateGLXPixmapMESA;
    }
    dt.glXCreateGLXPixmapMESA = MakeRegalProc(loader_glXCreateGLXPixmapMESA, layer);

    // GLX_MESA_release_buffers

    _getProcAddress( driver_glXReleaseBuffersMESA, glXReleaseBuffersMESA, "glXReleaseBuffersMESA" );
    if( driver_glXReleaseBuffersMESA == NULL ) {
      driver_glXReleaseBuffersMESA = missing_glXReleaseBuffersMESA;
    }
    dt.glXReleaseBuffersMESA = MakeRegalProc(loader_glXReleaseBuffersMESA, layer);

    // GLX_MESA_set_3dfx_mode

    _getProcAddress( driver_glXSet3DfxModeMESA, glXSet3DfxModeMESA, "glXSet3DfxModeMESA" );
    if( driver_glXSet3DfxModeMESA == NULL ) {
      driver_glXSet3DfxModeMESA = missing_glXSet3DfxModeMESA;
    }
    dt.glXSet3DfxModeMESA = MakeRegalProc(loader_glXSet3DfxModeMESA, layer);

    // GLX_MESA_swap_control

    _getProcAddress( driver_glXGetSwapIntervalMESA, glXGetSwapIntervalMESA, "glXGetSwapIntervalMESA" );
    if( driver_glXGetSwapIntervalMESA == NULL ) {
      driver_glXGetSwapIntervalMESA = missing_glXGetSwapIntervalMESA;
    }
    dt.glXGetSwapIntervalMESA = MakeRegalProc(loader_glXGetSwapIntervalMESA, layer);

    _getProcAddress( driver_glXSwapIntervalMESA, glXSwapIntervalMESA, "glXSwapIntervalMESA" );
    if( driver_glXSwapIntervalMESA == NULL ) {
      driver_glXSwapIntervalMESA = missing_glXSwapIntervalMESA;
    }
    dt.glXSwapIntervalMESA = MakeRegalProc(loader_glXSwapIntervalMESA, layer);

    // GLX_NV_copy_image

    _getProcAddress( driver_glXCopyImageSubDataNV, glXCopyImageSubDataNV, "glXCopyImageSubDataNV" );
    if( driver_glXCopyImageSubDataNV == NULL ) {
      driver_glXCopyImageSubDataNV = missing_glXCopyImageSubDataNV;
    }
    dt.glXCopyImageSubDataNV = MakeRegalProc(loader_glXCopyImageSubDataNV, layer);

    // GLX_NV_present_video

    _getProcAddress( driver_glXBindVideoDeviceNV, glXBindVideoDeviceNV, "glXBindVideoDeviceNV" );
    if( driver_glXBindVideoDeviceNV == NULL ) {
      driver_glXBindVideoDeviceNV = missing_glXBindVideoDeviceNV;
    }
    dt.glXBindVideoDeviceNV = MakeRegalProc(loader_glXBindVideoDeviceNV, layer);

    _getProcAddress( driver_glXEnumerateVideoDevicesNV, glXEnumerateVideoDevicesNV, "glXEnumerateVideoDevicesNV" );
    if( driver_glXEnumerateVideoDevicesNV == NULL ) {
      driver_glXEnumerateVideoDevicesNV = missing_glXEnumerateVideoDevicesNV;
    }
    dt.glXEnumerateVideoDevicesNV = MakeRegalProc(loader_glXEnumerateVideoDevicesNV, layer);

    // GLX_NV_swap_group

    _getProcAddress( driver_glXBindSwapBarrierNV, glXBindSwapBarrierNV, "glXBindSwapBarrierNV" );
    if( driver_glXBindSwapBarrierNV == NULL ) {
      driver_glXBindSwapBarrierNV = missing_glXBindSwapBarrierNV;
    }
    dt.glXBindSwapBarrierNV = MakeRegalProc(loader_glXBindSwapBarrierNV, layer);

    _getProcAddress( driver_glXJoinSwapGroupNV, glXJoinSwapGroupNV, "glXJoinSwapGroupNV" );
    if( driver_glXJoinSwapGroupNV == NULL ) {
      driver_glXJoinSwapGroupNV = missing_glXJoinSwapGroupNV;
    }
    dt.glXJoinSwapGroupNV = MakeRegalProc(loader_glXJoinSwapGroupNV, layer);

    _getProcAddress( driver_glXQueryFrameCountNV, glXQueryFrameCountNV, "glXQueryFrameCountNV" );
    if( driver_glXQueryFrameCountNV == NULL ) {
      driver_glXQueryFrameCountNV = missing_glXQueryFrameCountNV;
    }
    dt.glXQueryFrameCountNV = MakeRegalProc(loader_glXQueryFrameCountNV, layer);

    _getProcAddress( driver_glXQueryMaxSwapGroupsNV, glXQueryMaxSwapGroupsNV, "glXQueryMaxSwapGroupsNV" );
    if( driver_glXQueryMaxSwapGroupsNV == NULL ) {
      driver_glXQueryMaxSwapGroupsNV = missing_glXQueryMaxSwapGroupsNV;
    }
    dt.glXQueryMaxSwapGroupsNV = MakeRegalProc(loader_glXQueryMaxSwapGroupsNV, layer);

    _getProcAddress( driver_glXQuerySwapGroupNV, glXQuerySwapGroupNV, "glXQuerySwapGroupNV" );
    if( driver_glXQuerySwapGroupNV == NULL ) {
      driver_glXQuerySwapGroupNV = missing_glXQuerySwapGroupNV;
    }
    dt.glXQuerySwapGroupNV = MakeRegalProc(loader_glXQuerySwapGroupNV, layer);

    _getProcAddress( driver_glXResetFrameCountNV, glXResetFrameCountNV, "glXResetFrameCountNV" );
    if( driver_glXResetFrameCountNV == NULL ) {
      driver_glXResetFrameCountNV = missing_glXResetFrameCountNV;
    }
    dt.glXResetFrameCountNV = MakeRegalProc(loader_glXResetFrameCountNV, layer);

    // GLX_NV_vertex_array_range

    _getProcAddress( driver_glXAllocateMemoryNV, glXAllocateMemoryNV, "glXAllocateMemoryNV" );
    if( driver_glXAllocateMemoryNV == NULL ) {
      driver_glXAllocateMemoryNV = missing_glXAllocateMemoryNV;
    }
    dt.glXAllocateMemoryNV = MakeRegalProc(loader_glXAllocateMemoryNV, layer);

    _getProcAddress( driver_glXFreeMemoryNV, glXFreeMemoryNV, "glXFreeMemoryNV" );
    if( driver_glXFreeMemoryNV == NULL ) {
      driver_glXFreeMemoryNV = missing_glXFreeMemoryNV;
    }
    dt.glXFreeMemoryNV = MakeRegalProc(loader_glXFreeMemoryNV, layer);

    // GLX_NV_video_capture

    _getProcAddress( driver_glXBindVideoCaptureDeviceNV, glXBindVideoCaptureDeviceNV, "glXBindVideoCaptureDeviceNV" );
    if( driver_glXBindVideoCaptureDeviceNV == NULL ) {
      driver_glXBindVideoCaptureDeviceNV = missing_glXBindVideoCaptureDeviceNV;
    }
    dt.glXBindVideoCaptureDeviceNV = MakeRegalProc(loader_glXBindVideoCaptureDeviceNV, layer);

    _getProcAddress( driver_glXEnumerateVideoCaptureDevicesNV, glXEnumerateVideoCaptureDevicesNV, "glXEnumerateVideoCaptureDevicesNV" );
    if( driver_glXEnumerateVideoCaptureDevicesNV == NULL ) {
      driver_glXEnumerateVideoCaptureDevicesNV = missing_glXEnumerateVideoCaptureDevicesNV;
    }
    dt.glXEnumerateVideoCaptureDevicesNV = MakeRegalProc(loader_glXEnumerateVideoCaptureDevicesNV, layer);

    _getProcAddress( driver_glXLockVideoCaptureDeviceNV, glXLockVideoCaptureDeviceNV, "glXLockVideoCaptureDeviceNV" );
    if( driver_glXLockVideoCaptureDeviceNV == NULL ) {
      driver_glXLockVideoCaptureDeviceNV = missing_glXLockVideoCaptureDeviceNV;
    }
    dt.glXLockVideoCaptureDeviceNV = MakeRegalProc(loader_glXLockVideoCaptureDeviceNV, layer);

    _getProcAddress( driver_glXQueryVideoCaptureDeviceNV, glXQueryVideoCaptureDeviceNV, "glXQueryVideoCaptureDeviceNV" );
    if( driver_glXQueryVideoCaptureDeviceNV == NULL ) {
      driver_glXQueryVideoCaptureDeviceNV = missing_glXQueryVideoCaptureDeviceNV;
    }
    dt.glXQueryVideoCaptureDeviceNV = MakeRegalProc(loader_glXQueryVideoCaptureDeviceNV, layer);

    _getProcAddress( driver_glXReleaseVideoCaptureDeviceNV, glXReleaseVideoCaptureDeviceNV, "glXReleaseVideoCaptureDeviceNV" );
    if( driver_glXReleaseVideoCaptureDeviceNV == NULL ) {
      driver_glXReleaseVideoCaptureDeviceNV = missing_glXReleaseVideoCaptureDeviceNV;
    }
    dt.glXReleaseVideoCaptureDeviceNV = MakeRegalProc(loader_glXReleaseVideoCaptureDeviceNV, layer);

    // GLX_NV_video_output

    _getProcAddress( driver_glXBindVideoImageNV, glXBindVideoImageNV, "glXBindVideoImageNV" );
    if( driver_glXBindVideoImageNV == NULL ) {
      driver_glXBindVideoImageNV = missing_glXBindVideoImageNV;
    }
    dt.glXBindVideoImageNV = MakeRegalProc(loader_glXBindVideoImageNV, layer);

    _getProcAddress( driver_glXGetVideoDeviceNV, glXGetVideoDeviceNV, "glXGetVideoDeviceNV" );
    if( driver_glXGetVideoDeviceNV == NULL ) {
      driver_glXGetVideoDeviceNV = missing_glXGetVideoDeviceNV;
    }
    dt.glXGetVideoDeviceNV = MakeRegalProc(loader_glXGetVideoDeviceNV, layer);

    _getProcAddress( driver_glXGetVideoInfoNV, glXGetVideoInfoNV, "glXGetVideoInfoNV" );
    if( driver_glXGetVideoInfoNV == NULL ) {
      driver_glXGetVideoInfoNV = missing_glXGetVideoInfoNV;
    }
    dt.glXGetVideoInfoNV = MakeRegalProc(loader_glXGetVideoInfoNV, layer);

    _getProcAddress( driver_glXReleaseVideoDeviceNV, glXReleaseVideoDeviceNV, "glXReleaseVideoDeviceNV" );
    if( driver_glXReleaseVideoDeviceNV == NULL ) {
      driver_glXReleaseVideoDeviceNV = missing_glXReleaseVideoDeviceNV;
    }
    dt.glXReleaseVideoDeviceNV = MakeRegalProc(loader_glXReleaseVideoDeviceNV, layer);

    _getProcAddress( driver_glXReleaseVideoImageNV, glXReleaseVideoImageNV, "glXReleaseVideoImageNV" );
    if( driver_glXReleaseVideoImageNV == NULL ) {
      driver_glXReleaseVideoImageNV = missing_glXReleaseVideoImageNV;
    }
    dt.glXReleaseVideoImageNV = MakeRegalProc(loader_glXReleaseVideoImageNV, layer);

    _getProcAddress( driver_glXSendPbufferToVideoNV, glXSendPbufferToVideoNV, "glXSendPbufferToVideoNV" );
    if( driver_glXSendPbufferToVideoNV == NULL ) {
      driver_glXSendPbufferToVideoNV = missing_glXSendPbufferToVideoNV;
    }
    dt.glXSendPbufferToVideoNV = MakeRegalProc(loader_glXSendPbufferToVideoNV, layer);

    // GLX_OML_sync_control

    _getProcAddress( driver_glXGetMscRateOML, glXGetMscRateOML, "glXGetMscRateOML" );
    if( driver_glXGetMscRateOML == NULL ) {
      driver_glXGetMscRateOML = missing_glXGetMscRateOML;
    }
    dt.glXGetMscRateOML = MakeRegalProc(loader_glXGetMscRateOML, layer);

    _getProcAddress( driver_glXGetSyncValuesOML, glXGetSyncValuesOML, "glXGetSyncValuesOML" );
    if( driver_glXGetSyncValuesOML == NULL ) {
      driver_glXGetSyncValuesOML = missing_glXGetSyncValuesOML;
    }
    dt.glXGetSyncValuesOML = MakeRegalProc(loader_glXGetSyncValuesOML, layer);

    _getProcAddress( driver_glXSwapBuffersMscOML, glXSwapBuffersMscOML, "glXSwapBuffersMscOML" );
    if( driver_glXSwapBuffersMscOML == NULL ) {
      driver_glXSwapBuffersMscOML = missing_glXSwapBuffersMscOML;
    }
    dt.glXSwapBuffersMscOML = MakeRegalProc(loader_glXSwapBuffersMscOML, layer);

    _getProcAddress( driver_glXWaitForMscOML, glXWaitForMscOML, "glXWaitForMscOML" );
    if( driver_glXWaitForMscOML == NULL ) {
      driver_glXWaitForMscOML = missing_glXWaitForMscOML;
    }
    dt.glXWaitForMscOML = MakeRegalProc(loader_glXWaitForMscOML, layer);

    _getProcAddress( driver_glXWaitForSbcOML, glXWaitForSbcOML, "glXWaitForSbcOML" );
    if( driver_glXWaitForSbcOML == NULL ) {
      driver_glXWaitForSbcOML = missing_glXWaitForSbcOML;
    }
    dt.glXWaitForSbcOML = MakeRegalProc(loader_glXWaitForSbcOML, layer);

    // GLX_SGIX_fbconfig

    _getProcAddress( driver_glXChooseFBConfigSGIX, glXChooseFBConfigSGIX, "glXChooseFBConfigSGIX" );
    if( driver_glXChooseFBConfigSGIX == NULL ) {
      driver_glXChooseFBConfigSGIX = missing_glXChooseFBConfigSGIX;
    }
    dt.glXChooseFBConfigSGIX = MakeRegalProc(loader_glXChooseFBConfigSGIX, layer);

    _getProcAddress( driver_glXCreateContextWithConfigSGIX, glXCreateContextWithConfigSGIX, "glXCreateContextWithConfigSGIX" );
    if( driver_glXCreateContextWithConfigSGIX == NULL ) {
      driver_glXCreateContextWithConfigSGIX = missing_glXCreateContextWithConfigSGIX;
    }
    dt.glXCreateContextWithConfigSGIX = MakeRegalProc(loader_glXCreateContextWithConfigSGIX, layer);

    _getProcAddress( driver_glXCreateGLXPixmapWithConfigSGIX, glXCreateGLXPixmapWithConfigSGIX, "glXCreateGLXPixmapWithConfigSGIX" );
    if( driver_glXCreateGLXPixmapWithConfigSGIX == NULL ) {
      driver_glXCreateGLXPixmapWithConfigSGIX = missing_glXCreateGLXPixmapWithConfigSGIX;
    }
    dt.glXCreateGLXPixmapWithConfigSGIX = MakeRegalProc(loader_glXCreateGLXPixmapWithConfigSGIX, layer);

    _getProcAddress( driver_glXGetFBConfigAttribSGIX, glXGetFBConfigAttribSGIX, "glXGetFBConfigAttribSGIX" );
    if( driver_glXGetFBConfigAttribSGIX == NULL ) {
      driver_glXGetFBConfigAttribSGIX = missing_glXGetFBConfigAttribSGIX;
    }
    dt.glXGetFBConfigAttribSGIX = MakeRegalProc(loader_glXGetFBConfigAttribSGIX, layer);

    _getProcAddress( driver_glXGetFBConfigFromVisualSGIX, glXGetFBConfigFromVisualSGIX, "glXGetFBConfigFromVisualSGIX" );
    if( driver_glXGetFBConfigFromVisualSGIX == NULL ) {
      driver_glXGetFBConfigFromVisualSGIX = missing_glXGetFBConfigFromVisualSGIX;
    }
    dt.glXGetFBConfigFromVisualSGIX = MakeRegalProc(loader_glXGetFBConfigFromVisualSGIX, layer);

    _getProcAddress( driver_glXGetVisualFromFBConfigSGIX, glXGetVisualFromFBConfigSGIX, "glXGetVisualFromFBConfigSGIX" );
    if( driver_glXGetVisualFromFBConfigSGIX == NULL ) {
      driver_glXGetVisualFromFBConfigSGIX = missing_glXGetVisualFromFBConfigSGIX;
    }
    dt.glXGetVisualFromFBConfigSGIX = MakeRegalProc(loader_glXGetVisualFromFBConfigSGIX, layer);

    // GLX_SGIX_pbuffer

    _getProcAddress( driver_glXCreateGLXPbufferSGIX, glXCreateGLXPbufferSGIX, "glXCreateGLXPbufferSGIX" );
    if( driver_glXCreateGLXPbufferSGIX == NULL ) {
      driver_glXCreateGLXPbufferSGIX = missing_glXCreateGLXPbufferSGIX;
    }
    dt.glXCreateGLXPbufferSGIX = MakeRegalProc(loader_glXCreateGLXPbufferSGIX, layer);

    _getProcAddress( driver_glXDestroyGLXPbufferSGIX, glXDestroyGLXPbufferSGIX, "glXDestroyGLXPbufferSGIX" );
    if( driver_glXDestroyGLXPbufferSGIX == NULL ) {
      driver_glXDestroyGLXPbufferSGIX = missing_glXDestroyGLXPbufferSGIX;
    }
    dt.glXDestroyGLXPbufferSGIX = MakeRegalProc(loader_glXDestroyGLXPbufferSGIX, layer);

    _getProcAddress( driver_glXGetSelectedEventSGIX, glXGetSelectedEventSGIX, "glXGetSelectedEventSGIX" );
    if( driver_glXGetSelectedEventSGIX == NULL ) {
      driver_glXGetSelectedEventSGIX = missing_glXGetSelectedEventSGIX;
    }
    dt.glXGetSelectedEventSGIX = MakeRegalProc(loader_glXGetSelectedEventSGIX, layer);

    _getProcAddress( driver_glXQueryGLXPbufferSGIX, glXQueryGLXPbufferSGIX, "glXQueryGLXPbufferSGIX" );
    if( driver_glXQueryGLXPbufferSGIX == NULL ) {
      driver_glXQueryGLXPbufferSGIX = missing_glXQueryGLXPbufferSGIX;
    }
    dt.glXQueryGLXPbufferSGIX = MakeRegalProc(loader_glXQueryGLXPbufferSGIX, layer);

    _getProcAddress( driver_glXSelectEventSGIX, glXSelectEventSGIX, "glXSelectEventSGIX" );
    if( driver_glXSelectEventSGIX == NULL ) {
      driver_glXSelectEventSGIX = missing_glXSelectEventSGIX;
    }
    dt.glXSelectEventSGIX = MakeRegalProc(loader_glXSelectEventSGIX, layer);

    // GLX_SGIX_swap_barrier

    _getProcAddress( driver_glXBindSwapBarrierSGIX, glXBindSwapBarrierSGIX, "glXBindSwapBarrierSGIX" );
    if( driver_glXBindSwapBarrierSGIX == NULL ) {
      driver_glXBindSwapBarrierSGIX = missing_glXBindSwapBarrierSGIX;
    }
    dt.glXBindSwapBarrierSGIX = MakeRegalProc(loader_glXBindSwapBarrierSGIX, layer);

    _getProcAddress( driver_glXQueryMaxSwapBarriersSGIX, glXQueryMaxSwapBarriersSGIX, "glXQueryMaxSwapBarriersSGIX" );
    if( driver_glXQueryMaxSwapBarriersSGIX == NULL ) {
      driver_glXQueryMaxSwapBarriersSGIX = missing_glXQueryMaxSwapBarriersSGIX;
    }
    dt.glXQueryMaxSwapBarriersSGIX = MakeRegalProc(loader_glXQueryMaxSwapBarriersSGIX, layer);

    // GLX_SGIX_swap_group

    _getProcAddress( driver_glXJoinSwapGroupSGIX, glXJoinSwapGroupSGIX, "glXJoinSwapGroupSGIX" );
    if( driver_glXJoinSwapGroupSGIX == NULL ) {
      driver_glXJoinSwapGroupSGIX = missing_glXJoinSwapGroupSGIX;
    }
    dt.glXJoinSwapGroupSGIX = MakeRegalProc(loader_glXJoinSwapGroupSGIX, layer);

    // GLX_SGIX_video_resize

    _getProcAddress( driver_glXBindChannelToWindowSGIX, glXBindChannelToWindowSGIX, "glXBindChannelToWindowSGIX" );
    if( driver_glXBindChannelToWindowSGIX == NULL ) {
      driver_glXBindChannelToWindowSGIX = missing_glXBindChannelToWindowSGIX;
    }
    dt.glXBindChannelToWindowSGIX = MakeRegalProc(loader_glXBindChannelToWindowSGIX, layer);

    _getProcAddress( driver_glXChannelRectSGIX, glXChannelRectSGIX, "glXChannelRectSGIX" );
    if( driver_glXChannelRectSGIX == NULL ) {
      driver_glXChannelRectSGIX = missing_glXChannelRectSGIX;
    }
    dt.glXChannelRectSGIX = MakeRegalProc(loader_glXChannelRectSGIX, layer);

    _getProcAddress( driver_glXChannelRectSyncSGIX, glXChannelRectSyncSGIX, "glXChannelRectSyncSGIX" );
    if( driver_glXChannelRectSyncSGIX == NULL ) {
      driver_glXChannelRectSyncSGIX = missing_glXChannelRectSyncSGIX;
    }
    dt.glXChannelRectSyncSGIX = MakeRegalProc(loader_glXChannelRectSyncSGIX, layer);

    _getProcAddress( driver_glXQueryChannelDeltasSGIX, glXQueryChannelDeltasSGIX, "glXQueryChannelDeltasSGIX" );
    if( driver_glXQueryChannelDeltasSGIX == NULL ) {
      driver_glXQueryChannelDeltasSGIX = missing_glXQueryChannelDeltasSGIX;
    }
    dt.glXQueryChannelDeltasSGIX = MakeRegalProc(loader_glXQueryChannelDeltasSGIX, layer);

    _getProcAddress( driver_glXQueryChannelRectSGIX, glXQueryChannelRectSGIX, "glXQueryChannelRectSGIX" );
    if( driver_glXQueryChannelRectSGIX == NULL ) {
      driver_glXQueryChannelRectSGIX = missing_glXQueryChannelRectSGIX;
    }
    dt.glXQueryChannelRectSGIX = MakeRegalProc(loader_glXQueryChannelRectSGIX, layer);

    // GLX_SGI_cushion

    _getProcAddress( driver_glXCushionSGI, glXCushionSGI, "glXCushionSGI" );
    if( driver_glXCushionSGI == NULL ) {
      driver_glXCushionSGI = missing_glXCushionSGI;
    }
    dt.glXCushionSGI = MakeRegalProc(loader_glXCushionSGI, layer);

    // GLX_SGI_make_current_read

    _getProcAddress( driver_glXGetCurrentReadDrawableSGI, glXGetCurrentReadDrawableSGI, "glXGetCurrentReadDrawableSGI" );
    if( driver_glXGetCurrentReadDrawableSGI == NULL ) {
      driver_glXGetCurrentReadDrawableSGI = missing_glXGetCurrentReadDrawableSGI;
    }
    dt.glXGetCurrentReadDrawableSGI = MakeRegalProc(loader_glXGetCurrentReadDrawableSGI, layer);

    _getProcAddress( driver_glXMakeCurrentReadSGI, glXMakeCurrentReadSGI, "glXMakeCurrentReadSGI" );
    if( driver_glXMakeCurrentReadSGI == NULL ) {
      driver_glXMakeCurrentReadSGI = missing_glXMakeCurrentReadSGI;
    }
    dt.glXMakeCurrentReadSGI = MakeRegalProc(loader_glXMakeCurrentReadSGI, layer);

    // GLX_SGI_swap_control

    _getProcAddress( driver_glXSwapIntervalSGI, glXSwapIntervalSGI, "glXSwapIntervalSGI" );
    if( driver_glXSwapIntervalSGI == NULL ) {
      driver_glXSwapIntervalSGI = missing_glXSwapIntervalSGI;
    }
    dt.glXSwapIntervalSGI = MakeRegalProc(loader_glXSwapIntervalSGI, layer);

    // GLX_SGI_video_sync

    _getProcAddress( driver_glXGetVideoSyncSGI, glXGetVideoSyncSGI, "glXGetVideoSyncSGI" );
    if( driver_glXGetVideoSyncSGI == NULL ) {
      driver_glXGetVideoSyncSGI = missing_glXGetVideoSyncSGI;
    }
    dt.glXGetVideoSyncSGI = MakeRegalProc(loader_glXGetVideoSyncSGI, layer);

    _getProcAddress( driver_glXWaitVideoSyncSGI, glXWaitVideoSyncSGI, "glXWaitVideoSyncSGI" );
    if( driver_glXWaitVideoSyncSGI == NULL ) {
      driver_glXWaitVideoSyncSGI = missing_glXWaitVideoSyncSGI;
    }
    dt.glXWaitVideoSyncSGI = MakeRegalProc(loader_glXWaitVideoSyncSGI, layer);

    // GLX_SUN_get_transparent_index

    _getProcAddress( driver_glXGetTransparentIndexSUN, glXGetTransparentIndexSUN, "glXGetTransparentIndexSUN" );
    if( driver_glXGetTransparentIndexSUN == NULL ) {
      driver_glXGetTransparentIndexSUN = missing_glXGetTransparentIndexSUN;
    }
    dt.glXGetTransparentIndexSUN = MakeRegalProc(loader_glXGetTransparentIndexSUN, layer);

    // GLX_SUN_video_resize

    _getProcAddress( driver_glXGetVideoResizeSUN, glXGetVideoResizeSUN, "glXGetVideoResizeSUN" );
    if( driver_glXGetVideoResizeSUN == NULL ) {
      driver_glXGetVideoResizeSUN = missing_glXGetVideoResizeSUN;
    }
    dt.glXGetVideoResizeSUN = MakeRegalProc(loader_glXGetVideoResizeSUN, layer);

    _getProcAddress( driver_glXVideoResizeSUN, glXVideoResizeSUN, "glXVideoResizeSUN" );
    if( driver_glXVideoResizeSUN == NULL ) {
      driver_glXVideoResizeSUN = missing_glXVideoResizeSUN;
    }
    dt.glXVideoResizeSUN = MakeRegalProc(loader_glXVideoResizeSUN, layer);

  #endif // REGAL_SYS_GLX

  #if REGAL_SYS_OSX

    // CGL_VERSION_1_0

    _getProcAddress( driver_CGLChoosePixelFormat, CGLChoosePixelFormat, "CGLChoosePixelFormat" );
    if( driver_CGLChoosePixelFormat == NULL ) {
      driver_CGLChoosePixelFormat = missing_CGLChoosePixelFormat;
    }
    dt.CGLChoosePixelFormat = MakeRegalProc(loader_CGLChoosePixelFormat, layer);

    _getProcAddress( driver_CGLClearDrawable, CGLClearDrawable, "CGLClearDrawable" );
    if( driver_CGLClearDrawable == NULL ) {
      driver_CGLClearDrawable = missing_CGLClearDrawable;
    }
    dt.CGLClearDrawable = MakeRegalProc(loader_CGLClearDrawable, layer);

    _getProcAddress( driver_CGLCopyContext, CGLCopyContext, "CGLCopyContext" );
    if( driver_CGLCopyContext == NULL ) {
      driver_CGLCopyContext = missing_CGLCopyContext;
    }
    dt.CGLCopyContext = MakeRegalProc(loader_CGLCopyContext, layer);

    _getProcAddress( driver_CGLCreateContext, CGLCreateContext, "CGLCreateContext" );
    if( driver_CGLCreateContext == NULL ) {
      driver_CGLCreateContext = missing_CGLCreateContext;
    }
    dt.CGLCreateContext = MakeRegalProc(loader_CGLCreateContext, layer);

    _getProcAddress( driver_CGLDescribePixelFormat, CGLDescribePixelFormat, "CGLDescribePixelFormat" );
    if( driver_CGLDescribePixelFormat == NULL ) {
      driver_CGLDescribePixelFormat = missing_CGLDescribePixelFormat;
    }
    dt.CGLDescribePixelFormat = MakeRegalProc(loader_CGLDescribePixelFormat, layer);

    _getProcAddress( driver_CGLDescribeRenderer, CGLDescribeRenderer, "CGLDescribeRenderer" );
    if( driver_CGLDescribeRenderer == NULL ) {
      driver_CGLDescribeRenderer = missing_CGLDescribeRenderer;
    }
    dt.CGLDescribeRenderer = MakeRegalProc(loader_CGLDescribeRenderer, layer);

    _getProcAddress( driver_CGLDestroyContext, CGLDestroyContext, "CGLDestroyContext" );
    if( driver_CGLDestroyContext == NULL ) {
      driver_CGLDestroyContext = missing_CGLDestroyContext;
    }
    dt.CGLDestroyContext = MakeRegalProc(loader_CGLDestroyContext, layer);

    _getProcAddress( driver_CGLDestroyPixelFormat, CGLDestroyPixelFormat, "CGLDestroyPixelFormat" );
    if( driver_CGLDestroyPixelFormat == NULL ) {
      driver_CGLDestroyPixelFormat = missing_CGLDestroyPixelFormat;
    }
    dt.CGLDestroyPixelFormat = MakeRegalProc(loader_CGLDestroyPixelFormat, layer);

    _getProcAddress( driver_CGLDestroyRendererInfo, CGLDestroyRendererInfo, "CGLDestroyRendererInfo" );
    if( driver_CGLDestroyRendererInfo == NULL ) {
      driver_CGLDestroyRendererInfo = missing_CGLDestroyRendererInfo;
    }
    dt.CGLDestroyRendererInfo = MakeRegalProc(loader_CGLDestroyRendererInfo, layer);

    _getProcAddress( driver_CGLDisable, CGLDisable, "CGLDisable" );
    if( driver_CGLDisable == NULL ) {
      driver_CGLDisable = missing_CGLDisable;
    }
    dt.CGLDisable = MakeRegalProc(loader_CGLDisable, layer);

    _getProcAddress( driver_CGLEnable, CGLEnable, "CGLEnable" );
    if( driver_CGLEnable == NULL ) {
      driver_CGLEnable = missing_CGLEnable;
    }
    dt.CGLEnable = MakeRegalProc(loader_CGLEnable, layer);

    _getProcAddress( driver_CGLErrorString, CGLErrorString, "CGLErrorString" );
    if( driver_CGLErrorString == NULL ) {
      driver_CGLErrorString = missing_CGLErrorString;
    }
    dt.CGLErrorString = MakeRegalProc(loader_CGLErrorString, layer);

    _getProcAddress( driver_CGLFlushDrawable, CGLFlushDrawable, "CGLFlushDrawable" );
    if( driver_CGLFlushDrawable == NULL ) {
      driver_CGLFlushDrawable = missing_CGLFlushDrawable;
    }
    dt.CGLFlushDrawable = MakeRegalProc(loader_CGLFlushDrawable, layer);

    _getProcAddress( driver_CGLGetOffScreen, CGLGetOffScreen, "CGLGetOffScreen" );
    if( driver_CGLGetOffScreen == NULL ) {
      driver_CGLGetOffScreen = missing_CGLGetOffScreen;
    }
    dt.CGLGetOffScreen = MakeRegalProc(loader_CGLGetOffScreen, layer);

    _getProcAddress( driver_CGLGetOption, CGLGetOption, "CGLGetOption" );
    if( driver_CGLGetOption == NULL ) {
      driver_CGLGetOption = missing_CGLGetOption;
    }
    dt.CGLGetOption = MakeRegalProc(loader_CGLGetOption, layer);

    _getProcAddress( driver_CGLGetParameter, CGLGetParameter, "CGLGetParameter" );
    if( driver_CGLGetParameter == NULL ) {
      driver_CGLGetParameter = missing_CGLGetParameter;
    }
    dt.CGLGetParameter = MakeRegalProc(loader_CGLGetParameter, layer);

    _getProcAddress( driver_CGLGetVersion, CGLGetVersion, "CGLGetVersion" );
    if( driver_CGLGetVersion == NULL ) {
      driver_CGLGetVersion = missing_CGLGetVersion;
    }
    dt.CGLGetVersion = MakeRegalProc(loader_CGLGetVersion, layer);

    _getProcAddress( driver_CGLGetVirtualScreen, CGLGetVirtualScreen, "CGLGetVirtualScreen" );
    if( driver_CGLGetVirtualScreen == NULL ) {
      driver_CGLGetVirtualScreen = missing_CGLGetVirtualScreen;
    }
    dt.CGLGetVirtualScreen = MakeRegalProc(loader_CGLGetVirtualScreen, layer);

    _getProcAddress( driver_CGLIsEnabled, CGLIsEnabled, "CGLIsEnabled" );
    if( driver_CGLIsEnabled == NULL ) {
      driver_CGLIsEnabled = missing_CGLIsEnabled;
    }
    dt.CGLIsEnabled = MakeRegalProc(loader_CGLIsEnabled, layer);

    _getProcAddress( driver_CGLQueryRendererInfo, CGLQueryRendererInfo, "CGLQueryRendererInfo" );
    if( driver_CGLQueryRendererInfo == NULL ) {
      driver_CGLQueryRendererInfo = missing_CGLQueryRendererInfo;
    }
    dt.CGLQueryRendererInfo = MakeRegalProc(loader_CGLQueryRendererInfo, layer);

    _getProcAddress( driver_CGLSetFullScreen, CGLSetFullScreen, "CGLSetFullScreen" );
    if( driver_CGLSetFullScreen == NULL ) {
      driver_CGLSetFullScreen = missing_CGLSetFullScreen;
    }
    dt.CGLSetFullScreen = MakeRegalProc(loader_CGLSetFullScreen, layer);

    _getProcAddress( driver_CGLSetOffScreen, CGLSetOffScreen, "CGLSetOffScreen" );
    if( driver_CGLSetOffScreen == NULL ) {
      driver_CGLSetOffScreen = missing_CGLSetOffScreen;
    }
    dt.CGLSetOffScreen = MakeRegalProc(loader_CGLSetOffScreen, layer);

    _getProcAddress( driver_CGLSetOption, CGLSetOption, "CGLSetOption" );
    if( driver_CGLSetOption == NULL ) {
      driver_CGLSetOption = missing_CGLSetOption;
    }
    dt.CGLSetOption = MakeRegalProc(loader_CGLSetOption, layer);

    _getProcAddress( driver_CGLSetParameter, CGLSetParameter, "CGLSetParameter" );
    if( driver_CGLSetParameter == NULL ) {
      driver_CGLSetParameter = missing_CGLSetParameter;
    }
    dt.CGLSetParameter = MakeRegalProc(loader_CGLSetParameter, layer);

    _getProcAddress( driver_CGLSetVirtualScreen, CGLSetVirtualScreen, "CGLSetVirtualScreen" );
    if( driver_CGLSetVirtualScreen == NULL ) {
      driver_CGLSetVirtualScreen = missing_CGLSetVirtualScreen;
    }
    dt.CGLSetVirtualScreen = MakeRegalProc(loader_CGLSetVirtualScreen, layer);

    // CGL_VERSION_1_1

    _getProcAddress( driver_CGLCreatePBuffer, CGLCreatePBuffer, "CGLCreatePBuffer" );
    if( driver_CGLCreatePBuffer == NULL ) {
      driver_CGLCreatePBuffer = missing_CGLCreatePBuffer;
    }
    dt.CGLCreatePBuffer = MakeRegalProc(loader_CGLCreatePBuffer, layer);

    _getProcAddress( driver_CGLDescribePBuffer, CGLDescribePBuffer, "CGLDescribePBuffer" );
    if( driver_CGLDescribePBuffer == NULL ) {
      driver_CGLDescribePBuffer = missing_CGLDescribePBuffer;
    }
    dt.CGLDescribePBuffer = MakeRegalProc(loader_CGLDescribePBuffer, layer);

    _getProcAddress( driver_CGLDestroyPBuffer, CGLDestroyPBuffer, "CGLDestroyPBuffer" );
    if( driver_CGLDestroyPBuffer == NULL ) {
      driver_CGLDestroyPBuffer = missing_CGLDestroyPBuffer;
    }
    dt.CGLDestroyPBuffer = MakeRegalProc(loader_CGLDestroyPBuffer, layer);

    _getProcAddress( driver_CGLGetPBuffer, CGLGetPBuffer, "CGLGetPBuffer" );
    if( driver_CGLGetPBuffer == NULL ) {
      driver_CGLGetPBuffer = missing_CGLGetPBuffer;
    }
    dt.CGLGetPBuffer = MakeRegalProc(loader_CGLGetPBuffer, layer);

    _getProcAddress( driver_CGLSetPBuffer, CGLSetPBuffer, "CGLSetPBuffer" );
    if( driver_CGLSetPBuffer == NULL ) {
      driver_CGLSetPBuffer = missing_CGLSetPBuffer;
    }
    dt.CGLSetPBuffer = MakeRegalProc(loader_CGLSetPBuffer, layer);

    _getProcAddress( driver_CGLTexImagePBuffer, CGLTexImagePBuffer, "CGLTexImagePBuffer" );
    if( driver_CGLTexImagePBuffer == NULL ) {
      driver_CGLTexImagePBuffer = missing_CGLTexImagePBuffer;
    }
    dt.CGLTexImagePBuffer = MakeRegalProc(loader_CGLTexImagePBuffer, layer);

    // CGL_VERSION_1_2

    _getProcAddress( driver_CGLGetContextRetainCount, CGLGetContextRetainCount, "CGLGetContextRetainCount" );
    if( driver_CGLGetContextRetainCount == NULL ) {
      driver_CGLGetContextRetainCount = missing_CGLGetContextRetainCount;
    }
    dt.CGLGetContextRetainCount = MakeRegalProc(loader_CGLGetContextRetainCount, layer);

    _getProcAddress( driver_CGLGetGlobalOption, CGLGetGlobalOption, "CGLGetGlobalOption" );
    if( driver_CGLGetGlobalOption == NULL ) {
      driver_CGLGetGlobalOption = missing_CGLGetGlobalOption;
    }
    dt.CGLGetGlobalOption = MakeRegalProc(loader_CGLGetGlobalOption, layer);

    _getProcAddress( driver_CGLGetPBufferRetainCount, CGLGetPBufferRetainCount, "CGLGetPBufferRetainCount" );
    if( driver_CGLGetPBufferRetainCount == NULL ) {
      driver_CGLGetPBufferRetainCount = missing_CGLGetPBufferRetainCount;
    }
    dt.CGLGetPBufferRetainCount = MakeRegalProc(loader_CGLGetPBufferRetainCount, layer);

    _getProcAddress( driver_CGLGetPixelFormat, CGLGetPixelFormat, "CGLGetPixelFormat" );
    if( driver_CGLGetPixelFormat == NULL ) {
      driver_CGLGetPixelFormat = missing_CGLGetPixelFormat;
    }
    dt.CGLGetPixelFormat = MakeRegalProc(loader_CGLGetPixelFormat, layer);

    _getProcAddress( driver_CGLGetPixelFormatRetainCount, CGLGetPixelFormatRetainCount, "CGLGetPixelFormatRetainCount" );
    if( driver_CGLGetPixelFormatRetainCount == NULL ) {
      driver_CGLGetPixelFormatRetainCount = missing_CGLGetPixelFormatRetainCount;
    }
    dt.CGLGetPixelFormatRetainCount = MakeRegalProc(loader_CGLGetPixelFormatRetainCount, layer);

    _getProcAddress( driver_CGLLockContext, CGLLockContext, "CGLLockContext" );
    if( driver_CGLLockContext == NULL ) {
      driver_CGLLockContext = missing_CGLLockContext;
    }
    dt.CGLLockContext = MakeRegalProc(loader_CGLLockContext, layer);

    _getProcAddress( driver_CGLReleaseContext, CGLReleaseContext, "CGLReleaseContext" );
    if( driver_CGLReleaseContext == NULL ) {
      driver_CGLReleaseContext = missing_CGLReleaseContext;
    }
    dt.CGLReleaseContext = MakeRegalProc(loader_CGLReleaseContext, layer);

    _getProcAddress( driver_CGLReleasePBuffer, CGLReleasePBuffer, "CGLReleasePBuffer" );
    if( driver_CGLReleasePBuffer == NULL ) {
      driver_CGLReleasePBuffer = missing_CGLReleasePBuffer;
    }
    dt.CGLReleasePBuffer = MakeRegalProc(loader_CGLReleasePBuffer, layer);

    _getProcAddress( driver_CGLReleasePixelFormat, CGLReleasePixelFormat, "CGLReleasePixelFormat" );
    if( driver_CGLReleasePixelFormat == NULL ) {
      driver_CGLReleasePixelFormat = missing_CGLReleasePixelFormat;
    }
    dt.CGLReleasePixelFormat = MakeRegalProc(loader_CGLReleasePixelFormat, layer);

    _getProcAddress( driver_CGLRetainContext, CGLRetainContext, "CGLRetainContext" );
    if( driver_CGLRetainContext == NULL ) {
      driver_CGLRetainContext = missing_CGLRetainContext;
    }
    dt.CGLRetainContext = MakeRegalProc(loader_CGLRetainContext, layer);

    _getProcAddress( driver_CGLRetainPBuffer, CGLRetainPBuffer, "CGLRetainPBuffer" );
    if( driver_CGLRetainPBuffer == NULL ) {
      driver_CGLRetainPBuffer = missing_CGLRetainPBuffer;
    }
    dt.CGLRetainPBuffer = MakeRegalProc(loader_CGLRetainPBuffer, layer);

    _getProcAddress( driver_CGLRetainPixelFormat, CGLRetainPixelFormat, "CGLRetainPixelFormat" );
    if( driver_CGLRetainPixelFormat == NULL ) {
      driver_CGLRetainPixelFormat = missing_CGLRetainPixelFormat;
    }
    dt.CGLRetainPixelFormat = MakeRegalProc(loader_CGLRetainPixelFormat, layer);

    _getProcAddress( driver_CGLSetGlobalOption, CGLSetGlobalOption, "CGLSetGlobalOption" );
    if( driver_CGLSetGlobalOption == NULL ) {
      driver_CGLSetGlobalOption = missing_CGLSetGlobalOption;
    }
    dt.CGLSetGlobalOption = MakeRegalProc(loader_CGLSetGlobalOption, layer);

    _getProcAddress( driver_CGLUnlockContext, CGLUnlockContext, "CGLUnlockContext" );
    if( driver_CGLUnlockContext == NULL ) {
      driver_CGLUnlockContext = missing_CGLUnlockContext;
    }
    dt.CGLUnlockContext = MakeRegalProc(loader_CGLUnlockContext, layer);

    // CGL_VERSION_1_3

    _getProcAddress( driver_CGLGetCurrentContext, CGLGetCurrentContext, "CGLGetCurrentContext" );
    if( driver_CGLGetCurrentContext == NULL ) {
      driver_CGLGetCurrentContext = missing_CGLGetCurrentContext;
    }
    dt.CGLGetCurrentContext = MakeRegalProc(loader_CGLGetCurrentContext, layer);

    _getProcAddress( driver_CGLGetShareGroup, CGLGetShareGroup, "CGLGetShareGroup" );
    if( driver_CGLGetShareGroup == NULL ) {
      driver_CGLGetShareGroup = missing_CGLGetShareGroup;
    }
    dt.CGLGetShareGroup = MakeRegalProc(loader_CGLGetShareGroup, layer);

    _getProcAddress( driver_CGLGetSurface, CGLGetSurface, "CGLGetSurface" );
    if( driver_CGLGetSurface == NULL ) {
      driver_CGLGetSurface = missing_CGLGetSurface;
    }
    dt.CGLGetSurface = MakeRegalProc(loader_CGLGetSurface, layer);

    _getProcAddress( driver_CGLSetCurrentContext, CGLSetCurrentContext, "CGLSetCurrentContext" );
    if( driver_CGLSetCurrentContext == NULL ) {
      driver_CGLSetCurrentContext = missing_CGLSetCurrentContext;
    }
    dt.CGLSetCurrentContext = MakeRegalProc(loader_CGLSetCurrentContext, layer);

    _getProcAddress( driver_CGLSetSurface, CGLSetSurface, "CGLSetSurface" );
    if( driver_CGLSetSurface == NULL ) {
      driver_CGLSetSurface = missing_CGLSetSurface;
    }
    dt.CGLSetSurface = MakeRegalProc(loader_CGLSetSurface, layer);

    _getProcAddress( driver_CGLTexImageIOSurface2D, CGLTexImageIOSurface2D, "CGLTexImageIOSurface2D" );
    if( driver_CGLTexImageIOSurface2D == NULL ) {
      driver_CGLTexImageIOSurface2D = missing_CGLTexImageIOSurface2D;
    }
    dt.CGLTexImageIOSurface2D = MakeRegalProc(loader_CGLTexImageIOSurface2D, layer);

    _getProcAddress( driver_CGLUpdateContext, CGLUpdateContext, "CGLUpdateContext" );
    if( driver_CGLUpdateContext == NULL ) {
      driver_CGLUpdateContext = missing_CGLUpdateContext;
    }
    dt.CGLUpdateContext = MakeRegalProc(loader_CGLUpdateContext, layer);

  #endif // REGAL_SYS_OSX

  #if REGAL_SYS_EGL

    // EGL_ANGLE_query_surface_pointer

    _getProcAddress( driver_eglQuerySurfacePointerANGLE, eglQuerySurfacePointerANGLE, "eglQuerySurfacePointerANGLE" );
    if( driver_eglQuerySurfacePointerANGLE == NULL ) {
      driver_eglQuerySurfacePointerANGLE = missing_eglQuerySurfacePointerANGLE;
    }
    dt.eglQuerySurfacePointerANGLE = MakeRegalProc(loader_eglQuerySurfacePointerANGLE, layer);

    // EGL_KHR_fence_sync

    _getProcAddress( driver_eglClientWaitSyncKHR, eglClientWaitSyncKHR, "eglClientWaitSyncKHR" );
    if( driver_eglClientWaitSyncKHR == NULL ) {
      driver_eglClientWaitSyncKHR = missing_eglClientWaitSyncKHR;
    }
    dt.eglClientWaitSyncKHR = MakeRegalProc(loader_eglClientWaitSyncKHR, layer);

    _getProcAddress( driver_eglCreateSyncKHR, eglCreateSyncKHR, "eglCreateSyncKHR" );
    if( driver_eglCreateSyncKHR == NULL ) {
      driver_eglCreateSyncKHR = missing_eglCreateSyncKHR;
    }
    dt.eglCreateSyncKHR = MakeRegalProc(loader_eglCreateSyncKHR, layer);

    _getProcAddress( driver_eglDestroySyncKHR, eglDestroySyncKHR, "eglDestroySyncKHR" );
    if( driver_eglDestroySyncKHR == NULL ) {
      driver_eglDestroySyncKHR = missing_eglDestroySyncKHR;
    }
    dt.eglDestroySyncKHR = MakeRegalProc(loader_eglDestroySyncKHR, layer);

    _getProcAddress( driver_eglGetSyncAttribKHR, eglGetSyncAttribKHR, "eglGetSyncAttribKHR" );
    if( driver_eglGetSyncAttribKHR == NULL ) {
      driver_eglGetSyncAttribKHR = missing_eglGetSyncAttribKHR;
    }
    dt.eglGetSyncAttribKHR = MakeRegalProc(loader_eglGetSyncAttribKHR, layer);

    // EGL_KHR_image_base

    _getProcAddress( driver_eglCreateImageKHR, eglCreateImageKHR, "eglCreateImageKHR" );
    if( driver_eglCreateImageKHR == NULL ) {
      driver_eglCreateImageKHR = missing_eglCreateImageKHR;
    }
    dt.eglCreateImageKHR = MakeRegalProc(loader_eglCreateImageKHR, layer);

    _getProcAddress( driver_eglDestroyImageKHR, eglDestroyImageKHR, "eglDestroyImageKHR" );
    if( driver_eglDestroyImageKHR == NULL ) {
      driver_eglDestroyImageKHR = missing_eglDestroyImageKHR;
    }
    dt.eglDestroyImageKHR = MakeRegalProc(loader_eglDestroyImageKHR, layer);

    // EGL_KHR_lock_surface

    _getProcAddress( driver_eglLockSurfaceKHR, eglLockSurfaceKHR, "eglLockSurfaceKHR" );
    if( driver_eglLockSurfaceKHR == NULL ) {
      driver_eglLockSurfaceKHR = missing_eglLockSurfaceKHR;
    }
    dt.eglLockSurfaceKHR = MakeRegalProc(loader_eglLockSurfaceKHR, layer);

    _getProcAddress( driver_eglUnlockSurfaceKHR, eglUnlockSurfaceKHR, "eglUnlockSurfaceKHR" );
    if( driver_eglUnlockSurfaceKHR == NULL ) {
      driver_eglUnlockSurfaceKHR = missing_eglUnlockSurfaceKHR;
    }
    dt.eglUnlockSurfaceKHR = MakeRegalProc(loader_eglUnlockSurfaceKHR, layer);

    // EGL_KHR_stream_consumer_gltexture

    _getProcAddress( driver_eglStreamConsumerAcquireKHR, eglStreamConsumerAcquireKHR, "eglStreamConsumerAcquireKHR" );
    if( driver_eglStreamConsumerAcquireKHR == NULL ) {
      driver_eglStreamConsumerAcquireKHR = missing_eglStreamConsumerAcquireKHR;
    }
    dt.eglStreamConsumerAcquireKHR = MakeRegalProc(loader_eglStreamConsumerAcquireKHR, layer);

    _getProcAddress( driver_eglStreamConsumerGLTextureExternalKHR, eglStreamConsumerGLTextureExternalKHR, "eglStreamConsumerGLTextureExternalKHR" );
    if( driver_eglStreamConsumerGLTextureExternalKHR == NULL ) {
      driver_eglStreamConsumerGLTextureExternalKHR = missing_eglStreamConsumerGLTextureExternalKHR;
    }
    dt.eglStreamConsumerGLTextureExternalKHR = MakeRegalProc(loader_eglStreamConsumerGLTextureExternalKHR, layer);

    _getProcAddress( driver_eglStreamConsumerReleaseKHR, eglStreamConsumerReleaseKHR, "eglStreamConsumerReleaseKHR" );
    if( driver_eglStreamConsumerReleaseKHR == NULL ) {
      driver_eglStreamConsumerReleaseKHR = missing_eglStreamConsumerReleaseKHR;
    }
    dt.eglStreamConsumerReleaseKHR = MakeRegalProc(loader_eglStreamConsumerReleaseKHR, layer);

    // EGL_KHR_stream_cross_process_fd

    _getProcAddress( driver_eglCreateStreamFromFileDescriptorKHR, eglCreateStreamFromFileDescriptorKHR, "eglCreateStreamFromFileDescriptorKHR" );
    if( driver_eglCreateStreamFromFileDescriptorKHR == NULL ) {
      driver_eglCreateStreamFromFileDescriptorKHR = missing_eglCreateStreamFromFileDescriptorKHR;
    }
    dt.eglCreateStreamFromFileDescriptorKHR = MakeRegalProc(loader_eglCreateStreamFromFileDescriptorKHR, layer);

    _getProcAddress( driver_eglGetStreamFileDescriptorKHR, eglGetStreamFileDescriptorKHR, "eglGetStreamFileDescriptorKHR" );
    if( driver_eglGetStreamFileDescriptorKHR == NULL ) {
      driver_eglGetStreamFileDescriptorKHR = missing_eglGetStreamFileDescriptorKHR;
    }
    dt.eglGetStreamFileDescriptorKHR = MakeRegalProc(loader_eglGetStreamFileDescriptorKHR, layer);

    // EGL_KHR_stream_producer_eglsurface

    _getProcAddress( driver_eglCreateStreamProducerSurfaceKHR, eglCreateStreamProducerSurfaceKHR, "eglCreateStreamProducerSurfaceKHR" );
    if( driver_eglCreateStreamProducerSurfaceKHR == NULL ) {
      driver_eglCreateStreamProducerSurfaceKHR = missing_eglCreateStreamProducerSurfaceKHR;
    }
    dt.eglCreateStreamProducerSurfaceKHR = MakeRegalProc(loader_eglCreateStreamProducerSurfaceKHR, layer);

    // EGL_KHR_wait_sync

    _getProcAddress( driver_eglWaitSyncKHR, eglWaitSyncKHR, "eglWaitSyncKHR" );
    if( driver_eglWaitSyncKHR == NULL ) {
      driver_eglWaitSyncKHR = missing_eglWaitSyncKHR;
    }
    dt.eglWaitSyncKHR = MakeRegalProc(loader_eglWaitSyncKHR, layer);

    // EGL_MESA_drm_image

    _getProcAddress( driver_eglCreateDRMImageMESA, eglCreateDRMImageMESA, "eglCreateDRMImageMESA" );
    if( driver_eglCreateDRMImageMESA == NULL ) {
      driver_eglCreateDRMImageMESA = missing_eglCreateDRMImageMESA;
    }
    dt.eglCreateDRMImageMESA = MakeRegalProc(loader_eglCreateDRMImageMESA, layer);

    _getProcAddress( driver_eglExportDRMImageMESA, eglExportDRMImageMESA, "eglExportDRMImageMESA" );
    if( driver_eglExportDRMImageMESA == NULL ) {
      driver_eglExportDRMImageMESA = missing_eglExportDRMImageMESA;
    }
    dt.eglExportDRMImageMESA = MakeRegalProc(loader_eglExportDRMImageMESA, layer);

    // EGL_NV_coverage_sample

    _getProcAddress( driver_eglCoverageMaskNV, eglCoverageMaskNV, "eglCoverageMaskNV" );
    if( driver_eglCoverageMaskNV == NULL ) {
      driver_eglCoverageMaskNV = missing_eglCoverageMaskNV;
    }
    dt.eglCoverageMaskNV = MakeRegalProc(loader_eglCoverageMaskNV, layer);

    _getProcAddress( driver_eglCoverageOperationNV, eglCoverageOperationNV, "eglCoverageOperationNV" );
    if( driver_eglCoverageOperationNV == NULL ) {
      driver_eglCoverageOperationNV = missing_eglCoverageOperationNV;
    }
    dt.eglCoverageOperationNV = MakeRegalProc(loader_eglCoverageOperationNV, layer);

    // EGL_NV_post_sub_buffer

    _getProcAddress( driver_eglPostSubBufferNV, eglPostSubBufferNV, "eglPostSubBufferNV" );
    if( driver_eglPostSubBufferNV == NULL ) {
      driver_eglPostSubBufferNV = missing_eglPostSubBufferNV;
    }
    dt.eglPostSubBufferNV = MakeRegalProc(loader_eglPostSubBufferNV, layer);

    // EGL_NV_sync

    _getProcAddress( driver_eglClientWaitSyncNV, eglClientWaitSyncNV, "eglClientWaitSyncNV" );
    if( driver_eglClientWaitSyncNV == NULL ) {
      driver_eglClientWaitSyncNV = missing_eglClientWaitSyncNV;
    }
    dt.eglClientWaitSyncNV = MakeRegalProc(loader_eglClientWaitSyncNV, layer);

    _getProcAddress( driver_eglCreateFenceSyncNV, eglCreateFenceSyncNV, "eglCreateFenceSyncNV" );
    if( driver_eglCreateFenceSyncNV == NULL ) {
      driver_eglCreateFenceSyncNV = missing_eglCreateFenceSyncNV;
    }
    dt.eglCreateFenceSyncNV = MakeRegalProc(loader_eglCreateFenceSyncNV, layer);

    _getProcAddress( driver_eglDestroySyncNV, eglDestroySyncNV, "eglDestroySyncNV" );
    if( driver_eglDestroySyncNV == NULL ) {
      driver_eglDestroySyncNV = missing_eglDestroySyncNV;
    }
    dt.eglDestroySyncNV = MakeRegalProc(loader_eglDestroySyncNV, layer);

    _getProcAddress( driver_eglFenceNV, eglFenceNV, "eglFenceNV" );
    if( driver_eglFenceNV == NULL ) {
      driver_eglFenceNV = missing_eglFenceNV;
    }
    dt.eglFenceNV = MakeRegalProc(loader_eglFenceNV, layer);

    _getProcAddress( driver_eglGetSyncAttribNV, eglGetSyncAttribNV, "eglGetSyncAttribNV" );
    if( driver_eglGetSyncAttribNV == NULL ) {
      driver_eglGetSyncAttribNV = missing_eglGetSyncAttribNV;
    }
    dt.eglGetSyncAttribNV = MakeRegalProc(loader_eglGetSyncAttribNV, layer);

    _getProcAddress( driver_eglSignalSyncNV, eglSignalSyncNV, "eglSignalSyncNV" );
    if( driver_eglSignalSyncNV == NULL ) {
      driver_eglSignalSyncNV = missing_eglSignalSyncNV;
    }
    dt.eglSignalSyncNV = MakeRegalProc(loader_eglSignalSyncNV, layer);

    // EGL_NV_system_time

    _getProcAddress( driver_eglGetSystemTimeFrequencyNV, eglGetSystemTimeFrequencyNV, "eglGetSystemTimeFrequencyNV" );
    if( driver_eglGetSystemTimeFrequencyNV == NULL ) {
      driver_eglGetSystemTimeFrequencyNV = missing_eglGetSystemTimeFrequencyNV;
    }
    dt.eglGetSystemTimeFrequencyNV = MakeRegalProc(loader_eglGetSystemTimeFrequencyNV, layer);

    _getProcAddress( driver_eglGetSystemTimeNV, eglGetSystemTimeNV, "eglGetSystemTimeNV" );
    if( driver_eglGetSystemTimeNV == NULL ) {
      driver_eglGetSystemTimeNV = missing_eglGetSystemTimeNV;
    }
    dt.eglGetSystemTimeNV = MakeRegalProc(loader_eglGetSystemTimeNV, layer);

    // EGL_VERSION_1_0

    _getProcAddress( driver_eglChooseConfig, eglChooseConfig, "eglChooseConfig" );
    if( driver_eglChooseConfig == NULL ) {
      driver_eglChooseConfig = missing_eglChooseConfig;
    }
    dt.eglChooseConfig = MakeRegalProc(loader_eglChooseConfig, layer);

    _getProcAddress( driver_eglCopyBuffers, eglCopyBuffers, "eglCopyBuffers" );
    if( driver_eglCopyBuffers == NULL ) {
      driver_eglCopyBuffers = missing_eglCopyBuffers;
    }
    dt.eglCopyBuffers = MakeRegalProc(loader_eglCopyBuffers, layer);

    _getProcAddress( driver_eglCreateContext, eglCreateContext, "eglCreateContext" );
    if( driver_eglCreateContext == NULL ) {
      driver_eglCreateContext = missing_eglCreateContext;
    }
    dt.eglCreateContext = MakeRegalProc(loader_eglCreateContext, layer);

    _getProcAddress( driver_eglCreatePbufferSurface, eglCreatePbufferSurface, "eglCreatePbufferSurface" );
    if( driver_eglCreatePbufferSurface == NULL ) {
      driver_eglCreatePbufferSurface = missing_eglCreatePbufferSurface;
    }
    dt.eglCreatePbufferSurface = MakeRegalProc(loader_eglCreatePbufferSurface, layer);

    _getProcAddress( driver_eglCreatePixmapSurface, eglCreatePixmapSurface, "eglCreatePixmapSurface" );
    if( driver_eglCreatePixmapSurface == NULL ) {
      driver_eglCreatePixmapSurface = missing_eglCreatePixmapSurface;
    }
    dt.eglCreatePixmapSurface = MakeRegalProc(loader_eglCreatePixmapSurface, layer);

    _getProcAddress( driver_eglCreateWindowSurface, eglCreateWindowSurface, "eglCreateWindowSurface" );
    if( driver_eglCreateWindowSurface == NULL ) {
      driver_eglCreateWindowSurface = missing_eglCreateWindowSurface;
    }
    dt.eglCreateWindowSurface = MakeRegalProc(loader_eglCreateWindowSurface, layer);

    _getProcAddress( driver_eglDestroyContext, eglDestroyContext, "eglDestroyContext" );
    if( driver_eglDestroyContext == NULL ) {
      driver_eglDestroyContext = missing_eglDestroyContext;
    }
    dt.eglDestroyContext = MakeRegalProc(loader_eglDestroyContext, layer);

    _getProcAddress( driver_eglDestroySurface, eglDestroySurface, "eglDestroySurface" );
    if( driver_eglDestroySurface == NULL ) {
      driver_eglDestroySurface = missing_eglDestroySurface;
    }
    dt.eglDestroySurface = MakeRegalProc(loader_eglDestroySurface, layer);

    _getProcAddress( driver_eglGetConfigAttrib, eglGetConfigAttrib, "eglGetConfigAttrib" );
    if( driver_eglGetConfigAttrib == NULL ) {
      driver_eglGetConfigAttrib = missing_eglGetConfigAttrib;
    }
    dt.eglGetConfigAttrib = MakeRegalProc(loader_eglGetConfigAttrib, layer);

    _getProcAddress( driver_eglGetConfigs, eglGetConfigs, "eglGetConfigs" );
    if( driver_eglGetConfigs == NULL ) {
      driver_eglGetConfigs = missing_eglGetConfigs;
    }
    dt.eglGetConfigs = MakeRegalProc(loader_eglGetConfigs, layer);

    _getProcAddress( driver_eglGetCurrentContext, eglGetCurrentContext, "eglGetCurrentContext" );
    if( driver_eglGetCurrentContext == NULL ) {
      driver_eglGetCurrentContext = missing_eglGetCurrentContext;
    }
    dt.eglGetCurrentContext = MakeRegalProc(loader_eglGetCurrentContext, layer);

    _getProcAddress( driver_eglGetCurrentDisplay, eglGetCurrentDisplay, "eglGetCurrentDisplay" );
    if( driver_eglGetCurrentDisplay == NULL ) {
      driver_eglGetCurrentDisplay = missing_eglGetCurrentDisplay;
    }
    dt.eglGetCurrentDisplay = MakeRegalProc(loader_eglGetCurrentDisplay, layer);

    _getProcAddress( driver_eglGetCurrentSurface, eglGetCurrentSurface, "eglGetCurrentSurface" );
    if( driver_eglGetCurrentSurface == NULL ) {
      driver_eglGetCurrentSurface = missing_eglGetCurrentSurface;
    }
    dt.eglGetCurrentSurface = MakeRegalProc(loader_eglGetCurrentSurface, layer);

    _getProcAddress( driver_eglGetDisplay, eglGetDisplay, "eglGetDisplay" );
    if( driver_eglGetDisplay == NULL ) {
      driver_eglGetDisplay = missing_eglGetDisplay;
    }
    dt.eglGetDisplay = MakeRegalProc(loader_eglGetDisplay, layer);

    _getProcAddress( driver_eglGetError, eglGetError, "eglGetError" );
    if( driver_eglGetError == NULL ) {
      driver_eglGetError = missing_eglGetError;
    }
    dt.eglGetError = MakeRegalProc(loader_eglGetError, layer);

    _getProcAddress( driver_eglGetProcAddress, eglGetProcAddress, "eglGetProcAddress" );
    if( driver_eglGetProcAddress == NULL ) {
      driver_eglGetProcAddress = missing_eglGetProcAddress;
    }
    dt.eglGetProcAddress = MakeRegalProc(loader_eglGetProcAddress, layer);

    _getProcAddress( driver_eglInitialize, eglInitialize, "eglInitialize" );
    if( driver_eglInitialize == NULL ) {
      driver_eglInitialize = missing_eglInitialize;
    }
    dt.eglInitialize = MakeRegalProc(loader_eglInitialize, layer);

    _getProcAddress( driver_eglMakeCurrent, eglMakeCurrent, "eglMakeCurrent" );
    if( driver_eglMakeCurrent == NULL ) {
      driver_eglMakeCurrent = missing_eglMakeCurrent;
    }
    dt.eglMakeCurrent = MakeRegalProc(loader_eglMakeCurrent, layer);

    _getProcAddress( driver_eglQueryContext, eglQueryContext, "eglQueryContext" );
    if( driver_eglQueryContext == NULL ) {
      driver_eglQueryContext = missing_eglQueryContext;
    }
    dt.eglQueryContext = MakeRegalProc(loader_eglQueryContext, layer);

    _getProcAddress( driver_eglQueryString, eglQueryString, "eglQueryString" );
    if( driver_eglQueryString == NULL ) {
      driver_eglQueryString = missing_eglQueryString;
    }
    dt.eglQueryString = MakeRegalProc(loader_eglQueryString, layer);

    _getProcAddress( driver_eglQuerySurface, eglQuerySurface, "eglQuerySurface" );
    if( driver_eglQuerySurface == NULL ) {
      driver_eglQuerySurface = missing_eglQuerySurface;
    }
    dt.eglQuerySurface = MakeRegalProc(loader_eglQuerySurface, layer);

    _getProcAddress( driver_eglSwapBuffers, eglSwapBuffers, "eglSwapBuffers" );
    if( driver_eglSwapBuffers == NULL ) {
      driver_eglSwapBuffers = missing_eglSwapBuffers;
    }
    dt.eglSwapBuffers = MakeRegalProc(loader_eglSwapBuffers, layer);

    _getProcAddress( driver_eglTerminate, eglTerminate, "eglTerminate" );
    if( driver_eglTerminate == NULL ) {
      driver_eglTerminate = missing_eglTerminate;
    }
    dt.eglTerminate = MakeRegalProc(loader_eglTerminate, layer);

    _getProcAddress( driver_eglWaitGL, eglWaitGL, "eglWaitGL" );
    if( driver_eglWaitGL == NULL ) {
      driver_eglWaitGL = missing_eglWaitGL;
    }
    dt.eglWaitGL = MakeRegalProc(loader_eglWaitGL, layer);

    _getProcAddress( driver_eglWaitNative, eglWaitNative, "eglWaitNative" );
    if( driver_eglWaitNative == NULL ) {
      driver_eglWaitNative = missing_eglWaitNative;
    }
    dt.eglWaitNative = MakeRegalProc(loader_eglWaitNative, layer);

    // EGL_VERSION_1_1

    _getProcAddress( driver_eglBindTexImage, eglBindTexImage, "eglBindTexImage" );
    if( driver_eglBindTexImage == NULL ) {
      driver_eglBindTexImage = missing_eglBindTexImage;
    }
    dt.eglBindTexImage = MakeRegalProc(loader_eglBindTexImage, layer);

    _getProcAddress( driver_eglReleaseTexImage, eglReleaseTexImage, "eglReleaseTexImage" );
    if( driver_eglReleaseTexImage == NULL ) {
      driver_eglReleaseTexImage = missing_eglReleaseTexImage;
    }
    dt.eglReleaseTexImage = MakeRegalProc(loader_eglReleaseTexImage, layer);

    // EGL_VERSION_1_2

    _getProcAddress( driver_eglBindAPI, eglBindAPI, "eglBindAPI" );
    if( driver_eglBindAPI == NULL ) {
      driver_eglBindAPI = missing_eglBindAPI;
    }
    dt.eglBindAPI = MakeRegalProc(loader_eglBindAPI, layer);

    _getProcAddress( driver_eglCreatePbufferFromClientBuffer, eglCreatePbufferFromClientBuffer, "eglCreatePbufferFromClientBuffer" );
    if( driver_eglCreatePbufferFromClientBuffer == NULL ) {
      driver_eglCreatePbufferFromClientBuffer = missing_eglCreatePbufferFromClientBuffer;
    }
    dt.eglCreatePbufferFromClientBuffer = MakeRegalProc(loader_eglCreatePbufferFromClientBuffer, layer);

    _getProcAddress( driver_eglQueryAPI, eglQueryAPI, "eglQueryAPI" );
    if( driver_eglQueryAPI == NULL ) {
      driver_eglQueryAPI = missing_eglQueryAPI;
    }
    dt.eglQueryAPI = MakeRegalProc(loader_eglQueryAPI, layer);

    _getProcAddress( driver_eglReleaseThread, eglReleaseThread, "eglReleaseThread" );
    if( driver_eglReleaseThread == NULL ) {
      driver_eglReleaseThread = missing_eglReleaseThread;
    }
    dt.eglReleaseThread = MakeRegalProc(loader_eglReleaseThread, layer);

    _getProcAddress( driver_eglSurfaceAttrib, eglSurfaceAttrib, "eglSurfaceAttrib" );
    if( driver_eglSurfaceAttrib == NULL ) {
      driver_eglSurfaceAttrib = missing_eglSurfaceAttrib;
    }
    dt.eglSurfaceAttrib = MakeRegalProc(loader_eglSurfaceAttrib, layer);

    _getProcAddress( driver_eglSwapInterval, eglSwapInterval, "eglSwapInterval" );
    if( driver_eglSwapInterval == NULL ) {
      driver_eglSwapInterval = missing_eglSwapInterval;
    }
    dt.eglSwapInterval = MakeRegalProc(loader_eglSwapInterval, layer);

    _getProcAddress( driver_eglWaitClient, eglWaitClient, "eglWaitClient" );
    if( driver_eglWaitClient == NULL ) {
      driver_eglWaitClient = missing_eglWaitClient;
    }
    dt.eglWaitClient = MakeRegalProc(loader_eglWaitClient, layer);

  #endif // REGAL_SYS_EGL

}

REGAL_NAMESPACE_END

#endif
